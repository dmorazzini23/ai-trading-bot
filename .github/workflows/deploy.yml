# Deploy workflow
# Builds and deploys Docker image to the production droplet after successful CI.
# Required secrets:
#   DROPLET_HOST, DROPLET_SSH_KEY, DOCKER_REGISTRY, DOCKER_USERNAME,
#   DOCKER_PASSWORD, DROPLET_ID, SENTRY_AUTH_TOKEN, SENTRY_ORG,
#   SENTRY_PROJECT, SLACK_WEBHOOK_URL
name: Deploy

on:
  workflow_run:
    workflows: ["CI and Test"]
    types:
      - completed

jobs:
  preflight:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Verify required secrets
        env:
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_SSH_KEY: ${{ secrets.DROPLET_SSH_KEY }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          set -e
          for var in DROPLET_HOST DROPLET_SSH_KEY DOCKER_REGISTRY DOCKER_USERNAME DOCKER_PASSWORD; do
            if [ -z "${!var}" ]; then
              echo "::error::Missing required secret $var"
              exit 1
            fi
          done

  deploy:
    needs: preflight
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    environment: production
    env:
      IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
      BOT_MODE: ${{ secrets.BOT_MODE }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Log in to Docker registry
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login "$DOCKER_REGISTRY" -u "$DOCKER_USERNAME" --password-stdin

      - name: Build Docker image
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
        run: docker build . -t $DOCKER_REGISTRY/$GITHUB_REPOSITORY:$IMAGE_TAG

      - name: Push Docker image
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
        run: docker push $DOCKER_REGISTRY/$GITHUB_REPOSITORY:$IMAGE_TAG

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.DROPLET_SSH_KEY }}

      - name: Deploy on Droplet
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DROPLET_HOST }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }}:${{ env.IMAGE_TAG }}
            docker stop ai-trader || true
            docker rm ai-trader  || true
            docker run -d \
              --name ai-trader \
              --restart always \
              -e BOT_MODE=$BOT_MODE \
              ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }}:${{ env.IMAGE_TAG }}

      - name: Debug workspace on failure
        if: failure()
        run: |
          echo "PWD: $(pwd)"
          ls -al

      - name: Health check
        run: |
          timeout 30 bash -c 'until curl --silent --fail http://localhost:5050/health; do sleep 1; done'

      - name: Post release to Sentry
        if: success()
        uses: getsentry/action-setup@v1

      - name: Finalize Sentry release
        if: success()
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        run: |
          set -e
          sentry-cli releases new $IMAGE_TAG
          sentry-cli releases finalize $IMAGE_TAG

      - name: Slack Notification
        if: ${{ success() || failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

