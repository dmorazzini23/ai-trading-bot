issue,file,line,snippet
empty_except,ai_trading/analysis/sentiment.py,59,"SENTIMENT_API_URL = getattr(config, ""SENTIMENT_API_URL"", ""https://newsapi.org/v2/everything"") | except ImportError: | # Fallback for testing environments"
empty_except,ai_trading/analysis/sentiment.py,84,"_FINBERT_MODEL = None | except ImportError: | # Mock for testing environments without transformers/torch"
empty_except,ai_trading/config/management.py,26,"return get_settings() | except ImportError: | return None"
empty_except,ai_trading/config/management.py,587,"load_dotenv(env_path, override=True) | except ImportError as e: | # dotenv not available, skip reload"
empty_except,ai_trading/config/management.py,621,"HALT_FLAG_PATH = os.getenv(""HALT_FLAG_PATH"", str(paths.DATA_DIR / ""halt.flag"")) | except ImportError: | # Fallback for when paths module is not available"
empty_except,ai_trading/config/management.py,787,"from .settings import Settings, get_settings | except ImportError: | # Fallback for missing dependencies - provide basic implementations"
empty_except,ai_trading/core/bot_engine.py,10,"return True | except Exception: | return False"
empty_except,ai_trading/core/bot_engine.py,40,"MEMORY_OPTIMIZATION_AVAILABLE = True | except ImportError: | # Fallback decorators if memory optimization not available"
empty_except,ai_trading/core/bot_engine.py,76,"from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker | except ImportError: | # Fallback if circuit breaker module not available"
empty_except,ai_trading/core/bot_engine.py,83,"from circuit_breaker import circuit_breaker, CircuitBreakerConfig, CircuitBreakerOpenError | except ImportError: | # Fallback if circuit_breaker module not available"
empty_except,ai_trading/core/bot_engine.py,110,"self._loaded = True | except ImportError: | # Create minimal fallback"
empty_except,ai_trading/core/bot_engine.py,149,"import numpy as np | except ImportError: | # Create fallback np object"
empty_except,ai_trading/core/bot_engine.py,249,"self._loaded = True | except ImportError: | # Create minimal fallback"
empty_except,ai_trading/core/bot_engine.py,290,"import pandas as pd | except ImportError: | # Create fallback pd object"
empty_except,ai_trading/core/bot_engine.py,474,"torch.manual_seed(SEED) | except ImportError: | # PyTorch not available - continue with deterministic fallback seed"
empty_except,ai_trading/core/bot_engine.py,744,"import portalocker | except ImportError: | # AI-AGENT-REF: portalocker not available, create minimal fallback"
empty_except,ai_trading/core/bot_engine.py,780,"import schedule | except ImportError: | # AI-AGENT-REF: schedule not available, create minimal fallback"
empty_except,ai_trading/core/bot_engine.py,795,"YFINANCE_AVAILABLE = True | except ImportError: | # AI-AGENT-REF: yfinance not available, create minimal fallback"
empty_except,ai_trading/core/bot_engine.py,892,"from bs4 import BeautifulSoup | except ImportError: | # AI-AGENT-REF: bs4 not available, create minimal fallback"
empty_except,ai_trading/core/bot_engine.py,906,"from flask import Flask | except ImportError: | # AI-AGENT-REF: flask not available, create minimal fallback"
empty_except,ai_trading/core/bot_engine.py,922,"from alpaca_api import alpaca_get, start_trade_updates_stream  # type: ignore | except ImportError: | # AI-AGENT-REF: alpaca_api not available, create minimal fallbacks"
empty_except,ai_trading/core/bot_engine.py,931,"from ai_trading.rebalancer import maybe_rebalance as original_rebalance  # type: ignore | except ImportError: | # AI-AGENT-REF: rebalancer not available, create minimal fallback"
empty_except,ai_trading/core/bot_engine.py,1008,"from sklearn.linear_model import BayesianRidge, Ridge | except ImportError: | # Provide mock classes for graceful degradation"
empty_except,ai_trading/core/bot_engine.py,1165,"import pybreaker | except ImportError: | # AI-AGENT-REF: pybreaker not available, create minimal fallback"
empty_except,ai_trading/core/bot_engine.py,1179,"from finnhub import FinnhubAPIException | except ImportError: | # AI-AGENT-REF: finnhub not available, create minimal fallback"
empty_except,ai_trading/core/bot_engine.py,1187,"from prometheus_client import Counter, Gauge, Histogram, start_http_server, REGISTRY | except ImportError: | # AI-AGENT-REF: prometheus_client not available, create minimal fallbacks"
empty_except,ai_trading/core/bot_engine.py,1242,") | except ValueError: | # Already registered (e.g., prior partial import). Reuse existing."
empty_except,ai_trading/core/bot_engine.py,1738,") | except Exception: | return ""unknown"""
empty_except,ai_trading/core/bot_engine.py,3264,"# The conversion will be handled by the meta-learning system when it reads the log | except ImportError:"
empty_except,ai_trading/core/bot_engine.py,3269,"_convert_audit_to_meta_format = lambda x: x | except Exception as e: | # Don't fail trade logging if meta-learning conversion fails"
empty_except,ai_trading/core/bot_engine.py,3316,"remote = {p.symbol: int(p.qty) for p in ctx.api.get_all_positions()} | except Exception: | return"
empty_except,ai_trading/core/bot_engine.py,3385,"open_orders = ctx.api.get_orders(GetOrdersRequest(status=QueryOrderStatus.OPEN)) | except Exception: | return"
empty_except,ai_trading/core/bot_engine.py,3812,"strategies = [BaseStrategy(), BaseStrategy()] | except ImportError: | # AI-AGENT-REF: fallback to base Strategy class for test environments"
empty_except,ai_trading/core/bot_engine.py,3873,"status = event.order.status | except AttributeError: | # Fallback for dict-like event objects"
empty_except,ai_trading/core/bot_engine.py,4643,"reason = ""margin breach"" | except Exception as e: | # Failed to check margin status - log error and treat as potential risk"
empty_except,ai_trading/core/bot_engine.py,4824,"positions = ctx.api.get_all_positions() | except Exception: | return {}"
empty_except,ai_trading/core/bot_engine.py,6302,"from ai_trading.indicators import rsi  # type: ignore | except ImportError: | # If indicators not available, fallback to simple logic"
empty_except,ai_trading/core/bot_engine.py,6312,"return close.iloc[-1] > ema_fast > ema_slow and rsi_val >= 55 | except Exception: | return False"
empty_except,ai_trading/core/bot_engine.py,6609,"return int(pos.qty) | except Exception: | return 0"
empty_except,ai_trading/core/bot_engine.py,7567,"df = standardize_ohlcv(df) | except Exception as e: | # OHLCV standardization failed - log warning but continue with raw data"
empty_except,ai_trading/core/bot_engine.py,7593,"feat[""atr""] = ta.atr(df[""high""], df[""low""], df[""close""], length=14) | except Exception: | # Fallback ATR proxy from close-to-close movement"
empty_except,ai_trading/core/bot_engine.py,8127,"eq = float(ef.read().strip() or 0) | except Exception: | return 0.0"
empty_except,ai_trading/core/bot_engine.py,8428,"return | except Exception as e: | # Metrics server connectivity check failed - continue with port search"
empty_except,ai_trading/core/bot_engine.py,9072,"ctx.risk_engine.wait_for_exposure_update(0.5) | except Exception as e: | # Risk engine update failed - log warning but continue"
empty_except,ai_trading/core/bot_engine.py,9540,"state.short_positions = {s for s, q in state.position_cache.items() if q < 0} | except Exception as e: | # Failed to refresh position cache - log error but continue"
empty_except,ai_trading/core/bot_engine.py,10065,"api.submit_order(symbol, 1, side) | except Exception as e: | # Order submission failed - log error and add to failed orders"
empty_except,ai_trading/core/hyperparams_schema.py,18,"PYDANTIC_AVAILABLE = True | except ImportError: | # Fallback for testing environments"
empty_except,ai_trading/data/splits.py,23,"from sklearn.model_selection import BaseCrossValidator | except ImportError: | # Fallback base class if sklearn not available"
empty_except,ai_trading/data/splits.py,202,"purged_train.append(idx) | except Exception: | # If there's any issue with the time comparison,"
empty_except,ai_trading/data_fetcher.py,96,"_session.timeout = (10, 30)  # (connect_timeout, read_timeout) | except Exception as e: | # AI-AGENT-REF: Ensure proper session cleanup on initialization failure"
empty_except,ai_trading/data_fetcher.py,169,"import pandas as pd | except ImportError: | # AI-AGENT-REF: pandas not available, create minimal fallback"
empty_except,ai_trading/data_fetcher.py,387,"return result | except ImportError as e: | # pandas_real not available in test environment - log and continue"
empty_except,ai_trading/data_fetcher.py,424,"return parsed | except ValueError as e: | # Date parsing failed with this format, try next format"
empty_except,ai_trading/data_fetcher.py,1333,"return timeframe | except ImportError: | # Fallback when alpaca not available"
empty_except,ai_trading/data_fetcher.py,1486,"logger.warning(""Unexpected batch frame structure; partial results returned"") | except ImportError: | # Fallback to individual fetches if Alpaca not available"
empty_except,ai_trading/env.py,6,"from dotenv import load_dotenv | except ImportError: | # Fallback if dotenv is not available"
empty_except,ai_trading/execution/__init__.py,26,"from .engine import Order, ExecutionAlgorithm | except ImportError: | # Create placeholder classes if not available"
empty_except,ai_trading/execution/debug_tracker.py,175,"self._active_orders[correlation_id]['status'] = OrderStatus.CANCELLED.value | except Exception as e: | # AI-AGENT-REF: Graceful error handling for lock operations"
empty_except,ai_trading/execution/engine.py,244,"return False | except ImportError:"
empty_except,ai_trading/execution/engine.py,425,"reconcile_positions_and_orders() | except ImportError as e: | # Reconciliation module not available - log debug info"
empty_except,ai_trading/execution/live_trading.py,23,"from ai_trading.config import get_alpaca_config | except ImportError: | # Fallback for development"
empty_except,ai_trading/execution/live_trading.py,472,"} | except ImportError:"
empty_except,ai_trading/execution/live_trading.py,514,"} | except ImportError: | return {""id"": order_id, ""status"": ""unknown""}"
empty_except,ai_trading/execution/live_trading.py,531,"} | except ImportError: | return {""equity"": ""unknown"", ""buying_power"": ""unknown""}"
empty_except,ai_trading/execution/live_trading.py,552,"] | except ImportError: | return []"
empty_except,ai_trading/features/pipeline.py,25,"sklearn_available = True | except ImportError: | # Fallback classes if sklearn not available"
empty_except,ai_trading/health_monitor.py,283,"await self._monitor_task | except asyncio.CancelledError: | pass"
empty_except,ai_trading/indicators.py,43,"from numba import jit | except ImportError: | # AI-AGENT-REF: numba fallback"
empty_except,ai_trading/logging.py,19,"from ai_trading.config import management as config | except ImportError: | # Fallback for testing when config module is not available"
empty_except,ai_trading/logging.py,29,"from ai_trading.monitoring import metrics as metrics_logger | except ImportError: | # Fallback for testing when monitoring module is not available"
empty_except,ai_trading/logging.py,195,"_listener.stop() | except Exception as e: | # Log cleanup errors but don't fail shutdown"
empty_except,ai_trading/logging.py,494,"import psutil | except ImportError: | # Fallback when psutil is not available"
empty_except,ai_trading/logging.py,515,"return context | except Exception as e:"
empty_except,ai_trading/main.py,23,"PERFORMANCE_MONITORING_AVAILABLE = True | except ImportError: | # Fallback if modules not available"
empty_except,ai_trading/main.py,169,"start_api(api_ready)  # Pass the ready signal to be set before blocking run | except Exception as e: | # AI-AGENT-REF: Add proper timeout error handling for API startup synchronization"
empty_except,ai_trading/main.py,198,"raise RuntimeError(""API startup timeout - trading cannot proceed without API ready"") | except RuntimeError: | # Re-raise runtime errors as-is"
empty_except,ai_trading/main.py,201,"raise | except Exception as e: | # Handle any other synchronization errors"
empty_except,ai_trading/market/calendars.py,17,"import pandas as pd | except ImportError: | # Create mock pandas for test environments"
empty_except,ai_trading/meta_learning.py,15,"import config  # AI-AGENT-REF: access centralized log paths | except ImportError: | # Fallback for testing environments"
empty_except,ai_trading/meta_learning.py,26,"import metrics_logger | except ImportError: | # Mock metrics_logger for testing"
empty_except,ai_trading/meta_learning.py,1461,"from portfolio_rl import PortfolioReinforcementLearner | except ImportError: | # Mock for testing environments"
empty_except,ai_trading/monitoring/__init__.py,38,"from .metrics import MetricsCollector, PerformanceMonitor | except ImportError: | # Create placeholder classes if not available"
empty_except,ai_trading/monitoring/__init__.py,47,"from .alerts import AlertType | except ImportError: | # Create placeholder if not available"
empty_except,ai_trading/monitoring/__init__.py,54,"from .dashboard import RealtimeMetrics | except ImportError: | # Create placeholder if not available"
empty_except,ai_trading/paths.py,19,"path.mkdir(parents=True, exist_ok=True) | except OSError as e: | # In restricted environments (e.g., systemd with ProtectSystem/ProtectHome),"
empty_except,ai_trading/portfolio/weights.py,15,"from ai_trading.utils import get_latest_close  # local util | except Exception: | # minimal fallback to avoid hard crash"
empty_except,ai_trading/position/correlation_analyzer.py,24,"import pandas as pd | except ImportError: | # Use fallback implementations"
empty_except,ai_trading/position/correlation_analyzer.py,322,"return 1.0  # Normal correlation | except Exception:"
empty_except,ai_trading/position/correlation_analyzer.py,446,"return None | except Exception:"
empty_except,ai_trading/position/correlation_analyzer.py,464,"return aligned_data1, aligned_data2 | except Exception:"
empty_except,ai_trading/position/correlation_analyzer.py,551,"return sum(correlations) / len(correlations) if correlations else 0.0 | except Exception:"
empty_except,ai_trading/position/correlation_analyzer.py,693,"return 0.0 | except Exception:"
empty_except,ai_trading/position/intelligent_manager.py,30,"import pandas as pd | except ImportError: | # Use fallback implementations"
empty_except,ai_trading/position/intelligent_manager.py,569,"return quantity_to_sell, percentage_to_sell, target_price, stop_price | except Exception:"
empty_except,ai_trading/position/intelligent_manager.py,619,"return 0.0 | except Exception:"
empty_except,ai_trading/position/legacy_manager.py,187,"return [] | except Exception: | return []"
empty_except,ai_trading/position/legacy_manager.py,350,"return 0.0 | except Exception:"
empty_except,ai_trading/position/legacy_manager.py,362,"return 0 | except Exception: | return 0"
empty_except,ai_trading/position/legacy_manager.py,413,"return score | except Exception:"
empty_except,ai_trading/position/market_regime.py,23,"import pandas as pd | except ImportError: | # Use fallback implementations"
empty_except,ai_trading/position/market_regime.py,230,"return None | except Exception:"
empty_except,ai_trading/position/market_regime.py,276,"} | except Exception:"
empty_except,ai_trading/position/market_regime.py,314,"} | except Exception:"
empty_except,ai_trading/position/market_regime.py,350,"} | except Exception:"
empty_except,ai_trading/position/market_regime.py,381,"return {'score': mean_reversion_score} | except Exception:"
empty_except,ai_trading/position/market_regime.py,402,"return rsi.iloc[-1] if not pd.isna(rsi.iloc[-1]) else 50.0 | except Exception:"
empty_except,ai_trading/position/market_regime.py,455,"return max(0.0, min(1.0, confidence)) | except Exception:"
empty_except,ai_trading/position/market_regime.py,473,"return duration | except Exception:"
empty_except,ai_trading/position/profit_taking.py,23,"import pandas as pd | except ImportError: | # Use fallback implementations"
empty_except,ai_trading/position/profit_taking.py,267,"return velocity | except Exception:"
empty_except,ai_trading/position/profit_taking.py,426,"return False | except Exception:"
empty_except,ai_trading/position/profit_taking.py,500,"return resistance_levels[:3]  # Return top 3 levels | except Exception:"
empty_except,ai_trading/position/profit_taking.py,529,"return target | except Exception:"
empty_except,ai_trading/position/profit_taking.py,548,"return 0.0 | except Exception:"
empty_except,ai_trading/position/profit_taking.py,567,"return None | except Exception:"
empty_except,ai_trading/position/profit_taking.py,588,"return rsi.iloc[-1] if not pd.isna(rsi.iloc[-1]) else 50.0 | except Exception:"
empty_except,ai_trading/position/technical_analyzer.py,23,"import pandas as pd | except ImportError: | # Use fallback implementations"
empty_except,ai_trading/position/trailing_stops.py,23,"import pandas as pd | except ImportError: | # Use fallback implementations"
empty_except,ai_trading/production_system.py,556,"self.account_equity > 0) | except Exception: | # Any error in health check should return unhealthy status"
empty_except,ai_trading/rebalancer.py,822,"maybe_rebalance(ctx) | except StopIteration: | # AI-AGENT-REF: Allow tests to break out of the loop"
empty_except,ai_trading/risk/__init__.py,41,"from .metrics import RiskMetricsCalculator, DrawdownAnalyzer | except ImportError: | # Create placeholder classes if metrics module doesn't exist"
empty_except,ai_trading/risk/adaptive_sizing.py,242,"return normalized_slope * 252  # Annualize | except Exception:"
empty_except,ai_trading/risk/adaptive_sizing.py,262,"return statistics.stdev(recent_returns) * math.sqrt(252) | except Exception:"
empty_except,ai_trading/risk/adaptive_sizing.py,283,"return self._get_percentile_rank(current_vol, historical_vols) | except Exception:"
empty_except,ai_trading/risk/adaptive_sizing.py,308,"return max(-1.0, min(1.0, correlation))  # Clamp to [-1, 1] | except Exception:"
empty_except,ai_trading/risk/kelly.py,25,"_DEFAULT_CONFIG = TradingConfig.from_env() | except ImportError: | # Fallback if config import fails"
empty_except,ai_trading/risk/position_sizing.py,394,"return min(1.0, risk_estimate)  # Cap at 100% | except Exception:"
empty_except,ai_trading/risk/pre_trade_validation.py,731,") | except Exception as e:"
empty_except,ai_trading/rl_trading/tests/smoke_parity.py,116,"logger.info(f""    Postprocessed action: {action_details['action']} (confidence: {action_details['confidence']:.2f})"") | except Exception as e:"
empty_except,ai_trading/rl_trading/train.py,24,"sb3_available = True | except Exception as e: | # Catch broader failures (e.g., Torch partial installs raising AttributeError during import)"
empty_except,ai_trading/rl_trading/train.py,238,"return 0.0 | except Exception:"
empty_except,ai_trading/runner.py,92,"_maybe_warm_cache(state.ctx)  # best-effort; ignores if disabled or already warmed | except Exception as e: | # Cache warming failed - log warning but continue execution"
empty_except,ai_trading/scheduler/aligned_clock.py,90,"return utc_now.astimezone(exchange_tz) | except ImportError: | pass"
empty_except,ai_trading/security.py,222,"return True | except Exception: | # Any decoding error means it's not a valid token"
empty_except,ai_trading/signals.py,29,"from ai_trading.utils import pd | except ImportError: | # Create minimal fallback"
empty_except,ai_trading/signals.py,84,"return df['close'].iloc[-1] | except Exception: | return 1e-3"
empty_except,ai_trading/signals.py,110,"logger.info(""Portfolio optimization modules loaded successfully"") | except ImportError: | # Import settings to check if portfolio features are enabled"
empty_except,ai_trading/signals.py,130,"from ai_trading.position.legacy_manager import PositionManager | except ImportError: | # Fallback if position_manager not available"
empty_except,ai_trading/signals.py,304,"data.to_parquet(cache_path, engine=""pyarrow"") | except OSError as e: | # Cache write failed - log but continue execution"
empty_except,ai_trading/strategies/__init__.py,35,"from .base import BaseStrategy, StrategySignal | except ImportError: | # Create placeholder classes if not available"
empty_except,ai_trading/strategies/regime_detector.py,425,"return None | except Exception:"
empty_except,ai_trading/strategies/regime_detector.py,447,"return max(0.0, min(1.0, confidence)) | except Exception:"
empty_except,ai_trading/trade_logic.py,41,"recent_gain = (last_price - prev_price) / max(prev_price, 1e-9) | except Exception: | # if indexing fails return False"
empty_except,ai_trading/utils/base.py,382,"return et_time.weekday() >= 5  # Saturday=5, Sunday=6 | except Exception: | # Fallback to UTC weekday"
empty_except,ai_trading/utils/base.py,402,"return schedule.empty | except ImportError:"
empty_except,ai_trading/utils/determinism.py,48,"tf.random.set_seed(seed) | except ImportError: | pass"
empty_except,ai_trading/utils/determinism.py,60,"torch.backends.cudnn.benchmark = False | except ImportError: | pass"
mutable_default,ai_trading/health_monitor.py,80,"def __init__(self, | name: str,"
mutable_default,ai_trading/shutdown_handler.py,139,"def register_pre_shutdown_hook(self, hook: Callable[[], None]) -> None: | """"""Register a pre-shutdown hook."""""""
mutable_default,ai_trading/shutdown_handler.py,144,"def register_position_handler(self, handler: Callable[[], List[Dict[str, Any]]]) -> None: | """"""Register a position handler that returns list of positions to close."""""""
mutable_default,ai_trading/shutdown_handler.py,149,"def register_order_handler(self, handler: Callable[[], List[Dict[str, Any]]]) -> None: | """"""Register an order handler that returns list of orders to cancel."""""""
mutable_default,ai_trading/shutdown_handler.py,154,"def register_cleanup_hook(self, hook: Callable[[], None]) -> None: | """"""Register a cleanup hook."""""""
mutable_default,ai_trading/shutdown_handler.py,159,"def register_post_shutdown_hook(self, hook: Callable[[], None]) -> None: | """"""Register a post-shutdown hook."""""""
time_sleep_in_async,ai_trading/core/bot_engine.py,3866,"# They will be initialized on-demand by the functions that need them."
time_sleep_in_async,ai_trading/integrations/rate_limit.py,197,"return True, 0.0 | async def acquire(self, route: str, tokens: int = 1, timeout: Optional[float] = None) -> bool:"
