warning: The top-level linter settings are deprecated in favour of their counterparts in the `lint` section. Please update the following options in `pyproject.toml`:
  - 'extend-select' -> 'lint.extend-select'
  - 'ignore' -> 'lint.ignore'
  - 'select' -> 'lint.select'
BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/app.py:20:16
   |
18 |         try:
19 |             from ai_trading.alpaca_api import ALPACA_AVAILABLE as sdk_ok  # type: ignore
20 |         except Exception:
   |                ^^^^^^^^^
21 |             sdk_ok = False
22 |         try:
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/app.py:30:16
   |
28 |             key, secret, base_url = _resolve_alpaca_env()
29 |             paper = bool(base_url and ("paper" in base_url))
30 |         except Exception:
   |                ^^^^^^^^^
31 |             trading_client, key, secret, base_url, paper = None, None, None, "", False
32 |         shadow = bool(
   |

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/artifacts.py:1:1
  |
1 | import os
  | ^^^^^^^^^
2 |
3 | def get_model_registry_dir(base: str) -> str:
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/broker/alpaca.py:1:1
   |
 1 | / from __future__ import annotations
 2 | |
 3 | | from collections.abc import Callable, Iterable
 4 | | from typing import Any, Optional
 5 | | from types import SimpleNamespace
 6 | |
 7 | | from ai_trading.alpaca_api import ALPACA_AVAILABLE
 8 | | from ai_trading.logging import get_logger
 9 | | from ai_trading.utils.retry import retry_call  # AI-AGENT-REF: retry helper
   | |_____________________________________________^
10 |
11 |   try:  # AI-AGENT-REF: Stage 2.1 optional requests import
   |
help: Organize imports

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/broker/alpaca.py:226:49
    |
224 |         return positions
225 |
226 |     def get_open_position(self, symbol: str) -> Optional[Any]:
    |                                                 ^^^^^^^^^^^^^
227 |         """Return a single open position object or None."""  # AI-AGENT-REF
228 |         try:
    |
help: Convert to `X | None`

UP035 [*] Import from `collections.abc` instead: `Mapping`
 --> ai_trading/broker/alpaca_credentials.py:5:1
  |
3 | import os
4 | from dataclasses import dataclass
5 | from typing import Mapping
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^
6 |
7 | from ai_trading.logging import get_logger
  |
help: Import from `collections.abc`

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/broker/alpaca_credentials.py:38:12
   |
36 |         import alpaca_trade_api  # type: ignore  # noqa: F401
37 |         return True
38 |     except Exception:  # pragma: no cover - optional dep
   |            ^^^^^^^^^
39 |         return False
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/config/__init__.py:63:12
   |
62 |         load_dotenv(override=True)
63 |     except Exception:
   |            ^^^^^^^^^
64 |         pass
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/config/__init__.py:114:20
    |
112 |             try:
113 |                 get_settings.cache_clear()
114 |             except Exception:
    |                    ^^^^^^^^^
115 |                 pass
116 |             _perform_env_validation()
    |

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/config/alpaca.py:1:1
  |
1 | / from __future__ import annotations
2 | |
3 | | from dataclasses import dataclass
4 | | from typing import Any, Mapping, Tuple
5 | |
6 | | from .settings import get_settings, broker_keys
  | |_______________________________________________^
  |
help: Organize imports

UP035 [*] Import from `collections.abc` instead: `Mapping`
 --> ai_trading/config/alpaca.py:4:1
  |
3 | from dataclasses import dataclass
4 | from typing import Any, Mapping, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
5 |
6 | from .settings import get_settings, broker_keys
  |
help: Import from `collections.abc`

UP035 `typing.Tuple` is deprecated, use `tuple` instead
 --> ai_trading/config/alpaca.py:4:1
  |
3 | from dataclasses import dataclass
4 | from typing import Any, Mapping, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
5 |
6 | from .settings import get_settings, broker_keys
  |

F401 [*] `typing.Tuple` imported but unused
 --> ai_trading/config/alpaca.py:4:34
  |
3 | from dataclasses import dataclass
4 | from typing import Any, Mapping, Tuple
  |                                  ^^^^^
5 |
6 | from .settings import get_settings, broker_keys
  |
help: Remove unused import: `typing.Tuple`

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/config/settings.py:1:1
   |
 1 | / import os
 2 | | from functools import lru_cache
 3 | |
 4 | | from ai_trading.settings import (
 5 | |     Settings,
 6 | |     _secret_to_str,
 7 | |     get_settings as _base_get_settings,
 8 | | )  # AI-AGENT-REF: canonical settings
   | |_^
 9 |
10 |   TICKERS_FILE = os.getenv("AI_TRADER_TICKERS_FILE", "tickers.csv")
   |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/core/hyperparams_schema.py:189:12
    |
187 |         logger.error(f"Invalid JSON in hyperparams file {file_path}: {e}")
188 |         return HyperparametersSchema()
189 |     except Exception as e:
    |            ^^^^^^^^^
190 |         logger.error(f"Error loading hyperparams from {file_path}: {e}")
191 |         return HyperparametersSchema()
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/core/hyperparams_schema.py:230:12
    |
228 |         return True
229 |
230 |     except Exception as e:
    |            ^^^^^^^^^
231 |         logger.error(f"Error saving hyperparams to {file_path}: {e}")
232 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/core/hyperparams_schema.py:307:20
    |
305 |                 HyperparametersSchema(**data)
306 |                 report["valid_schema"] = True
307 |             except Exception as e:
    |                    ^^^^^^^^^
308 |                 report["errors"].append(f"Schema validation failed: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/core/hyperparams_schema.py:312:16
    |
310 |         except json.JSONDecodeError as e:
311 |             report["errors"].append(f"Invalid JSON: {e}")
312 |         except Exception as e:
    |                ^^^^^^^^^
313 |             report["errors"].append(f"File read error: {e}")
314 |     else:
    |

F401 [*] `logging` imported but unused
  --> ai_trading/core/parameter_validator.py:8:8
   |
 6 | """
 7 |
 8 | import logging
   |        ^^^^^^^
 9 | from datetime import UTC, datetime
10 | from typing import Any
   |
help: Remove unused import: `logging`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/core/parameter_validator.py:125:16
    |
123 |             return validation_result
124 |
125 |         except Exception as e:
    |                ^^^^^^^^^
126 |             logger.error(f"Error during parameter validation: {e}")
127 |             validation_result["overall_status"] = "ERROR"
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/core/parameter_validator.py:186:16
    |
184 |             return result
185 |
186 |         except Exception as e:
    |                ^^^^^^^^^
187 |             logger.error(f"Error validating parameter change for {parameter_name}: {e}")
188 |             result["status"] = "ERROR"
    |

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/core/protocols.py:1:1
  |
1 | / from __future__ import annotations
2 | | from typing import Protocol, Sequence, Mapping, Any
  | |___________________________________________________^
  |
help: Organize imports

UP035 [*] Import from `collections.abc` instead: `Sequence`, `Mapping`
 --> ai_trading/core/protocols.py:2:1
  |
1 | from __future__ import annotations
2 | from typing import Protocol, Sequence, Mapping, Any
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
help: Import from `collections.abc`

UP037 [*] Remove quotes from type annotation
 --> ai_trading/core/protocols.py:6:71
  |
5 | class AllocatorProtocol(Protocol):
6 |     def allocate(self, signals: Sequence[Mapping[str, Any]], runtime: "BotRuntime") -> Mapping[str, Any]: ...
  |                                                                       ^^^^^^^^^^^^
  |
help: Remove quotes

F821 Undefined name `BotRuntime`
 --> ai_trading/core/protocols.py:6:72
  |
5 | class AllocatorProtocol(Protocol):
6 |     def allocate(self, signals: Sequence[Mapping[str, Any]], runtime: "BotRuntime") -> Mapping[str, Any]: ...
  |                                                                        ^^^^^^^^^^
  |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/data/bars.py:1:1
   |
 1 | / from __future__ import annotations
 2 | |
 3 | | from datetime import UTC, date, datetime, timedelta
 4 | | from typing import Any
 5 | | from zoneinfo import ZoneInfo
 6 | |
 7 | | import pandas as pd
 8 | |
 9 | | from ai_trading.data.market_calendar import previous_trading_session, rth_session_utc
10 | | from ai_trading.data_fetcher import get_bars, get_minute_df
11 | | from ai_trading.data_fetcher import get_bars as http_get_bars  # AI-AGENT-REF: fallback helpers
12 | | from ai_trading.config import get_settings
13 | | from ai_trading.logging import get_logger
14 | | from ai_trading.logging.empty_policy import (
15 | |     classify as _empty_classify,
16 | | )
17 | | from ai_trading.logging.empty_policy import (
18 | |     record as _empty_record,
19 | | )
20 | | from ai_trading.logging.empty_policy import (
21 | |     should_emit as _empty_should_emit,
22 | | )
23 | | from ai_trading.logging.normalize import (  # AI-AGENT-REF: central canonicalizers
24 | |     canon_feed as _canon_feed,
25 | | )
26 | | from ai_trading.logging.normalize import (
27 | |     canon_timeframe as _canon_tf,
28 | | )
29 | | from ai_trading.utils.time import now_utc
30 | |
31 | | from .timeutils import ensure_utc_datetime, expected_regular_minutes
   | |____________________________________________________________________^
32 |
33 |   _log = get_logger(__name__)
   |
help: Organize imports

E741 Ambiguous variable name: `l`
   --> ai_trading/data/bars.py:303:9
    |
301 |         o = mkt["open"].resample("1D").first()
302 |         h = mkt["high"].resample("1D").max()
303 |         l = mkt["low"].resample("1D").min()
    |         ^
304 |         c = mkt["close"].resample("1D").last()
305 |         v = mkt.get("volume")
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/data/corp_actions.py:8:1
   |
 6 |   """
 7 |
 8 | / import logging
 9 | | import json
10 | | from datetime import date
11 | | from typing import Dict, List, Optional, Tuple, Union
12 | | from dataclasses import dataclass, asdict
13 | | from pathlib import Path
14 | | import pandas as pd
   | |___________________^
15 |
16 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> ai_trading/data/corp_actions.py:11:1
   |
 9 | import json
10 | from datetime import date
11 | from typing import Dict, List, Optional, Tuple, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 | from dataclasses import dataclass, asdict
13 | from pathlib import Path
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> ai_trading/data/corp_actions.py:11:1
   |
 9 | import json
10 | from datetime import date
11 | from typing import Dict, List, Optional, Tuple, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 | from dataclasses import dataclass, asdict
13 | from pathlib import Path
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> ai_trading/data/corp_actions.py:11:1
   |
 9 | import json
10 | from datetime import date
11 | from typing import Dict, List, Optional, Tuple, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 | from dataclasses import dataclass, asdict
13 | from pathlib import Path
   |

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> ai_trading/data/corp_actions.py:83:24
   |
82 |         # Registry of actions by symbol
83 |         self._actions: Dict[str, List[CorporateAction]] = {}
   |                        ^^^^
84 |         
85 |         # Load existing action data
   |
help: Replace with `dict`

UP006 [*] Use `list` instead of `List` for type annotation
  --> ai_trading/data/corp_actions.py:83:34
   |
82 |         # Registry of actions by symbol
83 |         self._actions: Dict[str, List[CorporateAction]] = {}
   |                                  ^^^^
84 |         
85 |         # Load existing action data
   |
help: Replace with `list`

UP015 [*] Unnecessary mode argument
  --> ai_trading/data/corp_actions.py:94:41
   |
92 |         if actions_file.exists():
93 |             try:
94 |                 with open(actions_file, 'r') as f:
   |                                         ^^^
95 |                     data = json.load(f)
   |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/data/corp_actions.py:108:20
    |
106 |                 self.logger.info(f"Loaded {len(self._actions)} symbols with corporate actions")
107 |                 
108 |             except Exception as e:
    |                    ^^^^^^^^^
109 |                 self.logger.error(f"Error loading corporate actions: {e}")
110 |                 self._actions = {}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/data/corp_actions.py:132:16
    |
130 |             self.logger.debug(f"Saved corporate actions to {actions_file}")
131 |             
132 |         except Exception as e:
    |                ^^^^^^^^^
133 |             self.logger.error(f"Error saving corporate actions: {e}")
    |

UP007 [*] Use `X | Y` for type annotations
   --> ai_trading/data/corp_actions.py:138:18
    |
136 |         self,
137 |         symbol: str,
138 |         ex_date: Union[date, str],
    |                  ^^^^^^^^^^^^^^^^
139 |         action_type: str,
140 |         ratio: float,
    |
help: Convert to `X | Y`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/data/corp_actions.py:185:21
    |
183 |         self,
184 |         symbol: str,
185 |         start_date: Optional[date] = None,
    |                     ^^^^^^^^^^^^^^
186 |         end_date: Optional[date] = None
187 |     ) -> List[CorporateAction]:
    |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/data/corp_actions.py:186:19
    |
184 |         symbol: str,
185 |         start_date: Optional[date] = None,
186 |         end_date: Optional[date] = None
    |                   ^^^^^^^^^^^^^^
187 |     ) -> List[CorporateAction]:
188 |         """
    |
help: Convert to `X | None`

UP006 [*] Use `list` instead of `List` for type annotation
   --> ai_trading/data/corp_actions.py:187:10
    |
185 |         start_date: Optional[date] = None,
186 |         end_date: Optional[date] = None
187 |     ) -> List[CorporateAction]:
    |          ^^^^
188 |         """
189 |         Get corporate actions for symbol within date range.
    |
help: Replace with `list`

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
   --> ai_trading/data/corp_actions.py:219:10
    |
217 |         reference_date: date,
218 |         target_date: date
219 |     ) -> Tuple[float, float]:
    |          ^^^^^
220 |         """
221 |         Get cumulative adjustment factors between two dates.
    |
help: Replace with `tuple`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/data/corp_actions.py:264:19
    |
263 | # Global registry instance
264 | _global_registry: Optional[CorporateActionRegistry] = None
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/data/corp_actions.py:278:21
    |
276 |     bars: pd.DataFrame,
277 |     symbol: str,
278 |     reference_date: Optional[date] = None
    |                     ^^^^^^^^^^^^^^
279 | ) -> pd.DataFrame:
280 |     """
    |
help: Convert to `X | None`

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/data/labels.py:8:1
   |
 6 |   """
 7 |
 8 | / import numpy as np
 9 | | import pandas as pd
10 | | from typing import Union, Optional
11 | | import logging
12 | |
13 | | # Use the centralized logger as per AGENTS.md
14 | | from ai_trading.logging import logger
   | |_____________________________________^
   |
help: Organize imports

F401 [*] `logging` imported but unused
  --> ai_trading/data/labels.py:11:8
   |
 9 | import pandas as pd
10 | from typing import Union, Optional
11 | import logging
   |        ^^^^^^^
12 |
13 | # Use the centralized logger as per AGENTS.md
   |
help: Remove unused import: `logging`

UP007 [*] Use `X | Y` for type annotations
  --> ai_trading/data/labels.py:18:13
   |
17 | def fixed_horizon_return(
18 |     prices: Union[pd.Series, pd.DataFrame],
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
19 |     horizon_bars: int,
20 |     fee_bps: float = 0.0
   |
help: Convert to `X | Y`

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/data/labels.py:60:12
   |
58 |         return net_returns
59 |         
60 |     except Exception as e:
   |            ^^^^^^^^^
61 |         logger.error(f"Error calculating fixed horizon returns: {e}")
62 |         return pd.Series(dtype=float)
   |

UP007 [*] Use `X | Y` for type annotations
  --> ai_trading/data/labels.py:66:13
   |
65 | def triple_barrier_labels(
66 |     prices: Union[pd.Series, pd.DataFrame],
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
67 |     events: Optional[pd.DataFrame] = None,
68 |     pt_sl: Optional[tuple] = None,
   |
help: Convert to `X | Y`

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/data/labels.py:67:13
   |
65 | def triple_barrier_labels(
66 |     prices: Union[pd.Series, pd.DataFrame],
67 |     events: Optional[pd.DataFrame] = None,
   |             ^^^^^^^^^^^^^^^^^^^^^^
68 |     pt_sl: Optional[tuple] = None,
69 |     t1: Optional[pd.Series] = None,
   |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/data/labels.py:68:12
   |
66 |     prices: Union[pd.Series, pd.DataFrame],
67 |     events: Optional[pd.DataFrame] = None,
68 |     pt_sl: Optional[tuple] = None,
   |            ^^^^^^^^^^^^^^^
69 |     t1: Optional[pd.Series] = None,
70 |     min_ret: float = 0.0,
   |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/data/labels.py:69:9
   |
67 |     events: Optional[pd.DataFrame] = None,
68 |     pt_sl: Optional[tuple] = None,
69 |     t1: Optional[pd.Series] = None,
   |         ^^^^^^^^^^^^^^^^^^^
70 |     min_ret: float = 0.0,
71 |     num_threads: int = 1,
   |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/data/labels.py:72:29
   |
70 |     min_ret: float = 0.0,
71 |     num_threads: int = 1,
72 |     vertical_barrier_times: Optional[pd.Series] = None
   |                             ^^^^^^^^^^^^^^^^^^^
73 | ) -> pd.DataFrame:
74 |     """
   |
help: Convert to `X | None`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/data/labels.py:203:12
    |
201 |         return result_df
202 |         
203 |     except Exception as e:
    |            ^^^^^^^^^
204 |         logger.error(f"Error in triple barrier labeling: {e}")
205 |         return pd.DataFrame(columns=['t1', 'ret', 'bin'])
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/data/labels.py:228:12
    |
226 |         return vol
227 |         
228 |     except Exception as e:
    |            ^^^^^^^^^
229 |         logger.error(f"Error calculating daily volatility: {e}")
230 |         return pd.Series(dtype=float)
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/data/sanitize.py:8:1
   |
 6 |   """
 7 |
 8 | / import logging
 9 | | import numpy as np
10 | | import pandas as pd
11 | | from typing import Dict, List, Optional, Tuple, Union, Any
12 | | from dataclasses import dataclass
   | |_________________________________^
13 |
14 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> ai_trading/data/sanitize.py:11:1
   |
 9 | import numpy as np
10 | import pandas as pd
11 | from typing import Dict, List, Optional, Tuple, Union, Any
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 | from dataclasses import dataclass
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> ai_trading/data/sanitize.py:11:1
   |
 9 | import numpy as np
10 | import pandas as pd
11 | from typing import Dict, List, Optional, Tuple, Union, Any
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 | from dataclasses import dataclass
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> ai_trading/data/sanitize.py:11:1
   |
 9 | import numpy as np
10 | import pandas as pd
11 | from typing import Dict, List, Optional, Tuple, Union, Any
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 | from dataclasses import dataclass
   |

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
  --> ai_trading/data/sanitize.py:23:23
   |
21 |     mad_threshold: float = 3.0  # MAD multiplier for outlier detection
22 |     zscore_threshold: float = 4.0  # Z-score threshold for outlier detection
23 |     winsorize_limits: Tuple[float, float] = (0.01, 0.01)  # (lower, upper) percentiles
   |                       ^^^^^
24 |     
25 |     # Volume filtering
   |
help: Replace with `tuple`

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/data/sanitize.py:55:32
   |
53 |     """
54 |     
55 |     def __init__(self, config: Optional[SanitizationConfig] = None):
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
56 |         """
57 |         Initialize data sanitizer.
   |
help: Convert to `X | None`

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
  --> ai_trading/data/sanitize.py:80:10
   |
78 |         bars: pd.DataFrame,
79 |         symbol: str = "UNKNOWN"
80 |     ) -> Tuple[pd.DataFrame, Dict[str, Any]]:
   |          ^^^^^
81 |         """
82 |         Sanitize OHLCV bar data.
   |
help: Replace with `tuple`

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> ai_trading/data/sanitize.py:80:30
   |
78 |         bars: pd.DataFrame,
79 |         symbol: str = "UNKNOWN"
80 |     ) -> Tuple[pd.DataFrame, Dict[str, Any]]:
   |                              ^^^^
81 |         """
82 |         Sanitize OHLCV bar data.
   |
help: Replace with `dict`

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
   --> ai_trading/data/sanitize.py:146:55
    |
144 |         return clean_bars, report
145 |     
146 |     def _validate_prices(self, bars: pd.DataFrame) -> Tuple[pd.Series, pd.Series]:
    |                                                       ^^^^^
147 |         """Validate price data for basic sanity checks."""
148 |         rejection_mask = pd.Series(False, index=bars.index)
    |
help: Replace with `tuple`

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
   --> ai_trading/data/sanitize.py:183:55
    |
181 |         return rejection_mask, rejection_reasons
182 |     
183 |     def _detect_outliers(self, bars: pd.DataFrame) -> Tuple[pd.Series, pd.Series]:
    |                                                       ^^^^^
184 |         """Detect outliers using MAD and Z-score methods."""
185 |         rejection_mask = pd.Series(False, index=bars.index)
    |
help: Replace with `tuple`

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
   --> ai_trading/data/sanitize.py:223:57
    |
221 |         return rejection_mask, rejection_reasons
222 |     
223 |     def _filter_low_volume(self, bars: pd.DataFrame) -> Tuple[pd.Series, pd.Series]:
    |                                                         ^^^^^
224 |         """Filter bars with low volume."""
225 |         rejection_mask = pd.Series(False, index=bars.index)
    |
help: Replace with `tuple`

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
   --> ai_trading/data/sanitize.py:257:57
    |
255 |         return rejection_mask, rejection_reasons
256 |     
257 |     def _detect_stale_data(self, bars: pd.DataFrame) -> Tuple[pd.Series, pd.Series]:
    |                                                         ^^^^^
258 |         """Detect stale or suspicious data patterns."""
259 |         rejection_mask = pd.Series(False, index=bars.index)
    |
help: Replace with `tuple`

UP006 [*] Use `list` instead of `List` for type annotation
   --> ai_trading/data/sanitize.py:287:57
    |
285 |         return rejection_mask, rejection_reasons
286 |     
287 |     def _get_price_columns(self, bars: pd.DataFrame) -> List[str]:
    |                                                         ^^^^
288 |         """Get price columns from DataFrame."""
289 |         price_patterns = ['open', 'high', 'low', 'close', 'price', 'adj_close', 'vwap']
    |
help: Replace with `list`

UP006 [*] Use `list` instead of `List` for type annotation
   --> ai_trading/data/sanitize.py:299:58
    |
297 |         return price_cols
298 |     
299 |     def _get_volume_columns(self, bars: pd.DataFrame) -> List[str]:
    |                                                          ^^^^
300 |         """Get volume columns from DataFrame."""
301 |         volume_patterns = ['volume', 'vol', 'shares']
    |
help: Replace with `list`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/data/sanitize.py:345:63
    |
343 |                 self.logger.debug(f"Rejected bar {idx} for {symbol}: {reason} - {bar_data}")
344 |     
345 |     def _count_rejection_reasons(self, reasons: pd.Series) -> Dict[str, int]:
    |                                                               ^^^^
346 |         """Count rejection reasons for reporting."""
347 |         reason_counts = {}
    |
help: Replace with `dict`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/data/sanitize.py:362:54
    |
360 |         return reason_counts
361 |     
362 |     def _get_time_range(self, bars: pd.DataFrame) -> Optional[Dict[str, str]]:
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^
363 |         """Get time range of bars for reporting."""
364 |         if bars.empty or not isinstance(bars.index, pd.DatetimeIndex):
    |
help: Convert to `X | None`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/data/sanitize.py:362:63
    |
360 |         return reason_counts
361 |     
362 |     def _get_time_range(self, bars: pd.DataFrame) -> Optional[Dict[str, str]]:
    |                                                               ^^^^
363 |         """Get time range of bars for reporting."""
364 |         if bars.empty or not isinstance(bars.index, pd.DatetimeIndex):
    |
help: Replace with `dict`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/data/sanitize.py:375:17
    |
373 |         self,
374 |         series: pd.Series,
375 |         limits: Optional[Tuple[float, float]] = None
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
376 |     ) -> pd.Series:
377 |         """
    |
help: Convert to `X | None`

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
   --> ai_trading/data/sanitize.py:375:26
    |
373 |         self,
374 |         series: pd.Series,
375 |         limits: Optional[Tuple[float, float]] = None
    |                          ^^^^^
376 |     ) -> pd.Series:
377 |         """
    |
help: Replace with `tuple`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/data/sanitize.py:399:38
    |
397 |         return series.clip(lower=lower_bound, upper=upper_bound)
398 |     
399 |     def get_rejection_stats(self) -> Dict[str, Union[int, float]]:
    |                                      ^^^^
400 |         """Get sanitization statistics."""
401 |         stats = self._rejection_stats.copy()
    |
help: Replace with `dict`

UP007 [*] Use `X | Y` for type annotations
   --> ai_trading/data/sanitize.py:399:48
    |
397 |         return series.clip(lower=lower_bound, upper=upper_bound)
398 |     
399 |     def get_rejection_stats(self) -> Dict[str, Union[int, float]]:
    |                                                ^^^^^^^^^^^^^^^^^
400 |         """Get sanitization statistics."""
401 |         stats = self._rejection_stats.copy()
    |
help: Convert to `X | Y`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/data/sanitize.py:420:20
    |
419 | # Global sanitizer instance
420 | _global_sanitizer: Optional[DataSanitizer] = None
    |                    ^^^^^^^^^^^^^^^^^^^^^^^
    |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/data/sanitize.py:423:32
    |
423 | def get_data_sanitizer(config: Optional[SanitizationConfig] = None) -> DataSanitizer:
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
424 |     """Get or create global data sanitizer instance."""
425 |     global _global_sanitizer
    |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/data/sanitize.py:434:13
    |
432 |     bars: pd.DataFrame,
433 |     symbol: str = "UNKNOWN",
434 |     config: Optional[SanitizationConfig] = None
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
435 | ) -> Tuple[pd.DataFrame, Dict[str, Any]]:
436 |     """
    |
help: Convert to `X | None`

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
   --> ai_trading/data/sanitize.py:435:6
    |
433 |     symbol: str = "UNKNOWN",
434 |     config: Optional[SanitizationConfig] = None
435 | ) -> Tuple[pd.DataFrame, Dict[str, Any]]:
    |      ^^^^^
436 |     """
437 |     Convenience function to sanitize bars.
    |
help: Replace with `tuple`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/data/sanitize.py:435:26
    |
433 |     symbol: str = "UNKNOWN",
434 |     config: Optional[SanitizationConfig] = None
435 | ) -> Tuple[pd.DataFrame, Dict[str, Any]]:
    |                          ^^^^
436 |     """
437 |     Convenience function to sanitize bars.
    |
help: Replace with `dict`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/data/sanitize.py:453:14
    |
451 | def winsorize_dataframe(
452 |     df: pd.DataFrame,
453 |     columns: Optional[List[str]] = None,
    |              ^^^^^^^^^^^^^^^^^^^
454 |     limits: Tuple[float, float] = (0.01, 0.01)
455 | ) -> pd.DataFrame:
    |
help: Convert to `X | None`

UP006 [*] Use `list` instead of `List` for type annotation
   --> ai_trading/data/sanitize.py:453:23
    |
451 | def winsorize_dataframe(
452 |     df: pd.DataFrame,
453 |     columns: Optional[List[str]] = None,
    |                       ^^^^
454 |     limits: Tuple[float, float] = (0.01, 0.01)
455 | ) -> pd.DataFrame:
    |
help: Replace with `list`

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
   --> ai_trading/data/sanitize.py:454:13
    |
452 |     df: pd.DataFrame,
453 |     columns: Optional[List[str]] = None,
454 |     limits: Tuple[float, float] = (0.01, 0.01)
    |             ^^^^^
455 | ) -> pd.DataFrame:
456 |     """
    |
help: Replace with `tuple`

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/data/splits.py:8:1
   |
 6 |   """
 7 |
 8 | / import numpy as np
 9 | | import pandas as pd
10 | | from typing import Iterator, Tuple, Optional, Union, List, Dict
11 | | from datetime import datetime, timedelta
12 | | import logging
13 | |
14 | | # Use the centralized logger as per AGENTS.md
15 | | from ai_trading.logging import logger
16 | |
17 | | # sklearn is a hard dependency
18 | | from sklearn.model_selection import BaseCrossValidator
   | |______________________________________________________^
   |
help: Organize imports

UP035 [*] Import from `collections.abc` instead: `Iterator`
  --> ai_trading/data/splits.py:10:1
   |
 8 | import numpy as np
 9 | import pandas as pd
10 | from typing import Iterator, Tuple, Optional, Union, List, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 | from datetime import datetime, timedelta
12 | import logging
   |
help: Import from `collections.abc`

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> ai_trading/data/splits.py:10:1
   |
 8 | import numpy as np
 9 | import pandas as pd
10 | from typing import Iterator, Tuple, Optional, Union, List, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 | from datetime import datetime, timedelta
12 | import logging
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> ai_trading/data/splits.py:10:1
   |
 8 | import numpy as np
 9 | import pandas as pd
10 | from typing import Iterator, Tuple, Optional, Union, List, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 | from datetime import datetime, timedelta
12 | import logging
   |

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> ai_trading/data/splits.py:10:1
   |
 8 | import numpy as np
 9 | import pandas as pd
10 | from typing import Iterator, Tuple, Optional, Union, List, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 | from datetime import datetime, timedelta
12 | import logging
   |

F401 [*] `logging` imported but unused
  --> ai_trading/data/splits.py:12:8
   |
10 | from typing import Iterator, Tuple, Optional, Union, List, Dict
11 | from datetime import datetime, timedelta
12 | import logging
   |        ^^^^^^^
13 |
14 | # Use the centralized logger as per AGENTS.md
   |
help: Remove unused import: `logging`

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/data/splits.py:32:20
   |
30 |         self,
31 |         n_splits: int = 5,
32 |         test_size: Optional[Union[int, float]] = None,
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
33 |         embargo_pct: float = 0.01,
34 |         purge_pct: float = 0.02
   |
help: Convert to `X | None`

UP007 [*] Use `X | Y` for type annotations
  --> ai_trading/data/splits.py:32:29
   |
30 |         self,
31 |         n_splits: int = 5,
32 |         test_size: Optional[Union[int, float]] = None,
   |                             ^^^^^^^^^^^^^^^^^
33 |         embargo_pct: float = 0.01,
34 |         purge_pct: float = 0.02
   |
help: Convert to `X | Y`

UP007 [*] Use `X | Y` for type annotations
  --> ai_trading/data/splits.py:52:12
   |
50 |     def split(
51 |         self,
52 |         X: Union[pd.DataFrame, np.ndarray],
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
53 |         y: Optional[Union[pd.Series, np.ndarray]] = None,
54 |         groups: Optional[Union[pd.Series, np.ndarray]] = None,
   |
help: Convert to `X | Y`

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/data/splits.py:53:12
   |
51 |         self,
52 |         X: Union[pd.DataFrame, np.ndarray],
53 |         y: Optional[Union[pd.Series, np.ndarray]] = None,
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
54 |         groups: Optional[Union[pd.Series, np.ndarray]] = None,
55 |         t1: Optional[pd.Series] = None
   |
help: Convert to `X | None`

UP007 [*] Use `X | Y` for type annotations
  --> ai_trading/data/splits.py:53:21
   |
51 |         self,
52 |         X: Union[pd.DataFrame, np.ndarray],
53 |         y: Optional[Union[pd.Series, np.ndarray]] = None,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
54 |         groups: Optional[Union[pd.Series, np.ndarray]] = None,
55 |         t1: Optional[pd.Series] = None
   |
help: Convert to `X | Y`

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/data/splits.py:54:17
   |
52 |         X: Union[pd.DataFrame, np.ndarray],
53 |         y: Optional[Union[pd.Series, np.ndarray]] = None,
54 |         groups: Optional[Union[pd.Series, np.ndarray]] = None,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
55 |         t1: Optional[pd.Series] = None
56 |     ) -> Iterator[Tuple[np.ndarray, np.ndarray]]:
   |
help: Convert to `X | None`

UP007 [*] Use `X | Y` for type annotations
  --> ai_trading/data/splits.py:54:26
   |
52 |         X: Union[pd.DataFrame, np.ndarray],
53 |         y: Optional[Union[pd.Series, np.ndarray]] = None,
54 |         groups: Optional[Union[pd.Series, np.ndarray]] = None,
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
55 |         t1: Optional[pd.Series] = None
56 |     ) -> Iterator[Tuple[np.ndarray, np.ndarray]]:
   |
help: Convert to `X | Y`

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/data/splits.py:55:13
   |
53 |         y: Optional[Union[pd.Series, np.ndarray]] = None,
54 |         groups: Optional[Union[pd.Series, np.ndarray]] = None,
55 |         t1: Optional[pd.Series] = None
   |             ^^^^^^^^^^^^^^^^^^^
56 |     ) -> Iterator[Tuple[np.ndarray, np.ndarray]]:
57 |         """
   |
help: Convert to `X | None`

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
  --> ai_trading/data/splits.py:56:19
   |
54 |         groups: Optional[Union[pd.Series, np.ndarray]] = None,
55 |         t1: Optional[pd.Series] = None
56 |     ) -> Iterator[Tuple[np.ndarray, np.ndarray]]:
   |                   ^^^^^
57 |         """
58 |         Generate indices for train/test splits.
   |
help: Replace with `tuple`

UP007 [*] Use `X | Y` for type annotations
   --> ai_trading/data/splits.py:149:21
    |
147 |         test_indices: np.ndarray,
148 |         t1: pd.Series,
149 |         full_index: Union[pd.Index, np.ndarray]
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
150 |     ) -> np.ndarray:
151 |         """
    |
help: Convert to `X | Y`

F841 Local variable `test_end_time` is assigned to but never used
   --> ai_trading/data/splits.py:177:17
    |
175 |                 # For non-datetime indices, use index positions
176 |                 test_start_time = test_start_idx
177 |                 test_end_time = test_end_idx
    |                 ^^^^^^^^^^^^^
178 |             
179 |             # Find training observations that don't overlap
    |
help: Remove assignment to unused variable `test_end_time`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/data/splits.py:207:12
    |
205 |     def get_n_splits(
206 |         self,
207 |         X: Optional[Union[pd.DataFrame, np.ndarray]] = None,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
208 |         y: Optional[Union[pd.Series, np.ndarray]] = None,
209 |         groups: Optional[Union[pd.Series, np.ndarray]] = None
    |
help: Convert to `X | None`

UP007 [*] Use `X | Y` for type annotations
   --> ai_trading/data/splits.py:207:21
    |
205 |     def get_n_splits(
206 |         self,
207 |         X: Optional[Union[pd.DataFrame, np.ndarray]] = None,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
208 |         y: Optional[Union[pd.Series, np.ndarray]] = None,
209 |         groups: Optional[Union[pd.Series, np.ndarray]] = None
    |
help: Convert to `X | Y`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/data/splits.py:208:12
    |
206 |         self,
207 |         X: Optional[Union[pd.DataFrame, np.ndarray]] = None,
208 |         y: Optional[Union[pd.Series, np.ndarray]] = None,
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
209 |         groups: Optional[Union[pd.Series, np.ndarray]] = None
210 |     ) -> int:
    |
help: Convert to `X | None`

UP007 [*] Use `X | Y` for type annotations
   --> ai_trading/data/splits.py:208:21
    |
206 |         self,
207 |         X: Optional[Union[pd.DataFrame, np.ndarray]] = None,
208 |         y: Optional[Union[pd.Series, np.ndarray]] = None,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
209 |         groups: Optional[Union[pd.Series, np.ndarray]] = None
210 |     ) -> int:
    |
help: Convert to `X | Y`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/data/splits.py:209:17
    |
207 |         X: Optional[Union[pd.DataFrame, np.ndarray]] = None,
208 |         y: Optional[Union[pd.Series, np.ndarray]] = None,
209 |         groups: Optional[Union[pd.Series, np.ndarray]] = None
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
210 |     ) -> int:
211 |         """Return the number of splitting iterations."""
    |
help: Convert to `X | None`

UP007 [*] Use `X | Y` for type annotations
   --> ai_trading/data/splits.py:209:26
    |
207 |         X: Optional[Union[pd.DataFrame, np.ndarray]] = None,
208 |         y: Optional[Union[pd.Series, np.ndarray]] = None,
209 |         groups: Optional[Union[pd.Series, np.ndarray]] = None
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
210 |     ) -> int:
211 |         """Return the number of splitting iterations."""
    |
help: Convert to `X | Y`

UP007 [*] Use `X | Y` for type annotations
   --> ai_trading/data/splits.py:216:12
    |
215 | def walkforward_splits(
216 |     dates: Union[pd.DatetimeIndex, List[datetime]],
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
217 |     mode: str = "rolling",
218 |     train_span: Union[int, timedelta] = 252,  # 1 year of trading days
    |
help: Convert to `X | Y`

UP006 [*] Use `list` instead of `List` for type annotation
   --> ai_trading/data/splits.py:216:36
    |
215 | def walkforward_splits(
216 |     dates: Union[pd.DatetimeIndex, List[datetime]],
    |                                    ^^^^
217 |     mode: str = "rolling",
218 |     train_span: Union[int, timedelta] = 252,  # 1 year of trading days
    |
help: Replace with `list`

UP007 [*] Use `X | Y` for type annotations
   --> ai_trading/data/splits.py:218:17
    |
216 |     dates: Union[pd.DatetimeIndex, List[datetime]],
217 |     mode: str = "rolling",
218 |     train_span: Union[int, timedelta] = 252,  # 1 year of trading days
    |                 ^^^^^^^^^^^^^^^^^^^^^
219 |     test_span: Union[int, timedelta] = 21,    # 1 month of trading days
220 |     embargo_pct: float = 0.01
    |
help: Convert to `X | Y`

UP007 [*] Use `X | Y` for type annotations
   --> ai_trading/data/splits.py:219:16
    |
217 |     mode: str = "rolling",
218 |     train_span: Union[int, timedelta] = 252,  # 1 year of trading days
219 |     test_span: Union[int, timedelta] = 21,    # 1 month of trading days
    |                ^^^^^^^^^^^^^^^^^^^^^
220 |     embargo_pct: float = 0.01
221 | ) -> List[Dict[str, Union[datetime, List[datetime]]]]:
    |
help: Convert to `X | Y`

UP006 [*] Use `list` instead of `List` for type annotation
   --> ai_trading/data/splits.py:221:6
    |
219 |     test_span: Union[int, timedelta] = 21,    # 1 month of trading days
220 |     embargo_pct: float = 0.01
221 | ) -> List[Dict[str, Union[datetime, List[datetime]]]]:
    |      ^^^^
222 |     """
223 |     Generate walk-forward analysis splits.
    |
help: Replace with `list`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/data/splits.py:221:11
    |
219 |     test_span: Union[int, timedelta] = 21,    # 1 month of trading days
220 |     embargo_pct: float = 0.01
221 | ) -> List[Dict[str, Union[datetime, List[datetime]]]]:
    |           ^^^^
222 |     """
223 |     Generate walk-forward analysis splits.
    |
help: Replace with `dict`

UP007 [*] Use `X | Y` for type annotations
   --> ai_trading/data/splits.py:221:21
    |
219 |     test_span: Union[int, timedelta] = 21,    # 1 month of trading days
220 |     embargo_pct: float = 0.01
221 | ) -> List[Dict[str, Union[datetime, List[datetime]]]]:
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
222 |     """
223 |     Generate walk-forward analysis splits.
    |
help: Convert to `X | Y`

UP006 [*] Use `list` instead of `List` for type annotation
   --> ai_trading/data/splits.py:221:37
    |
219 |     test_span: Union[int, timedelta] = 21,    # 1 month of trading days
220 |     embargo_pct: float = 0.01
221 | ) -> List[Dict[str, Union[datetime, List[datetime]]]]:
    |                                     ^^^^
222 |     """
223 |     Generate walk-forward analysis splits.
    |
help: Replace with `list`

UP007 [*] Use `X | Y` for type annotations
   --> ai_trading/data/splits.py:306:15
    |
304 |     train_indices: np.ndarray,
305 |     test_indices: np.ndarray,
306 |     timeline: Union[pd.DatetimeIndex, np.ndarray],
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
307 |     t1: Optional[pd.Series] = None
308 | ) -> bool:
    |
help: Convert to `X | Y`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/data/splits.py:307:9
    |
305 |     test_indices: np.ndarray,
306 |     timeline: Union[pd.DatetimeIndex, np.ndarray],
307 |     t1: Optional[pd.Series] = None
    |         ^^^^^^^^^^^^^^^^^^^
308 | ) -> bool:
309 |     """
    |
help: Convert to `X | None`

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/data/timeutils.py:1:1
  |
1 | / from __future__ import annotations
2 | |
3 | | from dataclasses import dataclass
4 | | from datetime import datetime, date, time, timedelta, timezone
5 | | from typing import Any
6 | | from zoneinfo import ZoneInfo
  | |_____________________________^
7 |
8 |   # AI-AGENT-REF: centralized time helpers
  |
help: Organize imports

F401 [*] `dataclasses.dataclass` imported but unused
 --> ai_trading/data/timeutils.py:3:25
  |
1 | from __future__ import annotations
2 |
3 | from dataclasses import dataclass
  |                         ^^^^^^^^^
4 | from datetime import datetime, date, time, timedelta, timezone
5 | from typing import Any
  |
help: Remove unused import: `dataclasses.dataclass`

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/data/universe.py:1:1
  |
1 | / import os
2 | | from importlib.resources import files as pkg_files
3 | | import pandas as pd
4 | | from typing import List, Optional
5 | |
6 | | from ai_trading.logging import logger  # AI-AGENT-REF: structured logging
  | |_____________________________________^
  |
help: Organize imports

UP035 `typing.List` is deprecated, use `list` instead
 --> ai_trading/data/universe.py:4:1
  |
2 | from importlib.resources import files as pkg_files
3 | import pandas as pd
4 | from typing import List, Optional
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
5 |
6 | from ai_trading.logging import logger  # AI-AGENT-REF: structured logging
  |

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/data/universe.py:9:29
   |
 9 | def locate_tickers_csv() -> Optional[str]:
   |                             ^^^^^^^^^^^^^
10 |     env = os.getenv("AI_TRADER_TICKERS_CSV")
11 |     if env and os.path.isfile(env):
   |
help: Convert to `X | None`

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/data/universe.py:17:12
   |
15 |         if p.is_file():
16 |             return str(p)
17 |     except Exception:  # pragma: no cover - defensive
   |            ^^^^^^^^^
18 |         pass
19 |     return None
   |

UP006 [*] Use `list` instead of `List` for type annotation
  --> ai_trading/data/universe.py:22:24
   |
22 | def load_universe() -> List[str]:
   |                        ^^^^
23 |     path = locate_tickers_csv()
24 |     if not path:
   |
help: Replace with `list`

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/data_fetcher.py:1:1
   |
 1 | / from __future__ import annotations
 2 | |
 3 | | import datetime as _dt
 4 | | import os
 5 | | import warnings  # AI-AGENT-REF: control yfinance warnings
 6 | | from datetime import UTC, datetime
 7 | | from typing import Any
 8 | | from ai_trading.config import get_settings
 9 | | from zoneinfo import ZoneInfo  # AI-AGENT-REF: ET default for naive datetimes
10 | |
11 | | import pandas as pd  # AI-AGENT-REF: pandas already a project dependency
12 | | from pandas.errors import OutOfBoundsDatetime  # AI-AGENT-REF: datetime bounds
13 | |
14 | | from ai_trading.data.timeutils import (
15 | |     ensure_utc_datetime,  # AI-AGENT-REF: unified datetime coercion
16 | | )
17 | | from ai_trading.logging.empty_policy import (
18 | |     classify as _empty_classify,
19 | | )
20 | | from ai_trading.logging.empty_policy import (
21 | |     record as _empty_record,
22 | | )
23 | | from ai_trading.logging.empty_policy import (
24 | |     should_emit as _empty_should_emit,
25 | | )
26 | | from ai_trading.logging.normalize import (
27 | |     canon_feed as _canon_feed,  # AI-AGENT-REF: centralized feed normalization
28 | | )
29 | | from ai_trading.logging.normalize import (
30 | |     canon_timeframe as _canon_tf,  # AI-AGENT-REF: centralized timeframe normalization
31 | | )
32 | | from ai_trading.logging.normalize import (
33 | |     normalize_extra as _norm_extra,  # AI-AGENT-REF: canonicalize logging extras
34 | | )
   | |_^
35 |
36 |   try:  # AI-AGENT-REF: yfinance fallback for market data
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/data_fetcher.py:77:5
   |
75 |   requests = _requests
76 |   try:  # AI-AGENT-REF: typed request exceptions
77 | /     from requests.exceptions import (
78 | |         RequestException,
79 | |         Timeout,
80 | |         ConnectionError,
81 | |         HTTPError,
82 | |     )
   | |_____^
83 |   except Exception:  # pragma: no cover - requests optional
84 |       RequestException = Timeout = ConnectionError = HTTPError = Exception  # type: ignore
   |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/data_fetcher.py:83:8
   |
81 |         HTTPError,
82 |     )
83 | except Exception:  # pragma: no cover - requests optional
   |        ^^^^^^^^^
84 |     RequestException = Timeout = ConnectionError = HTTPError = Exception  # type: ignore
   |

I001 [*] Import block is un-sorted or un-formatted
   --> ai_trading/data_fetcher.py:446:25
    |
444 |                             )
445 |                             mdf.set_index("timestamp", inplace=True)
446 |                         from ai_trading.data.bars import _resample_minutes_to_daily as _resample_to_daily
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
447 |                         rdf = _resample_to_daily(mdf)
448 |                     except (ImportError, ValueError, TypeError, KeyError):  # AI-AGENT-REF: narrow resample errors
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/data_providers/__init__.py:3:1
  |
1 | """Optional data provider helpers."""
2 |
3 | from ai_trading.util.optional_imports import get_yfinance, has_yfinance  # AI-AGENT-REF: re-export yfinance helpers
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4 |
5 | __all__ = ["get_yfinance", "has_yfinance"]
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/data_validation.py:1:1
   |
 1 | / from __future__ import annotations
 2 | |
 3 | | from collections.abc import Callable, Mapping, Sequence
 4 | | from datetime import UTC, datetime, timedelta
 5 | |
 6 | | import pandas as pd
 7 | | from dataclasses import dataclass
 8 | | from enum import Enum
 9 | | from pathlib import Path
10 | | from typing import Any
11 | |
12 | | from ai_trading.data_fetcher import get_bars
   | |____________________________________________^
13 |
14 |   __all__ = [
   |
help: Organize imports

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> ai_trading/data_validation.py:114:8
    |
112 |         return not symbols_or_df.empty
113 |
114 |     if isinstance(symbols_or_df, (str, bytes)):
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
115 |         to_check = [symbols_or_df]
116 |     elif isinstance(symbols_or_df, Sequence):  # type: ignore[redundant-expr]
    |
help: Convert to `X | Y`

F401 [*] `logging` imported but unused
  --> ai_trading/database/connection.py:8:8
   |
 6 | """
 7 |
 8 | import logging
   |        ^^^^^^^
 9 | import threading
10 | import time
   |
help: Remove unused import: `logging`

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/database/connection.py:60:16
   |
58 |                 return True
59 |
60 |         except Exception as e:
   |                ^^^^^^^^^
61 |             logger.error(f"Failed to connect to database: {e}")
62 |             return False
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/database/connection.py:77:16
   |
75 |                 logger.info("Database connection closed successfully")
76 |
77 |         except Exception as e:
   |                ^^^^^^^^^
78 |             logger.error(f"Error disconnecting from database: {e}")
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/database/connection.py:90:16
   |
88 |             return True
89 |
90 |         except Exception as e:
   |                ^^^^^^^^^
91 |             logger.error(f"Database health check failed: {e}")
92 |             return False
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/database/connection.py:144:24
    |
142 |                         self._connections.pop(session_id, None)
143 |                     logger.debug(f"Database session {session_id} closed")
144 |                 except Exception as e:
    |                        ^^^^^^^^^
145 |                     logger.error(f"Error closing session {session_id}: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/database/connection.py:257:12
    |
255 |         _db_manager = DatabaseManager(connection_string, **kwargs)
256 |         return _db_manager.connect()
257 |     except Exception as e:
    |            ^^^^^^^^^
258 |         logger.error(f"Failed to initialize database: {e}")
259 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/env.py:49:12
   |
47 |                 extra={"dotenv_path": loaded_from},
48 |             )
49 |     except Exception:
   |            ^^^^^^^^^
50 |         pass
   |

F401 [*] `logging` imported but unused
  --> ai_trading/evaluation/walkforward.py:9:8
   |
 8 | import json
 9 | import logging
   |        ^^^^^^^
10 | import os
11 | from datetime import UTC, datetime, timedelta
   |
help: Remove unused import: `logging`

E402 Module level import not at top of file
  --> ai_trading/evaluation/walkforward.py:42:1
   |
40 |         logger.debug("Matplotlib plotting disabled by configuration")
41 |
42 | from ..data.splits import walkforward_splits
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
43 | from ..features.pipeline import create_feature_pipeline
44 | # Lazy import to avoid heavy dependencies at module import time
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/evaluation/walkforward.py:42:1
   |
40 |           logger.debug("Matplotlib plotting disabled by configuration")
41 |
42 | / from ..data.splits import walkforward_splits
43 | | from ..features.pipeline import create_feature_pipeline
   | |_______________________________________________________^
44 |   # Lazy import to avoid heavy dependencies at module import time
45 |   def _get_ml_trainer():
   |
help: Organize imports

E402 Module level import not at top of file
  --> ai_trading/evaluation/walkforward.py:43:1
   |
42 | from ..data.splits import walkforward_splits
43 | from ..features.pipeline import create_feature_pipeline
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 | # Lazy import to avoid heavy dependencies at module import time
45 | def _get_ml_trainer():
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/evaluation/walkforward.py:297:16
    |
295 |             return fold_result
296 |
297 |         except Exception as e:
    |                ^^^^^^^^^
298 |             logger.error(f"Error in fold {fold_idx}: {e}")
299 |             return {"fold": fold_idx, "error": str(e)}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/evaluation/walkforward.py:348:16
    |
346 |             }
347 |
348 |         except Exception as e:
    |                ^^^^^^^^^
349 |             logger.error(f"Error calculating fold metrics: {e}")
350 |             return {}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/evaluation/walkforward.py:429:16
    |
427 |             return aggregate_metrics
428 |
429 |         except Exception as e:
    |                ^^^^^^^^^
430 |             logger.error(f"Error calculating aggregate metrics: {e}")
431 |             return {}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/evaluation/walkforward.py:447:16
    |
445 |             return drawdown
446 |
447 |         except Exception as e:
    |                ^^^^^^^^^
448 |             logger.error(f"Error calculating drawdown: {e}")
449 |             return pd.Series(dtype=float)
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/evaluation/walkforward.py:499:16
    |
497 |             self._create_plots(timestamp)
498 |
499 |         except Exception as e:
    |                ^^^^^^^^^
500 |             logger.error(f"Error saving results: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/evaluation/walkforward.py:586:16
    |
584 |             logger.info(f"Plots saved to {plot_file}")
585 |
586 |         except Exception as e:
    |                ^^^^^^^^^
587 |             logger.error(f"Error creating plots: {e}")
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/execution/__init__.py:24:1
   |
23 |   # Import execution components
24 | / from .engine import ExecutionAlgorithm, ExecutionEngine, Order  # AI-AGENT-REF: expose ExecutionEngine
25 | | from .transaction_costs import estimate_cost
26 | |
27 | |
28 | | # Import enhanced debugging and tracking modules
29 | | from .debug_tracker import (
30 | |     ExecutionPhase,
31 | |     OrderStatus,
32 | |     enable_debug_mode,
33 | |     get_debug_tracker,
34 | |     get_execution_statistics,
35 | |     log_execution_phase,
36 | |     log_order_outcome,
37 | |     log_position_change,
38 | |     log_signal_to_execution,
39 | | )
40 | | from .liquidity import LiquidityAnalyzer, LiquidityLevel, LiquidityManager, MarketHours
41 | | from .pnl_attributor import (
42 | |     PnLEvent,
43 | |     PnLSource,
44 | |     explain_recent_pnl_changes,
45 | |     get_pnl_attribution_stats,
46 | |     get_pnl_attributor,
47 | |     get_portfolio_pnl_summary,
48 | |     get_symbol_pnl_breakdown,
49 | |     record_dividend_income,
50 | |     record_trade_pnl,
51 | |     update_position_for_pnl,
52 | | )
53 | | from .position_reconciler import (
54 | |     PositionDiscrepancy,
55 | |     adjust_bot_position,
56 | |     force_position_reconciliation,
57 | |     get_position_discrepancies,
58 | |     get_position_reconciler,
59 | |     get_reconciliation_statistics,
60 | |     start_position_monitoring,
61 | |     stop_position_monitoring,
62 | |     update_bot_position,
63 | | )
   | |_^
64 |   try:  # AI-AGENT-REF: optional production engine when Alpaca deps missing
65 |       from .production_engine import (
   |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/execution/__init__.py:70:8
   |
68 |         ProductionExecutionCoordinator,
69 |     )
70 | except Exception:  # pragma: no cover
   |        ^^^^^^^^^
71 |     ExecutionResult = OrderRequest = ProductionExecutionCoordinator = None  # type: ignore
   |

F401 [*] `logging` imported but unused
 --> ai_trading/execution/algorithms.py:8:8
  |
6 | """
7 |
8 | import logging
  |        ^^^^^^^
9 | import time
  |
help: Remove unused import: `logging`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/algorithms.py:104:16
    |
102 |             return child_orders
103 |
104 |         except Exception as e:
    |                ^^^^^^^^^
105 |             logger.error(f"Error in VWAP execution: {e}")
106 |             return []
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/algorithms.py:188:16
    |
186 |             return child_orders
187 |
188 |         except Exception as e:
    |                ^^^^^^^^^
189 |             logger.error(f"Error in TWAP execution: {e}")
190 |             return []
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/algorithms.py:276:16
    |
274 |             return child_orders
275 |
276 |         except Exception as e:
    |                ^^^^^^^^^
277 |             logger.error(f"Error in Implementation Shortfall execution: {e}")
278 |             return []
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/algorithms.py:311:16
    |
309 |             return schedule
310 |
311 |         except Exception as e:
    |                ^^^^^^^^^
312 |             logger.error(f"Error calculating execution schedule: {e}")
313 |             return [(total_quantity, self.urgency_factor)]
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/costs.py:172:20
    |
170 |                 self.logger.info(f"Loaded cost data for {len(self._costs)} symbols")
171 |
172 |             except Exception as e:
    |                    ^^^^^^^^^
173 |                 self.logger.error(f"Failed to load cost data: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/costs.py:194:16
    |
192 |             self.logger.debug(f"Saved cost data for {len(self._costs)} symbols")
193 |
194 |         except Exception as e:
    |                ^^^^^^^^^
195 |             self.logger.error(f"Failed to save cost data: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/debug_tracker.py:118:16
    |
116 |             if lock_acquired:
117 |                 self._active_orders[correlation_id] = execution_start
118 |         except Exception as e:
    |                ^^^^^^^^^
119 |             self.logger.error(
120 |                 "START_TRACKING_ERROR",
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/debug_tracker.py:197:16
    |
195 |                         "status"
196 |                     ] = OrderStatus.CANCELLED.value
197 |         except Exception as e:
    |                ^^^^^^^^^
198 |             # AI-AGENT-REF: Graceful error handling for lock operations
199 |             self.logger.error(
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/debug_tracker.py:274:16
    |
272 |                 # Remove from active orders
273 |                 del self._active_orders[correlation_id]
274 |         except Exception as e:
    |                ^^^^^^^^^
275 |             self.logger.error(
276 |                 "ORDER_RESULT_ERROR",
    |

E402 Module level import not at top of file
  --> ai_trading/execution/liquidity.py:32:1
   |
31 | # Use the centralized logger as per AGENTS.md
32 | from ai_trading.logging import logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
33 |
34 | from ..core.enums import OrderType
   |

E402 Module level import not at top of file
  --> ai_trading/execution/liquidity.py:34:1
   |
32 | from ai_trading.logging import logger
33 |
34 | from ..core.enums import OrderType
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

E402 Module level import not at top of file
  --> ai_trading/execution/live_trading.py:19:1
   |
18 | # Internal config import
19 | from ai_trading.config import AlpacaConfig, get_alpaca_config
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
20 |
21 | # Alpaca SDK imports
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/execution/live_trading.py:25:8
   |
23 |     from alpaca.common.exceptions import APIError  # type: ignore
24 |     from alpaca.trading.client import TradingClient  # type: ignore  # noqa: F401
25 | except Exception:  # AI-AGENT-REF: local fallback when SDK missing
   |        ^^^^^^^^^
26 |     TradingClient = None  # type: ignore
   |

E402 Module level import not at top of file
  --> ai_trading/execution/live_trading.py:32:1
   |
32 | from ai_trading.broker.alpaca import AlpacaBroker
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/execution/live_trading.py:56:12
   |
54 |     try:
55 |         quantity = int(_pos_num("qty", quantity))
56 |     except Exception as e:
   |            ^^^^^^^^^
57 |         _log.error(
58 |             "ORDER_INPUT_INVALID",
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/live_trading.py:139:24
    |
137 |                         MockTradingClient,  # AI-AGENT-REF: test mock
138 |                     )
139 |                 except Exception:
    |                        ^^^^^^^^^
140 |                     MockTradingClient = None
141 |                 if MockTradingClient:
    |

F841 Local variable `resp` is assigned to but never used
   --> ai_trading/execution/live_trading.py:684:17
    |
682 |         else:
683 |             try:  # AI-AGENT-REF: structured broker call
684 |                 resp = self.trading_client.cancel_order(order_id)
    |                 ^^^^
685 |             except (APIError, TimeoutError, ConnectionError) as e:
686 |                 _log.error(
    |
help: Remove assignment to unused variable `resp`

F401 [*] `logging` imported but unused
  --> ai_trading/execution/microstructure.py:8:8
   |
 6 | """
 7 |
 8 | import logging
   |        ^^^^^^^
 9 | import math
10 | import statistics
   |
help: Remove unused import: `logging`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/microstructure.py:150:16
    |
148 |             return features
149 |
150 |         except Exception as e:
    |                ^^^^^^^^^
151 |             logger.error(f"Error analyzing spread features: {e}")
152 |             return {}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/microstructure.py:183:16
    |
181 |                 return MarketRegimeFeature.RETAIL_DOMINATED
182 |
183 |         except Exception as e:
    |                ^^^^^^^^^
184 |             logger.error(f"Error classifying spread regime: {e}")
185 |             return MarketRegimeFeature.RETAIL_DOMINATED
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/microstructure.py:243:16
    |
241 |             return avg_effective, avg_realized
242 |
243 |         except Exception as e:
    |                ^^^^^^^^^
244 |             logger.error(f"Error calculating trade spreads: {e}")
245 |             return 0.0, 0.0
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/microstructure.py:334:16
    |
332 |             return features
333 |
334 |         except Exception as e:
    |                ^^^^^^^^^
335 |             logger.error(f"Error analyzing order flow: {e}")
336 |             return {}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/microstructure.py:372:16
    |
370 |             }
371 |
372 |         except Exception as e:
    |                ^^^^^^^^^
373 |             logger.error(f"Error detecting toxic flow: {e}")
374 |             return {"is_toxic": False, "risk_level": "unknown", "error": str(e)}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/microstructure.py:697:16
    |
695 |             return microstructure_data
696 |
697 |         except Exception as e:
    |                ^^^^^^^^^
698 |             logger.error(f"Error analyzing market microstructure for {symbol}: {e}")
699 |             return self._create_default_microstructure_data(symbol)
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/microstructure.py:762:16
    |
760 |             }
761 |
762 |         except Exception as e:
    |                ^^^^^^^^^
763 |             logger.error(f"Error estimating execution impact: {e}")
764 |             return {"error": str(e), "total_impact_bps": 999.0}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/microstructure.py:868:16
    |
866 |             return features
867 |
868 |         except Exception as e:
    |                ^^^^^^^^^
869 |             logger.error(f"Error analyzing microstructure volatility: {e}")
870 |             return {
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/position_reconciler.py:164:16
    |
162 |             return broker_positions
163 |
164 |         except Exception as e:
    |                ^^^^^^^^^
165 |             self.logger.error(
166 |                 "BROKER_POSITION_FETCH_ERROR",
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/position_reconciler.py:363:20
    |
361 |                 time.sleep(self.reconciliation_interval)
362 |
363 |             except Exception as e:
    |                    ^^^^^^^^^
364 |                 self.logger.error(
365 |                     "RECONCILIATION_LOOP_ERROR",
    |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/execution/production_engine.py:19:8
   |
17 |     from alpaca.common.exceptions import APIError  # type: ignore
18 |     from alpaca.trading.client import TradingClient  # type: ignore  # noqa: F401
19 | except Exception:  # AI-AGENT-REF: local fallback when SDK missing
   |        ^^^^^^^^^
20 |     TradingClient = None  # type: ignore
   |

F401 [*] `logging` imported but unused
  --> ai_trading/execution/simulator.py:8:8
   |
 6 | """
 7 |
 8 | import logging
   |        ^^^^^^^
 9 | import math
10 | import random
   |
help: Remove unused import: `logging`

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/execution/simulator.py:88:16
   |
86 |             return total_slippage
87 |
88 |         except Exception as e:
   |                ^^^^^^^^^
89 |             logger.error(f"Error calculating slippage: {e}")
90 |             return 0.0
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/simulator.py:122:16
    |
120 |             )
121 |
122 |         except Exception as e:
    |                ^^^^^^^^^
123 |             logger.error(f"Error updating market conditions: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/simulator.py:216:16
    |
214 |             return result
215 |
216 |         except Exception as e:
    |                ^^^^^^^^^
217 |             logger.error(f"Error simulating fill: {e}")
218 |             return {
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/execution/simulator.py:312:16
    |
310 |             )
311 |
312 |         except Exception as e:
    |                ^^^^^^^^^
313 |             logger.error(f"Error updating fill simulator: {e}")
    |

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
  --> ai_trading/execution/slippage.py:12:12
   |
10 |     - bps  : basis points to add/subtract (default 0 for CI determinism)
11 |     """
12 |     if not isinstance(price, (int, float)) or price <= 0:
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |         raise ValueError("price must be a positive number")
14 |     side_l = (side or "").lower()
   |
help: Convert to `X | Y`

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/execution/transaction_costs.py:9:1
   |
 7 |   """
 8 |
 9 | / import logging
10 | | import math
11 | | from dataclasses import dataclass
12 | | from enum import Enum
13 | | from typing import Any, Optional, Dict
   | |______________________________________^
14 |
15 |   _log = logging.getLogger(__name__)  # AI-AGENT-REF: module logger
   |
help: Organize imports

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> ai_trading/execution/transaction_costs.py:13:1
   |
11 | from dataclasses import dataclass
12 | from enum import Enum
13 | from typing import Any, Optional, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | _log = logging.getLogger(__name__)  # AI-AGENT-REF: module logger
   |

F401 [*] `typing.Dict` imported but unused
  --> ai_trading/execution/transaction_costs.py:13:35
   |
11 | from dataclasses import dataclass
12 | from enum import Enum
13 | from typing import Any, Optional, Dict
   |                                   ^^^^
14 |
15 | _log = logging.getLogger(__name__)  # AI-AGENT-REF: module logger
   |
help: Remove unused import: `typing.Dict`

E402 Module level import not at top of file
  --> ai_trading/execution/transaction_costs.py:17:1
   |
15 | _log = logging.getLogger(__name__)  # AI-AGENT-REF: module logger
16 |
17 | from ai_trading.indicators import compute_atr  # AI-AGENT-REF: correct module
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
18 | from ai_trading.core.constants import EXECUTION_PARAMETERS, RISK_PARAMETERS  # AI-AGENT-REF: direct import without shim
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/execution/transaction_costs.py:17:1
   |
15 |   _log = logging.getLogger(__name__)  # AI-AGENT-REF: module logger
16 |
17 | / from ai_trading.indicators import compute_atr  # AI-AGENT-REF: correct module
18 | | from ai_trading.core.constants import EXECUTION_PARAMETERS, RISK_PARAMETERS  # AI-AGENT-REF: direct import without shim
   | |___________________________________________________________________________^
   |
help: Organize imports

F401 [*] `ai_trading.indicators.compute_atr` imported but unused
  --> ai_trading/execution/transaction_costs.py:17:35
   |
15 | _log = logging.getLogger(__name__)  # AI-AGENT-REF: module logger
16 |
17 | from ai_trading.indicators import compute_atr  # AI-AGENT-REF: correct module
   |                                   ^^^^^^^^^^^
18 | from ai_trading.core.constants import EXECUTION_PARAMETERS, RISK_PARAMETERS  # AI-AGENT-REF: direct import without shim
   |
help: Remove unused import: `ai_trading.indicators.compute_atr`

E402 Module level import not at top of file
  --> ai_trading/execution/transaction_costs.py:18:1
   |
17 | from ai_trading.indicators import compute_atr  # AI-AGENT-REF: correct module
18 | from ai_trading.core.constants import EXECUTION_PARAMETERS, RISK_PARAMETERS  # AI-AGENT-REF: direct import without shim
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/execution/transaction_costs.py:26:34
   |
26 | def _finite_nonneg(name: str, v: Optional[float]) -> float:  # AI-AGENT-REF: input guard helper
   |                                  ^^^^^^^^^^^^^^^
27 |     if v is None:
28 |         raise ValueError(f"{name}_none")
   |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/execution/transaction_costs.py:35:33
   |
35 | def _bounded_rate(name: str, v: Optional[float]) -> float:  # AI-AGENT-REF: bounded rate guard
   |                                 ^^^^^^^^^^^^^^^
36 |     x = _finite_nonneg(name, v)
37 |     if x > 1.0:
   |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/execution/transaction_costs.py:42:31
   |
42 | def _finite_pos(name: str, v: Optional[float]) -> float:  # AI-AGENT-REF: positive guard
   |                               ^^^^^^^^^^^^^^^
43 |     x = _finite_nonneg(name, v)
44 |     if x <= 0.0:
   |
help: Convert to `X | None`

F841 Local variable `mid_price` is assigned to but never used
   --> ai_trading/execution/transaction_costs.py:175:13
    |
174 |             spread = ask - bid
175 |             mid_price = (bid + ask) / 2
    |             ^^^^^^^^^
176 |
177 |             # Spread cost is half-spread times trade size
    |
help: Remove assignment to unused variable `mid_price`

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/features/__init__.py:4:1
   |
 2 |   Feature engineering public API.
 3 |   """
 4 | / from .indicators import (
 5 | |     compute_macd,
 6 | |     compute_macds,
 7 | |     compute_atr,
 8 | |     compute_vwap,
 9 | |     ensure_columns,
10 | | )
   | |_^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/features/indicators.py:11:1
   |
10 |   # AI-AGENT-REF: pandas and numpy are hard dependencies
11 | / import pandas as pd
12 | | import numpy as np
13 | |
14 | | import logging
15 | |
16 | | from ai_trading.indicators import ema, atr  # type: ignore
   | |__________________________________________^
   |
help: Organize imports

F401 [*] `numpy` imported but unused
  --> ai_trading/features/indicators.py:12:17
   |
10 | # AI-AGENT-REF: pandas and numpy are hard dependencies
11 | import pandas as pd
12 | import numpy as np
   |                 ^^
13 |
14 | import logging
   |
help: Remove unused import: `numpy`

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/features/pipeline.py:8:1
   |
 6 |   """
 7 |
 8 | / import logging
 9 | | from typing import Any
10 | |
11 | | import numpy as np
12 | | import pandas as pd
13 | |
14 | | # Use the centralized logger as per AGENTS.md
15 | | from ai_trading.logging import logger
16 | |
17 | | # sklearn is a hard dependency
18 | | from sklearn.base import BaseEstimator, TransformerMixin
19 | | from sklearn.pipeline import Pipeline
20 | | from sklearn.preprocessing import RobustScaler, StandardScaler
   | |______________________________________________________________^
   |
help: Organize imports

F401 [*] `logging` imported but unused
 --> ai_trading/features/pipeline.py:8:8
  |
6 | """
7 |
8 | import logging
  |        ^^^^^^^
9 | from typing import Any
  |
help: Remove unused import: `logging`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/features/pipeline.py:191:16
    |
189 |             return features
190 |
191 |         except Exception as e:
    |                ^^^^^^^^^
192 |             logger.error(f"Error adding return features: {e}")
193 |             return features
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/features/pipeline.py:227:16
    |
225 |             return features
226 |
227 |         except Exception as e:
    |                ^^^^^^^^^
228 |             logger.error(f"Error adding volatility features: {e}")
229 |             return features
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/features/pipeline.py:264:16
    |
262 |             return features
263 |
264 |         except Exception as e:
    |                ^^^^^^^^^
265 |             logger.error(f"Error adding volume features: {e}")
266 |             return features
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/features/pipeline.py:325:16
    |
323 |             return features
324 |
325 |         except Exception as e:
    |                ^^^^^^^^^
326 |             logger.error(f"Error adding regime features: {e}")
327 |             return features
    |

F821 Undefined name `sklearn_available`
   --> ai_trading/features/pipeline.py:344:16
    |
342 |     """
343 |     try:
344 |         if not sklearn_available:
    |                ^^^^^^^^^^^^^^^^^
345 |             logger.warning("sklearn not available, returning simple pipeline")
346 |             return Pipeline(
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/features/pipeline.py:431:12
    |
429 |         return True
430 |
431 |     except Exception as e:
    |            ^^^^^^^^^
432 |         logger.error(f"Error validating pipeline: {e}")
433 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/governance/promotion.py:121:16
    |
119 |             return True
120 |
121 |         except Exception as e:
    |                ^^^^^^^^^
122 |             self.logger.error(f"Error starting shadow testing for {model_id}: {e}")
123 |             return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/governance/promotion.py:203:16
    |
201 |             )
202 |
203 |         except Exception as e:
    |                ^^^^^^^^^
204 |             self.logger.error(f"Error updating shadow metrics for {model_id}: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/governance/promotion.py:278:16
    |
276 |             return eligible, evaluation
277 |
278 |         except Exception as e:
    |                ^^^^^^^^^
279 |             self.logger.error(
280 |                 f"Error checking promotion eligibility for {model_id}: {e}"
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/governance/promotion.py:333:16
    |
331 |             return True
332 |
333 |         except Exception as e:
    |                ^^^^^^^^^
334 |             self.logger.error(f"Error promoting model {model_id}: {e}")
335 |             return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/governance/promotion.py:386:16
    |
384 |                 last_updated=last_updated,
385 |             )
386 |         except Exception as e:
    |                ^^^^^^^^^
387 |             self.logger.error(f"Error loading shadow metrics for {model_id}: {e}")
388 |             return None
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/governance/promotion.py:409:16
    |
407 |             )
408 |
409 |         except Exception as e:
    |                ^^^^^^^^^
410 |             self.logger.error(f"Error creating active symlink for {strategy}: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/governance/promotion.py:419:16
    |
417 |                 symlink_path.unlink()
418 |                 self.logger.debug(f"Removed active symlink for {strategy}")
419 |         except Exception as e:
    |                ^^^^^^^^^
420 |             self.logger.error(f"Error removing active symlink for {strategy}: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/governance/promotion.py:462:20
    |
460 |                     shadow_models.append(shadow_info)
461 |
462 |             except Exception as e:
    |                    ^^^^^^^^^
463 |                 self.logger.debug(
464 |                     f"Error checking shadow status for model {model_id}: {e}"
    |

F821 Undefined name `Tuple`
  --> ai_trading/health_monitor.py:85:19
   |
83 |     disk_used_gb: float
84 |     disk_available_gb: float
85 |     load_average: Tuple[float, float, float]
   |                   ^^^^^
86 |     process_count: int
87 |     open_files: int
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/health_monitor.py:158:16
    |
156 |             self.consecutive_failures += 1
157 |
158 |         except Exception as e:
    |                ^^^^^^^^^
159 |             response_time = (time.time() - start_time) * 1000
160 |             status = HealthStatus.CRITICAL
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/health_monitor.py:324:20
    |
322 |                 await asyncio.sleep(self.check_interval)
323 |
324 |             except Exception as e:
    |                    ^^^^^^^^^
325 |                 self.logger.error(f"Error in monitoring loop: {e}")
326 |                 await asyncio.sleep(10)  # Short delay before retry
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/health_monitor.py:422:16
    |
420 |             return metrics
421 |
422 |         except Exception as e:  # pragma: no cover - unexpected psutil errors
    |                ^^^^^^^^^
423 |             self.logger.error(f"Error collecting system metrics: {e}")
424 |             return SystemMetrics(
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/indicators.py:3:1
   |
 1 |   """Technical indicator helpers used across the bot."""
 2 |
 3 | / from __future__ import annotations
 4 | |
 5 | | # AI-AGENT-REF: numpy is a hard dependency
 6 | | import numpy as np
 7 | |
 8 | | # pandas is a hard dependency
 9 | | import pandas as pd
10 | |
11 | | import logging
12 | | from functools import lru_cache
13 | | from typing import Any
14 | | from collections.abc import Iterable
   | |____________________________________^
15 |
16 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/indicators.py:21:8
   |
19 | try:  # pragma: no cover - optional dependency
20 |     from numba import jit as _numba_jit
21 | except Exception:  # pragma: no cover - numba not installed
   |        ^^^^^^^^^
22 |     _numba_jit = None
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/integrations/rate_limit.py:8:1
   |
 6 |   """
 7 |
 8 | / import asyncio
 9 | | import logging
10 | | import random
11 | | import threading
12 | | import time
13 | | from ai_trading.utils import sleep as psleep
14 | | from collections import defaultdict
15 | | from contextlib import asynccontextmanager
16 | | from dataclasses import dataclass, field
17 | | from typing import Any
   | |______________________^
18 |
19 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/logging/emit_once.py:3:1
  |
1 |   """Helper to emit a log record only once per process."""
2 |
3 | / from __future__ import annotations
4 | |
5 | | from logging import Logger
6 | | import threading
  | |________________^
7 |
8 |   _emitted: set[str] = set()
  |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/market/cache.py:13:8
   |
11 | try:
12 |     import pandas as pd  # type: ignore
13 | except Exception:  # pragma: no cover
   |        ^^^^^^^^^
14 |     pd = None  # tests can mock
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/market/cache.py:66:12
   |
64 |     try:
65 |         return pd.read_parquet(p)
66 |     except Exception as e:
   |            ^^^^^^^^^
67 |         logger.debug("Failed to read cache file %s: %s", p, e)
68 |         return None
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/market/cache.py:80:12
   |
78 |     try:
79 |         df.to_parquet(p, index=False)
80 |     except Exception as e:
   |            ^^^^^^^^^
81 |         logger.debug("Failed to write cache file %s: %s", p, e)
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/metrics/__init__.py:83:1
   |
82 | # AI-AGENT-REF: expose basic metrics helpers under canonical package
83 | from ai_trading.monitoring.metrics import safe_divide, calculate_atr  # noqa: E402
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/ml_model.py:1:1
  |
1 | / from __future__ import annotations
2 | |
3 | | import joblib
4 | | import pandas as pd
5 | | import numpy as np
6 | | import joblib
7 | | from dataclasses import dataclass
8 | | from pathlib import Path
9 | | from typing import Any, Iterable, Sequence
  | |__________________________________________^
  |
help: Organize imports

F811 [*] Redefinition of unused `joblib` from line 3
 --> ai_trading/ml_model.py:3:8
  |
1 | from __future__ import annotations
2 |
3 | import joblib
  |        ------ previous definition of `joblib` here
4 | import pandas as pd
5 | import numpy as np
6 | import joblib
  |        ^^^^^^ `joblib` redefined here
7 | from dataclasses import dataclass
8 | from pathlib import Path
  |
help: Remove definition: `joblib`

UP035 [*] Import from `collections.abc` instead: `Iterable`, `Sequence`
 --> ai_trading/ml_model.py:9:1
  |
7 | from dataclasses import dataclass
8 | from pathlib import Path
9 | from typing import Any, Iterable, Sequence
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
help: Import from `collections.abc`

UP037 [*] Remove quotes from type annotation
  --> ai_trading/ml_model.py:17:48
   |
15 |     version: str = "1"
16 |
17 |     def fit(self, X: Iterable, y: Iterable) -> "_DummyPipe":
   |                                                ^^^^^^^^^^^^
18 |         self.fitted = True
19 |         return self
   |
help: Remove quotes

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/ml_model.py:26:16
   |
24 |         try:
25 |             n = len(X)
26 |         except Exception:
   |                ^^^^^^^^^
27 |             n = 0
28 |         return np.zeros(n)
   |

UP037 [*] Remove quotes from type annotation
  --> ai_trading/ml_model.py:39:68
   |
37 |             raise TypeError(f"Model missing required method: {name}")
38 |
39 |     def fit(self, X: Sequence, y: Sequence, sample_weight=None) -> "MLModel":
   |                                                                    ^^^^^^^^^
40 |         if not all(hasattr(self.model, m) for m in ("fit", "predict")):
41 |             raise TypeError("Model missing required methods: fit, predict")
   |
help: Remove quotes

UP037 [*] Remove quotes from type annotation
  --> ai_trading/ml_model.py:66:40
   |
65 |     @classmethod
66 |     def load(cls, path: str | Path) -> "MLModel":
   |                                        ^^^^^^^^^
67 |         return cls(joblib.load(path))
   |
help: Remove quotes

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/ml_model.py:107:12
    |
105 |     try:
106 |         return list(preds)
107 |     except Exception:
    |            ^^^^^^^^^
108 |         return []
    |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/model_loader.py:34:12
   |
32 |     try:
33 |         df = get_daily_df(symbol, start, end)
34 |     except Exception as exc:  # pragma: no cover - network may fail
   |            ^^^^^^^^^
35 |         logger.warning("Data fetch failed for %s: %s", symbol, exc)
36 |         df = pd.DataFrame({"close": np.linspace(1.0, 2.0, 30)})
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/model_loader.py:54:12
   |
52 |         with open(MODELS_DIR / f"{symbol}.pkl", "wb") as f:
53 |             pickle.dump(model, f)
54 |     except Exception as exc:  # pragma: no cover - disk issues
   |            ^^^^^^^^^
55 |         logger.warning("Failed saving model for %s: %s", symbol, exc)
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/model_loader.py:68:16
   |
66 |             with open(path, "rb") as f:
67 |                 model = pickle.load(f)
68 |         except Exception as exc:
   |                ^^^^^^^^^
69 |             logger.warning("Model load failed for %s: %s", symbol, exc)
70 |             model = None
   |

E402 Module level import not at top of file
  --> ai_trading/model_loader.py:78:1
   |
77 | # AI-AGENT-REF: Defer model loading in testing environments to prevent import blocking
78 | import os
   | ^^^^^^^^^
79 | import sys
   |

E402 Module level import not at top of file
  --> ai_trading/model_loader.py:79:1
   |
77 | # AI-AGENT-REF: Defer model loading in testing environments to prevent import blocking
78 | import os
79 | import sys
   | ^^^^^^^^^^
80 |
81 | # AI-AGENT-REF: More aggressive testing mode detection to prevent import hangs
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/model_registry.py:5:1
   |
 3 |   """
 4 |
 5 | / from __future__ import annotations
 6 | |
 7 | | import hashlib
 8 | | import json
 9 | | import pickle
10 | | from datetime import UTC, datetime
11 | | from pathlib import Path
12 | | from typing import Any
13 | | import os
   | |_________^
14 |
15 |   try:
   |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/model_registry.py:17:8
   |
15 | try:
16 |     from ai_trading.logging import logger  # project logger
17 | except Exception:  # pragma: no cover
   |        ^^^^^^^^^
18 |     import logging
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/model_registry.py:40:16
   |
38 |         try:
39 |             return json.loads(self.index_file.read_text(encoding="utf-8"))
40 |         except Exception as e:
   |                ^^^^^^^^^
41 |             logger.warning("Failed to load registry index: %s", e)
42 |             return {}
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/monitoring/__init__.py:20:1
   |
19 |   # Core monitoring components
20 | / from .alerting import (
21 | |     Alert,
22 | |     AlertChannel,
23 | |     AlertManager,
24 | |     AlertSeverity,
25 | |     EmailAlerter,
26 | |     SlackAlerter,
27 | | )
28 | | from .performance_dashboard import (
29 | |     AnomalyDetector,
30 | |     PerformanceDashboard,
31 | |     PerformanceMetrics,
32 | |     RealTimePnLTracker,
33 | | )
34 | |
35 | | # Import internal monitoring components
36 | | from .metrics import MetricsCollector, PerformanceMonitor
37 | | from .alerts import AlertType
38 | | from .dashboard import RealtimeMetrics
39 | | # AI-AGENT-REF: expose order health monitor package
40 | | from .order_health_monitor import (
41 | |     OrderHealthMonitor,
42 | |     OrderInfo,
43 | |     get_order_health_monitor,
44 | |     _active_orders,
45 | |     _order_tracking_lock,
46 | |     _order_health_monitor,
47 | | )
48 | | from .system_health_checker import collect_system_health
   | |________________________________________________________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/monitoring/alerts.py:8:1
   |
 6 |   """
 7 |
 8 | / import logging
 9 | | import threading
10 | | import time
11 | | from ai_trading.utils.timing import sleep as psleep  # AI-AGENT-REF: avoid circular import
12 | | from collections.abc import Callable
13 | | from datetime import UTC, datetime, timedelta
14 | | from enum import Enum
15 | |
16 | | # Use the centralized logger as per AGENTS.md
17 | | from ai_trading.logging import logger
18 | |
19 | | from ..core.constants import PERFORMANCE_THRESHOLDS, RISK_PARAMETERS
   | |____________________________________________________________________^
   |
help: Organize imports

F401 [*] `logging` imported but unused
  --> ai_trading/monitoring/alerts.py:8:8
   |
 6 | """
 7 |
 8 | import logging
   |        ^^^^^^^
 9 | import threading
10 | import time
   |
help: Remove unused import: `logging`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/alerts.py:178:16
    |
176 |             return alert
177 |
178 |         except Exception as e:
    |                ^^^^^^^^^
179 |             logger.error(f"Error creating alert: {e}")
180 |             # Return dummy alert to prevent cascading errors
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/alerts.py:215:16
    |
213 |             return False
214 |
215 |         except Exception as e:
    |                ^^^^^^^^^
216 |             logger.error(f"Error acknowledging alert {alert_id}: {e}")
217 |             return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/alerts.py:232:16
    |
230 |             return False
231 |
232 |         except Exception as e:
    |                ^^^^^^^^^
233 |             logger.error(f"Error resolving alert {alert_id}: {e}")
234 |             return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/alerts.py:246:20
    |
244 |             try:
245 |                 handler(alert)
246 |             except Exception as e:
    |                    ^^^^^^^^^
247 |                 logger.error(f"Error in alert handler {handler.__name__}: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/alerts.py:283:20
    |
281 |                 psleep(3600)
282 |
283 |             except Exception as e:
    |                    ^^^^^^^^^
284 |                 logger.error(f"Error in alert cleanup: {e}")
285 |                 psleep(300)  # Sleep 5 minutes on error
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/alerts.py:352:16
    |
350 |                 )
351 |
352 |         except Exception as e:
    |                ^^^^^^^^^
353 |             logger.error(f"Error checking portfolio risk: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/alerts.py:388:16
    |
386 |                 )
387 |
388 |         except Exception as e:
    |                ^^^^^^^^^
389 |             logger.error(f"Error checking position risk for {symbol}: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/alerts.py:422:16
    |
420 |                 )
421 |
422 |         except Exception as e:
    |                ^^^^^^^^^
423 |             logger.error(f"Error checking execution risk: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/alerts.py:449:16
    |
447 |             self.last_alert_times[alert_key] = current_time
448 |
449 |         except Exception as e:
    |                ^^^^^^^^^
450 |             logger.error(f"Error creating risk alert: {e}")
    |

F401 [*] `logging` imported but unused
  --> ai_trading/monitoring/dashboard.py:8:8
   |
 6 | """
 7 |
 8 | import logging
   |        ^^^^^^^
 9 | from datetime import UTC, datetime, timedelta
10 | from typing import Any
   |
help: Remove unused import: `logging`

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/monitoring/dashboard.py:73:16
   |
71 |             return result
72 |
73 |         except Exception as e:
   |                ^^^^^^^^^
74 |             logger.error(f"Error calculating current P&L: {e}")
75 |             return {"realized_pnl": 0.0, "trade_count": 0, "win_rate": 0.0}
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/dashboard.py:109:16
    |
107 |             return result
108 |
109 |         except Exception as e:
    |                ^^^^^^^^^
110 |             logger.error(f"Error calculating portfolio summary: {e}")
111 |             return {"total_value": 0.0, "day_change": 0.0, "day_change_pct": 0.0}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/dashboard.py:144:16
    |
142 |             return result
143 |
144 |         except Exception as e:
    |                ^^^^^^^^^
145 |             logger.error(f"Error calculating risk summary: {e}")
146 |             return {"var_95": 0.0, "max_drawdown": 0.0, "current_drawdown": 0.0}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/dashboard.py:179:16
    |
177 |             return result
178 |
179 |         except Exception as e:
    |                ^^^^^^^^^
180 |             logger.error(f"Error calculating execution summary: {e}")
181 |             return {"orders_submitted": 0, "orders_filled": 0, "fill_rate": 0.0}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/dashboard.py:252:16
    |
250 |             return dashboard_data
251 |
252 |         except Exception as e:
    |                ^^^^^^^^^
253 |             logger.error(f"Error generating dashboard data: {e}")
254 |             return {
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/dashboard.py:323:16
    |
321 |             return summary
322 |
323 |         except Exception as e:
    |                ^^^^^^^^^
324 |             logger.error(f"Error generating trading activity summary: {e}")
325 |             return {"total_trades": 0, "total_volume": 0.0}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/dashboard.py:358:16
    |
356 |             }
357 |
358 |         except Exception as e:
    |                ^^^^^^^^^
359 |             logger.error(f"Error generating alert summary: {e}")
360 |             return {"active_count": 0, "severity_breakdown": {}, "recent_count": 0}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/dashboard.py:396:16
    |
394 |             }
395 |
396 |         except Exception as e:
    |                ^^^^^^^^^
397 |             logger.error(f"Error generating system health: {e}")
398 |             return {"status": "error", "cpu_usage": 0, "memory_usage": 0}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/dashboard.py:457:16
    |
455 |             }
456 |
457 |         except Exception as e:
    |                ^^^^^^^^^
458 |             logger.error(f"Error generating chart data: {e}")
459 |             return {"portfolio_value": [], "risk_metrics": [], "trading_volume": []}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/drift.py:123:20
    |
121 |                 )
122 |
123 |             except Exception as e:
    |                    ^^^^^^^^^
124 |                 self.logger.error(f"Failed to load baseline stats: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/drift.py:138:16
    |
136 |             )
137 |
138 |         except Exception as e:
    |                ^^^^^^^^^
139 |             self.logger.error(f"Failed to save baseline stats: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/drift.py:208:16
    |
206 |             return float(psi)
207 |
208 |         except Exception as e:
    |                ^^^^^^^^^
209 |             self.logger.warning(f"PSI calculation failed: {e}")
210 |             return 0.0
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/drift.py:424:16
    |
422 |                 json.dump(attribution_dicts, f, indent=2)
423 |
424 |         except Exception as e:
    |                ^^^^^^^^^
425 |             self.logger.error(f"Failed to save attribution history: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/drift.py:547:16
    |
545 |                 f.write(json.dumps(evaluation) + "\n")
546 |
547 |         except Exception as e:
    |                ^^^^^^^^^
548 |             self.logger.error(f"Failed to log shadow evaluation: {e}")
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/monitoring/metrics.py:3:1
   |
 1 |   """Performance metrics for trading results with numerical stability."""
 2 |
 3 | / from __future__ import annotations
 4 | |
 5 | | import logging
 6 | | import time
 7 | | from collections import defaultdict
 8 | | from datetime import datetime, UTC
 9 | | from typing import Any, Dict, Optional
10 | |
11 | | import numpy as np
12 | | import pandas as pd
13 | |
14 | | # Use the centralized logger as per AGENTS.md
15 | | from ai_trading.logging import logger
   | |_____________________________________^
16 |
17 |   HAS_PANDAS = True
   |
help: Organize imports

F401 [*] `logging` imported but unused
 --> ai_trading/monitoring/metrics.py:5:8
  |
3 | from __future__ import annotations
4 |
5 | import logging
  |        ^^^^^^^
6 | import time
7 | from collections import defaultdict
  |
help: Remove unused import: `logging`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> ai_trading/monitoring/metrics.py:9:1
   |
 7 | from collections import defaultdict
 8 | from datetime import datetime, UTC
 9 | from typing import Any, Dict, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |
11 | import numpy as np
   |

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/monitoring/metrics.py:145:24
    |
143 |     def __init__(self):
144 |         """Initialize metrics collector."""
145 |         self.counters: Dict[str, int] = defaultdict(int)
    |                        ^^^^
146 |         self.histograms: Dict[str, list] = defaultdict(list)
147 |         self.gauges: Dict[str, float] = {}
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/monitoring/metrics.py:146:26
    |
144 |         """Initialize metrics collector."""
145 |         self.counters: Dict[str, int] = defaultdict(int)
146 |         self.histograms: Dict[str, list] = defaultdict(list)
    |                          ^^^^
147 |         self.gauges: Dict[str, float] = {}
148 |         self.start_time = time.time()
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/monitoring/metrics.py:147:22
    |
145 |         self.counters: Dict[str, int] = defaultdict(int)
146 |         self.histograms: Dict[str, list] = defaultdict(list)
147 |         self.gauges: Dict[str, float] = {}
    |                      ^^^^
148 |         self.start_time = time.time()
    |
help: Replace with `dict`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/monitoring/metrics.py:152:62
    |
150 |         logger.info("MetricsCollector initialized")
151 |     
152 |     def inc_counter(self, name: str, value: int = 1, labels: Optional[Dict[str, str]] = None):
    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^
153 |         """Increment a counter metric."""
154 |         key = f"{name}_{hash(str(labels) if labels else '')}"
    |
help: Convert to `X | None`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/monitoring/metrics.py:152:71
    |
150 |         logger.info("MetricsCollector initialized")
151 |     
152 |     def inc_counter(self, name: str, value: int = 1, labels: Optional[Dict[str, str]] = None):
    |                                                                       ^^^^
153 |         """Increment a counter metric."""
154 |         key = f"{name}_{hash(str(labels) if labels else '')}"
    |
help: Replace with `dict`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/monitoring/metrics.py:157:69
    |
155 |         self.counters[key] += value
156 |         
157 |     def observe_latency(self, name: str, latency_ms: float, labels: Optional[Dict[str, str]] = None):
    |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
158 |         """Record a latency observation."""
159 |         key = f"{name}_{hash(str(labels) if labels else '')}"
    |
help: Convert to `X | None`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/monitoring/metrics.py:157:78
    |
155 |         self.counters[key] += value
156 |         
157 |     def observe_latency(self, name: str, latency_ms: float, labels: Optional[Dict[str, str]] = None):
    |                                                                              ^^^^
158 |         """Record a latency observation."""
159 |         key = f"{name}_{hash(str(labels) if labels else '')}"
    |
help: Replace with `dict`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/monitoring/metrics.py:166:58
    |
164 |             self.histograms[key] = self.histograms[key][-500:]
165 |     
166 |     def gauge_set(self, name: str, value: float, labels: Optional[Dict[str, str]] = None):
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^
167 |         """Set a gauge metric value."""
168 |         key = f"{name}_{hash(str(labels) if labels else '')}"
    |
help: Convert to `X | None`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/monitoring/metrics.py:166:67
    |
164 |             self.histograms[key] = self.histograms[key][-500:]
165 |     
166 |     def gauge_set(self, name: str, value: float, labels: Optional[Dict[str, str]] = None):
    |                                                                   ^^^^
167 |         """Set a gauge metric value."""
168 |         key = f"{name}_{hash(str(labels) if labels else '')}"
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/monitoring/metrics.py:186:38
    |
184 |         self.gauge_set("last_trade_timestamp", time.time(), labels)
185 |     
186 |     def get_metrics_summary(self) -> Dict[str, Any]:
    |                                      ^^^^
187 |         """Get a summary of all collected metrics."""
188 |         summary = {
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/monitoring/metrics.py:223:33
    |
221 |         self.metrics_collector = MetricsCollector()
222 |         self.trade_history: list = []
223 |         self.performance_cache: Dict[str, Any] = {}
    |                                 ^^^^
224 |         self.last_cache_update = 0
225 |         self.cache_ttl = 60  # seconds
    |
help: Replace with `dict`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/monitoring/metrics.py:229:62
    |
227 |         logger.info("PerformanceMonitor initialized")
228 |     
229 |     def inc_counter(self, name: str, value: int = 1, labels: Optional[Dict[str, str]] = None):
    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^
230 |         """Increment a counter metric."""
231 |         self.metrics_collector.inc_counter(name, value, labels)
    |
help: Convert to `X | None`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/monitoring/metrics.py:229:71
    |
227 |         logger.info("PerformanceMonitor initialized")
228 |     
229 |     def inc_counter(self, name: str, value: int = 1, labels: Optional[Dict[str, str]] = None):
    |                                                                       ^^^^
230 |         """Increment a counter metric."""
231 |         self.metrics_collector.inc_counter(name, value, labels)
    |
help: Replace with `dict`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/monitoring/metrics.py:233:69
    |
231 |         self.metrics_collector.inc_counter(name, value, labels)
232 |     
233 |     def observe_latency(self, name: str, latency_ms: float, labels: Optional[Dict[str, str]] = None):
    |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
234 |         """Record a latency observation."""
235 |         self.metrics_collector.observe_latency(name, latency_ms, labels)
    |
help: Convert to `X | None`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/monitoring/metrics.py:233:78
    |
231 |         self.metrics_collector.inc_counter(name, value, labels)
232 |     
233 |     def observe_latency(self, name: str, latency_ms: float, labels: Optional[Dict[str, str]] = None):
    |                                                                              ^^^^
234 |         """Record a latency observation."""
235 |         self.metrics_collector.observe_latency(name, latency_ms, labels)
    |
help: Replace with `dict`

UP045 [*] Use `X | None` for type annotations
   --> ai_trading/monitoring/metrics.py:237:58
    |
235 |         self.metrics_collector.observe_latency(name, latency_ms, labels)
236 |     
237 |     def gauge_set(self, name: str, value: float, labels: Optional[Dict[str, str]] = None):
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^
238 |         """Set a gauge metric value."""
239 |         self.metrics_collector.gauge_set(name, value, labels)
    |
help: Convert to `X | None`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/monitoring/metrics.py:237:67
    |
235 |         self.metrics_collector.observe_latency(name, latency_ms, labels)
236 |     
237 |     def gauge_set(self, name: str, value: float, labels: Optional[Dict[str, str]] = None):
    |                                                                   ^^^^
238 |         """Set a gauge metric value."""
239 |         self.metrics_collector.gauge_set(name, value, labels)
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/monitoring/metrics.py:241:40
    |
239 |         self.metrics_collector.gauge_set(name, value, labels)
240 |     
241 |     def record_trade(self, trade_data: Dict[str, Any]):
    |                                        ^^^^
242 |         """Record a trade for performance analysis."""
243 |         trade_data["timestamp"] = trade_data.get("timestamp", datetime.now(UTC))
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/monitoring/metrics.py:260:71
    |
258 |         )
259 |     
260 |     def get_performance_metrics(self, force_refresh: bool = False) -> Dict[str, Any]:
    |                                                                       ^^^^
261 |         """Get comprehensive performance metrics."""
262 |         current_time = time.time()
    |
help: Replace with `dict`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/order_health_monitor.py:213:24
    |
211 |                             },
212 |                         )
213 |                 except Exception as e:
    |                        ^^^^^^^^^
214 |                     self.logger.error(
215 |                         "Failed to cancel stale order %s: %s", order_info.order_id, e
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/order_health_monitor.py:275:16
    |
273 |                     )
274 |
275 |         except Exception as e:
    |                ^^^^^^^^^
276 |             self.logger.error(
277 |                 "Partial fill retry failed for %s: %s", partial_info.order_id, e
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/order_health_monitor.py:476:16
    |
474 |             self.logger.info("Order health metrics exported to %s", filepath)
475 |
476 |         except Exception as e:
    |                ^^^^^^^^^
477 |             self.logger.error("Failed to export metrics: %s", e)
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/slo.py:321:20
    |
319 |             try:
320 |                 callback(metric_name, current_value)
321 |             except Exception as e:
    |                    ^^^^^^^^^
322 |                 self.logger.error(
323 |                     f"Error in circuit breaker callback for {metric_name}: {e}"
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/monitoring/slo.py:459:16
    |
457 |             self.logger.info(f"Loaded SLO configuration from {config_path}")
458 |
459 |         except Exception as e:
    |                ^^^^^^^^^
460 |             self.logger.error(f"Error loading SLO configuration: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
 --> ai_trading/monitoring/system_health.py:7:8
  |
5 |     import psutil  # type: ignore
6 |     _HAS_PSUTIL = True
7 | except Exception:
  |        ^^^^^^^^^
8 |     psutil = None  # type: ignore
9 |     _HAS_PSUTIL = False
  |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/monitoring/system_health.py:23:16
   |
21 |                 }
22 |             )
23 |         except Exception:
   |                ^^^^^^^^^
24 |             # keep minimal snapshot if psutil misbehaves
25 |             pass
   |

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/monitoring/system_health_checker.py:1:1
  |
1 | / from __future__ import annotations
2 | | from dataclasses import dataclass, field
3 | | from datetime import UTC, datetime
4 | | from typing import Any, Dict
5 | |
6 | | # AI-AGENT-REF: lightweight facade for system health tests
7 | | from ai_trading.config import management as config
8 | | from ai_trading.monitoring.order_health_monitor import get_order_health_monitor
  | |_______________________________________________________________________________^
  |
help: Organize imports

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> ai_trading/monitoring/system_health_checker.py:4:1
  |
2 | from dataclasses import dataclass, field
3 | from datetime import UTC, datetime
4 | from typing import Any, Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
5 |
6 | # AI-AGENT-REF: lightweight facade for system health tests
  |

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> ai_trading/monitoring/system_health_checker.py:38:42
   |
36 | class meta_learning:  # pragma: no cover - patched in tests
37 |     @staticmethod
38 |     def validate_trade_data_quality() -> Dict[str, Any]:
   |                                          ^^^^
39 |         return {}
   |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> ai_trading/monitoring/system_health_checker.py:50:14
   |
48 |     error_count: int = 0
49 |     warning_count: int = 0
50 |     details: Dict[str, Any] = field(default_factory=dict)
   |              ^^^^
   |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> ai_trading/monitoring/system_health_checker.py:56:17
   |
54 | class SystemHealthStatus:
55 |     overall_status: str
56 |     components: Dict[str, ComponentHealth]
   |                 ^^^^
57 |     alerts: list[str]
58 |     metrics: Dict[str, float]
   |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> ai_trading/monitoring/system_health_checker.py:58:14
   |
56 |     components: Dict[str, ComponentHealth]
57 |     alerts: list[str]
58 |     metrics: Dict[str, float]
   |              ^^^^
59 |     timestamp: datetime = field(default_factory=lambda: datetime.now(UTC))
   |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> ai_trading/monitoring/system_health_checker.py:83:53
   |
81 |         return ComponentHealth("meta_learning", "healthy", 1.0, datetime.now(UTC), details=details)
82 |
83 |     def _determine_overall_status(self, components: Dict[str, ComponentHealth]) -> str:
   |                                                     ^^^^
84 |         if any(c.status == "critical" for c in components.values()):
85 |             return "critical"
   |
help: Replace with `dict`

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/pipeline.py:2:1
  |
1 |   # Core dependencies
2 | / import logging
3 | | import numpy as np
  | |__________________^
4 |
5 |   logger = logging.getLogger(__name__)
  |
help: Organize imports

E402 Module level import not at top of file
 --> ai_trading/pipeline.py:7:1
  |
5 | logger = logging.getLogger(__name__)
6 |
7 | from ai_trading.config import get_settings
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | # ML dependencies
  |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/pipeline.py:7:1
   |
 5 |   logger = logging.getLogger(__name__)
 6 |
 7 | / from ai_trading.config import get_settings
 8 | |
 9 | | # ML dependencies
10 | | from sklearn.base import BaseEstimator, TransformerMixin
11 | | from sklearn.linear_model import SGDRegressor
12 | | from sklearn.pipeline import Pipeline
13 | | from sklearn.preprocessing import StandardScaler
   | |________________________________________________^
   |
help: Organize imports

F401 [*] `ai_trading.config.get_settings` imported but unused
 --> ai_trading/pipeline.py:7:31
  |
5 | logger = logging.getLogger(__name__)
6 |
7 | from ai_trading.config import get_settings
  |                               ^^^^^^^^^^^^
8 |
9 | # ML dependencies
  |
help: Remove unused import: `ai_trading.config.get_settings`

E402 Module level import not at top of file
  --> ai_trading/pipeline.py:10:1
   |
 9 | # ML dependencies
10 | from sklearn.base import BaseEstimator, TransformerMixin
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 | from sklearn.linear_model import SGDRegressor
12 | from sklearn.pipeline import Pipeline
   |

E402 Module level import not at top of file
  --> ai_trading/pipeline.py:11:1
   |
 9 | # ML dependencies
10 | from sklearn.base import BaseEstimator, TransformerMixin
11 | from sklearn.linear_model import SGDRegressor
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 | from sklearn.pipeline import Pipeline
13 | from sklearn.preprocessing import StandardScaler
   |

E402 Module level import not at top of file
  --> ai_trading/pipeline.py:12:1
   |
10 | from sklearn.base import BaseEstimator, TransformerMixin
11 | from sklearn.linear_model import SGDRegressor
12 | from sklearn.pipeline import Pipeline
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 | from sklearn.preprocessing import StandardScaler
   |

E402 Module level import not at top of file
  --> ai_trading/pipeline.py:13:1
   |
11 | from sklearn.linear_model import SGDRegressor
12 | from sklearn.pipeline import Pipeline
13 | from sklearn.preprocessing import StandardScaler
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/portfolio/optimizer.py:9:1
   |
 7 |   """
 8 |
 9 | / import logging
10 | | import statistics
11 | | from dataclasses import dataclass
12 | | import numpy as np
13 | | from datetime import UTC, datetime
14 | | from enum import Enum
15 | | from typing import Any
16 | |
17 | | # Use the centralized logger as per AGENTS.md
18 | | from ai_trading.logging import logger
   | |_____________________________________^
   |
help: Organize imports

F401 [*] `logging` imported but unused
  --> ai_trading/portfolio/optimizer.py:9:8
   |
 7 | """
 8 |
 9 | import logging
   |        ^^^^^^^
10 | import statistics
11 | from dataclasses import dataclass
   |
help: Remove unused import: `logging`

F401 [*] `numpy` imported but unused
  --> ai_trading/portfolio/optimizer.py:12:17
   |
10 | import statistics
11 | from dataclasses import dataclass
12 | import numpy as np
   |                 ^^
13 | from datetime import UTC, datetime
14 | from enum import Enum
   |
help: Remove unused import: `numpy`

E402 Module level import not at top of file
  --> ai_trading/portfolio/optimizer.py:30:1
   |
29 | # Import existing sophisticated infrastructure
30 | from ai_trading.core.constants import RISK_PARAMETERS
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
31 | try:
32 |     from ai_trading.risk.adaptive_sizing import AdaptivePositionSizer, MarketRegime
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/portfolio/optimizer.py:30:1
   |
29 | # Import existing sophisticated infrastructure
30 | from ai_trading.core.constants import RISK_PARAMETERS
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
31 | try:
32 |     from ai_trading.risk.adaptive_sizing import AdaptivePositionSizer, MarketRegime
   |
help: Organize imports

F401 [*] `ai_trading.core.constants.RISK_PARAMETERS` imported but unused
  --> ai_trading/portfolio/optimizer.py:30:39
   |
29 | # Import existing sophisticated infrastructure
30 | from ai_trading.core.constants import RISK_PARAMETERS
   |                                       ^^^^^^^^^^^^^^^
31 | try:
32 |     from ai_trading.risk.adaptive_sizing import AdaptivePositionSizer, MarketRegime
   |
help: Remove unused import: `ai_trading.core.constants.RISK_PARAMETERS`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/portfolio/risk_controls.py:233:16
    |
231 |             return cluster_assignments
232 |
233 |         except Exception as e:
    |                ^^^^^^^^^
234 |             self.logger.error(f"Clustering failed: {e}")
235 |             return dict.fromkeys(returns_data.columns, 0)
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/position/correlation_analyzer.py:13:1
   |
11 |   """
12 |
13 | / import logging
14 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
15 | | from collections import defaultdict
16 | | from dataclasses import dataclass
17 | | from datetime import UTC, datetime
18 | | from enum import Enum
19 | | from typing import Any
20 | |
21 | | # AI-AGENT-REF: graceful imports with fallbacks
22 | | # Use hard imports since numpy and pandas are dependencies
23 | | import numpy as np
24 | | import pandas as pd
   | |___________________^
25 |
26 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/position/intelligent_manager.py:14:1
   |
12 |   """
13 |
14 | / import logging
15 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
16 | | from dataclasses import dataclass
17 | | from datetime import UTC, datetime
18 | | from enum import Enum
19 | | from typing import Any
20 | |
21 | | from .correlation_analyzer import PortfolioAnalysis, PortfolioCorrelationAnalyzer
22 | | from .market_regime import MarketRegime, MarketRegimeDetector, RegimeMetrics
23 | | from .profit_taking import ProfitTakingEngine
24 | | from .technical_analyzer import DivergenceType, SignalStrength, TechnicalSignalAnalyzer
25 | | from .trailing_stops import TrailingStopManager
26 | |
27 | | # AI-AGENT-REF: graceful imports with fallbacks
28 | | # Use hard imports since numpy and pandas are dependencies
29 | | import numpy as np
30 | | import pandas as pd
   | |___________________^
31 |
32 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

F401 [*] `numpy` imported but unused
  --> ai_trading/position/intelligent_manager.py:29:17
   |
27 | # AI-AGENT-REF: graceful imports with fallbacks
28 | # Use hard imports since numpy and pandas are dependencies
29 | import numpy as np
   |                 ^^
30 | import pandas as pd
   |
help: Remove unused import: `numpy`

F401 [*] `pandas` imported but unused
  --> ai_trading/position/intelligent_manager.py:30:18
   |
28 | # Use hard imports since numpy and pandas are dependencies
29 | import numpy as np
30 | import pandas as pd
   |                  ^^
31 |
32 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `pandas`

F401 [*] `numpy` imported but unused
  --> ai_trading/position/market_regime.py:20:17
   |
18 | # AI-AGENT-REF: graceful imports with fallbacks
19 | # Use hard imports since numpy and pandas are dependencies
20 | import numpy as np
   |                 ^^
21 | import pandas as pd
   |
help: Remove unused import: `numpy`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/position/market_regime.py:140:16
    |
138 |             return regime_metrics
139 |
140 |         except Exception as exc:
    |                ^^^^^^^^^
141 |             self.logger.warning("detect_regime failed: %s", exc)
142 |             return self._get_default_regime()
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/position/market_regime.py:220:16
    |
218 |             return None
219 |
220 |         except Exception:
    |                ^^^^^^^^^
221 |             return None
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/position/market_regime.py:263:16
    |
261 |             return {"strength": trend_strength, "direction": normalized_slope}
262 |
263 |         except Exception:
    |                ^^^^^^^^^
264 |             return {"strength": 0.0, "direction": 0.0}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/position/market_regime.py:300:16
    |
298 |             return {"percentile": percentile, "current_vol": current_vol}
299 |
300 |         except Exception:
    |                ^^^^^^^^^
301 |             return {"percentile": 50.0, "current_vol": 0.0}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/position/market_regime.py:335:16
    |
333 |             return {"score": momentum_score, "rsi": rsi if not pd.isna(rsi) else 50.0}
334 |
335 |         except Exception:
    |                ^^^^^^^^^
336 |             return {"score": 0.5, "rsi": 50.0}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/position/market_regime.py:366:16
    |
364 |             return {"score": mean_reversion_score}
365 |
366 |         except Exception:
    |                ^^^^^^^^^
367 |             return {"score": 0.5}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/position/market_regime.py:387:16
    |
385 |             return rsi.iloc[-1] if not pd.isna(rsi.iloc[-1]) else 50.0
386 |
387 |         except Exception:
    |                ^^^^^^^^^
388 |             return 50.0
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/position/market_regime.py:448:16
    |
446 |             return max(0.0, min(1.0, confidence))
447 |
448 |         except Exception:
    |                ^^^^^^^^^
449 |             return 0.5
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/position/market_regime.py:466:16
    |
464 |             return duration
465 |
466 |         except Exception:
    |                ^^^^^^^^^
467 |             return 0
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/position/profit_taking.py:13:1
   |
11 |   """
12 |
13 | / import logging
14 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
15 | | from dataclasses import dataclass
16 | | from datetime import UTC, datetime
17 | | from enum import Enum
18 | | from typing import Any
19 | |
20 | | # AI-AGENT-REF: graceful imports with fallbacks
21 | | # Use hard imports since numpy and pandas are dependencies 
22 | | import numpy as np
23 | | import pandas as pd
   | |___________________^
24 |
25 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

F401 [*] `numpy` imported but unused
  --> ai_trading/position/profit_taking.py:22:17
   |
20 | # AI-AGENT-REF: graceful imports with fallbacks
21 | # Use hard imports since numpy and pandas are dependencies 
22 | import numpy as np
   |                 ^^
23 | import pandas as pd
   |
help: Remove unused import: `numpy`

F401 [*] `numpy` imported but unused
  --> ai_trading/position/technical_analyzer.py:21:17
   |
19 | # AI-AGENT-REF: graceful imports with fallbacks
20 | # Use hard imports since numpy and pandas are dependencies
21 | import numpy as np
   |                 ^^
22 | import pandas as pd
   |
help: Remove unused import: `numpy`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/position/technical_analyzer.py:172:16
    |
170 |             return signals
171 |
172 |         except Exception as exc:
    |                ^^^^^^^^^
173 |             self.logger.warning("analyze_signals failed for %s: %s", symbol, exc)
174 |             return self._get_default_signals(symbol)
    |

F401 [*] `numpy` imported but unused
  --> ai_trading/position/trailing_stops.py:21:17
   |
19 | # AI-AGENT-REF: graceful imports with fallbacks
20 | # Use hard imports since numpy and pandas are dependencies
21 | import numpy as np
   |                 ^^
22 | import pandas as pd
   |
help: Remove unused import: `numpy`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/position/trailing_stops.py:166:16
    |
164 |             return stop_level
165 |
166 |         except Exception as exc:
    |                ^^^^^^^^^
167 |             self.logger.warning("update_trailing_stop failed for %s: %s", symbol, exc)
168 |             return None
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/position/trailing_stops.py:277:16
    |
275 |             return new_stop
276 |
277 |         except Exception as exc:
    |                ^^^^^^^^^
278 |             self.logger.warning(
279 |                 "_calculate_adaptive_stop failed for %s: %s", symbol, exc
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/position/trailing_stops.py:481:16
    |
479 |                 )
480 |
481 |         except Exception as exc:
    |                ^^^^^^^^^
482 |             self.logger.warning("_check_stop_trigger failed: %s", exc)
    |

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/process_manager.py:1:1
  |
1 | from __future__ import annotations
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2 |
3 | # AI-AGENT-REF: test facade for legacy process manager imports
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/production_system.py:8:1
   |
 6 |   """
 7 |
 8 | / import logging
 9 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
10 | | from datetime import UTC, datetime
11 | | from typing import Any
12 | |
13 | | # Use the centralized logger as per AGENTS.md
14 | | from ai_trading.logging import logger
15 | |
16 | | from ai_trading.core.enums import OrderSide, OrderType, RiskLevel
17 | | from ai_trading.execution.liquidity import LiquidityManager
18 | | from ai_trading.execution.production_engine import ProductionExecutionCoordinator
19 | | from ai_trading.monitoring import (
20 | |     AlertManager,
21 | |     AlertSeverity,
22 | |     PerformanceDashboard,
23 | | )
24 | | from ai_trading.risk import (
25 | |     DynamicPositionSizer,
26 | |     RiskManager,
27 | |     TradingHaltManager,
28 | | )
29 | | from ai_trading.strategies.multi_timeframe import MultiTimeframeAnalyzer
30 | | from ai_trading.strategies.regime_detector import RegimeDetector
   | |________________________________________________________________^
   |
help: Organize imports

F401 [*] `logging` imported but unused
  --> ai_trading/production_system.py:8:8
   |
 6 | """
 7 |
 8 | import logging
   |        ^^^^^^^
 9 | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
10 | from datetime import UTC, datetime
   |
help: Remove unused import: `logging`

E402 Module level import not at top of file
  --> ai_trading/rebalancer.py:23:1
   |
23 | from ai_trading.portfolio import compute_portfolio_weights
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
24 | from ai_trading.settings import get_rebalance_interval_min
25 | from ai_trading.config import get_settings
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/rebalancer.py:23:1
   |
23 | / from ai_trading.portfolio import compute_portfolio_weights
24 | | from ai_trading.settings import get_rebalance_interval_min
25 | | from ai_trading.config import get_settings
   | |__________________________________________^
   |
help: Organize imports

E402 Module level import not at top of file
  --> ai_trading/rebalancer.py:24:1
   |
23 | from ai_trading.portfolio import compute_portfolio_weights
24 | from ai_trading.settings import get_rebalance_interval_min
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
25 | from ai_trading.config import get_settings
   |

E402 Module level import not at top of file
  --> ai_trading/rebalancer.py:25:1
   |
23 | from ai_trading.portfolio import compute_portfolio_weights
24 | from ai_trading.settings import get_rebalance_interval_min
25 | from ai_trading.config import get_settings
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

E402 Module level import not at top of file
  --> ai_trading/rebalancer.py:47:1
   |
46 | # AI-AGENT-REF: Enhanced rebalancer with tax awareness
47 | from ai_trading.core.constants import RISK_PARAMETERS
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
48 |
49 | # AI-AGENT-REF: Portfolio-first trading integration
   |

E402 Module level import not at top of file
  --> ai_trading/rebalancer.py:50:1
   |
49 | # AI-AGENT-REF: Portfolio-first trading integration
50 | from ai_trading.portfolio import create_portfolio_optimizer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
51 | from ai_trading.risk.adaptive_sizing import AdaptivePositionSizer
52 | from ai_trading.strategies.regime_detector import (
   |

E402 Module level import not at top of file
  --> ai_trading/rebalancer.py:51:1
   |
49 | # AI-AGENT-REF: Portfolio-first trading integration
50 | from ai_trading.portfolio import create_portfolio_optimizer
51 | from ai_trading.risk.adaptive_sizing import AdaptivePositionSizer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
52 | from ai_trading.strategies.regime_detector import (
53 |     create_regime_detector,
   |

E402 Module level import not at top of file
  --> ai_trading/rebalancer.py:52:1
   |
50 |   from ai_trading.portfolio import create_portfolio_optimizer
51 |   from ai_trading.risk.adaptive_sizing import AdaptivePositionSizer
52 | / from ai_trading.strategies.regime_detector import (
53 | |     create_regime_detector,
54 | | )
   | |_^
55 |
56 |   # Log availability after imports are guaranteed
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/risk/__init__.py:21:1
   |
20 |   # Core risk management components
21 | / from .circuit_breakers import (
22 | |     CircuitBreakerState,
23 | |     DeadMansSwitch,
24 | |     DrawdownCircuitBreaker,
25 | |     SafetyLevel,
26 | |     TradingHaltManager,
27 | |     VolatilityCircuitBreaker,
28 | | )
29 | | from .engine import RiskEngine
30 | | from .kelly import KellyCalculator, KellyCriterion
31 | | from .manager import PortfolioRiskAssessor, RiskManager
32 | | from .position_sizing import (
33 | |     ATRPositionSizer,
34 | |     DynamicPositionSizer,
35 | |     PortfolioPositionManager,
36 | |     VolatilityPositionSizer,
37 | | )
38 | |
39 | | # Import risk metrics
40 | | from .metrics import DrawdownAnalyzer, RiskMetricsCalculator
   | |____________________________________________________________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/risk/adaptive_sizing.py:8:1
   |
 6 |   """
 7 |
 8 | / import logging
 9 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
10 | | import math
11 | | import statistics
12 | | from datetime import UTC, datetime
13 | | from enum import Enum
14 | | from typing import Any
15 | |
16 | | # Use the centralized logger as per AGENTS.md
17 | | from ai_trading.logging import logger
18 | |
19 | | from ..core.constants import RISK_PARAMETERS
20 | | from ..core.enums import RiskLevel
21 | | from .kelly import KellyCalculator
22 | | from .position_sizing import DynamicPositionSizer
   | |_________________________________________________^
   |
help: Organize imports

F401 [*] `logging` imported but unused
  --> ai_trading/risk/adaptive_sizing.py:8:8
   |
 6 | """
 7 |
 8 | import logging
   |        ^^^^^^^
 9 | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
10 | import math
   |
help: Remove unused import: `logging`

E402 Module level import not at top of file
  --> ai_trading/risk/engine.py:31:1
   |
29 | ta = _optional_import("pandas_ta")
30 |
31 | from ai_trading.config.management import SEED, TradingConfig
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
32 |
33 | try:  # AI-AGENT-REF: resilient Alpaca import
   |

E402 Module level import not at top of file
  --> ai_trading/risk/engine.py:43:1
   |
43 | from ai_trading.config.settings import get_settings
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 |
45 | try:
   |

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> ai_trading/risk/engine.py:100:20
    |
 98 |         try:
 99 |             exposure_cap = getattr(self.config, "exposure_cap_aggressive", 0.8)
100 |             if not isinstance(exposure_cap, (int, float)) or not (
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
101 |                 0 < exposure_cap <= 1.0
102 |             ):
    |
help: Convert to `X | Y`

F841 Local variable `exposure_cap_conservative` is assigned to but never used
   --> ai_trading/risk/engine.py:279:9
    |
277 |         # Handle missing config attributes gracefully
278 |         volatility_lookback_days = getattr(self.config, "volatility_lookback_days", 10)
279 |         exposure_cap_conservative = getattr(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
280 |             self.config, "exposure_cap_conservative", 1.0
281 |         )
    |
help: Remove assignment to unused variable `exposure_cap_conservative`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> ai_trading/risk/engine.py:763:21
    |
761 |                 # Additional fallback
762 |                 is_raw_qty_finite = (
763 |                     isinstance(raw_qty, (int, float))
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
764 |                     and raw_qty == raw_qty
765 |                     and abs(raw_qty) != float("inf")
    |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> ai_trading/risk/engine.py:768:21
    |
766 |                 )
767 |                 is_min_qty_finite = (
768 |                     isinstance(min_qty, (int, float))
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
769 |                     and min_qty == min_qty
770 |                     and abs(min_qty) != float("inf")
    |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    --> ai_trading/risk/engine.py:1220:16
     |
1218 |         cash, price = args
1219 |         # Validate inputs
1220 |         if not isinstance(cash, (int, float)) or cash <= 0:
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1221 |             logging.warning(f"Invalid cash amount: {cash}")
1222 |             return 0
     |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    --> ai_trading/risk/engine.py:1223:16
     |
1221 |             logging.warning(f"Invalid cash amount: {cash}")
1222 |             return 0
1223 |         if not isinstance(price, (int, float)) or price <= 0:
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1224 |             logging.warning(f"Invalid price: {price}")
1225 |             return 0
     |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    --> ai_trading/risk/engine.py:1236:16
     |
1235 |         # Validate inputs
1236 |         if not isinstance(cash, (int, float)) or cash <= 0:
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1237 |             logging.warning(f"Invalid cash amount: {cash}")
1238 |             return 0
     |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    --> ai_trading/risk/engine.py:1239:16
     |
1237 |             logging.warning(f"Invalid cash amount: {cash}")
1238 |             return 0
1239 |         if not isinstance(price, (int, float)) or price <= 0:
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1240 |             logging.warning(f"Invalid price: {price}")
1241 |             return 0
     |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    --> ai_trading/risk/engine.py:1291:12
     |
1290 |     # Validate drawdown values
1291 |     if not isinstance(current_dd, (int, float)) or current_dd < 0:
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1292 |         logging.warning(f"Invalid current_drawdown: {current_dd}")
1293 |         return False
     |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    --> ai_trading/risk/engine.py:1294:12
     |
1292 |         logging.warning(f"Invalid current_drawdown: {current_dd}")
1293 |         return False
1294 |     if not isinstance(max_dd, (int, float)) or max_dd <= 0:
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1295 |         logging.warning(f"Invalid max_drawdown: {max_dd}")
1296 |         return False
     |
help: Convert to `X | Y`

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/risk/kelly.py:8:1
   |
 6 |   """
 7 |
 8 | / import logging
 9 | | import math
10 | | import statistics
11 | | from datetime import UTC, datetime, timedelta
12 | |
13 | | # Use the centralized logger as per AGENTS.md
14 | | from ai_trading.logging import logger
15 | |
16 | | # Import centralized configuration
17 | | from ai_trading.config.management import TradingConfig
   | |______________________________________________________^
18 |   class KellyCriterion:
19 |       """
   |
help: Organize imports

F401 [*] `logging` imported but unused
  --> ai_trading/risk/kelly.py:8:8
   |
 6 | """
 7 |
 8 | import logging
   |        ^^^^^^^
 9 | import math
10 | import statistics
   |
help: Remove unused import: `logging`

F821 Undefined name `_DEFAULT_CONFIG`
  --> ai_trading/risk/kelly.py:46:33
   |
44 |         """
45 |         # Use provided config or default
46 |         self.config = config or _DEFAULT_CONFIG
   |                                 ^^^^^^^^^^^^^^^
47 |
48 |         # Support backward compatibility: use passed parameters if provided, otherwise use config
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/kelly.py:118:16
    |
116 |             return kelly_fraction
117 |
118 |         except Exception as e:
    |                ^^^^^^^^^
119 |             logger.error(f"Error calculating Kelly fraction: {e}")
120 |             return 0.0
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/kelly.py:172:16
    |
170 |             return kelly_fraction, stats
171 |
172 |         except Exception as e:
    |                ^^^^^^^^^
173 |             logger.error(f"Error calculating Kelly from returns: {e}")
174 |             return 0.0, {"error": str(e)}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/kelly.py:225:16
    |
223 |             return adjusted_kelly, confidence_interval
224 |
225 |         except Exception as e:
    |                ^^^^^^^^^
226 |             logger.error(f"Error calculating Kelly with confidence: {e}")
227 |             return 0.0, 0.0
    |

F821 Undefined name `_DEFAULT_CONFIG`
   --> ai_trading/risk/kelly.py:243:33
    |
241 |         self.kelly_criterion = KellyCriterion()
242 |         # Use centralized config values instead of undefined KELLY_PARAMETERS
243 |         self.lookback_periods = _DEFAULT_CONFIG.lookback_periods
    |                                 ^^^^^^^^^^^^^^^
244 |         self.rebalance_frequency = _DEFAULT_CONFIG.rebalance_frequency
    |

F821 Undefined name `_DEFAULT_CONFIG`
   --> ai_trading/risk/kelly.py:244:36
    |
242 |         # Use centralized config values instead of undefined KELLY_PARAMETERS
243 |         self.lookback_periods = _DEFAULT_CONFIG.lookback_periods
244 |         self.rebalance_frequency = _DEFAULT_CONFIG.rebalance_frequency
    |                                    ^^^^^^^^^^^^^^^
245 |
246 |         # Store historical calculations
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/kelly.py:292:16
    |
290 |             return portfolio_kelly
291 |
292 |         except Exception as e:
    |                ^^^^^^^^^
293 |             logger.error(f"Error calculating portfolio Kelly: {e}")
294 |             return {}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/kelly.py:344:16
    |
342 |             return adjusted_kelly
343 |
344 |         except Exception as e:
    |                ^^^^^^^^^
345 |             logger.error(f"Error adjusting Kelly fraction: {e}")
346 |             return base_kelly * 0.5  # Conservative fallback
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/kelly.py:399:16
    |
397 |             return adjusted_kelly
398 |
399 |         except Exception as e:
    |                ^^^^^^^^^
400 |             logger.error(f"Error calculating Kelly with correlation: {e}")
401 |             return self.calculate_portfolio_kelly(asset_returns)
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/kelly.py:421:16
    |
419 |             ]
420 |
421 |         except Exception as e:
    |                ^^^^^^^^^
422 |             logger.error(f"Error recording Kelly calculation: {e}")
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/risk/manager.py:8:1
   |
 6 |   """
 7 |
 8 | / import logging
 9 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
10 | | import math
11 | | import statistics
12 | | from datetime import UTC, datetime, timedelta
13 | |
14 | | # Use the centralized logger as per AGENTS.md
15 | | from ai_trading.logging import logger
16 | |
17 | | from ..core.constants import RISK_PARAMETERS
18 | | from ..core.enums import RiskLevel
19 | | from .kelly import KellyCalculator
   | |__________________________________^
   |
help: Organize imports

F401 [*] `logging` imported but unused
  --> ai_trading/risk/manager.py:8:8
   |
 6 | """
 7 |
 8 | import logging
   |        ^^^^^^^
 9 | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
10 | import math
   |
help: Remove unused import: `logging`

F401 [*] `logging` imported but unused
  --> ai_trading/risk/metrics.py:8:8
   |
 6 | """
 7 |
 8 | import logging
   |        ^^^^^^^
 9 | import math
10 | import statistics
   |
help: Remove unused import: `logging`

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/risk/metrics.py:54:16
   |
52 |             return var
53 |
54 |         except Exception as e:
   |                ^^^^^^^^^
55 |             logger.error(f"Error calculating VaR: {e}")
56 |             return 0.0
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/risk/metrics.py:86:16
   |
84 |             return es
85 |
86 |         except Exception as e:
   |                ^^^^^^^^^
87 |             logger.error(f"Error calculating Expected Shortfall: {e}")
88 |             return 0.0
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/metrics.py:111:16
    |
109 |             return sharpe
110 |
111 |         except Exception as e:
    |                ^^^^^^^^^
112 |             logger.error(f"Error calculating Sharpe ratio: {e}")
113 |             return 0.0
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/metrics.py:142:16
    |
140 |             return sortino
141 |
142 |         except Exception as e:
    |                ^^^^^^^^^
143 |             logger.error(f"Error calculating Sortino ratio: {e}")
144 |             return 0.0
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/metrics.py:240:16
    |
238 |             return stats
239 |
240 |         except Exception as e:
    |                ^^^^^^^^^
241 |             logger.error(f"Error calculating drawdowns: {e}")
242 |             return {}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/metrics.py:267:16
    |
265 |             return True, drawdown
266 |
267 |         except Exception as e:
    |                ^^^^^^^^^
268 |             logger.error(f"Error checking drawdown status: {e}")
269 |             return False, 0.0
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/metrics.py:298:16
    |
296 |             return None  # Not recovered yet
297 |
298 |         except Exception as e:
    |                ^^^^^^^^^
299 |             logger.error(f"Error calculating recovery time: {e}")
300 |             return None
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/risk/position_sizing.py:9:1
   |
 7 |   """
 8 |
 9 | / import logging
10 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
11 | | import math
12 | | import statistics
13 | | from datetime import UTC, datetime
14 | | from typing import Any
15 | |
16 | | # Use the centralized logger as per AGENTS.md
17 | | from ai_trading.logging import logger
18 | |
19 | | from ..core.constants import RISK_PARAMETERS
20 | | from ..core.enums import RiskLevel
21 | | from .kelly import KellyCriterion
   | |_________________________________^
   |
help: Organize imports

F401 [*] `logging` imported but unused
  --> ai_trading/risk/position_sizing.py:9:8
   |
 7 | """
 8 |
 9 | import logging
   |        ^^^^^^^
10 | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
11 | import math
   |
help: Remove unused import: `logging`

F401 [*] `logging` imported but unused
  --> ai_trading/risk/pre_trade_validation.py:8:8
   |
 6 | """
 7 |
 8 | import logging
   |        ^^^^^^^
 9 | import math
10 | from dataclasses import dataclass
   |
help: Remove unused import: `logging`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/pre_trade_validation.py:146:16
    |
144 |             )
145 |
146 |         except Exception as e:
    |                ^^^^^^^^^
147 |             logger.error(f"Error validating market hours: {e}")
148 |             return ValidationResult(
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/pre_trade_validation.py:274:16
    |
272 |             )
273 |
274 |         except Exception as e:
    |                ^^^^^^^^^
275 |             logger.error(f"Error validating liquidity for {symbol}: {e}")
276 |             return ValidationResult(
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/pre_trade_validation.py:462:16
    |
460 |             )
461 |
462 |         except Exception as e:
    |                ^^^^^^^^^
463 |             logger.error(f"Error validating position risk for {symbol}: {e}")
464 |             return ValidationResult(
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/pre_trade_validation.py:554:16
    |
552 |             )
553 |
554 |         except Exception as e:
    |                ^^^^^^^^^
555 |             logger.error(f"Error validating portfolio risk: {e}")
556 |             return ValidationResult(
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/pre_trade_validation.py:802:16
    |
800 |             return final_result
801 |
802 |         except Exception as e:
    |                ^^^^^^^^^
803 |             logger.error(f"Error in pre-trade validation: {e}")
804 |             return PreTradeCheckResult(
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/risk/pre_trade_validation.py:833:16
    |
831 |             )
832 |
833 |         except Exception as e:
    |                ^^^^^^^^^
834 |             return ValidationResult(
835 |                 category=ValidationCategory.SYSTEM_HEALTH,
    |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/rl_trading/__init__.py:12:8
   |
10 |     from stable_baselines3 import PPO
11 |     from stable_baselines3.common.vec_env import DummyVecEnv
12 | except Exception:  # pragma: no cover - optional dependency
   |        ^^^^^^^^^
13 |     PPO = None  # type: ignore
14 |     DummyVecEnv = None  # type: ignore
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/rl_trading/__init__.py:82:16
   |
80 |             side = {0: "hold", 1: "buy", 2: "sell"}.get(int(action), "hold")
81 |             return TradeSignal(symbol="RL", side=side, confidence=1.0, strategy="rl")
82 |         except Exception as exc:
   |                ^^^^^^^^^
83 |             logger.error("RL prediction failed: %s", exc)
84 |             return None
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/rl_trading/env.py:15:8
   |
13 |     # Use the base Env class when gymnasium is available
14 |     EnvBase = gym.Env
15 | except Exception:  # pragma: no cover - optional dependency
   |        ^^^^^^^^^
16 |     gym = None
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/rl_trading/inference.py:241:16
    |
239 |             return signal
240 |
241 |         except Exception as e:
    |                ^^^^^^^^^
242 |             self.logger.error(f"RL prediction failed: {e}")
243 |             return None
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/rl_trading/tests/smoke_parity.py:148:12
    |
146 |         logger.info(f"Skipping RL tests due to missing dependencies: {e}")
147 |         return True
148 |     except Exception as e:
    |            ^^^^^^^^^
149 |         logger.info(f"RL parity test failed: {e}")
150 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/rl_trading/tests/smoke_parity.py:201:12
    |
199 |         return True
200 |
201 |     except Exception as e:
    |            ^^^^^^^^^
202 |         logger.info(f"Reward normalization test failed: {e}")
203 |         return False
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/rl_trading/train.py:3:1
   |
 1 |   """Enhanced RL training with reward shaping and evaluation callbacks."""
 2 |
 3 | / import json
 4 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
 5 | | import logging
 6 | | import os
 7 | | from datetime import UTC, datetime
 8 | | from typing import Any
 9 | |
10 | | import numpy as np
11 | |
12 | | # Use the centralized logger as per AGENTS.md
13 | | from ai_trading.logging import logger
   | |_____________________________________^
14 |
15 |   try:
   |
help: Organize imports

F401 [*] `logging` imported but unused
 --> ai_trading/rl_trading/train.py:5:8
  |
3 | import json
4 | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
5 | import logging
  |        ^^^^^^^
6 | import os
7 | from datetime import UTC, datetime
  |
help: Remove unused import: `logging`

UP035 [*] Import from `collections.abc` instead: `Callable`
 --> ai_trading/runtime/http_wrapped.py:6:1
  |
4 | import logging
5 | import time
6 | from typing import Any, Callable
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |
8 | logger = logging.getLogger(__name__)
  |
help: Import from `collections.abc`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
  --> ai_trading/runtime/http_wrapped.py:22:16
   |
20 |             if hasattr(resp, "json"):
21 |                 return resp.json()
22 |             if isinstance(resp, (bytes, bytearray)):
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
23 |                 return json.loads(resp.decode("utf-8"))
24 |             if isinstance(resp, str):
   |
help: Convert to `X | Y`

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/runtime/http_wrapped.py:27:16
   |
25 |                 return json.loads(resp)
26 |             return resp
27 |         except Exception as exc:  # intentionally broad at boundary
   |                ^^^^^^^^^
28 |             last_exc = exc
29 |             logger.debug("http retry %s/%s after %s", attempt, attempts, exc)
   |

F401 [*] `logging` imported but unused
  --> ai_trading/safety/monitoring.py:13:8
   |
12 | import json
13 | import logging
   |        ^^^^^^^
14 | import threading
15 | import time
   |
help: Remove unused import: `logging`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/safety/monitoring.py:135:20
    |
133 |             try:
134 |                 action(reason)
135 |             except Exception as e:
    |                    ^^^^^^^^^
136 |                 logger.error(f"Error executing emergency action: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/safety/monitoring.py:318:20
    |
316 |                 time.sleep(1)
317 |
318 |             except Exception as e:
    |                    ^^^^^^^^^
319 |                 logger.error(f"Error in monitoring loop: {e}")
320 |                 time.sleep(5)  # Back off on error
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/safety/monitoring.py:345:20
    |
343 |             try:
344 |                 callback(alert)
345 |             except Exception as e:
    |                    ^^^^^^^^^
346 |                 logger.error(f"Error in alert callback: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/safety/monitoring.py:412:20
    |
410 |                 time.sleep(1)
411 |
412 |             except Exception as e:
    |                    ^^^^^^^^^
413 |                 logger.error(f"Error in kill switch monitor: {e}")
414 |                 time.sleep(5)
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/safety/monitoring.py:425:20
    |
423 |             try:
424 |                 os.remove(self.kill_file_path)
425 |             except Exception as e:
    |                    ^^^^^^^^^
426 |                 logger.error(f"Could not remove kill file: {e}")
427 |             return True
    |

E741 Ambiguous variable name: `l`
   --> ai_trading/safety/monitoring.py:485:42
    |
484 |         # Calculate statistics
485 |         latencies = [l["latency_ms"] for l in self.metrics["order_latency"]]
    |                                          ^
486 |         avg_latency = sum(latencies) / len(latencies) if latencies else 0
487 |         max_latency = max(latencies) if latencies else 0
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/safety/monitoring.py:561:12
    |
559 |         with open("trading_alerts.log", "a") as f:
560 |             f.write(f"{json.dumps(alert)}\n")
561 |     except Exception as e:
    |            ^^^^^^^^^
562 |         logger.error(f"Failed to write alert to file: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/scheduler/aligned_clock.py:15:8
   |
13 | try:
14 |     import pandas_market_calendars as mcal  # optional
15 | except Exception:  # pragma: no cover
   |        ^^^^^^^^^
16 |     mcal = None
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/scheduler/aligned_clock.py:27:12
   |
25 |     try:
26 |         return mcal.get_calendar(cal_name)
27 |     except Exception as exc:  # pragma: no cover - best effort
   |            ^^^^^^^^^
28 |         logger.warning(f"Failed to load {cal_name} calendar: {exc}")
29 |         return None
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/scheduler/aligned_clock.py:83:20
   |
81 |                 exchange_tz = self.calendar.tz
82 |                 return utc_now.astimezone(exchange_tz)
83 |             except Exception as e:
   |                    ^^^^^^^^^
84 |                 self.logger.warning(
85 |                     f"Failed to get exchange time: {e.__class__.__name__}: {e}"
   |

F401 [*] `pytz` imported but unused
  --> ai_trading/scheduler/aligned_clock.py:89:16
   |
88 |         # Fallback to EST/EDT for NYSE
89 |         import pytz
   |                ^^^^
90 |         # Final fallback to UTC
91 |         return utc_now
   |
help: Remove unused import: `pytz`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/scheduler/aligned_clock.py:159:20
    |
157 |                         )
158 |                         next_close = next_close.replace(tzinfo=next_close.tzinfo)
159 |             except Exception as e:
    |                    ^^^^^^^^^
160 |                 self.logger.warning(
161 |                     f"Calendar check failed: {e.__class__.__name__}: {e}"
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/scheduler/aligned_clock.py:301:16
    |
299 |             return market_open <= timestamp <= market_close
300 |
301 |         except Exception as e:
    |                ^^^^^^^^^
302 |             self.logger.warning(
303 |                 f"Market hours check failed: {e.__class__.__name__}: {e}"
    |

F401 [*] `datetime.datetime` imported but unused
 --> ai_trading/scripts/self_check.py:3:22
  |
1 | import json
2 | import os
3 | from datetime import datetime, timezone
  |                      ^^^^^^^^
4 |
5 | from ai_trading.alpaca_api import _bars_time_window, get_bars_df  # AI-AGENT-REF: market data helper
  |
help: Remove unused import

F401 [*] `datetime.timezone` imported but unused
 --> ai_trading/scripts/self_check.py:3:32
  |
1 | import json
2 | import os
3 | from datetime import datetime, timezone
  |                                ^^^^^^^^
4 |
5 | from ai_trading.alpaca_api import _bars_time_window, get_bars_df  # AI-AGENT-REF: market data helper
  |
help: Remove unused import

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/scripts/self_check.py:9:8
   |
 7 | try:  # AI-AGENT-REF: optional import
 8 |     from alpaca_trade_api.rest import TimeFrame
 9 | except Exception:  # pragma: no cover
   |        ^^^^^^^^^
10 |     TimeFrame = None  # type: ignore
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/security.py:146:16
    |
144 |             key = base64.urlsafe_b64encode(kdf.derive(master_key_bytes))
145 |             return Fernet(key)
146 |         except Exception as e:
    |                ^^^^^^^^^
147 |             self.logger.error(f"Failed to initialize encryption: {e}")
148 |             return None
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/security.py:180:16
    |
178 |             encrypted = self._fernet.encrypt(value.encode())
179 |             return base64.urlsafe_b64encode(encrypted).decode()
180 |         except Exception as e:
    |                ^^^^^^^^^
181 |             self.logger.error(f"Encryption failed: {e}")
182 |             return value
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/security.py:193:16
    |
191 |             decrypted = self._fernet.decrypt(encrypted_bytes)
192 |             return decrypted.decode()
193 |         except Exception as e:
    |                ^^^^^^^^^
194 |             self.logger.error(f"Decryption failed: {e}")
195 |             return encrypted_value
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/security.py:247:16
    |
245 |             base64.urlsafe_b64decode(value.encode())
246 |             return True
247 |         except Exception:
    |                ^^^^^^^^^
248 |             # Any decoding error means it's not a valid token
249 |             return False
    |

F821 Undefined name `timedelta`
   --> ai_trading/security.py:454:58
    |
452 |                     e
453 |                     for e in self._security_events
454 |                     if e.timestamp > datetime.now(UTC) - timedelta(hours=24)
    |                                                          ^^^^^^^^^
455 |                 ]
456 |             ),
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/security.py:499:16
    |
498 |             return True
499 |         except Exception as e:
    |                ^^^^^^^^^
500 |             self.safe_logger.error(f"Failed to rotate encryption key: {e}")
501 |             return False
    |

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/strategies/__init__.py:4:1
  |
2 |   Canonical strategies public API.
3 |   """
4 | / from .momentum import MomentumStrategy
5 | | from .mean_reversion import MeanReversionStrategy
  | |_________________________________________________^
6 |   try:  # AI-AGENT-REF: lazy meta-learning import
7 |       from .meta_learning import MetaLearning
  |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/strategies/__init__.py:8:8
   |
 6 | try:  # AI-AGENT-REF: lazy meta-learning import
 7 |     from .meta_learning import MetaLearning
 8 | except Exception:  # pragma: no cover
   |        ^^^^^^^^^
 9 |     MetaLearning = None  # type: ignore
10 | from .base import StrategySignal as TradeSignal
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/backtest.py:235:16
    |
233 |             return results
234 |
235 |         except Exception as e:
    |                ^^^^^^^^^
236 |             logger.error(f"Error running backtest: {e}")
237 |             return {"error": str(e)}
    |

F821 Undefined name `np`
   --> ai_trading/strategies/backtest.py:310:34
    |
308 |                 volatility = abs(high_price - low_price) / close_price
309 |                 slippage_pct = (
310 |                     volatility * np.sqrt(position_size / max(volume, 1)) * 0.1
    |                                  ^^
311 |                 )
312 |                 slippage_amount = min(0.01, slippage_pct)  # Cap at 1%
    |

F821 Undefined name `np`
   --> ai_trading/strategies/backtest.py:331:20
    |
330 |                 # Simulate partial fill
331 |                 if np.random.random() > fill_prob:
    |                    ^^
332 |                     actual_quantity = int(position_size * np.random.uniform(0.3, 0.9))
    |

F821 Undefined name `np`
   --> ai_trading/strategies/backtest.py:332:59
    |
330 |                 # Simulate partial fill
331 |                 if np.random.random() > fill_prob:
332 |                     actual_quantity = int(position_size * np.random.uniform(0.3, 0.9))
    |                                                           ^^
333 |
334 |             # Step 5: Calculate latency effects
    |

F821 Undefined name `np`
   --> ai_trading/strategies/backtest.py:338:32
    |
336 |             if self.microstructure_available and trade_timestamp:
337 |                 # Simulate latency impact (simplified)
338 |                 latency_cost = np.random.normal(0, 0.0001)  # Small random cost
    |                                ^^
339 |                 execution_price *= 1 + latency_cost
    |

F821 Undefined name `np`
   --> ai_trading/strategies/backtest.py:357:25
    |
355 |                 # This is simplified - real implementation would track positions
356 |                 exit_price = execution_price * (
357 |                     1 + np.random.normal(0, 0.02)
    |                         ^^
358 |                 )  # Random exit
359 |                 gross_pnl = actual_quantity * (exit_price - execution_price)
    |

F821 Undefined name `np`
   --> ai_trading/strategies/backtest.py:362:53
    |
360 |             else:
361 |                 # Short position
362 |                 exit_price = execution_price * (1 + np.random.normal(0, 0.02))
    |                                                     ^^
363 |                 gross_pnl = actual_quantity * (execution_price - exit_price)
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/backtest.py:406:16
    |
404 |             }
405 |
406 |         except Exception as e:
    |                ^^^^^^^^^
407 |             logger.error(f"Error simulating trade: {e}")
408 |             return {
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/backtest.py:437:16
    |
435 |             return max_dd
436 |
437 |         except Exception as e:
    |                ^^^^^^^^^
438 |             logger.error(f"Error calculating max drawdown: {e}")
439 |             return 0.0
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/backtest.py:475:16
    |
473 |             return analysis
474 |
475 |         except Exception as e:
    |                ^^^^^^^^^
476 |             logger.error(f"Error analyzing performance: {e}")
477 |             return {"error": str(e)}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/backtest.py:603:12
    |
601 |         return True
602 |
603 |     except Exception as e:
    |            ^^^^^^^^^
604 |         logging.error(f"✗ Backtest smoke test failed: {e}")
605 |         return False
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/backtester.py:1:1
   |
 1 | / from __future__ import annotations
 2 | |
 3 | | import glob
 4 | | import os
 5 | | import sys
 6 | | from abc import ABC, abstractmethod
 7 | | from dataclasses import dataclass
 8 | | from datetime import UTC, datetime
 9 | | from typing import Any
10 | |
11 | | import pandas as pd
12 | |
13 | | # AI-AGENT-REF: Removed legacy trade_execution import as part of shim cleanup
14 | | # from ai_trading import trade_execution as execution_api  # type: ignore
15 | | from ai_trading.core.bot_engine import get_risk_engine
   | |______________________________________________________^
16 |   # Instantiate if needed:
17 |   risk_engine_instance = get_risk_engine()
   |
help: Organize imports

E402 Module level import not at top of file
  --> ai_trading/strategies/backtester.py:19:1
   |
17 |   risk_engine_instance = get_risk_engine()
18 |
19 | / from ai_trading import (
20 | |     config,
21 | |     signals,  # noqa: F401
22 | | )
   | |_^
23 |   from ai_trading.core import bot_engine
24 |   from ai_trading.logging import get_logger
   |

E402 Module level import not at top of file
  --> ai_trading/strategies/backtester.py:23:1
   |
21 |     signals,  # noqa: F401
22 | )
23 | from ai_trading.core import bot_engine
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
24 | from ai_trading.logging import get_logger
   |

E402 Module level import not at top of file
  --> ai_trading/strategies/backtester.py:24:1
   |
22 | )
23 | from ai_trading.core import bot_engine
24 | from ai_trading.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
25 |
26 | logger = get_logger(__name__)
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/backtester.py:193:20
    |
191 |             try:
192 |                 bot_engine.apply_fill(fill)
193 |             except Exception as e:
    |                    ^^^^^^^^^
194 |                 logger.debug("Failed to apply fill in backtester: %s", e)
195 |         qty = fill.order.qty if fill.order.side.lower() == "buy" else -fill.order.qty
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/backtester.py:232:28
    |
230 |                     try:
231 |                         bot_engine.update_market_data(sym, df.loc[ts])
232 |                     except Exception as e:
    |                            ^^^^^^^^^
233 |                         logger.debug("Failed to update market data for %s: %s", sym, e)
234 |             orders = []
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/backtester.py:238:24
    |
236 |                 try:
237 |                     orders = bot_engine.next_cycle()
238 |                 except Exception as e:
    |                        ^^^^^^^^^
239 |                     logger.debug("Failed to execute next_cycle: %s", e)
240 |                     orders = []
    |

F841 Local variable `risk_engine_instance` is assigned to but never used
   --> ai_trading/strategies/backtester.py:355:5
    |
353 |         DefaultExecutionModel(args.commission, args.slippage_pips, args.latency_bars),
354 |     )
355 |     risk_engine_instance = get_risk_engine()
    |     ^^^^^^^^^^^^^^^^^^^^
356 |     results: dict[str, BacktestResult] = {}
    |
help: Remove assignment to unused variable `risk_engine_instance`

E402 Module level import not at top of file
  --> ai_trading/strategies/imports.py:25:1
   |
24 | # TA library for optimized technical analysis - hard dependency
25 | import ta
   | ^^^^^^^^^
26 | TA_AVAILABLE = True
27 | logger.info("TA library loaded successfully for enhanced technical analysis")
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/imports.py:25:1
   |
24 | # TA library for optimized technical analysis - hard dependency
25 | import ta
   | ^^^^^^^^^
26 | TA_AVAILABLE = True
27 | logger.info("TA library loaded successfully for enhanced technical analysis")
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/strategies/mean_reversion.py:1:1
  |
1 | / from __future__ import annotations
2 | | import pandas as pd
3 | | from .base import StrategySignal
4 | | from ai_trading.logging import logger as log
  | |____________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/metalearning.py:8:1
   |
 6 |   """
 7 |
 8 | / import warnings
 9 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
10 | | from datetime import UTC, datetime, timedelta
11 | | from typing import Any
   | |______________________^
12 |
13 |   warnings.filterwarnings("ignore")
   |
help: Organize imports

E402 Module level import not at top of file
  --> ai_trading/strategies/metalearning.py:16:1
   |
15 | # AI-AGENT-REF: Use centralized logger as per AGENTS.md
16 | from ai_trading.logging import logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
17 |
18 | # AI-AGENT-REF: Import dependencies - sklearn is a hard dependency
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/metalearning.py:16:1
   |
15 |   # AI-AGENT-REF: Use centralized logger as per AGENTS.md
16 | / from ai_trading.logging import logger
17 | |
18 | | # AI-AGENT-REF: Import dependencies - sklearn is a hard dependency
19 | | import numpy as np
   | |__________________^
20 |
21 |   NUMPY_AVAILABLE = True
   |
help: Organize imports

E402 Module level import not at top of file
  --> ai_trading/strategies/metalearning.py:19:1
   |
18 | # AI-AGENT-REF: Import dependencies - sklearn is a hard dependency
19 | import numpy as np
   | ^^^^^^^^^^^^^^^^^^
20 |
21 | NUMPY_AVAILABLE = True
   |

E402 Module level import not at top of file
  --> ai_trading/strategies/metalearning.py:23:1
   |
21 | NUMPY_AVAILABLE = True
22 |
23 | import pandas as pd
   | ^^^^^^^^^^^^^^^^^^^
24 |
25 | PANDAS_AVAILABLE = True
   |

F401 [*] `pandas` imported but unused
  --> ai_trading/strategies/metalearning.py:23:18
   |
21 | NUMPY_AVAILABLE = True
22 |
23 | import pandas as pd
   |                  ^^
24 |
25 | PANDAS_AVAILABLE = True
   |
help: Remove unused import: `pandas`

E402 Module level import not at top of file
  --> ai_trading/strategies/metalearning.py:28:1
   |
27 | # AI-AGENT-REF: Import data fetcher for historical data
28 | from ai_trading.data_fetcher import get_minute_df  # type: ignore
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/metalearning.py:28:1
   |
27 |   # AI-AGENT-REF: Import data fetcher for historical data
28 | / from ai_trading.data_fetcher import get_minute_df  # type: ignore
29 | |
30 | |
31 | | # AI-AGENT-REF: Import base strategy framework
32 | | from ..core.enums import OrderSide, RiskLevel
33 | | from .base import BaseStrategy, StrategySignal
34 | |
35 | | # Machine learning imports - sklearn is a hard dependency
36 | | from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
37 | | from sklearn.metrics import accuracy_score, classification_report
38 | | from sklearn.model_selection import train_test_split
39 | | from sklearn.preprocessing import StandardScaler
   | |________________________________________________^
40 |
41 |   ML_AVAILABLE = True
   |
help: Organize imports

E402 Module level import not at top of file
  --> ai_trading/strategies/metalearning.py:32:1
   |
31 | # AI-AGENT-REF: Import base strategy framework
32 | from ..core.enums import OrderSide, RiskLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
33 | from .base import BaseStrategy, StrategySignal
   |

E402 Module level import not at top of file
  --> ai_trading/strategies/metalearning.py:33:1
   |
31 | # AI-AGENT-REF: Import base strategy framework
32 | from ..core.enums import OrderSide, RiskLevel
33 | from .base import BaseStrategy, StrategySignal
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 |
35 | # Machine learning imports - sklearn is a hard dependency
   |

E402 Module level import not at top of file
  --> ai_trading/strategies/metalearning.py:36:1
   |
35 | # Machine learning imports - sklearn is a hard dependency
36 | from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
37 | from sklearn.metrics import accuracy_score, classification_report
38 | from sklearn.model_selection import train_test_split
   |

E402 Module level import not at top of file
  --> ai_trading/strategies/metalearning.py:37:1
   |
35 | # Machine learning imports - sklearn is a hard dependency
36 | from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
37 | from sklearn.metrics import accuracy_score, classification_report
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
38 | from sklearn.model_selection import train_test_split
39 | from sklearn.preprocessing import StandardScaler
   |

F401 [*] `sklearn.metrics.classification_report` imported but unused
  --> ai_trading/strategies/metalearning.py:37:45
   |
35 | # Machine learning imports - sklearn is a hard dependency
36 | from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
37 | from sklearn.metrics import accuracy_score, classification_report
   |                                             ^^^^^^^^^^^^^^^^^^^^^
38 | from sklearn.model_selection import train_test_split
39 | from sklearn.preprocessing import StandardScaler
   |
help: Remove unused import: `sklearn.metrics.classification_report`

E402 Module level import not at top of file
  --> ai_trading/strategies/metalearning.py:38:1
   |
36 | from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
37 | from sklearn.metrics import accuracy_score, classification_report
38 | from sklearn.model_selection import train_test_split
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
39 | from sklearn.preprocessing import StandardScaler
   |

E402 Module level import not at top of file
  --> ai_trading/strategies/metalearning.py:39:1
   |
37 | from sklearn.metrics import accuracy_score, classification_report
38 | from sklearn.model_selection import train_test_split
39 | from sklearn.preprocessing import StandardScaler
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
40 |
41 | ML_AVAILABLE = True
   |

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/strategies/moving_average_crossover.py:1:1
  |
1 | / from __future__ import annotations
2 | |
3 | | from dataclasses import dataclass
4 | | import logging
5 | | import pandas as pd
6 | |
7 | | from .base import StrategySignal
  | |________________________________^
8 |
9 |   log = logging.getLogger(__name__)
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/multi_timeframe.py:10:1
   |
 9 |   # AI-AGENT-REF: use standard imports for hard dependencies
10 | / import logging
11 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
12 | | from datetime import UTC, datetime
13 | | from enum import Enum
14 | | from typing import Any
15 | |
16 | | import pandas as pd
17 | |
18 | | # Use the centralized logger as per AGENTS.md
19 | | from ai_trading.logging import logger
20 | |
21 | | from ..core.enums import TimeFrame
   | |__________________________________^
   |
help: Organize imports

F401 [*] `logging` imported but unused
  --> ai_trading/strategies/multi_timeframe.py:10:8
   |
 9 | # AI-AGENT-REF: use standard imports for hard dependencies
10 | import logging
   |        ^^^^^^^
11 | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
12 | from datetime import UTC, datetime
   |
help: Remove unused import: `logging`

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/performance_allocator.py:9:1
   |
 7 |   """
 8 |
 9 | / from collections import defaultdict, deque
10 | | from dataclasses import dataclass
11 | | from datetime import datetime, timedelta, UTC
12 | | from typing import Any, Dict, List
13 | |
14 | | import numpy as np
15 | | import pandas as pd  # noqa: F401  # AI-AGENT-REF: retained for downstream usage
16 | |
17 | | # Use centralized logger as per AGENTS.md
18 | | from ai_trading.logging import logger
19 | | from ai_trading.config.settings import get_settings  # AI-AGENT-REF: env-backed settings
20 | | from ai_trading.config.management import TradingConfig  # AI-AGENT-REF: config type
   | |______________________________________________________^
   |
help: Organize imports

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> ai_trading/strategies/performance_allocator.py:12:1
   |
10 | from dataclasses import dataclass
11 | from datetime import datetime, timedelta, UTC
12 | from typing import Any, Dict, List
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import numpy as np
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> ai_trading/strategies/performance_allocator.py:12:1
   |
10 | from dataclasses import dataclass
11 | from datetime import datetime, timedelta, UTC
12 | from typing import Any, Dict, List
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import numpy as np
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/strategies/performance_allocator.py:37:12
   |
35 |             if 0.0 <= v <= 1.0:
36 |                 return v
37 |     except Exception:
   |            ^^^^^^^^^
38 |         pass
39 |     s = get_settings()
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/strategies/performance_allocator.py:49:16
   |
47 |                 if 0.0 <= x <= 1.0:
48 |                     return x
49 |         except Exception:
   |                ^^^^^^^^^
50 |             continue
51 |     return 0.60
   |

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> ai_trading/strategies/performance_allocator.py:83:50
   |
81 |     """
82 |     
83 |     def __init__(self, config: AllocatorConfig | Dict | None = None):
   |                                                  ^^^^
84 |         """Initialize performance-based allocator."""
85 |         if config is None:
   |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/strategies/performance_allocator.py:110:31
    |
109 |         # Track strategy performance history
110 |         self.strategy_trades: Dict[str, deque] = defaultdict(lambda: deque(maxlen=1000))
    |                               ^^^^
111 |         self.strategy_allocations: Dict[str, float] = {}
112 |         self.last_update = datetime.now(UTC)
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/strategies/performance_allocator.py:111:36
    |
109 |         # Track strategy performance history
110 |         self.strategy_trades: Dict[str, deque] = defaultdict(lambda: deque(maxlen=1000))
111 |         self.strategy_allocations: Dict[str, float] = {}
    |                                    ^^^^
112 |         self.last_update = datetime.now(UTC)
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/strategies/performance_allocator.py:136:36
    |
134 |         return max(0.0, min(1.0, s))
135 |
136 |     def allocate(self, strategies: Dict[str, List[Any]], config: TradingConfig) -> Dict[str, List[Any]]:
    |                                    ^^^^
137 |         """Filter low-confidence signals and bias weights by confidence."""  # AI-AGENT-REF
138 |         th = _resolve_conf_threshold(config)
    |
help: Replace with `dict`

UP006 [*] Use `list` instead of `List` for type annotation
   --> ai_trading/strategies/performance_allocator.py:136:46
    |
134 |         return max(0.0, min(1.0, s))
135 |
136 |     def allocate(self, strategies: Dict[str, List[Any]], config: TradingConfig) -> Dict[str, List[Any]]:
    |                                              ^^^^
137 |         """Filter low-confidence signals and bias weights by confidence."""  # AI-AGENT-REF
138 |         th = _resolve_conf_threshold(config)
    |
help: Replace with `list`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/strategies/performance_allocator.py:136:84
    |
134 |         return max(0.0, min(1.0, s))
135 |
136 |     def allocate(self, strategies: Dict[str, List[Any]], config: TradingConfig) -> Dict[str, List[Any]]:
    |                                                                                    ^^^^
137 |         """Filter low-confidence signals and bias weights by confidence."""  # AI-AGENT-REF
138 |         th = _resolve_conf_threshold(config)
    |
help: Replace with `dict`

UP006 [*] Use `list` instead of `List` for type annotation
   --> ai_trading/strategies/performance_allocator.py:136:94
    |
134 |         return max(0.0, min(1.0, s))
135 |
136 |     def allocate(self, strategies: Dict[str, List[Any]], config: TradingConfig) -> Dict[str, List[Any]]:
    |                                                                                              ^^^^
137 |         """Filter low-confidence signals and bias weights by confidence."""  # AI-AGENT-REF
138 |         th = _resolve_conf_threshold(config)
    |
help: Replace with `list`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/strategies/performance_allocator.py:143:16
    |
141 |         gamma = float(getattr(s, "score_size_gamma", 1.0) or 1.0)
142 |         use_boost = max_boost > 1.0
143 |         gated: Dict[str, List[Any]] = {}
    |                ^^^^
144 |         boost_stats: List[tuple[str, float, float]] = []
145 |         for name, sigs in (strategies or {}).items():
    |
help: Replace with `dict`

UP006 [*] Use `list` instead of `List` for type annotation
   --> ai_trading/strategies/performance_allocator.py:143:26
    |
141 |         gamma = float(getattr(s, "score_size_gamma", 1.0) or 1.0)
142 |         use_boost = max_boost > 1.0
143 |         gated: Dict[str, List[Any]] = {}
    |                          ^^^^
144 |         boost_stats: List[tuple[str, float, float]] = []
145 |         for name, sigs in (strategies or {}).items():
    |
help: Replace with `list`

UP006 [*] Use `list` instead of `List` for type annotation
   --> ai_trading/strategies/performance_allocator.py:144:22
    |
142 |         use_boost = max_boost > 1.0
143 |         gated: Dict[str, List[Any]] = {}
144 |         boost_stats: List[tuple[str, float, float]] = []
    |                      ^^^^
145 |         for name, sigs in (strategies or {}).items():
146 |             kept: List[Any] = []
    |
help: Replace with `list`

UP006 [*] Use `list` instead of `List` for type annotation
   --> ai_trading/strategies/performance_allocator.py:146:19
    |
144 |         boost_stats: List[tuple[str, float, float]] = []
145 |         for name, sigs in (strategies or {}).items():
146 |             kept: List[Any] = []
    |                   ^^^^
147 |             dropped = 0
148 |             mults: List[float] = []
    |
help: Replace with `list`

UP006 [*] Use `list` instead of `List` for type annotation
   --> ai_trading/strategies/performance_allocator.py:148:20
    |
146 |             kept: List[Any] = []
147 |             dropped = 0
148 |             mults: List[float] = []
    |                    ^^^^
149 |             for s_ in sigs or []:
150 |                 try:
    |
help: Replace with `list`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/performance_allocator.py:152:24
    |
150 |                 try:
151 |                     c = float(getattr(s_, "confidence", 0.0))
152 |                 except Exception:
    |                        ^^^^^^^^^
153 |                     c = 0.0
154 |                 if c >= th:
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/performance_allocator.py:159:32
    |
157 |                         try:
158 |                             base = float(getattr(s_, "weight", 1.0))
159 |                         except Exception:
    |                                ^^^^^^^^^
160 |                             base = 1.0
161 |                         s_.weight = base * m
    |

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/strategies/performance_allocator.py:190:69
    |
188 |         return gated
189 |     
190 |     def record_trade_result(self, strategy_name: str, trade_result: Dict):
    |                                                                     ^^^^
191 |         """
192 |         Record a trade result for a strategy.
    |
help: Replace with `dict`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/performance_allocator.py:229:16
    |
227 |             logger.warning("Failed to record trade result for strategy %s: %s", strategy_name, e,
228 |                           extra={"component": "performance_allocator", "strategy": strategy_name, "error_type": "trade_record"})
229 |         except Exception as e:
    |                ^^^^^^^^^
230 |             logger.error("Unexpected error recording trade for strategy %s: %s", strategy_name, e,
231 |                         extra={"component": "performance_allocator", "strategy": strategy_name, "error_type": "unexpected"})
    |

UP006 [*] Use `list` instead of `List` for type annotation
   --> ai_trading/strategies/performance_allocator.py:233:58
    |
231 |                         extra={"component": "performance_allocator", "strategy": strategy_name, "error_type": "unexpected"})
232 |     
233 |     def calculate_strategy_allocations(self, strategies: List[str], 
    |                                                          ^^^^
234 |                                      total_capital: float) -> Dict[str, float]:
235 |         """
    |
help: Replace with `list`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/strategies/performance_allocator.py:234:63
    |
233 |     def calculate_strategy_allocations(self, strategies: List[str], 
234 |                                      total_capital: float) -> Dict[str, float]:
    |                                                               ^^^^
235 |         """
236 |         Calculate optimal capital allocation across strategies based on performance.
    |
help: Replace with `dict`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/performance_allocator.py:280:16
    |
278 |             return allocations
279 |             
280 |         except Exception as e:
    |                ^^^^^^^^^
281 |             logger.error("Strategy allocation calculation failed: %s", e,
282 |                         extra={"component": "performance_allocator", "error_type": "allocation"})
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/performance_allocator.py:353:16
    |
351 |             logger.warning("Performance calculation failed for strategy %s: %s", strategy_name, e)
352 |             return 0.3  # Below average for calculation errors
353 |         except Exception as e:
    |                ^^^^^^^^^
354 |             logger.error("Unexpected error calculating performance for strategy %s: %s", strategy_name, e)
355 |             return 0.3
    |

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/strategies/performance_allocator.py:363:42
    |
361 |         return max(0.0, min(1.0, (value - min_val) / (max_val - min_val)))
362 |     
363 |     def _scores_to_weights(self, scores: Dict[str, float]) -> Dict[str, float]:
    |                                          ^^^^
364 |         """Convert performance scores to allocation weights."""
365 |         if not scores:
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/strategies/performance_allocator.py:363:63
    |
361 |         return max(0.0, min(1.0, (value - min_val) / (max_val - min_val)))
362 |     
363 |     def _scores_to_weights(self, scores: Dict[str, float]) -> Dict[str, float]:
    |                                                               ^^^^
364 |         """Convert performance scores to allocation weights."""
365 |         if not scores:
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/strategies/performance_allocator.py:381:49
    |
379 |         return dict(zip(scores.keys(), weights))
380 |     
381 |     def _apply_allocation_bounds(self, weights: Dict[str, float]) -> Dict[str, float]:
    |                                                 ^^^^
382 |         """Apply minimum and maximum allocation bounds."""
383 |         if not weights:
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/strategies/performance_allocator.py:381:70
    |
379 |         return dict(zip(scores.keys(), weights))
380 |     
381 |     def _apply_allocation_bounds(self, weights: Dict[str, float]) -> Dict[str, float]:
    |                                                                      ^^^^
382 |         """Apply minimum and maximum allocation bounds."""
383 |         if not weights:
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> ai_trading/strategies/performance_allocator.py:428:70
    |
426 |         return bounded_weights
427 |     
428 |     def get_strategy_performance_report(self, strategy_name: str) -> Dict:
    |                                                                      ^^^^
429 |         """Generate detailed performance report for a strategy."""
430 |         try:
    |
help: Replace with `dict`

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/performance_allocator.py:467:16
    |
465 |             return report
466 |             
467 |         except Exception as e:
    |                ^^^^^^^^^
468 |             logger.error("Performance report generation failed for strategy %s: %s", strategy_name, e)
469 |             return {
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/performance_allocator.py:503:16
    |
501 |             return rank_changes >= significant_change_threshold
502 |             
503 |         except Exception as e:
    |                ^^^^^^^^^
504 |             logger.warning("Rebalance decision failed: %s", e)
505 |             return False  # Conservative - don't rebalance on errors
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/regime_detection.py:9:1
   |
 8 |   # AI-AGENT-REF: use standard imports for hard dependencies
 9 | / import logging
10 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
11 | | from datetime import UTC, datetime
12 | | from enum import Enum
13 | | from typing import Any
14 | |
15 | | import numpy as np
16 | | import pandas as pd
17 | |
18 | | # Use the centralized logger as per AGENTS.md
19 | | from ai_trading.logging import logger
   | |_____________________________________^
   |
help: Organize imports

F401 [*] `logging` imported but unused
  --> ai_trading/strategies/regime_detection.py:9:8
   |
 8 | # AI-AGENT-REF: use standard imports for hard dependencies
 9 | import logging
   |        ^^^^^^^
10 | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
11 | from datetime import UTC, datetime
   |
help: Remove unused import: `logging`

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/regime_detector.py:8:1
   |
 6 |   """
 7 |
 8 | / import logging
 9 | | import math
10 | | import statistics
11 | | from dataclasses import dataclass
12 | | from enum import Enum
13 | | from typing import Any
14 | |
15 | | # Use the centralized logger as per AGENTS.md
16 | | from ai_trading.logging import logger
17 | |
18 | | # Import enhanced features if available
19 | | import numpy as np
   | |__________________^
20 |
21 |   NUMPY_AVAILABLE = True
   |
help: Organize imports

F401 [*] `logging` imported but unused
  --> ai_trading/strategies/regime_detector.py:8:8
   |
 6 | """
 7 |
 8 | import logging
   |        ^^^^^^^
 9 | import math
10 | import statistics
   |
help: Remove unused import: `logging`

E402 Module level import not at top of file
  --> ai_trading/strategies/regime_detector.py:23:1
   |
21 | NUMPY_AVAILABLE = True
22 |
23 | from ai_trading.risk.adaptive_sizing import MarketRegime, VolatilityRegime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
24 |
25 | ENHANCED_REGIMES_AVAILABLE = True
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/regime_detector.py:214:16
    |
212 |             return regime, metrics
213 |
214 |         except Exception as e:
    |                ^^^^^^^^^
215 |             logger.error(f"Error detecting market regime: {e}")
216 |             return self._fallback_regime_detection()
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/regime_detector.py:275:16
    |
273 |             return adjusted_thresholds
274 |
275 |         except Exception as e:
    |                ^^^^^^^^^
276 |             logger.error(f"Error calculating dynamic thresholds: {e}")
277 |             # Return conservative defaults
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/regime_detector.py:333:16
    |
331 |             return trend_strength, direction
332 |
333 |         except Exception as e:
    |                ^^^^^^^^^
334 |             logger.error(f"Error calculating trend metrics: {e}")
335 |             return 0.0, TrendDirection.SIDEWAYS
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/regime_detector.py:380:16
    |
378 |             return percentile, regime
379 |
380 |         except Exception as e:
    |                ^^^^^^^^^
381 |             logger.error(f"Error calculating volatility regime: {e}")
382 |             return 0.5, VolatilityRegime.NORMAL
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/regime_detector.py:406:16
    |
404 |             return momentum
405 |
406 |         except Exception as e:
    |                ^^^^^^^^^
407 |             logger.error(f"Error calculating momentum: {e}")
408 |             return 0.0
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/regime_detector.py:431:16
    |
429 |             return min(1.0, max(0.0, avg_correlation))
430 |
431 |         except Exception as e:
    |                ^^^^^^^^^
432 |             logger.error(f"Error calculating correlation environment: {e}")
433 |             return 0.3
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/regime_detector.py:447:16
    |
445 |             return None
446 |
447 |         except Exception:
    |                ^^^^^^^^^
448 |             return None
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/regime_detector.py:471:16
    |
469 |             return max(0.0, min(1.0, confidence))
470 |
471 |         except Exception:
    |                ^^^^^^^^^
472 |             return 0.5
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/strategies/regime_detector.py:516:16
    |
514 |             return MarketRegime.NORMAL
515 |
516 |         except Exception as e:
    |                ^^^^^^^^^
517 |             logger.error(f"Error classifying market regime: {e}")
518 |             return MarketRegime.NORMAL
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/signals.py:9:1
   |
 7 |   """
 8 |
 9 | / import logging
10 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
11 | | import statistics
12 | | from datetime import UTC, datetime
13 | | from typing import Any
14 | |
15 | | import numpy as np
16 | |
17 | | # Use the centralized logger as per AGENTS.md
18 | | from ai_trading.logging import logger
19 | |
20 | | from sklearn.ensemble import RandomForestRegressor
21 | | from sklearn.linear_model import Ridge
   | |______________________________________^
22 |
23 |   sklearn_available = True
   |
help: Organize imports

F401 [*] `logging` imported but unused
  --> ai_trading/strategies/signals.py:9:8
   |
 7 | """
 8 |
 9 | import logging
   |        ^^^^^^^
10 | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
11 | import statistics
   |
help: Remove unused import: `logging`

F401 [*] `sklearn.ensemble.RandomForestRegressor` imported but unused
  --> ai_trading/strategies/signals.py:20:30
   |
18 | from ai_trading.logging import logger
19 |
20 | from sklearn.ensemble import RandomForestRegressor
   |                              ^^^^^^^^^^^^^^^^^^^^^
21 | from sklearn.linear_model import Ridge
   |
help: Remove unused import: `sklearn.ensemble.RandomForestRegressor`

E402 Module level import not at top of file
  --> ai_trading/strategies/signals.py:25:1
   |
23 | sklearn_available = True
24 |
25 | from .base import StrategySignal
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

UP035 [*] Import from `collections.abc` instead: `Mapping`, `Sequence`
 --> ai_trading/telemetry/metrics_logger.py:6:1
  |
4 | import logging
5 | from pathlib import Path
6 | from typing import Any, Mapping, Sequence
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |
8 | logger = logging.getLogger(__name__)
  |
help: Import from `collections.abc`

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/telemetry/metrics_logger.py:32:12
   |
30 |     try:
31 |         path.parent.mkdir(parents=True, exist_ok=True)
32 |     except Exception as e:
   |            ^^^^^^^^^
33 |         logger.warning("Could not create parent dir for %s: %s", path, e)
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/telemetry/metrics_logger.py:61:16
   |
59 |         try:
60 |             row["max_drawdown"] = compute_max_drawdown(equity_curve)
61 |         except Exception:
   |                ^^^^^^^^^
62 |             row["max_drawdown"] = ""
63 |     _write_csv_row(filename, row)
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/tools/fetch_sample_universe.py:1:1
   |
 1 | / from __future__ import annotations
 2 | |
 3 | | import argparse
 4 | | import os
 5 | | from datetime import UTC, datetime, timedelta
 6 | |
 7 | | from ai_trading.logging import get_logger
 8 | | from ai_trading.utils import http
 9 | | from ai_trading.utils.timing import HTTP_TIMEOUT
10 | | from ai_trading.utils.prof import StageTimer
   | |____________________________________________^
11 |
12 |   logger = get_logger(__name__)
   |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/trade_logic.py:14:8
   |
12 |         drawdown_adjusted_kelly_alt as drawdown_adjusted_kelly,
13 |     )
14 | except Exception:  # pragma: no cover - fallback for older installs
   |        ^^^^^^^^^
15 |     from ai_trading.capital_scaling import (
16 |         drawdown_adjusted_kelly,
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/trade_logic.py:41:12
   |
39 |         last_price, prev_price = float(price_data[-1]), float(price_data[-2])
40 |         recent_gain = (last_price - prev_price) / max(prev_price, 1e-9)
41 |     except Exception:
   |            ^^^^^^^^^
42 |         # if indexing fails return False
43 |         log.warning("Failed to calculate recent gain from price data")
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/trade_logic.py:102:12
    |
100 |             val = float(data)
101 |         return float(val or 1e-3)
102 |     except Exception as exc:
    |            ^^^^^^^^^
103 |         logger.warning("extract_price failed: %s", exc)
104 |         return 1e-3
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/trade_logic.py:184:16
    |
182 |             if sig is not None:
183 |                 signals[sym] = sig
184 |         except Exception as exc:
    |                ^^^^^^^^^
185 |             ctx.logger.warning("Entry eval failed for %s: %s", sym, exc)
186 |     return signals
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/trade_logic.py:218:16
    |
216 |             if sig:
217 |                 exits[sym] = sig
218 |         except Exception as exc:
    |                ^^^^^^^^^
219 |             ctx.logger.warning("Exit eval failed for %s: %s", sym, exc)
220 |     return exits
    |

F401 [*] `logging` imported but unused
  --> ai_trading/training/train_ml.py:9:8
   |
 8 | import json
 9 | import logging
   |        ^^^^^^^
10 | import pickle
11 | from datetime import datetime, timezone
   |
help: Remove unused import: `logging`

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/training/train_ml.py:26:8
   |
24 |     lgb = importlib.import_module("lightgbm")
25 |     lgb_available = True
26 | except Exception:  # pragma: no cover - optional dependency
   |        ^^^^^^^^^
27 |     from ai_trading.thirdparty import lightgbm_compat as lgb
28 |     lgb_available = False
   |

E402 Module level import not at top of file
  --> ai_trading/training/train_ml.py:34:1
   |
32 | xgb_available = True
33 |
34 | from sklearn.linear_model import Ridge
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
35 | from sklearn.metrics import (
36 |     accuracy_score,
   |

E402 Module level import not at top of file
  --> ai_trading/training/train_ml.py:35:1
   |
34 |   from sklearn.linear_model import Ridge
35 | / from sklearn.metrics import (
36 | |     accuracy_score,
37 | |     classification_report,
38 | |     mean_squared_error,
39 | | )
   | |_^
40 |
41 |   sklearn_available = True
   |

F401 [*] `sklearn.metrics.accuracy_score` imported but unused
  --> ai_trading/training/train_ml.py:36:5
   |
34 | from sklearn.linear_model import Ridge
35 | from sklearn.metrics import (
36 |     accuracy_score,
   |     ^^^^^^^^^^^^^^
37 |     classification_report,
38 |     mean_squared_error,
   |
help: Remove unused import

F401 [*] `sklearn.metrics.classification_report` imported but unused
  --> ai_trading/training/train_ml.py:37:5
   |
35 | from sklearn.metrics import (
36 |     accuracy_score,
37 |     classification_report,
   |     ^^^^^^^^^^^^^^^^^^^^^
38 |     mean_squared_error,
39 | )
   |
help: Remove unused import

E402 Module level import not at top of file
  --> ai_trading/training/train_ml.py:43:1
   |
41 | sklearn_available = True
42 |
43 | import optuna
   | ^^^^^^^^^^^^^
44 |
45 | optuna_available = True
   |

E402 Module level import not at top of file
  --> ai_trading/training/train_ml.py:47:1
   |
45 | optuna_available = True
46 |
47 | from ..data.splits import PurgedGroupTimeSeriesSplit
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/training/train_ml.py:220:16
    |
218 |             return study.best_params
219 |
220 |         except Exception as e:
    |                ^^^^^^^^^
221 |             logger.error(f"Error in hyperparameter optimization: {e}")
222 |             return self._get_default_params()
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/training/train_ml.py:342:16
    |
340 |             return score
341 |
342 |         except Exception as e:
    |                ^^^^^^^^^
343 |             logger.error(f"Error calculating score: {e}")
344 |             return 0.0
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/training/train_ml.py:404:16
    |
402 |             return cv_results
403 |
404 |         except Exception as e:
    |                ^^^^^^^^^
405 |             logger.error(f"Error in CV evaluation: {e}")
406 |             return {"mean_score": 0.0, "std_score": 0.0, "fold_scores": []}
    |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
 --> ai_trading/util/optional_imports.py:4:1
  |
3 | from importlib import import_module
4 | from typing import Optional, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
5 |
6 | # AI-AGENT-REF: helper for lazy optional imports
  |

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
  --> ai_trading/util/optional_imports.py:8:37
   |
 6 | # AI-AGENT-REF: helper for lazy optional imports
 7 |
 8 | def try_import(module_name: str) -> Tuple[Optional[object], bool, Optional[Exception]]:
   |                                     ^^^^^
 9 |     try:
10 |         m = import_module(module_name)
   |
help: Replace with `tuple`

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/util/optional_imports.py:8:43
   |
 6 | # AI-AGENT-REF: helper for lazy optional imports
 7 |
 8 | def try_import(module_name: str) -> Tuple[Optional[object], bool, Optional[Exception]]:
   |                                           ^^^^^^^^^^^^^^^^
 9 |     try:
10 |         m = import_module(module_name)
   |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/util/optional_imports.py:8:67
   |
 6 | # AI-AGENT-REF: helper for lazy optional imports
 7 |
 8 | def try_import(module_name: str) -> Tuple[Optional[object], bool, Optional[Exception]]:
   |                                                                   ^^^^^^^^^^^^^^^^^^^
 9 |     try:
10 |         m = import_module(module_name)
   |
help: Convert to `X | None`

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/util/optional_imports.py:12:12
   |
10 |         m = import_module(module_name)
11 |         return m, True, None
12 |     except Exception as e:  # intentionally broad to capture env issues
   |            ^^^^^^^^^
13 |         return None, False, e
   |

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> ai_trading/utils/datetime.py:4:1
  |
3 | from datetime import date, datetime, timezone
4 | from typing import Any, Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
5 |
6 | # AI-AGENT-REF: timezone helpers for Alpaca compatibility
  |

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> ai_trading/utils/datetime.py:44:54
   |
44 | def compose_intraday_params(start: Any, end: Any) -> Dict[str, str]:
   |                                                      ^^^^
45 |     return {"start": to_rfc3339z(ensure_datetime(start)), "end": to_rfc3339z(ensure_datetime(end))}
   |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> ai_trading/utils/datetime.py:48:51
   |
48 | def compose_daily_params(start: Any, end: Any) -> Dict[str, str]:
   |                                                   ^^^^
49 |     return {"start": to_date_only(start), "end": to_date_only(end)}
   |
help: Replace with `dict`

E402 Module level import not at top of file
  --> ai_trading/utils/determinism.py:19:1
   |
17 | logger = logging.getLogger(__name__)
18 |
19 | import numpy as np
   | ^^^^^^^^^^^^^^^^^^
20 | logger = logging.getLogger(__name__)
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/utils/determinism.py:19:1
   |
17 | logger = logging.getLogger(__name__)
18 |
19 | import numpy as np
   | ^^^^^^^^^^^^^^^^^^
20 | logger = logging.getLogger(__name__)
   |
help: Organize imports

F821 Undefined name `HAS_NUMPY`
  --> ai_trading/utils/determinism.py:34:8
   |
33 |     # NumPy (if available)
34 |     if HAS_NUMPY:
   |        ^^^^^^^^^
35 |         np.random.seed(seed)
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/utils/determinism.py:38:5
   |
37 |       # TensorFlow (if available)
38 | /     import tensorflow as tf
39 | |     # PyTorch (if available)
40 | |     import torch
   | |________________^
41 |       # LightGBM (if available)
42 |       # AI-AGENT-REF: optional lightgbm import with shim
   |
help: Organize imports

F401 [*] `tensorflow` imported but unused
  --> ai_trading/utils/determinism.py:38:26
   |
37 |     # TensorFlow (if available)
38 |     import tensorflow as tf
   |                          ^^
39 |     # PyTorch (if available)
40 |     import torch
   |
help: Remove unused import: `tensorflow`

F401 [*] `torch` imported but unused
  --> ai_trading/utils/determinism.py:40:12
   |
38 |     import tensorflow as tf
39 |     # PyTorch (if available)
40 |     import torch
   |            ^^^^^
41 |     # LightGBM (if available)
42 |     # AI-AGENT-REF: optional lightgbm import with shim
   |
help: Remove unused import: `torch`

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/utils/determinism.py:46:12
   |
44 |         import importlib
45 |         lgb = importlib.import_module("lightgbm")  # noqa: F401
46 |     except Exception:  # pragma: no cover - optional dep
   |            ^^^^^^^^^
47 |         from ai_trading.thirdparty import lightgbm_compat as lgb  # noqa: F401
48 |     # Set environment variables for additional determinism
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/utils/determinism.py:83:12
   |
81 |         return hashlib.sha256(content).hexdigest()[:16]  # First 16 chars
82 |
83 |     except Exception as e:
   |            ^^^^^^^^^
84 |         logger.warning(f"Failed to hash data: {e}")
85 |         return "unknown"
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/utils/determinism.py:123:12
    |
121 |         return hash_data(hash_content)
122 |
123 |     except Exception as e:
    |            ^^^^^^^^^
124 |         logger.warning(f"Failed to hash features: {e}")
125 |         return "feature_hash_error"
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/utils/determinism.py:211:20
    |
209 |                 self._is_locked = self._spec.get("locked", False)
210 |
211 |             except Exception as e:
    |                    ^^^^^^^^^
212 |                 self.logger.error(f"Failed to load specification: {e}")
213 |                 self._spec = {}
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/utils/determinism.py:227:16
    |
225 |             self.logger.info(f"Saved model specification to {self.spec_file}")
226 |
227 |         except Exception as e:
    |                ^^^^^^^^^
228 |             self.logger.error(f"Failed to save specification: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/utils/device.py:11:12
   |
 9 |     try:
10 |         import torch  # type: ignore
11 |     except Exception:
   |            ^^^^^^^^^
12 |         _log.info(
13 |             "ML_DEVICE_SELECTED", extra={"device": "cpu", "reason": "torch_unavailable"}
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/utils/device.py:39:12
   |
38 |         tv.append(Tensor)
39 |     except Exception:
   |            ^^^^^^^^^
40 |         return batch
41 |     return {
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/utils/http.py:1:1
   |
 1 | / from __future__ import annotations
 2 | |
 3 | | import os
 4 | | import threading
 5 | | from concurrent.futures import ThreadPoolExecutor, as_completed
 6 | |
 7 | | import requests
 8 | | from requests.adapters import HTTPAdapter
 9 | | from requests.exceptions import (
10 | |     RequestException as RequestsRequestException,  # AI-AGENT-REF: catch raw requests errors
11 | | )
12 | | from urllib3.util.retry import Retry
13 | |
14 | | from ai_trading.exc import (
15 | |     TRANSIENT_HTTP_EXC,
16 | |     JSONDecodeError,
17 | |     RequestException,
18 | | )
19 | | from ai_trading.logging import get_logger  # AI-AGENT-REF: centralized logging
20 | | from ai_trading.utils.retry import retry_call  # AI-AGENT-REF: retry helper
21 | | from ai_trading.utils.timing import HTTP_TIMEOUT, clamp_timeout, sleep  # AI-AGENT-REF: timeout clamp
   | |______________________________________________________________________^
22 |
23 |   _log = get_logger(__name__)
   |
help: Organize imports

F401 [*] `os` imported but unused
 --> ai_trading/utils/imports.py:4:8
  |
2 | import importlib.util
3 | import logging
4 | import os
  |        ^^
5 |
6 | _log = logging.getLogger(__name__)
  |
help: Remove unused import: `os`

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/utils/imports.py:17:12
   |
15 |         mod = importlib.import_module(module_name)
16 |         return getattr(mod, cls_name, None)
17 |     except Exception as e:
   |            ^^^^^^^^^
18 |         _log.error("Failed to import %s (%s): %s", module_name, cls_name, e)
19 |         return None
   |

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/utils/optdeps.py:13:12
   |
11 |     try:
12 |         return _ils.find_spec(name) is not None
13 |     except Exception:
   |            ^^^^^^^^^
14 |         return False
   |

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/utils/optdeps.py:17:30
   |
17 | def try_import(name: str) -> Optional[ModuleType]:
   |                              ^^^^^^^^^^^^^^^^^^^^
18 |     """Attempt to import *name*, returning module or None."""  # AI-AGENT-REF
19 |     try:
   |
help: Convert to `X | None`

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/utils/optdeps.py:21:12
   |
19 |     try:
20 |         return __import__(name)
21 |     except Exception:
   |            ^^^^^^^^^
22 |         return None
   |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/utils/performance.py:215:24
    |
213 |                     result = future.result()
214 |                     results[chunk_index] = result
215 |                 except Exception as e:
    |                        ^^^^^^^^^
216 |                     self.logger.error(f"Parallel task failed: {e}")
217 |                     results[chunk_index] = None
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/utils/performance.py:264:24
    |
262 |                             chunk_results[f"{indicator_name}_{col}"] = result[col]
263 |
264 |                 except Exception as e:
    |                        ^^^^^^^^^
265 |                     logger.warning(
266 |                         f"Failed to calculate {config.get('name', 'unknown')}: {e}"
    |

BLE001 Do not catch blind exception: `Exception`
   --> ai_trading/utils/performance.py:413:12
    |
411 |     try:
412 |         import psutil  # type: ignore
413 |     except Exception:
    |            ^^^^^^^^^
414 |         psutil = None  # type: ignore  # AI-AGENT-REF: degrade if psutil missing
    |

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> ai_trading/utils/process_manager.py:11:1
   |
 9 | from pathlib import Path
10 | from time import monotonic
11 | from typing import Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | from .timing import sleep as psleep
   |

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> ai_trading/utils/process_manager.py:68:33
   |
67 | # Compatibility helpers used in tests
68 | def start_process(name: str) -> Dict[str, str]:
   |                                 ^^^^
69 |     return {"status": "started", "name": name}
   |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> ai_trading/utils/process_manager.py:72:32
   |
72 | def stop_process(name: str) -> Dict[str, str]:
   |                                ^^^^
73 |     return {"status": "stopped", "name": name}
   |
help: Replace with `dict`

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/utils/prof.py:1:1
  |
1 | / from __future__ import annotations
2 | | import time
3 | | from contextlib import contextmanager
  | |_____________________________________^
  |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/utils/prof.py:15:16
   |
13 |         try:
14 |             logger.info("STAGE_TIMING", extra={"stage": stage_name, "elapsed_ms": dt_ms, **extra})
15 |         except Exception:
   |                ^^^^^^^^^
16 |             pass
   |

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/utils/universe.py:1:1
  |
1 | / from __future__ import annotations
2 | | from pathlib import Path
3 | | from typing import List, Set
  | |____________________________^
  |
help: Organize imports

UP035 `typing.List` is deprecated, use `list` instead
 --> ai_trading/utils/universe.py:3:1
  |
1 | from __future__ import annotations
2 | from pathlib import Path
3 | from typing import List, Set
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |

UP035 `typing.Set` is deprecated, use `set` instead
 --> ai_trading/utils/universe.py:3:1
  |
1 | from __future__ import annotations
2 | from pathlib import Path
3 | from typing import List, Set
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |

UP006 [*] Use `list` instead of `List` for type annotation
 --> ai_trading/utils/universe.py:6:73
  |
6 | def load_universe(path_or_csv: str | None, limit: int | None = None) -> List[str]:
  |                                                                         ^^^^
7 |     """Load symbols from file path or CSV string and return sanitized list."""
8 |     raw: List[str] = []
  |
help: Replace with `list`

UP006 [*] Use `list` instead of `List` for type annotation
  --> ai_trading/utils/universe.py:8:10
   |
 6 | def load_universe(path_or_csv: str | None, limit: int | None = None) -> List[str]:
 7 |     """Load symbols from file path or CSV string and return sanitized list."""
 8 |     raw: List[str] = []
   |          ^^^^
 9 |     if path_or_csv:
10 |         p = Path(path_or_csv)
   |
help: Replace with `list`

UP006 [*] Use `set` instead of `Set` for type annotation
  --> ai_trading/utils/universe.py:22:11
   |
20 |         )
21 |
22 |     seen: Set[str] = set()
   |           ^^^
23 |     out: List[str] = []
24 |     for sym in raw:
   |
help: Replace with `set`

UP006 [*] Use `list` instead of `List` for type annotation
  --> ai_trading/utils/universe.py:23:10
   |
22 |     seen: Set[str] = set()
23 |     out: List[str] = []
   |          ^^^^
24 |     for sym in raw:
25 |         up = sym.strip().upper()
   |
help: Replace with `list`

UP006 [*] Use `list` instead of `List` for type annotation
  --> ai_trading/utils/universe.py:36:31
   |
36 | def _split_symbols(s: str) -> List[str]:
   |                               ^^^^
37 |     s = s.replace("\r", "")
38 |     parts: List[str] = []
   |
help: Replace with `list`

UP006 [*] Use `list` instead of `List` for type annotation
  --> ai_trading/utils/universe.py:38:12
   |
36 | def _split_symbols(s: str) -> List[str]:
37 |     s = s.replace("\r", "")
38 |     parts: List[str] = []
   |            ^^^^
39 |     for line in s.split("\n"):
40 |         if "," in line:
   |
help: Replace with `list`

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/utils/workers.py:1:1
  |
1 | / from concurrent.futures import ThreadPoolExecutor, Future
2 | | import atexit
3 | | import os
4 | | import threading
  | |________________^
  |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> ai_trading/utils/workers.py:16:12
   |
14 |         v = os.getenv(name)
15 |         return int(v) if v is not None else default
16 |     except Exception:
   |            ^^^^^^^^^
17 |         return default
   |

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/validation/validate_env.py:1:1
  |
1 | / from __future__ import annotations
2 | |
3 | | import os
4 | | from typing import Optional
5 | |
6 | | from pydantic import BaseModel, Field, field_validator
  | |______________________________________________________^
  |
help: Organize imports

UP045 [*] Use `X | None` for type annotations
  --> ai_trading/validation/validate_env.py:68:69
   |
68 | def validate_specific_env_var(name: str, required: bool = False) -> Optional[str]:
   |                                                                     ^^^^^^^^^^^^^
69 |     val = os.environ.get(name)
70 |     if required and not val:
   |
help: Convert to `X | None`

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/INTEGRATION_GUIDE.py:32:5
   |
31 |     # AFTER (with debugging):
32 |     from ai_trading.execution import log_signal_to_execution, log_execution_phase, ExecutionPhase
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
33 |     
34 |     def execute_order_with_debugging(engine, symbol, qty, side, signal_data=None):
   |
help: Organize imports

F821 Undefined name `get_current_position`
   --> scripts/INTEGRATION_GUIDE.py:138:23
    |
137 |         # Update position snapshot for unrealized PnL tracking
138 |         current_qty = get_current_position(symbol)  # Your existing position tracking
    |                       ^^^^^^^^^^^^^^^^^^^^
139 |         current_market_price = get_current_market_price(symbol)  # Your price feed
    |

F821 Undefined name `get_current_market_price`
   --> scripts/INTEGRATION_GUIDE.py:139:32
    |
137 |         # Update position snapshot for unrealized PnL tracking
138 |         current_qty = get_current_position(symbol)  # Your existing position tracking
139 |         current_market_price = get_current_market_price(symbol)  # Your price feed
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^
140 |         
141 |         update_position_for_pnl(
    |

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/INTEGRATION_GUIDE.py:156:9
    |
154 |       def periodic_health_check():
155 |           """Run periodic health checks on execution system."""
156 | /         from ai_trading.execution import (
157 | |             force_position_reconciliation, get_execution_statistics,
158 | |             get_portfolio_pnl_summary
159 | |         )
    | |_________^
160 |           
161 |           # Check for position discrepancies
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/INTEGRATION_GUIDE.py:216:9
    |
214 |         if not timestamp_str:
215 |             return False
216 |         from datetime import datetime, timezone, timedelta
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
217 |         timestamp = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
218 |         cutoff = datetime.now(timezone.utc) - timedelta(minutes=minutes)
    |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
   --> scripts/INTEGRATION_GUIDE.py:254:20
    |
252 |                 self.run_health_checks()
253 |                 
254 |             except Exception as e:
    |                    ^^^^^^^^^
255 |                 logging.info(f"Trading cycle error: {e}")
256 |                 # Your existing error handling
    |

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/INTEGRATION_GUIDE.py:280:13
    |
278 |         def execute_signal_with_debugging(self, signal):
279 |             """Execute signal with debugging."""
280 |             from ai_trading.execution import log_execution_phase, ExecutionPhase
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
281 |             
282 |             correlation_id = signal.correlation_id
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/INTEGRATION_GUIDE.py:300:13
    |
298 |           def run_health_checks(self):
299 |               """Run periodic health checks."""
300 | /             from ai_trading.execution import (
301 | |                 force_position_reconciliation, get_execution_statistics
302 | |             )
    | |_____________^
303 |               
304 |               # Check positions
    |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
   --> scripts/algorithm_optimizer.py:228:16
    |
226 |             return conditions
227 |
228 |         except Exception as e:
    |                ^^^^^^^^^
229 |             self.logger.error(f"Error detecting market regime: {e}")
230 |             # Return default conditions on error
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/algorithm_optimizer.py:326:16
    |
324 |             return optimized
325 |
326 |         except Exception as e:
    |                ^^^^^^^^^
327 |             self.logger.error(f"Error optimizing parameters: {e}")
328 |             return self.current_parameters
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/algorithm_optimizer.py:514:20
    |
512 |                 return final_shares
513 |
514 |             except Exception as e:
    |                    ^^^^^^^^^
515 |                 self.logger.error(f"Error calculating position size: {e}")
516 |                 return 0
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/algorithm_optimizer.py:561:16
    |
559 |             return kelly_fraction
560 |
561 |         except Exception as e:
    |                ^^^^^^^^^
562 |             self.logger.error(f"Error calculating Kelly fraction: {e}")
563 |             return 0.02  # Conservative default
    |

F821 Undefined name `account_value`
   --> scripts/algorithm_optimizer.py:565:31
    |
563 |             return 0.02  # Conservative default
564 |             # Default to minimum position
565 |             return max(1, int(account_value * 0.001 / price))
    |                               ^^^^^^^^^^^^^
566 |
567 |     def _get_regime_multiplier(self, regime: MarketRegime) -> float:
    |

F821 Undefined name `price`
   --> scripts/algorithm_optimizer.py:565:55
    |
563 |             return 0.02  # Conservative default
564 |             # Default to minimum position
565 |             return max(1, int(account_value * 0.001 / price))
    |                                                       ^^^^^
566 |
567 |     def _get_regime_multiplier(self, regime: MarketRegime) -> float:
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/algorithm_optimizer.py:617:16
    |
615 |             return round(stop_price, 2)
616 |
617 |         except Exception as e:
    |                ^^^^^^^^^
618 |             self.logger.error(f"Error calculating stop loss: {e}")
619 |             # Default stop loss
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/algorithm_optimizer.py:641:16
    |
639 |             return round(take_profit_price, 2)
640 |
641 |         except Exception as e:
    |                ^^^^^^^^^
642 |             self.logger.error(f"Error calculating take profit: {e}")
643 |             # Default take profit
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/algorithm_optimizer.py:669:16
    |
667 |             validation_results['tests_passed'] += 1
668 |             validation_results['tests_run'].append('position_sizing')
669 |         except Exception as e:
    |                ^^^^^^^^^
670 |             validation_results['tests_failed'] += 1
671 |             validation_results['issues_found'].append(f"Position sizing error: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/algorithm_optimizer.py:679:16
    |
677 |             validation_results['tests_passed'] += 1
678 |             validation_results['tests_run'].append('stop_loss_calculation')
679 |         except Exception as e:
    |                ^^^^^^^^^
680 |             validation_results['tests_failed'] += 1
681 |             validation_results['issues_found'].append(f"Stop loss calculation error: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/algorithm_optimizer.py:689:16
    |
687 |             validation_results['tests_passed'] += 1
688 |             validation_results['tests_run'].append('take_profit_calculation')
689 |         except Exception as e:
    |                ^^^^^^^^^
690 |             validation_results['tests_failed'] += 1
691 |             validation_results['issues_found'].append(f"Take profit calculation error: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/algorithm_optimizer.py:702:16
    |
700 |             validation_results['tests_passed'] += 1
701 |             validation_results['tests_run'].append('parameter_optimization')
702 |         except Exception as e:
    |                ^^^^^^^^^
703 |             validation_results['tests_failed'] += 1
704 |             validation_results['issues_found'].append(f"Parameter optimization error: {e}")
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/audit.py:12:1
   |
10 |       settings = None
11 |
12 | / import json
13 | |
14 | | from ai_trading.config import management as config
15 | | from ai_trading.config.management import TradingConfig
   | |______________________________________________________^
16 |   CONFIG = TradingConfig()
   |
help: Organize imports

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
  --> scripts/audit.py:57:8
   |
55 |     # AI-AGENT-REF: Robust parameter validation with auto-correction for common mistakes
56 |     # Handle potential parameter order issues from tests
57 |     if isinstance(side, (int, float)) and isinstance(qty, str):
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
58 |         # Detected parameter order issue: qty and side are swapped
59 |         logger.warning("Parameter order correction: swapping qty and side parameters")
   |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
  --> scripts/audit.py:69:12
   |
67 |         logger.error("Invalid side provided: %s", side)
68 |         return
69 |     if not isinstance(qty, (int, float)) or qty == 0:
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
70 |         logger.error("Invalid quantity: %s", qty)
71 |         return
   |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
  --> scripts/audit.py:72:12
   |
70 |         logger.error("Invalid quantity: %s", qty)
71 |         return
72 |     if not isinstance(fill_price, (int, float)) or fill_price <= 0:
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
73 |         logger.error("Invalid fill_price: %s", fill_price)
74 |         return
   |
help: Convert to `X | Y`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/audit.py:214:24
    |
212 |                     logger.info("Trade log successfully written after permission repair")
213 |                     return  # Success, don't disable logging
214 |                 except Exception as retry_exc:
    |                        ^^^^^^^^^
215 |                     logger.error("Trade log retry failed after permission repair: %s", retry_exc)
216 |             else:
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/audit.py:219:16
    |
217 |                 logger.warning("Failed to repair file permissions automatically")
218 |
219 |         except Exception as repair_exc:
    |                ^^^^^^^^^
220 |             logger.warning("Permission repair attempt failed: %s", repair_exc)
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/audit.py:225:12
    |
223 |             _disable_trade_log = True
224 |             logger.warning("Trade log disabled due to permission error")
225 |     except Exception as exc:  # pragma: no cover - other I/O errors
    |            ^^^^^^^^^
226 |         logger.error("Failed to record trade: %s", exc)
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/audit.py:238:12
    |
236 |         with open(fname, "w", encoding="utf-8") as f:
237 |             json.dump(details, f, indent=2, default=str)
238 |     except Exception as exc:  # pragma: no cover - best effort
    |            ^^^^^^^^^
239 |         logger.warning("Failed JSON audit log %s: %s", fname, exc)
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/backtest_framework.py:108:16
    |
106 |         try:
107 |             self.cleanup()
108 |         except Exception:
    |                ^^^^^^^^^
109 |             pass
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/circuit_breaker.py:293:12
    |
291 |             signal.alarm(0)  # Disable alarm
292 |
293 |     except Exception as e:
    |            ^^^^^^^^^
294 |         logger.warning(f"Health check for {name} failed: {e}")
295 |         return False
    |

I001 [*] Import block is un-sorted or un-formatted
 --> scripts/config_server.py:1:1
  |
1 | / import logging
2 | |
3 | | from ai_trading.config import management as config
4 | | from ai_trading.config.management import TradingConfig
  | |______________________________________________________^
5 |   CONFIG = TradingConfig()
  |
help: Organize imports

E402 Module level import not at top of file
  --> scripts/config_server.py:9:1
   |
 7 | # Map old names if needed
 8 | set_runtime_config = getattr(config, "set_runtime_config", None)
 9 | from flask import Flask, jsonify, request
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |
11 | app = Flask(__name__)
   |

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
  --> scripts/config_server.py:35:20
   |
34 |         for level, value in pyramid_levels.items():
35 |             if not isinstance(value, (int, float)) or not (0.0 <= value <= 1.0):
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
36 |                 return jsonify({"error": f"Invalid pyramid level {level}: {value}"}), 400
   |
help: Convert to `X | Y`

E402 Module level import not at top of file
  --> scripts/critical_fixes_validation.py:9:1
   |
 7 | """
 8 |
 9 | import os
   | ^^^^^^^^^
10 | import sys
11 | import unittest
   |

E402 Module level import not at top of file
  --> scripts/critical_fixes_validation.py:10:1
   |
 9 | import os
10 | import sys
   | ^^^^^^^^^^
11 | import unittest
   |

E402 Module level import not at top of file
  --> scripts/critical_fixes_validation.py:11:1
   |
 9 | import os
10 | import sys
11 | import unittest
   | ^^^^^^^^^^^^^^^
12 |
13 | # Set testing environment
   |

F821 Undefined name `bot_engine`
  --> scripts/critical_fixes_validation.py:26:27
   |
24 |         """Set up test environment."""
25 |         # Import modules after setting TESTING flag
26 |         self.bot_engine = bot_engine
   |                           ^^^^^^^^^^
27 |
28 |     def test_p0_quantity_calculation_fix(self):
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/critical_fixes_validation.py:32:9
   |
30 |           logging.info("\n🔧 Testing P0 Fix: Quantity Calculation Bug")
31 |
32 | /         from trade_execution import ExecutionEngine
33 | |         # (mocks removed; see tests/mocks/critical_fixes_validation_mocks.py)
34 | |         from tests.mocks.critical_fixes_validation_mocks import MockOrder, MockContext
   | |______________________________________________________________________________________^
35 |
36 |           # Test the fixed _reconcile_partial_fills method
   |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> scripts/critical_fixes_validation.py:53:16
   |
51 |             logging.info("  ✓ Quantity calculation uses actual order filled_qty")
52 |             logging.info("  ✓ Fixed discrepancy between calculated vs actual quantities")
53 |         except Exception as e:
   |                ^^^^^^^^^
54 |             self.fail(f"Quantity fix failed: {e}")
   |

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/critical_fixes_validation.py:120:9
    |
118 |           logging.info("\n🔧 Testing P2 Fix: Short Selling Validation (Foundation)")
119 |
120 | /         from trade_execution import ExecutionEngine
121 | |         # (mocks removed; see tests/mocks/critical_fixes_validation_mocks.py)
122 | |         from tests.mocks.critical_fixes_validation_mocks import MockContextShortSelling
    | |_______________________________________________________________________________________^
123 |
124 |           ctx = MockContextShortSelling()
    |
help: Organize imports

E402 Module level import not at top of file
  --> scripts/debug_cli.py:18:1
   |
16 | """
17 |
18 | import argparse
   | ^^^^^^^^^^^^^^^
19 | import os
20 | import sys
   |

E402 Module level import not at top of file
  --> scripts/debug_cli.py:19:1
   |
18 | import argparse
19 | import os
   | ^^^^^^^^^
20 | import sys
21 | from datetime import datetime
   |

E402 Module level import not at top of file
  --> scripts/debug_cli.py:20:1
   |
18 | import argparse
19 | import os
20 | import sys
   | ^^^^^^^^^^
21 | from datetime import datetime
   |

E402 Module level import not at top of file
  --> scripts/debug_cli.py:21:1
   |
19 | import os
20 | import sys
21 | from datetime import datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
22 |
23 | # Set required environment variables for CLI usage
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/debug_cli.py:59:12
   |
57 |             logging.info("🔴 System Status: ISSUES DETECTED")
58 |             
59 |     except Exception as e:
   |            ^^^^^^^^^
60 |         logging.info(f"❌ Error getting status: {e}")
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/debug_cli.py:108:12
    |
106 |             logging.info("No recent executions found.")
107 |             
108 |     except Exception as e:
    |            ^^^^^^^^^
109 |         logging.info(f"❌ Error getting executions: {e}")
    |

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/debug_cli.py:118:9
    |
117 |       try:
118 | /         from ai_trading.execution import (
119 | |             get_position_reconciler, force_position_reconciliation
120 | |         )
    | |_________^
121 |           
122 |           reconciler = get_position_reconciler()
    |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
   --> scripts/debug_cli.py:150:12
    |
148 |             logging.info("\n✅ No discrepancies found - positions are in sync")
149 |             
150 |     except Exception as e:
    |            ^^^^^^^^^
151 |         logging.info(f"❌ Error checking positions: {e}")
    |

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/debug_cli.py:163:9
    |
162 |       try:
163 | /         from ai_trading.execution import (
164 | |             get_pnl_attributor, get_symbol_pnl_breakdown, 
165 | |             get_portfolio_pnl_summary, explain_recent_pnl_changes
166 | |         )
    | |_________^
167 |           
168 |           attributor = get_pnl_attributor()
    |
help: Organize imports

F841 Local variable `attributor` is assigned to but never used
   --> scripts/debug_cli.py:168:9
    |
166 |         )
167 |         
168 |         attributor = get_pnl_attributor()
    |         ^^^^^^^^^^
169 |         
170 |         if symbol:
    |
help: Remove assignment to unused variable `attributor`

UP018 [*] Unnecessary `str` call (rewrite as a literal)
   --> scripts/debug_cli.py:215:30
    |
214 |             if summary['today_pnl']:
215 |                 logging.info(str("\n📅 TODAY'S PnL:"))
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^
216 |                 for source, amount in summary['today_pnl'].items():
217 |                     if amount != 0:
    |
help: Replace with string literal

BLE001 Do not catch blind exception: `Exception`
   --> scripts/debug_cli.py:220:12
    |
218 |                         logging.info(f"  {source}: ${amount:+.2f}")
219 |                         
220 |     except Exception as e:
    |            ^^^^^^^^^
221 |         logging.info(f"❌ Error getting PnL data: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/debug_cli.py:273:12
    |
271 |                 logging.info(f"  {correlation_id}")
272 |                 
273 |     except Exception as e:
    |            ^^^^^^^^^
274 |         logging.info(f"❌ Error tracing execution: {e}")
    |

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/debug_cli.py:283:9
    |
282 |       try:
283 | /         from ai_trading.execution import (
284 | |             get_execution_statistics, get_pnl_attribution_stats, force_position_reconciliation
285 | |         )
    | |_________^
286 |           
287 |           issues = []
    |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
   --> scripts/debug_cli.py:330:12
    |
328 |         logging.info(f"  PnL events tracked: {pnl_stats.get('total_events', 0)}")
329 |         
330 |     except Exception as e:
    |            ^^^^^^^^^
331 |         logging.info(f"❌ Error running health check: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/debug_cli.py:389:12
    |
387 |     except KeyboardInterrupt:
388 |         logging.info("\n👋 Goodbye!")
389 |     except Exception as e:
    |            ^^^^^^^^^
390 |         logging.info(f"\n❌ Unexpected error: {e}")
391 |         sys.exit(1)
    |

E402 Module level import not at top of file
 --> scripts/debug_drawdown.py:6:1
  |
4 | """Debug the drawdown circuit breaker status variable issue."""
5 |
6 | import os
  | ^^^^^^^^^
7 | import sys
8 | import traceback
  |

E402 Module level import not at top of file
 --> scripts/debug_drawdown.py:7:1
  |
6 | import os
7 | import sys
  | ^^^^^^^^^^
8 | import traceback
  |

E402 Module level import not at top of file
  --> scripts/debug_drawdown.py:8:1
   |
 6 | import os
 7 | import sys
 8 | import traceback
   | ^^^^^^^^^^^^^^^^
 9 |
10 | # Set testing environment
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/debug_drawdown.py:49:12
   |
47 |         return True
48 |
49 |     except Exception as e:
   |            ^^^^^^^^^
50 |         logging.info(f"❌ Error in drawdown test: {e}")
51 |         logging.info(f"Traceback: {traceback.format_exc()}")
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/debug_drawdown.py:73:20
   |
71 |                 status = breaker.get_status()
72 |                 logging.info(str(f"Update {i+1}: equity=${equity:.2f}, result={result}, state={status['state']}"))
73 |             except Exception as e:
   |                    ^^^^^^^^^
74 |                 logging.info(f"❌ Error on update {i+1}: {e}")
75 |                 logging.info(f"Traceback: {traceback.format_exc()}")
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/debug_drawdown.py:81:12
   |
79 |         return True
80 |
81 |     except Exception as e:
   |            ^^^^^^^^^
82 |         logging.info(f"❌ Error in status variable test: {e}")
83 |         logging.info(f"Traceback: {traceback.format_exc()}")
   |

E402 Module level import not at top of file
  --> scripts/demo_centralized_imports.py:13:1
   |
11 | """
12 |
13 | import os
   | ^^^^^^^^^
14 | import sys
   |

E402 Module level import not at top of file
  --> scripts/demo_centralized_imports.py:14:1
   |
13 | import os
14 | import sys
   | ^^^^^^^^^^
15 |
16 | # Add the current directory to the path for demo
   |

F841 Local variable `sklearn` is assigned to but never used
  --> scripts/demo_centralized_imports.py:34:5
   |
32 |     np = imports_module.np
33 |     pd = imports_module.pd
34 |     sklearn = imports_module.sklearn
   |     ^^^^^^^
35 |     get_ta_lib = imports_module.get_ta_lib
36 |     NUMPY_AVAILABLE = imports_module.NUMPY_AVAILABLE
   |
help: Remove assignment to unused variable `sklearn`

E402 Module level import not at top of file
  --> scripts/demo_drawdown_protection.py:12:1
   |
10 | """
11 |
12 | import os
   | ^^^^^^^^^
13 | os.environ["TESTING"] = "1"
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/demo_drawdown_protection.py:12:1
   |
10 | """
11 |
12 | import os
   | ^^^^^^^^^
13 | os.environ["TESTING"] = "1"
   |
help: Organize imports

E402 Module level import not at top of file
  --> scripts/demo_drawdown_protection.py:15:1
   |
13 | os.environ["TESTING"] = "1"
14 |
15 | from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 | from ai_trading.config import management as config
17 | from ai_trading.config.management import TradingConfig
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/demo_drawdown_protection.py:15:1
   |
13 |   os.environ["TESTING"] = "1"
14 |
15 | / from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker
16 | | from ai_trading.config import management as config
17 | | from ai_trading.config.management import TradingConfig
   | |______________________________________________________^
18 |   CONFIG = TradingConfig()
   |
help: Organize imports

E402 Module level import not at top of file
  --> scripts/demo_drawdown_protection.py:16:1
   |
15 | from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker
16 | from ai_trading.config import management as config
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
17 | from ai_trading.config.management import TradingConfig
18 | CONFIG = TradingConfig()
   |

E402 Module level import not at top of file
  --> scripts/demo_drawdown_protection.py:17:1
   |
15 | from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker
16 | from ai_trading.config import management as config
17 | from ai_trading.config.management import TradingConfig
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
18 | CONFIG = TradingConfig()
   |

E402 Module level import not at top of file
  --> scripts/demo_enhanced_debugging.py:9:1
   |
 7 | """
 8 |
 9 | import os
   | ^^^^^^^^^
10 | import time
11 | from datetime import UTC, datetime
   |

E402 Module level import not at top of file
  --> scripts/demo_enhanced_debugging.py:10:1
   |
 9 | import os
10 | import time
   | ^^^^^^^^^^^
11 | from datetime import UTC, datetime
   |

E402 Module level import not at top of file
  --> scripts/demo_enhanced_debugging.py:11:1
   |
 9 | import os
10 | import time
11 | from datetime import UTC, datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | # Set environment variables for demo
   |

F841 Local variable `attributor` is assigned to but never used
   --> scripts/demo_enhanced_debugging.py:215:5
    |
213 |     )
214 |
215 |     attributor = get_pnl_attributor()
    |     ^^^^^^^^^^
216 |
217 |     # Simulate various PnL events
    |
help: Remove assignment to unused variable `attributor`

F841 Local variable `correlation_id` is assigned to but never used
   --> scripts/demo_enhanced_debugging.py:375:9
    |
373 |     try:
374 |         # Demonstrate each feature
375 |         correlation_id = demonstrate_signal_to_execution_debugging()
    |         ^^^^^^^^^^^^^^
376 |         demonstrate_position_reconciliation()
377 |         demonstrate_pnl_attribution()
    |
help: Remove assignment to unused variable `correlation_id`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/demo_enhanced_debugging.py:401:12
    |
399 |         logging.info("4. Debug: Use correlation IDs to trace specific order issues")
400 |
401 |     except Exception as e:
    |            ^^^^^^^^^
402 |         logging.info(f"\nDemonstration failed: {e}")
403 |         import traceback
    |

E402 Module level import not at top of file
  --> scripts/demo_grid_search.py:9:1
   |
 7 | """
 8 |
 9 | import tempfile
   | ^^^^^^^^^^^^^^^
10 | from ai_trading.backtesting.grid_runner import grid_search, persist_artifacts
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/demo_grid_search.py:9:1
   |
 7 |   """
 8 |
 9 | / import tempfile
10 | | from ai_trading.backtesting.grid_runner import grid_search, persist_artifacts
   | |_____________________________________________________________________________^
   |
help: Organize imports

E402 Module level import not at top of file
  --> scripts/demo_grid_search.py:10:1
   |
 9 | import tempfile
10 | from ai_trading.backtesting.grid_runner import grid_search, persist_artifacts
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/demo_intelligent_position_management.py:18:1
   |
16 |   """
17 |
18 | / import sys
19 | | import os
20 | | import logging
21 | | from datetime import datetime
22 | | from dataclasses import dataclass
   | |_________________________________^
23 |
24 |   # Set up logging
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/demo_intelligent_position_management.py:49:5
   |
47 |     logging.info(str("=" * 60))
48 |     
49 |     from market_regime import MarketRegimeDetector, MarketRegime
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
50 |     
51 |     detector = MarketRegimeDetector()
   |
help: Organize imports

F841 Local variable `analyzer` is assigned to but never used
  --> scripts/demo_intelligent_position_management.py:86:5
   |
84 |     from technical_analyzer import TechnicalSignalAnalyzer
85 |     
86 |     analyzer = TechnicalSignalAnalyzer()
   |     ^^^^^^^^
87 |     
88 |     logging.info("📈 Technical Analysis Components:")
   |
help: Remove assignment to unused variable `analyzer`

F841 Local variable `classification` is assigned to but never used
   --> scripts/demo_intelligent_position_management.py:231:9
    |
229 |     sectors = ['Technology', 'Financials', 'Healthcare']
230 |     for sector in sectors:
231 |         classification = corr_analyzer._get_symbol_sector('AAPL' if sector == 'Technology' else 'JPM')
    |         ^^^^^^^^^^^^^^
232 |         logging.info(f"   • {sector}: Auto-classification and monitoring")
    |
help: Remove assignment to unused variable `classification`

E402 Module level import not at top of file
  --> scripts/demo_no_trade_bands.py:9:1
   |
 7 | """
 8 |
 9 | import os
   | ^^^^^^^^^
10 |
11 | os.environ['ALPACA_API_KEY'] = 'demo'
   |

E402 Module level import not at top of file
  --> scripts/demo_no_trade_bands.py:17:1
   |
15 | os.environ['FLASK_PORT'] = '5000'
16 |
17 | from ai_trading.rebalancer import apply_no_trade_bands
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

E402 Module level import not at top of file
  --> scripts/demo_position_holding.py:13:1
   |
11 | """
12 |
13 | import os
   | ^^^^^^^^^
14 | from datetime import UTC, datetime
   |

E402 Module level import not at top of file
  --> scripts/demo_position_holding.py:14:1
   |
13 | import os
14 | from datetime import UTC, datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 |
16 | # Set required environment variables for demo
   |

F841 Local variable `trade_data` is assigned to but never used
   --> scripts/demo_position_holding.py:136:9
    |
135 |         # Simulate meta-learning trigger
136 |         trade_data = {
    |         ^^^^^^^^^^
137 |             **trade,
138 |             'timestamp': datetime.now(UTC).isoformat(),
    |
help: Remove assignment to unused variable `trade_data`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/demo_position_holding.py:206:12
    |
204 |         logging.info("\nReady for deployment! 🎉")
205 |
206 |     except Exception as e:
    |            ^^^^^^^^^
207 |         logging.info(f"❌ Demo failed: {e}")
208 |         import traceback
    |

E402 Module level import not at top of file
  --> scripts/demo_short_selling_implementation.py:9:1
   |
 7 | """
 8 |
 9 | import os
   | ^^^^^^^^^
10 | import sys
11 | import time
   |

E402 Module level import not at top of file
  --> scripts/demo_short_selling_implementation.py:10:1
   |
 9 | import os
10 | import sys
   | ^^^^^^^^^^
11 | import time
12 | from unittest.mock import Mock, patch
   |

E402 Module level import not at top of file
  --> scripts/demo_short_selling_implementation.py:11:1
   |
 9 | import os
10 | import sys
11 | import time
   | ^^^^^^^^^^^
12 | from unittest.mock import Mock, patch
   |

E402 Module level import not at top of file
  --> scripts/demo_short_selling_implementation.py:12:1
   |
10 | import sys
11 | import time
12 | from unittest.mock import Mock, patch
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | # Set minimal environment variables
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/demo_short_selling_implementation.py:63:32
   |
61 |                         try:
62 |                             result = engine.execute_order("AAPL", 10, "sell_short")
63 |                         except Exception:
   |                                ^^^^^^^^^
64 |                             pass  # Expected to stop at liquidity check
65 |                         logging.info("✓ sell_short order bypassed position checks and reached validation")
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/demo_short_selling_implementation.py:83:12
   |
81 |         logging.info("✓ Short selling implementation working correctly!")
82 |
83 |     except Exception as e:
   |            ^^^^^^^^^
84 |         logging.info(f"✗ Error in short selling demonstration: {e}")
85 |         return False
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/demo_short_selling_implementation.py:129:12
    |
127 |         logging.info("✓ Order monitoring implementation working correctly!")
128 |
129 |     except Exception as e:
    |            ^^^^^^^^^
130 |         logging.info(f"✗ Error in order monitoring demonstration: {e}")
131 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/demo_short_selling_implementation.py:153:12
    |
151 |         logging.info("✓ Meta-learning graceful degradation working correctly!")
152 |
153 |     except Exception as e:
    |            ^^^^^^^^^
154 |         logging.info(f"✗ Error in meta-learning demonstration: {e}")
155 |         return False
    |

E402 Module level import not at top of file
  --> scripts/demonstrate_optimization.py:11:1
   |
 9 | """
10 |
11 | import sys
   | ^^^^^^^^^^
12 | import os
13 | from datetime import datetime
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/demonstrate_optimization.py:11:1
   |
 9 |   """
10 |
11 | / import sys
12 | | import os
13 | | from datetime import datetime
   | |_____________________________^
14 |
15 |   # Add the project root to Python path for imports
   |
help: Organize imports

E402 Module level import not at top of file
  --> scripts/demonstrate_optimization.py:12:1
   |
11 | import sys
12 | import os
   | ^^^^^^^^^
13 | from datetime import datetime
   |

E402 Module level import not at top of file
  --> scripts/demonstrate_optimization.py:13:1
   |
11 | import sys
12 | import os
13 | from datetime import datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | # Add the project root to Python path for imports
   |

E402 Module level import not at top of file
  --> scripts/demonstrate_optimization.py:19:1
   |
18 | # Use the centralized logger as per AGENTS.md
19 | from ai_trading.logging import logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
20 | from ai_trading.config import management as config
21 | from ai_trading.config.management import TradingConfig
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/demonstrate_optimization.py:19:1
   |
18 |   # Use the centralized logger as per AGENTS.md
19 | / from ai_trading.logging import logger
20 | | from ai_trading.config import management as config
21 | | from ai_trading.config.management import TradingConfig
   | |______________________________________________________^
22 |   CONFIG = TradingConfig()
   |
help: Organize imports

E402 Module level import not at top of file
  --> scripts/demonstrate_optimization.py:20:1
   |
18 | # Use the centralized logger as per AGENTS.md
19 | from ai_trading.logging import logger
20 | from ai_trading.config import management as config
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 | from ai_trading.config.management import TradingConfig
22 | CONFIG = TradingConfig()
   |

F401 [*] `ai_trading.config.management` imported but unused
  --> scripts/demonstrate_optimization.py:20:45
   |
18 | # Use the centralized logger as per AGENTS.md
19 | from ai_trading.logging import logger
20 | from ai_trading.config import management as config
   |                                             ^^^^^^
21 | from ai_trading.config.management import TradingConfig
22 | CONFIG = TradingConfig()
   |
help: Remove unused import: `ai_trading.config.management`

E402 Module level import not at top of file
  --> scripts/demonstrate_optimization.py:21:1
   |
19 | from ai_trading.logging import logger
20 | from ai_trading.config import management as config
21 | from ai_trading.config.management import TradingConfig
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
22 | CONFIG = TradingConfig()
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/demonstrate_optimization.py:204:12
    |
202 |         return False
203 |     
204 |     except Exception as e:
    |            ^^^^^^^^^
205 |         logging.info(f"\n❌ Error during demonstration: {e}")
206 |         logger.error(f"Demonstration error: {e}")
    |

E402 Module level import not at top of file
  --> scripts/demonstrate_optimization_simple.py:10:1
   |
 8 | """
 9 |
10 | import os
   | ^^^^^^^^^
11 | import sys
12 | from datetime import datetime
   |

E402 Module level import not at top of file
  --> scripts/demonstrate_optimization_simple.py:11:1
   |
10 | import os
11 | import sys
   | ^^^^^^^^^^
12 | from datetime import datetime
   |

E402 Module level import not at top of file
  --> scripts/demonstrate_optimization_simple.py:12:1
   |
10 | import os
11 | import sys
12 | from datetime import datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | # Add the project root to Python path for imports
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/demonstrate_optimization_simple.py:194:12
    |
192 |         return True
193 |
194 |     except Exception as e:
    |            ^^^^^^^^^
195 |         logging.info(f"\n❌ Error during demonstration: {e}")
196 |         return False
    |

E402 Module level import not at top of file
  --> scripts/demonstrate_portfolio_optimization.py:11:1
   |
 9 | """
10 |
11 | import os
   | ^^^^^^^^^
12 | import sys
   |

E402 Module level import not at top of file
  --> scripts/demonstrate_portfolio_optimization.py:12:1
   |
11 | import os
12 | import sys
   | ^^^^^^^^^^
13 |
14 | # Set testing environment
   |

E402 Module level import not at top of file
  --> scripts/demonstrate_portfolio_optimization.py:20:1
   |
18 | sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
19 |
20 | from portfolio_optimizer import PortfolioDecision, create_portfolio_optimizer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 | from transaction_cost_calculator import create_transaction_cost_calculator
   |

E402 Module level import not at top of file
  --> scripts/demonstrate_portfolio_optimization.py:21:1
   |
20 | from portfolio_optimizer import PortfolioDecision, create_portfolio_optimizer
21 | from transaction_cost_calculator import create_transaction_cost_calculator
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
22 |
23 | from ai_trading.strategies.regime_detector import create_regime_detector
   |

E402 Module level import not at top of file
  --> scripts/demonstrate_portfolio_optimization.py:23:1
   |
21 | from transaction_cost_calculator import create_transaction_cost_calculator
22 |
23 | from ai_trading.strategies.regime_detector import create_regime_detector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/demonstrate_portfolio_optimization.py:214:12
    |
212 |     try:
213 |         demonstrate_portfolio_optimization()
214 |     except Exception as e:
    |            ^^^^^^^^^
215 |         logging.info(f"Error in demonstration: {e}")
216 |         import traceback
    |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/download_backtest_data.py:56:16
   |
54 |                 adjustment="raw",
55 |             ).df
56 |         except Exception as exc:  # pragma: no cover - network call
   |                ^^^^^^^^^
57 |             print(f"Failed to fetch {symbol}: {exc}")
58 |             continue
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/error_handling.py:89:16
   |
87 |         try:
88 |             return func()
89 |         except Exception as e:
   |                ^^^^^^^^^
90 |             last_error = e
91 |             if attempt < retries:
   |

F841 Local variable `last_error` is assigned to but never used
  --> scripts/error_handling.py:90:13
   |
88 |             return func()
89 |         except Exception as e:
90 |             last_error = e
   |             ^^^^^^^^^^
91 |             if attempt < retries:
92 |                 logger.warning(f"API call failed (attempt {attempt + 1}/{retries + 1}): {e}")
   |
help: Remove assignment to unused variable `last_error`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> scripts/error_handling.py:126:39
    |
124 |             return False
125 |
126 |         if price is not None and (not isinstance(price, (int, float)) or price <= 0):
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
127 |             logger.error("Invalid price: %s", price)
128 |             return False
    |
help: Convert to `X | Y`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/error_handling.py:132:12
    |
130 |         return True
131 |
132 |     except Exception as e:
    |            ^^^^^^^^^
133 |         logger.error("Error validating trade data: %s", e)
134 |         return False
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/features.py:2:1
   |
 1 |   # AI-AGENT-REF: guard pandas/numpy imports for test environments
 2 | / import pandas as pd
 3 | |
 4 | | import numpy as np
 5 | |
 6 | | import logging
 7 | |
 8 | | from ai_trading.indicators import ema
 9 | |
10 | | from ai_trading.indicators import atr
   | |_____________________________________^
   |
help: Organize imports

F401 [*] `numpy` imported but unused
 --> scripts/features.py:4:17
  |
2 | import pandas as pd
3 |
4 | import numpy as np
  |                 ^^
5 |
6 | import logging
  |
help: Remove unused import: `numpy`

BLE001 Do not catch blind exception: `Exception`
  --> scripts/features.py:25:12
   |
23 |         df["ema26"] = ema(close, 26)
24 |         df["macd"] = df["ema12"] - df["ema26"]
25 |     except Exception as e:
   |            ^^^^^^^^^
26 |         logger.error("MACD calculation failed: %s", e)
27 |     return df
   |

E402 Module level import not at top of file
  --> scripts/final_validation.py:8:1
   |
 6 | """
 7 |
 8 | import csv
   | ^^^^^^^^^^
 9 | import os
10 | import sys
   |

E402 Module level import not at top of file
  --> scripts/final_validation.py:9:1
   |
 8 | import csv
 9 | import os
   | ^^^^^^^^^
10 | import sys
   |

E402 Module level import not at top of file
  --> scripts/final_validation.py:10:1
   |
 8 | import csv
 9 | import os
10 | import sys
   | ^^^^^^^^^^
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/final_validation.py:40:20
   |
38 |                             if t and t not in tickers:
39 |                                 tickers.append(t)
40 |             except Exception as e:
   |                    ^^^^^^^^^
41 |                 logging.info(f"Error reading {path}: {e}")
42 |             return tickers
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/final_validation.py:68:12
   |
66 |             return False
67 |
68 |     except Exception as e:
   |            ^^^^^^^^^
69 |         logging.info(f"❌ Error testing ticker loading: {e}")
70 |         return False
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/final_validation.py:100:12
    |
 98 |         return passed == len(checks)
 99 |
100 |     except Exception as e:
    |            ^^^^^^^^^
101 |         logging.info(f"❌ Error checking README: {e}")
102 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/final_validation.py:117:16
    |
115 |         try:
116 |             results.append(test())
117 |         except Exception as e:
    |                ^^^^^^^^^
118 |             logging.info(f"❌ Test {test.__name__} failed: {e}")
119 |             results.append(False)
    |

E402 Module level import not at top of file
  --> scripts/final_validation_report.py:9:1
   |
 7 | """
 8 |
 9 | import os
   | ^^^^^^^^^
10 | import sys
   |

E402 Module level import not at top of file
  --> scripts/final_validation_report.py:10:1
   |
 9 | import os
10 | import sys
   | ^^^^^^^^^^
   |

F401 `production_monitoring.HealthCheckResult` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/health_check.py:34:60
   |
32 |         get_production_monitor,
33 |     )
34 |     from production_monitoring import HealthCheckResult as ProdHealthCheckResult
   |                                                            ^^^^^^^^^^^^^^^^^^^^^
35 |     from production_monitoring import HealthStatus as ProdHealthStatus
36 |     PRODUCTION_MONITORING_AVAILABLE = True
   |
help: Remove unused import: `production_monitoring.HealthCheckResult`

F401 `production_monitoring.HealthStatus` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/health_check.py:35:55
   |
33 |     )
34 |     from production_monitoring import HealthCheckResult as ProdHealthCheckResult
35 |     from production_monitoring import HealthStatus as ProdHealthStatus
   |                                                       ^^^^^^^^^^^^^^^^
36 |     PRODUCTION_MONITORING_AVAILABLE = True
37 | except ImportError:
   |
help: Remove unused import: `production_monitoring.HealthStatus`

BLE001 Do not catch blind exception: `Exception`
  --> scripts/health_check.py:84:20
   |
82 |                 self.production_monitor = get_production_monitor()
83 |                 logger.info("Production monitoring integration enabled")
84 |             except Exception as e:
   |                    ^^^^^^^^^
85 |                 logger.warning(f"Could not initialize production monitoring: {e}")
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/health_check.py:212:16
    |
210 |             )
211 |
212 |         except Exception as e:
    |                ^^^^^^^^^
213 |             return HealthCheckResult(
214 |                 name="system_resources",
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/health_check.py:253:16
    |
251 |             )
252 |
253 |         except Exception as e:
    |                ^^^^^^^^^
254 |             return HealthCheckResult(
255 |                 name="disk_space",
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/health_check.py:293:16
    |
291 |             )
292 |
293 |         except Exception as e:
    |                ^^^^^^^^^
294 |             return HealthCheckResult(
295 |                 name="memory_usage",
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/health_check.py:351:16
    |
349 |             )
350 |
351 |         except Exception as e:
    |                ^^^^^^^^^
352 |             return HealthCheckResult(
353 |                 name="log_files",
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/health_check.py:395:16
    |
393 |             )
394 |
395 |         except Exception as e:
    |                ^^^^^^^^^
396 |             return HealthCheckResult(
397 |                 name="environment_variables",
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/health_check.py:448:12
    |
446 |                     logger.error("Health critical - %s: %s", name, check["message"])
447 |
448 |     except Exception as e:
    |            ^^^^^^^^^
449 |         logger.error("Failed to run health check: %s", e)
    |

F401 `ai_trading.core.bot_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/health_check.py:469:41
    |
467 |         # Check if trading modules are importable
468 |         try:
469 |             from ai_trading.core import bot_engine
    |                                         ^^^^^^^^^^
470 |             details["bot_engine"] = "OK"
471 |         except ImportError as e:
    |
help: Remove unused import: `ai_trading.core.bot_engine`

F401 `trade_execution` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/health_check.py:476:20
    |
475 |         try:
476 |             import trade_execution
    |                    ^^^^^^^^^^^^^^^
477 |             details["trade_execution"] = "OK"
478 |         except ImportError as e:
    |
help: Remove unused import: `trade_execution`

F841 Local variable `RiskEngine` is assigned to but never used
   --> scripts/health_check.py:484:13
    |
482 |         try:
483 |             from ai_trading.core.bot_engine import get_risk_engine
484 |             RiskEngine = get_risk_engine()
    |             ^^^^^^^^^^
485 |             details["risk_engine"] = "OK"
486 |         except ImportError as e:
    |
help: Remove assignment to unused variable `RiskEngine`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/health_check.py:524:12
    |
522 |         )
523 |
524 |     except Exception as e:
    |            ^^^^^^^^^
525 |         return HealthCheckResult(
526 |             name="trading_system",
    |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/integration_test.py:40:12
   |
38 |             print("✓ Model registry: register → latest_for → load_model workflow works")
39 |             return True
40 |     except Exception as e:
   |            ^^^^^^^^^
41 |         print(f"✗ Model registry test failed: {e}")
42 |         traceback.print_exc()
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/integration_test.py:65:12
   |
63 |         print("✓ DISABLE_DAILY_RETRAIN parsing works for all test cases")
64 |         return True
65 |     except Exception as e:
   |            ^^^^^^^^^
66 |         print(f"✗ DISABLE_DAILY_RETRAIN test failed: {e}")
67 |         return False
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/integration_test.py:102:12
    |
100 |         print("✓ Executor auto-sizing and environment overrides work")
101 |         return True
102 |     except Exception as e:
    |            ^^^^^^^^^
103 |         print(f"✗ Executor sizing test failed: {e}")
104 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/integration_test.py:146:12
    |
144 |         print("✓ Minute cache helpers work correctly")
145 |         return True
146 |     except Exception as e:
    |            ^^^^^^^^^
147 |         print(f"✗ Minute cache helpers test failed: {e}")
148 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/integration_test.py:188:12
    |
186 |         print("✓ Import hardening patterns are in place")
187 |         return True
188 |     except Exception as e:
    |            ^^^^^^^^^
189 |         print(f"✗ Import hardening test failed: {e}")
190 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/integration_test.py:213:12
    |
211 |         print("✓ HTTP timeouts are implemented")
212 |         return True
213 |     except Exception as e:
    |            ^^^^^^^^^
214 |         print(f"✗ HTTP timeouts test failed: {e}")
215 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/integration_test.py:232:12
    |
230 |         print("✓ Data fetcher helpers are exported")
231 |         return True
232 |     except Exception as e:
    |            ^^^^^^^^^
233 |         print(f"✗ Data fetcher helpers test failed: {e}")
234 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/integration_test.py:262:16
    |
260 |             else:
261 |                 failed += 1
262 |         except Exception as e:
    |                ^^^^^^^^^
263 |             print(f"✗ Test {test.__name__} failed with exception: {e}")
264 |             failed += 1
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/memory_optimizer.py:185:16
    |
183 |             self.logger.info(f"Cleaned up {collected} objects and {len(dead_refs)} dead references")
184 |
185 |         except Exception as e:
    |                ^^^^^^^^^
186 |             self.logger.error(f"Error during circular reference cleanup: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/memory_optimizer.py:201:16
    |
200 |                 self.logger.info("Pandas memory optimization applied")
201 |         except Exception as e:
    |                ^^^^^^^^^
202 |             self.logger.warning(f"Could not optimize pandas memory: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/memory_optimizer.py:228:20
    |
226 |                 self.stop_monitoring.wait(30)  # Check every 30 seconds
227 |
228 |             except Exception as e:
    |                    ^^^^^^^^^
229 |                 self.logger.error(f"Error in memory monitoring: {e}")
230 |                 self.stop_monitoring.wait(60)  # Wait longer on error
    |

E402 Module level import not at top of file
  --> scripts/ml_model.py:36:1
   |
36 | from joblib import parallel_backend
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
37 |
38 | # AI-AGENT-REF: restrict joblib parallelism
   |

F821 Undefined name `pd`
  --> scripts/ml_model.py:63:35
   |
61 |         self.logger = logger
62 |
63 |     def _validate_inputs(self, X: pd.DataFrame) -> None:
   |                                   ^^
64 |         import pandas as pd
65 |         if not isinstance(X, pd.DataFrame):
   |

F821 Undefined name `pd`
  --> scripts/ml_model.py:75:22
   |
73 |             raise TypeError("All input columns must be numeric")
74 |
75 |     def fit(self, X: pd.DataFrame, y: Sequence[float] | pd.Series) -> float:
   |                      ^^
76 |         self._validate_inputs(X)
77 |         start = time.time()
   |

F821 Undefined name `pd`
  --> scripts/ml_model.py:75:57
   |
73 |             raise TypeError("All input columns must be numeric")
74 |
75 |     def fit(self, X: pd.DataFrame, y: Sequence[float] | pd.Series) -> float:
   |                                                         ^^
76 |         self._validate_inputs(X)
77 |         start = time.time()
   |

F821 Undefined name `pd`
  --> scripts/ml_model.py:93:26
   |
91 |             raise
92 |
93 |     def predict(self, X: pd.DataFrame) -> Any:
   |                          ^^
94 |         self._validate_inputs(X)
95 |         try:
   |

F821 Undefined name `pd`
   --> scripts/ml_model.py:140:26
    |
139 | def train_model(
140 |     X: Sequence[float] | pd.Series | pd.DataFrame,
    |                          ^^
141 |     y: Sequence[float] | pd.Series,
142 |     algorithm: str = "linear",
    |

F821 Undefined name `pd`
   --> scripts/ml_model.py:140:38
    |
139 | def train_model(
140 |     X: Sequence[float] | pd.Series | pd.DataFrame,
    |                                      ^^
141 |     y: Sequence[float] | pd.Series,
142 |     algorithm: str = "linear",
    |

F821 Undefined name `pd`
   --> scripts/ml_model.py:141:26
    |
139 | def train_model(
140 |     X: Sequence[float] | pd.Series | pd.DataFrame,
141 |     y: Sequence[float] | pd.Series,
    |                          ^^
142 |     algorithm: str = "linear",
143 | ) -> BaseEstimator:
    |

F821 Undefined name `pd`
   --> scripts/ml_model.py:155:50
    |
155 | def predict_model(model: Any, X: Sequence[Any] | pd.DataFrame) -> list[float]:
    |                                                  ^^
156 |     """Return predictions from a fitted model.
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/monitoring_dashboard.py:189:16
    |
187 |             self.logger.info(f"Starting monitoring dashboard on port {self.port}")
188 |             self.app.run(host='0.0.0.0', port=self.port, debug=debug, threaded=True)
189 |         except Exception as e:
    |                ^^^^^^^^^
190 |             self.logger.error(f"Failed to start dashboard: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/monitoring_dashboard.py:225:20
    |
223 |                 self.check_alert_conditions()
224 |
225 |             except Exception as e:
    |                    ^^^^^^^^^
226 |                 self.logger.error(f"Error in monitoring loop: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/monitoring_dashboard.py:284:16
    |
282 |             self.trading_metrics.append(metrics)
283 |
284 |         except Exception as e:
    |                ^^^^^^^^^
285 |             self.logger.error(f"Error collecting trading metrics: {e}")
    |

F841 Local variable `recent_orders` is assigned to but never used
   --> scripts/monitoring_dashboard.py:297:13
    |
296 |             # Trading system metrics (simplified - would integrate with actual systems)
297 |             recent_orders = [o for o in self.active_orders.values()]
    |             ^^^^^^^^^^^^^
298 |
299 |             kpis = PerformanceKPIs(
    |
help: Remove assignment to unused variable `recent_orders`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/monitoring_dashboard.py:315:16
    |
313 |             self.performance_kpis.append(kpis)
314 |
315 |         except Exception as e:
    |                ^^^^^^^^^
316 |             self.logger.error(f"Error collecting performance KPIs: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/monitoring_dashboard.py:354:16
    |
352 |             self.risk_metrics.append(risk_metrics)
353 |
354 |         except Exception as e:
    |                ^^^^^^^^^
355 |             self.logger.error(f"Error collecting risk metrics: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/monitoring_dashboard.py:389:16
    |
387 |                 )
388 |
389 |         except Exception as e:
    |                ^^^^^^^^^
390 |             self.logger.error(f"Error checking alert conditions: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/monitoring_dashboard.py:415:20
    |
413 |             try:
414 |                 callback(alert)
415 |             except Exception as e:
    |                    ^^^^^^^^^
416 |                 self.logger.error(f"Error in alert callback: {e}")
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/optimized_startup.py:7:1
   |
 5 |   """
 6 |
 7 | / import os
 8 | | import sys
 9 | | import logging
10 | | import signal
11 | | import atexit
12 | | from datetime import datetime, timezone
13 | | from ai_trading.core import bot_engine  # AI-AGENT-REF: use packaged bot_engine
   | |______________________________________^
14 |
15 |   # AI-AGENT-REF: Optimized startup script with performance monitoring
   |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
   --> scripts/optimized_startup.py:101:12
    |
 99 |         logging.info("System diagnostic not available, skipping health check")
100 |         return True
101 |     except Exception as e:
    |            ^^^^^^^^^
102 |         logging.info(f"Health check failed: {e}")
103 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/optimized_startup.py:124:12
    |
122 |     except ImportError:
123 |         logging.info("Process manager not available, skipping duplicate cleanup")
124 |     except Exception as e:
    |            ^^^^^^^^^
125 |         logging.info(f"Process cleanup failed: {e}")
    |

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/optimized_startup.py:133:9
    |
132 |       try:
133 | /         from performance_monitor import start_performance_monitoring
134 | |         from memory_optimizer import get_memory_optimizer
    | |_________________________________________________________^
135 |           
136 |           # Start performance monitoring
    |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
   --> scripts/optimized_startup.py:150:12
    |
148 |         logging.info("Monitoring systems not available")
149 |         return False
150 |     except Exception as e:
    |            ^^^^^^^^^
151 |         logging.info(f"Failed to start monitoring: {e}")
152 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/optimized_startup.py:165:12
    |
163 |     except ImportError:
164 |         logging.debug("Memory optimizer not available, skipping emergency cleanup")
165 |     except Exception as e:
    |            ^^^^^^^^^
166 |         logging.warning(f"Emergency memory cleanup failed: {e}")
    |

F841 Local variable `monitoring_started` is assigned to but never used
   --> scripts/optimized_startup.py:192:5
    |
191 |     # Start monitoring
192 |     monitoring_started = start_monitoring()
    |     ^^^^^^^^^^^^^^^^^^
193 |     
194 |     # Import and start the main trading application
    |
help: Remove assignment to unused variable `monitoring_started`

E402 Module level import not at top of file
  --> scripts/performance_demo.py:9:1
   |
 7 | """
 8 |
 9 | import os
   | ^^^^^^^^^
10 | import sys
11 | from datetime import datetime, timezone
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/performance_demo.py:9:1
   |
 7 |   """
 8 |
 9 | / import os
10 | | import sys
11 | | from datetime import datetime, timezone
   | |_______________________________________^
12 |
13 |   def print_header(title):
   |
help: Organize imports

E402 Module level import not at top of file
  --> scripts/performance_demo.py:10:1
   |
 9 | import os
10 | import sys
   | ^^^^^^^^^^
11 | from datetime import datetime, timezone
   |

E402 Module level import not at top of file
  --> scripts/performance_demo.py:11:1
   |
 9 | import os
10 | import sys
11 | from datetime import datetime, timezone
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | def print_header(title):
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/performance_demo.py:51:12
   |
49 |             logging.info("  - No performance recommendations needed ✓")
50 |             
51 |     except Exception as e:
   |            ^^^^^^^^^
52 |         logging.info(f"✗ System diagnostic error: {e}")
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/performance_demo.py:86:12
   |
84 |             logging.info(f"    • {obj_type}: {count:,}")
85 |             
86 |     except Exception as e:
   |            ^^^^^^^^^
87 |         logging.info(f"✗ Memory optimizer error: {e}")
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/performance_demo.py:132:12
    |
130 |             logging.info("  - No alerts (system healthy) ✓")
131 |             
132 |     except Exception as e:
    |            ^^^^^^^^^
133 |         logging.info(f"✗ Performance monitor error: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/performance_demo.py:176:12
    |
174 |             logging.info("  - All services healthy ✓")
175 |             
176 |     except Exception as e:
    |            ^^^^^^^^^
177 |         logging.info(f"✗ Process manager error: {e}")
    |

UP015 [*] Unnecessary mode argument
   --> scripts/performance_demo.py:186:36
    |
184 |         # Test memory optimization integration in bot_engine
185 |         logging.info("Checking bot_engine.py integration:")
186 |         with open('bot_engine.py', 'r') as f:
    |                                    ^^^
187 |             content = f.read()
    |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
   --> scripts/performance_demo.py:198:41
    |
196 |         # Test performance monitoring integration in ai_trading/main.py
197 |         logging.info("Checking ai_trading/main.py integration:")
198 |         with open('ai_trading/main.py', 'r') as f:
    |                                         ^^^
199 |             content = f.read()
    |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
   --> scripts/performance_demo.py:208:12
    |
206 |             logging.info("  ✓ Periodic memory checks added")
207 |             
208 |     except Exception as e:
    |            ^^^^^^^^^
209 |         logging.info(f"✗ Integration check error: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/performance_demo.py:231:12
    |
229 |             logging.info("  ✗ Startup script not found")
230 |             
231 |     except Exception as e:
    |            ^^^^^^^^^
232 |         logging.info(f"✗ Startup optimization error: {e}")
    |

UP018 [*] Unnecessary `str` call (rewrite as a literal)
   --> scripts/performance_demo.py:268:18
    |
267 |     logging.info("\nRecommended usage:")
268 |     logging.info(str("  • Use 'python optimized_startup.py' for production"))
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
269 |     logging.info(str("  • Run 'python system_diagnostic.py' for health checks"))
270 |     logging.info(str("  • Use 'python process_manager.py' for process cleanup"))
    |
help: Replace with string literal

UP018 [*] Unnecessary `str` call (rewrite as a literal)
   --> scripts/performance_demo.py:269:18
    |
267 |     logging.info("\nRecommended usage:")
268 |     logging.info(str("  • Use 'python optimized_startup.py' for production"))
269 |     logging.info(str("  • Run 'python system_diagnostic.py' for health checks"))
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
270 |     logging.info(str("  • Use 'python process_manager.py' for process cleanup"))
271 |     logging.info("  • Monitor performance with built-in monitoring system")
    |
help: Replace with string literal

UP018 [*] Unnecessary `str` call (rewrite as a literal)
   --> scripts/performance_demo.py:270:18
    |
268 |     logging.info(str("  • Use 'python optimized_startup.py' for production"))
269 |     logging.info(str("  • Run 'python system_diagnostic.py' for health checks"))
270 |     logging.info(str("  • Use 'python process_manager.py' for process cleanup"))
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
271 |     logging.info("  • Monitor performance with built-in monitoring system")
    |
help: Replace with string literal

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/performance_monitor.py:8:1
   |
 6 |   """
 7 |
 8 | / import os
 9 | | import sys
10 | | import time
11 | | import threading
12 | | import subprocess
13 | | from datetime import datetime, timezone
14 | | from typing import Dict, List, Callable
15 | | import logging
16 | | from collections import deque
   | |_____________________________^
17 |
18 |   # AI-AGENT-REF: Performance monitoring and alerting system
   |
help: Organize imports

UP035 [*] Import from `collections.abc` instead: `Callable`
  --> scripts/performance_monitor.py:14:1
   |
12 | import subprocess
13 | from datetime import datetime, timezone
14 | from typing import Dict, List, Callable
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 | import logging
16 | from collections import deque
   |
help: Import from `collections.abc`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> scripts/performance_monitor.py:14:1
   |
12 | import subprocess
13 | from datetime import datetime, timezone
14 | from typing import Dict, List, Callable
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 | import logging
16 | from collections import deque
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> scripts/performance_monitor.py:14:1
   |
12 | import subprocess
13 | from datetime import datetime, timezone
14 | from typing import Dict, List, Callable
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 | import logging
16 | from collections import deque
   |

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> scripts/performance_monitor.py:48:38
   |
46 |         return logger
47 |     
48 |     def _default_thresholds(self) -> Dict:
   |                                      ^^^^
49 |         """Default alert thresholds."""
50 |         return {
   |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> scripts/performance_monitor.py:60:37
   |
58 |         }
59 |     
60 |     def get_system_metrics(self) -> Dict:
   |                                     ^^^^
61 |         """Collect comprehensive system metrics."""
62 |         metrics = {
   |
help: Replace with `dict`

BLE001 Do not catch blind exception: `Exception`
  --> scripts/performance_monitor.py:88:16
   |
86 |             metrics['python'] = self._get_python_metrics()
87 |             
88 |         except Exception as e:
   |                ^^^^^^^^^
89 |             self.logger.error(f"Error collecting system metrics: {e}")
90 |             metrics['error'] = str(e)
   |

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> scripts/performance_monitor.py:96:38
   |
94 |         return metrics
95 |     
96 |     def _get_memory_metrics(self) -> Dict:
   |                                      ^^^^
97 |         """Get memory-related metrics."""
98 |         memory_metrics = {}
   |
help: Replace with `dict`

UP015 [*] Unnecessary mode argument
   --> scripts/performance_monitor.py:102:40
    |
100 |         try:
101 |             # Read /proc/meminfo
102 |             with open('/proc/meminfo', 'r') as f:
    |                                        ^^^
103 |                 meminfo = {}
104 |                 for line in f:
    |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
   --> scripts/performance_monitor.py:131:16
    |
129 |                 }
130 |                 
131 |         except Exception as e:
    |                ^^^^^^^^^
132 |             memory_metrics['error'] = str(e)
    |

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/performance_monitor.py:136:35
    |
134 |         return memory_metrics
135 |     
136 |     def _get_cpu_metrics(self) -> Dict:
    |                                   ^^^^
137 |         """Get CPU-related metrics."""
138 |         cpu_metrics = {}
    |
help: Replace with `dict`

UP015 [*] Unnecessary mode argument
   --> scripts/performance_monitor.py:142:40
    |
140 |         try:
141 |             # Read /proc/loadavg
142 |             with open('/proc/loadavg', 'r') as f:
    |                                        ^^^
143 |                 loadavg = f.read().strip().split()
144 |                 cpu_metrics['load_1min'] = float(loadavg[0])
    |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
   --> scripts/performance_monitor.py:154:16
    |
152 |             cpu_metrics['usage_percent'] = min(cpu_metrics['load_1min'] / cpu_metrics['cpu_count'] * 100, 100)
153 |             
154 |         except Exception as e:
    |                ^^^^^^^^^
155 |             cpu_metrics['error'] = str(e)
    |

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/performance_monitor.py:159:36
    |
157 |         return cpu_metrics
158 |     
159 |     def _get_disk_metrics(self) -> Dict:
    |                                    ^^^^
160 |         """Get disk usage metrics."""
161 |         disk_metrics = {}
    |
help: Replace with `dict`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/performance_monitor.py:196:16
    |
194 |             disk_metrics['large_files_count'] = len(large_files)
195 |             
196 |         except Exception as e:
    |                ^^^^^^^^^
197 |             disk_metrics['error'] = str(e)
    |

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/performance_monitor.py:201:39
    |
199 |         return disk_metrics
200 |     
201 |     def _get_process_metrics(self) -> Dict:
    |                                       ^^^^
202 |         """Get process-related metrics."""
203 |         process_metrics = {}
    |
help: Replace with `dict`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/performance_monitor.py:233:20
    |
231 |             try:
232 |                 process_metrics['python_processes'] = self._count_trading_bot_processes()
233 |             except Exception as e:
    |                    ^^^^^^^^^
234 |                 logger.warning(f"Error counting trading bot processes: {e}")
235 |                 process_metrics['python_processes'] = 1
    |

F821 Undefined name `logger`
   --> scripts/performance_monitor.py:234:17
    |
232 |                 process_metrics['python_processes'] = self._count_trading_bot_processes()
233 |             except Exception as e:
234 |                 logger.warning(f"Error counting trading bot processes: {e}")
    |                 ^^^^^^
235 |                 process_metrics['python_processes'] = 1
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/performance_monitor.py:237:16
    |
235 |                 process_metrics['python_processes'] = 1
236 |             
237 |         except Exception as e:
    |                ^^^^^^^^^
238 |             process_metrics['error'] = str(e)
    |

UP015 [*] Unnecessary mode argument
   --> scripts/performance_monitor.py:313:55
    |
311 |                         proc_stat_path = f'/proc/{pid_int}/stat'
312 |                         if os.path.exists(proc_stat_path):
313 |                             with open(proc_stat_path, 'r') as f:
    |                                                       ^^^
314 |                                 stat_data = f.read().strip().split()
315 |                                 # starttime is the 22nd field (index 21)
    |
help: Remove mode argument

UP024 [*] Replace aliased errors with `OSError`
   --> scripts/performance_monitor.py:324:28
    |
322 |                             trading_bot_count += 1
323 |                             
324 |                     except (ValueError, OSError, IOError):
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
325 |                         # If we can't validate the process, but it matches criteria, count it
326 |                         if is_trading_bot and not is_temporary:
    |
help: Replace with builtin `OSError`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/performance_monitor.py:332:16
    |
330 |             self.logger.warning(f"Error getting process list: {e}")
331 |             return self._count_python_processes_fallback()
332 |         except Exception as e:
    |                ^^^^^^^^^
333 |             self.logger.error(f"Unexpected error counting trading bot processes: {e}")
334 |             return self._count_python_processes_fallback()
    |

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/performance_monitor.py:349:39
    |
347 |             return 1  # Assume at least this process is running
348 |     
349 |     def _get_network_metrics(self) -> Dict:
    |                                       ^^^^
350 |         """Get basic network metrics."""
351 |         network_metrics = {}
    |
help: Replace with `dict`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/performance_monitor.py:364:16
    |
362 |         except (subprocess.SubprocessError, subprocess.CalledProcessError):
363 |             network_metrics['established_connections'] = 0
364 |         except Exception as e:
    |                ^^^^^^^^^
365 |             network_metrics['error'] = str(e)
    |

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/performance_monitor.py:369:38
    |
367 |         return network_metrics
368 |     
369 |     def _get_python_metrics(self) -> Dict:
    |                                      ^^^^
370 |         """Get Python-specific metrics."""
371 |         python_metrics = {}
    |
help: Replace with `dict`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/performance_monitor.py:387:16
    |
385 |             python_metrics['trading_modules_loaded'] = len(trading_modules)
386 |             
387 |         except Exception as e:
    |                ^^^^^^^^^
388 |             python_metrics['error'] = str(e)
    |

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/performance_monitor.py:392:47
    |
390 |         return python_metrics
391 |     
392 |     def check_alert_conditions(self, metrics: Dict) -> List[Dict]:
    |                                               ^^^^
393 |         """Check metrics against alert thresholds."""
394 |         alerts = []
    |
help: Replace with `dict`

UP006 [*] Use `list` instead of `List` for type annotation
   --> scripts/performance_monitor.py:392:56
    |
390 |         return python_metrics
391 |     
392 |     def check_alert_conditions(self, metrics: Dict) -> List[Dict]:
    |                                                        ^^^^
393 |         """Check metrics against alert thresholds."""
394 |         alerts = []
    |
help: Replace with `list`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/performance_monitor.py:392:61
    |
390 |         return python_metrics
391 |     
392 |     def check_alert_conditions(self, metrics: Dict) -> List[Dict]:
    |                                                             ^^^^
393 |         """Check metrics against alert thresholds."""
394 |         alerts = []
    |
help: Replace with `dict`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/performance_monitor.py:490:36
    |
488 | …                     try:
489 | …                         callback(alert)
490 | …                     except Exception as e:
    |                              ^^^^^^^^^
491 | …                         self.logger.error(f"Error in alert callback: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/performance_monitor.py:500:20
    |
498 |                 self.stop_monitoring.wait(self.monitoring_interval)
499 |                 
500 |             except Exception as e:
    |                    ^^^^^^^^^
501 |                 self.logger.error(f"Error in monitoring loop: {e}")
502 |                 self.stop_monitoring.wait(60)  # Wait longer on error
    |

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/performance_monitor.py:504:37
    |
502 |                 self.stop_monitoring.wait(60)  # Wait longer on error
503 |     
504 |     def _log_summary(self, metrics: Dict):
    |                                     ^^^^
505 |         """Log periodic summary of system state."""
506 |         summary_parts = []
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/performance_monitor.py:539:54
    |
537 |             self.logger.info("Resource monitoring stopped")
538 |     
539 |     def add_alert_callback(self, callback: Callable[[Dict], None]):
    |                                                      ^^^^
540 |         """Add callback function for alert notifications."""
541 |         self.alert_callbacks.append(callback)
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/performance_monitor.py:543:41
    |
541 |         self.alert_callbacks.append(callback)
542 |     
543 |     def get_performance_report(self) -> Dict:
    |                                         ^^^^
544 |         """Generate comprehensive performance report."""
545 |         if not self.metrics_history:
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/performance_monitor.py:601:49
    |
599 |         })
600 |     
601 |     def get_trading_performance_report(self) -> Dict:
    |                                                 ^^^^
602 |         """Get trading performance report."""
603 |         report = {
    |
help: Replace with `dict`

F841 Local variable `success` is assigned to but never used
   --> scripts/performance_optimizer.py:132:13
    |
130 |         except Exception as e:
131 |             self.logger.warning(f"Function {func_name} failed during profiling: {e}")
132 |             success = False
    |             ^^^^^^^
133 |             raise
134 |         finally:
    |
help: Remove assignment to unused variable `success`

F841 Local variable `times` is assigned to but never used
   --> scripts/performance_optimizer.py:160:9
    |
159 |         # Update or create performance profile
160 |         times = list(self.execution_times[func_name])
    |         ^^^^^
161 |
162 |         if func_name in self.function_profiles:
    |
help: Remove assignment to unused variable `times`

F841 Local variable `cutoff_time` is assigned to but never used
   --> scripts/performance_optimizer.py:295:9
    |
293 |         """Clean up old performance data to free memory."""
294 |         # Keep only recent performance data
295 |         cutoff_time = datetime.now(UTC) - timedelta(hours=24)
    |         ^^^^^^^^^^^
296 |
297 |         # Clear old execution times
    |
help: Remove assignment to unused variable `cutoff_time`

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/portfolio_optimizer.py:10:1
   |
 8 |   """
 9 |
10 | / from ai_trading.portfolio.optimizer import (
11 | |     PortfolioDecision,
12 | |     PortfolioOptimizer,
13 | |     PortfolioMetrics,
14 | |     TradeImpactAnalysis,
15 | |     create_portfolio_optimizer
16 | | )
   | |_^
17 |
18 |   # Re-export all classes for backward compatibility
   |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> scripts/portfolio_rl.py:17:12
   |
15 |         _test_module = nn.Module()
16 |         _PYTORCH_WORKS = True
17 |     except Exception:
   |            ^^^^^^^^^
18 |         _PYTORCH_WORKS = False
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/portfolio_rl.py:20:8
   |
18 |         _PYTORCH_WORKS = False
19 |
20 | except Exception:  # pragma: no cover - optional dependency
   |        ^^^^^^^^^
21 |     # AI-AGENT-REF: Create comprehensive torch fallback that supports type annotations
22 |     torch = types.ModuleType("torch")
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/portfolio_rl.py:53:16
   |
51 |                 nn.Softmax(dim=-1),
52 |             )
53 |         except Exception:
   |                ^^^^^^^^^
54 |             # AI-AGENT-REF: Handle any PyTorch version compatibility issues during initialization
55 |             self.state_dim = state_dim
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/portfolio_rl.py:72:16
   |
70 |         try:
71 |             return self.net(x)
72 |         except Exception:
   |                ^^^^^^^^^
73 |             # AI-AGENT-REF: Fallback if forward pass fails due to version issues
74 |             if np is not None:
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/portfolio_rl.py:94:16
   |
92 |             self.actor = Actor(state_dim, action_dim)
93 |             self.optimizer = optim.Adam(self.actor.parameters(), lr=1e-3)
94 |         except Exception:
   |                ^^^^^^^^^
95 |             # AI-AGENT-REF: Handle initialization errors due to version compatibility
96 |             self.actor = Actor(state_dim, action_dim)
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/portfolio_rl.py:140:16
    |
138 |                 total = 1.0
139 |             return weights / total
140 |         except Exception:
    |                ^^^^^^^^^
141 |             # AI-AGENT-REF: Fallback if PyTorch operations fail
142 |             weights = self.actor.forward(state)
    |

E402 Module level import not at top of file
  --> scripts/predict.py:22:1
   |
20 | CONFIG = TradingConfig()
21 |
22 | from ai_trading.utils import http
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
23 | from ai_trading.utils.timing import (
24 |     HTTP_TIMEOUT,  # AI-AGENT-REF: explicit timeout constant
   |

E402 Module level import not at top of file
  --> scripts/predict.py:23:1
   |
22 |   from ai_trading.utils import http
23 | / from ai_trading.utils.timing import (
24 | |     HTTP_TIMEOUT,  # AI-AGENT-REF: explicit timeout constant
25 | | )
   | |_^
26 |
27 |   logger = logging.getLogger(__name__)
   |

E402 Module level import not at top of file
  --> scripts/predict.py:37:1
   |
37 | import threading
   | ^^^^^^^^^^^^^^^^
38 | import time
   |

E402 Module level import not at top of file
  --> scripts/predict.py:38:1
   |
37 | import threading
38 | import time
   | ^^^^^^^^^^^
39 |
40 | # AI-AGENT-REF: Memory leak prevention with TTLCache
   |

E402 Module level import not at top of file
  --> scripts/predict.py:41:1
   |
40 | # AI-AGENT-REF: Memory leak prevention with TTLCache
41 | from cachetools import TTLCache
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
42 |
43 | # TTLCache with 5 min TTL and 1000 items max to prevent memory leaks
   |

F821 Undefined name `config`
  --> scripts/predict.py:56:23
   |
55 |     # Support both SENTIMENT_API_KEY and NEWS_API_KEY for backwards compatibility
56 |     api_key = getattr(config, "SENTIMENT_API_KEY", None) or config.NEWS_API_KEY
   |                       ^^^^^^
57 |     if not api_key:
58 |         logger.debug(
   |

F821 Undefined name `config`
  --> scripts/predict.py:56:61
   |
55 |     # Support both SENTIMENT_API_KEY and NEWS_API_KEY for backwards compatibility
56 |     api_key = getattr(config, "SENTIMENT_API_KEY", None) or config.NEWS_API_KEY
   |                                                             ^^^^^^
57 |     if not api_key:
58 |         logger.debug(
   |

F821 Undefined name `_CACHETOOLS_AVAILABLE`
  --> scripts/predict.py:67:12
   |
65 |     with _sentiment_lock:
66 |         # Check cache first (TTLCache handles expiration automatically)
67 |         if _CACHETOOLS_AVAILABLE:
   |            ^^^^^^^^^^^^^^^^^^^^^
68 |             if symbol in _sentiment_cache:
69 |                 cached_score = _sentiment_cache[symbol]
   |

F821 Undefined name `_CACHETOOLS_AVAILABLE`
   --> scripts/predict.py:98:20
    |
 96 |                 )
 97 |                 # Return cached value if available, otherwise neutral
 98 |                 if _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
    |                    ^^^^^^^^^^^^^^^^^^^^^
 99 |                     return _sentiment_cache[symbol]
100 |                 elif not _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
    |

F821 Undefined name `_CACHETOOLS_AVAILABLE`
   --> scripts/predict.py:100:26
    |
 98 |                 if _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
 99 |                     return _sentiment_cache[symbol]
100 |                 elif not _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
    |                          ^^^^^^^^^^^^^^^^^^^^^
101 |                     return _sentiment_cache[symbol][0]
102 |                 return 0.0
    |

F821 Undefined name `config`
   --> scripts/predict.py:109:13
    |
107 |         # Support configurable sentiment API URL, with fallback to NewsAPI
108 |         base_url = getattr(
109 |             config, "SENTIMENT_API_URL", "https://newsapi.org/v2/everything"
    |             ^^^^^^
110 |         )
111 |         url = (
    |

F821 Undefined name `_CACHETOOLS_AVAILABLE`
   --> scripts/predict.py:128:16
    |
126 |         # Cache the result with memory leak prevention
127 |         with _sentiment_lock:
128 |             if _CACHETOOLS_AVAILABLE:
    |                ^^^^^^^^^^^^^^^^^^^^^
129 |                 _sentiment_cache[symbol] = score  # TTLCache handles expiration
130 |             else:
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/predict.py:143:13
    |
141 |         return score
142 |
143 |     except (Exception, ValueError) as exc:
    |             ^^^^^^^^^
144 |         logger.error("fetch_sentiment failed for %s: %s", symbol, exc)
145 |         # Return cached value if available during error, otherwise neutral
    |

F821 Undefined name `_CACHETOOLS_AVAILABLE`
   --> scripts/predict.py:147:16
    |
145 |         # Return cached value if available during error, otherwise neutral
146 |         with _sentiment_lock:
147 |             if _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
    |                ^^^^^^^^^^^^^^^^^^^^^
148 |                 return _sentiment_cache[symbol]
149 |             elif not _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
    |

F821 Undefined name `_CACHETOOLS_AVAILABLE`
   --> scripts/predict.py:149:22
    |
147 |             if _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
148 |                 return _sentiment_cache[symbol]
149 |             elif not _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
    |                      ^^^^^^^^^^^^^^^^^^^^^
150 |                 return _sentiment_cache[symbol][0]
151 |         return 0.0
    |

E402 Module level import not at top of file
 --> scripts/problem_statement_validation.py:8:1
  |
6 | """
7 |
8 | import re
  | ^^^^^^^^^
9 | from pathlib import Path
  |

E402 Module level import not at top of file
 --> scripts/problem_statement_validation.py:9:1
  |
8 | import re
9 | from pathlib import Path
  | ^^^^^^^^^^^^^^^^^^^^^^^^
  |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/problem_statement_validation.py:182:12
    |
180 |         return True
181 |
182 |     except Exception as e:
    |            ^^^^^^^^^
183 |         logging.info(f"❌ Validation failed: {e}")
184 |         import traceback
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/process_manager.py:7:1
   |
 5 |   """
 6 |
 7 | / import os
 8 | | import subprocess
 9 | | import time
10 | | import signal
11 | | import logging
12 | | from typing import List, Dict
13 | | from datetime import datetime, timezone
   | |_______________________________________^
14 |
15 |   # AI-AGENT-REF: Process management and service cleanup script
   |
help: Organize imports

UP035 `typing.List` is deprecated, use `list` instead
  --> scripts/process_manager.py:12:1
   |
10 | import signal
11 | import logging
12 | from typing import List, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 | from datetime import datetime, timezone
   |

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> scripts/process_manager.py:12:1
   |
10 | import signal
11 | import logging
12 | from typing import List, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 | from datetime import datetime, timezone
   |

UP006 [*] Use `list` instead of `List` for type annotation
  --> scripts/process_manager.py:39:40
   |
37 |         return logger
38 |     
39 |     def find_python_processes(self) -> List[Dict]:
   |                                        ^^^^
40 |         """Find all Python processes related to trading bot."""
41 |         processes = []
   |
help: Replace with `list`

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> scripts/process_manager.py:39:45
   |
37 |         return logger
38 |     
39 |     def find_python_processes(self) -> List[Dict]:
   |                                             ^^^^
40 |         """Find all Python processes related to trading bot."""
41 |         processes = []
   |
help: Replace with `dict`

UP006 [*] Use `list` instead of `List` for type annotation
   --> scripts/process_manager.py:99:43
    |
 97 |         return any(keyword.lower() in command_lower for keyword in trading_keywords)
 98 |     
 99 |     def find_duplicate_processes(self) -> List[Dict]:
    |                                           ^^^^
100 |         """Find duplicate trading processes."""
101 |         if not self.processes_info:
    |
help: Replace with `list`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/process_manager.py:99:48
    |
 97 |         return any(keyword.lower() in command_lower for keyword in trading_keywords)
 98 |     
 99 |     def find_duplicate_processes(self) -> List[Dict]:
    |                                                ^^^^
100 |         """Find duplicate trading processes."""
101 |         if not self.processes_info:
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/process_manager.py:156:68
    |
154 |             return False
155 |     
156 |     def cleanup_duplicate_processes(self, dry_run: bool = True) -> Dict:
    |                                                                    ^^^^
157 |         """Clean up duplicate trading processes."""
158 |         duplicates = self.find_duplicate_processes()
    |
help: Replace with `dict`

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/process_manager.py:210:9
    |
208 |               True if this instance can proceed, False if another instance is running
209 |           """
210 | /         import fcntl
211 | |         import atexit
    | |_____________________^
212 |           
213 |           try:
    |
help: Organize imports

UP024 [*] Replace aliased errors with `OSError`
   --> scripts/process_manager.py:230:16
    |
228 |             return True
229 |             
230 |         except (IOError, OSError) as e:
    |                ^^^^^^^^^^^^^^^^^^
231 |             if hasattr(self, 'pidfile'):
232 |                 self.pidfile.close()
    |
help: Replace with builtin `OSError`

UP015 [*] Unnecessary mode argument
   --> scripts/process_manager.py:237:45
    |
235 |             if os.path.exists(pidfile_path):
236 |                 try:
237 |                     with open(pidfile_path, 'r') as f:
    |                                             ^^^
238 |                         existing_pid = int(f.read().strip())
    |
help: Remove mode argument

UP024 [*] Replace aliased errors with `OSError`
   --> scripts/process_manager.py:252:24
    |
250 |                         return self.ensure_single_instance(pidfile_path)
251 |                         
252 |                 except (ValueError, IOError):
    |                        ^^^^^^^^^^^^^^^^^^^^^
253 |                     # Corrupted PID file, remove it and try again
254 |                     self.logger.warning(f"Removing corrupted PID file: {pidfile_path}")
    |
help: Replace with builtin `OSError`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/process_manager.py:271:16
    |
269 |                 # Note: PID file will be automatically removed when process exits
270 |                 # since we hold an exclusive lock on it
271 |         except Exception as e:
    |                ^^^^^^^^^
272 |             self.logger.debug(f"Error cleaning up PID file: {e}")
    |

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/process_manager.py:274:39
    |
272 |             self.logger.debug(f"Error cleaning up PID file: {e}")
273 |     
274 |     def check_service_status(self) -> Dict:
    |                                       ^^^^
275 |         """Check status of trading-related systemd services."""
276 |         services = [
    |
help: Replace with `dict`

UP006 [*] Use `list` instead of `List` for type annotation
   --> scripts/process_manager.py:318:43
    |
316 |         return service_status
317 |     
318 |     def fix_file_permissions(self, paths: List[str], target_user: str = 'aiuser') -> Dict:
    |                                           ^^^^
319 |         """Fix file ownership and permissions."""
320 |         permission_report = {
    |
help: Replace with `list`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/process_manager.py:318:86
    |
316 |         return service_status
317 |     
318 |     def fix_file_permissions(self, paths: List[str], target_user: str = 'aiuser') -> Dict:
    |                                                                                      ^^^^
319 |         """Fix file ownership and permissions."""
320 |         permission_report = {
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/process_manager.py:368:42
    |
366 |         return permission_report
367 |     
368 |     def generate_process_report(self) -> Dict:
    |                                          ^^^^
369 |         """Generate comprehensive process management report."""
370 |         processes = self.find_python_processes()
    |
help: Replace with `dict`

UP006 [*] Use `list` instead of `List` for type annotation
   --> scripts/process_manager.py:395:52
    |
393 |         return report
394 |     
395 |     def _generate_recommendations(self, processes: List[Dict], duplicates: List[Dict], 
    |                                                    ^^^^
396 |                                  service_status: Dict) -> List[str]:
397 |         """Generate recommendations based on process analysis."""
    |
help: Replace with `list`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/process_manager.py:395:57
    |
393 |         return report
394 |     
395 |     def _generate_recommendations(self, processes: List[Dict], duplicates: List[Dict], 
    |                                                         ^^^^
396 |                                  service_status: Dict) -> List[str]:
397 |         """Generate recommendations based on process analysis."""
    |
help: Replace with `dict`

UP006 [*] Use `list` instead of `List` for type annotation
   --> scripts/process_manager.py:395:76
    |
393 |         return report
394 |     
395 |     def _generate_recommendations(self, processes: List[Dict], duplicates: List[Dict], 
    |                                                                            ^^^^
396 |                                  service_status: Dict) -> List[str]:
397 |         """Generate recommendations based on process analysis."""
    |
help: Replace with `list`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/process_manager.py:395:81
    |
393 |         return report
394 |     
395 |     def _generate_recommendations(self, processes: List[Dict], duplicates: List[Dict], 
    |                                                                                 ^^^^
396 |                                  service_status: Dict) -> List[str]:
397 |         """Generate recommendations based on process analysis."""
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/process_manager.py:396:50
    |
395 |     def _generate_recommendations(self, processes: List[Dict], duplicates: List[Dict], 
396 |                                  service_status: Dict) -> List[str]:
    |                                                  ^^^^
397 |         """Generate recommendations based on process analysis."""
398 |         recommendations = []
    |
help: Replace with `dict`

UP006 [*] Use `list` instead of `List` for type annotation
   --> scripts/process_manager.py:396:59
    |
395 |     def _generate_recommendations(self, processes: List[Dict], duplicates: List[Dict], 
396 |                                  service_status: Dict) -> List[str]:
    |                                                           ^^^^
397 |         """Generate recommendations based on process analysis."""
398 |         recommendations = []
    |
help: Replace with `list`

UP015 [*] Unnecessary mode argument
   --> scripts/process_manager.py:455:42
    |
453 |             if os.path.exists(lock_file):
454 |                 try:
455 |                     with open(lock_file, 'r') as f:
    |                                          ^^^
456 |                         existing_pid = int(f.read().strip())
    |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
   --> scripts/process_manager.py:484:46
    |
482 |                 try:
483 |                     if os.path.exists(lock_file):
484 |                         with open(lock_file, 'r') as f:
    |                                              ^^^
485 |                             if int(f.read().strip()) == os.getpid():
486 |                                 os.remove(lock_file)
    |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
   --> scripts/process_manager.py:495:16
    |
493 |             return True
494 |             
495 |         except Exception as e:
    |                ^^^^^^^^^
496 |             self.logger.error(f"Failed to acquire process lock: {e}")
497 |             return False
    |

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> scripts/process_manager.py:499:43
    |
497 |             return False
498 |
499 |     def check_multiple_instances(self) -> Dict:
    |                                           ^^^^
500 |         """
501 |         Check for multiple trading bot instances and provide recommendations.
    |
help: Replace with `dict`

F401 `production_monitoring.get_production_monitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:28:9
   |
26 |         CircuitBreaker,
27 |         ProductionMonitor,
28 |         get_production_monitor,
   |         ^^^^^^^^^^^^^^^^^^^^^^
29 |         initialize_production_monitoring,
30 |     )
   |
help: Remove unused import: `production_monitoring.get_production_monitor`

F401 `performance_optimizer.cached` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:37:9
   |
35 | try:
36 |     from performance_optimizer import (
37 |         cached,
   |         ^^^^^^
38 |         get_performance_optimizer,
39 |         initialize_performance_optimizer,
   |
help: Remove unused import

F401 `performance_optimizer.get_performance_optimizer` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:38:9
   |
36 |     from performance_optimizer import (
37 |         cached,
38 |         get_performance_optimizer,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
39 |         initialize_performance_optimizer,
40 |         profile_performance,
   |
help: Remove unused import

F401 `performance_optimizer.profile_performance` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:40:9
   |
38 |         get_performance_optimizer,
39 |         initialize_performance_optimizer,
40 |         profile_performance,
   |         ^^^^^^^^^^^^^^^^^^^
41 |     )
42 |     PERFORMANCE_OPTIMIZER_AVAILABLE = True
   |
help: Remove unused import

F401 `security_manager.get_security_manager` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:47:34
   |
46 | try:
47 |     from security_manager import get_security_manager, initialize_security_manager
   |                                  ^^^^^^^^^^^^^^^^^^^^
48 |     SECURITY_MANAGER_AVAILABLE = True
49 | except ImportError:
   |
help: Remove unused import: `security_manager.get_security_manager`

F401 `monitoring_dashboard.get_monitoring_dashboard` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:54:9
   |
52 | try:
53 |     from monitoring_dashboard import (
54 |         get_monitoring_dashboard,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
55 |         initialize_monitoring_dashboard,
56 |     )
   |
help: Remove unused import: `monitoring_dashboard.get_monitoring_dashboard`

F401 `health_check.health_monitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:62:30
   |
61 | try:
62 |     from health_check import health_monitor
   |                              ^^^^^^^^^^^^^^
63 |     HEALTH_CHECK_AVAILABLE = True
64 | except ImportError:
   |
help: Remove unused import: `health_check.health_monitor`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:103:24
    |
101 |                     self.logger.info("✓ Production monitoring initialized")
102 |                     success_count += 1
103 |                 except Exception as e:
    |                        ^^^^^^^^^
104 |                     self.logger.error(f"✗ Failed to initialize production monitoring: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:113:24
    |
111 |                     self.logger.info("✓ Performance optimizer initialized")
112 |                     success_count += 1
113 |                 except Exception as e:
    |                        ^^^^^^^^^
114 |                     self.logger.error(f"✗ Failed to initialize performance optimizer: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:123:24
    |
121 |                     self.logger.info("✓ Security manager initialized")
122 |                     success_count += 1
123 |                 except Exception as e:
    |                        ^^^^^^^^^
124 |                     self.logger.error(f"✗ Failed to initialize security manager: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:133:24
    |
131 |                     self.logger.info("✓ Monitoring dashboard initialized")
132 |                     success_count += 1
133 |                 except Exception as e:
    |                        ^^^^^^^^^
134 |                     self.logger.error(f"✗ Failed to initialize monitoring dashboard: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:151:16
    |
149 |             return self.systems_initialized
150 |
151 |         except Exception as e:
    |                ^^^^^^^^^
152 |             self.logger.error(f"Failed to initialize production systems: {e}")
153 |             return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:211:16
    |
209 |             self.logger.info("Health check integration configured")
210 |
211 |         except Exception as e:
    |                ^^^^^^^^^
212 |             self.logger.error(f"Failed to setup health check integration: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:233:16
    |
231 |             return True
232 |
233 |         except Exception as e:
    |                ^^^^^^^^^
234 |             self.logger.error(f"Failed to start monitoring: {e}")
235 |             return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:249:16
    |
247 |             self.logger.info("✓ All monitoring systems stopped")
248 |
249 |         except Exception as e:
    |                ^^^^^^^^^
250 |             self.logger.error(f"Error stopping monitoring: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:361:16
    |
359 |                 )
360 |
361 |         except Exception as e:
    |                ^^^^^^^^^
362 |             self.logger.error(f"Error monitoring trade execution: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:380:20
    |
378 |                     'performance_report': self.production_monitor.get_performance_report()
379 |                 }
380 |             except Exception as e:
    |                    ^^^^^^^^^
381 |                 status['systems']['production_monitoring'] = {
382 |                     'status': 'error',
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:394:20
    |
392 |                     'security_report': self.security_manager.get_security_report()
393 |                 }
394 |             except Exception as e:
    |                    ^^^^^^^^^
395 |                 status['systems']['security'] = {
396 |                     'status': 'error',
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:408:20
    |
406 |                     'performance_report': self.performance_optimizer.get_performance_report()
407 |                 }
408 |             except Exception as e:
    |                    ^^^^^^^^^
409 |                 status['systems']['performance'] = {
410 |                     'status': 'error',
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:419:20
    |
417 |                 from health_check import get_health_status
418 |                 status['systems']['health'] = get_health_status()
419 |             except Exception as e:
    |                    ^^^^^^^^^
420 |                 status['systems']['health'] = {
421 |                     'status': 'error',
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:456:20
    |
454 |                     )
455 |
456 |             except Exception as e:
    |                    ^^^^^^^^^
457 |                 audit_results['security_audit'] = {'error': str(e)}
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:481:20
    |
479 |                     )
480 |
481 |             except Exception as e:
    |                    ^^^^^^^^^
482 |                 audit_results['performance_audit'] = {'error': str(e)}
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_integration.py:507:20
    |
505 |                     )
506 |
507 |             except Exception as e:
    |                    ^^^^^^^^^
508 |                 audit_results['health_audit'] = {'error': str(e)}
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_monitoring.py:208:20
    |
206 |                 self._log_performance_summary(metrics)
207 |
208 |             except Exception as e:
    |                    ^^^^^^^^^
209 |                 self.logger.error(f"Error in monitoring loop: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_monitoring.py:238:16
    |
236 |             )
237 |
238 |         except Exception as e:
    |                ^^^^^^^^^
239 |             self.logger.error(f"Error collecting metrics: {e}")
240 |             # Return zero metrics on error
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_monitoring.py:310:20
    |
308 |                         })
309 |
310 |             except Exception as e:
    |                    ^^^^^^^^^
311 |                 self.logger.error(f"Health check {name} failed: {e}")
312 |                 self.last_health_results[name] = HealthCheckResult(
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_validator.py:134:28
    |
132 |                         response_times.append(response_time)
133 |                         successful_requests += 1
134 |                     except Exception as e:
    |                            ^^^^^^^^^
135 |                         errors.append(str(e))
136 |                         failed_requests += 1
    |

F841 Local variable `result` is assigned to but never used
   --> scripts/production_validator.py:143:21
    |
141 |             for future, submit_time in futures:
142 |                 try:
143 |                     result = future.result(timeout=30)
    |                     ^^^^^^
144 |                     response_time = (time.perf_counter() - submit_time) * 1000
145 |                     response_times.append(response_time)
    |
help: Remove assignment to unused variable `result`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_validator.py:147:24
    |
145 |                     response_times.append(response_time)
146 |                     successful_requests += 1
147 |                 except Exception as e:
    |                        ^^^^^^^^^
148 |                     errors.append(str(e))
149 |                     failed_requests += 1
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_validator.py:224:20
    |
222 |                 time.sleep(10)
223 |
224 |             except Exception as e:
    |                    ^^^^^^^^^
225 |                 self.logger.error(f"Load test {test_name} failed: {e}")
    |

F841 Local variable `start_time` is assigned to but never used
   --> scripts/production_validator.py:318:9
    |
316 |         self.logger.info(f"Starting chaos test: {fault_type}")
317 |
318 |         start_time = datetime.now(UTC)
    |         ^^^^^^^^^^
319 |
320 |         # Baseline measurements
    |
help: Remove assignment to unused variable `start_time`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_validator.py:344:20
    |
342 |                 performance_samples.append(performance)
343 |                 time.sleep(1)
344 |             except Exception as e:
    |                    ^^^^^^^^^
345 |                 error_details.append(f"Monitoring error at {i}s: {e}")
    |

F841 Local variable `recovery_performance` is assigned to but never used
   --> scripts/production_validator.py:360:21
    |
358 |                 performance = self._measure_system_performance()
359 |                 if self._is_performance_recovered(baseline_performance, performance):
360 |                     recovery_performance = performance
    |                     ^^^^^^^^^^^^^^^^^^^^
361 |                     recovery_time = datetime.now(UTC) - recovery_start
362 |                     break
    |
help: Remove assignment to unused variable `recovery_performance`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_validator.py:364:20
    |
362 |                     break
363 |                 time.sleep(1)
364 |             except Exception as e:
    |                    ^^^^^^^^^
365 |                 error_details.append(f"Recovery monitoring error: {e}")
    |

F841 Local variable `end_time` is assigned to but never used
   --> scripts/production_validator.py:367:9
    |
365 |                 error_details.append(f"Recovery monitoring error: {e}")
366 |
367 |         end_time = datetime.now(UTC)
    |         ^^^^^^^^
368 |
369 |         # Calculate impact metrics
    |
help: Remove assignment to unused variable `end_time`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_validator.py:473:16
    |
471 |             return True
472 |
473 |         except Exception:
    |                ^^^^^^^^^
474 |             return False
    |

F821 Undefined name `multiprocessing`
   --> scripts/production_validator.py:488:31
    |
486 |         # Start multiple CPU-intensive threads
487 |         threads = []
488 |         for _ in range(min(4, multiprocessing.cpu_count())):
    |                               ^^^^^^^^^^^^^^^
489 |             thread = threading.Thread(target=cpu_burner, daemon=True)
490 |             thread.start()
    |

F821 Undefined name `os`
   --> scripts/production_validator.py:527:29
    |
525 |                 temp_file = f"/tmp/stress_test_{time.time()}.tmp"
526 |                 with open(temp_file, 'wb') as f:
527 |                     f.write(os.urandom(1024 * 1024))  # 1MB of random data
    |                             ^^
528 |                 temp_files.append(temp_file)
529 |                 time.sleep(0.1)
    |

F821 Undefined name `os`
   --> scripts/production_validator.py:534:21
    |
532 |             for temp_file in temp_files:
533 |                 try:
534 |                     os.remove(temp_file)
    |                     ^^
535 |                 except (OSError, FileNotFoundError):
536 |                     logging.debug(f"Could not remove temporary file: {temp_file}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_validator.py:616:16
    |
614 |                 warnings.append(f"Performance could be improved: {performance_score:.1f}% score")
615 |
616 |         except Exception as e:
    |                ^^^^^^^^^
617 |             critical_failures.append(f"Performance testing failed: {e}")
618 |             test_scores['performance'] = 0
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_validator.py:634:16
    |
632 |                 critical_failures.append(f"Reliability tests failed: {reliability_score:.1f}% score")
633 |
634 |         except Exception as e:
    |                ^^^^^^^^^
635 |             critical_failures.append(f"Reliability testing failed: {e}")
636 |             test_scores['reliability'] = 0
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_validator.py:647:16
    |
645 |                 critical_failures.append(f"Security tests failed: {security_score:.1f}% score")
646 |
647 |         except Exception as e:
    |                ^^^^^^^^^
648 |             critical_failures.append(f"Security testing failed: {e}")
649 |             test_scores['security'] = 0
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_validator.py:660:16
    |
658 |                 critical_failures.append(f"Functionality tests failed: {functionality_score:.1f}% score")
659 |
660 |         except Exception as e:
    |                ^^^^^^^^^
661 |             critical_failures.append(f"Functionality testing failed: {e}")
662 |             test_scores['functionality'] = 0
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/production_validator.py:673:16
    |
671 |                 critical_failures.append(f"Compliance tests failed: {compliance_score:.1f}% score")
672 |
673 |         except Exception as e:
    |                ^^^^^^^^^
674 |             critical_failures.append(f"Compliance testing failed: {e}")
675 |             test_scores['compliance'] = 0
    |

F401 `cryptography` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:791:20
    |
789 |         # Check if encryption modules are available
790 |         try:
791 |             import cryptography
    |                    ^^^^^^^^^^^^
792 |             return 95
793 |         except ImportError:
    |
help: Remove unused import: `cryptography`

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/production_validator.py:817:13
    |
815 |           try:
816 |               # Test imports
817 | /             from ai_trading.core import bot_engine  # AI-AGENT-REF: canonical import
818 | |             import trade_execution
    | |__________________________________^
819 |               return 95
820 |           except ImportError:
    |
help: Organize imports

F401 `ai_trading.core.bot_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:817:41
    |
815 |         try:
816 |             # Test imports
817 |             from ai_trading.core import bot_engine  # AI-AGENT-REF: canonical import
    |                                         ^^^^^^^^^^
818 |             import trade_execution
819 |             return 95
    |
help: Remove unused import: `ai_trading.core.bot_engine`

F401 `trade_execution` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:818:20
    |
816 |             # Test imports
817 |             from ai_trading.core import bot_engine  # AI-AGENT-REF: canonical import
818 |             import trade_execution
    |                    ^^^^^^^^^^^^^^^
819 |             return 95
820 |         except ImportError:
    |
help: Remove unused import: `trade_execution`

F841 Local variable `RiskEngine` is assigned to but never used
   --> scripts/production_validator.py:827:13
    |
825 |         try:
826 |             from ai_trading.core.bot_engine import get_risk_engine
827 |             RiskEngine = get_risk_engine()
    |             ^^^^^^^^^^
828 |             return 90
829 |         except ImportError:
    |
help: Remove assignment to unused variable `RiskEngine`

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/production_validator.py:835:13
    |
833 |           """Test data processing functionality."""
834 |           try:
835 | /             from ai_trading import data_fetcher
836 | |             import indicators
    | |_____________________________^
837 |               return 90
838 |           except ImportError:
    |
help: Organize imports

F401 `ai_trading.data_fetcher` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:835:36
    |
833 |         """Test data processing functionality."""
834 |         try:
835 |             from ai_trading import data_fetcher
    |                                    ^^^^^^^^^^^^
836 |             import indicators
837 |             return 90
    |
help: Remove unused import: `ai_trading.data_fetcher`

F401 `indicators` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:836:20
    |
834 |         try:
835 |             from ai_trading import data_fetcher
836 |             import indicators
    |                    ^^^^^^^^^^
837 |             return 90
838 |         except ImportError:
    |
help: Remove unused import: `indicators`

F401 `ai_trading.telemetry.metrics_logger` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:844:46
    |
842 |         """Test reporting system functionality."""
843 |         try:
844 |             from ai_trading.telemetry import metrics_logger
    |                                              ^^^^^^^^^^^^^^
845 |             return 85
846 |         except ImportError:
    |
help: Remove unused import: `ai_trading.telemetry.metrics_logger`

E402 Module level import not at top of file
 --> scripts/profile_indicators.py:4:1
  |
3 | logger = logging.getLogger(__name__)
4 | import inspect
  | ^^^^^^^^^^^^^^
5 | import time
  |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/profile_indicators.py:4:1
   |
 3 |   logger = logging.getLogger(__name__)
 4 | / import inspect
 5 | | import time
 6 | |
 7 | | import numpy as np
 8 | | import pandas as pd
 9 | |
10 | | from ai_trading import signals
11 | | from ai_trading import indicators
   | |_________________________________^
12 |
13 |   def profile(func, *args, **kwargs):
   |
help: Organize imports

E402 Module level import not at top of file
 --> scripts/profile_indicators.py:5:1
  |
3 | logger = logging.getLogger(__name__)
4 | import inspect
5 | import time
  | ^^^^^^^^^^^
6 |
7 | import numpy as np
  |

E402 Module level import not at top of file
 --> scripts/profile_indicators.py:7:1
  |
5 | import time
6 |
7 | import numpy as np
  | ^^^^^^^^^^^^^^^^^^
8 | import pandas as pd
  |

E402 Module level import not at top of file
  --> scripts/profile_indicators.py:8:1
   |
 7 | import numpy as np
 8 | import pandas as pd
   | ^^^^^^^^^^^^^^^^^^^
 9 |
10 | from ai_trading import signals
   |

E402 Module level import not at top of file
  --> scripts/profile_indicators.py:10:1
   |
 8 | import pandas as pd
 9 |
10 | from ai_trading import signals
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 | from ai_trading import indicators
   |

E402 Module level import not at top of file
  --> scripts/profile_indicators.py:11:1
   |
10 | from ai_trading import signals
11 | from ai_trading import indicators
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | def profile(func, *args, **kwargs):
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/profile_indicators.py:17:12
   |
15 |     try:
16 |         result = func(*args, **kwargs)
17 |     except Exception as e:
   |            ^^^^^^^^^
18 |         logger.error("%s failed: %s", func.__name__, e)
19 |         return None, -1
   |

F403 `from ai_trading.rebalancer import *` used; unable to detect undefined names
  --> scripts/rebalancer.py:26:5
   |
24 | _import_success = False
25 | try:
26 |     from ai_trading.rebalancer import *
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
27 |     _import_success = True
28 | except Exception:
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/rebalancer.py:28:8
   |
26 |     from ai_trading.rebalancer import *
27 |     _import_success = True
28 | except Exception:
   |        ^^^^^^^^^
29 |     # Create minimal rebalancer functionality for testing if import fails
30 |     pass
   |

E402 Module level import not at top of file
  --> scripts/retrain_model.py:22:1
   |
20 | CONFIG = TradingConfig()
21 |
22 | from ai_trading.utils.base import safe_to_datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
23 |
24 | logger = logging.getLogger(__name__)
   |

E402 Module level import not at top of file
  --> scripts/retrain_model.py:38:1
   |
36 | except ImportError:
37 |     pass
38 | import importlib
   | ^^^^^^^^^^^^^^^^
39 | from datetime import UTC, date, datetime, time, timedelta
   |

E402 Module level import not at top of file
  --> scripts/retrain_model.py:39:1
   |
37 |     pass
38 | import importlib
39 | from datetime import UTC, date, datetime, time, timedelta
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
40 |
41 | import requests
   |

E402 Module level import not at top of file
  --> scripts/retrain_model.py:41:1
   |
39 | from datetime import UTC, date, datetime, time, timedelta
40 |
41 | import requests
   | ^^^^^^^^^^^^^^^
42 |
43 | # AI-AGENT-REF: graceful lightgbm fallback for testing
   |

E402 Module level import not at top of file
  --> scripts/retrain_model.py:44:1
   |
43 | # AI-AGENT-REF: graceful lightgbm fallback for testing
44 | from lightgbm import LGBMClassifier
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |
46 | # AI-AGENT-REF: graceful sklearn fallback for testing
   |

E402 Module level import not at top of file
  --> scripts/retrain_model.py:47:1
   |
46 | # AI-AGENT-REF: graceful sklearn fallback for testing
47 | from sklearn.model_selection import ParameterSampler, cross_val_score
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
48 | from sklearn.pipeline import make_pipeline
49 | from sklearn.preprocessing import StandardScaler
   |

E402 Module level import not at top of file
  --> scripts/retrain_model.py:48:1
   |
46 | # AI-AGENT-REF: graceful sklearn fallback for testing
47 | from sklearn.model_selection import ParameterSampler, cross_val_score
48 | from sklearn.pipeline import make_pipeline
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 | from sklearn.preprocessing import StandardScaler
   |

E402 Module level import not at top of file
  --> scripts/retrain_model.py:49:1
   |
47 | from sklearn.model_selection import ParameterSampler, cross_val_score
48 | from sklearn.pipeline import make_pipeline
49 | from sklearn.preprocessing import StandardScaler
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
50 |
51 | try:
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/retrain_model.py:53:8
   |
51 | try:
52 |     import optuna
53 | except Exception as e:  # pragma: no cover - optional dependency
   |        ^^^^^^^^^
54 |     logger.warning("Optuna import failed: %s", e)
55 |     optuna = None
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/retrain_model.py:83:12
   |
81 |             .strip()
82 |         )
83 |     except Exception as e:
   |            ^^^^^^^^^
84 |         logger.debug("git hash lookup failed: %s", e)
85 |         return "unknown"
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/retrain_model.py:186:12
    |
184 |         return max(-1.0, min(1.0, sentiment_score / max(len(articles), 1)))
185 |
186 |     except Exception as e:
    |            ^^^^^^^^^
187 |         logger.warning("Failed to fetch sentiment for %s: %s", symbol, e)
188 |         return 0.0
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/retrain_model.py:214:12
    |
212 |         else:
213 |             return "chop"
214 |     except Exception as e:
    |            ^^^^^^^^^
215 |         logger.warning("Regime detection failed: %s", e)
216 |         return "chop"
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/run_wfa.py:9:1
   |
 7 |   """
 8 |
 9 | / import argparse
10 | | import logging
11 | | import sys
12 | | from datetime import datetime, UTC
13 | | from pathlib import Path
   | |________________________^
14 |
15 |   # Set up Python path to include ai_trading package
   |
help: Organize imports

F401 [*] `logging` imported but unused
  --> scripts/run_wfa.py:10:8
   |
 9 | import argparse
10 | import logging
   |        ^^^^^^^
11 | import sys
12 | from datetime import datetime, UTC
   |
help: Remove unused import: `logging`

F401 [*] `datetime.UTC` imported but unused
  --> scripts/run_wfa.py:12:32
   |
10 | import logging
11 | import sys
12 | from datetime import datetime, UTC
   |                                ^^^
13 | from pathlib import Path
   |
help: Remove unused import: `datetime.UTC`

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/run_wfa.py:19:5
   |
18 |   try:
19 | /     from ai_trading.config.management import TradingConfig
20 | |     from ai_trading.evaluation.walkforward import WalkForwardEvaluator
21 | |     from ai_trading.data_fetcher import DataFetcher
22 | |     from ai_trading.signals import generate_cost_aware_signals, SignalDecisionPipeline
23 | |     from ai_trading.logging import logger
   | |_________________________________________^
24 |   except ImportError as e:
25 |       print(f"Import error: {e}")
   |
help: Organize imports

F401 `ai_trading.signals.generate_cost_aware_signals` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/run_wfa.py:22:36
   |
20 |     from ai_trading.evaluation.walkforward import WalkForwardEvaluator
21 |     from ai_trading.data_fetcher import DataFetcher
22 |     from ai_trading.signals import generate_cost_aware_signals, SignalDecisionPipeline
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
23 |     from ai_trading.logging import logger
24 | except ImportError as e:
   |
help: Remove unused import: `ai_trading.signals.generate_cost_aware_signals`

F821 Undefined name `pd`
  --> scripts/run_wfa.py:69:39
   |
67 |                 try:
68 |                     # Get historical data up to current point
69 |                     historical_data = pd.concat([
   |                                       ^^
70 |                         train_df.tail(100),  # Last 100 days of training
71 |                         test_df.iloc[:i]     # Test data up to current point
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/run_wfa.py:93:28
   |
91 |                         predicted_edge = max(-0.05, min(0.05, predicted_edge))
92 |                         
93 |                     except Exception:
   |                            ^^^^^^^^^
94 |                         predicted_edge = 0.0
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/run_wfa.py:137:24
    |
135 |                         })
136 |                 
137 |                 except Exception as e:
    |                        ^^^^^^^^^
138 |                     logger.debug("Signal generation failed for %s at %d: %s", symbol, i, e)
139 |                     continue
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/run_wfa.py:158:20
    |
156 |             try:
157 |                 return data_fetcher.get_historical_data(symbol, start_date, end_date)
158 |             except Exception as e:
    |                    ^^^^^^^^^
159 |                 logger.warning("Failed to get data for %s: %s", symbol, e)
160 |                 return None
    |

UP015 [*] Unnecessary mode argument
   --> scripts/run_wfa.py:214:38
    |
212 |                 sys.exit(1)
213 |             
214 |             with open(universe_file, 'r') as f:
    |                                      ^^^
215 |                 symbols = [line.strip() for line in f if line.strip() and not line.startswith('#')]
216 |         else:
    |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
   --> scripts/run_wfa.py:267:12
    |
265 |         logger.info("Walk-forward validation interrupted by user")
266 |         sys.exit(0)
267 |     except Exception as e:
    |            ^^^^^^^^^
268 |         logger.error("Walk-forward validation error: %s", e, exc_info=True)
269 |         sys.exit(1)
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/scalability_manager.py:338:32
    |
336 |                             })
337 |
338 |                         except Exception as e:
    |                                ^^^^^^^^^
339 |                             self.logger.error(f"Failed to backup {file_path}: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/scalability_manager.py:372:16
    |
370 |             return backup_info
371 |
372 |         except Exception as e:
    |                ^^^^^^^^^
373 |             self.logger.error(f"Backup creation failed: {e}")
374 |             backup_info['success'] = False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/scalability_manager.py:415:16
    |
413 |             return True
414 |
415 |         except Exception as e:
    |                ^^^^^^^^^
416 |             self.logger.error(f"Backup restoration failed: {e}")
417 |             return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/scalability_manager.py:437:16
    |
435 |                 self.logger.info(f"Cleaned up {removed_count} old backups")
436 |
437 |         except Exception as e:
    |                ^^^^^^^^^
438 |             self.logger.error(f"Backup cleanup failed: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/scalability_manager.py:545:20
    |
543 |                 self._update_system_state(health_status)
544 |
545 |             except Exception as e:
    |                    ^^^^^^^^^
546 |                 self.logger.error(f"Error in HA monitoring loop: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/scalability_manager.py:565:16
    |
563 |                 'metrics': lb_metrics
564 |             }
565 |         except Exception as e:
    |                ^^^^^^^^^
566 |             health_status['components']['load_balancer'] = {
567 |                 'healthy': False,
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/scalability_manager.py:579:16
    |
577 |                 'status': backup_status
578 |             }
579 |         except Exception as e:
    |                ^^^^^^^^^
580 |             health_status['components']['data_replication'] = {
581 |                 'healthy': False,
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/scalability_manager.py:710:16
    |
708 |             test_results['tests_performed'].append('load_balancer_resilience')
709 |             test_results['tests_passed'] += 1
710 |         except Exception as e:
    |                ^^^^^^^^^
711 |             test_results['tests_performed'].append(f'load_balancer_resilience_FAILED: {e}')
712 |             test_results['tests_failed'] += 1
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/scalability_manager.py:723:16
    |
721 |                 test_results['tests_performed'].append('backup_system_FAILED')
722 |                 test_results['tests_failed'] += 1
723 |         except Exception as e:
    |                ^^^^^^^^^
724 |             test_results['tests_performed'].append(f'backup_system_FAILED: {e}')
725 |             test_results['tests_failed'] += 1
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/scalability_manager.py:736:16
    |
734 |                 test_results['tests_performed'].append('health_monitoring_FAILED')
735 |                 test_results['tests_failed'] += 1
736 |         except Exception as e:
    |                ^^^^^^^^^
737 |             test_results['tests_performed'].append(f'health_monitoring_FAILED: {e}')
738 |             test_results['tests_failed'] += 1
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/scalability_manager.py:764:16
    |
762 |             self.logger.info("Emergency shutdown completed")
763 |
764 |         except Exception as e:
    |                ^^^^^^^^^
765 |             self.logger.error(f"Error during emergency shutdown: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/security_manager.py:483:16
    |
481 |             return True
482 |
483 |         except Exception as e:
    |                ^^^^^^^^^
484 |             self.logger.error(f"Authentication error: {e}")
485 |             self._handle_failed_auth(client_ip, f"Authentication error: {e}")
    |

I001 [*] Import block is un-sorted or un-formatted
 --> scripts/slippage.py:1:1
  |
1 | import logging
  | ^^^^^^^^^^^^^^
2 | try:  # AI-AGENT-REF: canonical env validation
3 |     from ai_trading.validation.validate_env import Settings
  |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> scripts/smoke_backtest.py:79:12
   |
77 |         return True
78 |
79 |     except Exception as e:
   |            ^^^^^^^^^
80 |         print(f"✗ Backtest smoke test failed: {e}")
81 |         return False
   |

F401 [*] `traceback` imported but unused
  --> scripts/smoke_imports.py:10:8
   |
 9 | import sys
10 | import traceback
   |        ^^^^^^^^^
11 | from typing import List, Tuple
   |
help: Remove unused import: `traceback`

UP035 `typing.List` is deprecated, use `list` instead
  --> scripts/smoke_imports.py:11:1
   |
 9 | import sys
10 | import traceback
11 | from typing import List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> scripts/smoke_imports.py:11:1
   |
 9 | import sys
10 | import traceback
11 | from typing import List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

F401 [*] `typing.List` imported but unused
  --> scripts/smoke_imports.py:11:20
   |
 9 | import sys
10 | import traceback
11 | from typing import List, Tuple
   |                    ^^^^
   |
help: Remove unused import: `typing.List`

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
  --> scripts/smoke_imports.py:14:61
   |
14 | def test_import(module_name: str, description: str = "") -> Tuple[bool, str]:
   |                                                             ^^^^^
15 |     """Test importing a module."""
16 |     try:
   |
help: Replace with `tuple`

BLE001 Do not catch blind exception: `Exception`
  --> scripts/smoke_imports.py:19:12
   |
17 |         __import__(module_name)
18 |         return True, f"✅ {module_name} {description}"
19 |     except Exception as e:
   |            ^^^^^^^^^
20 |         return False, f"❌ {module_name} {description}: {e}"
   |

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
  --> scripts/smoke_imports.py:23:115
   |
23 | def test_class_instantiation(module_name: str, class_name: str, args=None, kwargs=None, description: str = "") -> Tuple[bool, str]:
   |                                                                                                                   ^^^^^
24 |     """Test importing and instantiating a class."""
25 |     args = args or []
   |
help: Replace with `tuple`

F841 Local variable `instance` is assigned to but never used
  --> scripts/smoke_imports.py:30:9
   |
28 |         module = __import__(module_name, fromlist=[class_name])
29 |         cls = getattr(module, class_name)
30 |         instance = cls(*args, **kwargs)
   |         ^^^^^^^^
31 |         return True, f"✅ {module_name}.{class_name} {description}"
32 |     except Exception as e:
   |
help: Remove assignment to unused variable `instance`

BLE001 Do not catch blind exception: `Exception`
  --> scripts/smoke_imports.py:32:12
   |
30 |         instance = cls(*args, **kwargs)
31 |         return True, f"✅ {module_name}.{class_name} {description}"
32 |     except Exception as e:
   |            ^^^^^^^^^
33 |         return False, f"❌ {module_name}.{class_name} {description}: {e}"
   |

F401 `ai_trading.monitoring.MetricsCollector` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/smoke_imports.py:55:43
   |
53 |     # Monitoring classes - critical for startup
54 |     try:
55 |         from ai_trading.monitoring import MetricsCollector, PerformanceMonitor
   |                                           ^^^^^^^^^^^^^^^^
56 |         tests.append((True, "✅ MetricsCollector and PerformanceMonitor imported successfully"))
57 |     except ImportError as e:
   |
help: Remove unused import

F401 `ai_trading.monitoring.PerformanceMonitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/smoke_imports.py:55:61
   |
53 |     # Monitoring classes - critical for startup
54 |     try:
55 |         from ai_trading.monitoring import MetricsCollector, PerformanceMonitor
   |                                                             ^^^^^^^^^^^^^^^^^^
56 |         tests.append((True, "✅ MetricsCollector and PerformanceMonitor imported successfully"))
57 |     except ImportError as e:
   |
help: Remove unused import

F541 [*] f-string without any placeholders
   --> scripts/smoke_imports.py:114:33
    |
112 |             tests.append((False, f"❌ TradingConfig missing attributes: {missing_attrs}"))
113 |         else:
114 |             tests.append((True, f"✅ TradingConfig has all required attributes"))
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
115 |             
116 |         # Test safe dict export
    |
help: Remove extraneous `f` prefix

BLE001 Do not catch blind exception: `Exception`
   --> scripts/smoke_imports.py:123:12
    |
121 |             tests.append((False, "❌ TradingConfig.to_dict(safe=True) does not redact secrets properly"))
122 |             
123 |     except Exception as e:
    |            ^^^^^^^^^
124 |         tests.append((False, f"❌ TradingConfig.from_env() failed: {e}"))
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/smoke_imports.py:134:12
    |
132 |         else:
133 |             tests.append((False, "❌ StrategyAllocator missing allocate method"))
134 |     except Exception as e:
    |            ^^^^^^^^^
135 |         tests.append((False, f"❌ StrategyAllocator instantiation failed: {e}"))
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/smoke_runtime.py:11:1
   |
 9 |   """
10 |
11 | / import sys
12 | | import os
   | |_________^
13 |   sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
   |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> scripts/smoke_runtime.py:35:12
   |
33 |         return True
34 |         
35 |     except Exception as e:
   |            ^^^^^^^^^
36 |         print(f"✗ pandas MultiIndex test failed: {e}")
37 |         return False
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/smoke_runtime.py:57:12
   |
55 |         return True
56 |         
57 |     except Exception as e:
   |            ^^^^^^^^^
58 |         print(f"✗ LazyBotContext params test failed: {e}")
59 |         return False
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/smoke_runtime.py:65:9
   |
63 |     """Test that _prepare_run can access runtime.params."""
64 |     try:
65 |         from ai_trading.core.bot_engine import _prepare_run, BotState
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
66 |         
67 |         # Create mock runtime with params attribute 
   |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
   --> scripts/smoke_runtime.py:103:16
    |
101 |             else:
102 |                 print(f"✓ _prepare_run params access works (other AttributeError: {e})")
103 |         except Exception as e:
    |                ^^^^^^^^^
104 |             # Other exceptions are fine, we just want to test params access
105 |             print(f"✓ _prepare_run params access works (other error: {type(e).__name__})")
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/smoke_runtime.py:109:12
    |
107 |         return True
108 |         
109 |     except Exception as e:
    |            ^^^^^^^^^
110 |         print(f"✗ _prepare_run test failed: {e}")
111 |         return False
    |

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/smoke_runtime.py:117:9
    |
115 |       """Test the empty DataFrame helper creates valid indexes."""
116 |       try:
117 | /         from ai_trading.core.bot_engine import _create_empty_bars_dataframe
118 | |         import pandas as pd
    | |___________________________^
119 |           
120 |           # Test the helper function
    |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
   --> scripts/smoke_runtime.py:135:12
    |
133 |         return True
134 |         
135 |     except Exception as e:
    |            ^^^^^^^^^
136 |         print(f"✗ Empty DataFrame helper test failed: {e}")
137 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/smoke_runtime.py:161:16
    |
159 |             else:
160 |                 print("✗ FAILED")
161 |         except Exception as e:
    |                ^^^^^^^^^
162 |             print(f"✗ FAILED with exception: {e}")
163 |         print()
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/system_diagnostic.py:141:16
    |
139 |                 'function_objects': len([obj for obj in all_objects if callable(obj)])
140 |             }
141 |         except Exception as e:
    |                ^^^^^^^^^
142 |             gc_info['object_counts'] = {'error': str(e)}
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/system_diagnostic.py:165:16
    |
163 |                     except OSError:
164 |                         continue
165 |         except Exception as e:
    |                ^^^^^^^^^
166 |             file_info['error'] = str(e)
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/system_diagnostic.py:279:16
    |
277 |             disk_info['large_files'] = sorted(large_files, key=lambda x: x[1], reverse=True)[:10]
278 |
279 |         except Exception as e:
    |                ^^^^^^^^^
280 |             disk_info['error'] = str(e)
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/system_diagnostic.py:317:20
    |
315 |                 diagnostic_results[f'{check_name}_time_ms'] = check_time * 1000
316 |
317 |             except Exception as e:
    |                    ^^^^^^^^^
318 |                 self.logger.error(f"Error in {check_name}: {str(e)}")
319 |                 diagnostic_results[check_name] = {'error': str(e)}
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/system_health_checker.py:12:1
   |
10 |   """
11 |
12 | / import json
13 | | import logging
14 | | import threading
15 | | import time
16 | | from collections import defaultdict, deque
17 | | from dataclasses import dataclass, field
18 | | from datetime import UTC, datetime
19 | | from typing import Any
20 | |
21 | | from ai_trading.config import management as config
22 | | from ai_trading.config.management import TradingConfig
   | |______________________________________________________^
23 |   CONFIG = TradingConfig()
   |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
   --> scripts/system_health_checker.py:235:16
    |
233 |             )
234 |
235 |         except Exception as e:
    |                ^^^^^^^^^
236 |             self.logger.error("Failed to check sentiment health: %s", e)
237 |             return ComponentHealth(
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/system_health_checker.py:294:16
    |
292 |                 )
293 |
294 |         except Exception as e:
    |                ^^^^^^^^^
295 |             self.logger.error("Failed to check meta-learning health: %s", e)
296 |             return ComponentHealth(
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/system_health_checker.py:376:16
    |
374 |                 )
375 |
376 |         except Exception as e:
    |                ^^^^^^^^^
377 |             self.logger.error("Failed to check order execution health: %s", e)
378 |             return ComponentHealth(
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/system_health_checker.py:425:16
    |
423 |             )
424 |
425 |         except Exception as e:
    |                ^^^^^^^^^
426 |             self.logger.error("Failed to check liquidity management health: %s", e)
427 |             return ComponentHealth(
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/system_health_checker.py:517:16
    |
515 |             self.logger.info("Health report exported to %s", filepath)
516 |
517 |         except Exception as e:
    |                ^^^^^^^^^
518 |             self.logger.error("Failed to export health report: %s", e)
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/transaction_cost_calculator.py:10:1
   |
 8 |   """
 9 |
10 | / from ai_trading.execution.transaction_costs import (
11 | |     TradeType,
12 | |     LiquidityTier,
13 | |     TransactionCostBreakdown,
14 | |     ProfitabilityAnalysis,
15 | |     TransactionCostCalculator,
16 | |     create_transaction_cost_calculator
17 | | )
   | |_^
18 |
19 |   # Re-export all classes for backward compatibility
   |
help: Organize imports

E402 Module level import not at top of file
  --> scripts/validate_critical_features.py:9:1
   |
 7 | """
 8 |
 9 | import subprocess
   | ^^^^^^^^^^^^^^^^^
10 | import sys
11 | from pathlib import Path
   |

E402 Module level import not at top of file
  --> scripts/validate_critical_features.py:10:1
   |
 9 | import subprocess
10 | import sys
   | ^^^^^^^^^^
11 | from pathlib import Path
   |

E402 Module level import not at top of file
  --> scripts/validate_critical_features.py:11:1
   |
 9 | import subprocess
10 | import sys
11 | from pathlib import Path
   | ^^^^^^^^^^^^^^^^^^^^^^^^
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_critical_features.py:30:12
   |
28 |                 logging.info(f"  Error: {result.stderr.strip()}")
29 |             return False
30 |     except Exception as e:
   |            ^^^^^^^^^
31 |         logging.info(f"✗ {description} failed with exception: {e}")
32 |         return False
   |

E402 Module level import not at top of file
  --> scripts/validate_critical_fix.py:17:1
   |
15 | """
16 |
17 | import os
   | ^^^^^^^^^
18 | import sys
   |

E402 Module level import not at top of file
  --> scripts/validate_critical_fix.py:18:1
   |
17 | import os
18 | import sys
   | ^^^^^^^^^^
19 |
20 | # Set up test environment
   |

E402 Module level import not at top of file
  --> scripts/validate_critical_fix.py:32:1
   |
31 | # (mocks removed; see tests/mocks/validate_critical_fix_mocks.py)
32 | from tests.mocks.validate_critical_fix_mocks import MockOrder, MockContext
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
33 |
34 | from ai_trading.trade_execution import ExecutionEngine
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/validate_critical_fix.py:32:1
   |
31 |   # (mocks removed; see tests/mocks/validate_critical_fix_mocks.py)
32 | / from tests.mocks.validate_critical_fix_mocks import MockOrder, MockContext
33 | |
34 | | from ai_trading.trade_execution import ExecutionEngine
   | |______________________________________________________^
35 |
36 |   def test_production_scenarios():
   |
help: Organize imports

E402 Module level import not at top of file
  --> scripts/validate_critical_fix.py:34:1
   |
32 | from tests.mocks.validate_critical_fix_mocks import MockOrder, MockContext
33 |
34 | from ai_trading.trade_execution import ExecutionEngine
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
35 |
36 | def test_production_scenarios():
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_critical_fix.py:84:16
   |
82 |             else:
83 |                 raise
84 |         except Exception as e:
   |                ^^^^^^^^^
85 |             logging.info(f"   ⚠️  Other exception (acceptable): {type(e).__name__}")
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_critical_fix.py:110:16
    |
108 |             else:
109 |                 raise
110 |         except Exception:
    |                ^^^^^^^^^
111 |             logging.info(f"   ✅ {description}: handled gracefully")
    |

E402 Module level import not at top of file
  --> scripts/validate_critical_fixes.py:16:1
   |
14 | """
15 |
16 | import os
   | ^^^^^^^^^
17 | import sys
18 | import traceback
   |

E402 Module level import not at top of file
  --> scripts/validate_critical_fixes.py:17:1
   |
16 | import os
17 | import sys
   | ^^^^^^^^^^
18 | import traceback
   |

E402 Module level import not at top of file
  --> scripts/validate_critical_fixes.py:18:1
   |
16 | import os
17 | import sys
18 | import traceback
   | ^^^^^^^^^^^^^^^^
19 |
20 | # Set up minimal environment for testing
   |

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
  --> scripts/validate_critical_fixes.py:43:16
   |
41 |         # Test basic functionality
42 |         result = sentiment.predict_text_sentiment('This is a test')
43 |         assert isinstance(result, (int, float)), "predict_text_sentiment should return a number"
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 |         logging.info(f"  ✅ predict_text_sentiment works: {result}")
   |
help: Convert to `X | Y`

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_critical_fixes.py:47:12
   |
46 |         return True
47 |     except Exception as e:
   |            ^^^^^^^^^
48 |         logging.info(f"  ❌ Sentiment module test failed: {e}")
49 |         traceback.print_exc()
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_critical_fixes.py:83:12
   |
82 |         return True
83 |     except Exception as e:
   |            ^^^^^^^^^
84 |         logging.info(f"  ❌ MetaLearning strategy test failed: {e}")
85 |         traceback.print_exc()
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_critical_fixes.py:114:12
    |
112 |         logging.info("  ✅ Alpaca API endpoints are correctly configured")
113 |         return True
114 |     except Exception as e:
    |            ^^^^^^^^^
115 |         logging.info(f"  ❌ Alpaca API test failed: {e}")
116 |         traceback.print_exc()
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_critical_fixes.py:133:12
    |
132 |         return True
133 |     except Exception as e:
    |            ^^^^^^^^^
134 |         logging.info(f"  ❌ Import resolution test failed: {e}")
135 |         traceback.print_exc()
    |

E402 Module level import not at top of file
 --> scripts/validate_enhanced_debugging.py:6:1
  |
4 | """Simple test to validate enhanced execution debugging functionality."""
5 |
6 | import os
  | ^^^^^^^^^
7 | import sys
  |

E402 Module level import not at top of file
 --> scripts/validate_enhanced_debugging.py:7:1
  |
6 | import os
7 | import sys
  | ^^^^^^^^^^
8 |
9 | # Set required environment variables
  |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_enhanced_debugging.py:197:12
    |
195 |         return True
196 |
197 |     except Exception as e:
    |            ^^^^^^^^^
198 |         logging.info(f"\nTEST FAILED: {e}")
199 |         import traceback
    |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_enhancements.py:56:12
   |
54 |         return True
55 |         
56 |     except Exception as e:
   |            ^^^^^^^^^
57 |         print(f"  ✗ Monitoring API test failed: {e}")
58 |         return False
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/validate_enhancements.py:65:9
   |
64 |       try:
65 | /         import pandas as pd
66 | |         import numpy as np
67 | |         from datetime import datetime, UTC
   | |__________________________________________^
68 |           
69 |           # Create minimal signal pipeline - import locally to avoid dependency issues
   |
help: Organize imports

F401 [*] `pandas` imported but unused
  --> scripts/validate_enhancements.py:65:26
   |
64 |     try:
65 |         import pandas as pd
   |                          ^^
66 |         import numpy as np
67 |         from datetime import datetime, UTC
   |
help: Remove unused import: `pandas`

F401 [*] `numpy` imported but unused
  --> scripts/validate_enhancements.py:66:25
   |
64 |     try:
65 |         import pandas as pd
66 |         import numpy as np
   |                         ^^
67 |         from datetime import datetime, UTC
   |
help: Remove unused import: `numpy`

F401 [*] `datetime.datetime` imported but unused
  --> scripts/validate_enhancements.py:67:30
   |
65 |         import pandas as pd
66 |         import numpy as np
67 |         from datetime import datetime, UTC
   |                              ^^^^^^^^
68 |         
69 |         # Create minimal signal pipeline - import locally to avoid dependency issues
   |
help: Remove unused import

F401 [*] `datetime.UTC` imported but unused
  --> scripts/validate_enhancements.py:67:40
   |
65 |         import pandas as pd
66 |         import numpy as np
67 |         from datetime import datetime, UTC
   |                                        ^^^
68 |         
69 |         # Create minimal signal pipeline - import locally to avoid dependency issues
   |
help: Remove unused import

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_enhancements.py:112:12
    |
110 |         return passed == len(results)
111 |         
112 |     except Exception as e:
    |            ^^^^^^^^^
113 |         print(f"  ✗ Cost-aware signal test failed: {e}")
114 |         return False
    |

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/validate_enhancements.py:121:9
    |
120 |       try:
121 | /         from ai_trading.strategies.performance_allocator import PerformanceBasedAllocator
122 | |         from datetime import datetime, UTC
    | |__________________________________________^
123 |           
124 |           # Initialize allocator
    |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_enhancements.py:183:12
    |
181 |         return True
182 |         
183 |     except Exception as e:
    |            ^^^^^^^^^
184 |         print(f"  ✗ Performance allocator test failed: {e}")
185 |         import traceback
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_enhancements.py:212:12
    |
210 |         return True
211 |         
212 |     except Exception as e:
    |            ^^^^^^^^^
213 |         print(f"  ✗ Exception handling test failed: {e}")
214 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_enhancements.py:234:16
    |
232 |             result = test_func()
233 |             results.append((test_name, result))
234 |         except Exception as e:
    |                ^^^^^^^^^
235 |             print(f"  ✗ {test_name} failed with error: {e}")
236 |             results.append((test_name, False))
    |

E402 Module level import not at top of file
 --> scripts/validate_final_polish.py:8:1
  |
6 | """
7 |
8 | import os
  | ^^^^^^^^^
9 | import tempfile
  |

E402 Module level import not at top of file
 --> scripts/validate_final_polish.py:9:1
  |
8 | import os
9 | import tempfile
  | ^^^^^^^^^^^^^^^
  |

E402 Module level import not at top of file
  --> scripts/validate_fixes.py:10:1
   |
 8 | the actual code changes rather than running complex tests.
 9 | """
10 | import os
   | ^^^^^^^^^
11 | import re
   |

E402 Module level import not at top of file
  --> scripts/validate_fixes.py:11:1
   |
 9 | """
10 | import os
11 | import re
   | ^^^^^^^^^
   |

I001 [*] Import block is un-sorted or un-formatted
 --> scripts/validate_fixes_root.py:4:1
  |
2 |   """Validation script for the ellipsis and risk exposure fixes."""
3 |
4 | / import json
5 | | import sys
6 | | import os
7 | | import logging
  | |______________^
8 |
9 |   # Add the project root to the path
  |
help: Organize imports

F401 [*] `os` imported but unused
 --> scripts/validate_fixes_root.py:6:8
  |
4 | import json
5 | import sys
6 | import os
  |        ^^
7 | import logging
  |
help: Remove unused import: `os`

F401 [*] `pathlib` imported but unused
  --> scripts/validate_fixes_root.py:44:12
   |
42 |     """Test that the modified files compile correctly."""
43 |     import compileall
44 |     import pathlib
   |            ^^^^^^^
45 |     
46 |     files_to_check = [
   |
help: Remove unused import: `pathlib`

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_fixes_root.py:91:12
   |
89 |         return True
90 |         
91 |     except Exception as e:
   |            ^^^^^^^^^
92 |         print(f"✗ Logging formatter test failed: {e}")
93 |         return False
   |

UP015 [*] Unnecessary mode argument
   --> scripts/validate_fixes_root.py:99:32
    |
 97 |     bot_engine_path = '/home/runner/work/ai-trading-bot/ai-trading-bot/ai_trading/core/bot_engine.py'
 98 |     
 99 |     with open(bot_engine_path, 'r') as f:
    |                                ^^^
100 |         content = f.read()
    |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
   --> scripts/validate_fixes_root.py:128:29
    |
126 |     logging_path = '/home/runner/work/ai-trading-bot/ai-trading-bot/ai_trading/logging.py'
127 |     
128 |     with open(logging_path, 'r') as f:
    |                             ^^^
129 |         content = f.read()
    |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_fixes_root.py:163:16
    |
161 |                 passed += 1
162 |             print()
163 |         except Exception as e:
    |                ^^^^^^^^^
164 |             print(f"✗ {test_name} failed with exception: {e}")
165 |             print()
    |

E402 Module level import not at top of file
  --> scripts/validate_improvements.py:8:1
   |
 6 | """
 7 |
 8 | import os
   | ^^^^^^^^^
 9 | import subprocess
10 | import sys
   |

E402 Module level import not at top of file
  --> scripts/validate_improvements.py:9:1
   |
 8 | import os
 9 | import subprocess
   | ^^^^^^^^^^^^^^^^^
10 | import sys
   |

E402 Module level import not at top of file
  --> scripts/validate_improvements.py:10:1
   |
 8 | import os
 9 | import subprocess
10 | import sys
   | ^^^^^^^^^^
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_improvements.py:29:12
   |
27 |         logging.info("✓ ai_trading imported successfully without Alpaca packages")
28 |         return True
29 |     except Exception as e:
   |            ^^^^^^^^^
30 |         logging.info(f"✗ Failed to import ai_trading: {e}")
31 |         return False
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_improvements.py:43:12
   |
41 |         logging.info("✓ Package-safe imports working correctly")
42 |         return True
43 |     except Exception as e:
   |            ^^^^^^^^^
44 |         logging.info(f"✗ Package import failed: {e}")
45 |         return False
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_improvements.py:60:12
   |
58 |         logging.info("✓ Timezone-aware datetime utilities working")
59 |         return True
60 |     except Exception as e:
   |            ^^^^^^^^^
61 |         logging.info(f"✗ Timezone utilities failed: {e}")
62 |         return False
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_improvements.py:71:12
   |
69 |         logging.info("✓ Idempotency and reconciliation modules available")
70 |         return True
71 |     except Exception as e:
   |            ^^^^^^^^^
72 |         logging.info(f"✗ Idempotency/reconciliation modules failed: {e}")
73 |         return False
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_improvements.py:126:12
    |
124 |         logging.info("✗ Pytest timed out")
125 |         return False
126 |     except Exception as e:
    |            ^^^^^^^^^
127 |         logging.info(f"✗ Pytest check failed: {e}")
128 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_improvements.py:152:16
    |
150 |             results.append(result)
151 |             print()
152 |         except Exception as e:
    |                ^^^^^^^^^
153 |             logging.info(f"✗ Test {test.__name__} failed with exception: {e}\n")
154 |             results.append(False)
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/validate_migration.py:7:1
   |
 5 |   """
 6 |
 7 | / import os
 8 | | import sys
 9 | | import ast
   | |__________^
10 |
11 |   def check_file_exists(filepath):
   |
help: Organize imports

UP015 [*] Unnecessary mode argument
  --> scripts/validate_migration.py:18:29
   |
16 |     """Check if a Python file has valid syntax."""
17 |     try:
18 |         with open(filepath, 'r') as f:
   |                             ^^^
19 |             content = f.read()
20 |         ast.parse(content)
   |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_migration.py:24:12
   |
22 |     except SyntaxError as e:
23 |         return False, f"Syntax error: {e}"
24 |     except Exception as e:
   |            ^^^^^^^^^
25 |         return False, f"Error: {e}"
   |

UP015 [*] Unnecessary mode argument
  --> scripts/validate_migration.py:30:29
   |
28 |     """Extract import statements from a file."""
29 |     try:
30 |         with open(filepath, 'r') as f:
   |                             ^^^
31 |             tree = ast.parse(f.read())
   |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_migration.py:40:12
   |
38 |                     imports.append(f"from {module} import {alias.name}")
39 |         return imports
40 |     except Exception:
   |            ^^^^^^^^^
41 |         return []
   |

E402 Module level import not at top of file
 --> scripts/validate_peak_performance.py:8:1
  |
6 | """
7 |
8 | import sys
  | ^^^^^^^^^^
9 | from pathlib import Path
  |

E402 Module level import not at top of file
  --> scripts/validate_peak_performance.py:9:1
   |
 8 | import sys
 9 | from pathlib import Path
   | ^^^^^^^^^^^^^^^^^^^^^^^^
10 |
11 | # Add current directory to path for imports
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_peak_performance.py:38:16
   |
36 |             imported.append(module)
37 |             logging.info(f"  ✓ {module}")
38 |         except Exception as e:
   |                ^^^^^^^^^
39 |             failed.append((module, str(e)))
40 |             logging.info(f"  ✗ {module}: {e}")
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_peak_performance.py:61:12
   |
59 |         logging.info("  ✓ Idempotency system working")
60 |
61 |     except Exception as e:
   |            ^^^^^^^^^
62 |         logging.info(f"  ✗ Idempotency test failed: {e}")
63 |         return False
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_peak_performance.py:80:12
   |
78 |         logging.info("  ✓ Cost model working")
79 |
80 |     except Exception as e:
   |            ^^^^^^^^^
81 |         logging.info(f"  ✗ Cost model test failed: {e}")
82 |         return False
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_peak_performance.py:99:12
    |
 97 |         logging.info("  ✓ Determinism working")
 98 |
 99 |     except Exception as e:
    |            ^^^^^^^^^
100 |         logging.info(f"  ✗ Determinism test failed: {e}")
101 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_peak_performance.py:112:12
    |
110 |         logging.info("  ✓ Performance cache working")
111 |
112 |     except Exception as e:
    |            ^^^^^^^^^
113 |         logging.info(f"  ✗ Performance cache test failed: {e}")
114 |         return False
    |

F841 Local variable `costs` is assigned to but never used
   --> scripts/validate_peak_performance.py:144:9
    |
143 |         # Get costs for symbol
144 |         costs = cost_model.get_costs("TEST")
    |         ^^^^^
145 |
146 |         # Calculate limit price
    |
help: Remove assignment to unused variable `costs`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_peak_performance.py:155:12
    |
153 |         return True
154 |
155 |     except Exception as e:
    |            ^^^^^^^^^
156 |         logging.info(f"  ✗ Integration test failed: {e}")
157 |         return False
    |

E402 Module level import not at top of file
  --> scripts/validate_problem_statement_fixes.py:9:1
   |
 7 | """
 8 |
 9 | import os
   | ^^^^^^^^^
10 | import re
11 | import sys
   |

E402 Module level import not at top of file
  --> scripts/validate_problem_statement_fixes.py:10:1
   |
 9 | import os
10 | import re
   | ^^^^^^^^^
11 | import sys
   |

E402 Module level import not at top of file
  --> scripts/validate_problem_statement_fixes.py:11:1
   |
 9 | import os
10 | import re
11 | import sys
   | ^^^^^^^^^^
12 |
13 | # Set up minimal environment
   |

UP015 [*] Unnecessary mode argument
  --> scripts/validate_problem_statement_fixes.py:42:36
   |
41 |         # Also check bot_engine.py for consistency
42 |         with open('bot_engine.py', 'r') as f:
   |                                    ^^^
43 |             content = f.read()
   |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_problem_statement_fixes.py:55:12
   |
53 |         return actual_failures == expected_failures and actual_recovery == expected_recovery
54 |         
55 |     except Exception as e:
   |            ^^^^^^^^^
56 |         logging.info(f"Error validating sentiment circuit breaker: {e}")
57 |         return False
   |

UP015 [*] Unnecessary mode argument
  --> scripts/validate_problem_statement_fixes.py:65:36
   |
64 |     try:
65 |         with open('bot_engine.py', 'r') as f:
   |                                    ^^^
66 |             content = f.read()
   |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_problem_statement_fixes.py:81:12
   |
79 |             return False
80 |             
81 |     except Exception as e:
   |            ^^^^^^^^^
82 |         logging.info(f"Error validating meta-learning: {e}")
83 |         return False
   |

UP015 [*] Unnecessary mode argument
  --> scripts/validate_problem_statement_fixes.py:91:36
   |
90 |     try:
91 |         with open('bot_engine.py', 'r') as f:
   |                                    ^^^
92 |             content = f.read()
   |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_problem_statement_fixes.py:102:12
    |
100 |             return False
101 |             
102 |     except Exception as e:
    |            ^^^^^^^^^
103 |         logging.info(f"Error validating PLTR sector: {e}")
104 |         return False
    |

UP015 [*] Unnecessary mode argument
   --> scripts/validate_problem_statement_fixes.py:112:41
    |
111 |     try:
112 |         with open('trade_execution.py', 'r') as f:
    |                                         ^^^
113 |             content = f.read()
    |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_problem_statement_fixes.py:132:12
    |
130 |         return all_implemented
131 |         
132 |     except Exception as e:
    |            ^^^^^^^^^
133 |         logging.info(f"Error validating execution optimizations: {e}")
134 |         return False
    |

UP015 [*] Unnecessary mode argument
   --> scripts/validate_problem_statement_fixes.py:142:41
    |
141 |     try:
142 |         with open('trade_execution.py', 'r') as f:
    |                                         ^^^
143 |             content = f.read()
    |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_problem_statement_fixes.py:161:12
    |
159 |         return all_implemented
160 |         
161 |     except Exception as e:
    |            ^^^^^^^^^
162 |         logging.info(f"Error validating quantity tracking: {e}")
163 |         return False
    |

E402 Module level import not at top of file
  --> scripts/validate_production_fixes.py:11:1
   |
 9 | """
10 |
11 | import os
   | ^^^^^^^^^
12 | from datetime import datetime
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/validate_production_fixes.py:11:1
   |
 9 |   """
10 |
11 | / import os
12 | | from datetime import datetime
   | |_____________________________^
13 |
14 |   def validate_sentiment_api_config():
   |
help: Organize imports

E402 Module level import not at top of file
  --> scripts/validate_production_fixes.py:12:1
   |
11 | import os
12 | from datetime import datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | def validate_sentiment_api_config():
   |

UP015 [*] Unnecessary mode argument
  --> scripts/validate_production_fixes.py:24:30
   |
22 |         return False
23 |     
24 |     with open(env_file_path, 'r') as f:
   |                              ^^^
25 |         env_content = f.read()
   |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
  --> scripts/validate_production_fixes.py:42:32
   |
40 |     # Check config.py has the new variables
41 |     try:
42 |         with open('config.py', 'r') as f:
   |                                ^^^
43 |             config_content = f.read()
   |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_production_fixes.py:50:12
   |
48 |             logging.info("❌ Sentiment API variables missing from config.py")
49 |             return False
50 |     except Exception as e:
   |            ^^^^^^^^^
51 |         logging.info(f"❌ Error checking config.py: {e}")
52 |         return False
   |

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_production_fixes.py:77:16
   |
75 |             count = monitor._count_trading_bot_processes()
76 |             logging.info(f"✅ Process detection works, found {count} trading bot processes")
77 |         except Exception as e:
   |                ^^^^^^^^^
78 |             logging.info(f"⚠️  Process detection method exists but failed to run: {e}")
79 |             # This is not a failure in test environment
   |

UP015 [*] Unnecessary mode argument
   --> scripts/validate_production_fixes.py:108:41
    |
106 |     try:
107 |         # Check if functions exist in data_validation.py
108 |         with open('data_validation.py', 'r') as f:
    |                                         ^^^
109 |             data_val_content = f.read()
    |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_production_fixes.py:129:12
    |
127 |         return True
128 |         
129 |     except Exception as e:
    |            ^^^^^^^^^
130 |         logging.info(f"❌ Error validating data staleness: {e}")
131 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_production_fixes.py:201:12
    |
199 |         return True
200 |         
201 |     except Exception as e:
    |            ^^^^^^^^^
202 |         logging.info(f"❌ Backwards compatibility check failed: {e}")
203 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_production_fixes.py:230:16
    |
228 |             else:
229 |                 logging.info(f"❌ {test_name} validation failed")
230 |         except Exception as e:
    |                ^^^^^^^^^
231 |             logging.info(f"❌ {test_name} validation error: {e}")
    |

E402 Module level import not at top of file
  --> scripts/validate_profit_critical.py:9:1
   |
 7 | """
 8 |
 9 | import sys
   | ^^^^^^^^^^
10 | from pathlib import Path
   |

E402 Module level import not at top of file
  --> scripts/validate_profit_critical.py:10:1
   |
 9 | import sys
10 | from pathlib import Path
   | ^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | # Add the repo root to path to import modules directly
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/validate_profit_critical.py:22:5
   |
20 |       # Import directly from file to avoid package initialization
21 |       sys.path.insert(0, str(repo_root / "ai_trading" / "math"))
22 | /     from money import Money
23 | |     from decimal import Decimal
   | |_______________________________^
24 |       
25 |       # Test as specified in problem statement
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/validate_profit_critical.py:49:5
   |
48 |       sys.path.insert(0, str(repo_root / "ai_trading" / "market"))
49 | /     from symbol_specs import get_symbol_spec, get_tick_size, get_lot_size
50 | |     from decimal import Decimal
   | |_______________________________^
51 |       
52 |       # Test default symbols
   |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_profit_critical.py:114:16
    |
112 |             result = test()
113 |             results.append(result)
114 |         except Exception as e:
    |                ^^^^^^^^^
115 |             logging.info(f"✗ Test {test.__name__} failed: {e}")
116 |             results.append(False)
    |

E402 Module level import not at top of file
  --> scripts/validate_runtime_hardening.py:9:1
   |
 7 | """
 8 |
 9 | import pathlib
   | ^^^^^^^^^^^^^^
10 | import re
11 | import sys
   |

E402 Module level import not at top of file
  --> scripts/validate_runtime_hardening.py:10:1
   |
 9 | import pathlib
10 | import re
   | ^^^^^^^^^
11 | import sys
12 | from datetime import UTC
   |

E402 Module level import not at top of file
  --> scripts/validate_runtime_hardening.py:11:1
   |
 9 | import pathlib
10 | import re
11 | import sys
   | ^^^^^^^^^^
12 | from datetime import UTC
   |

E402 Module level import not at top of file
  --> scripts/validate_runtime_hardening.py:12:1
   |
10 | import re
11 | import sys
12 | from datetime import UTC
   | ^^^^^^^^^^^^^^^^^^^^^^^^
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_runtime_hardening.py:162:16
    |
160 |             else:
161 |                 failed += 1
162 |         except Exception as e:
    |                ^^^^^^^^^
163 |             logging.info(f"✗ {test.__name__} failed with error: {e}")
164 |             failed += 1
    |

E402 Module level import not at top of file
  --> scripts/validate_standalone.py:9:1
   |
 7 | """
 8 |
 9 | import hashlib
   | ^^^^^^^^^^^^^^
10 | import json
11 | import os
   |

E402 Module level import not at top of file
  --> scripts/validate_standalone.py:10:1
   |
 9 | import hashlib
10 | import json
   | ^^^^^^^^^^^
11 | import os
12 | import sys
   |

E402 Module level import not at top of file
  --> scripts/validate_standalone.py:11:1
   |
 9 | import hashlib
10 | import json
11 | import os
   | ^^^^^^^^^
12 | import sys
13 | from dataclasses import dataclass
   |

E402 Module level import not at top of file
  --> scripts/validate_standalone.py:12:1
   |
10 | import json
11 | import os
12 | import sys
   | ^^^^^^^^^^
13 | from dataclasses import dataclass
14 | from datetime import UTC, datetime
   |

E402 Module level import not at top of file
  --> scripts/validate_standalone.py:13:1
   |
11 | import os
12 | import sys
13 | from dataclasses import dataclass
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 | from datetime import UTC, datetime
15 | from enum import Enum
   |

E402 Module level import not at top of file
  --> scripts/validate_standalone.py:14:1
   |
12 | import sys
13 | from dataclasses import dataclass
14 | from datetime import UTC, datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 | from enum import Enum
16 | from pathlib import Path
   |

E402 Module level import not at top of file
  --> scripts/validate_standalone.py:15:1
   |
13 | from dataclasses import dataclass
14 | from datetime import UTC, datetime
15 | from enum import Enum
   | ^^^^^^^^^^^^^^^^^^^^^
16 | from pathlib import Path
   |

E402 Module level import not at top of file
  --> scripts/validate_standalone.py:16:1
   |
14 | from datetime import UTC, datetime
15 | from enum import Enum
16 | from pathlib import Path
   | ^^^^^^^^^^^^^^^^^^^^^^^^
17 |
18 | # Set dummy environment variables to avoid config issues
   |

F841 Local variable `bins` is assigned to but never used
   --> scripts/validate_standalone.py:244:13
    |
242 |             # Create bins
243 |             bin_width = (baseline_max - baseline_min) / n_bins
244 |             bins = [baseline_min + i * bin_width for i in range(n_bins + 1)]
    |             ^^^^
245 |
246 |             # Count distributions
    |
help: Remove assignment to unused variable `bins`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_standalone.py:472:16
    |
470 |             test()
471 |             passed += 1
472 |         except Exception as e:
    |                ^^^^^^^^^
473 |             logging.info(f"  ✗ {test.__name__} failed: {e}")
474 |             failed += 1
    |

E402 Module level import not at top of file
  --> scripts/validate_startup_fixes.py:17:1
   |
15 | """
16 |
17 | import os
   | ^^^^^^^^^
18 | import sys
19 | import tempfile
   |

E402 Module level import not at top of file
  --> scripts/validate_startup_fixes.py:18:1
   |
17 | import os
18 | import sys
   | ^^^^^^^^^^
19 | import tempfile
20 | import traceback
   |

E402 Module level import not at top of file
  --> scripts/validate_startup_fixes.py:19:1
   |
17 | import os
18 | import sys
19 | import tempfile
   | ^^^^^^^^^^^^^^^
20 | import traceback
21 | from datetime import datetime, timezone
   |

E402 Module level import not at top of file
  --> scripts/validate_startup_fixes.py:20:1
   |
18 | import sys
19 | import tempfile
20 | import traceback
   | ^^^^^^^^^^^^^^^^
21 | from datetime import datetime, timezone
   |

E402 Module level import not at top of file
  --> scripts/validate_startup_fixes.py:21:1
   |
19 | import tempfile
20 | import traceback
21 | from datetime import datetime, timezone
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/validate_startup_fixes.py:33:9
   |
32 |       try:
33 | /         from ai_trading.config.management import _resolve_alpaca_env
34 | |         from ai_trading import runner
   | |_____________________________________^
35 |           logging.info("   ✓ Core modules imported without credentials")
36 |           logging.info("   ✓ No sys.exit() calls during import")
   |
help: Organize imports

F401 `ai_trading.config.management._resolve_alpaca_env` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/validate_startup_fixes.py:33:50
   |
32 |     try:
33 |         from ai_trading.config.management import _resolve_alpaca_env
   |                                                  ^^^^^^^^^^^^^^^^^^^
34 |         from ai_trading import runner
35 |         logging.info("   ✓ Core modules imported without credentials")
   |
help: Remove unused import: `ai_trading.config.management._resolve_alpaca_env`

F401 `ai_trading.runner` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/validate_startup_fixes.py:34:32
   |
32 |     try:
33 |         from ai_trading.config.management import _resolve_alpaca_env
34 |         from ai_trading import runner
   |                                ^^^^^^
35 |         logging.info("   ✓ Core modules imported without credentials")
36 |         logging.info("   ✓ No sys.exit() calls during import")
   |
help: Remove unused import: `ai_trading.runner`

BLE001 Do not catch blind exception: `Exception`
  --> scripts/validate_startup_fixes.py:45:12
   |
43 |         logging.info("   ✓ No sys.exit() crashes - this is good!")
44 |         return True
45 |     except Exception as e:
   |            ^^^^^^^^^
46 |         logging.info(f"   ✗ Unexpected error: {e}")
47 |         return False
   |

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/validate_startup_fixes.py:141:5
    |
139 |     # Load the functions into local scope
140 |     # Import functions from timefmt module instead of using exec
141 |     from ai_trading.utils.timefmt import utc_now_iso, format_datetime_utc, ensure_utc_format
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
142 |     
143 |     # Test utc_now_iso
    |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_startup_fixes.py:211:12
    |
209 |             return False
210 |             
211 |     except Exception as e:
    |            ^^^^^^^^^
212 |         logging.info(f"   ✗ Redacted logging test failed: {e}")
213 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_startup_fixes.py:235:16
    |
233 |             result = test()
234 |             results.append(result)
235 |         except Exception as e:
    |                ^^^^^^^^^
236 |             logging.info(f"   ✗ Test failed with exception: {e}")
237 |             traceback.print_exc()
    |

E402 Module level import not at top of file
  --> scripts/validate_unified_config.py:15:1
   |
13 | """
14 |
15 | import os
   | ^^^^^^^^^
16 | import sys
   |

E402 Module level import not at top of file
  --> scripts/validate_unified_config.py:16:1
   |
15 | import os
16 | import sys
   | ^^^^^^^^^^
17 |
18 | sys.path.append('.')
   |

E712 Avoid equality comparisons to `True`; use `masked['has_credentials']:` for truth checks
  --> scripts/validate_unified_config.py:48:12
   |
46 |     masked = get_masked_config()
47 |     assert "test..._123" in masked['alpaca_api_key'] or "***MASKED***" in masked['alpaca_api_key']
48 |     assert masked['has_credentials'] == True
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |     logging.info("✓ Masked config logging works")
   |
help: Replace with `masked['has_credentials']`

E712 Avoid equality comparisons to `True`; use `acquired:` for truth checks
  --> scripts/validate_unified_config.py:95:12
   |
93 |     # Test basic acquisition
94 |     acquired = limiter.acquire_sync("test_route", tokens=1, timeout=5.0)
95 |     assert acquired == True, "Should acquire tokens successfully"
   |            ^^^^^^^^^^^^^^^^
96 |     logging.info("✓ Basic token acquisition works")
   |
help: Replace with `acquired`

E712 Avoid equality comparisons to `True`; use `status["enabled"]:` for truth checks
   --> scripts/validate_unified_config.py:101:12
    |
 99 |     status = limiter.get_status("orders")
100 |     assert "available_tokens" in status, "Status should include available tokens"
101 |     assert status["enabled"] == True, "Orders route should be enabled"
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^
102 |     logging.info("✓ Rate limiter status works")
    |
help: Replace with `status["enabled"]`

E712 Avoid equality comparisons to `False`; use `not validation_report["file_exists"]:` for false checks
   --> scripts/validate_unified_config.py:150:12
    |
148 |     # Test validation
149 |     validation_report = validate_hyperparams_file("nonexistent_file.json")
150 |     assert validation_report["file_exists"] == False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
151 |     assert len(validation_report["warnings"]) > 0
152 |     logging.info("✓ Validation report works")
    |
help: Replace with `not validation_report["file_exists"]`

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_unified_config.py:164:12
    |
162 |     try:
163 |         logging.info("✓ ai_trading import works")
164 |     except Exception as e:
    |            ^^^^^^^^^
165 |         logging.info(f"✗ ai_trading import failed: {e}")
166 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_unified_config.py:170:12
    |
168 |     try:
169 |         logging.info("✓ settings_singleton import works")
170 |     except Exception as e:
    |            ^^^^^^^^^
171 |         logging.info(f"✗ settings_singleton import failed: {e}")
172 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_unified_config.py:176:12
    |
174 |     try:
175 |         logging.info("✓ Money class import works")
176 |     except Exception as e:
    |            ^^^^^^^^^
177 |         logging.info(f"✗ Money class import failed: {e}")
178 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_unified_config.py:182:12
    |
180 |     try:
181 |         logging.info("✓ rate_limit import works")
182 |     except Exception as e:
    |            ^^^^^^^^^
183 |         logging.info(f"✗ rate_limit import failed: {e}")
184 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/validate_unified_config.py:211:12
    |
209 |         return True
210 |
211 |     except Exception as e:
    |            ^^^^^^^^^
212 |         logging.info(f"❌ VALIDATION FAILED: {e}")
213 |         import traceback
    |

E402 Module level import not at top of file
  --> scripts/verify_config.py:11:1
   |
 9 | """
10 |
11 | import os
   | ^^^^^^^^^
12 | import sys
13 | from pathlib import Path
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/verify_config.py:11:1
   |
 9 |   """
10 |
11 | / import os
12 | | import sys
13 | | from pathlib import Path
14 | |
15 | | from ai_trading.config import management as config
16 | | from ai_trading.config.management import TradingConfig
   | |______________________________________________________^
17 |   CONFIG = TradingConfig()
   |
help: Organize imports

E402 Module level import not at top of file
  --> scripts/verify_config.py:12:1
   |
11 | import os
12 | import sys
   | ^^^^^^^^^^
13 | from pathlib import Path
   |

E402 Module level import not at top of file
  --> scripts/verify_config.py:13:1
   |
11 | import os
12 | import sys
13 | from pathlib import Path
   | ^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | from ai_trading.config import management as config
   |

E402 Module level import not at top of file
  --> scripts/verify_config.py:15:1
   |
13 | from pathlib import Path
14 |
15 | from ai_trading.config import management as config
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 | from ai_trading.config.management import TradingConfig
17 | CONFIG = TradingConfig()
   |

E402 Module level import not at top of file
  --> scripts/verify_config.py:16:1
   |
15 | from ai_trading.config import management as config
16 | from ai_trading.config.management import TradingConfig
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
17 | CONFIG = TradingConfig()
   |

UP015 [*] Unnecessary mode argument
  --> scripts/verify_config.py:28:29
   |
27 |     try:
28 |         with open(env_path, 'r') as f:
   |                             ^^^
29 |             content = f.read()
   |
help: Remove mode argument

BLE001 Do not catch blind exception: `Exception`
  --> scripts/verify_config.py:58:12
   |
56 |     except ImportError:
57 |         return False, "❌ python-dotenv not installed. Run: pip install python-dotenv"
58 |     except Exception as e:
   |            ^^^^^^^^^
59 |         return False, f"❌ Error reading .env file: {e}"
   |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/verify_config.py:108:12
    |
106 |     except ImportError:
107 |         return False, "❌ python-dotenv not installed. Run: pip install python-dotenv"
108 |     except Exception as e:
    |            ^^^^^^^^^
109 |         return False, f"❌ Error checking API keys: {e}"
    |

BLE001 Do not catch blind exception: `Exception`
   --> scripts/verify_config.py:127:12
    |
125 |             return False, "⚠️  Configuration imports but API keys not properly set"
126 |         
127 |     except Exception as e:
    |            ^^^^^^^^^
128 |         return False, f"❌ Error importing config: {e}"
    |

UP018 [*] Unnecessary `str` call (rewrite as a literal)
   --> scripts/verify_config.py:133:18
    |
131 |   def print_setup_instructions():
132 |       """Print setup instructions."""
133 |       logging.info(str("""
    |  __________________^
134 | | 🔧 Setup Instructions:
135 | |
136 | | 1. Get your API keys:
137 | |    → Visit: https://app.alpaca.markets/paper/dashboard/overview
138 | |    → Generate API keys (use Paper Trading for testing))
139 | |
140 | | 2. Configure your .env file:
141 | |    → Copy: cp .env.example .env
142 | |    → Edit .env and replace YOUR_* placeholders with real keys
143 | |
144 | | 3. Verify your setup:
145 | |    → Run this script again: python verify_config.py
146 | |
147 | | 📖 For detailed instructions, see: docs/API_KEY_SETUP.md
148 | | """))
    | |____^
    |
help: Replace with string literal

I001 [*] Import block is un-sorted or un-formatted
 --> tests/allocators/test_confidence_gate_env.py:1:1
  |
1 | / import logging
2 | |
3 | | from ai_trading.strategies.performance_allocator import (
4 | |     PerformanceBasedAllocator,
5 | |     AllocatorConfig,
6 | | )
  | |_^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/conftest.py:1:1
  |
1 | / import sys
2 | | import os
3 | | import datetime as dt
4 | | import pandas as pd
5 | | import pytest
6 | | import pytz
7 | | import types
  | |____________^
8 |
9 |   os.environ.setdefault("ALPACA_KEY_ID", "test_key")
  |
help: Organize imports

F401 [*] `datetime` imported but unused
 --> tests/conftest.py:3:20
  |
1 | import sys
2 | import os
3 | import datetime as dt
  |                    ^^
4 | import pandas as pd
5 | import pytest
  |
help: Remove unused import: `datetime`

F401 [*] `pandas` imported but unused
 --> tests/conftest.py:4:18
  |
2 | import os
3 | import datetime as dt
4 | import pandas as pd
  |                  ^^
5 | import pytest
6 | import pytz
  |
help: Remove unused import: `pandas`

F401 [*] `pytz` imported but unused
 --> tests/conftest.py:6:8
  |
4 | import pandas as pd
5 | import pytest
6 | import pytz
  |        ^^^^
7 | import types
  |
help: Remove unused import: `pytz`

I001 [*] Import block is un-sorted or un-formatted
  --> tests/conftest.py:43:5
   |
41 | # AI-AGENT-REF: Add hypothesis stub early
42 | try:
43 |     from hypothesis import given, settings, HealthCheck
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 | except Exception:
45 |     import types
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/conftest.py:320:5
    |
318 | # AI-AGENT-REF: Add tenacity stub for retry decorators
319 | try:
320 |     from tenacity import retry, wait_exponential, stop_after_attempt, retry_if_exception_type
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
321 | except Exception:
322 |     import types
    |
help: Organize imports

E402 Module level import not at top of file
   --> tests/conftest.py:372:1
    |
371 | sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
372 | from pathlib import Path
    | ^^^^^^^^^^^^^^^^^^^^^^^^
373 |
374 | import pytest
    |

I001 [*] Import block is un-sorted or un-formatted
   --> tests/conftest.py:372:1
    |
371 |   sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
372 | / from pathlib import Path
373 | |
374 | | import pytest
375 | | import types
    | |____________^
376 |
377 |   # AI-AGENT-REF: Add numpy stub before any imports that might need it
    |
help: Organize imports

E402 Module level import not at top of file
   --> tests/conftest.py:374:1
    |
372 | from pathlib import Path
373 |
374 | import pytest
    | ^^^^^^^^^^^^^
375 | import types
    |

E402 Module level import not at top of file
   --> tests/conftest.py:375:1
    |
374 | import pytest
375 | import types
    | ^^^^^^^^^^^^
376 |
377 | # AI-AGENT-REF: Add numpy stub before any imports that might need it
    |

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> tests/conftest.py:395:16
    |
394 |         def __sub__(self, other):
395 |             if isinstance(other, (list, ArrayStub)):
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
396 |                 return ArrayStub([a - b for a, b in zip(self, other)])
397 |             return ArrayStub([x - other for x in self])
    |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> tests/conftest.py:400:16
    |
399 |         def __truediv__(self, other):
400 |             if isinstance(other, (list, ArrayStub)):
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
401 |                 return ArrayStub([a / b if b != 0 else 0 for a, b in zip(self, other)])
402 |             return ArrayStub([x / other if other != 0 else 0 for x in self])
    |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> tests/conftest.py:445:36
    |
443 |     numpy_mod.minimum = min
444 |     numpy_mod.max = lambda x: max(x) if x else 0
445 |     numpy_mod.isscalar = lambda x: isinstance(x, (int, float, complex))
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
446 |     numpy_mod.bool_ = bool
447 |     numpy_mod.linspace = lambda start, stop, num: ArrayStub([start + (stop - start) * i / (num - 1) for i in range(num)])
    |
help: Convert to `X | Y`

I001 [*] Import block is un-sorted or un-formatted
   --> tests/conftest.py:748:13
    |
746 |         def __sub__(self, other):
747 |             # Support timestamp arithmetic for comparisons
748 |             from datetime import datetime, timezone, timedelta
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
749 |             return datetime.now(timezone.utc) - timedelta(days=1)  # Return a reasonable past time
    |
help: Organize imports

E402 Module level import not at top of file
    --> tests/conftest.py:1423:1
     |
1423 | import importlib
     | ^^^^^^^^^^^^^^^^
1424 | import types
     |

E402 Module level import not at top of file
    --> tests/conftest.py:1424:1
     |
1423 | import importlib
1424 | import types
     | ^^^^^^^^^^^^
     |

F821 Undefined name `MockTradingConfig`
    --> tests/conftest.py:1451:40
     |
1449 |             # Set the attribute on the config module instance, not the class
1450 |             if hasattr(config, '__dict__'):
1451 |                 config.TradingConfig = MockTradingConfig
     |                                        ^^^^^^^^^^^^^^^^^
1452 |             else:
1453 |                 # If config is an instance, set it as an attribute 
     |

F821 Undefined name `MockTradingConfig`
    --> tests/conftest.py:1454:50
     |
1452 |             else:
1453 |                 # If config is an instance, set it as an attribute 
1454 |                 setattr(config, 'TradingConfig', MockTradingConfig)
     |                                                  ^^^^^^^^^^^^^^^^^
1455 |     except ImportError as e:
1456 |         # AI-AGENT-REF: Log config import failure for debugging 
     |

E402 Module level import not at top of file
    --> tests/conftest.py:1577:1
     |
1576 | # AI-AGENT-REF: provide minimal 'config' stub for tests
1577 | import os as _os
     | ^^^^^^^^^^^^^^^^
1578 | import sys as _sys
1579 | import types as _types
     |

E402 Module level import not at top of file
    --> tests/conftest.py:1578:1
     |
1576 | # AI-AGENT-REF: provide minimal 'config' stub for tests
1577 | import os as _os
1578 | import sys as _sys
     | ^^^^^^^^^^^^^^^^^^
1579 | import types as _types
     |

E402 Module level import not at top of file
    --> tests/conftest.py:1579:1
     |
1577 | import os as _os
1578 | import sys as _sys
1579 | import types as _types
     | ^^^^^^^^^^^^^^^^^^^^^^
     |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/execution/test_fetch_minute_df_safe_empty.py:1:1
  |
1 | / import pandas as pd
2 | | import pytest
3 | |
4 | | from ai_trading.core.bot_engine import fetch_minute_df_safe, DataFetchError
  | |___________________________________________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/institutional/__init__.py:8:1
   |
 6 |   """
 7 |
 8 | / from .framework import (
 9 | |     MockMarketDataProvider,
10 | |     TradingScenarioRunner,
11 | |     ComplianceTestSuite
12 | | )
   | |_^
13 |
14 |   __all__ = [
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/institutional/framework.py:11:1
   |
 9 |   """
10 |
11 | / import asyncio
12 | | import time
13 | | from datetime import datetime, timezone
14 | | from typing import Dict, List, Any, Optional
15 | | import logging
16 | |
17 | | # Use the centralized logger as per AGENTS.md
18 | | from ai_trading.logging import logger
   | |_____________________________________^
   |
help: Organize imports

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> tests/institutional/framework.py:14:1
   |
12 | import time
13 | from datetime import datetime, timezone
14 | from typing import Dict, List, Any, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 | import logging
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> tests/institutional/framework.py:14:1
   |
12 | import time
13 | from datetime import datetime, timezone
14 | from typing import Dict, List, Any, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 | import logging
   |

F401 [*] `logging` imported but unused
  --> tests/institutional/framework.py:15:8
   |
13 | from datetime import datetime, timezone
14 | from typing import Dict, List, Any, Optional
15 | import logging
   |        ^^^^^^^
16 |
17 | # Use the centralized logger as per AGENTS.md
   |
help: Remove unused import: `logging`

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> tests/institutional/framework.py:28:23
   |
27 |     def __init__(self) -> None:
28 |         self._prices: Dict[str, float] = {"AAPL": 170.0}
   |                       ^^^^
29 |         self._history: Dict[str, List[float]] = {"AAPL": [168.0, 169.0, 170.0]}
   |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> tests/institutional/framework.py:29:24
   |
27 |     def __init__(self) -> None:
28 |         self._prices: Dict[str, float] = {"AAPL": 170.0}
29 |         self._history: Dict[str, List[float]] = {"AAPL": [168.0, 169.0, 170.0]}
   |                        ^^^^
30 |
31 |     def get_current_price(self, symbol: str) -> Optional[float]:
   |
help: Replace with `dict`

UP006 [*] Use `list` instead of `List` for type annotation
  --> tests/institutional/framework.py:29:34
   |
27 |     def __init__(self) -> None:
28 |         self._prices: Dict[str, float] = {"AAPL": 170.0}
29 |         self._history: Dict[str, List[float]] = {"AAPL": [168.0, 169.0, 170.0]}
   |                                  ^^^^
30 |
31 |     def get_current_price(self, symbol: str) -> Optional[float]:
   |
help: Replace with `list`

UP045 [*] Use `X | None` for type annotations
  --> tests/institutional/framework.py:31:49
   |
29 |         self._history: Dict[str, List[float]] = {"AAPL": [168.0, 169.0, 170.0]}
30 |
31 |     def get_current_price(self, symbol: str) -> Optional[float]:
   |                                                 ^^^^^^^^^^^^^^^
32 |         """Return the latest price for *symbol*."""
33 |         return self._prices.get(symbol)
   |
help: Convert to `X | None`

UP006 [*] Use `list` instead of `List` for type annotation
  --> tests/institutional/framework.py:35:49
   |
33 |         return self._prices.get(symbol)
34 |
35 |     def get_price_history(self, symbol: str) -> List[float]:
   |                                                 ^^^^
36 |         """Return recent price history for *symbol*."""
37 |         return list(self._history.get(symbol, []))
   |
help: Replace with `list`

UP006 [*] Use `dict` instead of `Dict` for type annotation
  --> tests/institutional/framework.py:61:44
   |
59 |         self.test_results = []
60 |         
61 |     async def run_end_to_end_test(self) -> Dict[str, Any]:
   |                                            ^^^^
62 |         """Run comprehensive end-to-end trading test."""
63 |         logger.info("Starting end-to-end trading test")
   |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:115:48
    |
113 |         return results
114 |     
115 |     async def run_risk_scenario_tests(self) -> Dict[str, Any]:
    |                                                ^^^^
116 |         """Run risk management scenario tests."""
117 |         logger.info("Starting risk scenario tests")
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:158:46
    |
156 |         return results
157 |     
158 |     async def run_performance_tests(self) -> Dict[str, Any]:
    |                                              ^^^^
159 |         """Run performance and latency tests."""
160 |         logger.info("Starting performance tests")
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:208:45
    |
207 |     # Individual test scenarios
208 |     async def _test_initialization(self) -> Dict[str, Any]:
    |                                             ^^^^
209 |         """Test system initialization."""
210 |         if self.execution_engine:
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:222:43
    |
220 |             }
221 |     
222 |     async def _test_market_order(self) -> Dict[str, Any]:
    |                                           ^^^^
223 |         """Test market order execution."""
224 |         if not self.execution_engine:
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:237:42
    |
235 |             return {"status": "failed", "error": str(e)}
236 |     
237 |     async def _test_limit_order(self) -> Dict[str, Any]:
    |                                          ^^^^
238 |         """Test limit order execution."""
239 |         if not self.execution_engine:
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:255:49
    |
253 |             return {"status": "failed", "error": str(e)}
254 |     
255 |     async def _test_order_cancellation(self) -> Dict[str, Any]:
    |                                                 ^^^^
256 |         """Test order cancellation."""
257 |         if not self.execution_engine:
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:277:46
    |
275 |             return {"status": "failed", "error": str(e)}
276 |     
277 |     async def _test_multiple_orders(self) -> Dict[str, Any]:
    |                                              ^^^^
278 |         """Test multiple simultaneous orders."""
279 |         if not self.execution_engine:
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:299:45
    |
297 |             return {"status": "failed", "error": str(e)}
298 |     
299 |     async def _test_error_handling(self) -> Dict[str, Any]:
    |                                             ^^^^
300 |         """Test error handling with invalid orders."""
301 |         if not self.execution_engine:
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:323:46
    |
321 |             return {"status": "failed", "error": str(e)}
322 |     
323 |     async def _test_circuit_breaker(self) -> Dict[str, Any]:
    |                                              ^^^^
324 |         """Test circuit breaker functionality."""
325 |         if not self.execution_engine:
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:344:46
    |
343 |     # Risk scenario tests
344 |     async def _test_position_sizing(self) -> Dict[str, Any]:
    |                                              ^^^^
345 |         """Test position sizing logic."""
346 |         # Mock position sizing test
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:352:43
    |
350 |         }
351 |     
352 |     async def _test_max_drawdown(self) -> Dict[str, Any]:
    |                                           ^^^^
353 |         """Test maximum drawdown limits."""
354 |         return {
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:359:46
    |
357 |         }
358 |     
359 |     async def _test_sector_exposure(self) -> Dict[str, Any]:
    |                                              ^^^^
360 |         """Test sector exposure limits."""
361 |         return {
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:366:46
    |
364 |         }
365 |     
366 |     async def _test_leverage_limits(self) -> Dict[str, Any]:
    |                                              ^^^^
367 |         """Test leverage limit enforcement."""
368 |         return {
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:373:52
    |
371 |         }
372 |     
373 |     async def _test_volatility_adjustment(self) -> Dict[str, Any]:
    |                                                    ^^^^
374 |         """Test volatility-based position adjustment."""
375 |         return {
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:393:45
    |
391 |         self.test_results = []
392 |     
393 |     async def run_compliance_tests(self) -> Dict[str, Any]:
    |                                             ^^^^
394 |         """Run full compliance test suite."""
395 |         logger.info("Starting compliance tests")
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:436:42
    |
434 |         return results
435 |     
436 |     async def _test_audit_trail(self) -> Dict[str, Any]:
    |                                          ^^^^
437 |         """Test audit trail completeness."""
438 |         return {
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:443:44
    |
441 |         }
442 |     
443 |     async def _test_trade_logging(self) -> Dict[str, Any]:
    |                                            ^^^^
444 |         """Test trade logging compliance."""
445 |         return {
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:450:42
    |
448 |         }
449 |     
450 |     async def _test_risk_limits(self) -> Dict[str, Any]:
    |                                          ^^^^
451 |         """Test risk limit enforcement."""
452 |         return {
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:457:47
    |
455 |         }
456 |     
457 |     async def _test_order_validation(self) -> Dict[str, Any]:
    |                                               ^^^^
458 |         """Test order validation compliance."""
459 |         return {
    |
help: Replace with `dict`

UP006 [*] Use `dict` instead of `Dict` for type annotation
   --> tests/institutional/framework.py:464:45
    |
462 |         }
463 |     
464 |     async def _test_data_retention(self) -> Dict[str, Any]:
    |                                             ^^^^
465 |         """Test data retention compliance."""
466 |         return {
    |
help: Replace with `dict`

I001 [*] Import block is un-sorted or un-formatted
  --> tests/institutional/test_live_trading.py:8:1
   |
 6 |   """
 7 |
 8 | / import pytest
 9 | | import asyncio
10 | | import os
11 | | import datetime as dt
12 | | import pytz
   | |___________^
13 |
14 |   # Set test environment
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/institutional/test_live_trading.py:18:1
   |
16 |   pytest.importorskip('alpaca_trade_api', reason='alpaca not installed')
17 |
18 | / from .framework import (
19 | |     MockMarketDataProvider,
20 | |     TradingScenarioRunner,
21 | |     ComplianceTestSuite
22 | | )
23 | |
24 | | from ai_trading.execution.live_trading import AlpacaExecutionEngine
   | |___________________________________________________________________^
   |
help: Organize imports

F841 Local variable `invalid_result` is assigned to but never used
   --> tests/institutional/test_live_trading.py:165:9
    |
164 |         # Test invalid symbol
165 |         invalid_result = execution_engine.submit_market_order("INVALID_SYMBOL", "buy", 100)
    |         ^^^^^^^^^^^^^^
166 |         # Should handle gracefully (may succeed in mock environment)
    |
help: Remove assignment to unused variable `invalid_result`

F841 Local variable `zero_qty_result` is assigned to but never used
   --> tests/institutional/test_live_trading.py:169:9
    |
168 |         # Test invalid quantity
169 |         zero_qty_result = execution_engine.submit_market_order("AAPL", "buy", 0)
    |         ^^^^^^^^^^^^^^^
170 |         # Should handle gracefully
    |
help: Remove assignment to unused variable `zero_qty_result`

F841 Local variable `invalid_side_result` is assigned to but never used
   --> tests/institutional/test_live_trading.py:174:13
    |
172 |         # Test invalid side
173 |         try:
174 |             invalid_side_result = execution_engine.submit_market_order("AAPL", "invalid_side", 100)
    |             ^^^^^^^^^^^^^^^^^^^
175 |             # Should handle gracefully
176 |         except Exception:
    |
help: Remove assignment to unused variable `invalid_side_result`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/integration/test_regime_fallback.py:1:1
  |
1 | / import types
2 | | import pytest
  | |_____________^
3 |
4 |   try:
  |
help: Organize imports

F841 Local variable `text` is assigned to but never used
  --> tests/integration/test_regime_fallback.py:23:5
   |
21 |     with caplog.at_level("WARNING"):
22 |         summary = fn(ctx, ["ABC", "SPY"], min_rows=5)
23 |     text = str(summary).lower()
   |     ^^^^
24 |     # The test should verify that the function completes without crashing
25 |     # even when some symbols have no data. Both symbols may fail in test environment.
   |
help: Remove assignment to unused variable `text`

E402 Module level import not at top of file
  --> tests/mocks/alpaca_mocks.py:31:1
   |
31 | import types
   | ^^^^^^^^^^^^
   |

F821 Undefined name `MockWait`
  --> tests/mocks/tenacity_mock.py:15:12
   |
14 | def wait_exponential(*args, **kwargs):
15 |     return MockWait()
   |            ^^^^^^^^
16 |
17 | def wait_random(*args, **kwargs):
   |

F821 Undefined name `MockWait`
  --> tests/mocks/tenacity_mock.py:18:12
   |
17 | def wait_random(*args, **kwargs):
18 |     return MockWait()
   |            ^^^^^^^^
19 |
20 | def retry_if_exception_type(*args):
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/mocks/validate_critical_fix_mocks.py:3:1
  |
1 | # Extracted from scripts/validate_critical_fix.py
2 |
3 | from unittest.mock import MagicMock
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4 |
5 | class MockOrder:
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/runtime/test_exception_narrowing_df_main.py:1:1
  |
1 | / import inspect
2 | | import re
3 | | import ai_trading.data_fetcher as df_mod
4 | | import ai_trading.main as main_mod
  | |__________________________________^
  |
help: Organize imports

UP022 Prefer `capture_output` over sending `stdout` and `stderr` to `PIPE`
  --> tests/runtime/test_import_contract_cli.py:12:10
   |
11 |   def test_import_contract_ok():
12 |       cp = subprocess.run(
   |  __________^
13 | |         [sys.executable, _script_path(), "--ci", "--timeout", "2", "--modules", "sys"],
14 | |         stdout=subprocess.PIPE,
15 | |         stderr=subprocess.PIPE,
16 | |         text=True,
17 | |         check=False,
18 | |     )
   | |_____^
19 |       assert cp.returncode == 0, cp.stderr
   |
help: Replace with `capture_output` keyword argument

UP022 Prefer `capture_output` over sending `stdout` and `stderr` to `PIPE`
  --> tests/runtime/test_import_contract_cli.py:25:10
   |
23 |       env = os.environ.copy()
24 |       env["IMPORT_CONTRACT_SIMULATE_HANG"] = "1"
25 |       cp = subprocess.run(
   |  __________^
26 | |         [sys.executable, _script_path(), "--ci", "--timeout", "0.1", "--modules", "sys"],
27 | |         stdout=subprocess.PIPE,
28 | |         stderr=subprocess.PIPE,
29 | |         text=True,
30 | |         env=env,
31 | |         check=False,
32 | |     )
   | |_____^
33 |       assert cp.returncode != 0
34 |       assert "TIMEOUT" in (cp.stderr or "")
   |
help: Replace with `capture_output` keyword argument

I001 [*] Import block is un-sorted or un-formatted
 --> tests/slow/test_meta_learning_heavy.py:1:1
  |
1 | / import io
2 | | import types
3 | |
4 | | import pandas as pd
5 | | import pytest
6 | | import pydantic
  | |_______________^
7 |
8 |   try:
  |
help: Organize imports

F401 [*] `pydantic` imported but unused
 --> tests/slow/test_meta_learning_heavy.py:6:8
  |
4 | import pandas as pd
5 | import pytest
6 | import pydantic
  |        ^^^^^^^^
7 |
8 | try:
  |
help: Remove unused import: `pydantic`

I001 [*] Import block is un-sorted or un-formatted
  --> tests/slow/test_meta_learning_heavy.py:9:5
   |
 8 |   try:
 9 | /     import pydantic_settings  # noqa: F401
10 | |     from ai_trading import meta_learning
   | |________________________________________^
11 |   except Exception:
12 |       pytest.skip("pydantic v2 required", allow_module_level=True)
   |
help: Organize imports

F841 Local variable `main_mod` is assigned to but never used
  --> tests/test_additional_coverage.py:82:5
   |
80 |     sys.modules.pop("ai_trading.main", None)
81 |     sys.modules.pop("ai_trading.app", None)  # Also remove app module
82 |     main_mod = importlib.import_module("ai_trading.main")
   |     ^^^^^^^^
83 |     import ai_trading.app as app_mod
   |
help: Remove assignment to unused variable `main_mod`

F841 Local variable `module` is assigned to but never used
   --> tests/test_additional_coverage.py:286:5
    |
284 |     bot_mod.main = lambda: (_ for _ in ()).throw(SystemExit(0))
285 |     sys.modules["bot"] = bot_mod
286 |     module = runpy.run_module("runner", run_name="__main__")
    |     ^^^^^^
    |
help: Remove assignment to unused variable `module`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_advanced_features.py:2:1
  |
1 |   # Ensure repository root in path
2 | / import sys
3 | | import types
4 | | from pathlib import Path
5 | | import pytest
  | |_____________^
6 |
7 |   sys.path.insert(0, str(Path(__file__).resolve().parents[1]))
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_allocator_size_bias.py:1:1
  |
1 | / import logging
2 | |
3 | | import pytest
4 | |
5 | | from ai_trading.strategies.performance_allocator import PerformanceBasedAllocator, _resolve_conf_threshold
6 | | from ai_trading.config.management import TradingConfig
7 | | from ai_trading.config.settings import get_settings
8 | | from ai_trading.settings import get_settings as base_get_settings
  | |_________________________________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_alpaca_import.py:33:9
   |
32 |         # Check that mock classes are used
33 |         from ai_trading.core.bot_engine import TradingClient, OrderSide
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 |         assert TradingClient is not None
35 |         assert OrderSide is not None
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_alpaca_init_contract.py:1:1
  |
1 | from unittest import mock
  | ^^^^^^^^^^^^^^^^^^^^^^^^^
2 |
3 | def test_no_import_time_initialization(monkeypatch):
  |
help: Organize imports

F401 [*] `pytest` imported but unused
 --> tests/test_alpaca_timeframe_mapping.py:6:8
  |
5 | import pandas as pd
6 | import pytest
  |        ^^^^^^
7 |
8 | from ai_trading.alpaca_api import get_bars_df
  |
help: Remove unused import: `pytest`

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_alpha_quality.py:8:1
   |
 6 |   """
 7 |
 8 | / import numpy as np
 9 | | import pandas as pd
10 | | from datetime import timedelta
11 | | from unittest.mock import Mock
   | |______________________________^
12 |
13 |   # Test data labeling and splits
   |
help: Organize imports

F841 Local variable `obs` is assigned to but never used
   --> tests/test_alpha_quality.py:115:9
    |
114 |         # Test that turnover penalty is applied
115 |         obs = env.reset()
    |         ^^^
116 |         
117 |         # Make a trade (should incur turnover penalty)
    |
help: Remove assignment to unused variable `obs`

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_alpha_quality.py:139:9
    |
137 |       """Test model registry functionality."""
138 |       try:
139 | /         from ai_trading.model_registry import ModelRegistry
140 | |         import tempfile
141 | |         import os
    | |_________________^
142 |           
143 |           # Create temporary directory for testing
    |
help: Organize imports

F401 `os` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> tests/test_alpha_quality.py:141:16
    |
139 |         from ai_trading.model_registry import ModelRegistry
140 |         import tempfile
141 |         import os
    |                ^^
142 |         
143 |         # Create temporary directory for testing
    |
help: Remove unused import: `os`

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_alpha_quality.py:230:9
    |
228 |     """Test feature pipeline doesn't leak information."""
229 |     try:
230 |         from ai_trading.features.pipeline import create_feature_pipeline, validate_pipeline_no_leakage
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
231 |         
232 |         # Create synthetic data
    |
help: Organize imports

F841 Local variable `no_leakage` is assigned to but never used
   --> tests/test_alpha_quality.py:256:13
    |
254 |         # Validate no leakage
255 |         try:
256 |             no_leakage = validate_pipeline_no_leakage(pipeline, X_train, X_test)
    |             ^^^^^^^^^^
257 |             # The test should pass (no obvious leakage)
258 |             print("✓ Feature pipeline leakage test passed")
    |
help: Remove assignment to unused variable `no_leakage`

F841 Local variable `evaluator` is assigned to but never used
  --> tests/test_artifacts_directories.py:21:13
   |
19 |             from ai_trading.evaluation.walkforward import WalkForwardEvaluator
20 |             
21 |             evaluator = WalkForwardEvaluator()
   |             ^^^^^^^^^
22 |             
23 |             # Check that directory was created
   |
help: Remove assignment to unused variable `evaluator`

F841 Local variable `registry` is assigned to but never used
  --> tests/test_artifacts_directories.py:45:13
   |
43 |             from ai_trading.model_registry import ModelRegistry
44 |             
45 |             registry = ModelRegistry()
   |             ^^^^^^^^
46 |             
47 |             # Check that directory was created
   |
help: Remove assignment to unused variable `registry`

UP015 [*] Unnecessary mode argument
  --> tests/test_audit_column_fix.py:59:21
   |
58 |     # Read and validate CSV structure
59 |     with open(path, 'r') as f:
   |                     ^^^
60 |         reader = csv.DictReader(f)
61 |         headers = reader.fieldnames
   |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
   --> tests/test_audit_column_fix.py:111:21
    |
110 |     # Validate no UUIDs in symbol columns
111 |     with open(path, 'r') as f:
    |                     ^^^
112 |         reader = csv.DictReader(f)
113 |         rows = list(reader)
    |
help: Remove mode argument

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_bars_fallback.py:1:1
  |
1 | / import pandas as pd
2 | | from ai_trading.data.bars import _resample_minutes_to_daily
  | |___________________________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_batch_and_warmup.py:1:1
  |
1 | / import pytest
2 | | from datetime import datetime, timedelta, timezone
  | |__________________________________________________^
3 |   try:
4 |       from ai_trading.data_fetcher import get_bars_batch, warmup_cache
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_batch_paths.py:1:1
  |
1 | / import types
2 | | import pandas as pd
3 | | import ai_trading.core.bot_engine as be
4 | | import ai_trading.trade_logic as tl
  | |___________________________________^
5 |
6 |   def _mk_df():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_benchmarks.py:1:1
  |
1 | / import pandas as pd
2 | | import numpy as np
3 | | import inspect
4 | | from ai_trading import signals
5 | | from ai_trading import indicators
6 | | import pytest
  | |_____________^
7 |
8 |   df = pd.DataFrame({
  |
help: Organize imports

E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
  --> tests/test_benchmarks.py:38:12
   |
36 |             continue
37 |         # skip if explicitly takes str, not intended for DataFrames
38 |         if required_positional[0].annotation == str:
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
39 |             print(f"Skipping {module.__name__}.{name}: expects str arg.")
40 |             continue
   |

E402 Module level import not at top of file
   --> tests/test_bot.py:202:1
    |
200 |     sys.modules["pandas_ta"].vwap = lambda *a, **k: pd.Series([0])
201 |
202 | from ai_trading.core import bot_engine as bot
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_bot_engine_imports.py:4:1
  |
2 |   Tests for bot engine import fallback functionality.
3 |   """
4 | / import sys
5 | | from unittest.mock import patch, MagicMock
6 | |
7 | | import pytest
  | |_____________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_bot_engine_unit.py:1:1
   |
 1 | / import numpy as np
 2 | | import pandas as pd
 3 | | import pytest
 4 | | import joblib
 5 | | import logging
 6 | | import types
 7 | |
 8 | | # AI-AGENT-REF: Replaced unsafe _raise_dynamic_exec_disabled() with proper imports from core module
 9 | | from ai_trading.core.bot_engine import (
10 | |     initialize_bot,
11 | |     run_trading_cycle,
12 | |     generate_signals,
13 | |     execute_trades,
14 | |     load_model,
15 | |     health_check,
16 | |     EnsembleModel,
17 | | )
   | |_^
   |
help: Organize imports

F401 [*] `numpy` imported but unused
 --> tests/test_bot_engine_unit.py:1:17
  |
1 | import numpy as np
  |                 ^^
2 | import pandas as pd
3 | import pytest
  |
help: Remove unused import: `numpy`

F401 [*] `logging` imported but unused
 --> tests/test_bot_engine_unit.py:5:8
  |
3 | import pytest
4 | import joblib
5 | import logging
  |        ^^^^^^^
6 | import types
  |
help: Remove unused import: `logging`

F401 [*] `ai_trading.core.bot_engine.EnsembleModel` imported but unused
  --> tests/test_bot_engine_unit.py:16:5
   |
14 |     load_model,
15 |     health_check,
16 |     EnsembleModel,
   |     ^^^^^^^^^^^^^
17 | )
   |
help: Remove unused import: `ai_trading.core.bot_engine.EnsembleModel`

E402 Module level import not at top of file
   --> tests/test_bot_extended.py:201:1
    |
199 | sys.modules["pybreaker"].CircuitBreaker = _DummyBreaker
200 |
201 | from ai_trading.core import bot_engine as bot
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_broker_alpaca_adapter.py:1:1
  |
1 | / from ai_trading.broker.alpaca import AlpacaBroker
2 | | import pytest
  | |_____________^
3 |
4 |   # Fake “new” and “old” clients that expose just enough to be called.
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_centralized_config.py:9:1
   |
 7 |   """
 8 |
 9 | / import os
10 | | import pytest
   | |_____________^
11 |   os.environ["TESTING"] = "1"
   |
help: Organize imports

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> tests/test_centralized_config.py:252:12
    |
250 |     cfg = TradingConfig.from_env("balanced")
251 |     assert hasattr(cfg, "max_drawdown_threshold"), "TradingConfig missing max_drawdown_threshold"
252 |     assert isinstance(cfg.max_drawdown_threshold, (int, float))
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
253 |     assert 0 <= cfg.max_drawdown_threshold <= 1, "max_drawdown_threshold should be a fraction (0..1)"
    |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> tests/test_centralized_config.py:264:12
    |
262 |     assert "capital_cap" in data, "to_dict() missing capital_cap"
263 |     assert "max_drawdown_threshold" in data, "to_dict() missing max_drawdown_threshold"
264 |     assert isinstance(data["capital_cap"], (int, float))
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
265 |     assert isinstance(data["max_drawdown_threshold"], (int, float))
    |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> tests/test_centralized_config.py:265:12
    |
263 |     assert "max_drawdown_threshold" in data, "to_dict() missing max_drawdown_threshold"
264 |     assert isinstance(data["capital_cap"], (int, float))
265 |     assert isinstance(data["max_drawdown_threshold"], (int, float))
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: Convert to `X | Y`

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_centralized_config.py:308:5
    |
306 |   def test_botmode_init_uses_fallback_when_method_missing(monkeypatch):
307 |       """BotMode should not error if config lacks legacy method."""  # AI-AGENT-REF
308 | /     from ai_trading.core import bot_engine
309 | |     from ai_trading.config import management as config
    | |______________________________________________________^
310 |
311 |       class BareCfg(config.TradingConfig):
    |
help: Organize imports

F401 [*] `sys` imported but unused
 --> tests/test_centralized_logging_no_duplicates.py:6:8
  |
4 | import logging
5 | import os
6 | import sys
  |        ^^^
7 | import threading
8 | from unittest.mock import patch
  |
help: Remove unused import: `sys`

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_centralized_logging_no_duplicates.py:12:5
   |
10 |   # Mock dependencies if needed for testing
11 |   try:
12 | /     from ai_trading.logging import (
13 | |         setup_logging, 
14 | |         get_logger, 
15 | |         validate_logging_setup,
16 | |         _LOGGING_CONFIGURED,
17 | |         _LOGGING_LOCK
18 | |     )
   | |_____^
19 |       CENTRALIZED_LOGGING_AVAILABLE = True
20 |   except ImportError:
   |
help: Organize imports

F401 `ai_trading.logging.get_logger` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_centralized_logging_no_duplicates.py:14:9
   |
12 |     from ai_trading.logging import (
13 |         setup_logging, 
14 |         get_logger, 
   |         ^^^^^^^^^^
15 |         validate_logging_setup,
16 |         _LOGGING_CONFIGURED,
   |
help: Remove unused import

F401 `ai_trading.logging._LOGGING_CONFIGURED` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_centralized_logging_no_duplicates.py:16:9
   |
14 |         get_logger, 
15 |         validate_logging_setup,
16 |         _LOGGING_CONFIGURED,
   |         ^^^^^^^^^^^^^^^^^^^
17 |         _LOGGING_LOCK
18 |     )
   |
help: Remove unused import

F401 `ai_trading.logging._LOGGING_LOCK` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_centralized_logging_no_duplicates.py:17:9
   |
15 |         validate_logging_setup,
16 |         _LOGGING_CONFIGURED,
17 |         _LOGGING_LOCK
   |         ^^^^^^^^^^^^^
18 |     )
19 |     CENTRALIZED_LOGGING_AVAILABLE = True
   |
help: Remove unused import

F401 `logging_config` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_centralized_logging_no_duplicates.py:79:16
   |
77 |     # Test that logging_config cannot be imported
78 |     try:
79 |         import logging_config
   |                ^^^^^^^^^^^^^^
80 |         assert False, "logging_config should not be importable after removal"
81 |     except ImportError:
   |
help: Remove unused import: `logging_config`

F401 `logger` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_centralized_logging_no_duplicates.py:86:16
   |
84 |     # Test that logger cannot be imported
85 |     try:
86 |         import logger
   |                ^^^^^^
87 |         assert False, "logger should not be importable after removal"
88 |     except ImportError:
   |
help: Remove unused import: `logger`

F841 Local variable `logger` is assigned to but never used
   --> tests/test_centralized_logging_no_duplicates.py:112:17
    |
110 |                 'ALPACA_BASE_URL': 'https://paper-api.alpaca.markets'
111 |             }):
112 |                 logger = setup_logging(debug=True)
    |                 ^^^^^^
113 |                 results.append(len(logging.getLogger().handlers))
114 |         except Exception as e:
    |
help: Remove assignment to unused variable `logger`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_config_deadlock_fix.py:3:1
  |
1 |   """Tests for configuration validation deadlock fix."""
2 |
3 | / import threading
4 | | import time
5 | | import os
6 | | import pytest
7 | | from unittest.mock import patch
8 | |
9 | | import ai_trading.config as config
  | |__________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_config_exports.py:3:1
  |
1 |   # tests/test_config_exports.py
2 |
3 | / import importlib
4 | | import types
  | |____________^
5 |
6 |   def test_lazy_exports_resolve():
  |
help: Organize imports

F401 [*] `types` imported but unused
 --> tests/test_config_exports.py:4:8
  |
3 | import importlib
4 | import types
  |        ^^^^^
5 |
6 | def test_lazy_exports_resolve():
  |
help: Remove unused import: `types`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_config_validation_max_position_size.py:1:1
  |
1 | / from __future__ import annotations
2 | |
3 | | from types import SimpleNamespace
4 | | import logging
5 | |
6 | | import ai_trading.main as main
  | |______________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_core_init_fix.py:7:1
   |
 5 |   problem statement has been resolved by adding the missing __init__.py file.
 6 |   """
 7 | / import sys
 8 | | import os
   | |_________^
 9 |
10 |   # Add project root to path
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_core_init_fix.py:40:9
   |
38 |           """Test the exact imports that were failing in the problem statement."""
39 |           # This is the exact import pattern that was failing before the fix
40 | /         from ai_trading.core import (
41 | |             OrderSide, OrderType, OrderStatus, RiskLevel,
42 | |             TRADING_CONSTANTS
43 | |         )
   | |_________^
44 |           
45 |           # Verify the imports work correctly
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_coverage_hack.py:1:1
  |
1 | / import pathlib
2 | | import logging
  | |______________^
3 |
4 |   logger = logging.getLogger(__name__)
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_fixes.py:11:1
   |
 9 |   """
10 |
11 | / import pandas as pd
12 | | from datetime import datetime, timedelta, timezone
13 | | import os
14 | | import tempfile
15 | | from unittest.mock import Mock, patch
   | |_____________________________________^
   |
help: Organize imports

F401 [*] `os` imported but unused
  --> tests/test_critical_fixes.py:13:8
   |
11 | import pandas as pd
12 | from datetime import datetime, timedelta, timezone
13 | import os
   |        ^^
14 | import tempfile
15 | from unittest.mock import Mock, patch
   |
help: Remove unused import: `os`

F401 [*] `tempfile` imported but unused
  --> tests/test_critical_fixes.py:14:8
   |
12 | from datetime import datetime, timedelta, timezone
13 | import os
14 | import tempfile
   |        ^^^^^^^^
15 | from unittest.mock import Mock, patch
   |
help: Remove unused import: `tempfile`

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_fixes.py:95:5
   |
93 | def test_data_validation_freshness():
94 |     """Test data validation and staleness detection."""
95 |     from ai_trading.data_validation import check_data_freshness, validate_trading_data, get_stale_symbols
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
96 |     
97 |     # Create test data with different timestamps
   |
help: Organize imports

E712 Avoid equality comparisons to `True`; use `fresh_result['is_fresh']:` for truth checks
   --> tests/test_critical_fixes.py:120:12
    |
118 |     # Test freshness check for fresh data
119 |     fresh_result = check_data_freshness(fresh_data, "AAPL", max_staleness_minutes=15)
120 |     assert fresh_result['is_fresh'] == True
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
121 |     assert fresh_result['symbol'] == "AAPL"
122 |     assert fresh_result['minutes_stale'] < 15
    |
help: Replace with `fresh_result['is_fresh']`

E712 Avoid equality comparisons to `False`; use `not stale_result['is_fresh']:` for false checks
   --> tests/test_critical_fixes.py:126:12
    |
124 |     # Test freshness check for stale data
125 |     stale_result = check_data_freshness(stale_data, "MSFT", max_staleness_minutes=15)
126 |     assert stale_result['is_fresh'] == False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
127 |     assert stale_result['symbol'] == "MSFT"
128 |     assert stale_result['minutes_stale'] > 15
    |
help: Replace with `not stale_result['is_fresh']`

E712 Avoid equality comparisons to `True`; use `validation_results['AAPL']['trading_ready']:` for truth checks
   --> tests/test_critical_fixes.py:140:12
    |
138 |     assert 'AAPL' in validation_results
139 |     assert 'MSFT' in validation_results
140 |     assert validation_results['AAPL']['trading_ready'] == True
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
141 |     assert validation_results['MSFT']['trading_ready'] == False
    |
help: Replace with `validation_results['AAPL']['trading_ready']`

E712 Avoid equality comparisons to `False`; use `not validation_results['MSFT']['trading_ready']:` for false checks
   --> tests/test_critical_fixes.py:141:12
    |
139 |     assert 'MSFT' in validation_results
140 |     assert validation_results['AAPL']['trading_ready'] == True
141 |     assert validation_results['MSFT']['trading_ready'] == False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
142 |     
143 |     # Test stale symbols detection
    |
help: Replace with `not validation_results['MSFT']['trading_ready']`

E712 Avoid equality comparisons to `True`; use `emergency_data_check(valid_data, "AAPL"):` for truth checks
   --> tests/test_critical_fixes.py:168:12
    |
167 |     # Test valid data passes
168 |     assert emergency_data_check(valid_data, "AAPL") == True
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
169 |     
170 |     # Test empty data fails
    |
help: Replace with `emergency_data_check(valid_data, "AAPL")`

E712 Avoid equality comparisons to `False`; use `not emergency_data_check(empty_data, "MSFT"):` for false checks
   --> tests/test_critical_fixes.py:171:12
    |
170 |     # Test empty data fails
171 |     assert emergency_data_check(empty_data, "MSFT") == False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: Replace with `not emergency_data_check(empty_data, "MSFT")`

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_critical_fixes.py:222:5
    |
221 |       # The important thing is that the permission handling code exists in audit.py
222 | /     import ai_trading.audit as audit  # AI-AGENT-REF: canonical import
223 | |     import inspect
    | |__________________^
224 |       
225 |       # Check that the enhanced permission handling code is present
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_fixes_focused.py:6:1
   |
 4 |   """
 5 |
 6 | / import unittest
 7 | | import sys
 8 | | import os
 9 | | import csv
10 | | import tempfile
11 | |
12 | | from tests.mocks.critical_fixes_validation_mocks import MockSignal, MockContext
   | |_______________________________________________________________________________^
13 |
14 |   # Set testing environment
   |
help: Organize imports

F841 Local variable `original_result` is assigned to but never used
   --> tests/test_critical_fixes_focused.py:227:5
    |
226 |     # Original logic would return 0
227 |     original_result = 0 if liquidity_factor < 0.2 else 1
    |     ^^^^^^^^^^^^^^^
228 |     
229 |     # Fixed logic - allow minimum position with sufficient cash
    |
help: Remove assignment to unused variable `original_result`

F821 Undefined name `test_timestamp_format_includes_timezone`
   --> tests/test_critical_fixes_focused.py:294:5
    |
293 | if __name__ == "__main__":
294 |     test_timestamp_format_includes_timezone()
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
295 |     test_position_sizing_minimum_viable()
296 |     test_meta_learning_price_conversion()
    |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_fixes_implementation.py:7:1
   |
 5 |   """
 6 |
 7 | / import pandas as pd
 8 | | import threading
 9 | | from unittest.mock import Mock, patch
10 | | import sys
11 | | import os
   | |_________^
12 |
13 |   # Set up test environment variables first
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_fixes_implementation.py:28:5
   |
26 |   def test_metrics_division_by_zero_protection():
27 |       """Test metrics module handles division by zero properly."""
28 | /     from ai_trading.metrics import (
29 | |         compute_basic_metrics,
30 | |         safe_divide,
31 | |         calculate_atr,
32 | |     )
   | |_____^
33 |       
34 |       # Test with empty data
   |
help: Organize imports

F841 Local variable `original_cache` is assigned to but never used
   --> tests/test_critical_fixes_implementation.py:100:5
    |
 99 |     # Test cache bounds
100 |     original_cache = predict._sentiment_cache
    |     ^^^^^^^^^^^^^^
101 |     
102 |     # If TTLCache is available, test it
    |
help: Remove assignment to unused variable `original_cache`

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_critical_fixes_implementation.py:151:5
    |
149 |       """Test incremental indicator calculations."""
150 |       sys.path.append('ai_trading')
151 | /     from ai_trading.indicator_manager import (
152 | |         IncrementalSMA,
153 | |         IncrementalEMA,
154 | |         IncrementalRSI,
155 | |     )
    | |_____^
156 |       
157 |       # Test SMA
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_critical_fixes_implementation.py:254:5
    |
252 |     """Test dependency injection container."""
253 |     sys.path.append('ai_trading')
254 |     from core.interfaces import SimpleDependencyContainer, IConfigManager
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
255 |     
256 |     container = SimpleDependencyContainer()
    |
help: Organize imports

F821 Undefined name `MockConfigManager`
   --> tests/test_critical_fixes_implementation.py:260:40
    |
258 |     # Mock implementation
259 |     # Register implementation
260 |     container.register(IConfigManager, MockConfigManager)
    |                                        ^^^^^^^^^^^^^^^^^
261 |     
262 |     # Resolve implementation
    |

F821 Undefined name `MockConfigManager`
   --> tests/test_critical_fixes_implementation.py:264:39
    |
262 |     # Resolve implementation
263 |     config_manager = container.resolve(IConfigManager)
264 |     assert isinstance(config_manager, MockConfigManager)
    |                                       ^^^^^^^^^^^^^^^^^
265 |     assert config_manager.get("test") == "mock_test"
    |

F821 Undefined name `MockConfigManager`
   --> tests/test_critical_fixes_implementation.py:268:40
    |
267 |     # Test singleton
268 |     container.register(IConfigManager, MockConfigManager, singleton=True)
    |                                        ^^^^^^^^^^^^^^^^^
269 |     instance1 = container.resolve(IConfigManager)
270 |     instance2 = container.resolve(IConfigManager)
    |

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> tests/test_critical_fixes_validation.py:153:25
    |
151 |                 if (
152 |                     cached_data
153 |                     and isinstance(cached_data, (list, tuple))
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
154 |                     and len(cached_data) > 0
155 |                 ):
    |
help: Convert to `X | Y`

UP015 [*] Unnecessary mode argument
  --> tests/test_critical_issue_fixes.py:36:40
   |
34 |         bot_engine_path = "bot_engine.py"
35 |         if os.path.exists(bot_engine_path):
36 |             with open(bot_engine_path, 'r') as f:
   |                                        ^^^
37 |                 content = f.read()
38 |                 # Check that the default value is now 20 instead of 10
   |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
  --> tests/test_critical_issue_fixes.py:50:40
   |
48 |         bot_engine_path = "bot_engine.py"
49 |         if os.path.exists(bot_engine_path):
50 |             with open(bot_engine_path, 'r') as f:
   |                                        ^^^
51 |                 content = f.read()
52 |                 # Check that thresholds have been improved
   |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
  --> tests/test_critical_issue_fixes.py:67:45
   |
65 |         trade_execution_path = "trade_execution.py"
66 |         if os.path.exists(trade_execution_path):
67 |             with open(trade_execution_path, 'r') as f:
   |                                             ^^^
68 |                 content = f.read()
69 |                 # Check that FULL_FILL_SUCCESS now includes requested_qty
   |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
  --> tests/test_critical_issue_fixes.py:85:40
   |
83 |         bot_engine_path = "bot_engine.py"
84 |         if os.path.exists(bot_engine_path):
85 |             with open(bot_engine_path, 'r') as f:
   |                                        ^^^
86 |                 content = f.read()
87 |                 # Check that the meta-learning trigger code exists
   |
help: Remove mode argument

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_critical_issues_resolution.py:3:1
  |
1 |   """Test critical trading bot issues and their resolution."""
2 |
3 | / import logging
4 | | import os
5 | | import unittest
6 | | from datetime import datetime, timezone, timedelta
7 | | from unittest.mock import Mock
  | |______________________________^
8 |
9 |   # Set minimal environment variables for testing
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_issues_resolution.py:18:5
   |
16 |   # Import the modules we need to test
17 |   try:
18 | /     from ai_trading.execution.engine import ExecutionEngine, Order, OrderSide
19 | |     from ai_trading.math.money import Money
20 | |     from ai_trading.risk.engine import RiskEngine  # AI-AGENT-REF: normalized import
21 | |     from ai_trading.core import bot_engine
   | |__________________________________________^
22 |       HAS_FULL_IMPORTS = True
23 |   except ImportError as e:
   |
help: Organize imports

F401 `ai_trading.core.bot_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_critical_issues_resolution.py:21:33
   |
19 |     from ai_trading.math.money import Money
20 |     from ai_trading.risk.engine import RiskEngine  # AI-AGENT-REF: normalized import
21 |     from ai_trading.core import bot_engine
   |                                 ^^^^^^^^^^
22 |     HAS_FULL_IMPORTS = True
23 | except ImportError as e:
   |
help: Remove unused import: `ai_trading.core.bot_engine`

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_trading_fixes.py:13:1
   |
11 |   """
12 |
13 | / import pytest
14 | | import unittest
15 | | from unittest.mock import Mock, patch
16 | | import tempfile
17 | | import os
18 | | import csv
19 | | import time
20 | | from datetime import datetime, timezone
21 | | from pathlib import Path
22 | | import pandas as pd
   | |___________________^
23 |
24 |   # Import modules under test
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_trading_fixes.py:29:1
   |
27 |   except Exception:  # pragma: no cover - optional torch dependency
28 |       pytest.skip("sentiment module unavailable", allow_module_level=True)
29 | / from ai_trading import meta_learning
30 | | import ai_trading.config as config
31 | | from ai_trading.broker.alpaca import AlpacaBroker
32 | | from ai_trading.execution.engine import ExecutionEngine, OrderManager
33 | | from ai_trading.monitoring.order_health_monitor import (
34 | |     _active_orders,
35 | |     _order_tracking_lock,
36 | |     OrderInfo,
37 | | )
   | |_^
   |
help: Organize imports

F401 [*] `ai_trading.execution.engine.OrderManager` imported but unused
  --> tests/test_critical_trading_fixes.py:32:58
   |
30 | import ai_trading.config as config
31 | from ai_trading.broker.alpaca import AlpacaBroker
32 | from ai_trading.execution.engine import ExecutionEngine, OrderManager
   |                                                          ^^^^^^^^^^^^
33 | from ai_trading.monitoring.order_health_monitor import (
34 |     _active_orders,
   |
help: Remove unused import: `ai_trading.execution.engine.OrderManager`

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_critical_trading_fixes.py:518:5
    |
516 |   def test_quantity_tracking_fix():
517 |       """Test the critical quantity tracking bug fix for accurate filled quantity reporting."""
518 | /     from unittest.mock import Mock
519 | |     import logging
520 | |     import io
521 | |     
522 | |     # Import trade execution module
523 | |     from ai_trading.execution.engine import ExecutionEngine
    | |___________________________________________________________^
524 |
525 |       # Create execution engine
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_critical_trading_fixes.py:625:5
    |
623 | def test_data_integrity_validation():
624 |     """Test comprehensive data integrity validation."""
625 |     from ai_trading.data_validation import validate_trade_log_integrity, monitor_real_time_data_quality
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
626 |     
627 |     # Test trade log integrity validation
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_trading_issues.py:7:1
   |
 5 |   """
 6 |
 7 | / import csv
 8 | | import os
 9 | | import tempfile
10 | | import unittest
11 | | from unittest.mock import Mock, patch, MagicMock
12 | |
13 | | import pandas as pd
   | |___________________^
14 |
15 |   # Set up minimal environment for imports
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_trading_issues.py:25:5
   |
23 |   # Import the modules we need to test
24 |   try:
25 | /     from ai_trading.core import bot_engine
26 | |     from ai_trading import meta_learning
27 | |     from ai_trading.monitoring.order_health_monitor import _order_tracking_lock
   | |_______________________________________________________________________________^
28 |   except ImportError as e:
29 |       print(f"Import error: {e}")
   |
help: Organize imports

F841 Local variable `result` is assigned to but never used
  --> tests/test_critical_trading_issues.py:88:17
   |
86 |             if hasattr(bot_engine, 'pov_submit'):
87 |                 # This would expose the quantity tracking issue
88 |                 result = bot_engine.pov_submit(self.mock_ctx, symbol, total_qty, side)
   |                 ^^^^^^
89 |                 
90 |                 # Verify that submit_order was called with sliced quantities
   |
help: Remove assignment to unused variable `result`

F841 Local variable `avg_vol` is assigned to but never used
   --> tests/test_critical_trading_issues.py:262:9
    |
261 |         # Mock volume data
262 |         avg_vol = 500000  # Good volume
    |         ^^^^^^^
263 |         
264 |         with patch.object(self.mock_ctx.data_client, 'get_stock_latest_quote', return_value=mock_quote):
    |
help: Remove assignment to unused variable `avg_vol`

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_critical_trading_issues.py:332:13
    |
330 |         """Test memory optimization module availability."""
331 |         try:
332 |             from memory_optimizer import memory_profile, optimize_memory, emergency_memory_cleanup
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
333 |             self.assertTrue(hasattr(memory_profile, '__call__'))
334 |             self.assertTrue(hasattr(optimize_memory, '__call__'))
    |
help: Organize imports

F401 [*] `pytest` imported but unused
 --> tests/test_daily_sanitization_retry.py:4:8
  |
3 | import pandas as pd
4 | import pytest
  |        ^^^^^^
5 |
6 | import ai_trading.core.bot_engine as be_mod
  |
help: Remove unused import: `pytest`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_data_cache.py:1:1
  |
1 | / import time
2 | | import pandas as pd
3 | | from ai_trading.market import cache as mcache
  | |_____________________________________________^
4 |
5 |   def test_mem_cache_ttl_basic(tmp_path):
  |
help: Organize imports

E402 Module level import not at top of file
  --> tests/test_data_fetcher.py:86:1
   |
84 | sys.modules["finnhub"].FinnhubAPIException = _DummyFinnhubException
85 |
86 | from ai_trading import data_fetcher
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

E402 Module level import not at top of file
   --> tests/test_data_fetcher.py:233:1
    |
232 | # AI-AGENT-REF: Replaced unsafe _raise_dynamic_exec_disabled() with direct import from core module
233 | from ai_trading.core.bot_engine import fetch_minute_df_safe
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_data_fetcher_fallbacks.py:1:1
  |
1 | / import pandas as pd
2 | | import datetime as dt
3 | |
4 | | from ai_trading import data_fetcher as dfetch
  | |_____________________________________________^
  |
help: Organize imports

F401 [*] `importlib` imported but unused
 --> tests/test_data_init_no_circular.py:1:8
  |
1 | import importlib
  |        ^^^^^^^^^
2 | import sys
  |
help: Remove unused import: `importlib`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_data_pipeline.py:1:1
  |
1 | / import os
2 | | import pandas as pd
3 | |
4 | | from ai_trading.features import compute_macd, compute_macds, ensure_columns
  | |___________________________________________________________________________^
  |
help: Organize imports

F401 [*] `os` imported but unused
 --> tests/test_data_pipeline.py:1:8
  |
1 | import os
  |        ^^
2 | import pandas as pd
  |
help: Remove unused import: `os`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_deprecation_warnings.py:4:1
  |
2 |   Test deprecation warnings for root module imports.
3 |   """
4 | / import warnings
5 | | import pytest
  | |_____________^
  |
help: Organize imports

F401 [*] `pytest` imported but unused
 --> tests/test_deprecation_warnings.py:5:8
  |
3 | """
4 | import warnings
5 | import pytest
  |        ^^^^^^
  |
help: Remove unused import: `pytest`

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_dual_schema_credentials.py:8:1
   |
 6 |   """
 7 |
 8 | / import pytest
 9 | | import os
10 | | from unittest.mock import patch
11 | | from ai_trading.config.management import _resolve_alpaca_env, _warn_duplicate_env_keys, validate_alpaca_credentials
   | |___________________________________________________________________________________________________________________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_ellipsis_fix.py:2:1
  |
1 |   """Test fixes for message-shortening ellipsis and risk exposure task."""
2 | / import json
3 | | import logging
4 | | import types
5 | | import unittest
6 | | from unittest.mock import Mock, patch
7 | |
8 | | import ai_trading.logging as logger_module
9 | | from ai_trading.core.bot_engine import _update_risk_engine_exposure, _get_runtime_context_or_none
  | |_________________________________________________________________________________________________^
  |
help: Organize imports

F401 [*] `types` imported but unused
 --> tests/test_ellipsis_fix.py:4:8
  |
2 | import json
3 | import logging
4 | import types
  |        ^^^^^
5 | import unittest
6 | from unittest.mock import Mock, patch
  |
help: Remove unused import: `types`

F841 Local variable `mock_log` is assigned to but never used
   --> tests/test_ellipsis_fix.py:111:62
    |
109 |         """Test risk exposure update works with valid context."""
110 |         with patch('ai_trading.core.bot_engine._get_runtime_context_or_none') as mock_get_ctx:
111 |             with patch('ai_trading.core.bot_engine._log') as mock_log:
    |                                                              ^^^^^^^^
112 |                 # Setup mock context with risk engine
113 |                 mock_context = Mock()
    |
help: Remove assignment to unused variable `mock_log`

F841 Local variable `results` is assigned to but never used
   --> tests/test_emit_once_logger.py:109:5
    |
107 |     emit_once = EmitOnceLogger(logger)
108 |     
109 |     results = []
    |     ^^^^^^^
110 |     
111 |     def emit_messages():
    |
help: Remove assignment to unused variable `results`

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_enhanced_execution_debugging.py:7:1
   |
 5 |   """
 6 |
 7 | / import unittest
 8 | | import time
 9 | | from unittest.mock import Mock
   | |______________________________^
10 |
11 |   try:
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_enhanced_execution_debugging.py:13:5
   |
11 |   try:
12 |       # Try to import the enhanced execution modules
13 | /     from ai_trading.execution.debug_tracker import (
14 | |         ExecutionDebugTracker, ExecutionPhase, OrderStatus,
15 | |         get_debug_tracker, log_signal_to_execution
16 | |     )
17 | |     from ai_trading.execution.position_reconciler import (
18 | |         PositionReconciler, PositionDiscrepancy,
19 | |         get_position_reconciler
20 | |     )
21 | |     from ai_trading.execution.pnl_attributor import (
22 | |         PnLAttributor, PnLSource, PnLEvent,
23 | |         get_pnl_attributor
24 | |     )
   | |_____^
25 |       ENHANCED_DEBUGGING_AVAILABLE = True
26 |   except ImportError:
   |
help: Organize imports

F401 `ai_trading.execution.pnl_attributor.PnLEvent` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_enhanced_execution_debugging.py:22:35
   |
20 |     )
21 |     from ai_trading.execution.pnl_attributor import (
22 |         PnLAttributor, PnLSource, PnLEvent,
   |                                   ^^^^^^^^
23 |         get_pnl_attributor
24 |     )
   |
help: Remove unused import: `ai_trading.execution.pnl_attributor.PnLEvent`

F841 Local variable `symbol` is assigned to but never used
   --> tests/test_enhanced_execution_debugging.py:253:9
    |
251 |     def test_discrepancy_classification(self):
252 |         """Test different types of discrepancy classification."""
253 |         symbol = "TEST"
    |         ^^^^^^
254 |         
255 |         # Test missing position (bot=0, broker=100)
    |
help: Remove assignment to unused variable `symbol`

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_enhanced_execution_debugging.py:469:9
    |
468 |         # Simulate trade execution phases
469 |         from ai_trading.execution.debug_tracker import log_execution_phase, ExecutionPhase
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
470 |         
471 |         log_execution_phase(correlation_id, ExecutionPhase.RISK_CHECK, {'risk_score': 0.2})
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_ensure_utc.py:1:1
  |
1 | / from datetime import datetime, date, timezone
2 | |
3 | | import pytest
4 | |
5 | | from ai_trading.data.timeutils import ensure_utc_datetime
  | |_________________________________________________________^
  |
help: Organize imports

E712 Avoid equality comparisons to `False`; use `not config.DISABLE_DAILY_RETRAIN:` for false checks
  --> tests/test_env_flags.py:58:12
   |
57 |     # Should default to False
58 |     assert config.DISABLE_DAILY_RETRAIN == False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
59 |     
60 |     # Clean up
   |
help: Replace with `not config.DISABLE_DAILY_RETRAIN`

E712 Avoid equality comparisons to `True`; use `fallback.DISABLE_DAILY_RETRAIN:` for truth checks
  --> tests/test_env_flags.py:78:12
   |
76 |     # Check that fallback settings work
77 |     fallback = config._FallbackSettings()
78 |     assert fallback.DISABLE_DAILY_RETRAIN == True
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
79 |     
80 |     os.environ["DISABLE_DAILY_RETRAIN"] = "false"
   |
help: Replace with `fallback.DISABLE_DAILY_RETRAIN`

E712 Avoid equality comparisons to `False`; use `not fallback2.DISABLE_DAILY_RETRAIN:` for false checks
  --> tests/test_env_flags.py:82:12
   |
80 |     os.environ["DISABLE_DAILY_RETRAIN"] = "false"
81 |     fallback2 = config._FallbackSettings()
82 |     assert fallback2.DISABLE_DAILY_RETRAIN == False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Replace with `not fallback2.DISABLE_DAILY_RETRAIN`

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_env_order_and_lazy_import.py:8:1
   |
 6 |   """
 7 |
 8 | / import pytest
 9 | | import os
10 | | import tempfile
11 | | from unittest.mock import patch, MagicMock
   | |__________________________________________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_equity_curve.py:1:1
  |
1 | import pandas as pd
  | ^^^^^^^^^^^^^^^^^^^
2 |
3 | def test_equity_curve_monotonic():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_execution_classes.py:9:1
   |
 8 |   # Import our new classes
 9 | / from ai_trading.execution import ExecutionResult, OrderRequest
10 | | from ai_trading.core.enums import OrderSide, OrderType
   | |______________________________________________________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_fallback_concurrency.py:1:1
  |
1 | / import types
2 | | import pandas as pd
3 | | import ai_trading.core.bot_engine as be
4 | | import threading
5 | | import time
  | |___________^
6 |
7 |   def _mk_df():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_features.py:1:1
  |
1 | / import sys
2 | | import types
3 | | import pandas as pd
4 | | import pytest
5 | | from ai_trading.features import build_features_pipeline
  | |_______________________________________________________^
6 |
7 |   dotenv_stub = types.ModuleType("dotenv")
  |
help: Organize imports

E402 Module level import not at top of file
  --> tests/test_features.py:26:1
   |
24 | pytestmark = pytest.mark.usefixtures("default_env", "features_env")
25 |
26 | import pytest
   | ^^^^^^^^^^^^^
27 |
28 | @pytest.fixture(autouse=True)
   |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_features.py:26:1
   |
24 | pytestmark = pytest.mark.usefixtures("default_env", "features_env")
25 |
26 | import pytest
   | ^^^^^^^^^^^^^
27 |
28 | @pytest.fixture(autouse=True)
   |
help: Organize imports

F841 Local variable `ctx` is assigned to but never used
  --> tests/test_fetch_and_screen.py:32:5
   |
30 |     monkeypatch.setitem(sys.modules, "pandas_ta", mock_module)
31 |
32 |     ctx = types.SimpleNamespace(data_fetcher=data_fetcher)
   |     ^^^
33 |     result = data_fetcher.get_minute_df("AAPL", dt.date.today(), dt.date.today())
34 |     if result is None:
   |
help: Remove assignment to unused variable `ctx`

E402 Module level import not at top of file
  --> tests/test_fetch_contract.py:15:1
   |
13 | sys.modules["dotenv"] = dotenv_stub
14 |
15 | from ai_trading import data_fetcher
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

E401 [*] Multiple imports on one line
 --> tests/test_fetch_sample_universe_cli.py:1:1
  |
1 | import importlib.util, pathlib
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2 |
3 | spec = importlib.util.spec_from_file_location(
  |
help: Split imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_fetch_sample_universe_cli.py:1:1
  |
1 | import importlib.util, pathlib
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2 |
3 | spec = importlib.util.spec_from_file_location(
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_fill_rate_calculation_fix.py:3:1
  |
1 |   """Test fill rate calculation fixes and alert thresholds."""
2 |
3 | / import pytest
4 | | import os
5 | | from unittest.mock import MagicMock, patch
  | |__________________________________________^
6 |
7 |   # Ensure test environment
  |
help: Organize imports

F401 [*] `unittest.mock.MagicMock` imported but unused
 --> tests/test_fill_rate_calculation_fix.py:5:27
  |
3 | import pytest
4 | import os
5 | from unittest.mock import MagicMock, patch
  |                           ^^^^^^^^^
6 |
7 | # Ensure test environment
  |
help: Remove unused import: `unittest.mock.MagicMock`

F821 Undefined name `MockContext`
  --> tests/test_fill_rate_calculation_fix.py:26:11
   |
24 |     """Test that fill rate calculation now works correctly when order.filled_qty is None."""
25 |     
26 |     ctx = MockContext()
   |           ^^^^^^^^^^^
27 |     engine = ExecutionEngine(ctx)
   |

F821 Undefined name `MockOrder`
  --> tests/test_fill_rate_calculation_fix.py:32:36
   |
31 |         # Test Case: Order with filled_qty=None (the bug condition that was fixed)
32 |         order_without_filled_qty = MockOrder(filled_qty=None)
   |                                    ^^^^^^^^^
33 |         
34 |         engine._reconcile_partial_fills(
   |

F821 Undefined name `MockContext`
  --> tests/test_fill_rate_calculation_fix.py:58:11
   |
56 |     """Test that fill rate alert thresholds are now more realistic for market conditions."""
57 |     
58 |     ctx = MockContext()
   |           ^^^^^^^^^^^
59 |     engine = ExecutionEngine(ctx)
   |

F821 Undefined name `MockOrder`
  --> tests/test_fill_rate_calculation_fix.py:64:23
   |
63 |         # Test 50% fill rate - should NOT trigger any error alerts now
64 |         order_50pct = MockOrder(filled_qty=25)
   |                       ^^^^^^^^^
65 |         
66 |         engine._reconcile_partial_fills(
   |

F821 Undefined name `MockOrder`
  --> tests/test_fill_rate_calculation_fix.py:81:23
   |
79 |         # Test 30% fill rate - should trigger moderate warning but not error
80 |         mock_logger.reset_mock()
81 |         order_30pct = MockOrder(filled_qty=15)
   |                       ^^^^^^^^^
82 |         
83 |         engine._reconcile_partial_fills(
   |

F821 Undefined name `MockOrder`
   --> tests/test_fill_rate_calculation_fix.py:98:23
    |
 96 |         # Test 20% fill rate - should now trigger error-level alert
 97 |         mock_logger.reset_mock() 
 98 |         order_20pct = MockOrder(filled_qty=10)
    |                       ^^^^^^^^^
 99 |         
100 |         engine._reconcile_partial_fills(
    |

F821 Undefined name `MockContext`
   --> tests/test_fill_rate_calculation_fix.py:118:11
    |
116 |     """Test that fill rate calculation still works when order.filled_qty is properly set."""
117 |     
118 |     ctx = MockContext()
    |           ^^^^^^^^^^^
119 |     engine = ExecutionEngine(ctx)
    |

F821 Undefined name `MockOrder`
   --> tests/test_fill_rate_calculation_fix.py:124:33
    |
123 |         # Test Case: Order with valid filled_qty
124 |         order_with_filled_qty = MockOrder(filled_qty=75)  # 75 out of 100 requested
    |                                 ^^^^^^^^^
125 |         
126 |         engine._reconcile_partial_fills(
    |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_fixes.py:7:1
   |
 5 |   """
 6 |
 7 | / import os
 8 | | import sys
 9 | | import csv
10 | | from pathlib import Path
   | |________________________^
11 |
12 |   def test_tickers_csv():
   |
help: Organize imports

UP015 [*] Unnecessary mode argument
  --> tests/test_fixes.py:21:29
   |
19 |         return False
20 |     
21 |     with open(tickers_file, 'r') as f:
   |                             ^^^
22 |         reader = csv.reader(f)
23 |         tickers = [row[0].strip().upper() for row in reader if row]
   |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
   --> tests/test_fixes.py:109:36
    |
108 |     try:
109 |         with open('bot_engine.py', 'r') as f:
    |                                    ^^^
110 |             content = f.read()
    |
help: Remove mode argument

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_fixes_minimal.py:5:1
   |
 3 |   """
 4 |
 5 | / import os
 6 | | import tempfile
 7 | | from datetime import datetime, timezone, timedelta
 8 | | from unittest.mock import Mock
   | |______________________________^
 9 |
10 |   # Set minimal environment for testing
   |
help: Organize imports

F401 [*] `tempfile` imported but unused
 --> tests/test_fixes_minimal.py:6:8
  |
5 | import os
6 | import tempfile
  |        ^^^^^^^^
7 | from datetime import datetime, timezone, timedelta
8 | from unittest.mock import Mock
  |
help: Remove unused import: `tempfile`

F401 [*] `datetime.datetime` imported but unused
 --> tests/test_fixes_minimal.py:7:22
  |
5 | import os
6 | import tempfile
7 | from datetime import datetime, timezone, timedelta
  |                      ^^^^^^^^
8 | from unittest.mock import Mock
  |
help: Remove unused import

F401 [*] `datetime.timedelta` imported but unused
 --> tests/test_fixes_minimal.py:7:42
  |
5 | import os
6 | import tempfile
7 | from datetime import datetime, timezone, timedelta
  |                                          ^^^^^^^^^
8 | from unittest.mock import Mock
  |
help: Remove unused import

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_fixes_minimal.py:60:9
   |
59 |       try:
60 | /         from ai_trading.core.bot_engine import BotContext
61 | |         from datetime import timedelta, datetime
   | |________________________________________________^
62 |           
63 |           # Create minimal BotContext with mocked dependencies
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_fixes_minimal.py:151:9
    |
150 |       try:
151 | /         import ai_trading.audit as audit  # AI-AGENT-REF: canonical import
152 | |         import inspect
    | |______________________^
153 |           
154 |           # Check that log_trade function exists
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_grid_runner.py:1:1
  |
1 | / import tempfile
2 | | import json
3 | | import os
4 | | from ai_trading.backtesting.grid_runner import grid_search, persist_artifacts
  | |_____________________________________________________________________________^
5 |
6 |   def test_grid_search_basic():
  |
help: Organize imports

UP015 [*] Unnecessary mode argument
  --> tests/test_grid_runner.py:42:33
   |
40 |         assert os.path.exists(results_file)
41 |         
42 |         with open(results_file, "r") as f:
   |                                 ^^^
43 |             saved_data = json.load(f)
   |
help: Remove mode argument

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_grid_sanity.py:1:1
  |
1 | import pandas as pd
  | ^^^^^^^^^^^^^^^^^^^
2 |
3 | def test_grid_search_results():
  |
help: Organize imports

E402 Module level import not at top of file
   --> tests/test_health.py:231:1
    |
229 | # AI-AGENT-REF: Remove ai_trading.main import that causes deep torch dependency chain
230 | # from ai_trading.main import main  # Not used in this test, causes torch import issues
231 | from ai_trading.core.bot_engine import pre_trade_health_check
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_http_pooling.py:1:1
  |
1 | / from ai_trading.utils import http as H
2 | | import requests
  | |_______________^
  |
help: Organize imports

F401 [*] `requests` imported but unused
 --> tests/test_http_pooling.py:2:8
  |
1 | from ai_trading.utils import http as H
2 | import requests
  |        ^^^^^^^^
  |
help: Remove unused import: `requests`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_http_timeouts_enforced.py:1:1
  |
1 | / import pathlib
2 | | import re
  | |_________^
3 |
4 |   def test_all_requests_have_timeout():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_hyperparams.py:1:1
  |
1 | / import pytest
2 | | import os
3 | | import json
  | |___________^
4 |
5 |   @pytest.mark.skipif(not os.path.exists('best_hyperparams.json'), reason='best_hyperparams.json not present')
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_imports_no_cycle.py:1:1
  |
1 | / import ai_trading.core.bot_engine as be
2 | | import ai_trading.portfolio.core as pc
  | |______________________________________^
3 |
4 |   def test_imports():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_indicator_manager.py:1:1
  |
1 | from ai_trading.indicator_manager import IndicatorManager, IndicatorSpec
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2 |
3 | def test_indicator_manager_streaming_basic():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_initial_rebalance.py:1:1
  |
1 | / import types
2 | | import pandas as pd
3 | | import datetime
4 | | from ai_trading.core import bot_engine
  | |______________________________________^
5 |
6 |   class DummyFetcher:
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_institutional_core.py:8:1
   |
 6 |   """
 7 |
 8 | / from datetime import time
 9 | |
10 | | from ai_trading.core.enums import (
11 | |     OrderSide, OrderType, OrderStatus, RiskLevel, 
12 | |     TimeFrame, AssetClass
13 | | )
14 | | from ai_trading.core.constants import (
15 | |     TRADING_CONSTANTS, RISK_PARAMETERS,
16 | |     KELLY_PARAMETERS, EXECUTION_PARAMETERS
17 | | )
   | |_^
   |
help: Organize imports

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> tests/test_institutional_core.py:132:20
    |
130 |         for param in required_params:
131 |             assert param in risk_params
132 |             assert isinstance(risk_params[param], (int, float))
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
133 |     
134 |     def test_kelly_parameters_exist(self):
    |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> tests/test_institutional_core.py:148:20
    |
146 |         for param in required_params:
147 |             assert param in kelly_params
148 |             assert isinstance(kelly_params[param], (int, float))
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
149 |     
150 |     def test_execution_parameters_exist(self):
    |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> tests/test_institutional_core.py:164:20
    |
162 |         for param in required_params:
163 |             assert param in exec_params
164 |             assert isinstance(exec_params[param], (int, float))
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
165 |     
166 |     def test_parameter_value_ranges(self):
    |
help: Convert to `X | Y`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   --> tests/test_institutional_core.py:220:20
    |
218 |         risk_params = TRADING_CONSTANTS["RISK_PARAMETERS"]
219 |         for param_key, param_value in risk_params.items():
220 |             assert isinstance(param_value, (int, float))
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
221 |     
222 |     def test_constants_consistency(self):
    |
help: Convert to `X | Y`

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_institutional_enhancements.py:8:1
   |
 6 |   """
 7 |
 8 | / import unittest
 9 | | from unittest.mock import Mock
10 | | from datetime import datetime, timedelta, timezone
   | |__________________________________________________^
11 |
12 |   # Test adaptive position sizing
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_institutional_enhancements.py:19:13
   |
17 |           """Set up test fixtures."""
18 |           try:
19 | /             from ai_trading.risk.adaptive_sizing import (
20 | |                 MarketConditionAnalyzer, AdaptivePositionSizer, MarketRegime
21 | |             )
22 | |             from ai_trading.core.enums import RiskLevel
   | |_______________________________________________________^
23 |               
24 |               self.MarketConditionAnalyzer = MarketConditionAnalyzer
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_institutional_enhancements.py:106:13
    |
104 |           """Set up test fixtures."""
105 |           try:
106 | /             from ai_trading.risk.pre_trade_validation import (
107 | |                 PreTradeValidator, ValidationStatus, MarketHoursValidator,
108 | |                 LiquidityValidator, RiskValidator
109 | |             )
110 | |             from ai_trading.core.enums import RiskLevel
    | |_______________________________________________________^
111 |               
112 |               self.PreTradeValidator = PreTradeValidator
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_institutional_enhancements.py:219:13
    |
217 |           """Set up test fixtures."""
218 |           try:
219 | /             from ai_trading.execution.microstructure import (
220 | |                 MarketMicrostructureEngine, BidAskSpreadAnalyzer, 
221 | |                 OrderFlowAnalyzer, MarketRegimeFeature
222 | |             )
    | |_____________^
223 |               
224 |               self.MarketMicrostructureEngine = MarketMicrostructureEngine
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_institutional_enhancements.py:323:13
    |
321 |           """Set up test fixtures."""
322 |           try:
323 | /             import sys
324 | |             import os
    | |_____________________^
325 |               sys.path.append(os.path.dirname(os.path.dirname(__file__)))
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_institutional_enhancements.py:407:9
    |
405 |       def test_enhanced_rebalancer_fallback(self):
406 |           """Test that enhanced rebalancer falls back gracefully."""
407 | /         import sys
408 | |         import os
    | |_________________^
409 |           sys.path.append(os.path.dirname(os.path.dirname(__file__)))
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_institutional_enhancements.py:411:9
    |
409 |         sys.path.append(os.path.dirname(os.path.dirname(__file__)))
410 |         
411 |         from ai_trading.rebalancer import rebalance_portfolio, enhanced_maybe_rebalance
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
412 |         
413 |         # Mock context
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_institutional_kelly.py:8:1
   |
 6 |   """
 7 |
 8 | / import pytest
 9 | | from unittest.mock import patch
10 | |
11 | | from ai_trading.risk.kelly import KellyCriterion, KellyCalculator
12 | | from ai_trading.core.enums import RiskLevel
   | |___________________________________________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_integration.py:6:1
  |
4 | """
5 |
6 | import sys
  | ^^^^^^^^^^
7 | sys.path.append('.')
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_integration.py:13:5
   |
11 |       print("Testing Money Math + Execution Integration")
12 |       
13 | /     from ai_trading.execution.engine import Order
14 | |     from ai_trading.core.enums import OrderSide, OrderType
15 | |     from ai_trading.math.money import Money
   | |___________________________________________^
16 |       
17 |       # Test order creation with Money price
   |
help: Organize imports

E402 Module level import not at top of file
   --> tests/test_integration_robust.py:138:1
    |
136 | sys.modules["alpaca.trading.requests"].MarketOrderRequest = _Req
137 | sys.modules["alpaca.trading.requests"].GetOrdersRequest = _Req
138 | from enum import Enum
    | ^^^^^^^^^^^^^^^^^^^^^
139 |
140 | class _Enum(str, Enum):
    |

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_integration_robust.py:138:1
    |
136 | sys.modules["alpaca.trading.requests"].MarketOrderRequest = _Req
137 | sys.modules["alpaca.trading.requests"].GetOrdersRequest = _Req
138 | from enum import Enum
    | ^^^^^^^^^^^^^^^^^^^^^
139 |
140 | class _Enum(str, Enum):
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_integration_simple.py:7:1
  |
5 | """
6 |
7 | import os
  | ^^^^^^^^^
8 | os.environ["TESTING"] = "1"
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_integration_simple.py:10:1
   |
 8 |   os.environ["TESTING"] = "1"
 9 |
10 | / from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker
11 | | import ai_trading.config as config
   | |__________________________________^
12 |
13 |   def test_integration():
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_intelligent_position_management.py:15:1
   |
13 |   """
14 |
15 | / from unittest.mock import Mock
16 | | from dataclasses import dataclass
   | |_________________________________^
17 |
18 |   # Import the new position management components
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_intelligent_position_management.py:20:5
   |
18 |   # Import the new position management components
19 |   try:
20 | /     from ai_trading.position import (
21 | |         IntelligentPositionManager,
22 | |         MarketRegimeDetector, MarketRegime,
23 | |         TechnicalSignalAnalyzer, SignalStrength, DivergenceType,
24 | |         TrailingStopManager, TrailingStopType,
25 | |         ProfitTakingEngine, ProfitTakingStrategy,
26 | |         PortfolioCorrelationAnalyzer, ConcentrationLevel
27 | |     )
   | |_____^
28 |   except ImportError as e:
29 |       print(f"Import error: {e}")
   |
help: Organize imports

F401 `ai_trading.position.SignalStrength` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_intelligent_position_management.py:23:34
   |
21 |         IntelligentPositionManager,
22 |         MarketRegimeDetector, MarketRegime,
23 |         TechnicalSignalAnalyzer, SignalStrength, DivergenceType,
   |                                  ^^^^^^^^^^^^^^
24 |         TrailingStopManager, TrailingStopType,
25 |         ProfitTakingEngine, ProfitTakingStrategy,
   |
help: Remove unused import

F401 `ai_trading.position.DivergenceType` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_intelligent_position_management.py:23:50
   |
21 |         IntelligentPositionManager,
22 |         MarketRegimeDetector, MarketRegime,
23 |         TechnicalSignalAnalyzer, SignalStrength, DivergenceType,
   |                                                  ^^^^^^^^^^^^^^
24 |         TrailingStopManager, TrailingStopType,
25 |         ProfitTakingEngine, ProfitTakingStrategy,
   |
help: Remove unused import

F401 `ai_trading.position.TrailingStopType` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_intelligent_position_management.py:24:30
   |
22 |         MarketRegimeDetector, MarketRegime,
23 |         TechnicalSignalAnalyzer, SignalStrength, DivergenceType,
24 |         TrailingStopManager, TrailingStopType,
   |                              ^^^^^^^^^^^^^^^^
25 |         ProfitTakingEngine, ProfitTakingStrategy,
26 |         PortfolioCorrelationAnalyzer, ConcentrationLevel
   |
help: Remove unused import

F401 `ai_trading.position.ProfitTakingStrategy` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_intelligent_position_management.py:25:29
   |
23 |         TechnicalSignalAnalyzer, SignalStrength, DivergenceType,
24 |         TrailingStopManager, TrailingStopType,
25 |         ProfitTakingEngine, ProfitTakingStrategy,
   |                             ^^^^^^^^^^^^^^^^^^^^
26 |         PortfolioCorrelationAnalyzer, ConcentrationLevel
27 |     )
   |
help: Remove unused import

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_intelligent_position_management.py:36:5
   |
34 |       sys.path.append('/home/runner/work/ai-trading-bot/ai-trading-bot')
35 |       
36 | /     from ai_trading.position.intelligent_manager import IntelligentPositionManager
37 | |     from ai_trading.position.market_regime import MarketRegimeDetector, MarketRegime  
38 | |     from ai_trading.position.technical_analyzer import TechnicalSignalAnalyzer
39 | |     from ai_trading.position.trailing_stops import TrailingStopManager
40 | |     from ai_trading.position.profit_taking import ProfitTakingEngine
41 | |     from ai_trading.position.correlation_analyzer import PortfolioCorrelationAnalyzer, ConcentrationLevel
   | |_________________________________________________________________________________________________________^
   |
help: Organize imports

F821 Undefined name `MockPosition`
  --> tests/test_intelligent_position_management.py:89:20
   |
87 |         """Test the enhanced should_hold_position method."""
88 |         # Create mock position
89 |         position = MockPosition(
   |                    ^^^^^^^^^^^^
90 |             symbol='AAPL',
91 |             qty=100,
   |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:110:20
    |
108 |     def test_analyze_position_basic(self):
109 |         """Test basic position analysis."""
110 |         position = MockPosition(
    |                    ^^^^^^^^^^^^
111 |             symbol='AAPL',
112 |             qty=100,
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:236:20
    |
234 |     def test_stop_initialization(self):
235 |         """Test trailing stop initialization."""
236 |         position = MockPosition(
    |                    ^^^^^^^^^^^^
237 |             symbol='AAPL',
238 |             qty=100,
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:252:20
    |
250 |     def test_stop_movement(self):
251 |         """Test that stops move up with price for long positions."""
252 |         position = MockPosition(
    |                    ^^^^^^^^^^^^
253 |             symbol='AAPL',
254 |             qty=100,
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:272:20
    |
270 |     def test_stop_trigger_detection(self):
271 |         """Test stop trigger detection."""
272 |         position = MockPosition(
    |                    ^^^^^^^^^^^^
273 |             symbol='AAPL',
274 |             qty=100,
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:299:20
    |
297 |     def test_profit_plan_creation(self):
298 |         """Test profit plan creation."""
299 |         position = MockPosition(
    |                    ^^^^^^^^^^^^
300 |             symbol='AAPL',
301 |             qty=100,
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:319:20
    |
317 |     def test_target_triggering(self):
318 |         """Test profit target triggering."""
319 |         position = MockPosition(
    |                    ^^^^^^^^^^^^
320 |             symbol='AAPL',
321 |             qty=100,
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:348:13
    |
346 |         """Test position data extraction."""
347 |         positions = [
348 |             MockPosition('AAPL', 100, 100.0, 11000.0),
    |             ^^^^^^^^^^^^
349 |             MockPosition('MSFT', 50, 200.0, 10500.0),
350 |             MockPosition('GOOGL', 25, 150.0, 3750.0)
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:349:13
    |
347 |         positions = [
348 |             MockPosition('AAPL', 100, 100.0, 11000.0),
349 |             MockPosition('MSFT', 50, 200.0, 10500.0),
    |             ^^^^^^^^^^^^
350 |             MockPosition('GOOGL', 25, 150.0, 3750.0)
351 |         ]
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:350:13
    |
348 |             MockPosition('AAPL', 100, 100.0, 11000.0),
349 |             MockPosition('MSFT', 50, 200.0, 10500.0),
350 |             MockPosition('GOOGL', 25, 150.0, 3750.0)
    |             ^^^^^^^^^^^^
351 |         ]
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:370:13
    |
368 |         """Test concentration level analysis."""
369 |         positions = [
370 |             MockPosition('AAPL', 100, 100.0, 50000.0),  # 50% of portfolio
    |             ^^^^^^^^^^^^
371 |             MockPosition('MSFT', 50, 200.0, 25000.0),   # 25% of portfolio
372 |             MockPosition('GOOGL', 25, 150.0, 25000.0)   # 25% of portfolio
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:371:13
    |
369 |         positions = [
370 |             MockPosition('AAPL', 100, 100.0, 50000.0),  # 50% of portfolio
371 |             MockPosition('MSFT', 50, 200.0, 25000.0),   # 25% of portfolio
    |             ^^^^^^^^^^^^
372 |             MockPosition('GOOGL', 25, 150.0, 25000.0)   # 25% of portfolio
373 |         ]
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:372:13
    |
370 |             MockPosition('AAPL', 100, 100.0, 50000.0),  # 50% of portfolio
371 |             MockPosition('MSFT', 50, 200.0, 25000.0),   # 25% of portfolio
372 |             MockPosition('GOOGL', 25, 150.0, 25000.0)   # 25% of portfolio
    |             ^^^^^^^^^^^^
373 |         ]
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:392:20
    |
390 |     def test_profitable_position_scenario(self):
391 |         """Test scenario with profitable position."""
392 |         position = MockPosition(
    |                    ^^^^^^^^^^^^
393 |             symbol='AAPL',
394 |             qty=100,
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:410:20
    |
408 |     def test_loss_position_scenario(self):
409 |         """Test scenario with losing position."""
410 |         position = MockPosition(
    |                    ^^^^^^^^^^^^
411 |             symbol='AAPL',
412 |             qty=100,
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:427:13
    |
425 |         """Test portfolio-level analysis and recommendations."""
426 |         positions = [
427 |             MockPosition('AAPL', 100, 100.0, 11000.0),
    |             ^^^^^^^^^^^^
428 |             MockPosition('MSFT', 50, 200.0, 10500.0),
429 |             MockPosition('TSLA', 30, 150.0, 4800.0)
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:428:13
    |
426 |         positions = [
427 |             MockPosition('AAPL', 100, 100.0, 11000.0),
428 |             MockPosition('MSFT', 50, 200.0, 10500.0),
    |             ^^^^^^^^^^^^
429 |             MockPosition('TSLA', 30, 150.0, 4800.0)
430 |         ]
    |

F821 Undefined name `MockPosition`
   --> tests/test_intelligent_position_management.py:429:13
    |
427 |             MockPosition('AAPL', 100, 100.0, 11000.0),
428 |             MockPosition('MSFT', 50, 200.0, 10500.0),
429 |             MockPosition('TSLA', 30, 150.0, 4800.0)
    |             ^^^^^^^^^^^^
430 |         ]
    |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_json_formatter.py:1:1
  |
1 | / import json
2 | | import logging
3 | | import ai_trading.logging as logger  # Use centralized logging module
  | |___________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_json_formatter.py:43:5
   |
41 |   def test_json_formatter_serializes_nonstandard_types():
42 |       fmt = logger.JSONFormatter("%(asctime)sZ")
43 | /     import numpy as np
44 | |     from datetime import datetime, date
   | |_______________________________________^
45 |
46 |       class Foo:
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_kelly_confidence_fix.py:7:1
   |
 5 |   to valid probability ranges in the Kelly calculation.
 6 |   """
 7 | / import pytest
 8 | | import math
 9 | |
10 | | # Test the actual import and function from bot_engine
11 | | import sys
12 | | import os
   | |_________^
13 |   sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
   |
help: Organize imports

F821 Undefined name `MockBotContext`
  --> tests/test_kelly_confidence_fix.py:22:15
   |
20 |         from ai_trading.core.bot_engine import fractional_kelly_size
21 |         
22 |         ctx = MockBotContext()
   |               ^^^^^^^^^^^^^^
23 |         balance = 10000.0
24 |         price = 100.0
   |

F821 Undefined name `MockBotContext`
  --> tests/test_kelly_confidence_fix.py:75:15
   |
73 |         from ai_trading.core.bot_engine import fractional_kelly_size
74 |         
75 |         ctx = MockBotContext()
   |               ^^^^^^^^^^^^^^
76 |         
77 |         # Test invalid inputs return 0 or minimal position
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_logger.py:1:1
  |
1 | / import logging
2 | |
3 | | import pytest
4 | | from tests.conftest import reload_module
5 | |
6 | | import ai_trading.logging as logger  # Use centralized logging module
  | |___________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_logger_module.py:1:1
  |
1 | / import sys
2 | | from pathlib import Path
3 | | import logging
  | |______________^
4 |
5 |   sys.path.insert(0, str(Path(__file__).resolve().parents[1]))
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_logging_behavior.py:1:1
  |
1 | / import types
2 | | import time
3 | | import pytest
4 | |
5 | | from ai_trading import utils
6 | | from ai_trading.core import bot_engine
7 | | import ai_trading.alpaca_api as alpaca_api  # AI-AGENT-REF: canonical import
  | |__________________________________________^
8 |   try:
9 |       from ai_trading.strategies.base import TradeSignal
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_logging_behavior.py:51:5
   |
49 |       # Ensure we capture logs from the strategy_allocator module
50 |       caplog.set_level("INFO", logger="strategy_allocator")
51 | /     import importlib
52 | |     import ai_trading.strategy_allocator as strategy_allocator  # AI-AGENT-REF: normalized import
   | |______________________________________________________________^
53 |       strategy_allocator = importlib.reload(strategy_allocator)
54 |       alloc = strategy_allocator.StrategyAllocator()
   |
help: Organize imports

E402 Module level import not at top of file
  --> tests/test_main_extended2.py:19:1
   |
17 | flask_mod.jsonify = lambda *a, **k: {}
18 | sys.modules["flask"] = flask_mod
19 | import ai_trading.main as main
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
20 | import ai_trading.app as app
   |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_main_extended2.py:19:1
   |
17 |   flask_mod.jsonify = lambda *a, **k: {}
18 |   sys.modules["flask"] = flask_mod
19 | / import ai_trading.main as main
20 | | import ai_trading.app as app
   | |____________________________^
   |
help: Organize imports

E402 Module level import not at top of file
  --> tests/test_main_extended2.py:20:1
   |
18 | sys.modules["flask"] = flask_mod
19 | import ai_trading.main as main
20 | import ai_trading.app as app
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_main_smoke.py:1:1
  |
1 | / import importlib
2 | | import pytest
  | |_____________^
3 |
4 |   try:
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_meta_learning.py:1:1
  |
1 | / import types
2 | | import torch.nn as nn
3 | |
4 | | import numpy as np
5 | | import pytest
  | |_____________^
6 |
7 |   np.random.seed(0)
  |
help: Organize imports

E402 Module level import not at top of file
  --> tests/test_meta_learning.py:9:1
   |
 7 | np.random.seed(0)
 8 |
 9 | from ai_trading import meta_learning
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 | from ai_trading.meta_learning import MetaLearning
   |

E402 Module level import not at top of file
  --> tests/test_meta_learning.py:10:1
   |
 9 | from ai_trading import meta_learning
10 | from ai_trading.meta_learning import MetaLearning
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_meta_learning_additional.py:1:1
  |
1 | / import types
2 | | from pathlib import Path
3 | |
4 | | import numpy as np
5 | |
6 | | from ai_trading import meta_learning
7 | | import sklearn.linear_model
  | |___________________________^
  |
help: Organize imports

UP024 [*] Replace aliased errors with `OSError`
  --> tests/test_meta_learning_additional.py:15:15
   |
13 |     monkeypatch.setattr(meta_learning.Path, "exists", lambda self: False)
14 |     def fail(*a, **k):
15 |         raise IOError("fail")
   |               ^^^^^^^
16 |     monkeypatch.setattr(meta_learning.np, "savetxt", fail)
17 |     caplog.set_level("ERROR")
   |
help: Replace `IOError` with builtin `OSError`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_meta_learning_optional.py:1:1
  |
1 | / import importlib
2 | | import sys
3 | | from types import ModuleType
  | |____________________________^
4 |
5 |   def test_engine_imports_without_meta_learning(monkeypatch):
  |
help: Organize imports

E701 Multiple statements on one line (colon)
 --> tests/test_meta_learning_optional.py:7:31
  |
5 | def test_engine_imports_without_meta_learning(monkeypatch):
6 |     # Simulate missing module to ensure optional behavior works
7 |     class _Missing(ModuleType): pass
  |                               ^
8 |     sys.modules.pop("ai_trading.meta_learning", None)
9 |     monkeypatch.setitem(sys.modules, "ai_trading.meta_learning", _Missing("ai_trading.meta_learning"))
  |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_metalearning_strategy.py:6:1
   |
 4 |   """
 5 |
 6 | / import os
 7 | | import pandas as pd
 8 | | import numpy as np
 9 | | from datetime import datetime, timedelta, timezone
10 | | from unittest.mock import patch
   | |_______________________________^
11 |
12 |   # Set minimal environment variables to avoid config errors
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_metalearning_strategy.py:177:9
    |
175 |       def test_calculate_position_size(self):
176 |           """Test position size calculation."""
177 | /         from ai_trading.strategies.base import StrategySignal
178 | |         from ai_trading.core.enums import OrderSide
    | |___________________________________________________^
179 |           
180 |           signal = StrategySignal(
    |
help: Organize imports

F841 Local variable `original_ml` is assigned to but never used
   --> tests/test_metalearning_strategy.py:196:9
    |
194 |         """Test fallback prediction when ML is not available."""
195 |         # Temporarily disable ML
196 |         original_ml = self.strategy.__class__.__module__.replace('metalearning', 'metalearning')
    |         ^^^^^^^^^^^
197 |         
198 |         prediction = self.strategy._fallback_prediction(self.mock_data)
    |
help: Remove assignment to unused variable `original_ml`

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_metalearning_strategy.py:236:9
    |
234 |       def test_signal_validation(self):
235 |           """Test that strategy validates signals properly."""
236 | /         from ai_trading.strategies.base import StrategySignal
237 | |         from ai_trading.core.enums import OrderSide
    | |___________________________________________________^
238 |           
239 |           # Valid signal
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_minute_fallback_none_safe.py:1:1
  |
1 | / import types
2 | | import pandas as pd
3 | |
4 | | import ai_trading.data.bars as data_bars
5 | | from ai_trading.data.bars import safe_get_stock_bars, TimeFrame, TimeFrameUnit
  | |______________________________________________________________________________^
  |
help: Organize imports

F401 [*] `ai_trading.data.bars.TimeFrame` imported but unused
 --> tests/test_minute_fallback_none_safe.py:5:55
  |
4 | import ai_trading.data.bars as data_bars
5 | from ai_trading.data.bars import safe_get_stock_bars, TimeFrame, TimeFrameUnit
  |                                                       ^^^^^^^^^
  |
help: Remove unused import

F401 [*] `ai_trading.data.bars.TimeFrameUnit` imported but unused
 --> tests/test_minute_fallback_none_safe.py:5:66
  |
4 | import ai_trading.data.bars as data_bars
5 | from ai_trading.data.bars import safe_get_stock_bars, TimeFrame, TimeFrameUnit
  |                                                                  ^^^^^^^^^^^^^
  |
help: Remove unused import

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_ml_model_loading.py:1:1
   |
 1 | / import joblib
 2 | | import pickle
 3 | | import numpy as np
 4 | | from sklearn.dummy import DummyClassifier
 5 | | from pathlib import Path
 6 | | import sys
 7 | | import types
 8 | |
 9 | | # AI-AGENT-REF: Replaced unsafe _raise_dynamic_exec_disabled() with direct imports from core module
10 | | from ai_trading.core.bot_engine import _load_ml_model, _cleanup_ml_model_cache
   | |______________________________________________________________________________^
11 |
12 |   # Setup stub for model loader dependency
   |
help: Organize imports

F401 [*] `joblib` imported but unused
 --> tests/test_ml_model_loading.py:1:8
  |
1 | import joblib
  |        ^^^^^^
2 | import pickle
3 | import numpy as np
  |
help: Remove unused import: `joblib`

F401 [*] `pathlib.Path` imported but unused
 --> tests/test_ml_model_loading.py:5:21
  |
3 | import numpy as np
4 | from sklearn.dummy import DummyClassifier
5 | from pathlib import Path
  |                     ^^^^
6 | import sys
7 | import types
  |
help: Remove unused import: `pathlib.Path`

F401 [*] `ai_trading.core.bot_engine._cleanup_ml_model_cache` imported but unused
  --> tests/test_ml_model_loading.py:10:56
   |
 9 | # AI-AGENT-REF: Replaced unsafe _raise_dynamic_exec_disabled() with direct imports from core module
10 | from ai_trading.core.bot_engine import _load_ml_model, _cleanup_ml_model_cache
   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | # Setup stub for model loader dependency
   |
help: Remove unused import: `ai_trading.core.bot_engine._cleanup_ml_model_cache`

E401 [*] Multiple imports on one line
 --> tests/test_model_loading.py:1:1
  |
1 | import os, tempfile, joblib, types
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2 | from ai_trading.core.bot_engine import _load_required_model
  |
help: Split imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_model_loading.py:1:1
  |
1 | / import os, tempfile, joblib, types
2 | | from ai_trading.core.bot_engine import _load_required_model
  | |___________________________________________________________^
  |
help: Organize imports

F401 [*] `os` imported but unused
 --> tests/test_model_loading.py:1:8
  |
1 | import os, tempfile, joblib, types
  |        ^^
2 | from ai_trading.core.bot_engine import _load_required_model
  |
help: Remove unused import

F401 [*] `tempfile` imported but unused
 --> tests/test_model_loading.py:1:12
  |
1 | import os, tempfile, joblib, types
  |            ^^^^^^^^
2 | from ai_trading.core.bot_engine import _load_required_model
  |
help: Remove unused import

E701 Multiple statements on one line (colon)
  --> tests/test_model_loading.py:16:16
   |
14 | def test_load_model_from_module(monkeypatch, tmp_path):
15 |     mod = types.ModuleType("fake_model_mod")
16 |     class Dummy: pass
   |                ^
17 |     mod.get_model = lambda: Dummy()
18 |     import sys
   |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_model_registry.py:4:1
   |
 2 |   Tests for model registry functionality.
 3 |   """
 4 | / import tempfile
 5 | | import json
 6 | | from pathlib import Path
 7 | | from unittest.mock import Mock
 8 | |
 9 | | import pytest
10 | |
11 | | from ai_trading.model_registry import ModelRegistry
   | |___________________________________________________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_model_registry_roundtrip.py:3:1
  |
1 |   """Test model registry register → latest_for → load_model workflow."""
2 |
3 | / import tempfile
4 | | import pytest
5 | | from sklearn.linear_model import LinearRegression
6 | | import numpy as np
7 | |
8 | | from ai_trading.model_registry import ModelRegistry
  | |___________________________________________________^
  |
help: Organize imports

E731 Do not assign a `lambda` expression, use a `def`
   --> tests/test_model_registry_roundtrip.py:126:9
    |
125 |         # Test non-picklable model
126 |         non_picklable = lambda x: x  # lambda is not picklable
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
127 |         with pytest.raises(RuntimeError, match="Model not picklable"):
128 |             registry.register_model(non_picklable, "test", "lambda")
    |
help: Rewrite `non_picklable` as a `def`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_my_fixes.py:4:1
  |
2 |   """Test the specific fixes I implemented for the critical trading bot issues."""
3 |
4 | / import os
5 | | import unittest
6 | | import math
  | |___________^
  |
help: Organize imports

UP015 [*] Unnecessary mode argument
  --> tests/test_my_fixes.py:14:36
   |
12 |     def test_meta_learning_thresholds_reduced(self):
13 |         """Test that meta-learning thresholds are reduced to allow easier activation."""
14 |         with open("bot_engine.py", 'r') as f:
   |                                    ^^^
15 |             content = f.read()
   |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
  --> tests/test_my_fixes.py:29:43
   |
27 |         debug_tracker_path = "ai_trading/execution/debug_tracker.py"
28 |         if os.path.exists(debug_tracker_path):
29 |             with open(debug_tracker_path, 'r') as f:
   |                                           ^^^
30 |                 content = f.read()
   |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
  --> tests/test_my_fixes.py:43:44
   |
41 |     def test_confidence_normalization_improved(self):
42 |         """Test that confidence score normalization is improved."""
43 |         with open("strategy_allocator.py", 'r') as f:
   |                                            ^^^
44 |             content = f.read()
   |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
  --> tests/test_my_fixes.py:59:36
   |
57 |     def test_position_limit_rebalancing(self):
58 |         """Test that position limits allow rebalancing."""
59 |         with open("bot_engine.py", 'r') as f:
   |                                    ^^^
60 |             content = f.read()
   |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
  --> tests/test_my_fixes.py:73:32
   |
71 |     def test_liquidity_thresholds_increased(self):
72 |         """Test that liquidity thresholds are made less aggressive."""
73 |         with open("config.py", 'r') as f:
   |                                ^^^
74 |             content = f.read()
   |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
  --> tests/test_my_fixes.py:86:41
   |
84 |     def test_data_quality_handling_improved(self):
85 |         """Test that data quality validation is improved."""
86 |         with open("trade_execution.py", 'r') as f:
   |                                         ^^^
87 |             content = f.read()
   |
help: Remove mode argument

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_nameerror_integration.py:2:1
  |
1 |   """Integration test to verify the NameError fix for BUY_THRESHOLD"""
2 | / import os
3 | | import sys
4 | | import tempfile
5 | | import subprocess
6 | | from pathlib import Path
  | |________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_no_direct_getenv.py:2:1
  |
1 |   # tests/test_no_direct_getenv.py
2 | / import os
3 | | import pathlib
4 | | import re
5 | | import pytest
  | |_____________^
6 |
7 |   @pytest.mark.skipif(os.getenv("ENFORCE_SETTINGS_ONLY") not in {"1","true","True"}, reason="Enable after config consolidation PR merges")
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_no_legacy_imports.py:1:1
  |
1 | / import importlib.util
2 | | import pytest
  | |_____________^
3 |
4 |   BANNED = [
  |
help: Organize imports

E401 [*] Multiple imports on one line
 --> tests/test_no_raw_requests.py:1:1
  |
1 | import pathlib, re
  | ^^^^^^^^^^^^^^^^^^
  |
help: Split imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_no_raw_requests.py:1:1
  |
1 | import pathlib, re
  | ^^^^^^^^^^^^^^^^^^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_no_root_imports.py:1:1
  |
1 | / import pathlib
2 | | import re
  | |_________^
3 |
4 |   def test_no_root_level_imports_of_migrated_modules():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_no_trade_bands.py:1:1
  |
1 | from ai_trading.rebalancer import apply_no_trade_bands
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2 |
3 | def test_no_trade_bands_suppresses_small_moves():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_parallel_speed.py:1:1
  |
1 | / import time
2 | | import pandas as pd
3 | | from ai_trading import signals
  | |______________________________^
4 |
5 |   def test_parallel_vs_serial_prep_speed():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_parameter_optimization.py:8:1
   |
 6 |   """
 7 |
 8 | / import pytest
 9 | | import sys
10 | | import os
   | |_________^
11 |
12 |   # Add the project root to Python path for imports
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_parameter_optimization.py:81:5
   |
79 | def test_parameter_consistency():
80 |     """Test that optimized parameters maintain internal consistency."""
81 |     from ai_trading.core.constants import RISK_PARAMETERS, PERFORMANCE_THRESHOLDS
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |     
83 |     # Stop loss should be lower than take profit
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_parameter_optimization.py:96:9
   |
94 |       """Test that adaptive sizing uses optimized parameters."""
95 |       try:
96 | /         from ai_trading.risk.adaptive_sizing import AdaptivePositionSizer
97 | |         from ai_trading.core.enums import RiskLevel
   | |___________________________________________________^
98 |           
99 |           # Test that sizer can be instantiated with optimized parameters
   |
help: Organize imports

F821 Undefined name `MockOrderManager`
   --> tests/test_parameter_optimization.py:122:29
    |
121 |         # Mock order manager for testing
122 |         vwap = VWAPExecutor(MockOrderManager())
    |                             ^^^^^^^^^^^^^^^^
123 |         
124 |         # Verify optimized participation rate
    |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_parameter_validation.py:8:1
   |
 6 |   """
 7 |
 8 | / import pytest
 9 | | import sys
10 | | import os
   | |_________^
11 |
12 |   # Add the project root to Python path for imports
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_peak_performance.py:6:1
   |
 4 |   """
 5 |
 6 | / import pytest
 7 | | import pandas as pd
 8 | | import numpy as np
 9 | | from datetime import datetime, timezone
   | |_______________________________________^
10 |
11 |   # Test idempotency
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_peak_performance.py:14:5
   |
12 |   def test_order_idempotency():
13 |       """Test order idempotency caching."""
14 | /     from ai_trading.execution.idempotency import is_duplicate_order, mark_order_submitted
15 | |     
16 | |     # Clear any existing cache
17 | |     from ai_trading.execution.idempotency import get_idempotency_cache
   | |______________________________________________________________________^
18 |       cache = get_idempotency_cache()
19 |       cache.clear_expired()
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_peak_performance.py:42:5
   |
40 |   def test_position_reconciliation():
41 |       """Test position reconciliation logic."""
42 | /     from ai_trading.execution.reconcile import PositionReconciler
43 | |     from ai_trading.core.interfaces import Position
44 | |     from datetime import datetime, timezone
   | |___________________________________________^
45 |       
46 |       reconciler = PositionReconciler(tolerance_pct=0.01)
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_peak_performance.py:122:5
    |
120 | def test_symbol_costs():
121 |     """Test symbol-aware cost model."""
122 |     from ai_trading.execution.costs import SymbolCosts, SymbolCostModel
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
123 |     
124 |     # Test cost calculation
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_peak_performance.py:200:5
    |
198 | def test_determinism():
199 |     """Test deterministic training setup."""
200 |     from ai_trading.utils.determinism import set_random_seeds, hash_data
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
201 |     
202 |     # Test seed setting
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_peak_performance.py:263:5
    |
261 | def test_performance_optimizations():
262 |     """Test performance optimization utilities."""
263 |     from ai_trading.utils.performance import PerformanceCache, VectorizedOperations, benchmark_operation
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
264 |     
265 |     # Test caching
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_peak_performance.py:296:5
    |
294 | def test_smart_order_routing():
295 |     """Test smart order routing functionality."""
296 |     from ai_trading.execution.order_policy import SmartOrderRouter, MarketData, OrderUrgency
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
297 |     
298 |     router = SmartOrderRouter()
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_performance_allocator_conf_gate.py:1:1
  |
1 | / import logging
2 | | import pytest
3 | |
4 | | from ai_trading.strategies.performance_allocator import (
5 | |     PerformanceBasedAllocator,
6 | |     _resolve_conf_threshold,
7 | | )
8 | | from ai_trading.config.management import TradingConfig
9 | | from ai_trading.config.settings import get_settings
  | |___________________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_performance_fixes.py:26:5
   |
24 |     print("Testing meta-learning mixed format handling")
25 |     
26 |     from ai_trading.meta_learning import validate_trade_data_quality, retrain_meta_learner
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
27 |     
28 |     # Test with the actual trades.csv file
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_performance_fixes.py:54:5
   |
52 |     print("Testing cache performance monitoring")
53 |     
54 |     from ai_trading.data_fetcher import get_cache_stats, _CACHE_STATS
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
55 |     
56 |     # Reset cache stats
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_performance_fixes.py:102:5
    |
100 |       print("Testing enhanced latency tracking")
101 |       
102 | /     import time
103 | |     from ai_trading.execution.engine import ExecutionEngine
    | |___________________________________________________________^
104 |       
105 |       # Create mock context and engine
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_phase2_enhancements.py:8:1
   |
 6 |   """
 7 |
 8 | / import unittest
 9 | | import os
10 | | import time
11 | | from datetime import datetime, timezone
12 | | from unittest.mock import Mock, patch
   | |_____________________________________^
13 |
14 |   # Mock environment variables for testing
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_phase2_enhancements.py:26:5
   |
25 |   with patch.dict(os.environ, test_env):
26 | /     import ai_trading.config as config
27 | |     from ai_trading.monitoring.order_health_monitor import OrderHealthMonitor, OrderInfo
28 | |     from ai_trading.monitoring.system_health_checker import SystemHealthChecker, ComponentHealth  # AI-AGENT-REF: normalized import
   | |________________________________________________________________________________________________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_phase2_enhancements.py:186:13
    |
184 |         with patch.object(self.health_checker, '_check_all_components') as mock_check:
185 |             # Mock health status
186 |             from ai_trading.monitoring.system_health_checker import SystemHealthStatus  # AI-AGENT-REF: normalized import
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
187 |             mock_health = SystemHealthStatus(
188 |                 overall_status="healthy",
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_portfolio.py:1:1
  |
1 | / import types
2 | | import pandas as pd
3 | | from ai_trading.core import bot_engine
  | |______________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_portfolio_integration.py:6:1
   |
 4 |   """
 5 |
 6 | / import pytest
 7 | | import os
 8 | | from datetime import datetime, timedelta, timezone
   | |__________________________________________________^
 9 |
10 |   # Set testing environment
   |
help: Organize imports

F401 [*] `datetime.datetime` imported but unused
  --> tests/test_portfolio_integration.py:8:22
   |
 6 | import pytest
 7 | import os
 8 | from datetime import datetime, timedelta, timezone
   |                      ^^^^^^^^
 9 |
10 | # Set testing environment
   |
help: Remove unused import

F401 [*] `datetime.timedelta` imported but unused
  --> tests/test_portfolio_integration.py:8:32
   |
 6 | import pytest
 7 | import os
 8 | from datetime import datetime, timedelta, timezone
   |                                ^^^^^^^^^
 9 |
10 | # Set testing environment
   |
help: Remove unused import

F401 [*] `datetime.timezone` imported but unused
  --> tests/test_portfolio_integration.py:8:43
   |
 6 | import pytest
 7 | import os
 8 | from datetime import datetime, timedelta, timezone
   |                                           ^^^^^^^^
 9 |
10 | # Set testing environment
   |
help: Remove unused import

F821 Undefined name `MockContext`
  --> tests/test_portfolio_integration.py:21:20
   |
19 |     def setup_method(self):
20 |         """Set up test fixtures."""
21 |         self.ctx = MockContext()
   |                    ^^^^^^^^^^^
22 |         
23 |         # Create test signals
   |

F821 Undefined name `MockSignal`
  --> tests/test_portfolio_integration.py:25:13
   |
23 |         # Create test signals
24 |         self.test_signals = [
25 |             MockSignal('AAPL', 'buy', 20),   # Small increase
   |             ^^^^^^^^^^
26 |             MockSignal('MSFT', 'sell', 10),  # Small decrease  
27 |             MockSignal('GOOGL', 'buy', 100), # Large increase
   |

F821 Undefined name `MockSignal`
  --> tests/test_portfolio_integration.py:26:13
   |
24 |         self.test_signals = [
25 |             MockSignal('AAPL', 'buy', 20),   # Small increase
26 |             MockSignal('MSFT', 'sell', 10),  # Small decrease  
   |             ^^^^^^^^^^
27 |             MockSignal('GOOGL', 'buy', 100), # Large increase
28 |             MockSignal('TSLA', 'buy', 50),   # New position
   |

F821 Undefined name `MockSignal`
  --> tests/test_portfolio_integration.py:27:13
   |
25 |             MockSignal('AAPL', 'buy', 20),   # Small increase
26 |             MockSignal('MSFT', 'sell', 10),  # Small decrease  
27 |             MockSignal('GOOGL', 'buy', 100), # Large increase
   |             ^^^^^^^^^^
28 |             MockSignal('TSLA', 'buy', 50),   # New position
29 |         ]
   |

F821 Undefined name `MockSignal`
  --> tests/test_portfolio_integration.py:28:13
   |
26 |             MockSignal('MSFT', 'sell', 10),  # Small decrease  
27 |             MockSignal('GOOGL', 'buy', 100), # Large increase
28 |             MockSignal('TSLA', 'buy', 50),   # New position
   |             ^^^^^^^^^^
29 |         ]
   |

F821 Undefined name `MockSignal`
  --> tests/test_portfolio_integration.py:77:13
   |
75 |         """Test portfolio signal filtering with invalid signals."""
76 |         invalid_signals = [
77 |             MockSignal('', 'buy', 20),     # Empty symbol
   |             ^^^^^^^^^^
78 |             MockSignal('AAPL', '', 20),    # Empty side
79 |             MockSignal('MSFT', 'unknown', 20),  # Unknown side
   |

F821 Undefined name `MockSignal`
  --> tests/test_portfolio_integration.py:78:13
   |
76 |         invalid_signals = [
77 |             MockSignal('', 'buy', 20),     # Empty symbol
78 |             MockSignal('AAPL', '', 20),    # Empty side
   |             ^^^^^^^^^^
79 |             MockSignal('MSFT', 'unknown', 20),  # Unknown side
80 |         ]
   |

F821 Undefined name `MockSignal`
  --> tests/test_portfolio_integration.py:79:13
   |
77 |             MockSignal('', 'buy', 20),     # Empty symbol
78 |             MockSignal('AAPL', '', 20),    # Empty side
79 |             MockSignal('MSFT', 'unknown', 20),  # Unknown side
   |             ^^^^^^^^^^
80 |         ]
   |

F821 Undefined name `MockSignal`
   --> tests/test_portfolio_integration.py:98:39
    |
 96 |             side = 'buy' if i % 2 == 0 else 'sell'
 97 |             quantity = 5 + (i % 10)  # Small quantities
 98 |             high_churn_signals.append(MockSignal(symbol, side, quantity))
    |                                       ^^^^^^^^^^
 99 |         
100 |         filtered_signals = filter_signals_with_portfolio_optimization(
    |

F821 Undefined name `MockContext`
   --> tests/test_portfolio_integration.py:136:20
    |
134 |     def setup_method(self):
135 |         """Set up test fixtures."""
136 |         self.ctx = MockContext()
    |                    ^^^^^^^^^^^
137 |         # Add rebalancing-specific attributes
138 |         self.ctx.target_weights = {
    |

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_portfolio_integration.py:147:9
    |
145 |     def test_rebalancing_integration(self):
146 |         """Test that portfolio optimization integrates with rebalancing logic."""
147 |         from ai_trading.rebalancer import portfolio_first_rebalance, _get_current_positions_for_rebalancing
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
148 |         
149 |         # Test position extraction
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_portfolio_optimization.py:6:1
  |
4 |   """
5 |
6 | / import pytest
7 | | import os
  | |_________^
8 |
9 |   # Set testing environment
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_portfolio_optimization.py:12:1
   |
10 |   os.environ['TESTING'] = '1'
11 |
12 | / from ai_trading.portfolio.optimizer import PortfolioOptimizer, PortfolioDecision, create_portfolio_optimizer  # AI-AGENT-REF: normaliz…
13 | | from ai_trading.execution.transaction_costs import TradeType, create_transaction_cost_calculator  # AI-AGENT-REF: normalized import
14 | | from ai_trading.strategies.regime_detector import MarketRegime, create_regime_detector
   | |______________________________________________________________________________________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_portfolio_snapshot.py:1:1
  |
1 | / import json
2 | | import os
3 | | import pytest
4 | | from ai_trading.core import bot_engine
  | |______________________________________^
5 |
6 |   @pytest.mark.smoke
  |
help: Organize imports

F841 Local variable `fpath` is assigned to but never used
  --> tests/test_portfolio_snapshot.py:8:5
   |
 6 | @pytest.mark.smoke
 7 | def test_save_and_load_snapshot(tmp_path):
 8 |     fpath = tmp_path / "portfolio_snapshot.json"
   |     ^^^^^
 9 |     orig_cwd = os.getcwd()
10 |     os.chdir(tmp_path)
   |
help: Remove assignment to unused variable `fpath`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_position_holding.py:3:1
  |
1 |   """Test position holding logic and meta-learning triggers."""
2 |
3 | / import sys
4 | | import os
5 | | from unittest.mock import Mock, patch
  | |_____________________________________^
6 |
7 |   # Add the project root to Python path
  |
help: Organize imports

E712 Avoid equality comparisons to `True`; use `result:` for truth checks
  --> tests/test_position_holding.py:36:12
   |
34 |     # Test holding profitable position (>5% gain)
35 |     result = pm.should_hold_position("AAPL", position, 8.5, 2)
36 |     assert result == True, "Should hold profitable position with >5% gain"
   |            ^^^^^^^^^^^^^^
37 |     
38 |     # Test holding new position (<3 days)
   |
help: Replace with `result`

E712 Avoid equality comparisons to `True`; use `result:` for truth checks
  --> tests/test_position_holding.py:40:12
   |
38 |     # Test holding new position (<3 days)
39 |     result = pm.should_hold_position("AAPL", position, 2.0, 1)
40 |     assert result == True, "Should hold new position for at least 3 days"
   |            ^^^^^^^^^^^^^^
41 |     
42 |     # Test not holding losing position
   |
help: Replace with `result`

E712 Avoid equality comparisons to `False`; use `not result:` for false checks
  --> tests/test_position_holding.py:44:12
   |
42 |     # Test not holding losing position
43 |     result = pm.should_hold_position("AAPL", position, -3.0, 5)
44 |     assert result == False, "Should not hold losing position after min hold period"
   |            ^^^^^^^^^^^^^^^
   |
help: Replace with `not result`

E712 Avoid equality comparisons to `True`; use `result:` for truth checks
   --> tests/test_position_holding.py:153:24
    |
151 |                 result = trigger_meta_learning_conversion(trade_data)
152 |                 
153 |                 assert result == True, "Meta-learning conversion should succeed"
    |                        ^^^^^^^^^^^^^^
154 |                 mock_validate.assert_called_once()
155 |                 mock_convert.assert_called_once()
    |
help: Replace with `result`

E712 Avoid equality comparisons to `True`; use `result:` for truth checks
  --> tests/test_position_holding_simple.py:26:12
   |
24 |     # Test holding profitable position
25 |     result = should_hold_position("AAPL", None, 8.5, 2)
26 |     assert result == True, "Should hold profitable position with >5% gain"
   |            ^^^^^^^^^^^^^^
27 |     
28 |     # Test holding new position
   |
help: Replace with `result`

E712 Avoid equality comparisons to `True`; use `result:` for truth checks
  --> tests/test_position_holding_simple.py:30:12
   |
28 |     # Test holding new position
29 |     result = should_hold_position("AAPL", None, 2.0, 1)
30 |     assert result == True, "Should hold new position for at least 3 days"
   |            ^^^^^^^^^^^^^^
31 |     
32 |     # Test not holding old losing position
   |
help: Replace with `result`

E712 Avoid equality comparisons to `False`; use `not result:` for false checks
  --> tests/test_position_holding_simple.py:34:12
   |
32 |     # Test not holding old losing position
33 |     result = should_hold_position("AAPL", None, -3.0, 5)
34 |     assert result == False, "Should not hold losing position after min hold period"
   |            ^^^^^^^^^^^^^^^
35 |     
36 |     print("✓ Position holding logic tests passed")
   |
help: Replace with `not result`

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_position_intelligence.py:6:1
   |
 4 |   """
 5 |
 6 | / import os
 7 | | import sys
 8 | | import logging
   | |______________^
 9 |
10 |   # Set up basic logging
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_position_intelligence.py:26:9
   |
24 |         # Test 1: Market Regime Detection
25 |         print("\n1. Testing Market Regime Detection")
26 |         from market_regime import MarketRegimeDetector, MarketRegime
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
27 |         
28 |         detector = MarketRegimeDetector()
   |
help: Organize imports

F821 Undefined name `MockSeries`
  --> tests/test_position_intelligence.py:44:23
   |
42 |         # Test with trending price data
43 |         price_data = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]
44 |         mock_prices = MockSeries(price_data)
   |                       ^^^^^^^^^^
45 |         
46 |         rsi = analyzer._calculate_rsi(mock_prices, 14)
   |

F841 Local variable `regime_analysis` is assigned to but never used
   --> tests/test_position_intelligence.py:140:9
    |
139 |         # Mock analyses
140 |         regime_analysis = {
    |         ^^^^^^^^^^^^^^^
141 |             'regime': MarketRegime.TRENDING_BULL,
142 |             'confidence': 0.8,
    |
help: Remove assignment to unused variable `regime_analysis`

F841 Local variable `technical_analysis` is assigned to but never used
   --> tests/test_position_intelligence.py:146:9
    |
144 |         }
145 |         
146 |         technical_analysis = {
    |         ^^^^^^^^^^^^^^^^^^
147 |             'signals': None,
148 |             'hold_strength': 'STRONG',
    |
help: Remove assignment to unused variable `technical_analysis`

F841 Local variable `profit_analysis` is assigned to but never used
   --> tests/test_position_intelligence.py:154:9
    |
152 |         }
153 |         
154 |         profit_analysis = {
    |         ^^^^^^^^^^^^^^^
155 |             'triggered_targets': [],
156 |             'profit_plan': None,
    |
help: Remove assignment to unused variable `profit_analysis`

F841 Local variable `stop_analysis` is assigned to but never used
   --> tests/test_position_intelligence.py:161:9
    |
159 |         }
160 |         
161 |         stop_analysis = {
    |         ^^^^^^^^^^^^^
162 |             'stop_level': None,
163 |             'is_triggered': False,
    |
help: Remove assignment to unused variable `stop_analysis`

F841 Local variable `correlation_analysis` is assigned to but never used
   --> tests/test_position_intelligence.py:168:9
    |
166 |         }
167 |         
168 |         correlation_analysis = {
    |         ^^^^^^^^^^^^^^^^^^^^
169 |             'portfolio_analysis': None,
170 |             'should_reduce': False,
    |
help: Remove assignment to unused variable `correlation_analysis`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_price_snapshot_minute_fallback.py:1:1
  |
1 | / import pandas as pd
2 | | from types import SimpleNamespace
3 | |
4 | | from ai_trading.portfolio import core as portfolio_core
  | |_______________________________________________________^
  |
help: Organize imports

UP015 [*] Unnecessary mode argument
  --> tests/test_problem_statement_fixes.py:49:40
   |
47 |         bot_engine_path = "bot_engine.py"
48 |         if os.path.exists(bot_engine_path):
49 |             with open(bot_engine_path, 'r') as f:
   |                                        ^^^
50 |                 content = f.read()
   |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
  --> tests/test_problem_statement_fixes.py:72:40
   |
70 |         bot_engine_path = "bot_engine.py"
71 |         if os.path.exists(bot_engine_path):
72 |             with open(bot_engine_path, 'r') as f:
   |                                        ^^^
73 |                 content = f.read()
   |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
  --> tests/test_problem_statement_fixes.py:89:45
   |
87 |         trade_execution_path = "trade_execution.py"
88 |         if os.path.exists(trade_execution_path):
89 |             with open(trade_execution_path, 'r') as f:
   |                                             ^^^
90 |                 content = f.read()
   |
help: Remove mode argument

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_problem_statement_validation.py:6:1
  |
4 |   """
5 |
6 | / import os
7 | | import sys
8 | | from datetime import timezone
9 | | from unittest.mock import patch, MagicMock
  | |__________________________________________^
  |
help: Organize imports

F841 Local variable `result` is assigned to but never used
  --> tests/test_problem_statement_validation.py:40:17
   |
38 |             # This should not crash, should fallback gracefully
39 |             try:
40 |                 result = mock_available()
   |                 ^^^^^^
41 |                 assert False, "Should have raised TypeError"
42 |             except TypeError:
   |
help: Remove assignment to unused variable `result`

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_problem_statement_validation.py:53:5
   |
52 |     # Test logging import
53 |     from ai_trading.logging import setup_logging, get_logger
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
54 |     assert callable(setup_logging)
55 |     assert callable(get_logger)
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_problem_statement_validation.py:76:5
   |
75 |       # Test execution engine datetime handling
76 | /     from ai_trading.execution.engine import Order
77 | |     from ai_trading.core.enums import OrderSide, OrderType
   | |__________________________________________________________^
78 |       
79 |       # Create an order and check timestamps
   |
help: Organize imports

F401 `asyncio` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_problem_statement_validation.py:97:16
   |
95 |     """Test that asyncio uses modern get_running_loop pattern."""
96 |     try:
97 |         import asyncio
   |                ^^^^^^^
98 |         import inspect
   |
help: Remove unused import: `asyncio`

UP015 [*] Unnecessary mode argument
   --> tests/test_problem_statement_validation.py:117:27
    |
115 | def test_start_script_portability():
116 |     """Test that start.sh is portable and doesn't contain hard-coded paths."""
117 |     with open('start.sh', 'r') as f:
    |                           ^^^
118 |         content = f.read()
    |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
   --> tests/test_problem_statement_validation.py:137:33
    |
135 | def test_python_version_requirements():
136 |     """Test that pyproject.toml has correct Python version requirements."""
137 |     with open('pyproject.toml', 'r') as f:
    |                                 ^^^
138 |         content = f.read()
    |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
   --> tests/test_problem_statement_validation.py:151:31
    |
149 |     assert os.path.exists('.env.example'), ".env.example should exist"
150 |     
151 |     with open('.env.example', 'r') as f:
    |                               ^^^
152 |         content = f.read()
    |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
   --> tests/test_problem_statement_validation.py:173:28
    |
171 |     # Check ai_trading package files
172 |     for py_file in glob.glob('ai_trading/**/*.py', recursive=True):
173 |         with open(py_file, 'r') as f:
    |                            ^^^
174 |             first_line = f.readline().strip()
    |
help: Remove mode argument

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_production_fixes.py:12:1
   |
10 |   """
11 |
12 | / import os
13 | | import sys
14 | | import unittest
15 | | from unittest.mock import patch, MagicMock
16 | | from datetime import datetime, timezone, timedelta
   | |__________________________________________________^
17 |
18 |   # Add the project root to Python path for imports
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_production_fixes.py:69:13
   |
67 |         """Set up performance monitor test."""
68 |         try:
69 |             from ai_trading.monitoring.performance_monitor import ResourceMonitor  # AI-AGENT-REF: normalized import
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
70 |             self.monitor = ResourceMonitor()
71 |         except ImportError:
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_production_fixes.py:126:13
    |
124 |           """Set up data validation test."""
125 |           try:
126 | /             import pandas as pd
127 | |             from ai_trading.data_validation import (
128 | |                 is_market_hours, get_staleness_threshold, 
129 | |                 check_data_freshness
130 | |             )
    | |_____________^
131 |               self.pd = pd
132 |               self.is_market_hours = is_market_hours
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_production_fixes.py:195:13
    |
193 | …     """Set up environment validation test."""
194 | …     try:
195 | …         from ai_trading.validation.validate_env import debug_environment, validate_specific_env_var  # AI-AGENT-REF: normalized imp…
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
196 | …         self.debug_environment = debug_environment
197 | …         self.validate_specific_env_var = validate_specific_env_var
    |
help: Organize imports

UP015 [*] Unnecessary mode argument
   --> tests/test_production_fixes.py:260:38
    |
258 |         env_file_path = '.env'
259 |         if os.path.exists(env_file_path):
260 |             with open(env_file_path, 'r') as f:
    |                                      ^^^
261 |                 content = f.read()
    |
help: Remove mode argument

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_production_system.py:8:1
   |
 6 |   """
 7 |
 8 | / import asyncio
 9 | | import sys
10 | | import os
   | |_________^
11 |
12 |   # Add the project root to the Python path
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_production_system.py:16:5
   |
15 |   try:
16 | /     from ai_trading.core.enums import RiskLevel, OrderSide, OrderType
17 | |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
18 | |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 | |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
20 | |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
   | |_____________________________________________________________________________________^
21 |   except ImportError as e:
22 |       print(f"Import error (expected in test environment): {e}")
   |
help: Organize imports

F401 `ai_trading.risk.position_sizing.ATRPositionSizer` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:17:49
   |
15 | try:
16 |     from ai_trading.core.enums import RiskLevel, OrderSide, OrderType
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
   |                                                 ^^^^^^^^^^^^^^^^
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |
help: Remove unused import

F401 `ai_trading.risk.position_sizing.DynamicPositionSizer` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:17:67
   |
15 | try:
16 |     from ai_trading.core.enums import RiskLevel, OrderSide, OrderType
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
   |                                                                   ^^^^^^^^^^^^^^^^^^^^
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |
help: Remove unused import

F401 `ai_trading.risk.circuit_breakers.DrawdownCircuitBreaker` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:18:50
   |
16 |     from ai_trading.core.enums import RiskLevel, OrderSide, OrderType
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
20 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
   |
help: Remove unused import

F401 `ai_trading.risk.circuit_breakers.TradingHaltManager` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:18:74
   |
16 |     from ai_trading.core.enums import RiskLevel, OrderSide, OrderType
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
   |                                                                          ^^^^^^^^^^^^^^^^^^
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
20 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
   |
help: Remove unused import

F401 `ai_trading.monitoring.alerting.AlertManager` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:19:48
   |
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |                                                ^^^^^^^^^^^^
20 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
21 | except ImportError as e:
   |
help: Remove unused import

F401 `ai_trading.monitoring.alerting.AlertSeverity` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:19:62
   |
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |                                                              ^^^^^^^^^^^^^
20 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
21 | except ImportError as e:
   |
help: Remove unused import

F401 `ai_trading.execution.production_engine.ProductionExecutionCoordinator` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:20:56
   |
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
20 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 | except ImportError as e:
22 |     print(f"Import error (expected in test environment): {e}")
   |
help: Remove unused import: `ai_trading.execution.production_engine.ProductionExecutionCoordinator`

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_production_system.py:78:9
   |
76 |     """Test drawdown circuit breaker functionality."""
77 |     try:
78 |         from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, CircuitBreakerState
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
79 |         
80 |         # Test circuit breaker with 10% max drawdown
   |
help: Organize imports

F401 `ai_trading.risk.circuit_breakers.CircuitBreakerState` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:78:78
   |
76 |     """Test drawdown circuit breaker functionality."""
77 |     try:
78 |         from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, CircuitBreakerState
   |                                                                              ^^^^^^^^^^^^^^^^^^^
79 |         
80 |         # Test circuit breaker with 10% max drawdown
   |
help: Remove unused import: `ai_trading.risk.circuit_breakers.CircuitBreakerState`

E712 Avoid equality comparisons to `True`; use `breaker.update_equity(100000):` for truth checks
  --> tests/test_production_system.py:84:16
   |
83 |         # Test normal operation
84 |         assert breaker.update_equity(100000) == True, "Trading should be allowed initially"
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
85 |         print("✓ Circuit breaker allows trading initially")
   |
help: Replace with `breaker.update_equity(100000)`

E712 Avoid equality comparisons to `True`; use `breaker.update_equity(95000):` for truth checks
  --> tests/test_production_system.py:88:16
   |
87 |         # Test drawdown within limits
88 |         assert breaker.update_equity(95000) == True, "5% drawdown should be allowed"
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
89 |         print("✓ Circuit breaker allows 5% drawdown")
   |
help: Replace with `breaker.update_equity(95000)`

E712 Avoid equality comparisons to `False`; use `not breaker.update_equity(85000):` for false checks
  --> tests/test_production_system.py:92:16
   |
91 |         # Test drawdown exceeding limits
92 |         assert breaker.update_equity(85000) == False, "15% drawdown should halt trading"
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
93 |         print("✓ Circuit breaker halts trading at 15% drawdown")
   |
help: Replace with `not breaker.update_equity(85000)`

E712 Avoid equality comparisons to `True`; use `status["trading_allowed"]:` for truth checks
   --> tests/test_production_system.py:120:16
    |
118 |         # Test initial state
119 |         status = halt_manager.is_trading_allowed()
120 |         assert status["trading_allowed"] == True, "Trading should be allowed initially"
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
121 |         print("✓ Trading halt manager allows trading initially")
    |
help: Replace with `status["trading_allowed"]`

E712 Avoid equality comparisons to `False`; use `not status["trading_allowed"]:` for false checks
   --> tests/test_production_system.py:126:16
    |
124 |         halt_manager.manual_halt_trading("Test halt")
125 |         status = halt_manager.is_trading_allowed()
126 |         assert status["trading_allowed"] == False, "Trading should be halted after manual halt"
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
127 |         assert "Manual halt" in status["reasons"][0], "Reason should mention manual halt"
128 |         print("✓ Manual halt working correctly")
    |
help: Replace with `not status["trading_allowed"]`

E712 Avoid equality comparisons to `True`; use `status["trading_allowed"]:` for truth checks
   --> tests/test_production_system.py:133:16
    |
131 |         halt_manager.resume_trading("Test resume")
132 |         status = halt_manager.is_trading_allowed()
133 |         assert status["trading_allowed"] == True, "Trading should resume after manual resume"
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
134 |         print("✓ Manual resume working correctly")
    |
help: Replace with `status["trading_allowed"]`

E712 Avoid equality comparisons to `False`; use `not status["trading_allowed"]:` for false checks
   --> tests/test_production_system.py:139:16
    |
137 |         halt_manager.emergency_stop_all("Test emergency")
138 |         status = halt_manager.is_trading_allowed()
139 |         assert status["trading_allowed"] == False, "Trading should be halted after emergency stop"
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
140 |         print("✓ Emergency stop working correctly")
    |
help: Replace with `not status["trading_allowed"]`

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_production_system.py:206:9
    |
204 |       """Test production execution coordinator."""
205 |       try:
206 | /         from ai_trading.execution.production_engine import ProductionExecutionCoordinator
207 | |         from ai_trading.core.enums import OrderSide, OrderType, RiskLevel
    | |_________________________________________________________________________^
208 |           
209 |           # Initialize coordinator
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_prof_budget.py:1:1
  |
1 | / import time
2 | | from ai_trading.utils.prof import SoftBudget
  | |____________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_property_based.py:12:1
   |
10 |   # Ensure project root is on path
11 |   sys.path.insert(0, str(Path(__file__).resolve().parents[1]))
12 | / import ai_trading.risk.engine as risk_engine  # AI-AGENT-REF: normalized import
13 | | from ai_trading import signals
14 | | from ai_trading import utils
   | |____________________________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_pydantic_v2_migration.py:7:1
   |
 5 |   with Pydantic V2 field_validator decorators.
 6 |   """
 7 | / import pytest
 8 | | import os
 9 | | import sys
10 | | from unittest.mock import patch
   | |_______________________________^
   |
help: Organize imports

UP015 [*] Unnecessary mode argument
  --> tests/test_pydantic_v2_migration.py:19:34
   |
17 |     )
18 |     
19 |     with open(validate_env_path, 'r') as f:
   |                                  ^^^
20 |         content = f.read()
   |
help: Remove mode argument

F841 Local variable `settings` is assigned to but never used
   --> tests/test_pydantic_v2_migration.py:107:17
    |
105 |             # These should trigger validation errors due to invalid values
106 |             try:
107 |                 settings = validate_env.Settings()
    |                 ^^^^^^^^
108 |                 # If we get here, check that the problematic values were caught
109 |                 # by validators or set to defaults
    |
help: Remove assignment to unused variable `settings`

F841 Local variable `original_maybe_rebalance` is assigned to but never used
  --> tests/test_rebalancer_additional.py:37:5
   |
36 |     # Mock the infinite loop to exit after one iteration
37 |     original_maybe_rebalance = rebalancer.maybe_rebalance
   |     ^^^^^^^^^^^^^^^^^^^^^^^^
38 |     call_count = [0]
   |
help: Remove assignment to unused variable `original_maybe_rebalance`

F841 Local variable `t` is assigned to but never used
  --> tests/test_rebalancer_additional.py:50:5
   |
48 |     monkeypatch.setattr(rebalancer, "maybe_rebalance", mock_maybe_rebalance)
49 |     
50 |     t = rebalancer.start_rebalancer("ctx")
   |     ^
51 |     assert "start-called" in called
   |
help: Remove assignment to unused variable `t`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_regime_and_schema_guard.py:1:1
  |
1 | / import pandas as pd
2 | | import pytest
  | |_____________^
3 |
4 |   def test_validate_ohlcv_detects_missing():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_regime_filters.py:1:1
  |
1 | / import pandas as pd
2 | | import pytest
  | |_____________^
3 |
4 |   def test_regime_changes():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_retry_idempotency_integration.py:3:1
  |
1 |   """Integration test for retry/backoff and idempotency in order submission."""
2 |
3 | / import time
4 | | from datetime import datetime, timezone
5 | |
6 | | # Set PYTHONPATH to include our tenacity mock
7 | | import sys
  | |__________^
8 |   sys.path.insert(0, '/tmp')
  |
help: Organize imports

F401 [*] `datetime.datetime` imported but unused
 --> tests/test_retry_idempotency_integration.py:4:22
  |
3 | import time
4 | from datetime import datetime, timezone
  |                      ^^^^^^^^
5 |
6 | # Set PYTHONPATH to include our tenacity mock
  |
help: Remove unused import

F401 [*] `datetime.timezone` imported but unused
 --> tests/test_retry_idempotency_integration.py:4:32
  |
3 | import time
4 | from datetime import datetime, timezone
  |                                ^^^^^^^^
5 |
6 | # Set PYTHONPATH to include our tenacity mock
  |
help: Remove unused import

F821 Undefined name `MockBrokerAPI`
  --> tests/test_retry_idempotency_integration.py:78:14
   |
76 | def test_retry_idempotency_integration():
77 |     """Test that retry mechanism works with idempotency protection."""
78 |     broker = MockBrokerAPI(fail_count=2)  # Fail 2 times, succeed on 3rd
   |              ^^^^^^^^^^^^^
79 |     idempotency_mgr = OrderIdempotencyManager()
80 |     reconciler = PositionReconciler()
   |

F841 Local variable `reconciler` is assigned to but never used
  --> tests/test_retry_idempotency_integration.py:80:5
   |
78 |     broker = MockBrokerAPI(fail_count=2)  # Fail 2 times, succeed on 3rd
79 |     idempotency_mgr = OrderIdempotencyManager()
80 |     reconciler = PositionReconciler()
   |     ^^^^^^^^^^
81 |     
82 |     order_data = {
   |
help: Remove assignment to unused variable `reconciler`

F841 Local variable `result` is assigned to but never used
   --> tests/test_retry_idempotency_integration.py:100:13
    |
 98 |     while attempt < max_attempts:
 99 |         try:
100 |             result = broker.submit_order(order_data)
    |             ^^^^^^
101 |             break
102 |         except ConnectionError:
    |
help: Remove assignment to unused variable `result`

F821 Undefined name `MockBrokerAPI`
   --> tests/test_retry_idempotency_integration.py:123:14
    |
121 | def test_reconciliation_heals_state():
122 |     """Test that reconciliation heals local/broker state after submission."""
123 |     broker = MockBrokerAPI(fail_count=0)  # No failures
    |              ^^^^^^^^^^^^^
124 |     idempotency_mgr = OrderIdempotencyManager()
125 |     reconciler = PositionReconciler()
    |

F841 Local variable `result` is assigned to but never used
   --> tests/test_retry_idempotency_integration.py:136:5
    |
134 |     # Submit order successfully (no retries needed)
135 |     idempotency_mgr.mark_submitted(order_data["client_order_id"])
136 |     result = broker.submit_order(order_data)
    |     ^^^^^^
137 |     
138 |     # Simulate reconciliation after order submission
    |
help: Remove assignment to unused variable `result`

F821 Undefined name `MockBrokerAPI`
   --> tests/test_retry_idempotency_integration.py:152:14
    |
150 | def test_retry_exhaustion_with_idempotency():
151 |     """Test behavior when all retries are exhausted."""
152 |     broker = MockBrokerAPI(fail_count=5)  # Fail more times than retry limit
    |              ^^^^^^^^^^^^^
153 |     idempotency_mgr = OrderIdempotencyManager()
    |

E402 Module level import not at top of file
  --> tests/test_risk_engine_module.py:11:1
   |
 9 |     sys.modules.pop(m, None)
10 | sys.modules.pop("risk_engine", None)
11 | from ai_trading.risk.engine import RiskEngine  # AI-AGENT-REF: normalized import
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 | from ai_trading.strategies import TradeSignal
   |

E402 Module level import not at top of file
  --> tests/test_risk_engine_module.py:12:1
   |
10 | sys.modules.pop("risk_engine", None)
11 | from ai_trading.risk.engine import RiskEngine  # AI-AGENT-REF: normalized import
12 | from ai_trading.strategies import TradeSignal
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_risk_new.py:1:1
  |
1 | / import pandas as pd
2 | | import ai_trading.risk.engine as risk_engine  # AI-AGENT-REF: normalized import
  | |____________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_rl_features.py:1:1
  |
1 | / import numpy as np
2 | | import pandas as pd
3 | | from ai_trading.rl_trading.features import compute_features, FeatureConfig
  | |__________________________________________________________________________^
4 |
5 |   def test_compute_features_shape_and_finite():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_rl_module.py:1:1
  |
1 | / import numpy as np
2 | |
3 | | import ai_trading.rl_trading.train as train_mod
4 | | import ai_trading.rl_trading.inference as inf
  | |_____________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_run_overlap.py:1:1
  |
1 | / import threading
2 | | import time
3 | | import types
4 | | from ai_trading.core import bot_engine
  | |______________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_runner.py:1:1
  |
1 | / import runpy
2 | | import sys
3 | | import types
4 | |
5 | | import pytest
6 | | import requests
7 | | from tests.conftest import load_runner
  | |______________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_runtime_fixes.py:6:1
   |
 4 |   """
 5 |
 6 | / import sys
 7 | | import os
 8 | | import re
   | |_________^
 9 |
10 |   def test_legacy_imports():
   |
help: Organize imports

UP015 [*] Unnecessary mode argument
  --> tests/test_runtime_fixes.py:50:31
   |
49 |         # Check if it contains the standardize_ohlcv function
50 |         with open(ohlcv_path, 'r') as f:
   |                               ^^^
51 |             content = f.read()
52 |             if "def standardize_ohlcv" in content and "CANON" in content:
   |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
  --> tests/test_runtime_fixes.py:71:32
   |
69 |         return False
70 |     
71 |     with open(bot_engine_path, 'r') as f:
   |                                ^^^
72 |         content = f.read()
   |
help: Remove mode argument

UP015 [*] Unnecessary mode argument
   --> tests/test_runtime_fixes.py:121:32
    |
120 |     # Check bot_engine.py has prepare_indicators
121 |     with open("bot_engine.py", 'r') as f:
    |                                ^^^
122 |         content = f.read()
123 |         if "prepare_indicators" in content:
    |
help: Remove mode argument

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_runtime_model.py:1:1
  |
1 | / from types import SimpleNamespace
2 | |
3 | | from ai_trading.core.runtime import build_runtime, NullAlphaModel
  | |_________________________________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_runtime_params_hydration.py:7:1
  |
5 |   parameters are properly hydrated and accessible.
6 |   """
7 | / import pytest
8 | | import os
9 | | from unittest.mock import patch
  | |_______________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_runtime_params_hydration.py:59:5
   |
57 |   def test_build_runtime_hydrates_all_parameters():
58 |       """Test that build_runtime creates runtime with all required parameters."""
59 | /     from ai_trading.core.runtime import build_runtime, REQUIRED_PARAM_DEFAULTS
60 | |     from ai_trading.config.management import TradingConfig
   | |__________________________________________________________^
61 |       
62 |       cfg = TradingConfig()
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_runtime_params_hydration.py:81:5
   |
79 |   def test_build_runtime_uses_config_values():
80 |       """Test that build_runtime uses values from TradingConfig."""
81 | /     from ai_trading.core.runtime import build_runtime
82 | |     from ai_trading.config.management import TradingConfig
   | |__________________________________________________________^
83 |       
84 |       # Create config with custom values
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_runtime_params_hydration.py:107:5
    |
105 |   def test_param_helper_fallback_logic():
106 |       """Test that _param helper function provides proper fallback logic."""
107 | /     from ai_trading.core.runtime import build_runtime
108 | |     from ai_trading.config.management import TradingConfig
    | |__________________________________________________________^
109 |       
110 |       # Create a runtime with params
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_runtime_params_hydration.py:138:5
    |
136 |   def test_no_missing_parameters_validation():
137 |       """Test that validation finds no missing parameters when properly configured."""
138 | /     from ai_trading.core.runtime import build_runtime, REQUIRED_PARAM_DEFAULTS
139 | |     from ai_trading.config.management import TradingConfig
    | |__________________________________________________________^
140 |       
141 |       cfg = TradingConfig.from_env()
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_runtime_params_hydration.py:153:5
    |
151 |   def test_parameter_values_are_floats():
152 |       """Test that all parameter values are properly converted to floats."""
153 | /     from ai_trading.core.runtime import build_runtime
154 | |     from ai_trading.config.management import TradingConfig
    | |__________________________________________________________^
155 |       
156 |       cfg = TradingConfig()
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_runtime_paths.py:6:1
  |
4 | Validates that the application has write permissions to required directories.
5 | """
6 | import pytest
  | ^^^^^^^^^^^^^
7 |
8 | def test_runtime_paths_writable():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_safe_submit_order.py:1:1
  |
1 | import types
  | ^^^^^^^^^^^^
2 |
3 | class DummyAPI:
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_safety_fallbacks.py:1:1
  |
1 | / import pandas as pd
2 | | import os
  | |_________^
3 |
4 |   # Set test environment before importing heavy modules
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_safety_fallbacks.py:7:1
  |
5 | os.environ['PYTEST_RUNNING'] = 'true'
6 |
7 | import ai_trading.features.indicators as ind
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | def test_ensure_columns_accepts_symbol_arg():
  |
help: Organize imports

F401 [*] `ai_trading.logging` imported but unused
 --> tests/test_sanitizing_logger_adapter.py:5:30
  |
3 | import logging
4 |
5 | import ai_trading.logging as L
  |                              ^
6 | from ai_trading.logging import SanitizingLoggerAdapter
  |
help: Remove unused import: `ai_trading.logging`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_settings_bridge.py:3:1
  |
1 |   """Ensure legacy settings module re-exports modern config."""
2 |
3 | / from ai_trading.settings import get_settings as legacy_get
4 | | from ai_trading.config.settings import get_settings as modern_get
  | |_________________________________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_settings_config.py:1:1
  |
1 | / import pytest
2 | | from pydantic import ValidationError
3 | |
4 | | from ai_trading.config.settings import get_settings
5 | | from ai_trading.settings import Settings
6 | | from ai_trading.core.bot_engine import _current_qty
7 | | from ai_trading.main import logger
  | |__________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_short_selling_implementation.py:164:9
    |
163 |           # Mock the order as old by manipulating the tracking directly
164 | /         import time
165 | |         from ai_trading.monitoring.order_health_monitor import _active_orders, _order_tracking_lock
    | |___________________________________________________________________________________________________^
166 |           with _order_tracking_lock:
167 |               if "old_order_456" in _active_orders:
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_signals.py:1:1
  |
1 | / import numpy as np
2 | | import pandas as pd
3 | | import pytest
4 | | import sys
5 | | import types
6 | | import importlib
  | |________________^
7 |
8 |   np.random.seed(0)
  |
help: Organize imports

E402 Module level import not at top of file
  --> tests/test_signals.py:10:1
   |
 8 | np.random.seed(0)
 9 |
10 | from ai_trading.signals import GaussianHMM, detect_market_regime_hmm
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

E741 Ambiguous variable name: `l`
  --> tests/test_signals.py:39:25
   |
37 |     import types
38 |     pta = types.ModuleType('pandas_ta')
39 |     pta.vwap = lambda h,l,c,v: pd.Series((h+l+c)/3, index=sample_df.index)
   |                         ^
40 |     pta.macd = lambda c, **k: {
41 |         'MACD_12_26_9': c * 0 + 1.0,
   |

E741 Ambiguous variable name: `l`
  --> tests/test_signals.py:44:23
   |
42 |         'MACDs_12_26_9': c * 0 + 0.5,
43 |     }
44 |     pta.kc = lambda h,l,c,length=20: pd.DataFrame({0: c*0+1.0,1:c*0+2.0,2:c*0+3.0})
   |                       ^
45 |     pta.mfi = lambda h,l,c,v,length=14: pd.Series(c*0+5.0, index=sample_df.index)
46 |     pta.adx = lambda h,l,c,length=14: {
   |

E741 Ambiguous variable name: `l`
  --> tests/test_signals.py:45:24
   |
43 |     }
44 |     pta.kc = lambda h,l,c,length=20: pd.DataFrame({0: c*0+1.0,1:c*0+2.0,2:c*0+3.0})
45 |     pta.mfi = lambda h,l,c,v,length=14: pd.Series(c*0+5.0, index=sample_df.index)
   |                        ^
46 |     pta.adx = lambda h,l,c,length=14: {
47 |         'ADX_14': pd.Series(c*0+7.0, index=sample_df.index),
   |

E741 Ambiguous variable name: `l`
  --> tests/test_signals.py:46:24
   |
44 |     pta.kc = lambda h,l,c,length=20: pd.DataFrame({0: c*0+1.0,1:c*0+2.0,2:c*0+3.0})
45 |     pta.mfi = lambda h,l,c,v,length=14: pd.Series(c*0+5.0, index=sample_df.index)
46 |     pta.adx = lambda h,l,c,length=14: {
   |                        ^
47 |         'ADX_14': pd.Series(c*0+7.0, index=sample_df.index),
48 |         'DMP_14': pd.Series(c*0+1.0, index=sample_df.index),
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_signals_multi_horizon.py:1:1
  |
1 | / import pandas as pd
2 | | from ai_trading.indicators import compute_ema, compute_sma, compute_bollinger, compute_atr
  | |__________________________________________________________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_skip_logic.py:1:1
  |
1 | / import types
2 | | import pandas as pd
3 | | from ai_trading.core import bot_engine
  | |______________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_slippage.py:1:1
  |
1 | import pandas as pd
  | ^^^^^^^^^^^^^^^^^^^
2 |
3 | def test_slippage_limits():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_staleness_guard.py:4:1
  |
2 |   Tests for data staleness guard functionality.
3 |   """
4 | / import datetime
5 | | from unittest.mock import Mock
6 | | import pandas as pd
7 | |
8 | | import pytest
  | |_____________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_staleness_guard.py:135:9
    |
133 |       def test_staleness_guard_utc_logging(self):
134 |           """Test that staleness guard logs UTC timestamps."""
135 | /         from ai_trading.core.bot_engine import _ensure_data_fresh
136 | |         from unittest.mock import patch
    | |_______________________________________^
137 |           
138 |           # Mock logger to capture log messages
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_strategies_base_extra.py:1:1
  |
1 | / from ai_trading.strategies.base import Strategy
2 | | from ai_trading.core.bot_engine import asset_class_for
  | |______________________________________________________^
  |
help: Organize imports

E402 Module level import not at top of file
  --> tests/test_strategies_module.py:62:1
   |
60 | sys.modules["finnhub"] = finnhub_stub
61 |
62 | from ai_trading.core.bot_engine import get_strategies
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
63 | from ai_trading.config import settings as settings_module
   |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_strategies_module.py:62:1
   |
60 |   sys.modules["finnhub"] = finnhub_stub
61 |
62 | / from ai_trading.core.bot_engine import get_strategies
63 | | from ai_trading.config import settings as settings_module
   | |_________________________________________________________^
   |
help: Organize imports

E402 Module level import not at top of file
  --> tests/test_strategies_module.py:63:1
   |
62 | from ai_trading.core.bot_engine import get_strategies
63 | from ai_trading.config import settings as settings_module
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_strategy_allocator_exit.py:1:1
  |
1 | / from ai_trading.strategies import TradeSignal
2 | | import sys
3 | | from pathlib import Path
4 | | import pytest
  | |_____________^
5 |
6 |   # Add the project root to sys.path to ensure we can import the real module
  |
help: Organize imports

E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
  --> tests/test_strategy_allocator_exit.py:33:12
   |
31 |     # Cleanup: restore original module if it was there
32 |     if original_module and hasattr(original_module, 'StrategyAllocator'):
33 |         if original_module.StrategyAllocator != object:
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 |             sys.modules['strategy_allocator'] = original_module
   |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_strategy_allocator_regression.py:9:1
   |
 7 |   """
 8 |
 9 | / from ai_trading.strategies import TradeSignal
10 | | import ai_trading.strategy_allocator as strategy_allocator  # AI-AGENT-REF: normalized import
   | |__________________________________________________________^
   |
help: Organize imports

F841 Local variable `out1` is assigned to but never used
  --> tests/test_strategy_allocator_regression.py:61:9
   |
60 |         # Should not raise exception and should use default threshold
61 |         out1 = alloc.select_signals({"s1": [sig]})
   |         ^^^^
62 |         out2 = alloc.select_signals({"s1": [sig]})
   |
help: Remove assignment to unused variable `out1`

F841 Local variable `out1` is assigned to but never used
  --> tests/test_strategy_allocator_regression.py:84:9
   |
83 |         # Should not raise exception and should use default threshold
84 |         out1 = alloc.select_signals({"s1": [sig]})
   |         ^^^^
85 |         out2 = alloc.select_signals({"s1": [sig]})
   |
help: Remove assignment to unused variable `out1`

F841 Local variable `out1` is assigned to but never used
   --> tests/test_strategy_allocator_regression.py:115:13
    |
113 |             sig = TradeSignal(symbol="AAPL", side="buy", confidence=sig_conf, strategy="s1")
114 |             
115 |             out1 = alloc.select_signals({"s1": [sig]})
    |             ^^^^
116 |             out2 = alloc.select_signals({"s1": [sig]})
    |
help: Remove assignment to unused variable `out1`

F841 Local variable `out1` is assigned to but never used
   --> tests/test_strategy_allocator_regression.py:154:9
    |
152 |         sig_neg = TradeSignal(symbol="AAPL", side="buy", confidence=-0.5, strategy="s1")
153 |         
154 |         out1 = alloc_fresh.allocate({"s1": [sig_neg]})
    |         ^^^^
155 |         out2 = alloc_fresh.allocate({"s1": [sig_neg]})
    |
help: Remove assignment to unused variable `out1`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_strategy_allocator_smoke.py:1:1
  |
1 | / from pathlib import Path
2 | |
3 | | import pytest
4 | |
5 | | from ai_trading.strategies import TradeSignal
6 | |
7 | | import ai_trading.strategy_allocator as strategy_allocator  # AI-AGENT-REF: normalized import
  | |__________________________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_strategy_components.py:8:1
   |
 6 |   """
 7 |
 8 | / import asyncio
 9 | | import numpy as np
10 | | import pandas as pd
11 | | import sys
12 | | import os
   | |_________^
13 |
14 |   # Add the project root to the Python path
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_strategy_components.py:47:9
   |
45 |       """Test multi-timeframe analysis functionality."""
46 |       try:
47 | /         from ai_trading.strategies.multi_timeframe import MultiTimeframeAnalyzer, SignalStrength, SignalDirection
48 | |         from ai_trading.core.enums import TimeFrame
   | |___________________________________________________^
49 |           
50 |           # Create analyzer
   |
help: Organize imports

F401 `ai_trading.strategies.multi_timeframe.SignalStrength` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_strategy_components.py:47:83
   |
45 |     """Test multi-timeframe analysis functionality."""
46 |     try:
47 |         from ai_trading.strategies.multi_timeframe import MultiTimeframeAnalyzer, SignalStrength, SignalDirection
   |                                                                                   ^^^^^^^^^^^^^^
48 |         from ai_trading.core.enums import TimeFrame
   |
help: Remove unused import

F401 `ai_trading.strategies.multi_timeframe.SignalDirection` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_strategy_components.py:47:99
   |
45 |     """Test multi-timeframe analysis functionality."""
46 |     try:
47 |         from ai_trading.strategies.multi_timeframe import MultiTimeframeAnalyzer, SignalStrength, SignalDirection
   |                                                                                                   ^^^^^^^^^^^^^^^
48 |         from ai_trading.core.enums import TimeFrame
   |
help: Remove unused import

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_strategy_components.py:97:9
   |
95 |     """Test market regime detection functionality."""
96 |     try:
97 |         from ai_trading.strategies.regime_detection import RegimeDetector, MarketRegime, VolatilityRegime
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
98 |         
99 |         # Create detector
   |
help: Organize imports

F401 `ai_trading.strategies.regime_detection.VolatilityRegime` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_strategy_components.py:97:90
   |
95 |     """Test market regime detection functionality."""
96 |     try:
97 |         from ai_trading.strategies.regime_detection import RegimeDetector, MarketRegime, VolatilityRegime
   |                                                                                          ^^^^^^^^^^^^^^^^
98 |         
99 |         # Create detector
   |
help: Remove unused import: `ai_trading.strategies.regime_detection.VolatilityRegime`

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_strategy_components.py:145:9
    |
143 |       """Test integration between multi-timeframe analysis and regime detection."""
144 |       try:
145 | /         from ai_trading.strategies.multi_timeframe import MultiTimeframeAnalyzer
146 | |         from ai_trading.strategies.regime_detection import RegimeDetector
147 | |         from ai_trading.core.enums import TimeFrame
    | |___________________________________________________^
148 |           
149 |           # Create components
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_stream_subscription_fix.py:8:1
   |
 6 |   """
 7 |
 8 | / import unittest
 9 | | from unittest.mock import patch, MagicMock
10 | | import sys
11 | | import logging
   | |______________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_submit_order_fix.py:2:1
  |
1 |   """Test for the submit_order NameError fix."""
2 | / import pytest
3 | | import os
4 | | from unittest.mock import Mock, patch
  | |_____________________________________^
5 |
6 |   # Set test environment BEFORE any imports
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_submit_order_fix.py:29:5
   |
27 |       """Test that submit_order raises proper error when _exec_engine is None."""
28 |       # Import after setting environment
29 | /     from ai_trading.core import bot_engine
30 | |     from ai_trading.core.bot_engine import submit_order, BotContext
   | |___________________________________________________________________^
31 |       
32 |       # Ensure _exec_engine is None
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_submit_order_fix.py:54:5
   |
52 |       """Test that submit_order returns None when market is closed."""
53 |       # Import after setting environment
54 | /     from ai_trading.core.bot_engine import submit_order, BotContext
55 | |     from unittest.mock import Mock
   | |__________________________________^
56 |       
57 |       # Mock market_is_open to return False
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_submit_order_fix.py:67:5
   |
65 |       """Test that submit_order works correctly when properly initialized."""
66 |       # Import after setting environment
67 | /     from ai_trading.core import bot_engine
68 | |     from ai_trading.core.bot_engine import submit_order, BotContext
69 | |     from unittest.mock import Mock
   | |__________________________________^
70 |       
71 |       # Mock the execution engine
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_submit_order_fix.py:99:5
    |
 97 |       """Test that submit_order properly propagates execution errors."""
 98 |       # Import after setting environment
 99 | /     from ai_trading.core import bot_engine
100 | |     from ai_trading.core.bot_engine import submit_order, BotContext
101 | |     from unittest.mock import Mock
    | |__________________________________^
102 |       
103 |       # Mock the execution engine to raise an exception
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_systemd_startup.py:8:1
   |
 6 |   """
 7 |
 8 | / import pytest
 9 | | import os
10 | | import tempfile
11 | | import subprocess
12 | | import sys
   | |__________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_timeutils.py:1:1
  |
1 | / from datetime import date
2 | |
3 | | from ai_trading.data.timeutils import nyse_session_utc
4 | | from zoneinfo import ZoneInfo
  | |_____________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_trade_logic.py:1:1
  |
1 | / import pandas as pd
2 | |
3 | | from ai_trading.trade_logic import (
4 | |     should_enter_trade,
5 | |     compute_order_price,
6 | |     extract_price,
7 | | )
  | |_^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_trigger_meta_learning_conversion.py:1:1
  |
1 | / import sys
2 | | import tempfile
3 | | import os
  | |_________^
4 |
5 |   # Mock the config module to avoid environment variable requirements
  |
help: Organize imports

E402 Module level import not at top of file
  --> tests/test_trigger_meta_learning_conversion.py:59:1
   |
57 | sys.modules['config'] = MockConfig
58 |
59 | from ai_trading import meta_learning
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
60 |
61 | def test_trigger_meta_learning_conversion_pure_meta_format():
   |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_trigger_meta_learning_conversion.py:59:1
   |
57 | sys.modules['config'] = MockConfig
58 |
59 | from ai_trading import meta_learning
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
60 |
61 | def test_trigger_meta_learning_conversion_pure_meta_format():
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_universe_csv.py:1:1
  |
1 | / import os
2 | | import pandas as pd
3 | | from ai_trading.data.universe import locate_tickers_csv, load_universe
  | |______________________________________________________________________^
4 |
5 |   def test_env_overrides_packaged(monkeypatch, tmp_path):
  |
help: Organize imports

F401 [*] `os` imported but unused
 --> tests/test_universe_csv.py:1:8
  |
1 | import os
  |        ^^
2 | import pandas as pd
3 | from ai_trading.data.universe import locate_tickers_csv, load_universe
  |
help: Remove unused import: `os`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_universe_fetch_pooling.py:1:1
  |
1 | / import types
2 | | from ai_trading import data_fetcher
3 | | from ai_trading.utils import http
  | |_________________________________^
  |
help: Organize imports

F401 [*] `types` imported but unused
 --> tests/test_universe_fetch_pooling.py:1:8
  |
1 | import types
  |        ^^^^^
2 | from ai_trading import data_fetcher
3 | from ai_trading.utils import http
  |
help: Remove unused import: `types`

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_utc_timefmt.py:8:1
   |
 6 |   """
 7 |
 8 | / import pytest
 9 | | from datetime import datetime, timezone, timedelta
10 | | from ai_trading.utils.timefmt import (
11 | |     utc_now_iso,
12 | |     format_datetime_utc,
13 | |     parse_iso_utc,
14 | |     ensure_utc_format
15 | | )
   | |_^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_validate_logging_setup_single_handler.py:1:1
  |
1 | / from __future__ import annotations
2 | |
3 | | import logging
4 | | import pytest
5 | |
6 | | import ai_trading.logging as L
  | |______________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/unit/test_health_check.py:1:1
  |
1 | / import types
2 | | import pytest
  | |_____________^
3 |
4 |   @pytest.mark.unit
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tools/check_python_version.py:1:1
  |
1 | / from __future__ import annotations
2 | | import sys
  | |__________^
3 |
4 |   # AI-AGENT-REF: warn but allow Python 3.11/3.12
  |
help: Organize imports

E713 [*] Test for membership should be `not in`
 --> tools/check_python_version.py:6:9
  |
4 | # AI-AGENT-REF: warn but allow Python 3.11/3.12
5 | maj, min = sys.version_info[:2]
6 | if not ((maj, min) in [(3, 12), (3, 11)]):
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |     print(f"WARNING: Python {sys.version.split()[0]} detected; expected 3.11 or 3.12. Continuing.")
8 | else:
  |
help: Convert to `not in`

E401 [*] Multiple imports on one line
 --> tools/ci/full_cleanup.py:1:1
  |
1 | import re, sys
  | ^^^^^^^^^^^^^^
2 | from pathlib import Path
  |
help: Split imports

I001 [*] Import block is un-sorted or un-formatted
 --> tools/ci/full_cleanup.py:1:1
  |
1 | / import re, sys
2 | | from pathlib import Path
  | |________________________^
3 |
4 |   ROOT = Path(__file__).resolve().parents[2]
  |
help: Organize imports

F401 [*] `sys` imported but unused
 --> tools/ci/full_cleanup.py:1:12
  |
1 | import re, sys
  |            ^^^
2 | from pathlib import Path
  |
help: Remove unused import: `sys`

E702 Multiple statements on one line (semicolon)
  --> tools/ci/full_cleanup.py:58:33
   |
56 |         i += 1
57 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
58 |         q = lines[i].strip()[:3]; i += 1
   |                                 ^
59 |         while i < len(lines) and q not in lines[i]: i += 1
60 |         if i < len(lines): i += 1
   |

E701 Multiple statements on one line (colon)
  --> tools/ci/full_cleanup.py:59:51
   |
57 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
58 |         q = lines[i].strip()[:3]; i += 1
59 |         while i < len(lines) and q not in lines[i]: i += 1
   |                                                   ^
60 |         if i < len(lines): i += 1
61 |     while i < len(lines) and lines[i].lstrip().startswith(("import ","from ")):
   |

E701 Multiple statements on one line (colon)
  --> tools/ci/full_cleanup.py:60:26
   |
58 |         q = lines[i].strip()[:3]; i += 1
59 |         while i < len(lines) and q not in lines[i]: i += 1
60 |         if i < len(lines): i += 1
   |                          ^
61 |     while i < len(lines) and lines[i].lstrip().startswith(("import ","from ")):
62 |         i += 1
   |

E701 Multiple statements on one line (colon)
  --> tools/ci/full_cleanup.py:69:17
   |
67 | def migrate_config_callsites(text: str):
68 |     names = set(m.group(1) for m in UPPER.finditer(text))
69 |     if not names: return text, set()
   |                 ^
70 |     new = UPPER.sub(lambda m: f"S.{m.group(1).lower()}", text)
71 |     if "from ai_trading.config import get_settings" not in new:
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tools/ci/gen_audit_artifacts.py:2:1
  |
1 |   # tools/ci/gen_audit_artifacts.py
2 | / from __future__ import annotations
3 | | import re, csv
4 | | from pathlib import Path
  | |________________________^
5 |
6 |   ROOT = Path(__file__).resolve().parents[2]  # repo root
  |
help: Organize imports

E401 [*] Multiple imports on one line
 --> tools/ci/gen_audit_artifacts.py:3:1
  |
1 | # tools/ci/gen_audit_artifacts.py
2 | from __future__ import annotations
3 | import re, csv
  | ^^^^^^^^^^^^^^
4 | from pathlib import Path
  |
help: Split imports

BLE001 Do not catch blind exception: `Exception`
  --> tools/ci/gen_audit_artifacts.py:30:16
   |
28 |         try:
29 |             text = p.read_text(encoding="utf-8", errors="ignore")
30 |         except Exception:
   |                ^^^^^^^^^
31 |             continue
32 |         for name, rx in PATTERNS.items():
   |

BLE001 Do not catch blind exception: `Exception`
  --> tools/ci/gen_audit_artifacts.py:48:16
   |
46 |         try:
47 |             compile(p.read_text(encoding="utf-8", errors="ignore"), srel, "exec")
48 |         except Exception as e:
   |                ^^^^^^^^^
49 |             errs.append({"file": srel, "error": repr(e)})
50 |     return errs
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tools/ci/guard_ast.py:1:1
  |
1 | / from __future__ import annotations
2 | | import sys
3 | | from pathlib import Path
4 | | import libcst as cst
5 | | import libcst.matchers as m
  | |___________________________^
6 |
7 |   TARGET_DIRS = ["ai_trading"]
  |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> tools/ci/guard_ast.py:65:16
   |
63 |         try:
64 |             mod = cst.parse_module(py.read_text(encoding="utf-8"))
65 |         except Exception:
   |                ^^^^^^^^^
66 |             continue
67 |         mod.visit(Visitor(py))
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tools/ci/list_shims.py:2:1
  |
1 |   # tools/ci/list_shims.py
2 | / from __future__ import annotations
3 | | import re
4 | | import csv
5 | | from pathlib import Path
  | |________________________^
6 |
7 |   ROOT = Path("ai_trading")
  |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> tools/ci/list_shims.py:22:16
   |
20 |         try:
21 |             text = p.read_text(encoding="utf-8", errors="ignore")
22 |         except Exception as e:
   |                ^^^^^^^^^
23 |             print(f"Error reading {p}: {e}")
24 |             continue
   |

BLE001 Do not catch blind exception: `Exception`
  --> tools/ci/list_targets.py:30:12
   |
28 |     try:
29 |         text = p.read_text(encoding="utf-8")
30 |     except Exception:
   |            ^^^^^^^^^
31 |         continue
32 |     lines = text.splitlines()
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tools/ci/optionalize_features.py:1:1
  |
1 | / from pathlib import Path
2 | | from importlib.util import find_spec
  | |____________________________________^
3 |
4 |   ROOT = Path(__file__).resolve().parents[2]
  |
help: Organize imports

F401 [*] `importlib.util.find_spec` imported but unused
 --> tools/ci/optionalize_features.py:2:28
  |
1 | from pathlib import Path
2 | from importlib.util import find_spec
  |                            ^^^^^^^^^
3 |
4 | ROOT = Path(__file__).resolve().parents[2]
  |
help: Remove unused import: `importlib.util.find_spec`

E401 [*] Multiple imports on one line
 --> tools/ci/sweep_tests_tools.py:2:1
  |
1 | # tools/ci/sweep_tests_tools.py
2 | import re, sys
  | ^^^^^^^^^^^^^^
3 | from pathlib import Path
  |
help: Split imports

I001 [*] Import block is un-sorted or un-formatted
 --> tools/ci/sweep_tests_tools.py:2:1
  |
1 |   # tools/ci/sweep_tests_tools.py
2 | / import re, sys
3 | | from pathlib import Path
  | |________________________^
4 |
5 |   ROOT = Path(__file__).resolve().parents[2]
  |
help: Organize imports

F401 [*] `sys` imported but unused
 --> tools/ci/sweep_tests_tools.py:2:12
  |
1 | # tools/ci/sweep_tests_tools.py
2 | import re, sys
  |            ^^^
3 | from pathlib import Path
  |
help: Remove unused import: `sys`

E702 Multiple statements on one line (semicolon)
  --> tools/ci/sweep_tests_tools.py:50:33
   |
48 |         i += 1
49 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
50 |         q = lines[i].strip()[:3]; i += 1
   |                                 ^
51 |         while i < len(lines) and q not in lines[i]: i += 1
52 |         if i < len(lines): i += 1
   |

E701 Multiple statements on one line (colon)
  --> tools/ci/sweep_tests_tools.py:51:51
   |
49 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
50 |         q = lines[i].strip()[:3]; i += 1
51 |         while i < len(lines) and q not in lines[i]: i += 1
   |                                                   ^
52 |         if i < len(lines): i += 1
53 |     while i < len(lines) and lines[i].lstrip().startswith(("import ","from ")):
   |

E701 Multiple statements on one line (colon)
  --> tools/ci/sweep_tests_tools.py:52:26
   |
50 |         q = lines[i].strip()[:3]; i += 1
51 |         while i < len(lines) and q not in lines[i]: i += 1
52 |         if i < len(lines): i += 1
   |                          ^
53 |     while i < len(lines) and lines[i].lstrip().startswith(("import ","from ")):
54 |         i += 1
   |

E702 Multiple statements on one line (semicolon)
  --> tools/ci/sweep_tests_tools.py:78:26
   |
76 |         txt = strip_mock_classes(txt)
77 |         if txt != txt0:
78 |             write(p, txt); changed += 1
   |                          ^
79 |
80 | print(f"Files changed: {changed}")
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tools/ci/tighten_settings_types.py:2:1
  |
1 |   # tools/ci/tighten_settings_types.py
2 | / from pathlib import Path
3 | | import re
  | |_________^
4 |
5 |   ROOT = Path(__file__).resolve().parents[2]
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tools/ci/unwrap_import_guards.py:1:1
  |
1 | / from pathlib import Path
2 | | import re
  | |_________^
3 |
4 |   ROOT = Path(__file__).resolve().parents[2]
  |
help: Organize imports

F401 [*] `re` imported but unused
 --> tools/ci/unwrap_import_guards.py:2:8
  |
1 | from pathlib import Path
2 | import re
  |        ^^
3 |
4 | ROOT = Path(__file__).resolve().parents[2]
  |
help: Remove unused import: `re`

F841 Local variable `body_end` is assigned to but never used
  --> tools/ci/unwrap_import_guards.py:40:13
   |
38 |                 try_body_lines.append(lines[j])
39 |                 j += 1
40 |             body_end = j
   |             ^^^^^^^^
41 |
42 |             # Check if next block is "except ImportError"
   |
help: Remove assignment to unused variable `body_end`

BLE001 Do not catch blind exception: `Exception`
   --> tools/ci/unwrap_import_guards.py:122:16
    |
120 |                     continue
121 |             files += 1
122 |         except Exception as e:
    |                ^^^^^^^^^
123 |             print(f"Error processing {p.relative_to(ROOT)}: {e}")
124 |             continue
    |

F841 Local variable `has_shell_false` is assigned to but never used
  --> tools/codemods/codemod_io_safety_yaml.py:83:21
   |
81 |                     has_timeout = True
82 |                 if "shell=False" in check_line:
83 |                     has_shell_false = True
   |                     ^^^^^^^^^^^^^^^
84 |
85 |             # Add missing parameters
   |
help: Remove assignment to unused variable `has_shell_false`

BLE001 Do not catch blind exception: `Exception`
   --> tools/codemods/codemod_io_safety_yaml.py:226:12
    |
224 |             return True
225 |
226 |     except Exception as e:
    |            ^^^^^^^^^
227 |         print(f"Error processing {filepath}: {e}")
228 |         return False
    |

BLE001 Do not catch blind exception: `Exception`
   --> tools/codemods/codemod_logging_time.py:126:12
    |
124 |             return True
125 |
126 |     except Exception as e:
    |            ^^^^^^^^^
127 |         print(f"Error processing {filepath}: {e}")
128 |         return False
    |

I001 [*] Import block is un-sorted or un-formatted
 --> tools/codemods/remove_import_guards.py:1:1
  |
1 | / from __future__ import annotations
2 | | from pathlib import Path
3 | | import libcst as cst
4 | | import libcst.matchers as m
  | |___________________________^
5 |
6 |   ROOT = Path("ai_trading")
  |
help: Organize imports

F401 [*] `libcst.matchers` imported but unused
 --> tools/codemods/remove_import_guards.py:4:27
  |
2 | from pathlib import Path
3 | import libcst as cst
4 | import libcst.matchers as m
  |                           ^
5 |
6 | ROOT = Path("ai_trading")
  |
help: Remove unused import: `libcst.matchers`

UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
  --> tools/codemods/remove_import_guards.py:31:24
   |
29 |             if isinstance(stmt, cst.SimpleStatementLine):
30 |                 for substmt in stmt.body:
31 |                     if isinstance(substmt, (cst.Import, cst.ImportFrom)):
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
32 |                         import_statements.append(stmt)
33 |                         break
   |
help: Convert to `X | Y`

BLE001 Do not catch blind exception: `Exception`
  --> tools/codemods/remove_import_guards.py:55:12
   |
53 |             p.write_text(new.code, encoding="utf-8")
54 |             return True
55 |     except Exception as e:
   |            ^^^^^^^^^
56 |         print(f"Error transforming {p}: {e}")
57 |     return False
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tools/codemods/replace_eval_exec.py:1:1
  |
1 | / from __future__ import annotations
2 | | from pathlib import Path
3 | | import re
  | |_________^
4 |
5 |   ROOT = Path("ai_trading")
  |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> tools/codemods/replace_eval_exec.py:46:16
   |
44 |                 changed_files += 1
45 |                 print(f"Replaced eval/exec in: {p}")
46 |         except Exception as e:
   |                ^^^^^^^^^
47 |             print(f"Error processing {p}: {e}")
48 |     print(f"eval/exec replacements: changed {changed_files} files")
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tools/codemods/strip_config_magic.py:1:1
  |
1 | / from __future__ import annotations
2 | | from pathlib import Path
3 | | import libcst as cst
4 | | import libcst.matchers as m
  | |___________________________^
5 |
6 |   CFG_INIT = Path("ai_trading/config/__init__.py")
  |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> tools/codemods/strip_config_magic.py:47:16
   |
45 |                 CFG_INIT.write_text(new.code, encoding="utf-8")
46 |                 print(f"Removed __getattr__ from: {CFG_INIT}")
47 |         except Exception as e:
   |                ^^^^^^^^^
48 |             print(f"Error processing {CFG_INIT}: {e}")
   |

BLE001 Do not catch blind exception: `Exception`
  --> tools/codemods/strip_config_magic.py:62:16
   |
60 |                 management.write_text(new.code, encoding="utf-8")
61 |                 print(f"Removed __getattr__ from: {management}")
62 |         except Exception as e:
   |                ^^^^^^^^^
63 |             print(f"Error processing {management}: {e}")
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tools/codemods/sweep_fix.py:2:1
  |
1 |   # tools/codemods/sweep_fix.py
2 | / import pathlib
3 | | import sys
4 | | import logging
5 | |
6 | | import libcst as cst
7 | | import libcst.matchers as m
  | |___________________________^
8 |
9 |   logger = logging.getLogger(__name__)
  |
help: Organize imports

F841 [*] Local variable `e` is assigned to but never used
   --> tools/codemods/sweep_fix.py:146:45
    |
144 |     try:
145 |         src = p.read_text(encoding="utf-8")
146 |     except (OSError, UnicodeDecodeError) as e:
    |                                             ^
147 |         logger.exception(f"Failed to read file {p}")
148 |         return
    |
help: Remove assignment to unused variable `e`

F841 [*] Local variable `e` is assigned to but never used
   --> tools/codemods/sweep_fix.py:151:45
    |
149 |     try:
150 |         mod = cst.parse_module(src)
151 |     except (cst.ParserError, ValueError) as e:
    |                                             ^
152 |         logger.exception(f"Failed to parse file {p}")
153 |         return
    |
help: Remove assignment to unused variable `e`

E401 [*] Multiple imports on one line
 --> tools/fix_import_time.py:2:1
  |
1 | # tools/fix_import_time.py
2 | import pathlib, re
  | ^^^^^^^^^^^^^^^^^^
3 |
4 | ROOT = pathlib.Path(__file__).resolve().parents[1]
  |
help: Split imports

I001 [*] Import block is un-sorted or un-formatted
 --> tools/fix_import_time.py:2:1
  |
1 | # tools/fix_import_time.py
2 | import pathlib, re
  | ^^^^^^^^^^^^^^^^^^
3 |
4 | ROOT = pathlib.Path(__file__).resolve().parents[1]
  |
help: Organize imports

E701 Multiple statements on one line (colon)
  --> tools/fix_import_time.py:30:19
   |
29 | def ensure_getter_imports(lines, getters):
30 |     if not getters: return False
   |                   ^
31 |     imp_line = IMPORT_GETTERS_TMPL.format(", ".join(sorted(getters)))
32 |     joined = "".join(lines)
   |

E701 Multiple statements on one line (colon)
  --> tools/fix_import_time.py:33:26
   |
31 |     imp_line = IMPORT_GETTERS_TMPL.format(", ".join(sorted(getters)))
32 |     joined = "".join(lines)
33 |     if imp_line in joined: return False
   |                          ^
34 |     idx = 0
35 |     while idx < len(lines) and lines[idx].startswith(("#!", "# -*-", "from __future__")):
   |

E701 Multiple statements on one line (colon)
  --> tools/fix_import_time.py:49:17
   |
47 |     while True:
48 |         m = func.search(j, pos)
49 |         if not m: break
   |                 ^
50 |         start = m.end()
51 |         head_line = j[:m.start()].count("\n")
   |

E701 Multiple statements on one line (colon)
   --> tools/fix_import_time.py:104:53
    |
102 |     changed = 0
103 |     for py in ROOT.rglob("*.py"):
104 |         if any(part in EXCLUDE for part in py.parts): continue
    |                                                     ^
105 |         if py.parts[0] not in {"ai_trading", "tests"}: continue
106 |         if py.name == "settings.py" and py.parts[-2] == "ai_trading": continue
    |

E701 Multiple statements on one line (colon)
   --> tools/fix_import_time.py:105:54
    |
103 |     for py in ROOT.rglob("*.py"):
104 |         if any(part in EXCLUDE for part in py.parts): continue
105 |         if py.parts[0] not in {"ai_trading", "tests"}: continue
    |                                                      ^
106 |         if py.name == "settings.py" and py.parts[-2] == "ai_trading": continue
107 |         try:
    |

E701 Multiple statements on one line (colon)
   --> tools/fix_import_time.py:106:69
    |
104 |         if any(part in EXCLUDE for part in py.parts): continue
105 |         if py.parts[0] not in {"ai_trading", "tests"}: continue
106 |         if py.name == "settings.py" and py.parts[-2] == "ai_trading": continue
    |                                                                     ^
107 |         try:
108 |             if patch_file(py): changed += 1
    |

E701 Multiple statements on one line (colon)
   --> tools/fix_import_time.py:108:30
    |
106 |         if py.name == "settings.py" and py.parts[-2] == "ai_trading": continue
107 |         try:
108 |             if patch_file(py): changed += 1
    |                              ^
109 |         except Exception as e:
110 |             print(f"PATCH_FAIL {py}: {e}")
    |

BLE001 Do not catch blind exception: `Exception`
   --> tools/fix_import_time.py:109:16
    |
107 |         try:
108 |             if patch_file(py): changed += 1
109 |         except Exception as e:
    |                ^^^^^^^^^
110 |             print(f"PATCH_FAIL {py}: {e}")
111 |     print(f"Done. Files changed: {changed}")
    |

F401 [*] `shlex` imported but unused
  --> tools/import_contract.py:14:8
   |
12 | import argparse
13 | import os
14 | import shlex
   |        ^^^^^
15 | import subprocess
16 | import sys
   |
help: Remove unused import: `shlex`

UP035 `typing.List` is deprecated, use `list` instead
  --> tools/import_contract.py:17:1
   |
15 | import subprocess
16 | import sys
17 | from typing import List
   | ^^^^^^^^^^^^^^^^^^^^^^^
   |

F841 Local variable `simulate` is assigned to but never used
  --> tools/import_contract.py:26:5
   |
25 |     # Allow tests to simulate a hang without touching real modules
26 |     simulate = "IMPORT_CONTRACT_SIMULATE_HANG" in env
   |     ^^^^^^^^
27 |
28 |     # Build a tiny Python snippet that imports the module; optionally sleeps to simulate hang
   |
help: Remove assignment to unused variable `simulate`

UP022 Prefer `capture_output` over sending `stdout` and `stderr` to `PIPE`
  --> tools/import_contract.py:36:12
   |
35 |       args = [sys.executable, "-X", "utf8", "-c", code]
36 |       return subprocess.run(
   |  ____________^
37 | |         args,
38 | |         env=env,
39 | |         stdout=subprocess.PIPE,
40 | |         stderr=subprocess.PIPE,
41 | |         text=True,
42 | |         timeout=timeout,
43 | |         check=False,
44 | |     )
   | |_____^
   |
help: Replace with `capture_output` keyword argument

UP006 [*] Use `list` instead of `List` for type annotation
  --> tools/import_contract.py:47:16
   |
47 | def main(argv: List[str] | None = None) -> int:
   |                ^^^^
48 |     p = argparse.ArgumentParser()
49 |     p.add_argument("--modules", default="ai_trading,trade_execution", help="Comma-separated module list to import")
   |
help: Replace with `list`

F841 [*] Local variable `te` is assigned to but never used
  --> tools/import_contract.py:60:45
   |
58 |         try:
59 |             cp = _run_import_in_subprocess(mod, args.timeout)
60 |         except subprocess.TimeoutExpired as te:
   |                                             ^^
61 |             msg = f"TIMEOUT importing {mod} after {args.timeout:.1f}s"
62 |             print(msg, file=sys.stderr)
   |
help: Remove assignment to unused variable `te`

I001 [*] Import block is un-sorted or un-formatted
 --> tools/migrate_metrics_logger.py:2:1
  |
1 |   # tools/migrate_metrics_logger.py
2 | / from __future__ import annotations
3 | | import io, re, sys
4 | | from pathlib import Path
  | |________________________^
5 |
6 |   ROOT = Path(__file__).resolve().parents[1]  # repo root (…/ai_trading)
  |
help: Organize imports

E401 [*] Multiple imports on one line
 --> tools/migrate_metrics_logger.py:3:1
  |
1 | # tools/migrate_metrics_logger.py
2 | from __future__ import annotations
3 | import io, re, sys
  | ^^^^^^^^^^^^^^^^^^
4 | from pathlib import Path
  |
help: Split imports

F401 [*] `io` imported but unused
 --> tools/migrate_metrics_logger.py:3:8
  |
1 | # tools/migrate_metrics_logger.py
2 | from __future__ import annotations
3 | import io, re, sys
  |        ^^
4 | from pathlib import Path
  |
help: Remove unused import: `io`

I001 [*] Import block is un-sorted or un-formatted
 --> tools/package_health.py:3:1
  |
1 |   """Quick health probes for CI diagnostics."""
2 |
3 | / from pathlib import Path
4 | | import sys
  | |__________^
5 |
6 |   ROOT = Path(__file__).resolve().parents[1]
  |
help: Organize imports

BLE001 Do not catch blind exception: `Exception`
  --> tools/package_health.py:17:12
   |
15 |         print("[health] psutil: ok")
16 |         return True
17 |     except Exception as e:
   |            ^^^^^^^^^
18 |         print("[health] psutil: MISSING ->", e)
19 |         return False
   |

BLE001 Do not catch blind exception: `Exception`
  --> tools/package_health.py:29:12
   |
27 |         print(f"[health] alpaca_trade_api: ok (version={ver})")
28 |         return True
29 |     except Exception as e:
   |            ^^^^^^^^^
30 |         print("[health] alpaca_trade_api: MISSING ->", e)
31 |         return False
   |

BLE001 Do not catch blind exception: `Exception`
  --> tools/package_health.py:40:12
   |
38 |         print("[health] strategy_allocator: ok")
39 |         return True
40 |     except Exception as e:
   |            ^^^^^^^^^
41 |         print("[health] strategy_allocator: MISSING/INVALID ->", e)
42 |         return False
   |

BLE001 Do not catch blind exception: `Exception`
  --> tools/package_health.py:51:12
   |
49 |         import pytest_asyncio  # type: ignore  # noqa: F401
50 |         print("[health] pytest-asyncio: ok")
51 |     except Exception as e:
   |            ^^^^^^^^^
52 |         ok = False
53 |         print("[health] pytest-asyncio: MISSING ->", e)
   |

BLE001 Do not catch blind exception: `Exception`
  --> tools/package_health.py:57:12
   |
55 |         import anyio  # type: ignore  # noqa: F401
56 |         print("[health] anyio: ok")
57 |     except Exception as e:
   |            ^^^^^^^^^
58 |         ok = False
59 |         print("[health] anyio: MISSING ->", e)
   |

BLE001 Do not catch blind exception: `Exception`
  --> tools/package_health.py:74:12
   |
72 |         import joblib  # noqa
73 |         print('[health] joblib: ok')
74 |     except Exception as e:
   |            ^^^^^^^^^
75 |         print('[health] joblib: MISSING ->', e)
   |

BLE001 Do not catch blind exception: `Exception`
  --> tools/package_health.py:93:12
   |
91 |         import joblib  # noqa: F401
92 |         print("[health] joblib: ok")
93 |     except Exception as e:
   |            ^^^^^^^^^
94 |         print("[health] joblib: MISSING ->", e)
95 |         return False
   |

E401 [*] Multiple imports on one line
 --> tools/scan_import_time.py:2:1
  |
1 | # tools/scan_import_time.py
2 | import pathlib, re, sys
  | ^^^^^^^^^^^^^^^^^^^^^^^
3 |
4 | ROOT = pathlib.Path(__file__).resolve().parents[1]
  |
help: Split imports

I001 [*] Import block is un-sorted or un-formatted
 --> tools/scan_import_time.py:2:1
  |
1 | # tools/scan_import_time.py
2 | import pathlib, re, sys
  | ^^^^^^^^^^^^^^^^^^^^^^^
3 |
4 | ROOT = pathlib.Path(__file__).resolve().parents[1]
  |
help: Organize imports

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:18:40
   |
16 |     txt = p.read_text(encoding="utf-8", errors="ignore")
17 |     hits = []
18 |     if PATS["MODULE_CONST"].search(txt): hits.append("MODULE_CONST_FROM_SETTINGS")
   |                                        ^
19 |     if PATS["MODULE_CFG"].search(txt):   hits.append("MODULE_CFG_FROM_SETTINGS")
20 |     if PATS["DIRECT_ATTR"].search(txt):  hits.append("DIRECT_SETTINGS_ATTR")
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:19:38
   |
17 |     hits = []
18 |     if PATS["MODULE_CONST"].search(txt): hits.append("MODULE_CONST_FROM_SETTINGS")
19 |     if PATS["MODULE_CFG"].search(txt):   hits.append("MODULE_CFG_FROM_SETTINGS")
   |                                      ^
20 |     if PATS["DIRECT_ATTR"].search(txt):  hits.append("DIRECT_SETTINGS_ATTR")
21 |     if PATS["BARE_CALL"].search(txt):    hits.append("BARE_GET_SETTINGS")
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:20:39
   |
18 |     if PATS["MODULE_CONST"].search(txt): hits.append("MODULE_CONST_FROM_SETTINGS")
19 |     if PATS["MODULE_CFG"].search(txt):   hits.append("MODULE_CFG_FROM_SETTINGS")
20 |     if PATS["DIRECT_ATTR"].search(txt):  hits.append("DIRECT_SETTINGS_ATTR")
   |                                       ^
21 |     if PATS["BARE_CALL"].search(txt):    hits.append("BARE_GET_SETTINGS")
22 |     return hits
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:21:37
   |
19 |     if PATS["MODULE_CFG"].search(txt):   hits.append("MODULE_CFG_FROM_SETTINGS")
20 |     if PATS["DIRECT_ATTR"].search(txt):  hits.append("DIRECT_SETTINGS_ATTR")
21 |     if PATS["BARE_CALL"].search(txt):    hits.append("BARE_GET_SETTINGS")
   |                                     ^
22 |     return hits
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:27:53
   |
25 |     any_hits = False
26 |     for py in ROOT.rglob("*.py"):
27 |         if any(part in EXCLUDE for part in py.parts): continue
   |                                                     ^
28 |         if py.parts[0] not in INCLUDE: continue
29 |         hits = scan_file(py)
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:28:38
   |
26 |     for py in ROOT.rglob("*.py"):
27 |         if any(part in EXCLUDE for part in py.parts): continue
28 |         if py.parts[0] not in INCLUDE: continue
   |                                      ^
29 |         hits = scan_file(py)
30 |         if hits:
   |

Found 1752 errors.
[*] 751 fixable with the `--fix` option (128 hidden fixes can be enabled with the `--unsafe-fixes` option).
