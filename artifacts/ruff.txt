ai_trading/execution/costs.py:385:28: DTZ011 `datetime.date.today()` used
    |
383 |         """
384 |         if trading_date is None:
385 |             trading_date = date.today()
    |                            ^^^^^^^^^^^^ DTZ011
386 | 
387 |         snapshot_file = self.data_path / f"{trading_date.strftime('%Y%m%d')}.parquet"
    |
    = help: Use `datetime.datetime.now(tz=...).date()` instead

ai_trading/logging/__init__.py:558:22: DTZ011 `datetime.date.today()` used
    |
556 |     if not equity_curve:
557 |         return
558 |     as_of = as_of or date.today()
    |                      ^^^^^^^^^^^^ DTZ011
559 |     returns = pd.Series(equity_curve).pct_change().dropna()
560 |     roll = returns.tail(20)
    |
    = help: Use `datetime.datetime.now(tz=...).date()` instead

ai_trading/utils/base.py:287:19: DTZ011 `datetime.date.today()` used
    |
285 |             from ai_trading.data_fetcher import get_daily_df  # type: ignore
286 | 
287 |             end = dt.date.today()
    |                   ^^^^^^^^^^^^^^^ DTZ011
288 |             start = end - dt.timedelta(days=5)
289 |             df = get_daily_df(symbol, start, end)
    |
    = help: Use `datetime.datetime.now(tz=...).date()` instead

ai_trading/utils/base.py:365:45: DTZ011 `datetime.date.today()` used
    |
363 |             # Provide more detailed information about why schedule is empty
364 |             is_weekend = check_time.weekday() >= 5
365 |             is_future = check_time.date() > dt.date.today()
    |                                             ^^^^^^^^^^^^^^^ DTZ011
366 | 
367 |             if is_weekend:
    |
    = help: Use `datetime.datetime.now(tz=...).date()` instead

scripts/health_check.py:34:60: F401 `production_monitoring.HealthCheckResult` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
32 |         get_production_monitor,
33 |     )
34 |     from production_monitoring import HealthCheckResult as ProdHealthCheckResult
   |                                                            ^^^^^^^^^^^^^^^^^^^^^ F401
35 |     from production_monitoring import HealthStatus as ProdHealthStatus
36 |     PRODUCTION_MONITORING_AVAILABLE = True
   |
   = help: Remove unused import: `production_monitoring.HealthCheckResult`

scripts/health_check.py:35:55: F401 `production_monitoring.HealthStatus` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
33 |     )
34 |     from production_monitoring import HealthCheckResult as ProdHealthCheckResult
35 |     from production_monitoring import HealthStatus as ProdHealthStatus
   |                                                       ^^^^^^^^^^^^^^^^ F401
36 |     PRODUCTION_MONITORING_AVAILABLE = True
37 | except ImportError:
   |
   = help: Remove unused import: `production_monitoring.HealthStatus`

scripts/health_check.py:469:41: F401 `ai_trading.core.bot_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
467 |         # Check if trading modules are importable
468 |         try:
469 |             from ai_trading.core import bot_engine
    |                                         ^^^^^^^^^^ F401
470 |             details["bot_engine"] = "OK"
471 |         except ImportError as e:
    |
    = help: Remove unused import: `ai_trading.core.bot_engine`

scripts/health_check.py:476:20: F401 `trade_execution` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
475 |         try:
476 |             import trade_execution
    |                    ^^^^^^^^^^^^^^^ F401
477 |             details["trade_execution"] = "OK"
478 |         except ImportError as e:
    |
    = help: Remove unused import: `trade_execution`

scripts/monitoring_dashboard.py:473:26: DTZ006 `datetime.datetime.fromtimestamp()` called without a `tz` argument
    |
471 |         daily_pnl = defaultdict(float)
472 |         for trade in trades:
473 |             trade_date = datetime.fromtimestamp(trade['timestamp']).date()
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DTZ006
474 |             daily_pnl[trade_date] += trade['pnl']
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

scripts/production_integration.py:28:9: F401 `production_monitoring.get_production_monitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
26 |         CircuitBreaker,
27 |         ProductionMonitor,
28 |         get_production_monitor,
   |         ^^^^^^^^^^^^^^^^^^^^^^ F401
29 |         initialize_production_monitoring,
30 |     )
   |
   = help: Remove unused import: `production_monitoring.get_production_monitor`

scripts/production_integration.py:37:9: F401 `performance_optimizer.cached` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
35 | try:
36 |     from performance_optimizer import (
37 |         cached,
   |         ^^^^^^ F401
38 |         get_performance_optimizer,
39 |         initialize_performance_optimizer,
   |
   = help: Remove unused import

scripts/production_integration.py:38:9: F401 `performance_optimizer.get_performance_optimizer` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
36 |     from performance_optimizer import (
37 |         cached,
38 |         get_performance_optimizer,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ F401
39 |         initialize_performance_optimizer,
40 |         profile_performance,
   |
   = help: Remove unused import

scripts/production_integration.py:40:9: F401 `performance_optimizer.profile_performance` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
38 |         get_performance_optimizer,
39 |         initialize_performance_optimizer,
40 |         profile_performance,
   |         ^^^^^^^^^^^^^^^^^^^ F401
41 |     )
42 |     PERFORMANCE_OPTIMIZER_AVAILABLE = True
   |
   = help: Remove unused import

scripts/production_integration.py:47:34: F401 `security_manager.get_security_manager` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
46 | try:
47 |     from security_manager import get_security_manager, initialize_security_manager
   |                                  ^^^^^^^^^^^^^^^^^^^^ F401
48 |     SECURITY_MANAGER_AVAILABLE = True
49 | except ImportError:
   |
   = help: Remove unused import: `security_manager.get_security_manager`

scripts/production_integration.py:54:9: F401 `monitoring_dashboard.get_monitoring_dashboard` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
52 | try:
53 |     from monitoring_dashboard import (
54 |         get_monitoring_dashboard,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ F401
55 |         initialize_monitoring_dashboard,
56 |     )
   |
   = help: Remove unused import: `monitoring_dashboard.get_monitoring_dashboard`

scripts/production_integration.py:62:30: F401 `health_check.health_monitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
61 | try:
62 |     from health_check import health_monitor
   |                              ^^^^^^^^^^^^^^ F401
63 |     HEALTH_CHECK_AVAILABLE = True
64 | except ImportError:
   |
   = help: Remove unused import: `health_check.health_monitor`

scripts/production_validator.py:789:20: F401 `cryptography` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
787 |         # Check if encryption modules are available
788 |         try:
789 |             import cryptography
    |                    ^^^^^^^^^^^^ F401
790 |             return 95
791 |         except ImportError:
    |
    = help: Remove unused import: `cryptography`

scripts/production_validator.py:815:20: F401 `trade_execution` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
813 |         try:
814 |             # Test imports
815 |             import trade_execution
    |                    ^^^^^^^^^^^^^^^ F401
816 |             from ai_trading.core import bot_engine  # AI-AGENT-REF: canonical import
817 |             return 95
    |
    = help: Remove unused import: `trade_execution`

scripts/production_validator.py:816:41: F401 `ai_trading.core.bot_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
814 |             # Test imports
815 |             import trade_execution
816 |             from ai_trading.core import bot_engine  # AI-AGENT-REF: canonical import
    |                                         ^^^^^^^^^^ F401
817 |             return 95
818 |         except ImportError:
    |
    = help: Remove unused import: `ai_trading.core.bot_engine`

scripts/production_validator.py:833:36: F401 `ai_trading.data_fetcher` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
831 |         """Test data processing functionality."""
832 |         try:
833 |             from ai_trading import data_fetcher
    |                                    ^^^^^^^^^^^^ F401
834 | 
835 |             import indicators
    |
    = help: Remove unused import: `ai_trading.data_fetcher`

scripts/production_validator.py:835:20: F401 `indicators` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
833 |             from ai_trading import data_fetcher
834 | 
835 |             import indicators
    |                    ^^^^^^^^^^ F401
836 |             return 90
837 |         except ImportError:
    |
    = help: Remove unused import: `indicators`

scripts/production_validator.py:843:46: F401 `ai_trading.telemetry.metrics_logger` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
841 |         """Test reporting system functionality."""
842 |         try:
843 |             from ai_trading.telemetry import metrics_logger
    |                                              ^^^^^^^^^^^^^^ F401
844 |             return 85
845 |         except ImportError:
    |
    = help: Remove unused import: `ai_trading.telemetry.metrics_logger`

scripts/retrain_model.py:483:14: DTZ011 `datetime.date.today()` used
    |
481 |     """
482 |     raw_store: dict[str, pd.DataFrame] = {}
483 |     end_dt = date.today()
    |              ^^^^^^^^^^^^ DTZ011
484 |     start_dt = end_dt - timedelta(days=lookback_days)
    |
    = help: Use `datetime.datetime.now(tz=...).date()` instead

scripts/run_wfa.py:22:60: F401 `ai_trading.signals.generate_cost_aware_signals` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
20 |     from ai_trading.evaluation.walkforward import WalkForwardEvaluator
21 |     from ai_trading.logging import logger
22 |     from ai_trading.signals import SignalDecisionPipeline, generate_cost_aware_signals
   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ F401
23 | except ImportError:
24 |     sys.exit(1)
   |
   = help: Remove unused import: `ai_trading.signals.generate_cost_aware_signals`

scripts/scalability_manager.py:428:35: DTZ006 `datetime.datetime.fromtimestamp()` called without a `tz` argument
    |
426 |                 if backup_path.is_dir():
427 |                     # Check backup age
428 |                     backup_time = datetime.fromtimestamp(backup_path.stat().st_mtime)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DTZ006
429 | 
430 |                     if backup_time < cutoff_date:
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

scripts/scalability_manager.py:458:34: DTZ006 `datetime.datetime.fromtimestamp()` called without a `tz` argument
    |
456 |                 backup_list.append({
457 |                     'name': backup_path.name,
458 |                     'timestamp': datetime.fromtimestamp(backup_path.stat().st_mtime).isoformat(),
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DTZ006
459 |                     'size': size
460 |                 })
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

scripts/smoke_imports.py:55:43: F401 `ai_trading.monitoring.MetricsCollector` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
53 |     # Monitoring classes - critical for startup
54 |     try:
55 |         from ai_trading.monitoring import MetricsCollector, PerformanceMonitor
   |                                           ^^^^^^^^^^^^^^^^ F401
56 |         tests.append((True, "✅ MetricsCollector and PerformanceMonitor imported successfully"))
57 |     except ImportError as e:
   |
   = help: Remove unused import

scripts/smoke_imports.py:55:61: F401 `ai_trading.monitoring.PerformanceMonitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
53 |     # Monitoring classes - critical for startup
54 |     try:
55 |         from ai_trading.monitoring import MetricsCollector, PerformanceMonitor
   |                                                             ^^^^^^^^^^^^^^^^^^ F401
56 |         tests.append((True, "✅ MetricsCollector and PerformanceMonitor imported successfully"))
57 |     except ImportError as e:
   |
   = help: Remove unused import

scripts/validate_startup_fixes.py:33:32: F401 `ai_trading.runner` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
32 |     try:
33 |         from ai_trading import runner
   |                                ^^^^^^ F401
34 |         from ai_trading.config.management import _resolve_alpaca_env
35 |         logging.info("   ✓ Core modules imported without credentials")
   |
   = help: Remove unused import: `ai_trading.runner`

scripts/validate_startup_fixes.py:34:50: F401 `ai_trading.config.management._resolve_alpaca_env` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
32 |     try:
33 |         from ai_trading import runner
34 |         from ai_trading.config.management import _resolve_alpaca_env
   |                                                  ^^^^^^^^^^^^^^^^^^^ F401
35 |         logging.info("   ✓ Core modules imported without credentials")
36 |         logging.info("   ✓ No sys.exit() calls during import")
   |
   = help: Remove unused import: `ai_trading.config.management._resolve_alpaca_env`

tests/test_alpha_quality.py:137:16: F401 `os` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
135 |     """Test model registry functionality."""
136 |     try:
137 |         import os
    |                ^^ F401
138 |         import tempfile
    |
    = help: Remove unused import: `os`

tests/test_centralized_logging_no_duplicates.py:12:9: F401 `ai_trading.logging._LOGGING_CONFIGURED` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
10 | try:
11 |     from ai_trading.logging import (
12 |         _LOGGING_CONFIGURED,
   |         ^^^^^^^^^^^^^^^^^^^ F401
13 |         _LOGGING_LOCK,
14 |         get_logger,
   |
   = help: Remove unused import

tests/test_centralized_logging_no_duplicates.py:13:9: F401 `ai_trading.logging._LOGGING_LOCK` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
11 |     from ai_trading.logging import (
12 |         _LOGGING_CONFIGURED,
13 |         _LOGGING_LOCK,
   |         ^^^^^^^^^^^^^ F401
14 |         get_logger,
15 |         setup_logging,
   |
   = help: Remove unused import

tests/test_centralized_logging_no_duplicates.py:14:9: F401 `ai_trading.logging.get_logger` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
12 |         _LOGGING_CONFIGURED,
13 |         _LOGGING_LOCK,
14 |         get_logger,
   |         ^^^^^^^^^^ F401
15 |         setup_logging,
16 |         validate_logging_setup,
   |
   = help: Remove unused import

tests/test_centralized_logging_no_duplicates.py:78:16: F401 `logging_config` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
76 |     # Test that logging_config cannot be imported
77 |     try:
78 |         import logging_config
   |                ^^^^^^^^^^^^^^ F401
79 |         assert False, "logging_config should not be importable after removal"
80 |     except ImportError:
   |
   = help: Remove unused import: `logging_config`

tests/test_centralized_logging_no_duplicates.py:85:16: F401 `logger` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
83 |     # Test that logger cannot be imported
84 |     try:
85 |         import logger
   |                ^^^^^^ F401
86 |         assert False, "logger should not be importable after removal"
87 |     except ImportError:
   |
   = help: Remove unused import: `logger`

tests/test_critical_datetime_fixes.py:26:20: DTZ001 `datetime.datetime()` called without a `tzinfo` argument
   |
25 |         # Test with naive datetime
26 |         naive_dt = datetime(2025, 1, 1, 12, 0, 0)
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DTZ001
27 |         result = ensure_datetime(naive_dt)
   |
   = help: Pass a `datetime.timezone` object to the `tzinfo` parameter

tests/test_critical_issues_resolution.py:18:33: F401 `ai_trading.core.bot_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
16 | # Import the modules we need to test
17 | try:
18 |     from ai_trading.core import bot_engine
   |                                 ^^^^^^^^^^ F401
19 |     from ai_trading.execution.engine import ExecutionEngine, Order, OrderSide
20 |     from ai_trading.math.money import Money
   |
   = help: Remove unused import: `ai_trading.core.bot_engine`

tests/test_data_fetcher_extended.py:58:13: DTZ011 `datetime.date.today()` used
   |
56 | def test_get_minute_df_market_closed(monkeypatch):
57 |     monkeypatch.setattr(data_fetcher, "is_market_open", lambda: False)
58 |     today = datetime.date.today()
   |             ^^^^^^^^^^^^^^^^^^^^^ DTZ011
59 |     result = data_fetcher.get_minute_df("AAPL", today, today)
60 |     assert result.empty
   |
   = help: Use `datetime.datetime.now(tz=...).date()` instead

tests/test_data_fetcher_extended.py:80:50: DTZ011 `datetime.date.today()` used
   |
78 |     monkeypatch.setattr(data_fetcher, "is_market_open", lambda: True)
79 |     with pytest.raises(ValueError):
80 |         data_fetcher.get_minute_df("AAPL", None, datetime.date.today())
   |                                                  ^^^^^^^^^^^^^^^^^^^^^ DTZ011
81 |     with pytest.raises(TypeError):
82 |         data_fetcher.get_minute_df("AAPL", 123, datetime.date.today())
   |
   = help: Use `datetime.datetime.now(tz=...).date()` instead

tests/test_data_fetcher_extended.py:82:49: DTZ011 `datetime.date.today()` used
   |
80 |         data_fetcher.get_minute_df("AAPL", None, datetime.date.today())
81 |     with pytest.raises(TypeError):
82 |         data_fetcher.get_minute_df("AAPL", 123, datetime.date.today())
   |                                                 ^^^^^^^^^^^^^^^^^^^^^ DTZ011
   |
   = help: Use `datetime.datetime.now(tz=...).date()` instead

tests/test_data_fetcher_timezone.py:42:34: DTZ001 `datetime.datetime()` called without a `tzinfo` argument
   |
40 |     _install_fake_yf(monkeypatch)
41 | 
42 |     df1 = _yahoo_get_bars("SPY", datetime(2025, 8, 1), datetime(2025, 8, 10), "1Day")
   |                                  ^^^^^^^^^^^^^^^^^^^^ DTZ001
43 |     assert not df1.empty and df1["timestamp"].dt.tz is not None
   |
   = help: Pass a `datetime.timezone` object to the `tzinfo` parameter

tests/test_data_fetcher_timezone.py:42:56: DTZ001 `datetime.datetime()` called without a `tzinfo` argument
   |
40 |     _install_fake_yf(monkeypatch)
41 | 
42 |     df1 = _yahoo_get_bars("SPY", datetime(2025, 8, 1), datetime(2025, 8, 10), "1Day")
   |                                                        ^^^^^^^^^^^^^^^^^^^^^ DTZ001
43 |     assert not df1.empty and df1["timestamp"].dt.tz is not None
   |
   = help: Pass a `datetime.timezone` object to the `tzinfo` parameter

tests/test_datetime_wrappers.py:10:16: DTZ001 `datetime.datetime()` called without a `tzinfo` argument
   |
 8 | def test_naive_et_is_converted_to_utc():
 9 |     # AI-AGENT-REF: naive ET → UTC conversion
10 |     et_naive = datetime(2025, 8, 20, 9, 30)  # intended ET naive
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DTZ001
11 |     dt_utc = ensure_datetime(et_naive)
12 |     assert dt_utc.tzinfo is UTC
   |
   = help: Pass a `datetime.timezone` object to the `tzinfo` parameter

tests/test_datetime_wrappers.py:18:38: DTZ001 `datetime.datetime()` called without a `tzinfo` argument
   |
16 | def test_callable_is_unwrapped():
17 |     # AI-AGENT-REF: callable handling
18 |     dt_utc = ensure_datetime(lambda: datetime(2025, 8, 20, 9, 30))
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DTZ001
19 |     assert dt_utc.tzinfo is UTC
   |
   = help: Pass a `datetime.timezone` object to the `tzinfo` parameter

tests/test_enhanced_execution_debugging.py:22:9: F401 `ai_trading.execution.pnl_attributor.PnLEvent` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
20 |     from ai_trading.execution.pnl_attributor import (
21 |         PnLAttributor,
22 |         PnLEvent,
   |         ^^^^^^^^ F401
23 |         PnLSource,
24 |         get_pnl_attributor,
   |
   = help: Remove unused import: `ai_trading.execution.pnl_attributor.PnLEvent`

tests/test_ensure_utc.py:13:30: DTZ001 `datetime.datetime()` called without a `tzinfo` argument
   |
12 | def test_datetime_naive_to_utc():
13 |     dt = ensure_utc_datetime(datetime(2025, 8, 20, 12, 0, 0))
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DTZ001
14 |     assert dt.tzinfo == UTC
   |
   = help: Pass a `datetime.timezone` object to the `tzinfo` parameter

tests/test_fetch_and_screen.py:32:49: DTZ011 `datetime.date.today()` used
   |
31 |     types.SimpleNamespace(data_fetcher=data_fetcher)
32 |     result = data_fetcher.get_minute_df("AAPL", dt.date.today(), dt.date.today())
   |                                                 ^^^^^^^^^^^^^^^ DTZ011
33 |     if result is None:
34 |         result = data_fetcher.get_daily_df("AAPL", dt.date.today(), dt.date.today())
   |
   = help: Use `datetime.datetime.now(tz=...).date()` instead

tests/test_fetch_and_screen.py:32:66: DTZ011 `datetime.date.today()` used
   |
31 |     types.SimpleNamespace(data_fetcher=data_fetcher)
32 |     result = data_fetcher.get_minute_df("AAPL", dt.date.today(), dt.date.today())
   |                                                                  ^^^^^^^^^^^^^^^ DTZ011
33 |     if result is None:
34 |         result = data_fetcher.get_daily_df("AAPL", dt.date.today(), dt.date.today())
   |
   = help: Use `datetime.datetime.now(tz=...).date()` instead

tests/test_fetch_and_screen.py:34:52: DTZ011 `datetime.date.today()` used
   |
32 |     result = data_fetcher.get_minute_df("AAPL", dt.date.today(), dt.date.today())
33 |     if result is None:
34 |         result = data_fetcher.get_daily_df("AAPL", dt.date.today(), dt.date.today())
   |                                                    ^^^^^^^^^^^^^^^ DTZ011
35 |     assert health_check(result, "minute")
   |
   = help: Use `datetime.datetime.now(tz=...).date()` instead

tests/test_fetch_and_screen.py:34:69: DTZ011 `datetime.date.today()` used
   |
32 |     result = data_fetcher.get_minute_df("AAPL", dt.date.today(), dt.date.today())
33 |     if result is None:
34 |         result = data_fetcher.get_daily_df("AAPL", dt.date.today(), dt.date.today())
   |                                                                     ^^^^^^^^^^^^^^^ DTZ011
35 |     assert health_check(result, "minute")
   |
   = help: Use `datetime.datetime.now(tz=...).date()` instead

tests/test_fetch_and_screen.py:41:49: DTZ011 `datetime.date.today()` used
   |
39 |     df = _stub_df()
40 |     monkeypatch.setattr(data_fetcher, "get_minute_df", lambda *a, **k: df)
41 |     result = data_fetcher.get_minute_df("AAPL", dt.date.today(), dt.date.today())
   |                                                 ^^^^^^^^^^^^^^^ DTZ011
42 |     assert health_check(result, "minute")
   |
   = help: Use `datetime.datetime.now(tz=...).date()` instead

tests/test_fetch_and_screen.py:41:66: DTZ011 `datetime.date.today()` used
   |
39 |     df = _stub_df()
40 |     monkeypatch.setattr(data_fetcher, "get_minute_df", lambda *a, **k: df)
41 |     result = data_fetcher.get_minute_df("AAPL", dt.date.today(), dt.date.today())
   |                                                                  ^^^^^^^^^^^^^^^ DTZ011
42 |     assert health_check(result, "minute")
   |
   = help: Use `datetime.datetime.now(tz=...).date()` instead

tests/test_fixes.py:53:51: F401 `ai_trading.strategies.imports.TA_AVAILABLE` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
51 |         os.environ.setdefault('FLASK_PORT', '5000')
52 | 
53 |         from ai_trading.strategies.imports import TA_AVAILABLE, ta
   |                                                   ^^^^^^^^^^^^ F401
54 | 
55 |         # Test that ta object is always available (real or mock)
   |
   = help: Remove unused import: `ai_trading.strategies.imports.TA_AVAILABLE`

tests/test_intelligent_position_management.py:22:9: F401 `ai_trading.position.DivergenceType` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
20 |     from ai_trading.position import (
21 |         ConcentrationLevel,
22 |         DivergenceType,
   |         ^^^^^^^^^^^^^^ F401
23 |         IntelligentPositionManager,
24 |         MarketRegime,
   |
   = help: Remove unused import

tests/test_intelligent_position_management.py:28:9: F401 `ai_trading.position.ProfitTakingStrategy` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
26 |         PortfolioCorrelationAnalyzer,
27 |         ProfitTakingEngine,
28 |         ProfitTakingStrategy,
   |         ^^^^^^^^^^^^^^^^^^^^ F401
29 |         SignalStrength,
30 |         TechnicalSignalAnalyzer,
   |
   = help: Remove unused import

tests/test_intelligent_position_management.py:29:9: F401 `ai_trading.position.SignalStrength` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
27 |         ProfitTakingEngine,
28 |         ProfitTakingStrategy,
29 |         SignalStrength,
   |         ^^^^^^^^^^^^^^ F401
30 |         TechnicalSignalAnalyzer,
31 |         TrailingStopManager,
   |
   = help: Remove unused import

tests/test_intelligent_position_management.py:32:9: F401 `ai_trading.position.TrailingStopType` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
30 |         TechnicalSignalAnalyzer,
31 |         TrailingStopManager,
32 |         TrailingStopType,
   |         ^^^^^^^^^^^^^^^^ F401
33 |     )
34 | except ImportError:
   |
   = help: Remove unused import

tests/test_json_formatter.py:54:12: DTZ001 `datetime.datetime()` called without a `tzinfo` argument
   |
52 |     rec = _make_record(
53 |         arr=np.array([1, 2, 3]),
54 |         dt=datetime(2024, 1, 2, 3, 4, 5),
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DTZ001
55 |         d=date(2024, 1, 3),
56 |         foo=Foo(),
   |
   = help: Pass a `datetime.timezone` object to the `tzinfo` parameter

tests/test_problem_statement_validation.py:92:16: F401 `asyncio` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
90 |     """Test that asyncio uses modern get_running_loop pattern."""
91 |     try:
92 |         import asyncio
   |                ^^^^^^^ F401
93 |         import inspect
   |
   = help: Remove unused import: `asyncio`

tests/test_production_system.py:17:56: F401 `ai_trading.execution.production_engine.ProductionExecutionCoordinator` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
15 | try:
16 |     from ai_trading.core.enums import OrderSide, OrderType, RiskLevel
17 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F401
18 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
19 |     from ai_trading.risk.circuit_breakers import (
   |
   = help: Remove unused import: `ai_trading.execution.production_engine.ProductionExecutionCoordinator`

tests/test_production_system.py:18:48: F401 `ai_trading.monitoring.alerting.AlertManager` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
16 |     from ai_trading.core.enums import OrderSide, OrderType, RiskLevel
17 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
18 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |                                                ^^^^^^^^^^^^ F401
19 |     from ai_trading.risk.circuit_breakers import (
20 |         DrawdownCircuitBreaker,
   |
   = help: Remove unused import

tests/test_production_system.py:18:62: F401 `ai_trading.monitoring.alerting.AlertSeverity` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
16 |     from ai_trading.core.enums import OrderSide, OrderType, RiskLevel
17 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
18 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |                                                              ^^^^^^^^^^^^^ F401
19 |     from ai_trading.risk.circuit_breakers import (
20 |         DrawdownCircuitBreaker,
   |
   = help: Remove unused import

tests/test_production_system.py:20:9: F401 `ai_trading.risk.circuit_breakers.DrawdownCircuitBreaker` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
18 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
19 |     from ai_trading.risk.circuit_breakers import (
20 |         DrawdownCircuitBreaker,
   |         ^^^^^^^^^^^^^^^^^^^^^^ F401
21 |         TradingHaltManager,
22 |     )
   |
   = help: Remove unused import

tests/test_production_system.py:21:9: F401 `ai_trading.risk.circuit_breakers.TradingHaltManager` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
19 |     from ai_trading.risk.circuit_breakers import (
20 |         DrawdownCircuitBreaker,
21 |         TradingHaltManager,
   |         ^^^^^^^^^^^^^^^^^^ F401
22 |     )
23 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
   |
   = help: Remove unused import

tests/test_production_system.py:23:49: F401 `ai_trading.risk.position_sizing.ATRPositionSizer` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
21 |         TradingHaltManager,
22 |     )
23 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
   |                                                 ^^^^^^^^^^^^^^^^ F401
24 | except ImportError:
25 |     # Create mock classes for testing
   |
   = help: Remove unused import

tests/test_production_system.py:23:67: F401 `ai_trading.risk.position_sizing.DynamicPositionSizer` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
21 |         TradingHaltManager,
22 |     )
23 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
   |                                                                   ^^^^^^^^^^^^^^^^^^^^ F401
24 | except ImportError:
25 |     # Create mock classes for testing
   |
   = help: Remove unused import

tests/test_production_system.py:78:13: F401 `ai_trading.risk.circuit_breakers.CircuitBreakerState` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
76 |     try:
77 |         from ai_trading.risk.circuit_breakers import (
78 |             CircuitBreakerState,
   |             ^^^^^^^^^^^^^^^^^^^ F401
79 |             DrawdownCircuitBreaker,
80 |         )
   |
   = help: Remove unused import: `ai_trading.risk.circuit_breakers.CircuitBreakerState`

tests/test_strategy_components.py:51:13: F401 `ai_trading.strategies.multi_timeframe.SignalDirection` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
49 |         from ai_trading.strategies.multi_timeframe import (
50 |             MultiTimeframeAnalyzer,
51 |             SignalDirection,
   |             ^^^^^^^^^^^^^^^ F401
52 |             SignalStrength,
53 |         )
   |
   = help: Remove unused import

tests/test_strategy_components.py:52:13: F401 `ai_trading.strategies.multi_timeframe.SignalStrength` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
50 |             MultiTimeframeAnalyzer,
51 |             SignalDirection,
52 |             SignalStrength,
   |             ^^^^^^^^^^^^^^ F401
53 |         )
   |
   = help: Remove unused import

tests/test_strategy_components.py:101:13: F401 `ai_trading.strategies.regime_detection.VolatilityRegime` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
 99 |             MarketRegime,
100 |             RegimeDetector,
101 |             VolatilityRegime,
    |             ^^^^^^^^^^^^^^^^ F401
102 |         )
    |
    = help: Remove unused import: `ai_trading.strategies.regime_detection.VolatilityRegime`

tests/test_utc_timefmt.py:57:14: DTZ001 `datetime.datetime()` called without a `tzinfo` argument
   |
55 |     def test_format_datetime_utc_with_naive_datetime(self):
56 |         """Test formatting naive datetime (assumed UTC)."""
57 |         dt = datetime(2024, 1, 1, 12, 0, 0)  # No timezone
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DTZ001
58 |         result = format_datetime_utc(dt)
   |
   = help: Pass a `datetime.timezone` object to the `tzinfo` parameter

tests/test_utc_timefmt.py:171:20: DTZ001 `datetime.datetime()` called without a `tzinfo` argument
    |
169 |         assert formatted_utc.count('Z') == 1
170 | 
171 |         dt_naive = datetime(2024, 1, 1, 12, 0, 0)
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DTZ001
172 |         formatted_naive = format_datetime_utc(dt_naive)
173 |         assert 'ZZ' not in formatted_naive
    |
    = help: Pass a `datetime.timezone` object to the `tzinfo` parameter

Found 73 errors.
