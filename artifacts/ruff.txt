ai_trading/app.py:20:16: BLE001 Do not catch blind exception: `Exception`
   |
18 |         try:
19 |             from ai_trading.alpaca_api import ALPACA_AVAILABLE as sdk_ok  # type: ignore
20 |         except Exception:
   |                ^^^^^^^^^ BLE001
21 |             sdk_ok = False
22 |         try:
   |

ai_trading/app.py:30:16: BLE001 Do not catch blind exception: `Exception`
   |
28 |             key, secret, base_url = _resolve_alpaca_env()
29 |             paper = bool(base_url and ("paper" in base_url))
30 |         except Exception:
   |                ^^^^^^^^^ BLE001
31 |             trading_client, key, secret, base_url, paper = None, None, None, "", False
32 |         shadow = bool(
   |

ai_trading/broker/alpaca.py:29:1: E402 Module level import not at top of file
   |
29 | from ai_trading.exc import TRANSIENT_HTTP_EXC  # AI-AGENT-REF: Stage 2.1 centralized exc
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
30 |
31 | _log = get_logger(__name__)
   |

ai_trading/config/__init__.py:63:12: BLE001 Do not catch blind exception: `Exception`
   |
62 |         load_dotenv(override=True)
63 |     except Exception:
   |            ^^^^^^^^^ BLE001
64 |         pass
   |

ai_trading/config/__init__.py:114:20: BLE001 Do not catch blind exception: `Exception`
    |
112 |             try:
113 |                 get_settings.cache_clear()
114 |             except Exception:
    |                    ^^^^^^^^^ BLE001
115 |                 pass
116 |             _perform_env_validation()
    |

ai_trading/core/hyperparams_schema.py:189:12: BLE001 Do not catch blind exception: `Exception`
    |
187 |         logger.error(f"Invalid JSON in hyperparams file {file_path}: {e}")
188 |         return HyperparametersSchema()
189 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
190 |         logger.error(f"Error loading hyperparams from {file_path}: {e}")
191 |         return HyperparametersSchema()
    |

ai_trading/core/hyperparams_schema.py:230:12: BLE001 Do not catch blind exception: `Exception`
    |
228 |         return True
229 |
230 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
231 |         logger.error(f"Error saving hyperparams to {file_path}: {e}")
232 |         return False
    |

ai_trading/core/hyperparams_schema.py:307:20: BLE001 Do not catch blind exception: `Exception`
    |
305 |                 HyperparametersSchema(**data)
306 |                 report["valid_schema"] = True
307 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
308 |                 report["errors"].append(f"Schema validation failed: {e}")
    |

ai_trading/core/hyperparams_schema.py:312:16: BLE001 Do not catch blind exception: `Exception`
    |
310 |         except json.JSONDecodeError as e:
311 |             report["errors"].append(f"Invalid JSON: {e}")
312 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
313 |             report["errors"].append(f"File read error: {e}")
314 |     else:
    |

ai_trading/core/parameter_validator.py:124:16: BLE001 Do not catch blind exception: `Exception`
    |
122 |             return validation_result
123 |
124 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
125 |             logger.error(f"Error during parameter validation: {e}")
126 |             validation_result["overall_status"] = "ERROR"
    |

ai_trading/core/parameter_validator.py:185:16: BLE001 Do not catch blind exception: `Exception`
    |
183 |             return result
184 |
185 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
186 |             logger.error(f"Error validating parameter change for {parameter_name}: {e}")
187 |             result["status"] = "ERROR"
    |

ai_trading/core/protocols.py:6:72: F821 Undefined name `BotRuntime`
  |
5 | class AllocatorProtocol(Protocol):
6 |     def allocate(self, signals: Sequence[Mapping[str, Any]], runtime: "BotRuntime") -> Mapping[str, Any]: ...
  |                                                                        ^^^^^^^^^^ F821
  |

ai_trading/data/corp_actions.py:108:20: BLE001 Do not catch blind exception: `Exception`
    |
106 |                 self.logger.info(f"Loaded {len(self._actions)} symbols with corporate actions")
107 |                 
108 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
109 |                 self.logger.error(f"Error loading corporate actions: {e}")
110 |                 self._actions = {}
    |

ai_trading/data/corp_actions.py:132:16: BLE001 Do not catch blind exception: `Exception`
    |
130 |             self.logger.debug(f"Saved corporate actions to {actions_file}")
131 |             
132 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
133 |             self.logger.error(f"Error saving corporate actions: {e}")
    |

ai_trading/data/labels.py:59:12: BLE001 Do not catch blind exception: `Exception`
   |
57 |         return net_returns
58 |         
59 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
60 |         logger.error(f"Error calculating fixed horizon returns: {e}")
61 |         return pd.Series(dtype=float)
   |

ai_trading/data/labels.py:202:12: BLE001 Do not catch blind exception: `Exception`
    |
200 |         return result_df
201 |         
202 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
203 |         logger.error(f"Error in triple barrier labeling: {e}")
204 |         return pd.DataFrame(columns=['t1', 'ret', 'bin'])
    |

ai_trading/data/labels.py:227:12: BLE001 Do not catch blind exception: `Exception`
    |
225 |         return vol
226 |         
227 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
228 |         logger.error(f"Error calculating daily volatility: {e}")
229 |         return pd.Series(dtype=float)
    |

ai_trading/data/splits.py:176:17: F841 Local variable `test_end_time` is assigned to but never used
    |
174 |                 # For non-datetime indices, use index positions
175 |                 test_start_time = test_start_idx
176 |                 test_end_time = test_end_idx
    |                 ^^^^^^^^^^^^^ F841
177 |             
178 |             # Find training observations that don't overlap
    |
    = help: Remove assignment to unused variable `test_end_time`

ai_trading/data/universe.py:17:12: BLE001 Do not catch blind exception: `Exception`
   |
15 |         if p.is_file():
16 |             return str(p)
17 |     except Exception:  # pragma: no cover - defensive
   |            ^^^^^^^^^ BLE001
18 |         pass
19 |     return None
   |

ai_trading/data_fetcher.py:39:1: E402 Module level import not at top of file
   |
37 | yf = optional_import("yfinance")
38 |
39 | from ai_trading.logging import logger  # AI-AGENT-REF: centralized logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
40 |
41 | # ---------------------------------------------------------------------------
   |

ai_trading/data_fetcher.py:81:8: BLE001 Do not catch blind exception: `Exception`
   |
79 |         Timeout,
80 |     )
81 | except Exception:  # pragma: no cover - requests optional
   |        ^^^^^^^^^ BLE001
82 |     RequestException = Timeout = ConnectionError = HTTPError = Exception  # type: ignore
   |

ai_trading/database/connection.py:59:16: BLE001 Do not catch blind exception: `Exception`
   |
57 |                 return True
58 |
59 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
60 |             logger.error(f"Failed to connect to database: {e}")
61 |             return False
   |

ai_trading/database/connection.py:76:16: BLE001 Do not catch blind exception: `Exception`
   |
74 |                 logger.info("Database connection closed successfully")
75 |
76 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
77 |             logger.error(f"Error disconnecting from database: {e}")
   |

ai_trading/database/connection.py:89:16: BLE001 Do not catch blind exception: `Exception`
   |
87 |             return True
88 |
89 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
90 |             logger.error(f"Database health check failed: {e}")
91 |             return False
   |

ai_trading/database/connection.py:143:24: BLE001 Do not catch blind exception: `Exception`
    |
141 |                         self._connections.pop(session_id, None)
142 |                     logger.debug(f"Database session {session_id} closed")
143 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
144 |                     logger.error(f"Error closing session {session_id}: {e}")
    |

ai_trading/database/connection.py:256:12: BLE001 Do not catch blind exception: `Exception`
    |
254 |         _db_manager = DatabaseManager(connection_string, **kwargs)
255 |         return _db_manager.connect()
256 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
257 |         logger.error(f"Failed to initialize database: {e}")
258 |         return False
    |

ai_trading/env.py:49:12: BLE001 Do not catch blind exception: `Exception`
   |
47 |                 extra={"dotenv_path": loaded_from},
48 |             )
49 |     except Exception:
   |            ^^^^^^^^^ BLE001
50 |         pass
   |

ai_trading/evaluation/walkforward.py:41:1: E402 Module level import not at top of file
   |
39 |         logger.debug("Matplotlib plotting disabled by configuration")
40 |
41 | from ..data.splits import walkforward_splits
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
42 | from ..features.pipeline import create_feature_pipeline
43 | # Lazy import to avoid heavy dependencies at module import time
   |

ai_trading/evaluation/walkforward.py:42:1: E402 Module level import not at top of file
   |
41 | from ..data.splits import walkforward_splits
42 | from ..features.pipeline import create_feature_pipeline
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
43 | # Lazy import to avoid heavy dependencies at module import time
44 | def _get_ml_trainer():
   |

ai_trading/evaluation/walkforward.py:296:16: BLE001 Do not catch blind exception: `Exception`
    |
294 |             return fold_result
295 |
296 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
297 |             logger.error(f"Error in fold {fold_idx}: {e}")
298 |             return {"fold": fold_idx, "error": str(e)}
    |

ai_trading/evaluation/walkforward.py:347:16: BLE001 Do not catch blind exception: `Exception`
    |
345 |             }
346 |
347 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
348 |             logger.error(f"Error calculating fold metrics: {e}")
349 |             return {}
    |

ai_trading/evaluation/walkforward.py:428:16: BLE001 Do not catch blind exception: `Exception`
    |
426 |             return aggregate_metrics
427 |
428 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
429 |             logger.error(f"Error calculating aggregate metrics: {e}")
430 |             return {}
    |

ai_trading/evaluation/walkforward.py:446:16: BLE001 Do not catch blind exception: `Exception`
    |
444 |             return drawdown
445 |
446 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
447 |             logger.error(f"Error calculating drawdown: {e}")
448 |             return pd.Series(dtype=float)
    |

ai_trading/evaluation/walkforward.py:498:16: BLE001 Do not catch blind exception: `Exception`
    |
496 |             self._create_plots(timestamp)
497 |
498 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
499 |             logger.error(f"Error saving results: {e}")
    |

ai_trading/evaluation/walkforward.py:585:16: BLE001 Do not catch blind exception: `Exception`
    |
583 |             logger.info(f"Plots saved to {plot_file}")
584 |
585 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
586 |             logger.error(f"Error creating plots: {e}")
    |

ai_trading/execution/__init__.py:70:8: BLE001 Do not catch blind exception: `Exception`
   |
68 |         ProductionExecutionCoordinator,
69 |     )
70 | except Exception:  # pragma: no cover
   |        ^^^^^^^^^ BLE001
71 |     ExecutionResult = OrderRequest = ProductionExecutionCoordinator = None  # type: ignore
   |

ai_trading/execution/algorithms.py:103:16: BLE001 Do not catch blind exception: `Exception`
    |
101 |             return child_orders
102 |
103 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
104 |             logger.error(f"Error in VWAP execution: {e}")
105 |             return []
    |

ai_trading/execution/algorithms.py:187:16: BLE001 Do not catch blind exception: `Exception`
    |
185 |             return child_orders
186 |
187 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
188 |             logger.error(f"Error in TWAP execution: {e}")
189 |             return []
    |

ai_trading/execution/algorithms.py:275:16: BLE001 Do not catch blind exception: `Exception`
    |
273 |             return child_orders
274 |
275 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
276 |             logger.error(f"Error in Implementation Shortfall execution: {e}")
277 |             return []
    |

ai_trading/execution/algorithms.py:310:16: BLE001 Do not catch blind exception: `Exception`
    |
308 |             return schedule
309 |
310 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
311 |             logger.error(f"Error calculating execution schedule: {e}")
312 |             return [(total_quantity, self.urgency_factor)]
    |

ai_trading/execution/costs.py:172:20: BLE001 Do not catch blind exception: `Exception`
    |
170 |                 self.logger.info(f"Loaded cost data for {len(self._costs)} symbols")
171 |
172 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
173 |                 self.logger.error(f"Failed to load cost data: {e}")
    |

ai_trading/execution/costs.py:194:16: BLE001 Do not catch blind exception: `Exception`
    |
192 |             self.logger.debug(f"Saved cost data for {len(self._costs)} symbols")
193 |
194 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
195 |             self.logger.error(f"Failed to save cost data: {e}")
    |

ai_trading/execution/debug_tracker.py:118:16: BLE001 Do not catch blind exception: `Exception`
    |
116 |             if lock_acquired:
117 |                 self._active_orders[correlation_id] = execution_start
118 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
119 |             self.logger.error(
120 |                 "START_TRACKING_ERROR",
    |

ai_trading/execution/debug_tracker.py:197:16: BLE001 Do not catch blind exception: `Exception`
    |
195 |                         "status"
196 |                     ] = OrderStatus.CANCELLED.value
197 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
198 |             # AI-AGENT-REF: Graceful error handling for lock operations
199 |             self.logger.error(
    |

ai_trading/execution/debug_tracker.py:274:16: BLE001 Do not catch blind exception: `Exception`
    |
272 |                 # Remove from active orders
273 |                 del self._active_orders[correlation_id]
274 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
275 |             self.logger.error(
276 |                 "ORDER_RESULT_ERROR",
    |

ai_trading/execution/liquidity.py:32:1: E402 Module level import not at top of file
   |
31 | # Use the centralized logger as per AGENTS.md
32 | from ai_trading.logging import logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
33 |
34 | from ..core.enums import OrderType
   |

ai_trading/execution/liquidity.py:34:1: E402 Module level import not at top of file
   |
32 | from ai_trading.logging import logger
33 |
34 | from ..core.enums import OrderType
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

ai_trading/execution/live_trading.py:19:1: E402 Module level import not at top of file
   |
18 | # Internal config import
19 | from ai_trading.config import AlpacaConfig, get_alpaca_config
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
20 |
21 | # Alpaca SDK imports
   |

ai_trading/execution/live_trading.py:25:8: BLE001 Do not catch blind exception: `Exception`
   |
23 |     from alpaca.common.exceptions import APIError  # type: ignore
24 |     from alpaca.trading.client import TradingClient  # type: ignore  # noqa: F401
25 | except Exception:  # AI-AGENT-REF: local fallback when SDK missing
   |        ^^^^^^^^^ BLE001
26 |     TradingClient = None  # type: ignore
   |

ai_trading/execution/live_trading.py:32:1: E402 Module level import not at top of file
   |
32 | from ai_trading.broker.alpaca import AlpacaBroker
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

ai_trading/execution/live_trading.py:56:12: BLE001 Do not catch blind exception: `Exception`
   |
54 |     try:
55 |         quantity = int(_pos_num("qty", quantity))
56 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
57 |         _log.error(
58 |             "ORDER_INPUT_INVALID",
   |

ai_trading/execution/live_trading.py:139:24: BLE001 Do not catch blind exception: `Exception`
    |
137 |                         MockTradingClient,  # AI-AGENT-REF: test mock
138 |                     )
139 |                 except Exception:
    |                        ^^^^^^^^^ BLE001
140 |                     MockTradingClient = None
141 |                 if MockTradingClient:
    |

ai_trading/execution/live_trading.py:684:17: F841 Local variable `resp` is assigned to but never used
    |
682 |         else:
683 |             try:  # AI-AGENT-REF: structured broker call
684 |                 resp = self.trading_client.cancel_order(order_id)
    |                 ^^^^ F841
685 |             except (APIError, TimeoutError, ConnectionError) as e:
686 |                 _log.error(
    |
    = help: Remove assignment to unused variable `resp`

ai_trading/execution/microstructure.py:149:16: BLE001 Do not catch blind exception: `Exception`
    |
147 |             return features
148 |
149 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
150 |             logger.error(f"Error analyzing spread features: {e}")
151 |             return {}
    |

ai_trading/execution/microstructure.py:182:16: BLE001 Do not catch blind exception: `Exception`
    |
180 |                 return MarketRegimeFeature.RETAIL_DOMINATED
181 |
182 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
183 |             logger.error(f"Error classifying spread regime: {e}")
184 |             return MarketRegimeFeature.RETAIL_DOMINATED
    |

ai_trading/execution/microstructure.py:242:16: BLE001 Do not catch blind exception: `Exception`
    |
240 |             return avg_effective, avg_realized
241 |
242 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
243 |             logger.error(f"Error calculating trade spreads: {e}")
244 |             return 0.0, 0.0
    |

ai_trading/execution/microstructure.py:333:16: BLE001 Do not catch blind exception: `Exception`
    |
331 |             return features
332 |
333 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
334 |             logger.error(f"Error analyzing order flow: {e}")
335 |             return {}
    |

ai_trading/execution/microstructure.py:371:16: BLE001 Do not catch blind exception: `Exception`
    |
369 |             }
370 |
371 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
372 |             logger.error(f"Error detecting toxic flow: {e}")
373 |             return {"is_toxic": False, "risk_level": "unknown", "error": str(e)}
    |

ai_trading/execution/microstructure.py:696:16: BLE001 Do not catch blind exception: `Exception`
    |
694 |             return microstructure_data
695 |
696 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
697 |             logger.error(f"Error analyzing market microstructure for {symbol}: {e}")
698 |             return self._create_default_microstructure_data(symbol)
    |

ai_trading/execution/microstructure.py:761:16: BLE001 Do not catch blind exception: `Exception`
    |
759 |             }
760 |
761 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
762 |             logger.error(f"Error estimating execution impact: {e}")
763 |             return {"error": str(e), "total_impact_bps": 999.0}
    |

ai_trading/execution/microstructure.py:867:16: BLE001 Do not catch blind exception: `Exception`
    |
865 |             return features
866 |
867 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
868 |             logger.error(f"Error analyzing microstructure volatility: {e}")
869 |             return {
    |

ai_trading/execution/position_reconciler.py:164:16: BLE001 Do not catch blind exception: `Exception`
    |
162 |             return broker_positions
163 |
164 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
165 |             self.logger.error(
166 |                 "BROKER_POSITION_FETCH_ERROR",
    |

ai_trading/execution/position_reconciler.py:363:20: BLE001 Do not catch blind exception: `Exception`
    |
361 |                 time.sleep(self.reconciliation_interval)
362 |
363 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
364 |                 self.logger.error(
365 |                     "RECONCILIATION_LOOP_ERROR",
    |

ai_trading/execution/production_engine.py:19:8: BLE001 Do not catch blind exception: `Exception`
   |
17 |     from alpaca.common.exceptions import APIError  # type: ignore
18 |     from alpaca.trading.client import TradingClient  # type: ignore  # noqa: F401
19 | except Exception:  # AI-AGENT-REF: local fallback when SDK missing
   |        ^^^^^^^^^ BLE001
20 |     TradingClient = None  # type: ignore
   |

ai_trading/execution/simulator.py:87:16: BLE001 Do not catch blind exception: `Exception`
   |
85 |             return total_slippage
86 |
87 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
88 |             logger.error(f"Error calculating slippage: {e}")
89 |             return 0.0
   |

ai_trading/execution/simulator.py:121:16: BLE001 Do not catch blind exception: `Exception`
    |
119 |             )
120 |
121 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
122 |             logger.error(f"Error updating market conditions: {e}")
    |

ai_trading/execution/simulator.py:215:16: BLE001 Do not catch blind exception: `Exception`
    |
213 |             return result
214 |
215 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
216 |             logger.error(f"Error simulating fill: {e}")
217 |             return {
    |

ai_trading/execution/simulator.py:311:16: BLE001 Do not catch blind exception: `Exception`
    |
309 |             )
310 |
311 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
312 |             logger.error(f"Error updating fill simulator: {e}")
    |

ai_trading/execution/transaction_costs.py:17:1: E402 Module level import not at top of file
   |
15 | _log = logging.getLogger(__name__)  # AI-AGENT-REF: module logger
16 |
17 | from ai_trading.core.constants import EXECUTION_PARAMETERS, RISK_PARAMETERS  # AI-AGENT-REF: direct import without shim
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

ai_trading/execution/transaction_costs.py:174:13: F841 Local variable `mid_price` is assigned to but never used
    |
173 |             spread = ask - bid
174 |             mid_price = (bid + ask) / 2
    |             ^^^^^^^^^ F841
175 |
176 |             # Spread cost is half-spread times trade size
    |
    = help: Remove assignment to unused variable `mid_price`

ai_trading/features/pipeline.py:190:16: BLE001 Do not catch blind exception: `Exception`
    |
188 |             return features
189 |
190 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
191 |             logger.error(f"Error adding return features: {e}")
192 |             return features
    |

ai_trading/features/pipeline.py:226:16: BLE001 Do not catch blind exception: `Exception`
    |
224 |             return features
225 |
226 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
227 |             logger.error(f"Error adding volatility features: {e}")
228 |             return features
    |

ai_trading/features/pipeline.py:263:16: BLE001 Do not catch blind exception: `Exception`
    |
261 |             return features
262 |
263 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
264 |             logger.error(f"Error adding volume features: {e}")
265 |             return features
    |

ai_trading/features/pipeline.py:324:16: BLE001 Do not catch blind exception: `Exception`
    |
322 |             return features
323 |
324 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
325 |             logger.error(f"Error adding regime features: {e}")
326 |             return features
    |

ai_trading/features/pipeline.py:343:16: F821 Undefined name `sklearn_available`
    |
341 |     """
342 |     try:
343 |         if not sklearn_available:
    |                ^^^^^^^^^^^^^^^^^ F821
344 |             logger.warning("sklearn not available, returning simple pipeline")
345 |             return Pipeline(
    |

ai_trading/features/pipeline.py:430:12: BLE001 Do not catch blind exception: `Exception`
    |
428 |         return True
429 |
430 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
431 |         logger.error(f"Error validating pipeline: {e}")
432 |         return False
    |

ai_trading/governance/promotion.py:121:16: BLE001 Do not catch blind exception: `Exception`
    |
119 |             return True
120 |
121 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
122 |             self.logger.error(f"Error starting shadow testing for {model_id}: {e}")
123 |             return False
    |

ai_trading/governance/promotion.py:203:16: BLE001 Do not catch blind exception: `Exception`
    |
201 |             )
202 |
203 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
204 |             self.logger.error(f"Error updating shadow metrics for {model_id}: {e}")
    |

ai_trading/governance/promotion.py:278:16: BLE001 Do not catch blind exception: `Exception`
    |
276 |             return eligible, evaluation
277 |
278 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
279 |             self.logger.error(
280 |                 f"Error checking promotion eligibility for {model_id}: {e}"
    |

ai_trading/governance/promotion.py:333:16: BLE001 Do not catch blind exception: `Exception`
    |
331 |             return True
332 |
333 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
334 |             self.logger.error(f"Error promoting model {model_id}: {e}")
335 |             return False
    |

ai_trading/governance/promotion.py:386:16: BLE001 Do not catch blind exception: `Exception`
    |
384 |                 last_updated=last_updated,
385 |             )
386 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
387 |             self.logger.error(f"Error loading shadow metrics for {model_id}: {e}")
388 |             return None
    |

ai_trading/governance/promotion.py:409:16: BLE001 Do not catch blind exception: `Exception`
    |
407 |             )
408 |
409 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
410 |             self.logger.error(f"Error creating active symlink for {strategy}: {e}")
    |

ai_trading/governance/promotion.py:419:16: BLE001 Do not catch blind exception: `Exception`
    |
417 |                 symlink_path.unlink()
418 |                 self.logger.debug(f"Removed active symlink for {strategy}")
419 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
420 |             self.logger.error(f"Error removing active symlink for {strategy}: {e}")
    |

ai_trading/governance/promotion.py:462:20: BLE001 Do not catch blind exception: `Exception`
    |
460 |                     shadow_models.append(shadow_info)
461 |
462 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
463 |                 self.logger.debug(
464 |                     f"Error checking shadow status for model {model_id}: {e}"
    |

ai_trading/health_monitor.py:85:19: F821 Undefined name `Tuple`
   |
83 |     disk_used_gb: float
84 |     disk_available_gb: float
85 |     load_average: Tuple[float, float, float]
   |                   ^^^^^ F821
86 |     process_count: int
87 |     open_files: int
   |

ai_trading/health_monitor.py:158:16: BLE001 Do not catch blind exception: `Exception`
    |
156 |             self.consecutive_failures += 1
157 |
158 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
159 |             response_time = (time.time() - start_time) * 1000
160 |             status = HealthStatus.CRITICAL
    |

ai_trading/health_monitor.py:324:20: BLE001 Do not catch blind exception: `Exception`
    |
322 |                 await asyncio.sleep(self.check_interval)
323 |
324 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
325 |                 self.logger.error(f"Error in monitoring loop: {e}")
326 |                 await asyncio.sleep(10)  # Short delay before retry
    |

ai_trading/health_monitor.py:422:16: BLE001 Do not catch blind exception: `Exception`
    |
420 |             return metrics
421 |
422 |         except Exception as e:  # pragma: no cover - unexpected psutil errors
    |                ^^^^^^^^^ BLE001
423 |             self.logger.error(f"Error collecting system metrics: {e}")
424 |             return SystemMetrics(
    |

ai_trading/indicators.py:21:8: BLE001 Do not catch blind exception: `Exception`
   |
19 | try:  # pragma: no cover - optional dependency
20 |     from numba import jit as _numba_jit
21 | except Exception:  # pragma: no cover - numba not installed
   |        ^^^^^^^^^ BLE001
22 |     _numba_jit = None
   |

ai_trading/market/cache.py:13:8: BLE001 Do not catch blind exception: `Exception`
   |
11 | try:
12 |     import pandas as pd  # type: ignore
13 | except Exception:  # pragma: no cover
   |        ^^^^^^^^^ BLE001
14 |     pd = None  # tests can mock
   |

ai_trading/market/cache.py:66:12: BLE001 Do not catch blind exception: `Exception`
   |
64 |     try:
65 |         return pd.read_parquet(p)
66 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
67 |         logger.debug("Failed to read cache file %s: %s", p, e)
68 |         return None
   |

ai_trading/market/cache.py:80:12: BLE001 Do not catch blind exception: `Exception`
   |
78 |     try:
79 |         df.to_parquet(p, index=False)
80 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
81 |         logger.debug("Failed to write cache file %s: %s", p, e)
   |

ai_trading/ml_model.py:26:16: BLE001 Do not catch blind exception: `Exception`
   |
24 |         try:
25 |             n = len(X)
26 |         except Exception:
   |                ^^^^^^^^^ BLE001
27 |             n = 0
28 |         return np.zeros(n)
   |

ai_trading/ml_model.py:107:12: BLE001 Do not catch blind exception: `Exception`
    |
105 |     try:
106 |         return list(preds)
107 |     except Exception:
    |            ^^^^^^^^^ BLE001
108 |         return []
    |

ai_trading/model_loader.py:34:12: BLE001 Do not catch blind exception: `Exception`
   |
32 |     try:
33 |         df = get_daily_df(symbol, start, end)
34 |     except Exception as exc:  # pragma: no cover - network may fail
   |            ^^^^^^^^^ BLE001
35 |         logger.warning("Data fetch failed for %s: %s", symbol, exc)
36 |         df = pd.DataFrame({"close": np.linspace(1.0, 2.0, 30)})
   |

ai_trading/model_loader.py:54:12: BLE001 Do not catch blind exception: `Exception`
   |
52 |         with open(MODELS_DIR / f"{symbol}.pkl", "wb") as f:
53 |             pickle.dump(model, f)
54 |     except Exception as exc:  # pragma: no cover - disk issues
   |            ^^^^^^^^^ BLE001
55 |         logger.warning("Failed saving model for %s: %s", symbol, exc)
   |

ai_trading/model_loader.py:68:16: BLE001 Do not catch blind exception: `Exception`
   |
66 |             with open(path, "rb") as f:
67 |                 model = pickle.load(f)
68 |         except Exception as exc:
   |                ^^^^^^^^^ BLE001
69 |             logger.warning("Model load failed for %s: %s", symbol, exc)
70 |             model = None
   |

ai_trading/model_loader.py:78:1: E402 Module level import not at top of file
   |
77 | # AI-AGENT-REF: Defer model loading in testing environments to prevent import blocking
78 | import os
   | ^^^^^^^^^ E402
79 | import sys
   |

ai_trading/model_loader.py:79:1: E402 Module level import not at top of file
   |
77 | # AI-AGENT-REF: Defer model loading in testing environments to prevent import blocking
78 | import os
79 | import sys
   | ^^^^^^^^^^ E402
80 |
81 | # AI-AGENT-REF: More aggressive testing mode detection to prevent import hangs
   |

ai_trading/model_registry.py:17:8: BLE001 Do not catch blind exception: `Exception`
   |
15 | try:
16 |     from ai_trading.logging import logger  # project logger
17 | except Exception:  # pragma: no cover
   |        ^^^^^^^^^ BLE001
18 |     import logging
   |

ai_trading/model_registry.py:40:16: BLE001 Do not catch blind exception: `Exception`
   |
38 |         try:
39 |             return json.loads(self.index_file.read_text(encoding="utf-8"))
40 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
41 |             logger.warning("Failed to load registry index: %s", e)
42 |             return {}
   |

ai_trading/monitoring/alerts.py:177:16: BLE001 Do not catch blind exception: `Exception`
    |
175 |             return alert
176 |
177 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
178 |             logger.error(f"Error creating alert: {e}")
179 |             # Return dummy alert to prevent cascading errors
    |

ai_trading/monitoring/alerts.py:214:16: BLE001 Do not catch blind exception: `Exception`
    |
212 |             return False
213 |
214 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
215 |             logger.error(f"Error acknowledging alert {alert_id}: {e}")
216 |             return False
    |

ai_trading/monitoring/alerts.py:231:16: BLE001 Do not catch blind exception: `Exception`
    |
229 |             return False
230 |
231 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
232 |             logger.error(f"Error resolving alert {alert_id}: {e}")
233 |             return False
    |

ai_trading/monitoring/alerts.py:245:20: BLE001 Do not catch blind exception: `Exception`
    |
243 |             try:
244 |                 handler(alert)
245 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
246 |                 logger.error(f"Error in alert handler {handler.__name__}: {e}")
    |

ai_trading/monitoring/alerts.py:282:20: BLE001 Do not catch blind exception: `Exception`
    |
280 |                 psleep(3600)
281 |
282 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
283 |                 logger.error(f"Error in alert cleanup: {e}")
284 |                 psleep(300)  # Sleep 5 minutes on error
    |

ai_trading/monitoring/alerts.py:351:16: BLE001 Do not catch blind exception: `Exception`
    |
349 |                 )
350 |
351 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
352 |             logger.error(f"Error checking portfolio risk: {e}")
    |

ai_trading/monitoring/alerts.py:387:16: BLE001 Do not catch blind exception: `Exception`
    |
385 |                 )
386 |
387 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
388 |             logger.error(f"Error checking position risk for {symbol}: {e}")
    |

ai_trading/monitoring/alerts.py:421:16: BLE001 Do not catch blind exception: `Exception`
    |
419 |                 )
420 |
421 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
422 |             logger.error(f"Error checking execution risk: {e}")
    |

ai_trading/monitoring/alerts.py:448:16: BLE001 Do not catch blind exception: `Exception`
    |
446 |             self.last_alert_times[alert_key] = current_time
447 |
448 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
449 |             logger.error(f"Error creating risk alert: {e}")
    |

ai_trading/monitoring/dashboard.py:72:16: BLE001 Do not catch blind exception: `Exception`
   |
70 |             return result
71 |
72 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
73 |             logger.error(f"Error calculating current P&L: {e}")
74 |             return {"realized_pnl": 0.0, "trade_count": 0, "win_rate": 0.0}
   |

ai_trading/monitoring/dashboard.py:108:16: BLE001 Do not catch blind exception: `Exception`
    |
106 |             return result
107 |
108 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
109 |             logger.error(f"Error calculating portfolio summary: {e}")
110 |             return {"total_value": 0.0, "day_change": 0.0, "day_change_pct": 0.0}
    |

ai_trading/monitoring/dashboard.py:143:16: BLE001 Do not catch blind exception: `Exception`
    |
141 |             return result
142 |
143 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
144 |             logger.error(f"Error calculating risk summary: {e}")
145 |             return {"var_95": 0.0, "max_drawdown": 0.0, "current_drawdown": 0.0}
    |

ai_trading/monitoring/dashboard.py:178:16: BLE001 Do not catch blind exception: `Exception`
    |
176 |             return result
177 |
178 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
179 |             logger.error(f"Error calculating execution summary: {e}")
180 |             return {"orders_submitted": 0, "orders_filled": 0, "fill_rate": 0.0}
    |

ai_trading/monitoring/dashboard.py:251:16: BLE001 Do not catch blind exception: `Exception`
    |
249 |             return dashboard_data
250 |
251 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
252 |             logger.error(f"Error generating dashboard data: {e}")
253 |             return {
    |

ai_trading/monitoring/dashboard.py:322:16: BLE001 Do not catch blind exception: `Exception`
    |
320 |             return summary
321 |
322 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
323 |             logger.error(f"Error generating trading activity summary: {e}")
324 |             return {"total_trades": 0, "total_volume": 0.0}
    |

ai_trading/monitoring/dashboard.py:357:16: BLE001 Do not catch blind exception: `Exception`
    |
355 |             }
356 |
357 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
358 |             logger.error(f"Error generating alert summary: {e}")
359 |             return {"active_count": 0, "severity_breakdown": {}, "recent_count": 0}
    |

ai_trading/monitoring/dashboard.py:395:16: BLE001 Do not catch blind exception: `Exception`
    |
393 |             }
394 |
395 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
396 |             logger.error(f"Error generating system health: {e}")
397 |             return {"status": "error", "cpu_usage": 0, "memory_usage": 0}
    |

ai_trading/monitoring/dashboard.py:456:16: BLE001 Do not catch blind exception: `Exception`
    |
454 |             }
455 |
456 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
457 |             logger.error(f"Error generating chart data: {e}")
458 |             return {"portfolio_value": [], "risk_metrics": [], "trading_volume": []}
    |

ai_trading/monitoring/drift.py:123:20: BLE001 Do not catch blind exception: `Exception`
    |
121 |                 )
122 |
123 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
124 |                 self.logger.error(f"Failed to load baseline stats: {e}")
    |

ai_trading/monitoring/drift.py:138:16: BLE001 Do not catch blind exception: `Exception`
    |
136 |             )
137 |
138 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
139 |             self.logger.error(f"Failed to save baseline stats: {e}")
    |

ai_trading/monitoring/drift.py:208:16: BLE001 Do not catch blind exception: `Exception`
    |
206 |             return float(psi)
207 |
208 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
209 |             self.logger.warning(f"PSI calculation failed: {e}")
210 |             return 0.0
    |

ai_trading/monitoring/drift.py:424:16: BLE001 Do not catch blind exception: `Exception`
    |
422 |                 json.dump(attribution_dicts, f, indent=2)
423 |
424 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
425 |             self.logger.error(f"Failed to save attribution history: {e}")
    |

ai_trading/monitoring/drift.py:547:16: BLE001 Do not catch blind exception: `Exception`
    |
545 |                 f.write(json.dumps(evaluation) + "\n")
546 |
547 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
548 |             self.logger.error(f"Failed to log shadow evaluation: {e}")
    |

ai_trading/monitoring/order_health_monitor.py:213:24: BLE001 Do not catch blind exception: `Exception`
    |
211 |                             },
212 |                         )
213 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
214 |                     self.logger.error(
215 |                         "Failed to cancel stale order %s: %s", order_info.order_id, e
    |

ai_trading/monitoring/order_health_monitor.py:275:16: BLE001 Do not catch blind exception: `Exception`
    |
273 |                     )
274 |
275 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
276 |             self.logger.error(
277 |                 "Partial fill retry failed for %s: %s", partial_info.order_id, e
    |

ai_trading/monitoring/order_health_monitor.py:476:16: BLE001 Do not catch blind exception: `Exception`
    |
474 |             self.logger.info("Order health metrics exported to %s", filepath)
475 |
476 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
477 |             self.logger.error("Failed to export metrics: %s", e)
    |

ai_trading/monitoring/slo.py:321:20: BLE001 Do not catch blind exception: `Exception`
    |
319 |             try:
320 |                 callback(metric_name, current_value)
321 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
322 |                 self.logger.error(
323 |                     f"Error in circuit breaker callback for {metric_name}: {e}"
    |

ai_trading/monitoring/slo.py:459:16: BLE001 Do not catch blind exception: `Exception`
    |
457 |             self.logger.info(f"Loaded SLO configuration from {config_path}")
458 |
459 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
460 |             self.logger.error(f"Error loading SLO configuration: {e}")
    |

ai_trading/monitoring/system_health.py:7:8: BLE001 Do not catch blind exception: `Exception`
  |
5 |     import psutil  # type: ignore
6 |     _HAS_PSUTIL = True
7 | except Exception:
  |        ^^^^^^^^^ BLE001
8 |     psutil = None  # type: ignore
9 |     _HAS_PSUTIL = False
  |

ai_trading/monitoring/system_health.py:23:16: BLE001 Do not catch blind exception: `Exception`
   |
21 |                 }
22 |             )
23 |         except Exception:
   |                ^^^^^^^^^ BLE001
24 |             # keep minimal snapshot if psutil misbehaves
25 |             pass
   |

ai_trading/pipeline.py:9:1: E402 Module level import not at top of file
   |
 8 | # ML dependencies
 9 | from sklearn.base import BaseEstimator, TransformerMixin
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
10 | from sklearn.linear_model import SGDRegressor
11 | from sklearn.pipeline import Pipeline
   |

ai_trading/pipeline.py:10:1: E402 Module level import not at top of file
   |
 8 | # ML dependencies
 9 | from sklearn.base import BaseEstimator, TransformerMixin
10 | from sklearn.linear_model import SGDRegressor
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
11 | from sklearn.pipeline import Pipeline
12 | from sklearn.preprocessing import StandardScaler
   |

ai_trading/pipeline.py:11:1: E402 Module level import not at top of file
   |
 9 | from sklearn.base import BaseEstimator, TransformerMixin
10 | from sklearn.linear_model import SGDRegressor
11 | from sklearn.pipeline import Pipeline
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
12 | from sklearn.preprocessing import StandardScaler
   |

ai_trading/pipeline.py:12:1: E402 Module level import not at top of file
   |
10 | from sklearn.linear_model import SGDRegressor
11 | from sklearn.pipeline import Pipeline
12 | from sklearn.preprocessing import StandardScaler
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

ai_trading/portfolio/risk_controls.py:233:16: BLE001 Do not catch blind exception: `Exception`
    |
231 |             return cluster_assignments
232 |
233 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
234 |             self.logger.error(f"Clustering failed: {e}")
235 |             return dict.fromkeys(returns_data.columns, 0)
    |

ai_trading/position/market_regime.py:139:16: BLE001 Do not catch blind exception: `Exception`
    |
137 |             return regime_metrics
138 |
139 |         except Exception as exc:
    |                ^^^^^^^^^ BLE001
140 |             self.logger.warning("detect_regime failed: %s", exc)
141 |             return self._get_default_regime()
    |

ai_trading/position/market_regime.py:219:16: BLE001 Do not catch blind exception: `Exception`
    |
217 |             return None
218 |
219 |         except Exception:
    |                ^^^^^^^^^ BLE001
220 |             return None
    |

ai_trading/position/market_regime.py:262:16: BLE001 Do not catch blind exception: `Exception`
    |
260 |             return {"strength": trend_strength, "direction": normalized_slope}
261 |
262 |         except Exception:
    |                ^^^^^^^^^ BLE001
263 |             return {"strength": 0.0, "direction": 0.0}
    |

ai_trading/position/market_regime.py:299:16: BLE001 Do not catch blind exception: `Exception`
    |
297 |             return {"percentile": percentile, "current_vol": current_vol}
298 |
299 |         except Exception:
    |                ^^^^^^^^^ BLE001
300 |             return {"percentile": 50.0, "current_vol": 0.0}
    |

ai_trading/position/market_regime.py:334:16: BLE001 Do not catch blind exception: `Exception`
    |
332 |             return {"score": momentum_score, "rsi": rsi if not pd.isna(rsi) else 50.0}
333 |
334 |         except Exception:
    |                ^^^^^^^^^ BLE001
335 |             return {"score": 0.5, "rsi": 50.0}
    |

ai_trading/position/market_regime.py:365:16: BLE001 Do not catch blind exception: `Exception`
    |
363 |             return {"score": mean_reversion_score}
364 |
365 |         except Exception:
    |                ^^^^^^^^^ BLE001
366 |             return {"score": 0.5}
    |

ai_trading/position/market_regime.py:386:16: BLE001 Do not catch blind exception: `Exception`
    |
384 |             return rsi.iloc[-1] if not pd.isna(rsi.iloc[-1]) else 50.0
385 |
386 |         except Exception:
    |                ^^^^^^^^^ BLE001
387 |             return 50.0
    |

ai_trading/position/market_regime.py:447:16: BLE001 Do not catch blind exception: `Exception`
    |
445 |             return max(0.0, min(1.0, confidence))
446 |
447 |         except Exception:
    |                ^^^^^^^^^ BLE001
448 |             return 0.5
    |

ai_trading/position/market_regime.py:465:16: BLE001 Do not catch blind exception: `Exception`
    |
463 |             return duration
464 |
465 |         except Exception:
    |                ^^^^^^^^^ BLE001
466 |             return 0
    |

ai_trading/position/technical_analyzer.py:171:16: BLE001 Do not catch blind exception: `Exception`
    |
169 |             return signals
170 |
171 |         except Exception as exc:
    |                ^^^^^^^^^ BLE001
172 |             self.logger.warning("analyze_signals failed for %s: %s", symbol, exc)
173 |             return self._get_default_signals(symbol)
    |

ai_trading/position/trailing_stops.py:165:16: BLE001 Do not catch blind exception: `Exception`
    |
163 |             return stop_level
164 |
165 |         except Exception as exc:
    |                ^^^^^^^^^ BLE001
166 |             self.logger.warning("update_trailing_stop failed for %s: %s", symbol, exc)
167 |             return None
    |

ai_trading/position/trailing_stops.py:276:16: BLE001 Do not catch blind exception: `Exception`
    |
274 |             return new_stop
275 |
276 |         except Exception as exc:
    |                ^^^^^^^^^ BLE001
277 |             self.logger.warning(
278 |                 "_calculate_adaptive_stop failed for %s: %s", symbol, exc
    |

ai_trading/position/trailing_stops.py:480:16: BLE001 Do not catch blind exception: `Exception`
    |
478 |                 )
479 |
480 |         except Exception as exc:
    |                ^^^^^^^^^ BLE001
481 |             self.logger.warning("_check_stop_trigger failed: %s", exc)
    |

ai_trading/rebalancer.py:23:1: E402 Module level import not at top of file
   |
23 | from ai_trading.portfolio import compute_portfolio_weights
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
24 | from ai_trading.settings import get_rebalance_interval_min
25 | from ai_trading.config import get_settings
   |

ai_trading/rebalancer.py:24:1: E402 Module level import not at top of file
   |
23 | from ai_trading.portfolio import compute_portfolio_weights
24 | from ai_trading.settings import get_rebalance_interval_min
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
25 | from ai_trading.config import get_settings
   |

ai_trading/rebalancer.py:25:1: E402 Module level import not at top of file
   |
23 | from ai_trading.portfolio import compute_portfolio_weights
24 | from ai_trading.settings import get_rebalance_interval_min
25 | from ai_trading.config import get_settings
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

ai_trading/rebalancer.py:47:1: E402 Module level import not at top of file
   |
46 | # AI-AGENT-REF: Enhanced rebalancer with tax awareness
47 | from ai_trading.core.constants import RISK_PARAMETERS
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
48 |
49 | # AI-AGENT-REF: Portfolio-first trading integration
   |

ai_trading/rebalancer.py:50:1: E402 Module level import not at top of file
   |
49 | # AI-AGENT-REF: Portfolio-first trading integration
50 | from ai_trading.portfolio import create_portfolio_optimizer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
51 | from ai_trading.risk.adaptive_sizing import AdaptivePositionSizer
52 | from ai_trading.strategies.regime_detector import (
   |

ai_trading/rebalancer.py:51:1: E402 Module level import not at top of file
   |
49 | # AI-AGENT-REF: Portfolio-first trading integration
50 | from ai_trading.portfolio import create_portfolio_optimizer
51 | from ai_trading.risk.adaptive_sizing import AdaptivePositionSizer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
52 | from ai_trading.strategies.regime_detector import (
53 |     create_regime_detector,
   |

ai_trading/rebalancer.py:52:1: E402 Module level import not at top of file
   |
50 |   from ai_trading.portfolio import create_portfolio_optimizer
51 |   from ai_trading.risk.adaptive_sizing import AdaptivePositionSizer
52 | / from ai_trading.strategies.regime_detector import (
53 | |     create_regime_detector,
54 | | )
   | |_^ E402
55 |
56 |   # Log availability after imports are guaranteed
   |

ai_trading/risk/engine.py:31:1: E402 Module level import not at top of file
   |
29 | ta = _optional_import("pandas_ta")
30 |
31 | from ai_trading.config.management import SEED, TradingConfig
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
32 |
33 | try:  # AI-AGENT-REF: resilient Alpaca import
   |

ai_trading/risk/engine.py:43:1: E402 Module level import not at top of file
   |
43 | from ai_trading.config.settings import get_settings
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
44 |
45 | try:
   |

ai_trading/risk/engine.py:279:9: F841 Local variable `exposure_cap_conservative` is assigned to but never used
    |
277 |         # Handle missing config attributes gracefully
278 |         volatility_lookback_days = getattr(self.config, "volatility_lookback_days", 10)
279 |         exposure_cap_conservative = getattr(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ F841
280 |             self.config, "exposure_cap_conservative", 1.0
281 |         )
    |
    = help: Remove assignment to unused variable `exposure_cap_conservative`

ai_trading/risk/kelly.py:69:33: F821 Undefined name `_DEFAULT_CONFIG`
   |
67 |         """
68 |         # Use provided config or default
69 |         self.config = config or _DEFAULT_CONFIG
   |                                 ^^^^^^^^^^^^^^^ F821
70 |
71 |         # Support backward compatibility: use passed parameters if provided, otherwise use config
   |

ai_trading/risk/kelly.py:141:16: BLE001 Do not catch blind exception: `Exception`
    |
139 |             return kelly_fraction
140 |
141 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
142 |             logger.error(f"Error calculating Kelly fraction: {e}")
143 |             return 0.0
    |

ai_trading/risk/kelly.py:195:16: BLE001 Do not catch blind exception: `Exception`
    |
193 |             return kelly_fraction, stats
194 |
195 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
196 |             logger.error(f"Error calculating Kelly from returns: {e}")
197 |             return 0.0, {"error": str(e)}
    |

ai_trading/risk/kelly.py:248:16: BLE001 Do not catch blind exception: `Exception`
    |
246 |             return adjusted_kelly, confidence_interval
247 |
248 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
249 |             logger.error(f"Error calculating Kelly with confidence: {e}")
250 |             return 0.0, 0.0
    |

ai_trading/risk/kelly.py:266:33: F821 Undefined name `_DEFAULT_CONFIG`
    |
264 |         self.kelly_criterion = KellyCriterion()
265 |         # Use centralized config values instead of undefined KELLY_PARAMETERS
266 |         self.lookback_periods = _DEFAULT_CONFIG.lookback_periods
    |                                 ^^^^^^^^^^^^^^^ F821
267 |         self.rebalance_frequency = _DEFAULT_CONFIG.rebalance_frequency
    |

ai_trading/risk/kelly.py:267:36: F821 Undefined name `_DEFAULT_CONFIG`
    |
265 |         # Use centralized config values instead of undefined KELLY_PARAMETERS
266 |         self.lookback_periods = _DEFAULT_CONFIG.lookback_periods
267 |         self.rebalance_frequency = _DEFAULT_CONFIG.rebalance_frequency
    |                                    ^^^^^^^^^^^^^^^ F821
268 |
269 |         # Store historical calculations
    |

ai_trading/risk/kelly.py:315:16: BLE001 Do not catch blind exception: `Exception`
    |
313 |             return portfolio_kelly
314 |
315 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
316 |             logger.error(f"Error calculating portfolio Kelly: {e}")
317 |             return {}
    |

ai_trading/risk/kelly.py:367:16: BLE001 Do not catch blind exception: `Exception`
    |
365 |             return adjusted_kelly
366 |
367 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
368 |             logger.error(f"Error adjusting Kelly fraction: {e}")
369 |             return base_kelly * 0.5  # Conservative fallback
    |

ai_trading/risk/kelly.py:422:16: BLE001 Do not catch blind exception: `Exception`
    |
420 |             return adjusted_kelly
421 |
422 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
423 |             logger.error(f"Error calculating Kelly with correlation: {e}")
424 |             return self.calculate_portfolio_kelly(asset_returns)
    |

ai_trading/risk/kelly.py:444:16: BLE001 Do not catch blind exception: `Exception`
    |
442 |             ]
443 |
444 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
445 |             logger.error(f"Error recording Kelly calculation: {e}")
    |

ai_trading/risk/metrics.py:53:16: BLE001 Do not catch blind exception: `Exception`
   |
51 |             return var
52 |
53 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
54 |             logger.error(f"Error calculating VaR: {e}")
55 |             return 0.0
   |

ai_trading/risk/metrics.py:85:16: BLE001 Do not catch blind exception: `Exception`
   |
83 |             return es
84 |
85 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
86 |             logger.error(f"Error calculating Expected Shortfall: {e}")
87 |             return 0.0
   |

ai_trading/risk/metrics.py:110:16: BLE001 Do not catch blind exception: `Exception`
    |
108 |             return sharpe
109 |
110 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
111 |             logger.error(f"Error calculating Sharpe ratio: {e}")
112 |             return 0.0
    |

ai_trading/risk/metrics.py:141:16: BLE001 Do not catch blind exception: `Exception`
    |
139 |             return sortino
140 |
141 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
142 |             logger.error(f"Error calculating Sortino ratio: {e}")
143 |             return 0.0
    |

ai_trading/risk/metrics.py:239:16: BLE001 Do not catch blind exception: `Exception`
    |
237 |             return stats
238 |
239 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
240 |             logger.error(f"Error calculating drawdowns: {e}")
241 |             return {}
    |

ai_trading/risk/metrics.py:266:16: BLE001 Do not catch blind exception: `Exception`
    |
264 |             return True, drawdown
265 |
266 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
267 |             logger.error(f"Error checking drawdown status: {e}")
268 |             return False, 0.0
    |

ai_trading/risk/metrics.py:297:16: BLE001 Do not catch blind exception: `Exception`
    |
295 |             return None  # Not recovered yet
296 |
297 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
298 |             logger.error(f"Error calculating recovery time: {e}")
299 |             return None
    |

ai_trading/risk/pre_trade_validation.py:145:16: BLE001 Do not catch blind exception: `Exception`
    |
143 |             )
144 |
145 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
146 |             logger.error(f"Error validating market hours: {e}")
147 |             return ValidationResult(
    |

ai_trading/risk/pre_trade_validation.py:273:16: BLE001 Do not catch blind exception: `Exception`
    |
271 |             )
272 |
273 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
274 |             logger.error(f"Error validating liquidity for {symbol}: {e}")
275 |             return ValidationResult(
    |

ai_trading/risk/pre_trade_validation.py:461:16: BLE001 Do not catch blind exception: `Exception`
    |
459 |             )
460 |
461 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
462 |             logger.error(f"Error validating position risk for {symbol}: {e}")
463 |             return ValidationResult(
    |

ai_trading/risk/pre_trade_validation.py:553:16: BLE001 Do not catch blind exception: `Exception`
    |
551 |             )
552 |
553 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
554 |             logger.error(f"Error validating portfolio risk: {e}")
555 |             return ValidationResult(
    |

ai_trading/risk/pre_trade_validation.py:801:16: BLE001 Do not catch blind exception: `Exception`
    |
799 |             return final_result
800 |
801 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
802 |             logger.error(f"Error in pre-trade validation: {e}")
803 |             return PreTradeCheckResult(
    |

ai_trading/risk/pre_trade_validation.py:832:16: BLE001 Do not catch blind exception: `Exception`
    |
830 |             )
831 |
832 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
833 |             return ValidationResult(
834 |                 category=ValidationCategory.SYSTEM_HEALTH,
    |

ai_trading/rl_trading/__init__.py:12:8: BLE001 Do not catch blind exception: `Exception`
   |
10 |     from stable_baselines3 import PPO
11 |     from stable_baselines3.common.vec_env import DummyVecEnv
12 | except Exception:  # pragma: no cover - optional dependency
   |        ^^^^^^^^^ BLE001
13 |     PPO = None  # type: ignore
14 |     DummyVecEnv = None  # type: ignore
   |

ai_trading/rl_trading/__init__.py:82:16: BLE001 Do not catch blind exception: `Exception`
   |
80 |             side = {0: "hold", 1: "buy", 2: "sell"}.get(int(action), "hold")
81 |             return TradeSignal(symbol="RL", side=side, confidence=1.0, strategy="rl")
82 |         except Exception as exc:
   |                ^^^^^^^^^ BLE001
83 |             logger.error("RL prediction failed: %s", exc)
84 |             return None
   |

ai_trading/rl_trading/env.py:15:8: BLE001 Do not catch blind exception: `Exception`
   |
13 |     # Use the base Env class when gymnasium is available
14 |     EnvBase = gym.Env
15 | except Exception:  # pragma: no cover - optional dependency
   |        ^^^^^^^^^ BLE001
16 |     gym = None
   |

ai_trading/rl_trading/inference.py:241:16: BLE001 Do not catch blind exception: `Exception`
    |
239 |             return signal
240 |
241 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
242 |             self.logger.error(f"RL prediction failed: {e}")
243 |             return None
    |

ai_trading/rl_trading/tests/smoke_parity.py:148:12: BLE001 Do not catch blind exception: `Exception`
    |
146 |         logger.info(f"Skipping RL tests due to missing dependencies: {e}")
147 |         return True
148 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
149 |         logger.info(f"RL parity test failed: {e}")
150 |         return False
    |

ai_trading/rl_trading/tests/smoke_parity.py:201:12: BLE001 Do not catch blind exception: `Exception`
    |
199 |         return True
200 |
201 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
202 |         logger.info(f"Reward normalization test failed: {e}")
203 |         return False
    |

ai_trading/runtime/http_wrapped.py:27:16: BLE001 Do not catch blind exception: `Exception`
   |
25 |                 return json.loads(resp)
26 |             return resp
27 |         except Exception as exc:  # intentionally broad at boundary
   |                ^^^^^^^^^ BLE001
28 |             last_exc = exc
29 |             logger.debug("http retry %s/%s after %s", attempt, attempts, exc)
   |

ai_trading/safety/monitoring.py:134:20: BLE001 Do not catch blind exception: `Exception`
    |
132 |             try:
133 |                 action(reason)
134 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
135 |                 logger.error(f"Error executing emergency action: {e}")
    |

ai_trading/safety/monitoring.py:317:20: BLE001 Do not catch blind exception: `Exception`
    |
315 |                 time.sleep(1)
316 |
317 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
318 |                 logger.error(f"Error in monitoring loop: {e}")
319 |                 time.sleep(5)  # Back off on error
    |

ai_trading/safety/monitoring.py:344:20: BLE001 Do not catch blind exception: `Exception`
    |
342 |             try:
343 |                 callback(alert)
344 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
345 |                 logger.error(f"Error in alert callback: {e}")
    |

ai_trading/safety/monitoring.py:411:20: BLE001 Do not catch blind exception: `Exception`
    |
409 |                 time.sleep(1)
410 |
411 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
412 |                 logger.error(f"Error in kill switch monitor: {e}")
413 |                 time.sleep(5)
    |

ai_trading/safety/monitoring.py:424:20: BLE001 Do not catch blind exception: `Exception`
    |
422 |             try:
423 |                 os.remove(self.kill_file_path)
424 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
425 |                 logger.error(f"Could not remove kill file: {e}")
426 |             return True
    |

ai_trading/safety/monitoring.py:560:12: BLE001 Do not catch blind exception: `Exception`
    |
558 |         with open("trading_alerts.log", "a") as f:
559 |             f.write(f"{json.dumps(alert)}\n")
560 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
561 |         logger.error(f"Failed to write alert to file: {e}")
    |

ai_trading/scheduler/aligned_clock.py:15:8: BLE001 Do not catch blind exception: `Exception`
   |
13 | try:
14 |     import pandas_market_calendars as mcal  # optional
15 | except Exception:  # pragma: no cover
   |        ^^^^^^^^^ BLE001
16 |     mcal = None
   |

ai_trading/scheduler/aligned_clock.py:27:12: BLE001 Do not catch blind exception: `Exception`
   |
25 |     try:
26 |         return mcal.get_calendar(cal_name)
27 |     except Exception as exc:  # pragma: no cover - best effort
   |            ^^^^^^^^^ BLE001
28 |         logger.warning(f"Failed to load {cal_name} calendar: {exc}")
29 |         return None
   |

ai_trading/scheduler/aligned_clock.py:83:20: BLE001 Do not catch blind exception: `Exception`
   |
81 |                 exchange_tz = self.calendar.tz
82 |                 return utc_now.astimezone(exchange_tz)
83 |             except Exception as e:
   |                    ^^^^^^^^^ BLE001
84 |                 self.logger.warning(
85 |                     f"Failed to get exchange time: {e.__class__.__name__}: {e}"
   |

ai_trading/scheduler/aligned_clock.py:158:20: BLE001 Do not catch blind exception: `Exception`
    |
156 |                         )
157 |                         next_close = next_close.replace(tzinfo=next_close.tzinfo)
158 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
159 |                 self.logger.warning(
160 |                     f"Calendar check failed: {e.__class__.__name__}: {e}"
    |

ai_trading/scheduler/aligned_clock.py:300:16: BLE001 Do not catch blind exception: `Exception`
    |
298 |             return market_open <= timestamp <= market_close
299 |
300 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
301 |             self.logger.warning(
302 |                 f"Market hours check failed: {e.__class__.__name__}: {e}"
    |

ai_trading/security.py:146:16: BLE001 Do not catch blind exception: `Exception`
    |
144 |             key = base64.urlsafe_b64encode(kdf.derive(master_key_bytes))
145 |             return Fernet(key)
146 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
147 |             self.logger.error(f"Failed to initialize encryption: {e}")
148 |             return None
    |

ai_trading/security.py:180:16: BLE001 Do not catch blind exception: `Exception`
    |
178 |             encrypted = self._fernet.encrypt(value.encode())
179 |             return base64.urlsafe_b64encode(encrypted).decode()
180 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
181 |             self.logger.error(f"Encryption failed: {e}")
182 |             return value
    |

ai_trading/security.py:193:16: BLE001 Do not catch blind exception: `Exception`
    |
191 |             decrypted = self._fernet.decrypt(encrypted_bytes)
192 |             return decrypted.decode()
193 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
194 |             self.logger.error(f"Decryption failed: {e}")
195 |             return encrypted_value
    |

ai_trading/security.py:247:16: BLE001 Do not catch blind exception: `Exception`
    |
245 |             base64.urlsafe_b64decode(value.encode())
246 |             return True
247 |         except Exception:
    |                ^^^^^^^^^ BLE001
248 |             # Any decoding error means it's not a valid token
249 |             return False
    |

ai_trading/security.py:454:58: F821 Undefined name `timedelta`
    |
452 |                     e
453 |                     for e in self._security_events
454 |                     if e.timestamp > datetime.now(UTC) - timedelta(hours=24)
    |                                                          ^^^^^^^^^ F821
455 |                 ]
456 |             ),
    |

ai_trading/security.py:499:16: BLE001 Do not catch blind exception: `Exception`
    |
498 |             return True
499 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
500 |             self.safe_logger.error(f"Failed to rotate encryption key: {e}")
501 |             return False
    |

ai_trading/strategies/__init__.py:8:8: BLE001 Do not catch blind exception: `Exception`
   |
 6 | try:  # AI-AGENT-REF: lazy meta-learning import
 7 |     from .meta_learning import MetaLearning
 8 | except Exception:  # pragma: no cover
   |        ^^^^^^^^^ BLE001
 9 |     MetaLearning = None  # type: ignore
10 | from .base import StrategySignal as TradeSignal
   |

ai_trading/strategies/backtest.py:235:16: BLE001 Do not catch blind exception: `Exception`
    |
233 |             return results
234 |
235 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
236 |             logger.error(f"Error running backtest: {e}")
237 |             return {"error": str(e)}
    |

ai_trading/strategies/backtest.py:310:34: F821 Undefined name `np`
    |
308 |                 volatility = abs(high_price - low_price) / close_price
309 |                 slippage_pct = (
310 |                     volatility * np.sqrt(position_size / max(volume, 1)) * 0.1
    |                                  ^^ F821
311 |                 )
312 |                 slippage_amount = min(0.01, slippage_pct)  # Cap at 1%
    |

ai_trading/strategies/backtest.py:331:20: F821 Undefined name `np`
    |
330 |                 # Simulate partial fill
331 |                 if np.random.random() > fill_prob:
    |                    ^^ F821
332 |                     actual_quantity = int(position_size * np.random.uniform(0.3, 0.9))
    |

ai_trading/strategies/backtest.py:332:59: F821 Undefined name `np`
    |
330 |                 # Simulate partial fill
331 |                 if np.random.random() > fill_prob:
332 |                     actual_quantity = int(position_size * np.random.uniform(0.3, 0.9))
    |                                                           ^^ F821
333 |
334 |             # Step 5: Calculate latency effects
    |

ai_trading/strategies/backtest.py:338:32: F821 Undefined name `np`
    |
336 |             if self.microstructure_available and trade_timestamp:
337 |                 # Simulate latency impact (simplified)
338 |                 latency_cost = np.random.normal(0, 0.0001)  # Small random cost
    |                                ^^ F821
339 |                 execution_price *= 1 + latency_cost
    |

ai_trading/strategies/backtest.py:357:25: F821 Undefined name `np`
    |
355 |                 # This is simplified - real implementation would track positions
356 |                 exit_price = execution_price * (
357 |                     1 + np.random.normal(0, 0.02)
    |                         ^^ F821
358 |                 )  # Random exit
359 |                 gross_pnl = actual_quantity * (exit_price - execution_price)
    |

ai_trading/strategies/backtest.py:362:53: F821 Undefined name `np`
    |
360 |             else:
361 |                 # Short position
362 |                 exit_price = execution_price * (1 + np.random.normal(0, 0.02))
    |                                                     ^^ F821
363 |                 gross_pnl = actual_quantity * (execution_price - exit_price)
    |

ai_trading/strategies/backtest.py:406:16: BLE001 Do not catch blind exception: `Exception`
    |
404 |             }
405 |
406 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
407 |             logger.error(f"Error simulating trade: {e}")
408 |             return {
    |

ai_trading/strategies/backtest.py:437:16: BLE001 Do not catch blind exception: `Exception`
    |
435 |             return max_dd
436 |
437 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
438 |             logger.error(f"Error calculating max drawdown: {e}")
439 |             return 0.0
    |

ai_trading/strategies/backtest.py:475:16: BLE001 Do not catch blind exception: `Exception`
    |
473 |             return analysis
474 |
475 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
476 |             logger.error(f"Error analyzing performance: {e}")
477 |             return {"error": str(e)}
    |

ai_trading/strategies/backtest.py:603:12: BLE001 Do not catch blind exception: `Exception`
    |
601 |         return True
602 |
603 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
604 |         logging.error(f"✗ Backtest smoke test failed: {e}")
605 |         return False
    |

ai_trading/strategies/backtester.py:19:1: E402 Module level import not at top of file
   |
17 |   risk_engine_instance = get_risk_engine()
18 |
19 | / from ai_trading import (
20 | |     config,
21 | |     signals,  # noqa: F401
22 | | )
   | |_^ E402
23 |   from ai_trading.core import bot_engine
24 |   from ai_trading.logging import get_logger
   |

ai_trading/strategies/backtester.py:23:1: E402 Module level import not at top of file
   |
21 |     signals,  # noqa: F401
22 | )
23 | from ai_trading.core import bot_engine
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
24 | from ai_trading.logging import get_logger
   |

ai_trading/strategies/backtester.py:24:1: E402 Module level import not at top of file
   |
22 | )
23 | from ai_trading.core import bot_engine
24 | from ai_trading.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
25 |
26 | logger = get_logger(__name__)
   |

ai_trading/strategies/backtester.py:193:20: BLE001 Do not catch blind exception: `Exception`
    |
191 |             try:
192 |                 bot_engine.apply_fill(fill)
193 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
194 |                 logger.debug("Failed to apply fill in backtester: %s", e)
195 |         qty = fill.order.qty if fill.order.side.lower() == "buy" else -fill.order.qty
    |

ai_trading/strategies/backtester.py:232:28: BLE001 Do not catch blind exception: `Exception`
    |
230 |                     try:
231 |                         bot_engine.update_market_data(sym, df.loc[ts])
232 |                     except Exception as e:
    |                            ^^^^^^^^^ BLE001
233 |                         logger.debug("Failed to update market data for %s: %s", sym, e)
234 |             orders = []
    |

ai_trading/strategies/backtester.py:238:24: BLE001 Do not catch blind exception: `Exception`
    |
236 |                 try:
237 |                     orders = bot_engine.next_cycle()
238 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
239 |                     logger.debug("Failed to execute next_cycle: %s", e)
240 |                     orders = []
    |

ai_trading/strategies/backtester.py:355:5: F841 Local variable `risk_engine_instance` is assigned to but never used
    |
353 |         DefaultExecutionModel(args.commission, args.slippage_pips, args.latency_bars),
354 |     )
355 |     risk_engine_instance = get_risk_engine()
    |     ^^^^^^^^^^^^^^^^^^^^ F841
356 |     results: dict[str, BacktestResult] = {}
    |
    = help: Remove assignment to unused variable `risk_engine_instance`

ai_trading/strategies/imports.py:25:1: E402 Module level import not at top of file
   |
24 | # TA library for optimized technical analysis - hard dependency
25 | import ta
   | ^^^^^^^^^ E402
26 | TA_AVAILABLE = True
27 | logger.info("TA library loaded successfully for enhanced technical analysis")
   |

ai_trading/strategies/metalearning.py:16:1: E402 Module level import not at top of file
   |
15 | # AI-AGENT-REF: Use centralized logger as per AGENTS.md
16 | from ai_trading.logging import logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
17 |
18 | # AI-AGENT-REF: Import dependencies - sklearn is a hard dependency
   |

ai_trading/strategies/metalearning.py:19:1: E402 Module level import not at top of file
   |
18 | # AI-AGENT-REF: Import dependencies - sklearn is a hard dependency
19 | import numpy as np
   | ^^^^^^^^^^^^^^^^^^ E402
20 |
21 | NUMPY_AVAILABLE = True
   |

ai_trading/strategies/metalearning.py:27:1: E402 Module level import not at top of file
   |
26 | # AI-AGENT-REF: Import data fetcher for historical data
27 | from ai_trading.data_fetcher import get_minute_df  # type: ignore
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

ai_trading/strategies/metalearning.py:31:1: E402 Module level import not at top of file
   |
30 | # AI-AGENT-REF: Import base strategy framework
31 | from ..core.enums import OrderSide, RiskLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
32 | from .base import BaseStrategy, StrategySignal
   |

ai_trading/strategies/metalearning.py:32:1: E402 Module level import not at top of file
   |
30 | # AI-AGENT-REF: Import base strategy framework
31 | from ..core.enums import OrderSide, RiskLevel
32 | from .base import BaseStrategy, StrategySignal
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
33 |
34 | # Machine learning imports - sklearn is a hard dependency
   |

ai_trading/strategies/metalearning.py:35:1: E402 Module level import not at top of file
   |
34 | # Machine learning imports - sklearn is a hard dependency
35 | from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
36 | from sklearn.metrics import accuracy_score
37 | from sklearn.model_selection import train_test_split
   |

ai_trading/strategies/metalearning.py:36:1: E402 Module level import not at top of file
   |
34 | # Machine learning imports - sklearn is a hard dependency
35 | from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
36 | from sklearn.metrics import accuracy_score
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
37 | from sklearn.model_selection import train_test_split
38 | from sklearn.preprocessing import StandardScaler
   |

ai_trading/strategies/metalearning.py:37:1: E402 Module level import not at top of file
   |
35 | from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
36 | from sklearn.metrics import accuracy_score
37 | from sklearn.model_selection import train_test_split
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
38 | from sklearn.preprocessing import StandardScaler
   |

ai_trading/strategies/metalearning.py:38:1: E402 Module level import not at top of file
   |
36 | from sklearn.metrics import accuracy_score
37 | from sklearn.model_selection import train_test_split
38 | from sklearn.preprocessing import StandardScaler
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
39 |
40 | ML_AVAILABLE = True
   |

ai_trading/strategies/performance_allocator.py:37:12: BLE001 Do not catch blind exception: `Exception`
   |
35 |             if 0.0 <= v <= 1.0:
36 |                 return v
37 |     except Exception:
   |            ^^^^^^^^^ BLE001
38 |         pass
39 |     s = get_settings()
   |

ai_trading/strategies/performance_allocator.py:49:16: BLE001 Do not catch blind exception: `Exception`
   |
47 |                 if 0.0 <= x <= 1.0:
48 |                     return x
49 |         except Exception:
   |                ^^^^^^^^^ BLE001
50 |             continue
51 |     return 0.60
   |

ai_trading/strategies/performance_allocator.py:152:24: BLE001 Do not catch blind exception: `Exception`
    |
150 |                 try:
151 |                     c = float(getattr(s_, "confidence", 0.0))
152 |                 except Exception:
    |                        ^^^^^^^^^ BLE001
153 |                     c = 0.0
154 |                 if c >= th:
    |

ai_trading/strategies/performance_allocator.py:159:32: BLE001 Do not catch blind exception: `Exception`
    |
157 |                         try:
158 |                             base = float(getattr(s_, "weight", 1.0))
159 |                         except Exception:
    |                                ^^^^^^^^^ BLE001
160 |                             base = 1.0
161 |                         s_.weight = base * m
    |

ai_trading/strategies/performance_allocator.py:229:16: BLE001 Do not catch blind exception: `Exception`
    |
227 |             logger.warning("Failed to record trade result for strategy %s: %s", strategy_name, e,
228 |                           extra={"component": "performance_allocator", "strategy": strategy_name, "error_type": "trade_record"})
229 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
230 |             logger.error("Unexpected error recording trade for strategy %s: %s", strategy_name, e,
231 |                         extra={"component": "performance_allocator", "strategy": strategy_name, "error_type": "unexpected"})
    |

ai_trading/strategies/performance_allocator.py:280:16: BLE001 Do not catch blind exception: `Exception`
    |
278 |             return allocations
279 |             
280 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
281 |             logger.error("Strategy allocation calculation failed: %s", e,
282 |                         extra={"component": "performance_allocator", "error_type": "allocation"})
    |

ai_trading/strategies/performance_allocator.py:353:16: BLE001 Do not catch blind exception: `Exception`
    |
351 |             logger.warning("Performance calculation failed for strategy %s: %s", strategy_name, e)
352 |             return 0.3  # Below average for calculation errors
353 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
354 |             logger.error("Unexpected error calculating performance for strategy %s: %s", strategy_name, e)
355 |             return 0.3
    |

ai_trading/strategies/performance_allocator.py:467:16: BLE001 Do not catch blind exception: `Exception`
    |
465 |             return report
466 |             
467 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
468 |             logger.error("Performance report generation failed for strategy %s: %s", strategy_name, e)
469 |             return {
    |

ai_trading/strategies/performance_allocator.py:503:16: BLE001 Do not catch blind exception: `Exception`
    |
501 |             return rank_changes >= significant_change_threshold
502 |             
503 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
504 |             logger.warning("Rebalance decision failed: %s", e)
505 |             return False  # Conservative - don't rebalance on errors
    |

ai_trading/strategies/regime_detector.py:22:1: E402 Module level import not at top of file
   |
20 | NUMPY_AVAILABLE = True
21 |
22 | from ai_trading.risk.adaptive_sizing import MarketRegime, VolatilityRegime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
23 |
24 | ENHANCED_REGIMES_AVAILABLE = True
   |

ai_trading/strategies/regime_detector.py:213:16: BLE001 Do not catch blind exception: `Exception`
    |
211 |             return regime, metrics
212 |
213 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
214 |             logger.error(f"Error detecting market regime: {e}")
215 |             return self._fallback_regime_detection()
    |

ai_trading/strategies/regime_detector.py:274:16: BLE001 Do not catch blind exception: `Exception`
    |
272 |             return adjusted_thresholds
273 |
274 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
275 |             logger.error(f"Error calculating dynamic thresholds: {e}")
276 |             # Return conservative defaults
    |

ai_trading/strategies/regime_detector.py:332:16: BLE001 Do not catch blind exception: `Exception`
    |
330 |             return trend_strength, direction
331 |
332 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
333 |             logger.error(f"Error calculating trend metrics: {e}")
334 |             return 0.0, TrendDirection.SIDEWAYS
    |

ai_trading/strategies/regime_detector.py:379:16: BLE001 Do not catch blind exception: `Exception`
    |
377 |             return percentile, regime
378 |
379 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
380 |             logger.error(f"Error calculating volatility regime: {e}")
381 |             return 0.5, VolatilityRegime.NORMAL
    |

ai_trading/strategies/regime_detector.py:405:16: BLE001 Do not catch blind exception: `Exception`
    |
403 |             return momentum
404 |
405 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
406 |             logger.error(f"Error calculating momentum: {e}")
407 |             return 0.0
    |

ai_trading/strategies/regime_detector.py:430:16: BLE001 Do not catch blind exception: `Exception`
    |
428 |             return min(1.0, max(0.0, avg_correlation))
429 |
430 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
431 |             logger.error(f"Error calculating correlation environment: {e}")
432 |             return 0.3
    |

ai_trading/strategies/regime_detector.py:446:16: BLE001 Do not catch blind exception: `Exception`
    |
444 |             return None
445 |
446 |         except Exception:
    |                ^^^^^^^^^ BLE001
447 |             return None
    |

ai_trading/strategies/regime_detector.py:470:16: BLE001 Do not catch blind exception: `Exception`
    |
468 |             return max(0.0, min(1.0, confidence))
469 |
470 |         except Exception:
    |                ^^^^^^^^^ BLE001
471 |             return 0.5
    |

ai_trading/strategies/regime_detector.py:515:16: BLE001 Do not catch blind exception: `Exception`
    |
513 |             return MarketRegime.NORMAL
514 |
515 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
516 |             logger.error(f"Error classifying market regime: {e}")
517 |             return MarketRegime.NORMAL
    |

ai_trading/strategies/signals.py:23:1: E402 Module level import not at top of file
   |
21 | sklearn_available = True
22 |
23 | from .base import StrategySignal
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

ai_trading/telemetry/metrics_logger.py:32:12: BLE001 Do not catch blind exception: `Exception`
   |
30 |     try:
31 |         path.parent.mkdir(parents=True, exist_ok=True)
32 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
33 |         logger.warning("Could not create parent dir for %s: %s", path, e)
   |

ai_trading/telemetry/metrics_logger.py:61:16: BLE001 Do not catch blind exception: `Exception`
   |
59 |         try:
60 |             row["max_drawdown"] = compute_max_drawdown(equity_curve)
61 |         except Exception:
   |                ^^^^^^^^^ BLE001
62 |             row["max_drawdown"] = ""
63 |     _write_csv_row(filename, row)
   |

ai_trading/trade_logic.py:14:8: BLE001 Do not catch blind exception: `Exception`
   |
12 |         drawdown_adjusted_kelly_alt as drawdown_adjusted_kelly,
13 |     )
14 | except Exception:  # pragma: no cover - fallback for older installs
   |        ^^^^^^^^^ BLE001
15 |     from ai_trading.capital_scaling import (
16 |         drawdown_adjusted_kelly,
   |

ai_trading/trade_logic.py:41:12: BLE001 Do not catch blind exception: `Exception`
   |
39 |         last_price, prev_price = float(price_data[-1]), float(price_data[-2])
40 |         recent_gain = (last_price - prev_price) / max(prev_price, 1e-9)
41 |     except Exception:
   |            ^^^^^^^^^ BLE001
42 |         # if indexing fails return False
43 |         log.warning("Failed to calculate recent gain from price data")
   |

ai_trading/trade_logic.py:102:12: BLE001 Do not catch blind exception: `Exception`
    |
100 |             val = float(data)
101 |         return float(val or 1e-3)
102 |     except Exception as exc:
    |            ^^^^^^^^^ BLE001
103 |         logger.warning("extract_price failed: %s", exc)
104 |         return 1e-3
    |

ai_trading/trade_logic.py:184:16: BLE001 Do not catch blind exception: `Exception`
    |
182 |             if sig is not None:
183 |                 signals[sym] = sig
184 |         except Exception as exc:
    |                ^^^^^^^^^ BLE001
185 |             ctx.logger.warning("Entry eval failed for %s: %s", sym, exc)
186 |     return signals
    |

ai_trading/trade_logic.py:218:16: BLE001 Do not catch blind exception: `Exception`
    |
216 |             if sig:
217 |                 exits[sym] = sig
218 |         except Exception as exc:
    |                ^^^^^^^^^ BLE001
219 |             ctx.logger.warning("Exit eval failed for %s: %s", sym, exc)
220 |     return exits
    |

ai_trading/training/train_ml.py:25:8: BLE001 Do not catch blind exception: `Exception`
   |
23 |     lgb = importlib.import_module("lightgbm")
24 |     lgb_available = True
25 | except Exception:  # pragma: no cover - optional dependency
   |        ^^^^^^^^^ BLE001
26 |     from ai_trading.thirdparty import lightgbm_compat as lgb
27 |     lgb_available = False
   |

ai_trading/training/train_ml.py:33:1: E402 Module level import not at top of file
   |
31 | xgb_available = True
32 |
33 | from sklearn.linear_model import Ridge
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
34 | from sklearn.metrics import (
35 |     mean_squared_error,
   |

ai_trading/training/train_ml.py:34:1: E402 Module level import not at top of file
   |
33 |   from sklearn.linear_model import Ridge
34 | / from sklearn.metrics import (
35 | |     mean_squared_error,
36 | | )
   | |_^ E402
37 |
38 |   sklearn_available = True
   |

ai_trading/training/train_ml.py:40:1: E402 Module level import not at top of file
   |
38 | sklearn_available = True
39 |
40 | import optuna
   | ^^^^^^^^^^^^^ E402
41 |
42 | optuna_available = True
   |

ai_trading/training/train_ml.py:44:1: E402 Module level import not at top of file
   |
42 | optuna_available = True
43 |
44 | from ..data.splits import PurgedGroupTimeSeriesSplit
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

ai_trading/training/train_ml.py:217:16: BLE001 Do not catch blind exception: `Exception`
    |
215 |             return study.best_params
216 |
217 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
218 |             logger.error(f"Error in hyperparameter optimization: {e}")
219 |             return self._get_default_params()
    |

ai_trading/training/train_ml.py:339:16: BLE001 Do not catch blind exception: `Exception`
    |
337 |             return score
338 |
339 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
340 |             logger.error(f"Error calculating score: {e}")
341 |             return 0.0
    |

ai_trading/training/train_ml.py:401:16: BLE001 Do not catch blind exception: `Exception`
    |
399 |             return cv_results
400 |
401 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
402 |             logger.error(f"Error in CV evaluation: {e}")
403 |             return {"mean_score": 0.0, "std_score": 0.0, "fold_scores": []}
    |

ai_trading/util/optional_imports.py:12:12: BLE001 Do not catch blind exception: `Exception`
   |
10 |         m = import_module(module_name)
11 |         return m, True, None
12 |     except Exception as e:  # intentionally broad to capture env issues
   |            ^^^^^^^^^ BLE001
13 |         return None, False, e
   |

ai_trading/utils/determinism.py:19:1: E402 Module level import not at top of file
   |
17 | logger = logging.getLogger(__name__)
18 |
19 | import numpy as np
   | ^^^^^^^^^^^^^^^^^^ E402
20 | logger = logging.getLogger(__name__)
   |

ai_trading/utils/determinism.py:34:8: F821 Undefined name `HAS_NUMPY`
   |
33 |     # NumPy (if available)
34 |     if HAS_NUMPY:
   |        ^^^^^^^^^ F821
35 |         np.random.seed(seed)
   |

ai_trading/utils/determinism.py:44:12: BLE001 Do not catch blind exception: `Exception`
   |
42 |         import importlib
43 |         lgb = importlib.import_module("lightgbm")  # noqa: F401
44 |     except Exception:  # pragma: no cover - optional dep
   |            ^^^^^^^^^ BLE001
45 |         from ai_trading.thirdparty import lightgbm_compat as lgb  # noqa: F401
46 |     # Set environment variables for additional determinism
   |

ai_trading/utils/determinism.py:81:12: BLE001 Do not catch blind exception: `Exception`
   |
79 |         return hashlib.sha256(content).hexdigest()[:16]  # First 16 chars
80 |
81 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
82 |         logger.warning(f"Failed to hash data: {e}")
83 |         return "unknown"
   |

ai_trading/utils/determinism.py:121:12: BLE001 Do not catch blind exception: `Exception`
    |
119 |         return hash_data(hash_content)
120 |
121 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
122 |         logger.warning(f"Failed to hash features: {e}")
123 |         return "feature_hash_error"
    |

ai_trading/utils/determinism.py:209:20: BLE001 Do not catch blind exception: `Exception`
    |
207 |                 self._is_locked = self._spec.get("locked", False)
208 |
209 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
210 |                 self.logger.error(f"Failed to load specification: {e}")
211 |                 self._spec = {}
    |

ai_trading/utils/determinism.py:225:16: BLE001 Do not catch blind exception: `Exception`
    |
223 |             self.logger.info(f"Saved model specification to {self.spec_file}")
224 |
225 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
226 |             self.logger.error(f"Failed to save specification: {e}")
    |

ai_trading/utils/device.py:11:12: BLE001 Do not catch blind exception: `Exception`
   |
 9 |     try:
10 |         import torch  # type: ignore
11 |     except Exception:
   |            ^^^^^^^^^ BLE001
12 |         _log.info(
13 |             "ML_DEVICE_SELECTED", extra={"device": "cpu", "reason": "torch_unavailable"}
   |

ai_trading/utils/device.py:39:12: BLE001 Do not catch blind exception: `Exception`
   |
38 |         tv.append(Tensor)
39 |     except Exception:
   |            ^^^^^^^^^ BLE001
40 |         return batch
41 |     return {
   |

ai_trading/utils/imports.py:16:12: BLE001 Do not catch blind exception: `Exception`
   |
14 |         mod = importlib.import_module(module_name)
15 |         return getattr(mod, cls_name, None)
16 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
17 |         _log.error("Failed to import %s (%s): %s", module_name, cls_name, e)
18 |         return None
   |

ai_trading/utils/optdeps.py:13:12: BLE001 Do not catch blind exception: `Exception`
   |
11 |     try:
12 |         return _ils.find_spec(name) is not None
13 |     except Exception:
   |            ^^^^^^^^^ BLE001
14 |         return False
   |

ai_trading/utils/optdeps.py:21:12: BLE001 Do not catch blind exception: `Exception`
   |
19 |     try:
20 |         return __import__(name)
21 |     except Exception:
   |            ^^^^^^^^^ BLE001
22 |         return None
   |

ai_trading/utils/performance.py:215:24: BLE001 Do not catch blind exception: `Exception`
    |
213 |                     result = future.result()
214 |                     results[chunk_index] = result
215 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
216 |                     self.logger.error(f"Parallel task failed: {e}")
217 |                     results[chunk_index] = None
    |

ai_trading/utils/performance.py:264:24: BLE001 Do not catch blind exception: `Exception`
    |
262 |                             chunk_results[f"{indicator_name}_{col}"] = result[col]
263 |
264 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
265 |                     logger.warning(
266 |                         f"Failed to calculate {config.get('name', 'unknown')}: {e}"
    |

ai_trading/utils/performance.py:413:12: BLE001 Do not catch blind exception: `Exception`
    |
411 |     try:
412 |         import psutil  # type: ignore
413 |     except Exception:
    |            ^^^^^^^^^ BLE001
414 |         psutil = None  # type: ignore  # AI-AGENT-REF: degrade if psutil missing
    |

ai_trading/utils/prof.py:15:16: BLE001 Do not catch blind exception: `Exception`
   |
13 |         try:
14 |             logger.info("STAGE_TIMING", extra={"stage": stage_name, "elapsed_ms": dt_ms, **extra})
15 |         except Exception:
   |                ^^^^^^^^^ BLE001
16 |             pass
   |

ai_trading/utils/workers.py:16:12: BLE001 Do not catch blind exception: `Exception`
   |
14 |         v = os.getenv(name)
15 |         return int(v) if v is not None else default
16 |     except Exception:
   |            ^^^^^^^^^ BLE001
17 |         return default
   |

scripts/INTEGRATION_GUIDE.py:138:23: F821 Undefined name `get_current_position`
    |
137 |         # Update position snapshot for unrealized PnL tracking
138 |         current_qty = get_current_position(symbol)  # Your existing position tracking
    |                       ^^^^^^^^^^^^^^^^^^^^ F821
139 |         current_market_price = get_current_market_price(symbol)  # Your price feed
    |

scripts/INTEGRATION_GUIDE.py:139:32: F821 Undefined name `get_current_market_price`
    |
137 |         # Update position snapshot for unrealized PnL tracking
138 |         current_qty = get_current_position(symbol)  # Your existing position tracking
139 |         current_market_price = get_current_market_price(symbol)  # Your price feed
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^ F821
140 |         
141 |         update_position_for_pnl(
    |

scripts/INTEGRATION_GUIDE.py:254:20: BLE001 Do not catch blind exception: `Exception`
    |
252 |                 self.run_health_checks()
253 |                 
254 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
255 |                 logging.info(f"Trading cycle error: {e}")
256 |                 # Your existing error handling
    |

scripts/algorithm_optimizer.py:228:16: BLE001 Do not catch blind exception: `Exception`
    |
226 |             return conditions
227 |
228 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
229 |             self.logger.error(f"Error detecting market regime: {e}")
230 |             # Return default conditions on error
    |

scripts/algorithm_optimizer.py:326:16: BLE001 Do not catch blind exception: `Exception`
    |
324 |             return optimized
325 |
326 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
327 |             self.logger.error(f"Error optimizing parameters: {e}")
328 |             return self.current_parameters
    |

scripts/algorithm_optimizer.py:514:20: BLE001 Do not catch blind exception: `Exception`
    |
512 |                 return final_shares
513 |
514 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
515 |                 self.logger.error(f"Error calculating position size: {e}")
516 |                 return 0
    |

scripts/algorithm_optimizer.py:561:16: BLE001 Do not catch blind exception: `Exception`
    |
559 |             return kelly_fraction
560 |
561 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
562 |             self.logger.error(f"Error calculating Kelly fraction: {e}")
563 |             return 0.02  # Conservative default
    |

scripts/algorithm_optimizer.py:565:31: F821 Undefined name `account_value`
    |
563 |             return 0.02  # Conservative default
564 |             # Default to minimum position
565 |             return max(1, int(account_value * 0.001 / price))
    |                               ^^^^^^^^^^^^^ F821
566 |
567 |     def _get_regime_multiplier(self, regime: MarketRegime) -> float:
    |

scripts/algorithm_optimizer.py:565:55: F821 Undefined name `price`
    |
563 |             return 0.02  # Conservative default
564 |             # Default to minimum position
565 |             return max(1, int(account_value * 0.001 / price))
    |                                                       ^^^^^ F821
566 |
567 |     def _get_regime_multiplier(self, regime: MarketRegime) -> float:
    |

scripts/algorithm_optimizer.py:617:16: BLE001 Do not catch blind exception: `Exception`
    |
615 |             return round(stop_price, 2)
616 |
617 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
618 |             self.logger.error(f"Error calculating stop loss: {e}")
619 |             # Default stop loss
    |

scripts/algorithm_optimizer.py:641:16: BLE001 Do not catch blind exception: `Exception`
    |
639 |             return round(take_profit_price, 2)
640 |
641 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
642 |             self.logger.error(f"Error calculating take profit: {e}")
643 |             # Default take profit
    |

scripts/algorithm_optimizer.py:669:16: BLE001 Do not catch blind exception: `Exception`
    |
667 |             validation_results['tests_passed'] += 1
668 |             validation_results['tests_run'].append('position_sizing')
669 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
670 |             validation_results['tests_failed'] += 1
671 |             validation_results['issues_found'].append(f"Position sizing error: {e}")
    |

scripts/algorithm_optimizer.py:679:16: BLE001 Do not catch blind exception: `Exception`
    |
677 |             validation_results['tests_passed'] += 1
678 |             validation_results['tests_run'].append('stop_loss_calculation')
679 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
680 |             validation_results['tests_failed'] += 1
681 |             validation_results['issues_found'].append(f"Stop loss calculation error: {e}")
    |

scripts/algorithm_optimizer.py:689:16: BLE001 Do not catch blind exception: `Exception`
    |
687 |             validation_results['tests_passed'] += 1
688 |             validation_results['tests_run'].append('take_profit_calculation')
689 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
690 |             validation_results['tests_failed'] += 1
691 |             validation_results['issues_found'].append(f"Take profit calculation error: {e}")
    |

scripts/algorithm_optimizer.py:702:16: BLE001 Do not catch blind exception: `Exception`
    |
700 |             validation_results['tests_passed'] += 1
701 |             validation_results['tests_run'].append('parameter_optimization')
702 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
703 |             validation_results['tests_failed'] += 1
704 |             validation_results['issues_found'].append(f"Parameter optimization error: {e}")
    |

scripts/audit.py:214:24: BLE001 Do not catch blind exception: `Exception`
    |
212 |                     logger.info("Trade log successfully written after permission repair")
213 |                     return  # Success, don't disable logging
214 |                 except Exception as retry_exc:
    |                        ^^^^^^^^^ BLE001
215 |                     logger.error("Trade log retry failed after permission repair: %s", retry_exc)
216 |             else:
    |

scripts/audit.py:219:16: BLE001 Do not catch blind exception: `Exception`
    |
217 |                 logger.warning("Failed to repair file permissions automatically")
218 |
219 |         except Exception as repair_exc:
    |                ^^^^^^^^^ BLE001
220 |             logger.warning("Permission repair attempt failed: %s", repair_exc)
    |

scripts/audit.py:225:12: BLE001 Do not catch blind exception: `Exception`
    |
223 |             _disable_trade_log = True
224 |             logger.warning("Trade log disabled due to permission error")
225 |     except Exception as exc:  # pragma: no cover - other I/O errors
    |            ^^^^^^^^^ BLE001
226 |         logger.error("Failed to record trade: %s", exc)
    |

scripts/audit.py:238:12: BLE001 Do not catch blind exception: `Exception`
    |
236 |         with open(fname, "w", encoding="utf-8") as f:
237 |             json.dump(details, f, indent=2, default=str)
238 |     except Exception as exc:  # pragma: no cover - best effort
    |            ^^^^^^^^^ BLE001
239 |         logger.warning("Failed JSON audit log %s: %s", fname, exc)
    |

scripts/backtest_framework.py:108:16: BLE001 Do not catch blind exception: `Exception`
    |
106 |         try:
107 |             self.cleanup()
108 |         except Exception:
    |                ^^^^^^^^^ BLE001
109 |             pass
    |

scripts/circuit_breaker.py:293:12: BLE001 Do not catch blind exception: `Exception`
    |
291 |             signal.alarm(0)  # Disable alarm
292 |
293 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
294 |         logger.warning(f"Health check for {name} failed: {e}")
295 |         return False
    |

scripts/config_server.py:9:1: E402 Module level import not at top of file
   |
 7 | # Map old names if needed
 8 | set_runtime_config = getattr(config, "set_runtime_config", None)
 9 | from flask import Flask, jsonify, request
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
10 |
11 | app = Flask(__name__)
   |

scripts/critical_fixes_validation.py:9:1: E402 Module level import not at top of file
   |
 7 | """
 8 |
 9 | import os
   | ^^^^^^^^^ E402
10 | import sys
11 | import unittest
   |

scripts/critical_fixes_validation.py:10:1: E402 Module level import not at top of file
   |
 9 | import os
10 | import sys
   | ^^^^^^^^^^ E402
11 | import unittest
   |

scripts/critical_fixes_validation.py:11:1: E402 Module level import not at top of file
   |
 9 | import os
10 | import sys
11 | import unittest
   | ^^^^^^^^^^^^^^^ E402
12 |
13 | # Set testing environment
   |

scripts/critical_fixes_validation.py:26:27: F821 Undefined name `bot_engine`
   |
24 |         """Set up test environment."""
25 |         # Import modules after setting TESTING flag
26 |         self.bot_engine = bot_engine
   |                           ^^^^^^^^^^ F821
27 |
28 |     def test_p0_quantity_calculation_fix(self):
   |

scripts/critical_fixes_validation.py:53:16: BLE001 Do not catch blind exception: `Exception`
   |
51 |             logging.info("  ✓ Quantity calculation uses actual order filled_qty")
52 |             logging.info("  ✓ Fixed discrepancy between calculated vs actual quantities")
53 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
54 |             self.fail(f"Quantity fix failed: {e}")
   |

scripts/debug_cli.py:18:1: E402 Module level import not at top of file
   |
16 | """
17 |
18 | import argparse
   | ^^^^^^^^^^^^^^^ E402
19 | import os
20 | import sys
   |

scripts/debug_cli.py:19:1: E402 Module level import not at top of file
   |
18 | import argparse
19 | import os
   | ^^^^^^^^^ E402
20 | import sys
21 | from datetime import datetime
   |

scripts/debug_cli.py:20:1: E402 Module level import not at top of file
   |
18 | import argparse
19 | import os
20 | import sys
   | ^^^^^^^^^^ E402
21 | from datetime import datetime
   |

scripts/debug_cli.py:21:1: E402 Module level import not at top of file
   |
19 | import os
20 | import sys
21 | from datetime import datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
22 |
23 | # Set required environment variables for CLI usage
   |

scripts/debug_cli.py:59:12: BLE001 Do not catch blind exception: `Exception`
   |
57 |             logging.info("🔴 System Status: ISSUES DETECTED")
58 |             
59 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
60 |         logging.info(f"❌ Error getting status: {e}")
   |

scripts/debug_cli.py:108:12: BLE001 Do not catch blind exception: `Exception`
    |
106 |             logging.info("No recent executions found.")
107 |             
108 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
109 |         logging.info(f"❌ Error getting executions: {e}")
    |

scripts/debug_cli.py:150:12: BLE001 Do not catch blind exception: `Exception`
    |
148 |             logging.info("\n✅ No discrepancies found - positions are in sync")
149 |             
150 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
151 |         logging.info(f"❌ Error checking positions: {e}")
    |

scripts/debug_cli.py:168:9: F841 Local variable `attributor` is assigned to but never used
    |
166 |         )
167 |         
168 |         attributor = get_pnl_attributor()
    |         ^^^^^^^^^^ F841
169 |         
170 |         if symbol:
    |
    = help: Remove assignment to unused variable `attributor`

scripts/debug_cli.py:220:12: BLE001 Do not catch blind exception: `Exception`
    |
218 |                         logging.info(f"  {source}: ${amount:+.2f}")
219 |                         
220 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
221 |         logging.info(f"❌ Error getting PnL data: {e}")
    |

scripts/debug_cli.py:273:12: BLE001 Do not catch blind exception: `Exception`
    |
271 |                 logging.info(f"  {correlation_id}")
272 |                 
273 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
274 |         logging.info(f"❌ Error tracing execution: {e}")
    |

scripts/debug_cli.py:330:12: BLE001 Do not catch blind exception: `Exception`
    |
328 |         logging.info(f"  PnL events tracked: {pnl_stats.get('total_events', 0)}")
329 |         
330 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
331 |         logging.info(f"❌ Error running health check: {e}")
    |

scripts/debug_cli.py:389:12: BLE001 Do not catch blind exception: `Exception`
    |
387 |     except KeyboardInterrupt:
388 |         logging.info("\n👋 Goodbye!")
389 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
390 |         logging.info(f"\n❌ Unexpected error: {e}")
391 |         sys.exit(1)
    |

scripts/debug_drawdown.py:6:1: E402 Module level import not at top of file
  |
4 | """Debug the drawdown circuit breaker status variable issue."""
5 |
6 | import os
  | ^^^^^^^^^ E402
7 | import sys
8 | import traceback
  |

scripts/debug_drawdown.py:7:1: E402 Module level import not at top of file
  |
6 | import os
7 | import sys
  | ^^^^^^^^^^ E402
8 | import traceback
  |

scripts/debug_drawdown.py:8:1: E402 Module level import not at top of file
   |
 6 | import os
 7 | import sys
 8 | import traceback
   | ^^^^^^^^^^^^^^^^ E402
 9 |
10 | # Set testing environment
   |

scripts/debug_drawdown.py:49:12: BLE001 Do not catch blind exception: `Exception`
   |
47 |         return True
48 |
49 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
50 |         logging.info(f"❌ Error in drawdown test: {e}")
51 |         logging.info(f"Traceback: {traceback.format_exc()}")
   |

scripts/debug_drawdown.py:73:20: BLE001 Do not catch blind exception: `Exception`
   |
71 |                 status = breaker.get_status()
72 |                 logging.info(str(f"Update {i+1}: equity=${equity:.2f}, result={result}, state={status['state']}"))
73 |             except Exception as e:
   |                    ^^^^^^^^^ BLE001
74 |                 logging.info(f"❌ Error on update {i+1}: {e}")
75 |                 logging.info(f"Traceback: {traceback.format_exc()}")
   |

scripts/debug_drawdown.py:81:12: BLE001 Do not catch blind exception: `Exception`
   |
79 |         return True
80 |
81 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
82 |         logging.info(f"❌ Error in status variable test: {e}")
83 |         logging.info(f"Traceback: {traceback.format_exc()}")
   |

scripts/demo_centralized_imports.py:13:1: E402 Module level import not at top of file
   |
11 | """
12 |
13 | import os
   | ^^^^^^^^^ E402
14 | import sys
   |

scripts/demo_centralized_imports.py:14:1: E402 Module level import not at top of file
   |
13 | import os
14 | import sys
   | ^^^^^^^^^^ E402
15 |
16 | # Add the current directory to the path for demo
   |

scripts/demo_centralized_imports.py:34:5: F841 Local variable `sklearn` is assigned to but never used
   |
32 |     np = imports_module.np
33 |     pd = imports_module.pd
34 |     sklearn = imports_module.sklearn
   |     ^^^^^^^ F841
35 |     get_ta_lib = imports_module.get_ta_lib
36 |     NUMPY_AVAILABLE = imports_module.NUMPY_AVAILABLE
   |
   = help: Remove assignment to unused variable `sklearn`

scripts/demo_drawdown_protection.py:12:1: E402 Module level import not at top of file
   |
10 | """
11 |
12 | import os
   | ^^^^^^^^^ E402
13 | os.environ["TESTING"] = "1"
   |

scripts/demo_drawdown_protection.py:15:1: E402 Module level import not at top of file
   |
13 | os.environ["TESTING"] = "1"
14 |
15 | from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
16 | from ai_trading.config import management as config
17 | from ai_trading.config.management import TradingConfig
   |

scripts/demo_drawdown_protection.py:16:1: E402 Module level import not at top of file
   |
15 | from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker
16 | from ai_trading.config import management as config
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
17 | from ai_trading.config.management import TradingConfig
18 | CONFIG = TradingConfig()
   |

scripts/demo_drawdown_protection.py:17:1: E402 Module level import not at top of file
   |
15 | from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker
16 | from ai_trading.config import management as config
17 | from ai_trading.config.management import TradingConfig
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
18 | CONFIG = TradingConfig()
   |

scripts/demo_enhanced_debugging.py:9:1: E402 Module level import not at top of file
   |
 7 | """
 8 |
 9 | import os
   | ^^^^^^^^^ E402
10 | import time
11 | from datetime import UTC, datetime
   |

scripts/demo_enhanced_debugging.py:10:1: E402 Module level import not at top of file
   |
 9 | import os
10 | import time
   | ^^^^^^^^^^^ E402
11 | from datetime import UTC, datetime
   |

scripts/demo_enhanced_debugging.py:11:1: E402 Module level import not at top of file
   |
 9 | import os
10 | import time
11 | from datetime import UTC, datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
12 |
13 | # Set environment variables for demo
   |

scripts/demo_enhanced_debugging.py:215:5: F841 Local variable `attributor` is assigned to but never used
    |
213 |     )
214 |
215 |     attributor = get_pnl_attributor()
    |     ^^^^^^^^^^ F841
216 |
217 |     # Simulate various PnL events
    |
    = help: Remove assignment to unused variable `attributor`

scripts/demo_enhanced_debugging.py:375:9: F841 Local variable `correlation_id` is assigned to but never used
    |
373 |     try:
374 |         # Demonstrate each feature
375 |         correlation_id = demonstrate_signal_to_execution_debugging()
    |         ^^^^^^^^^^^^^^ F841
376 |         demonstrate_position_reconciliation()
377 |         demonstrate_pnl_attribution()
    |
    = help: Remove assignment to unused variable `correlation_id`

scripts/demo_enhanced_debugging.py:401:12: BLE001 Do not catch blind exception: `Exception`
    |
399 |         logging.info("4. Debug: Use correlation IDs to trace specific order issues")
400 |
401 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
402 |         logging.info(f"\nDemonstration failed: {e}")
403 |         import traceback
    |

scripts/demo_grid_search.py:9:1: E402 Module level import not at top of file
   |
 7 | """
 8 |
 9 | import tempfile
   | ^^^^^^^^^^^^^^^ E402
10 | from ai_trading.backtesting.grid_runner import grid_search, persist_artifacts
   |

scripts/demo_grid_search.py:10:1: E402 Module level import not at top of file
   |
 9 | import tempfile
10 | from ai_trading.backtesting.grid_runner import grid_search, persist_artifacts
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

scripts/demo_intelligent_position_management.py:86:5: F841 Local variable `analyzer` is assigned to but never used
   |
84 |     from technical_analyzer import TechnicalSignalAnalyzer
85 |     
86 |     analyzer = TechnicalSignalAnalyzer()
   |     ^^^^^^^^ F841
87 |     
88 |     logging.info("📈 Technical Analysis Components:")
   |
   = help: Remove assignment to unused variable `analyzer`

scripts/demo_intelligent_position_management.py:231:9: F841 Local variable `classification` is assigned to but never used
    |
229 |     sectors = ['Technology', 'Financials', 'Healthcare']
230 |     for sector in sectors:
231 |         classification = corr_analyzer._get_symbol_sector('AAPL' if sector == 'Technology' else 'JPM')
    |         ^^^^^^^^^^^^^^ F841
232 |         logging.info(f"   • {sector}: Auto-classification and monitoring")
    |
    = help: Remove assignment to unused variable `classification`

scripts/demo_no_trade_bands.py:9:1: E402 Module level import not at top of file
   |
 7 | """
 8 |
 9 | import os
   | ^^^^^^^^^ E402
10 |
11 | os.environ['ALPACA_API_KEY'] = 'demo'
   |

scripts/demo_no_trade_bands.py:17:1: E402 Module level import not at top of file
   |
15 | os.environ['FLASK_PORT'] = '5000'
16 |
17 | from ai_trading.rebalancer import apply_no_trade_bands
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

scripts/demo_position_holding.py:13:1: E402 Module level import not at top of file
   |
11 | """
12 |
13 | import os
   | ^^^^^^^^^ E402
14 | from datetime import UTC, datetime
   |

scripts/demo_position_holding.py:14:1: E402 Module level import not at top of file
   |
13 | import os
14 | from datetime import UTC, datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
15 |
16 | # Set required environment variables for demo
   |

scripts/demo_position_holding.py:136:9: F841 Local variable `trade_data` is assigned to but never used
    |
135 |         # Simulate meta-learning trigger
136 |         trade_data = {
    |         ^^^^^^^^^^ F841
137 |             **trade,
138 |             'timestamp': datetime.now(UTC).isoformat(),
    |
    = help: Remove assignment to unused variable `trade_data`

scripts/demo_position_holding.py:206:12: BLE001 Do not catch blind exception: `Exception`
    |
204 |         logging.info("\nReady for deployment! 🎉")
205 |
206 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
207 |         logging.info(f"❌ Demo failed: {e}")
208 |         import traceback
    |

scripts/demo_short_selling_implementation.py:9:1: E402 Module level import not at top of file
   |
 7 | """
 8 |
 9 | import os
   | ^^^^^^^^^ E402
10 | import sys
11 | import time
   |

scripts/demo_short_selling_implementation.py:10:1: E402 Module level import not at top of file
   |
 9 | import os
10 | import sys
   | ^^^^^^^^^^ E402
11 | import time
12 | from unittest.mock import Mock, patch
   |

scripts/demo_short_selling_implementation.py:11:1: E402 Module level import not at top of file
   |
 9 | import os
10 | import sys
11 | import time
   | ^^^^^^^^^^^ E402
12 | from unittest.mock import Mock, patch
   |

scripts/demo_short_selling_implementation.py:12:1: E402 Module level import not at top of file
   |
10 | import sys
11 | import time
12 | from unittest.mock import Mock, patch
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
13 |
14 | # Set minimal environment variables
   |

scripts/demo_short_selling_implementation.py:63:32: BLE001 Do not catch blind exception: `Exception`
   |
61 |                         try:
62 |                             result = engine.execute_order("AAPL", 10, "sell_short")
63 |                         except Exception:
   |                                ^^^^^^^^^ BLE001
64 |                             pass  # Expected to stop at liquidity check
65 |                         logging.info("✓ sell_short order bypassed position checks and reached validation")
   |

scripts/demo_short_selling_implementation.py:83:12: BLE001 Do not catch blind exception: `Exception`
   |
81 |         logging.info("✓ Short selling implementation working correctly!")
82 |
83 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
84 |         logging.info(f"✗ Error in short selling demonstration: {e}")
85 |         return False
   |

scripts/demo_short_selling_implementation.py:129:12: BLE001 Do not catch blind exception: `Exception`
    |
127 |         logging.info("✓ Order monitoring implementation working correctly!")
128 |
129 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
130 |         logging.info(f"✗ Error in order monitoring demonstration: {e}")
131 |         return False
    |

scripts/demo_short_selling_implementation.py:153:12: BLE001 Do not catch blind exception: `Exception`
    |
151 |         logging.info("✓ Meta-learning graceful degradation working correctly!")
152 |
153 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
154 |         logging.info(f"✗ Error in meta-learning demonstration: {e}")
155 |         return False
    |

scripts/demonstrate_optimization.py:11:1: E402 Module level import not at top of file
   |
 9 | """
10 |
11 | import sys
   | ^^^^^^^^^^ E402
12 | import os
13 | from datetime import datetime
   |

scripts/demonstrate_optimization.py:12:1: E402 Module level import not at top of file
   |
11 | import sys
12 | import os
   | ^^^^^^^^^ E402
13 | from datetime import datetime
   |

scripts/demonstrate_optimization.py:13:1: E402 Module level import not at top of file
   |
11 | import sys
12 | import os
13 | from datetime import datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
14 |
15 | # Add the project root to Python path for imports
   |

scripts/demonstrate_optimization.py:19:1: E402 Module level import not at top of file
   |
18 | # Use the centralized logger as per AGENTS.md
19 | from ai_trading.logging import logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
20 | from ai_trading.config.management import TradingConfig
21 | CONFIG = TradingConfig()
   |

scripts/demonstrate_optimization.py:20:1: E402 Module level import not at top of file
   |
18 | # Use the centralized logger as per AGENTS.md
19 | from ai_trading.logging import logger
20 | from ai_trading.config.management import TradingConfig
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
21 | CONFIG = TradingConfig()
   |

scripts/demonstrate_optimization.py:203:12: BLE001 Do not catch blind exception: `Exception`
    |
201 |         return False
202 |     
203 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
204 |         logging.info(f"\n❌ Error during demonstration: {e}")
205 |         logger.error(f"Demonstration error: {e}")
    |

scripts/demonstrate_optimization_simple.py:10:1: E402 Module level import not at top of file
   |
 8 | """
 9 |
10 | import os
   | ^^^^^^^^^ E402
11 | import sys
12 | from datetime import datetime
   |

scripts/demonstrate_optimization_simple.py:11:1: E402 Module level import not at top of file
   |
10 | import os
11 | import sys
   | ^^^^^^^^^^ E402
12 | from datetime import datetime
   |

scripts/demonstrate_optimization_simple.py:12:1: E402 Module level import not at top of file
   |
10 | import os
11 | import sys
12 | from datetime import datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
13 |
14 | # Add the project root to Python path for imports
   |

scripts/demonstrate_optimization_simple.py:194:12: BLE001 Do not catch blind exception: `Exception`
    |
192 |         return True
193 |
194 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
195 |         logging.info(f"\n❌ Error during demonstration: {e}")
196 |         return False
    |

scripts/demonstrate_portfolio_optimization.py:11:1: E402 Module level import not at top of file
   |
 9 | """
10 |
11 | import os
   | ^^^^^^^^^ E402
12 | import sys
   |

scripts/demonstrate_portfolio_optimization.py:12:1: E402 Module level import not at top of file
   |
11 | import os
12 | import sys
   | ^^^^^^^^^^ E402
13 |
14 | # Set testing environment
   |

scripts/demonstrate_portfolio_optimization.py:20:1: E402 Module level import not at top of file
   |
18 | sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
19 |
20 | from portfolio_optimizer import PortfolioDecision, create_portfolio_optimizer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
21 | from transaction_cost_calculator import create_transaction_cost_calculator
   |

scripts/demonstrate_portfolio_optimization.py:21:1: E402 Module level import not at top of file
   |
20 | from portfolio_optimizer import PortfolioDecision, create_portfolio_optimizer
21 | from transaction_cost_calculator import create_transaction_cost_calculator
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
22 |
23 | from ai_trading.strategies.regime_detector import create_regime_detector
   |

scripts/demonstrate_portfolio_optimization.py:23:1: E402 Module level import not at top of file
   |
21 | from transaction_cost_calculator import create_transaction_cost_calculator
22 |
23 | from ai_trading.strategies.regime_detector import create_regime_detector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

scripts/demonstrate_portfolio_optimization.py:214:12: BLE001 Do not catch blind exception: `Exception`
    |
212 |     try:
213 |         demonstrate_portfolio_optimization()
214 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
215 |         logging.info(f"Error in demonstration: {e}")
216 |         import traceback
    |

scripts/download_backtest_data.py:56:16: BLE001 Do not catch blind exception: `Exception`
   |
54 |                 adjustment="raw",
55 |             ).df
56 |         except Exception as exc:  # pragma: no cover - network call
   |                ^^^^^^^^^ BLE001
57 |             print(f"Failed to fetch {symbol}: {exc}")
58 |             continue
   |

scripts/error_handling.py:89:16: BLE001 Do not catch blind exception: `Exception`
   |
87 |         try:
88 |             return func()
89 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
90 |             last_error = e
91 |             if attempt < retries:
   |

scripts/error_handling.py:90:13: F841 Local variable `last_error` is assigned to but never used
   |
88 |             return func()
89 |         except Exception as e:
90 |             last_error = e
   |             ^^^^^^^^^^ F841
91 |             if attempt < retries:
92 |                 logger.warning(f"API call failed (attempt {attempt + 1}/{retries + 1}): {e}")
   |
   = help: Remove assignment to unused variable `last_error`

scripts/error_handling.py:132:12: BLE001 Do not catch blind exception: `Exception`
    |
130 |         return True
131 |
132 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
133 |         logger.error("Error validating trade data: %s", e)
134 |         return False
    |

scripts/features.py:24:12: BLE001 Do not catch blind exception: `Exception`
   |
22 |         df["ema26"] = ema(close, 26)
23 |         df["macd"] = df["ema12"] - df["ema26"]
24 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
25 |         logger.error("MACD calculation failed: %s", e)
26 |     return df
   |

scripts/final_validation.py:8:1: E402 Module level import not at top of file
   |
 6 | """
 7 |
 8 | import csv
   | ^^^^^^^^^^ E402
 9 | import os
10 | import sys
   |

scripts/final_validation.py:9:1: E402 Module level import not at top of file
   |
 8 | import csv
 9 | import os
   | ^^^^^^^^^ E402
10 | import sys
   |

scripts/final_validation.py:10:1: E402 Module level import not at top of file
   |
 8 | import csv
 9 | import os
10 | import sys
   | ^^^^^^^^^^ E402
   |

scripts/final_validation.py:40:20: BLE001 Do not catch blind exception: `Exception`
   |
38 |                             if t and t not in tickers:
39 |                                 tickers.append(t)
40 |             except Exception as e:
   |                    ^^^^^^^^^ BLE001
41 |                 logging.info(f"Error reading {path}: {e}")
42 |             return tickers
   |

scripts/final_validation.py:68:12: BLE001 Do not catch blind exception: `Exception`
   |
66 |             return False
67 |
68 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
69 |         logging.info(f"❌ Error testing ticker loading: {e}")
70 |         return False
   |

scripts/final_validation.py:100:12: BLE001 Do not catch blind exception: `Exception`
    |
 98 |         return passed == len(checks)
 99 |
100 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
101 |         logging.info(f"❌ Error checking README: {e}")
102 |         return False
    |

scripts/final_validation.py:117:16: BLE001 Do not catch blind exception: `Exception`
    |
115 |         try:
116 |             results.append(test())
117 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
118 |             logging.info(f"❌ Test {test.__name__} failed: {e}")
119 |             results.append(False)
    |

scripts/final_validation_report.py:9:1: E402 Module level import not at top of file
   |
 7 | """
 8 |
 9 | import os
   | ^^^^^^^^^ E402
10 | import sys
   |

scripts/final_validation_report.py:10:1: E402 Module level import not at top of file
   |
 9 | import os
10 | import sys
   | ^^^^^^^^^^ E402
   |

scripts/health_check.py:34:60: F401 `production_monitoring.HealthCheckResult` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
32 |         get_production_monitor,
33 |     )
34 |     from production_monitoring import HealthCheckResult as ProdHealthCheckResult
   |                                                            ^^^^^^^^^^^^^^^^^^^^^ F401
35 |     from production_monitoring import HealthStatus as ProdHealthStatus
36 |     PRODUCTION_MONITORING_AVAILABLE = True
   |
   = help: Remove unused import: `production_monitoring.HealthCheckResult`

scripts/health_check.py:35:55: F401 `production_monitoring.HealthStatus` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
33 |     )
34 |     from production_monitoring import HealthCheckResult as ProdHealthCheckResult
35 |     from production_monitoring import HealthStatus as ProdHealthStatus
   |                                                       ^^^^^^^^^^^^^^^^ F401
36 |     PRODUCTION_MONITORING_AVAILABLE = True
37 | except ImportError:
   |
   = help: Remove unused import: `production_monitoring.HealthStatus`

scripts/health_check.py:84:20: BLE001 Do not catch blind exception: `Exception`
   |
82 |                 self.production_monitor = get_production_monitor()
83 |                 logger.info("Production monitoring integration enabled")
84 |             except Exception as e:
   |                    ^^^^^^^^^ BLE001
85 |                 logger.warning(f"Could not initialize production monitoring: {e}")
   |

scripts/health_check.py:212:16: BLE001 Do not catch blind exception: `Exception`
    |
210 |             )
211 |
212 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
213 |             return HealthCheckResult(
214 |                 name="system_resources",
    |

scripts/health_check.py:253:16: BLE001 Do not catch blind exception: `Exception`
    |
251 |             )
252 |
253 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
254 |             return HealthCheckResult(
255 |                 name="disk_space",
    |

scripts/health_check.py:293:16: BLE001 Do not catch blind exception: `Exception`
    |
291 |             )
292 |
293 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
294 |             return HealthCheckResult(
295 |                 name="memory_usage",
    |

scripts/health_check.py:351:16: BLE001 Do not catch blind exception: `Exception`
    |
349 |             )
350 |
351 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
352 |             return HealthCheckResult(
353 |                 name="log_files",
    |

scripts/health_check.py:395:16: BLE001 Do not catch blind exception: `Exception`
    |
393 |             )
394 |
395 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
396 |             return HealthCheckResult(
397 |                 name="environment_variables",
    |

scripts/health_check.py:448:12: BLE001 Do not catch blind exception: `Exception`
    |
446 |                     logger.error("Health critical - %s: %s", name, check["message"])
447 |
448 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
449 |         logger.error("Failed to run health check: %s", e)
    |

scripts/health_check.py:469:41: F401 `ai_trading.core.bot_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
467 |         # Check if trading modules are importable
468 |         try:
469 |             from ai_trading.core import bot_engine
    |                                         ^^^^^^^^^^ F401
470 |             details["bot_engine"] = "OK"
471 |         except ImportError as e:
    |
    = help: Remove unused import: `ai_trading.core.bot_engine`

scripts/health_check.py:476:20: F401 `trade_execution` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
475 |         try:
476 |             import trade_execution
    |                    ^^^^^^^^^^^^^^^ F401
477 |             details["trade_execution"] = "OK"
478 |         except ImportError as e:
    |
    = help: Remove unused import: `trade_execution`

scripts/health_check.py:484:13: F841 Local variable `RiskEngine` is assigned to but never used
    |
482 |         try:
483 |             from ai_trading.core.bot_engine import get_risk_engine
484 |             RiskEngine = get_risk_engine()
    |             ^^^^^^^^^^ F841
485 |             details["risk_engine"] = "OK"
486 |         except ImportError as e:
    |
    = help: Remove assignment to unused variable `RiskEngine`

scripts/health_check.py:524:12: BLE001 Do not catch blind exception: `Exception`
    |
522 |         )
523 |
524 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
525 |         return HealthCheckResult(
526 |             name="trading_system",
    |

scripts/integration_test.py:40:12: BLE001 Do not catch blind exception: `Exception`
   |
38 |             print("✓ Model registry: register → latest_for → load_model workflow works")
39 |             return True
40 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
41 |         print(f"✗ Model registry test failed: {e}")
42 |         traceback.print_exc()
   |

scripts/integration_test.py:65:12: BLE001 Do not catch blind exception: `Exception`
   |
63 |         print("✓ DISABLE_DAILY_RETRAIN parsing works for all test cases")
64 |         return True
65 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
66 |         print(f"✗ DISABLE_DAILY_RETRAIN test failed: {e}")
67 |         return False
   |

scripts/integration_test.py:102:12: BLE001 Do not catch blind exception: `Exception`
    |
100 |         print("✓ Executor auto-sizing and environment overrides work")
101 |         return True
102 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
103 |         print(f"✗ Executor sizing test failed: {e}")
104 |         return False
    |

scripts/integration_test.py:146:12: BLE001 Do not catch blind exception: `Exception`
    |
144 |         print("✓ Minute cache helpers work correctly")
145 |         return True
146 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
147 |         print(f"✗ Minute cache helpers test failed: {e}")
148 |         return False
    |

scripts/integration_test.py:188:12: BLE001 Do not catch blind exception: `Exception`
    |
186 |         print("✓ Import hardening patterns are in place")
187 |         return True
188 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
189 |         print(f"✗ Import hardening test failed: {e}")
190 |         return False
    |

scripts/integration_test.py:213:12: BLE001 Do not catch blind exception: `Exception`
    |
211 |         print("✓ HTTP timeouts are implemented")
212 |         return True
213 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
214 |         print(f"✗ HTTP timeouts test failed: {e}")
215 |         return False
    |

scripts/integration_test.py:232:12: BLE001 Do not catch blind exception: `Exception`
    |
230 |         print("✓ Data fetcher helpers are exported")
231 |         return True
232 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
233 |         print(f"✗ Data fetcher helpers test failed: {e}")
234 |         return False
    |

scripts/integration_test.py:262:16: BLE001 Do not catch blind exception: `Exception`
    |
260 |             else:
261 |                 failed += 1
262 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
263 |             print(f"✗ Test {test.__name__} failed with exception: {e}")
264 |             failed += 1
    |

scripts/memory_optimizer.py:185:16: BLE001 Do not catch blind exception: `Exception`
    |
183 |             self.logger.info(f"Cleaned up {collected} objects and {len(dead_refs)} dead references")
184 |
185 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
186 |             self.logger.error(f"Error during circular reference cleanup: {e}")
    |

scripts/memory_optimizer.py:201:16: BLE001 Do not catch blind exception: `Exception`
    |
200 |                 self.logger.info("Pandas memory optimization applied")
201 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
202 |             self.logger.warning(f"Could not optimize pandas memory: {e}")
    |

scripts/memory_optimizer.py:228:20: BLE001 Do not catch blind exception: `Exception`
    |
226 |                 self.stop_monitoring.wait(30)  # Check every 30 seconds
227 |
228 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
229 |                 self.logger.error(f"Error in memory monitoring: {e}")
230 |                 self.stop_monitoring.wait(60)  # Wait longer on error
    |

scripts/ml_model.py:36:1: E402 Module level import not at top of file
   |
36 | from joblib import parallel_backend
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
37 |
38 | # AI-AGENT-REF: restrict joblib parallelism
   |

scripts/ml_model.py:63:35: F821 Undefined name `pd`
   |
61 |         self.logger = logger
62 |
63 |     def _validate_inputs(self, X: pd.DataFrame) -> None:
   |                                   ^^ F821
64 |         import pandas as pd
65 |         if not isinstance(X, pd.DataFrame):
   |

scripts/ml_model.py:75:22: F821 Undefined name `pd`
   |
73 |             raise TypeError("All input columns must be numeric")
74 |
75 |     def fit(self, X: pd.DataFrame, y: Sequence[float] | pd.Series) -> float:
   |                      ^^ F821
76 |         self._validate_inputs(X)
77 |         start = time.time()
   |

scripts/ml_model.py:75:57: F821 Undefined name `pd`
   |
73 |             raise TypeError("All input columns must be numeric")
74 |
75 |     def fit(self, X: pd.DataFrame, y: Sequence[float] | pd.Series) -> float:
   |                                                         ^^ F821
76 |         self._validate_inputs(X)
77 |         start = time.time()
   |

scripts/ml_model.py:93:26: F821 Undefined name `pd`
   |
91 |             raise
92 |
93 |     def predict(self, X: pd.DataFrame) -> Any:
   |                          ^^ F821
94 |         self._validate_inputs(X)
95 |         try:
   |

scripts/ml_model.py:140:26: F821 Undefined name `pd`
    |
139 | def train_model(
140 |     X: Sequence[float] | pd.Series | pd.DataFrame,
    |                          ^^ F821
141 |     y: Sequence[float] | pd.Series,
142 |     algorithm: str = "linear",
    |

scripts/ml_model.py:140:38: F821 Undefined name `pd`
    |
139 | def train_model(
140 |     X: Sequence[float] | pd.Series | pd.DataFrame,
    |                                      ^^ F821
141 |     y: Sequence[float] | pd.Series,
142 |     algorithm: str = "linear",
    |

scripts/ml_model.py:141:26: F821 Undefined name `pd`
    |
139 | def train_model(
140 |     X: Sequence[float] | pd.Series | pd.DataFrame,
141 |     y: Sequence[float] | pd.Series,
    |                          ^^ F821
142 |     algorithm: str = "linear",
143 | ) -> BaseEstimator:
    |

scripts/ml_model.py:155:50: F821 Undefined name `pd`
    |
155 | def predict_model(model: Any, X: Sequence[Any] | pd.DataFrame) -> list[float]:
    |                                                  ^^ F821
156 |     """Return predictions from a fitted model.
    |

scripts/monitoring_dashboard.py:189:16: BLE001 Do not catch blind exception: `Exception`
    |
187 |             self.logger.info(f"Starting monitoring dashboard on port {self.port}")
188 |             self.app.run(host='0.0.0.0', port=self.port, debug=debug, threaded=True)
189 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
190 |             self.logger.error(f"Failed to start dashboard: {e}")
    |

scripts/monitoring_dashboard.py:225:20: BLE001 Do not catch blind exception: `Exception`
    |
223 |                 self.check_alert_conditions()
224 |
225 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
226 |                 self.logger.error(f"Error in monitoring loop: {e}")
    |

scripts/monitoring_dashboard.py:284:16: BLE001 Do not catch blind exception: `Exception`
    |
282 |             self.trading_metrics.append(metrics)
283 |
284 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
285 |             self.logger.error(f"Error collecting trading metrics: {e}")
    |

scripts/monitoring_dashboard.py:297:13: F841 Local variable `recent_orders` is assigned to but never used
    |
296 |             # Trading system metrics (simplified - would integrate with actual systems)
297 |             recent_orders = [o for o in self.active_orders.values()]
    |             ^^^^^^^^^^^^^ F841
298 |
299 |             kpis = PerformanceKPIs(
    |
    = help: Remove assignment to unused variable `recent_orders`

scripts/monitoring_dashboard.py:315:16: BLE001 Do not catch blind exception: `Exception`
    |
313 |             self.performance_kpis.append(kpis)
314 |
315 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
316 |             self.logger.error(f"Error collecting performance KPIs: {e}")
    |

scripts/monitoring_dashboard.py:354:16: BLE001 Do not catch blind exception: `Exception`
    |
352 |             self.risk_metrics.append(risk_metrics)
353 |
354 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
355 |             self.logger.error(f"Error collecting risk metrics: {e}")
    |

scripts/monitoring_dashboard.py:389:16: BLE001 Do not catch blind exception: `Exception`
    |
387 |                 )
388 |
389 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
390 |             self.logger.error(f"Error checking alert conditions: {e}")
    |

scripts/monitoring_dashboard.py:415:20: BLE001 Do not catch blind exception: `Exception`
    |
413 |             try:
414 |                 callback(alert)
415 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
416 |                 self.logger.error(f"Error in alert callback: {e}")
    |

scripts/optimized_startup.py:101:12: BLE001 Do not catch blind exception: `Exception`
    |
 99 |         logging.info("System diagnostic not available, skipping health check")
100 |         return True
101 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
102 |         logging.info(f"Health check failed: {e}")
103 |         return False
    |

scripts/optimized_startup.py:124:12: BLE001 Do not catch blind exception: `Exception`
    |
122 |     except ImportError:
123 |         logging.info("Process manager not available, skipping duplicate cleanup")
124 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
125 |         logging.info(f"Process cleanup failed: {e}")
    |

scripts/optimized_startup.py:150:12: BLE001 Do not catch blind exception: `Exception`
    |
148 |         logging.info("Monitoring systems not available")
149 |         return False
150 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
151 |         logging.info(f"Failed to start monitoring: {e}")
152 |         return False
    |

scripts/optimized_startup.py:165:12: BLE001 Do not catch blind exception: `Exception`
    |
163 |     except ImportError:
164 |         logging.debug("Memory optimizer not available, skipping emergency cleanup")
165 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
166 |         logging.warning(f"Emergency memory cleanup failed: {e}")
    |

scripts/optimized_startup.py:192:5: F841 Local variable `monitoring_started` is assigned to but never used
    |
191 |     # Start monitoring
192 |     monitoring_started = start_monitoring()
    |     ^^^^^^^^^^^^^^^^^^ F841
193 |     
194 |     # Import and start the main trading application
    |
    = help: Remove assignment to unused variable `monitoring_started`

scripts/performance_demo.py:9:1: E402 Module level import not at top of file
   |
 7 | """
 8 |
 9 | import os
   | ^^^^^^^^^ E402
10 | import sys
11 | from datetime import datetime, timezone
   |

scripts/performance_demo.py:10:1: E402 Module level import not at top of file
   |
 9 | import os
10 | import sys
   | ^^^^^^^^^^ E402
11 | from datetime import datetime, timezone
   |

scripts/performance_demo.py:11:1: E402 Module level import not at top of file
   |
 9 | import os
10 | import sys
11 | from datetime import datetime, timezone
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
12 |
13 | def print_header(title):
   |

scripts/performance_demo.py:51:12: BLE001 Do not catch blind exception: `Exception`
   |
49 |             logging.info("  - No performance recommendations needed ✓")
50 |             
51 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
52 |         logging.info(f"✗ System diagnostic error: {e}")
   |

scripts/performance_demo.py:86:12: BLE001 Do not catch blind exception: `Exception`
   |
84 |             logging.info(f"    • {obj_type}: {count:,}")
85 |             
86 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
87 |         logging.info(f"✗ Memory optimizer error: {e}")
   |

scripts/performance_demo.py:132:12: BLE001 Do not catch blind exception: `Exception`
    |
130 |             logging.info("  - No alerts (system healthy) ✓")
131 |             
132 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
133 |         logging.info(f"✗ Performance monitor error: {e}")
    |

scripts/performance_demo.py:176:12: BLE001 Do not catch blind exception: `Exception`
    |
174 |             logging.info("  - All services healthy ✓")
175 |             
176 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
177 |         logging.info(f"✗ Process manager error: {e}")
    |

scripts/performance_demo.py:208:12: BLE001 Do not catch blind exception: `Exception`
    |
206 |             logging.info("  ✓ Periodic memory checks added")
207 |             
208 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
209 |         logging.info(f"✗ Integration check error: {e}")
    |

scripts/performance_demo.py:231:12: BLE001 Do not catch blind exception: `Exception`
    |
229 |             logging.info("  ✗ Startup script not found")
230 |             
231 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
232 |         logging.info(f"✗ Startup optimization error: {e}")
    |

scripts/performance_monitor.py:88:16: BLE001 Do not catch blind exception: `Exception`
   |
86 |             metrics['python'] = self._get_python_metrics()
87 |             
88 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
89 |             self.logger.error(f"Error collecting system metrics: {e}")
90 |             metrics['error'] = str(e)
   |

scripts/performance_monitor.py:131:16: BLE001 Do not catch blind exception: `Exception`
    |
129 |                 }
130 |                 
131 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
132 |             memory_metrics['error'] = str(e)
    |

scripts/performance_monitor.py:154:16: BLE001 Do not catch blind exception: `Exception`
    |
152 |             cpu_metrics['usage_percent'] = min(cpu_metrics['load_1min'] / cpu_metrics['cpu_count'] * 100, 100)
153 |             
154 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
155 |             cpu_metrics['error'] = str(e)
    |

scripts/performance_monitor.py:196:16: BLE001 Do not catch blind exception: `Exception`
    |
194 |             disk_metrics['large_files_count'] = len(large_files)
195 |             
196 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
197 |             disk_metrics['error'] = str(e)
    |

scripts/performance_monitor.py:233:20: BLE001 Do not catch blind exception: `Exception`
    |
231 |             try:
232 |                 process_metrics['python_processes'] = self._count_trading_bot_processes()
233 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
234 |                 logger.warning(f"Error counting trading bot processes: {e}")
235 |                 process_metrics['python_processes'] = 1
    |

scripts/performance_monitor.py:234:17: F821 Undefined name `logger`
    |
232 |                 process_metrics['python_processes'] = self._count_trading_bot_processes()
233 |             except Exception as e:
234 |                 logger.warning(f"Error counting trading bot processes: {e}")
    |                 ^^^^^^ F821
235 |                 process_metrics['python_processes'] = 1
    |

scripts/performance_monitor.py:237:16: BLE001 Do not catch blind exception: `Exception`
    |
235 |                 process_metrics['python_processes'] = 1
236 |             
237 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
238 |             process_metrics['error'] = str(e)
    |

scripts/performance_monitor.py:332:16: BLE001 Do not catch blind exception: `Exception`
    |
330 |             self.logger.warning(f"Error getting process list: {e}")
331 |             return self._count_python_processes_fallback()
332 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
333 |             self.logger.error(f"Unexpected error counting trading bot processes: {e}")
334 |             return self._count_python_processes_fallback()
    |

scripts/performance_monitor.py:364:16: BLE001 Do not catch blind exception: `Exception`
    |
362 |         except (subprocess.SubprocessError, subprocess.CalledProcessError):
363 |             network_metrics['established_connections'] = 0
364 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
365 |             network_metrics['error'] = str(e)
    |

scripts/performance_monitor.py:387:16: BLE001 Do not catch blind exception: `Exception`
    |
385 |             python_metrics['trading_modules_loaded'] = len(trading_modules)
386 |             
387 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
388 |             python_metrics['error'] = str(e)
    |

scripts/performance_monitor.py:490:36: BLE001 Do not catch blind exception: `Exception`
    |
488 | …                     try:
489 | …                         callback(alert)
490 | …                     except Exception as e:
    |                              ^^^^^^^^^ BLE001
491 | …                         self.logger.error(f"Error in alert callback: {e}")
    |

scripts/performance_monitor.py:500:20: BLE001 Do not catch blind exception: `Exception`
    |
498 |                 self.stop_monitoring.wait(self.monitoring_interval)
499 |                 
500 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
501 |                 self.logger.error(f"Error in monitoring loop: {e}")
502 |                 self.stop_monitoring.wait(60)  # Wait longer on error
    |

scripts/performance_optimizer.py:132:13: F841 Local variable `success` is assigned to but never used
    |
130 |         except Exception as e:
131 |             self.logger.warning(f"Function {func_name} failed during profiling: {e}")
132 |             success = False
    |             ^^^^^^^ F841
133 |             raise
134 |         finally:
    |
    = help: Remove assignment to unused variable `success`

scripts/performance_optimizer.py:160:9: F841 Local variable `times` is assigned to but never used
    |
159 |         # Update or create performance profile
160 |         times = list(self.execution_times[func_name])
    |         ^^^^^ F841
161 |
162 |         if func_name in self.function_profiles:
    |
    = help: Remove assignment to unused variable `times`

scripts/performance_optimizer.py:295:9: F841 Local variable `cutoff_time` is assigned to but never used
    |
293 |         """Clean up old performance data to free memory."""
294 |         # Keep only recent performance data
295 |         cutoff_time = datetime.now(UTC) - timedelta(hours=24)
    |         ^^^^^^^^^^^ F841
296 |
297 |         # Clear old execution times
    |
    = help: Remove assignment to unused variable `cutoff_time`

scripts/portfolio_rl.py:17:12: BLE001 Do not catch blind exception: `Exception`
   |
15 |         _test_module = nn.Module()
16 |         _PYTORCH_WORKS = True
17 |     except Exception:
   |            ^^^^^^^^^ BLE001
18 |         _PYTORCH_WORKS = False
   |

scripts/portfolio_rl.py:20:8: BLE001 Do not catch blind exception: `Exception`
   |
18 |         _PYTORCH_WORKS = False
19 |
20 | except Exception:  # pragma: no cover - optional dependency
   |        ^^^^^^^^^ BLE001
21 |     # AI-AGENT-REF: Create comprehensive torch fallback that supports type annotations
22 |     torch = types.ModuleType("torch")
   |

scripts/portfolio_rl.py:53:16: BLE001 Do not catch blind exception: `Exception`
   |
51 |                 nn.Softmax(dim=-1),
52 |             )
53 |         except Exception:
   |                ^^^^^^^^^ BLE001
54 |             # AI-AGENT-REF: Handle any PyTorch version compatibility issues during initialization
55 |             self.state_dim = state_dim
   |

scripts/portfolio_rl.py:72:16: BLE001 Do not catch blind exception: `Exception`
   |
70 |         try:
71 |             return self.net(x)
72 |         except Exception:
   |                ^^^^^^^^^ BLE001
73 |             # AI-AGENT-REF: Fallback if forward pass fails due to version issues
74 |             if np is not None:
   |

scripts/portfolio_rl.py:94:16: BLE001 Do not catch blind exception: `Exception`
   |
92 |             self.actor = Actor(state_dim, action_dim)
93 |             self.optimizer = optim.Adam(self.actor.parameters(), lr=1e-3)
94 |         except Exception:
   |                ^^^^^^^^^ BLE001
95 |             # AI-AGENT-REF: Handle initialization errors due to version compatibility
96 |             self.actor = Actor(state_dim, action_dim)
   |

scripts/portfolio_rl.py:140:16: BLE001 Do not catch blind exception: `Exception`
    |
138 |                 total = 1.0
139 |             return weights / total
140 |         except Exception:
    |                ^^^^^^^^^ BLE001
141 |             # AI-AGENT-REF: Fallback if PyTorch operations fail
142 |             weights = self.actor.forward(state)
    |

scripts/predict.py:22:1: E402 Module level import not at top of file
   |
20 | CONFIG = TradingConfig()
21 |
22 | from ai_trading.utils import http
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
23 | from ai_trading.utils.timing import (
24 |     HTTP_TIMEOUT,  # AI-AGENT-REF: explicit timeout constant
   |

scripts/predict.py:23:1: E402 Module level import not at top of file
   |
22 |   from ai_trading.utils import http
23 | / from ai_trading.utils.timing import (
24 | |     HTTP_TIMEOUT,  # AI-AGENT-REF: explicit timeout constant
25 | | )
   | |_^ E402
26 |
27 |   logger = logging.getLogger(__name__)
   |

scripts/predict.py:37:1: E402 Module level import not at top of file
   |
37 | import threading
   | ^^^^^^^^^^^^^^^^ E402
38 | import time
   |

scripts/predict.py:38:1: E402 Module level import not at top of file
   |
37 | import threading
38 | import time
   | ^^^^^^^^^^^ E402
39 |
40 | # AI-AGENT-REF: Memory leak prevention with TTLCache
   |

scripts/predict.py:41:1: E402 Module level import not at top of file
   |
40 | # AI-AGENT-REF: Memory leak prevention with TTLCache
41 | from cachetools import TTLCache
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
42 |
43 | # TTLCache with 5 min TTL and 1000 items max to prevent memory leaks
   |

scripts/predict.py:56:23: F821 Undefined name `config`
   |
55 |     # Support both SENTIMENT_API_KEY and NEWS_API_KEY for backwards compatibility
56 |     api_key = getattr(config, "SENTIMENT_API_KEY", None) or config.NEWS_API_KEY
   |                       ^^^^^^ F821
57 |     if not api_key:
58 |         logger.debug(
   |

scripts/predict.py:56:61: F821 Undefined name `config`
   |
55 |     # Support both SENTIMENT_API_KEY and NEWS_API_KEY for backwards compatibility
56 |     api_key = getattr(config, "SENTIMENT_API_KEY", None) or config.NEWS_API_KEY
   |                                                             ^^^^^^ F821
57 |     if not api_key:
58 |         logger.debug(
   |

scripts/predict.py:67:12: F821 Undefined name `_CACHETOOLS_AVAILABLE`
   |
65 |     with _sentiment_lock:
66 |         # Check cache first (TTLCache handles expiration automatically)
67 |         if _CACHETOOLS_AVAILABLE:
   |            ^^^^^^^^^^^^^^^^^^^^^ F821
68 |             if symbol in _sentiment_cache:
69 |                 cached_score = _sentiment_cache[symbol]
   |

scripts/predict.py:98:20: F821 Undefined name `_CACHETOOLS_AVAILABLE`
    |
 96 |                 )
 97 |                 # Return cached value if available, otherwise neutral
 98 |                 if _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
    |                    ^^^^^^^^^^^^^^^^^^^^^ F821
 99 |                     return _sentiment_cache[symbol]
100 |                 elif not _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
    |

scripts/predict.py:100:26: F821 Undefined name `_CACHETOOLS_AVAILABLE`
    |
 98 |                 if _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
 99 |                     return _sentiment_cache[symbol]
100 |                 elif not _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
    |                          ^^^^^^^^^^^^^^^^^^^^^ F821
101 |                     return _sentiment_cache[symbol][0]
102 |                 return 0.0
    |

scripts/predict.py:109:13: F821 Undefined name `config`
    |
107 |         # Support configurable sentiment API URL, with fallback to NewsAPI
108 |         base_url = getattr(
109 |             config, "SENTIMENT_API_URL", "https://newsapi.org/v2/everything"
    |             ^^^^^^ F821
110 |         )
111 |         url = (
    |

scripts/predict.py:128:16: F821 Undefined name `_CACHETOOLS_AVAILABLE`
    |
126 |         # Cache the result with memory leak prevention
127 |         with _sentiment_lock:
128 |             if _CACHETOOLS_AVAILABLE:
    |                ^^^^^^^^^^^^^^^^^^^^^ F821
129 |                 _sentiment_cache[symbol] = score  # TTLCache handles expiration
130 |             else:
    |

scripts/predict.py:147:16: F821 Undefined name `_CACHETOOLS_AVAILABLE`
    |
145 |         # Return cached value if available during error, otherwise neutral
146 |         with _sentiment_lock:
147 |             if _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
    |                ^^^^^^^^^^^^^^^^^^^^^ F821
148 |                 return _sentiment_cache[symbol]
149 |             elif not _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
    |

scripts/predict.py:149:22: F821 Undefined name `_CACHETOOLS_AVAILABLE`
    |
147 |             if _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
148 |                 return _sentiment_cache[symbol]
149 |             elif not _CACHETOOLS_AVAILABLE and symbol in _sentiment_cache:
    |                      ^^^^^^^^^^^^^^^^^^^^^ F821
150 |                 return _sentiment_cache[symbol][0]
151 |         return 0.0
    |

scripts/problem_statement_validation.py:8:1: E402 Module level import not at top of file
  |
6 | """
7 |
8 | import re
  | ^^^^^^^^^ E402
9 | from pathlib import Path
  |

scripts/problem_statement_validation.py:9:1: E402 Module level import not at top of file
  |
8 | import re
9 | from pathlib import Path
  | ^^^^^^^^^^^^^^^^^^^^^^^^ E402
  |

scripts/problem_statement_validation.py:182:12: BLE001 Do not catch blind exception: `Exception`
    |
180 |         return True
181 |
182 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
183 |         logging.info(f"❌ Validation failed: {e}")
184 |         import traceback
    |

scripts/process_manager.py:271:16: BLE001 Do not catch blind exception: `Exception`
    |
269 |                 # Note: PID file will be automatically removed when process exits
270 |                 # since we hold an exclusive lock on it
271 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
272 |             self.logger.debug(f"Error cleaning up PID file: {e}")
    |

scripts/process_manager.py:495:16: BLE001 Do not catch blind exception: `Exception`
    |
493 |             return True
494 |             
495 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
496 |             self.logger.error(f"Failed to acquire process lock: {e}")
497 |             return False
    |

scripts/production_integration.py:28:9: F401 `production_monitoring.get_production_monitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
26 |         CircuitBreaker,
27 |         ProductionMonitor,
28 |         get_production_monitor,
   |         ^^^^^^^^^^^^^^^^^^^^^^ F401
29 |         initialize_production_monitoring,
30 |     )
   |
   = help: Remove unused import: `production_monitoring.get_production_monitor`

scripts/production_integration.py:37:9: F401 `performance_optimizer.cached` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
35 | try:
36 |     from performance_optimizer import (
37 |         cached,
   |         ^^^^^^ F401
38 |         get_performance_optimizer,
39 |         initialize_performance_optimizer,
   |
   = help: Remove unused import

scripts/production_integration.py:38:9: F401 `performance_optimizer.get_performance_optimizer` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
36 |     from performance_optimizer import (
37 |         cached,
38 |         get_performance_optimizer,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ F401
39 |         initialize_performance_optimizer,
40 |         profile_performance,
   |
   = help: Remove unused import

scripts/production_integration.py:40:9: F401 `performance_optimizer.profile_performance` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
38 |         get_performance_optimizer,
39 |         initialize_performance_optimizer,
40 |         profile_performance,
   |         ^^^^^^^^^^^^^^^^^^^ F401
41 |     )
42 |     PERFORMANCE_OPTIMIZER_AVAILABLE = True
   |
   = help: Remove unused import

scripts/production_integration.py:47:34: F401 `security_manager.get_security_manager` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
46 | try:
47 |     from security_manager import get_security_manager, initialize_security_manager
   |                                  ^^^^^^^^^^^^^^^^^^^^ F401
48 |     SECURITY_MANAGER_AVAILABLE = True
49 | except ImportError:
   |
   = help: Remove unused import: `security_manager.get_security_manager`

scripts/production_integration.py:54:9: F401 `monitoring_dashboard.get_monitoring_dashboard` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
52 | try:
53 |     from monitoring_dashboard import (
54 |         get_monitoring_dashboard,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ F401
55 |         initialize_monitoring_dashboard,
56 |     )
   |
   = help: Remove unused import: `monitoring_dashboard.get_monitoring_dashboard`

scripts/production_integration.py:62:30: F401 `health_check.health_monitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
61 | try:
62 |     from health_check import health_monitor
   |                              ^^^^^^^^^^^^^^ F401
63 |     HEALTH_CHECK_AVAILABLE = True
64 | except ImportError:
   |
   = help: Remove unused import: `health_check.health_monitor`

scripts/production_integration.py:103:24: BLE001 Do not catch blind exception: `Exception`
    |
101 |                     self.logger.info("✓ Production monitoring initialized")
102 |                     success_count += 1
103 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
104 |                     self.logger.error(f"✗ Failed to initialize production monitoring: {e}")
    |

scripts/production_integration.py:113:24: BLE001 Do not catch blind exception: `Exception`
    |
111 |                     self.logger.info("✓ Performance optimizer initialized")
112 |                     success_count += 1
113 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
114 |                     self.logger.error(f"✗ Failed to initialize performance optimizer: {e}")
    |

scripts/production_integration.py:123:24: BLE001 Do not catch blind exception: `Exception`
    |
121 |                     self.logger.info("✓ Security manager initialized")
122 |                     success_count += 1
123 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
124 |                     self.logger.error(f"✗ Failed to initialize security manager: {e}")
    |

scripts/production_integration.py:133:24: BLE001 Do not catch blind exception: `Exception`
    |
131 |                     self.logger.info("✓ Monitoring dashboard initialized")
132 |                     success_count += 1
133 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
134 |                     self.logger.error(f"✗ Failed to initialize monitoring dashboard: {e}")
    |

scripts/production_integration.py:151:16: BLE001 Do not catch blind exception: `Exception`
    |
149 |             return self.systems_initialized
150 |
151 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
152 |             self.logger.error(f"Failed to initialize production systems: {e}")
153 |             return False
    |

scripts/production_integration.py:211:16: BLE001 Do not catch blind exception: `Exception`
    |
209 |             self.logger.info("Health check integration configured")
210 |
211 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
212 |             self.logger.error(f"Failed to setup health check integration: {e}")
    |

scripts/production_integration.py:233:16: BLE001 Do not catch blind exception: `Exception`
    |
231 |             return True
232 |
233 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
234 |             self.logger.error(f"Failed to start monitoring: {e}")
235 |             return False
    |

scripts/production_integration.py:249:16: BLE001 Do not catch blind exception: `Exception`
    |
247 |             self.logger.info("✓ All monitoring systems stopped")
248 |
249 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
250 |             self.logger.error(f"Error stopping monitoring: {e}")
    |

scripts/production_integration.py:361:16: BLE001 Do not catch blind exception: `Exception`
    |
359 |                 )
360 |
361 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
362 |             self.logger.error(f"Error monitoring trade execution: {e}")
    |

scripts/production_integration.py:380:20: BLE001 Do not catch blind exception: `Exception`
    |
378 |                     'performance_report': self.production_monitor.get_performance_report()
379 |                 }
380 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
381 |                 status['systems']['production_monitoring'] = {
382 |                     'status': 'error',
    |

scripts/production_integration.py:394:20: BLE001 Do not catch blind exception: `Exception`
    |
392 |                     'security_report': self.security_manager.get_security_report()
393 |                 }
394 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
395 |                 status['systems']['security'] = {
396 |                     'status': 'error',
    |

scripts/production_integration.py:408:20: BLE001 Do not catch blind exception: `Exception`
    |
406 |                     'performance_report': self.performance_optimizer.get_performance_report()
407 |                 }
408 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
409 |                 status['systems']['performance'] = {
410 |                     'status': 'error',
    |

scripts/production_integration.py:419:20: BLE001 Do not catch blind exception: `Exception`
    |
417 |                 from health_check import get_health_status
418 |                 status['systems']['health'] = get_health_status()
419 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
420 |                 status['systems']['health'] = {
421 |                     'status': 'error',
    |

scripts/production_integration.py:456:20: BLE001 Do not catch blind exception: `Exception`
    |
454 |                     )
455 |
456 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
457 |                 audit_results['security_audit'] = {'error': str(e)}
    |

scripts/production_integration.py:481:20: BLE001 Do not catch blind exception: `Exception`
    |
479 |                     )
480 |
481 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
482 |                 audit_results['performance_audit'] = {'error': str(e)}
    |

scripts/production_integration.py:507:20: BLE001 Do not catch blind exception: `Exception`
    |
505 |                     )
506 |
507 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
508 |                 audit_results['health_audit'] = {'error': str(e)}
    |

scripts/production_monitoring.py:208:20: BLE001 Do not catch blind exception: `Exception`
    |
206 |                 self._log_performance_summary(metrics)
207 |
208 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
209 |                 self.logger.error(f"Error in monitoring loop: {e}")
    |

scripts/production_monitoring.py:238:16: BLE001 Do not catch blind exception: `Exception`
    |
236 |             )
237 |
238 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
239 |             self.logger.error(f"Error collecting metrics: {e}")
240 |             # Return zero metrics on error
    |

scripts/production_monitoring.py:310:20: BLE001 Do not catch blind exception: `Exception`
    |
308 |                         })
309 |
310 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
311 |                 self.logger.error(f"Health check {name} failed: {e}")
312 |                 self.last_health_results[name] = HealthCheckResult(
    |

scripts/production_validator.py:134:28: BLE001 Do not catch blind exception: `Exception`
    |
132 |                         response_times.append(response_time)
133 |                         successful_requests += 1
134 |                     except Exception as e:
    |                            ^^^^^^^^^ BLE001
135 |                         errors.append(str(e))
136 |                         failed_requests += 1
    |

scripts/production_validator.py:143:21: F841 Local variable `result` is assigned to but never used
    |
141 |             for future, submit_time in futures:
142 |                 try:
143 |                     result = future.result(timeout=30)
    |                     ^^^^^^ F841
144 |                     response_time = (time.perf_counter() - submit_time) * 1000
145 |                     response_times.append(response_time)
    |
    = help: Remove assignment to unused variable `result`

scripts/production_validator.py:147:24: BLE001 Do not catch blind exception: `Exception`
    |
145 |                     response_times.append(response_time)
146 |                     successful_requests += 1
147 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
148 |                     errors.append(str(e))
149 |                     failed_requests += 1
    |

scripts/production_validator.py:224:20: BLE001 Do not catch blind exception: `Exception`
    |
222 |                 time.sleep(10)
223 |
224 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
225 |                 self.logger.error(f"Load test {test_name} failed: {e}")
    |

scripts/production_validator.py:318:9: F841 Local variable `start_time` is assigned to but never used
    |
316 |         self.logger.info(f"Starting chaos test: {fault_type}")
317 |
318 |         start_time = datetime.now(UTC)
    |         ^^^^^^^^^^ F841
319 |
320 |         # Baseline measurements
    |
    = help: Remove assignment to unused variable `start_time`

scripts/production_validator.py:344:20: BLE001 Do not catch blind exception: `Exception`
    |
342 |                 performance_samples.append(performance)
343 |                 time.sleep(1)
344 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
345 |                 error_details.append(f"Monitoring error at {i}s: {e}")
    |

scripts/production_validator.py:360:21: F841 Local variable `recovery_performance` is assigned to but never used
    |
358 |                 performance = self._measure_system_performance()
359 |                 if self._is_performance_recovered(baseline_performance, performance):
360 |                     recovery_performance = performance
    |                     ^^^^^^^^^^^^^^^^^^^^ F841
361 |                     recovery_time = datetime.now(UTC) - recovery_start
362 |                     break
    |
    = help: Remove assignment to unused variable `recovery_performance`

scripts/production_validator.py:364:20: BLE001 Do not catch blind exception: `Exception`
    |
362 |                     break
363 |                 time.sleep(1)
364 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
365 |                 error_details.append(f"Recovery monitoring error: {e}")
    |

scripts/production_validator.py:367:9: F841 Local variable `end_time` is assigned to but never used
    |
365 |                 error_details.append(f"Recovery monitoring error: {e}")
366 |
367 |         end_time = datetime.now(UTC)
    |         ^^^^^^^^ F841
368 |
369 |         # Calculate impact metrics
    |
    = help: Remove assignment to unused variable `end_time`

scripts/production_validator.py:473:16: BLE001 Do not catch blind exception: `Exception`
    |
471 |             return True
472 |
473 |         except Exception:
    |                ^^^^^^^^^ BLE001
474 |             return False
    |

scripts/production_validator.py:488:31: F821 Undefined name `multiprocessing`
    |
486 |         # Start multiple CPU-intensive threads
487 |         threads = []
488 |         for _ in range(min(4, multiprocessing.cpu_count())):
    |                               ^^^^^^^^^^^^^^^ F821
489 |             thread = threading.Thread(target=cpu_burner, daemon=True)
490 |             thread.start()
    |

scripts/production_validator.py:527:29: F821 Undefined name `os`
    |
525 |                 temp_file = f"/tmp/stress_test_{time.time()}.tmp"
526 |                 with open(temp_file, 'wb') as f:
527 |                     f.write(os.urandom(1024 * 1024))  # 1MB of random data
    |                             ^^ F821
528 |                 temp_files.append(temp_file)
529 |                 time.sleep(0.1)
    |

scripts/production_validator.py:534:21: F821 Undefined name `os`
    |
532 |             for temp_file in temp_files:
533 |                 try:
534 |                     os.remove(temp_file)
    |                     ^^ F821
535 |                 except (OSError, FileNotFoundError):
536 |                     logging.debug(f"Could not remove temporary file: {temp_file}")
    |

scripts/production_validator.py:616:16: BLE001 Do not catch blind exception: `Exception`
    |
614 |                 warnings.append(f"Performance could be improved: {performance_score:.1f}% score")
615 |
616 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
617 |             critical_failures.append(f"Performance testing failed: {e}")
618 |             test_scores['performance'] = 0
    |

scripts/production_validator.py:634:16: BLE001 Do not catch blind exception: `Exception`
    |
632 |                 critical_failures.append(f"Reliability tests failed: {reliability_score:.1f}% score")
633 |
634 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
635 |             critical_failures.append(f"Reliability testing failed: {e}")
636 |             test_scores['reliability'] = 0
    |

scripts/production_validator.py:647:16: BLE001 Do not catch blind exception: `Exception`
    |
645 |                 critical_failures.append(f"Security tests failed: {security_score:.1f}% score")
646 |
647 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
648 |             critical_failures.append(f"Security testing failed: {e}")
649 |             test_scores['security'] = 0
    |

scripts/production_validator.py:660:16: BLE001 Do not catch blind exception: `Exception`
    |
658 |                 critical_failures.append(f"Functionality tests failed: {functionality_score:.1f}% score")
659 |
660 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
661 |             critical_failures.append(f"Functionality testing failed: {e}")
662 |             test_scores['functionality'] = 0
    |

scripts/production_validator.py:673:16: BLE001 Do not catch blind exception: `Exception`
    |
671 |                 critical_failures.append(f"Compliance tests failed: {compliance_score:.1f}% score")
672 |
673 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
674 |             critical_failures.append(f"Compliance testing failed: {e}")
675 |             test_scores['compliance'] = 0
    |

scripts/production_validator.py:791:20: F401 `cryptography` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
789 |         # Check if encryption modules are available
790 |         try:
791 |             import cryptography
    |                    ^^^^^^^^^^^^ F401
792 |             return 95
793 |         except ImportError:
    |
    = help: Remove unused import: `cryptography`

scripts/production_validator.py:817:41: F401 `ai_trading.core.bot_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
815 |         try:
816 |             # Test imports
817 |             from ai_trading.core import bot_engine  # AI-AGENT-REF: canonical import
    |                                         ^^^^^^^^^^ F401
818 |             import trade_execution
819 |             return 95
    |
    = help: Remove unused import: `ai_trading.core.bot_engine`

scripts/production_validator.py:818:20: F401 `trade_execution` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
816 |             # Test imports
817 |             from ai_trading.core import bot_engine  # AI-AGENT-REF: canonical import
818 |             import trade_execution
    |                    ^^^^^^^^^^^^^^^ F401
819 |             return 95
820 |         except ImportError:
    |
    = help: Remove unused import: `trade_execution`

scripts/production_validator.py:827:13: F841 Local variable `RiskEngine` is assigned to but never used
    |
825 |         try:
826 |             from ai_trading.core.bot_engine import get_risk_engine
827 |             RiskEngine = get_risk_engine()
    |             ^^^^^^^^^^ F841
828 |             return 90
829 |         except ImportError:
    |
    = help: Remove assignment to unused variable `RiskEngine`

scripts/production_validator.py:835:36: F401 `ai_trading.data_fetcher` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
833 |         """Test data processing functionality."""
834 |         try:
835 |             from ai_trading import data_fetcher
    |                                    ^^^^^^^^^^^^ F401
836 |             import indicators
837 |             return 90
    |
    = help: Remove unused import: `ai_trading.data_fetcher`

scripts/production_validator.py:836:20: F401 `indicators` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
834 |         try:
835 |             from ai_trading import data_fetcher
836 |             import indicators
    |                    ^^^^^^^^^^ F401
837 |             return 90
838 |         except ImportError:
    |
    = help: Remove unused import: `indicators`

scripts/production_validator.py:844:46: F401 `ai_trading.telemetry.metrics_logger` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
842 |         """Test reporting system functionality."""
843 |         try:
844 |             from ai_trading.telemetry import metrics_logger
    |                                              ^^^^^^^^^^^^^^ F401
845 |             return 85
846 |         except ImportError:
    |
    = help: Remove unused import: `ai_trading.telemetry.metrics_logger`

scripts/profile_indicators.py:4:1: E402 Module level import not at top of file
  |
3 | logger = logging.getLogger(__name__)
4 | import inspect
  | ^^^^^^^^^^^^^^ E402
5 | import time
  |

scripts/profile_indicators.py:5:1: E402 Module level import not at top of file
  |
3 | logger = logging.getLogger(__name__)
4 | import inspect
5 | import time
  | ^^^^^^^^^^^ E402
6 |
7 | import numpy as np
  |

scripts/profile_indicators.py:7:1: E402 Module level import not at top of file
  |
5 | import time
6 |
7 | import numpy as np
  | ^^^^^^^^^^^^^^^^^^ E402
8 | import pandas as pd
  |

scripts/profile_indicators.py:8:1: E402 Module level import not at top of file
   |
 7 | import numpy as np
 8 | import pandas as pd
   | ^^^^^^^^^^^^^^^^^^^ E402
 9 |
10 | from ai_trading import signals
   |

scripts/profile_indicators.py:10:1: E402 Module level import not at top of file
   |
 8 | import pandas as pd
 9 |
10 | from ai_trading import signals
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
11 | from ai_trading import indicators
   |

scripts/profile_indicators.py:11:1: E402 Module level import not at top of file
   |
10 | from ai_trading import signals
11 | from ai_trading import indicators
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
12 |
13 | def profile(func, *args, **kwargs):
   |

scripts/profile_indicators.py:17:12: BLE001 Do not catch blind exception: `Exception`
   |
15 |     try:
16 |         result = func(*args, **kwargs)
17 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
18 |         logger.error("%s failed: %s", func.__name__, e)
19 |         return None, -1
   |

scripts/rebalancer.py:28:8: BLE001 Do not catch blind exception: `Exception`
   |
26 |     from ai_trading.rebalancer import *
27 |     _import_success = True
28 | except Exception:
   |        ^^^^^^^^^ BLE001
29 |     # Create minimal rebalancer functionality for testing if import fails
30 |     pass
   |

scripts/retrain_model.py:22:1: E402 Module level import not at top of file
   |
20 | CONFIG = TradingConfig()
21 |
22 | from ai_trading.utils.base import safe_to_datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
23 |
24 | logger = logging.getLogger(__name__)
   |

scripts/retrain_model.py:38:1: E402 Module level import not at top of file
   |
36 | except ImportError:
37 |     pass
38 | import importlib
   | ^^^^^^^^^^^^^^^^ E402
39 | from datetime import UTC, date, datetime, time, timedelta
   |

scripts/retrain_model.py:39:1: E402 Module level import not at top of file
   |
37 |     pass
38 | import importlib
39 | from datetime import UTC, date, datetime, time, timedelta
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
40 |
41 | import requests
   |

scripts/retrain_model.py:41:1: E402 Module level import not at top of file
   |
39 | from datetime import UTC, date, datetime, time, timedelta
40 |
41 | import requests
   | ^^^^^^^^^^^^^^^ E402
42 |
43 | # AI-AGENT-REF: graceful lightgbm fallback for testing
   |

scripts/retrain_model.py:44:1: E402 Module level import not at top of file
   |
43 | # AI-AGENT-REF: graceful lightgbm fallback for testing
44 | from lightgbm import LGBMClassifier
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
45 |
46 | # AI-AGENT-REF: graceful sklearn fallback for testing
   |

scripts/retrain_model.py:47:1: E402 Module level import not at top of file
   |
46 | # AI-AGENT-REF: graceful sklearn fallback for testing
47 | from sklearn.model_selection import ParameterSampler, cross_val_score
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
48 | from sklearn.pipeline import make_pipeline
49 | from sklearn.preprocessing import StandardScaler
   |

scripts/retrain_model.py:48:1: E402 Module level import not at top of file
   |
46 | # AI-AGENT-REF: graceful sklearn fallback for testing
47 | from sklearn.model_selection import ParameterSampler, cross_val_score
48 | from sklearn.pipeline import make_pipeline
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
49 | from sklearn.preprocessing import StandardScaler
   |

scripts/retrain_model.py:49:1: E402 Module level import not at top of file
   |
47 | from sklearn.model_selection import ParameterSampler, cross_val_score
48 | from sklearn.pipeline import make_pipeline
49 | from sklearn.preprocessing import StandardScaler
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
50 |
51 | try:
   |

scripts/retrain_model.py:53:8: BLE001 Do not catch blind exception: `Exception`
   |
51 | try:
52 |     import optuna
53 | except Exception as e:  # pragma: no cover - optional dependency
   |        ^^^^^^^^^ BLE001
54 |     logger.warning("Optuna import failed: %s", e)
55 |     optuna = None
   |

scripts/retrain_model.py:83:12: BLE001 Do not catch blind exception: `Exception`
   |
81 |             .strip()
82 |         )
83 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
84 |         logger.debug("git hash lookup failed: %s", e)
85 |         return "unknown"
   |

scripts/retrain_model.py:186:12: BLE001 Do not catch blind exception: `Exception`
    |
184 |         return max(-1.0, min(1.0, sentiment_score / max(len(articles), 1)))
185 |
186 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
187 |         logger.warning("Failed to fetch sentiment for %s: %s", symbol, e)
188 |         return 0.0
    |

scripts/retrain_model.py:214:12: BLE001 Do not catch blind exception: `Exception`
    |
212 |         else:
213 |             return "chop"
214 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
215 |         logger.warning("Regime detection failed: %s", e)
216 |         return "chop"
    |

scripts/run_wfa.py:21:36: F401 `ai_trading.signals.generate_cost_aware_signals` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
19 |     from ai_trading.evaluation.walkforward import WalkForwardEvaluator
20 |     from ai_trading.data_fetcher import DataFetcher
21 |     from ai_trading.signals import generate_cost_aware_signals, SignalDecisionPipeline
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ F401
22 |     from ai_trading.logging import logger
23 | except ImportError as e:
   |
   = help: Remove unused import: `ai_trading.signals.generate_cost_aware_signals`

scripts/run_wfa.py:68:39: F821 Undefined name `pd`
   |
66 |                 try:
67 |                     # Get historical data up to current point
68 |                     historical_data = pd.concat([
   |                                       ^^ F821
69 |                         train_df.tail(100),  # Last 100 days of training
70 |                         test_df.iloc[:i]     # Test data up to current point
   |

scripts/run_wfa.py:92:28: BLE001 Do not catch blind exception: `Exception`
   |
90 |                         predicted_edge = max(-0.05, min(0.05, predicted_edge))
91 |                         
92 |                     except Exception:
   |                            ^^^^^^^^^ BLE001
93 |                         predicted_edge = 0.0
   |

scripts/run_wfa.py:136:24: BLE001 Do not catch blind exception: `Exception`
    |
134 |                         })
135 |                 
136 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
137 |                     logger.debug("Signal generation failed for %s at %d: %s", symbol, i, e)
138 |                     continue
    |

scripts/run_wfa.py:157:20: BLE001 Do not catch blind exception: `Exception`
    |
155 |             try:
156 |                 return data_fetcher.get_historical_data(symbol, start_date, end_date)
157 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
158 |                 logger.warning("Failed to get data for %s: %s", symbol, e)
159 |                 return None
    |

scripts/run_wfa.py:266:12: BLE001 Do not catch blind exception: `Exception`
    |
264 |         logger.info("Walk-forward validation interrupted by user")
265 |         sys.exit(0)
266 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
267 |         logger.error("Walk-forward validation error: %s", e, exc_info=True)
268 |         sys.exit(1)
    |

scripts/scalability_manager.py:338:32: BLE001 Do not catch blind exception: `Exception`
    |
336 |                             })
337 |
338 |                         except Exception as e:
    |                                ^^^^^^^^^ BLE001
339 |                             self.logger.error(f"Failed to backup {file_path}: {e}")
    |

scripts/scalability_manager.py:372:16: BLE001 Do not catch blind exception: `Exception`
    |
370 |             return backup_info
371 |
372 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
373 |             self.logger.error(f"Backup creation failed: {e}")
374 |             backup_info['success'] = False
    |

scripts/scalability_manager.py:415:16: BLE001 Do not catch blind exception: `Exception`
    |
413 |             return True
414 |
415 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
416 |             self.logger.error(f"Backup restoration failed: {e}")
417 |             return False
    |

scripts/scalability_manager.py:437:16: BLE001 Do not catch blind exception: `Exception`
    |
435 |                 self.logger.info(f"Cleaned up {removed_count} old backups")
436 |
437 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
438 |             self.logger.error(f"Backup cleanup failed: {e}")
    |

scripts/scalability_manager.py:545:20: BLE001 Do not catch blind exception: `Exception`
    |
543 |                 self._update_system_state(health_status)
544 |
545 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
546 |                 self.logger.error(f"Error in HA monitoring loop: {e}")
    |

scripts/scalability_manager.py:565:16: BLE001 Do not catch blind exception: `Exception`
    |
563 |                 'metrics': lb_metrics
564 |             }
565 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
566 |             health_status['components']['load_balancer'] = {
567 |                 'healthy': False,
    |

scripts/scalability_manager.py:579:16: BLE001 Do not catch blind exception: `Exception`
    |
577 |                 'status': backup_status
578 |             }
579 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
580 |             health_status['components']['data_replication'] = {
581 |                 'healthy': False,
    |

scripts/scalability_manager.py:710:16: BLE001 Do not catch blind exception: `Exception`
    |
708 |             test_results['tests_performed'].append('load_balancer_resilience')
709 |             test_results['tests_passed'] += 1
710 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
711 |             test_results['tests_performed'].append(f'load_balancer_resilience_FAILED: {e}')
712 |             test_results['tests_failed'] += 1
    |

scripts/scalability_manager.py:723:16: BLE001 Do not catch blind exception: `Exception`
    |
721 |                 test_results['tests_performed'].append('backup_system_FAILED')
722 |                 test_results['tests_failed'] += 1
723 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
724 |             test_results['tests_performed'].append(f'backup_system_FAILED: {e}')
725 |             test_results['tests_failed'] += 1
    |

scripts/scalability_manager.py:736:16: BLE001 Do not catch blind exception: `Exception`
    |
734 |                 test_results['tests_performed'].append('health_monitoring_FAILED')
735 |                 test_results['tests_failed'] += 1
736 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
737 |             test_results['tests_performed'].append(f'health_monitoring_FAILED: {e}')
738 |             test_results['tests_failed'] += 1
    |

scripts/scalability_manager.py:764:16: BLE001 Do not catch blind exception: `Exception`
    |
762 |             self.logger.info("Emergency shutdown completed")
763 |
764 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
765 |             self.logger.error(f"Error during emergency shutdown: {e}")
    |

scripts/security_manager.py:483:16: BLE001 Do not catch blind exception: `Exception`
    |
481 |             return True
482 |
483 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
484 |             self.logger.error(f"Authentication error: {e}")
485 |             self._handle_failed_auth(client_ip, f"Authentication error: {e}")
    |

scripts/smoke_backtest.py:79:12: BLE001 Do not catch blind exception: `Exception`
   |
77 |         return True
78 |
79 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
80 |         print(f"✗ Backtest smoke test failed: {e}")
81 |         return False
   |

scripts/smoke_imports.py:18:12: BLE001 Do not catch blind exception: `Exception`
   |
16 |         __import__(module_name)
17 |         return True, f"✅ {module_name} {description}"
18 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
19 |         return False, f"❌ {module_name} {description}: {e}"
   |

scripts/smoke_imports.py:29:9: F841 Local variable `instance` is assigned to but never used
   |
27 |         module = __import__(module_name, fromlist=[class_name])
28 |         cls = getattr(module, class_name)
29 |         instance = cls(*args, **kwargs)
   |         ^^^^^^^^ F841
30 |         return True, f"✅ {module_name}.{class_name} {description}"
31 |     except Exception as e:
   |
   = help: Remove assignment to unused variable `instance`

scripts/smoke_imports.py:31:12: BLE001 Do not catch blind exception: `Exception`
   |
29 |         instance = cls(*args, **kwargs)
30 |         return True, f"✅ {module_name}.{class_name} {description}"
31 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
32 |         return False, f"❌ {module_name}.{class_name} {description}: {e}"
   |

scripts/smoke_imports.py:54:43: F401 `ai_trading.monitoring.MetricsCollector` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
52 |     # Monitoring classes - critical for startup
53 |     try:
54 |         from ai_trading.monitoring import MetricsCollector, PerformanceMonitor
   |                                           ^^^^^^^^^^^^^^^^ F401
55 |         tests.append((True, "✅ MetricsCollector and PerformanceMonitor imported successfully"))
56 |     except ImportError as e:
   |
   = help: Remove unused import

scripts/smoke_imports.py:54:61: F401 `ai_trading.monitoring.PerformanceMonitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
52 |     # Monitoring classes - critical for startup
53 |     try:
54 |         from ai_trading.monitoring import MetricsCollector, PerformanceMonitor
   |                                                             ^^^^^^^^^^^^^^^^^^ F401
55 |         tests.append((True, "✅ MetricsCollector and PerformanceMonitor imported successfully"))
56 |     except ImportError as e:
   |
   = help: Remove unused import

scripts/smoke_imports.py:122:12: BLE001 Do not catch blind exception: `Exception`
    |
120 |             tests.append((False, "❌ TradingConfig.to_dict(safe=True) does not redact secrets properly"))
121 |             
122 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
123 |         tests.append((False, f"❌ TradingConfig.from_env() failed: {e}"))
    |

scripts/smoke_imports.py:133:12: BLE001 Do not catch blind exception: `Exception`
    |
131 |         else:
132 |             tests.append((False, "❌ StrategyAllocator missing allocate method"))
133 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
134 |         tests.append((False, f"❌ StrategyAllocator instantiation failed: {e}"))
    |

scripts/smoke_runtime.py:35:12: BLE001 Do not catch blind exception: `Exception`
   |
33 |         return True
34 |         
35 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
36 |         print(f"✗ pandas MultiIndex test failed: {e}")
37 |         return False
   |

scripts/smoke_runtime.py:57:12: BLE001 Do not catch blind exception: `Exception`
   |
55 |         return True
56 |         
57 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
58 |         print(f"✗ LazyBotContext params test failed: {e}")
59 |         return False
   |

scripts/smoke_runtime.py:103:16: BLE001 Do not catch blind exception: `Exception`
    |
101 |             else:
102 |                 print(f"✓ _prepare_run params access works (other AttributeError: {e})")
103 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
104 |             # Other exceptions are fine, we just want to test params access
105 |             print(f"✓ _prepare_run params access works (other error: {type(e).__name__})")
    |

scripts/smoke_runtime.py:109:12: BLE001 Do not catch blind exception: `Exception`
    |
107 |         return True
108 |         
109 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
110 |         print(f"✗ _prepare_run test failed: {e}")
111 |         return False
    |

scripts/smoke_runtime.py:135:12: BLE001 Do not catch blind exception: `Exception`
    |
133 |         return True
134 |         
135 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
136 |         print(f"✗ Empty DataFrame helper test failed: {e}")
137 |         return False
    |

scripts/smoke_runtime.py:161:16: BLE001 Do not catch blind exception: `Exception`
    |
159 |             else:
160 |                 print("✗ FAILED")
161 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
162 |             print(f"✗ FAILED with exception: {e}")
163 |         print()
    |

scripts/system_diagnostic.py:141:16: BLE001 Do not catch blind exception: `Exception`
    |
139 |                 'function_objects': len([obj for obj in all_objects if callable(obj)])
140 |             }
141 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
142 |             gc_info['object_counts'] = {'error': str(e)}
    |

scripts/system_diagnostic.py:165:16: BLE001 Do not catch blind exception: `Exception`
    |
163 |                     except OSError:
164 |                         continue
165 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
166 |             file_info['error'] = str(e)
    |

scripts/system_diagnostic.py:279:16: BLE001 Do not catch blind exception: `Exception`
    |
277 |             disk_info['large_files'] = sorted(large_files, key=lambda x: x[1], reverse=True)[:10]
278 |
279 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
280 |             disk_info['error'] = str(e)
    |

scripts/system_diagnostic.py:317:20: BLE001 Do not catch blind exception: `Exception`
    |
315 |                 diagnostic_results[f'{check_name}_time_ms'] = check_time * 1000
316 |
317 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
318 |                 self.logger.error(f"Error in {check_name}: {str(e)}")
319 |                 diagnostic_results[check_name] = {'error': str(e)}
    |

scripts/system_health_checker.py:235:16: BLE001 Do not catch blind exception: `Exception`
    |
233 |             )
234 |
235 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
236 |             self.logger.error("Failed to check sentiment health: %s", e)
237 |             return ComponentHealth(
    |

scripts/system_health_checker.py:294:16: BLE001 Do not catch blind exception: `Exception`
    |
292 |                 )
293 |
294 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
295 |             self.logger.error("Failed to check meta-learning health: %s", e)
296 |             return ComponentHealth(
    |

scripts/system_health_checker.py:376:16: BLE001 Do not catch blind exception: `Exception`
    |
374 |                 )
375 |
376 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
377 |             self.logger.error("Failed to check order execution health: %s", e)
378 |             return ComponentHealth(
    |

scripts/system_health_checker.py:425:16: BLE001 Do not catch blind exception: `Exception`
    |
423 |             )
424 |
425 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
426 |             self.logger.error("Failed to check liquidity management health: %s", e)
427 |             return ComponentHealth(
    |

scripts/system_health_checker.py:517:16: BLE001 Do not catch blind exception: `Exception`
    |
515 |             self.logger.info("Health report exported to %s", filepath)
516 |
517 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
518 |             self.logger.error("Failed to export health report: %s", e)
    |

scripts/validate_critical_features.py:9:1: E402 Module level import not at top of file
   |
 7 | """
 8 |
 9 | import subprocess
   | ^^^^^^^^^^^^^^^^^ E402
10 | import sys
11 | from pathlib import Path
   |

scripts/validate_critical_features.py:10:1: E402 Module level import not at top of file
   |
 9 | import subprocess
10 | import sys
   | ^^^^^^^^^^ E402
11 | from pathlib import Path
   |

scripts/validate_critical_features.py:11:1: E402 Module level import not at top of file
   |
 9 | import subprocess
10 | import sys
11 | from pathlib import Path
   | ^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

scripts/validate_critical_features.py:30:12: BLE001 Do not catch blind exception: `Exception`
   |
28 |                 logging.info(f"  Error: {result.stderr.strip()}")
29 |             return False
30 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
31 |         logging.info(f"✗ {description} failed with exception: {e}")
32 |         return False
   |

scripts/validate_critical_fix.py:17:1: E402 Module level import not at top of file
   |
15 | """
16 |
17 | import os
   | ^^^^^^^^^ E402
18 | import sys
   |

scripts/validate_critical_fix.py:18:1: E402 Module level import not at top of file
   |
17 | import os
18 | import sys
   | ^^^^^^^^^^ E402
19 |
20 | # Set up test environment
   |

scripts/validate_critical_fix.py:32:1: E402 Module level import not at top of file
   |
31 | # (mocks removed; see tests/mocks/validate_critical_fix_mocks.py)
32 | from tests.mocks.validate_critical_fix_mocks import MockOrder, MockContext
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
33 |
34 | from ai_trading.trade_execution import ExecutionEngine
   |

scripts/validate_critical_fix.py:34:1: E402 Module level import not at top of file
   |
32 | from tests.mocks.validate_critical_fix_mocks import MockOrder, MockContext
33 |
34 | from ai_trading.trade_execution import ExecutionEngine
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
35 |
36 | def test_production_scenarios():
   |

scripts/validate_critical_fix.py:84:16: BLE001 Do not catch blind exception: `Exception`
   |
82 |             else:
83 |                 raise
84 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
85 |             logging.info(f"   ⚠️  Other exception (acceptable): {type(e).__name__}")
   |

scripts/validate_critical_fix.py:110:16: BLE001 Do not catch blind exception: `Exception`
    |
108 |             else:
109 |                 raise
110 |         except Exception:
    |                ^^^^^^^^^ BLE001
111 |             logging.info(f"   ✅ {description}: handled gracefully")
    |

scripts/validate_critical_fixes.py:16:1: E402 Module level import not at top of file
   |
14 | """
15 |
16 | import os
   | ^^^^^^^^^ E402
17 | import sys
18 | import traceback
   |

scripts/validate_critical_fixes.py:17:1: E402 Module level import not at top of file
   |
16 | import os
17 | import sys
   | ^^^^^^^^^^ E402
18 | import traceback
   |

scripts/validate_critical_fixes.py:18:1: E402 Module level import not at top of file
   |
16 | import os
17 | import sys
18 | import traceback
   | ^^^^^^^^^^^^^^^^ E402
19 |
20 | # Set up minimal environment for testing
   |

scripts/validate_critical_fixes.py:47:12: BLE001 Do not catch blind exception: `Exception`
   |
46 |         return True
47 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
48 |         logging.info(f"  ❌ Sentiment module test failed: {e}")
49 |         traceback.print_exc()
   |

scripts/validate_critical_fixes.py:83:12: BLE001 Do not catch blind exception: `Exception`
   |
82 |         return True
83 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
84 |         logging.info(f"  ❌ MetaLearning strategy test failed: {e}")
85 |         traceback.print_exc()
   |

scripts/validate_critical_fixes.py:114:12: BLE001 Do not catch blind exception: `Exception`
    |
112 |         logging.info("  ✅ Alpaca API endpoints are correctly configured")
113 |         return True
114 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
115 |         logging.info(f"  ❌ Alpaca API test failed: {e}")
116 |         traceback.print_exc()
    |

scripts/validate_critical_fixes.py:133:12: BLE001 Do not catch blind exception: `Exception`
    |
132 |         return True
133 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
134 |         logging.info(f"  ❌ Import resolution test failed: {e}")
135 |         traceback.print_exc()
    |

scripts/validate_enhanced_debugging.py:6:1: E402 Module level import not at top of file
  |
4 | """Simple test to validate enhanced execution debugging functionality."""
5 |
6 | import os
  | ^^^^^^^^^ E402
7 | import sys
  |

scripts/validate_enhanced_debugging.py:7:1: E402 Module level import not at top of file
  |
6 | import os
7 | import sys
  | ^^^^^^^^^^ E402
8 |
9 | # Set required environment variables
  |

scripts/validate_enhanced_debugging.py:197:12: BLE001 Do not catch blind exception: `Exception`
    |
195 |         return True
196 |
197 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
198 |         logging.info(f"\nTEST FAILED: {e}")
199 |         import traceback
    |

scripts/validate_enhancements.py:56:12: BLE001 Do not catch blind exception: `Exception`
   |
54 |         return True
55 |         
56 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
57 |         print(f"  ✗ Monitoring API test failed: {e}")
58 |         return False
   |

scripts/validate_enhancements.py:109:12: BLE001 Do not catch blind exception: `Exception`
    |
107 |         return passed == len(results)
108 |         
109 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
110 |         print(f"  ✗ Cost-aware signal test failed: {e}")
111 |         return False
    |

scripts/validate_enhancements.py:180:12: BLE001 Do not catch blind exception: `Exception`
    |
178 |         return True
179 |         
180 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
181 |         print(f"  ✗ Performance allocator test failed: {e}")
182 |         import traceback
    |

scripts/validate_enhancements.py:209:12: BLE001 Do not catch blind exception: `Exception`
    |
207 |         return True
208 |         
209 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
210 |         print(f"  ✗ Exception handling test failed: {e}")
211 |         return False
    |

scripts/validate_enhancements.py:231:16: BLE001 Do not catch blind exception: `Exception`
    |
229 |             result = test_func()
230 |             results.append((test_name, result))
231 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
232 |             print(f"  ✗ {test_name} failed with error: {e}")
233 |             results.append((test_name, False))
    |

scripts/validate_final_polish.py:8:1: E402 Module level import not at top of file
  |
6 | """
7 |
8 | import os
  | ^^^^^^^^^ E402
9 | import tempfile
  |

scripts/validate_final_polish.py:9:1: E402 Module level import not at top of file
  |
8 | import os
9 | import tempfile
  | ^^^^^^^^^^^^^^^ E402
  |

scripts/validate_fixes.py:10:1: E402 Module level import not at top of file
   |
 8 | the actual code changes rather than running complex tests.
 9 | """
10 | import os
   | ^^^^^^^^^ E402
11 | import re
   |

scripts/validate_fixes.py:11:1: E402 Module level import not at top of file
   |
 9 | """
10 | import os
11 | import re
   | ^^^^^^^^^ E402
   |

scripts/validate_fixes_root.py:89:12: BLE001 Do not catch blind exception: `Exception`
   |
87 |         return True
88 |         
89 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
90 |         print(f"✗ Logging formatter test failed: {e}")
91 |         return False
   |

scripts/validate_fixes_root.py:161:16: BLE001 Do not catch blind exception: `Exception`
    |
159 |                 passed += 1
160 |             print()
161 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
162 |             print(f"✗ {test_name} failed with exception: {e}")
163 |             print()
    |

scripts/validate_improvements.py:8:1: E402 Module level import not at top of file
   |
 6 | """
 7 |
 8 | import os
   | ^^^^^^^^^ E402
 9 | import subprocess
10 | import sys
   |

scripts/validate_improvements.py:9:1: E402 Module level import not at top of file
   |
 8 | import os
 9 | import subprocess
   | ^^^^^^^^^^^^^^^^^ E402
10 | import sys
   |

scripts/validate_improvements.py:10:1: E402 Module level import not at top of file
   |
 8 | import os
 9 | import subprocess
10 | import sys
   | ^^^^^^^^^^ E402
   |

scripts/validate_improvements.py:29:12: BLE001 Do not catch blind exception: `Exception`
   |
27 |         logging.info("✓ ai_trading imported successfully without Alpaca packages")
28 |         return True
29 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
30 |         logging.info(f"✗ Failed to import ai_trading: {e}")
31 |         return False
   |

scripts/validate_improvements.py:43:12: BLE001 Do not catch blind exception: `Exception`
   |
41 |         logging.info("✓ Package-safe imports working correctly")
42 |         return True
43 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
44 |         logging.info(f"✗ Package import failed: {e}")
45 |         return False
   |

scripts/validate_improvements.py:60:12: BLE001 Do not catch blind exception: `Exception`
   |
58 |         logging.info("✓ Timezone-aware datetime utilities working")
59 |         return True
60 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
61 |         logging.info(f"✗ Timezone utilities failed: {e}")
62 |         return False
   |

scripts/validate_improvements.py:71:12: BLE001 Do not catch blind exception: `Exception`
   |
69 |         logging.info("✓ Idempotency and reconciliation modules available")
70 |         return True
71 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
72 |         logging.info(f"✗ Idempotency/reconciliation modules failed: {e}")
73 |         return False
   |

scripts/validate_improvements.py:126:12: BLE001 Do not catch blind exception: `Exception`
    |
124 |         logging.info("✗ Pytest timed out")
125 |         return False
126 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
127 |         logging.info(f"✗ Pytest check failed: {e}")
128 |         return False
    |

scripts/validate_improvements.py:152:16: BLE001 Do not catch blind exception: `Exception`
    |
150 |             results.append(result)
151 |             print()
152 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
153 |             logging.info(f"✗ Test {test.__name__} failed with exception: {e}\n")
154 |             results.append(False)
    |

scripts/validate_migration.py:24:12: BLE001 Do not catch blind exception: `Exception`
   |
22 |     except SyntaxError as e:
23 |         return False, f"Syntax error: {e}"
24 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
25 |         return False, f"Error: {e}"
   |

scripts/validate_migration.py:40:12: BLE001 Do not catch blind exception: `Exception`
   |
38 |                     imports.append(f"from {module} import {alias.name}")
39 |         return imports
40 |     except Exception:
   |            ^^^^^^^^^ BLE001
41 |         return []
   |

scripts/validate_peak_performance.py:8:1: E402 Module level import not at top of file
  |
6 | """
7 |
8 | import sys
  | ^^^^^^^^^^ E402
9 | from pathlib import Path
  |

scripts/validate_peak_performance.py:9:1: E402 Module level import not at top of file
   |
 8 | import sys
 9 | from pathlib import Path
   | ^^^^^^^^^^^^^^^^^^^^^^^^ E402
10 |
11 | # Add current directory to path for imports
   |

scripts/validate_peak_performance.py:38:16: BLE001 Do not catch blind exception: `Exception`
   |
36 |             imported.append(module)
37 |             logging.info(f"  ✓ {module}")
38 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
39 |             failed.append((module, str(e)))
40 |             logging.info(f"  ✗ {module}: {e}")
   |

scripts/validate_peak_performance.py:61:12: BLE001 Do not catch blind exception: `Exception`
   |
59 |         logging.info("  ✓ Idempotency system working")
60 |
61 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
62 |         logging.info(f"  ✗ Idempotency test failed: {e}")
63 |         return False
   |

scripts/validate_peak_performance.py:80:12: BLE001 Do not catch blind exception: `Exception`
   |
78 |         logging.info("  ✓ Cost model working")
79 |
80 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
81 |         logging.info(f"  ✗ Cost model test failed: {e}")
82 |         return False
   |

scripts/validate_peak_performance.py:99:12: BLE001 Do not catch blind exception: `Exception`
    |
 97 |         logging.info("  ✓ Determinism working")
 98 |
 99 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
100 |         logging.info(f"  ✗ Determinism test failed: {e}")
101 |         return False
    |

scripts/validate_peak_performance.py:112:12: BLE001 Do not catch blind exception: `Exception`
    |
110 |         logging.info("  ✓ Performance cache working")
111 |
112 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
113 |         logging.info(f"  ✗ Performance cache test failed: {e}")
114 |         return False
    |

scripts/validate_peak_performance.py:144:9: F841 Local variable `costs` is assigned to but never used
    |
143 |         # Get costs for symbol
144 |         costs = cost_model.get_costs("TEST")
    |         ^^^^^ F841
145 |
146 |         # Calculate limit price
    |
    = help: Remove assignment to unused variable `costs`

scripts/validate_peak_performance.py:155:12: BLE001 Do not catch blind exception: `Exception`
    |
153 |         return True
154 |
155 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
156 |         logging.info(f"  ✗ Integration test failed: {e}")
157 |         return False
    |

scripts/validate_problem_statement_fixes.py:9:1: E402 Module level import not at top of file
   |
 7 | """
 8 |
 9 | import os
   | ^^^^^^^^^ E402
10 | import re
11 | import sys
   |

scripts/validate_problem_statement_fixes.py:10:1: E402 Module level import not at top of file
   |
 9 | import os
10 | import re
   | ^^^^^^^^^ E402
11 | import sys
   |

scripts/validate_problem_statement_fixes.py:11:1: E402 Module level import not at top of file
   |
 9 | import os
10 | import re
11 | import sys
   | ^^^^^^^^^^ E402
12 |
13 | # Set up minimal environment
   |

scripts/validate_problem_statement_fixes.py:55:12: BLE001 Do not catch blind exception: `Exception`
   |
53 |         return actual_failures == expected_failures and actual_recovery == expected_recovery
54 |         
55 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
56 |         logging.info(f"Error validating sentiment circuit breaker: {e}")
57 |         return False
   |

scripts/validate_problem_statement_fixes.py:81:12: BLE001 Do not catch blind exception: `Exception`
   |
79 |             return False
80 |             
81 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
82 |         logging.info(f"Error validating meta-learning: {e}")
83 |         return False
   |

scripts/validate_problem_statement_fixes.py:102:12: BLE001 Do not catch blind exception: `Exception`
    |
100 |             return False
101 |             
102 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
103 |         logging.info(f"Error validating PLTR sector: {e}")
104 |         return False
    |

scripts/validate_problem_statement_fixes.py:132:12: BLE001 Do not catch blind exception: `Exception`
    |
130 |         return all_implemented
131 |         
132 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
133 |         logging.info(f"Error validating execution optimizations: {e}")
134 |         return False
    |

scripts/validate_problem_statement_fixes.py:161:12: BLE001 Do not catch blind exception: `Exception`
    |
159 |         return all_implemented
160 |         
161 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
162 |         logging.info(f"Error validating quantity tracking: {e}")
163 |         return False
    |

scripts/validate_production_fixes.py:11:1: E402 Module level import not at top of file
   |
 9 | """
10 |
11 | import os
   | ^^^^^^^^^ E402
12 | from datetime import datetime
   |

scripts/validate_production_fixes.py:12:1: E402 Module level import not at top of file
   |
11 | import os
12 | from datetime import datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
13 |
14 | def validate_sentiment_api_config():
   |

scripts/validate_production_fixes.py:50:12: BLE001 Do not catch blind exception: `Exception`
   |
48 |             logging.info("❌ Sentiment API variables missing from config.py")
49 |             return False
50 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
51 |         logging.info(f"❌ Error checking config.py: {e}")
52 |         return False
   |

scripts/validate_production_fixes.py:77:16: BLE001 Do not catch blind exception: `Exception`
   |
75 |             count = monitor._count_trading_bot_processes()
76 |             logging.info(f"✅ Process detection works, found {count} trading bot processes")
77 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
78 |             logging.info(f"⚠️  Process detection method exists but failed to run: {e}")
79 |             # This is not a failure in test environment
   |

scripts/validate_production_fixes.py:129:12: BLE001 Do not catch blind exception: `Exception`
    |
127 |         return True
128 |         
129 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
130 |         logging.info(f"❌ Error validating data staleness: {e}")
131 |         return False
    |

scripts/validate_production_fixes.py:201:12: BLE001 Do not catch blind exception: `Exception`
    |
199 |         return True
200 |         
201 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
202 |         logging.info(f"❌ Backwards compatibility check failed: {e}")
203 |         return False
    |

scripts/validate_production_fixes.py:230:16: BLE001 Do not catch blind exception: `Exception`
    |
228 |             else:
229 |                 logging.info(f"❌ {test_name} validation failed")
230 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
231 |             logging.info(f"❌ {test_name} validation error: {e}")
    |

scripts/validate_profit_critical.py:9:1: E402 Module level import not at top of file
   |
 7 | """
 8 |
 9 | import sys
   | ^^^^^^^^^^ E402
10 | from pathlib import Path
   |

scripts/validate_profit_critical.py:10:1: E402 Module level import not at top of file
   |
 9 | import sys
10 | from pathlib import Path
   | ^^^^^^^^^^^^^^^^^^^^^^^^ E402
11 |
12 | # Add the repo root to path to import modules directly
   |

scripts/validate_profit_critical.py:114:16: BLE001 Do not catch blind exception: `Exception`
    |
112 |             result = test()
113 |             results.append(result)
114 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
115 |             logging.info(f"✗ Test {test.__name__} failed: {e}")
116 |             results.append(False)
    |

scripts/validate_runtime_hardening.py:9:1: E402 Module level import not at top of file
   |
 7 | """
 8 |
 9 | import pathlib
   | ^^^^^^^^^^^^^^ E402
10 | import re
11 | import sys
   |

scripts/validate_runtime_hardening.py:10:1: E402 Module level import not at top of file
   |
 9 | import pathlib
10 | import re
   | ^^^^^^^^^ E402
11 | import sys
12 | from datetime import UTC
   |

scripts/validate_runtime_hardening.py:11:1: E402 Module level import not at top of file
   |
 9 | import pathlib
10 | import re
11 | import sys
   | ^^^^^^^^^^ E402
12 | from datetime import UTC
   |

scripts/validate_runtime_hardening.py:12:1: E402 Module level import not at top of file
   |
10 | import re
11 | import sys
12 | from datetime import UTC
   | ^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

scripts/validate_runtime_hardening.py:162:16: BLE001 Do not catch blind exception: `Exception`
    |
160 |             else:
161 |                 failed += 1
162 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
163 |             logging.info(f"✗ {test.__name__} failed with error: {e}")
164 |             failed += 1
    |

scripts/validate_standalone.py:9:1: E402 Module level import not at top of file
   |
 7 | """
 8 |
 9 | import hashlib
   | ^^^^^^^^^^^^^^ E402
10 | import json
11 | import os
   |

scripts/validate_standalone.py:10:1: E402 Module level import not at top of file
   |
 9 | import hashlib
10 | import json
   | ^^^^^^^^^^^ E402
11 | import os
12 | import sys
   |

scripts/validate_standalone.py:11:1: E402 Module level import not at top of file
   |
 9 | import hashlib
10 | import json
11 | import os
   | ^^^^^^^^^ E402
12 | import sys
13 | from dataclasses import dataclass
   |

scripts/validate_standalone.py:12:1: E402 Module level import not at top of file
   |
10 | import json
11 | import os
12 | import sys
   | ^^^^^^^^^^ E402
13 | from dataclasses import dataclass
14 | from datetime import UTC, datetime
   |

scripts/validate_standalone.py:13:1: E402 Module level import not at top of file
   |
11 | import os
12 | import sys
13 | from dataclasses import dataclass
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
14 | from datetime import UTC, datetime
15 | from enum import Enum
   |

scripts/validate_standalone.py:14:1: E402 Module level import not at top of file
   |
12 | import sys
13 | from dataclasses import dataclass
14 | from datetime import UTC, datetime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
15 | from enum import Enum
16 | from pathlib import Path
   |

scripts/validate_standalone.py:15:1: E402 Module level import not at top of file
   |
13 | from dataclasses import dataclass
14 | from datetime import UTC, datetime
15 | from enum import Enum
   | ^^^^^^^^^^^^^^^^^^^^^ E402
16 | from pathlib import Path
   |

scripts/validate_standalone.py:16:1: E402 Module level import not at top of file
   |
14 | from datetime import UTC, datetime
15 | from enum import Enum
16 | from pathlib import Path
   | ^^^^^^^^^^^^^^^^^^^^^^^^ E402
17 |
18 | # Set dummy environment variables to avoid config issues
   |

scripts/validate_standalone.py:244:13: F841 Local variable `bins` is assigned to but never used
    |
242 |             # Create bins
243 |             bin_width = (baseline_max - baseline_min) / n_bins
244 |             bins = [baseline_min + i * bin_width for i in range(n_bins + 1)]
    |             ^^^^ F841
245 |
246 |             # Count distributions
    |
    = help: Remove assignment to unused variable `bins`

scripts/validate_standalone.py:472:16: BLE001 Do not catch blind exception: `Exception`
    |
470 |             test()
471 |             passed += 1
472 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
473 |             logging.info(f"  ✗ {test.__name__} failed: {e}")
474 |             failed += 1
    |

scripts/validate_startup_fixes.py:17:1: E402 Module level import not at top of file
   |
15 | """
16 |
17 | import os
   | ^^^^^^^^^ E402
18 | import sys
19 | import tempfile
   |

scripts/validate_startup_fixes.py:18:1: E402 Module level import not at top of file
   |
17 | import os
18 | import sys
   | ^^^^^^^^^^ E402
19 | import tempfile
20 | import traceback
   |

scripts/validate_startup_fixes.py:19:1: E402 Module level import not at top of file
   |
17 | import os
18 | import sys
19 | import tempfile
   | ^^^^^^^^^^^^^^^ E402
20 | import traceback
21 | from datetime import datetime, timezone
   |

scripts/validate_startup_fixes.py:20:1: E402 Module level import not at top of file
   |
18 | import sys
19 | import tempfile
20 | import traceback
   | ^^^^^^^^^^^^^^^^ E402
21 | from datetime import datetime, timezone
   |

scripts/validate_startup_fixes.py:21:1: E402 Module level import not at top of file
   |
19 | import tempfile
20 | import traceback
21 | from datetime import datetime, timezone
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

scripts/validate_startup_fixes.py:33:50: F401 `ai_trading.config.management._resolve_alpaca_env` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
32 |     try:
33 |         from ai_trading.config.management import _resolve_alpaca_env
   |                                                  ^^^^^^^^^^^^^^^^^^^ F401
34 |         from ai_trading import runner
35 |         logging.info("   ✓ Core modules imported without credentials")
   |
   = help: Remove unused import: `ai_trading.config.management._resolve_alpaca_env`

scripts/validate_startup_fixes.py:34:32: F401 `ai_trading.runner` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
32 |     try:
33 |         from ai_trading.config.management import _resolve_alpaca_env
34 |         from ai_trading import runner
   |                                ^^^^^^ F401
35 |         logging.info("   ✓ Core modules imported without credentials")
36 |         logging.info("   ✓ No sys.exit() calls during import")
   |
   = help: Remove unused import: `ai_trading.runner`

scripts/validate_startup_fixes.py:45:12: BLE001 Do not catch blind exception: `Exception`
   |
43 |         logging.info("   ✓ No sys.exit() crashes - this is good!")
44 |         return True
45 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
46 |         logging.info(f"   ✗ Unexpected error: {e}")
47 |         return False
   |

scripts/validate_startup_fixes.py:211:12: BLE001 Do not catch blind exception: `Exception`
    |
209 |             return False
210 |             
211 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
212 |         logging.info(f"   ✗ Redacted logging test failed: {e}")
213 |         return False
    |

scripts/validate_startup_fixes.py:235:16: BLE001 Do not catch blind exception: `Exception`
    |
233 |             result = test()
234 |             results.append(result)
235 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
236 |             logging.info(f"   ✗ Test failed with exception: {e}")
237 |             traceback.print_exc()
    |

scripts/validate_unified_config.py:15:1: E402 Module level import not at top of file
   |
13 | """
14 |
15 | import os
   | ^^^^^^^^^ E402
16 | import sys
   |

scripts/validate_unified_config.py:16:1: E402 Module level import not at top of file
   |
15 | import os
16 | import sys
   | ^^^^^^^^^^ E402
17 |
18 | sys.path.append('.')
   |

scripts/validate_unified_config.py:164:12: BLE001 Do not catch blind exception: `Exception`
    |
162 |     try:
163 |         logging.info("✓ ai_trading import works")
164 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
165 |         logging.info(f"✗ ai_trading import failed: {e}")
166 |         return False
    |

scripts/validate_unified_config.py:170:12: BLE001 Do not catch blind exception: `Exception`
    |
168 |     try:
169 |         logging.info("✓ settings_singleton import works")
170 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
171 |         logging.info(f"✗ settings_singleton import failed: {e}")
172 |         return False
    |

scripts/validate_unified_config.py:176:12: BLE001 Do not catch blind exception: `Exception`
    |
174 |     try:
175 |         logging.info("✓ Money class import works")
176 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
177 |         logging.info(f"✗ Money class import failed: {e}")
178 |         return False
    |

scripts/validate_unified_config.py:182:12: BLE001 Do not catch blind exception: `Exception`
    |
180 |     try:
181 |         logging.info("✓ rate_limit import works")
182 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
183 |         logging.info(f"✗ rate_limit import failed: {e}")
184 |         return False
    |

scripts/validate_unified_config.py:211:12: BLE001 Do not catch blind exception: `Exception`
    |
209 |         return True
210 |
211 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
212 |         logging.info(f"❌ VALIDATION FAILED: {e}")
213 |         import traceback
    |

scripts/verify_config.py:11:1: E402 Module level import not at top of file
   |
 9 | """
10 |
11 | import os
   | ^^^^^^^^^ E402
12 | import sys
13 | from pathlib import Path
   |

scripts/verify_config.py:12:1: E402 Module level import not at top of file
   |
11 | import os
12 | import sys
   | ^^^^^^^^^^ E402
13 | from pathlib import Path
   |

scripts/verify_config.py:13:1: E402 Module level import not at top of file
   |
11 | import os
12 | import sys
13 | from pathlib import Path
   | ^^^^^^^^^^^^^^^^^^^^^^^^ E402
14 |
15 | from ai_trading.config import management as config
   |

scripts/verify_config.py:15:1: E402 Module level import not at top of file
   |
13 | from pathlib import Path
14 |
15 | from ai_trading.config import management as config
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
16 | from ai_trading.config.management import TradingConfig
17 | CONFIG = TradingConfig()
   |

scripts/verify_config.py:16:1: E402 Module level import not at top of file
   |
15 | from ai_trading.config import management as config
16 | from ai_trading.config.management import TradingConfig
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
17 | CONFIG = TradingConfig()
   |

scripts/verify_config.py:58:12: BLE001 Do not catch blind exception: `Exception`
   |
56 |     except ImportError:
57 |         return False, "❌ python-dotenv not installed. Run: pip install python-dotenv"
58 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
59 |         return False, f"❌ Error reading .env file: {e}"
   |

scripts/verify_config.py:108:12: BLE001 Do not catch blind exception: `Exception`
    |
106 |     except ImportError:
107 |         return False, "❌ python-dotenv not installed. Run: pip install python-dotenv"
108 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
109 |         return False, f"❌ Error checking API keys: {e}"
    |

scripts/verify_config.py:127:12: BLE001 Do not catch blind exception: `Exception`
    |
125 |             return False, "⚠️  Configuration imports but API keys not properly set"
126 |         
127 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
128 |         return False, f"❌ Error importing config: {e}"
    |

tests/conftest.py:53:8: BLE001 Do not catch blind exception: `Exception`
   |
51 | try:
52 |     from dotenv import load_dotenv
53 | except Exception:
   |        ^^^^^^^^^ BLE001
54 |     def load_dotenv(*a, **k):
55 |         pass
   |

tests/conftest.py:65:8: BLE001 Do not catch blind exception: `Exception`
   |
63 | try:
64 |     from hypothesis import HealthCheck, given, settings
65 | except Exception:
   |        ^^^^^^^^^ BLE001
66 |     import types
   |

tests/conftest.py:118:8: BLE001 Do not catch blind exception: `Exception`
    |
116 | try:
117 |     pass
118 | except Exception:
    |        ^^^^^^^^^ BLE001
119 |     import types
120 |     class LockStub:
    |

tests/conftest.py:138:8: BLE001 Do not catch blind exception: `Exception`
    |
136 | try:
137 |     pass
138 | except Exception:
    |        ^^^^^^^^^ BLE001
139 |     import types
140 |     class ScheduleStub:
    |

tests/conftest.py:157:8: BLE001 Do not catch blind exception: `Exception`
    |
155 | try:
156 |     pass
157 | except Exception:
    |        ^^^^^^^^^ BLE001
158 |     import types
    |

tests/conftest.py:205:8: BLE001 Do not catch blind exception: `Exception`
    |
203 | try:
204 |     pass
205 | except Exception:
    |        ^^^^^^^^^ BLE001
206 |     import types
207 |     hmmlearn_mod = types.ModuleType("hmmlearn")
    |

tests/conftest.py:227:8: BLE001 Do not catch blind exception: `Exception`
    |
225 | try:
226 |     pass
227 | except Exception:
    |        ^^^^^^^^^ BLE001
228 |     import types
    |

tests/conftest.py:251:8: BLE001 Do not catch blind exception: `Exception`
    |
249 | try:
250 |     pass
251 | except Exception:
    |        ^^^^^^^^^ BLE001
252 |     import types
    |

tests/conftest.py:346:8: BLE001 Do not catch blind exception: `Exception`
    |
344 |         wait_exponential,
345 |     )
346 | except Exception:
    |        ^^^^^^^^^ BLE001
347 |     import types
    |

tests/conftest.py:397:1: E402 Module level import not at top of file
    |
396 | sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
397 | import types
    | ^^^^^^^^^^^^ E402
398 | from pathlib import Path
    |

tests/conftest.py:398:1: E402 Module level import not at top of file
    |
396 | sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
397 | import types
398 | from pathlib import Path
    | ^^^^^^^^^^^^^^^^^^^^^^^^ E402
399 |
400 | import pytest
    |

tests/conftest.py:400:1: E402 Module level import not at top of file
    |
398 | from pathlib import Path
399 |
400 | import pytest
    | ^^^^^^^^^^^^^ E402
401 | from datetime import UTC
    |

tests/conftest.py:401:1: E402 Module level import not at top of file
    |
400 | import pytest
401 | from datetime import UTC
    | ^^^^^^^^^^^^^^^^^^^^^^^^ E402
402 |
403 | # AI-AGENT-REF: Add numpy stub before any imports that might need it
    |

tests/conftest.py:406:8: BLE001 Do not catch blind exception: `Exception`
    |
404 | try:
405 |     pass
406 | except Exception:  # pragma: no cover - optional dependency
    |        ^^^^^^^^^ BLE001
407 |     import types
    |

tests/conftest.py:509:8: BLE001 Do not catch blind exception: `Exception`
    |
507 | try:
508 |     import urllib3
509 | except Exception:  # pragma: no cover - optional dependency
    |        ^^^^^^^^^ BLE001
510 |     import types
511 |     urllib3 = types.ModuleType("urllib3")
    |

tests/conftest.py:518:8: BLE001 Do not catch blind exception: `Exception`
    |
516 | try:
517 |     pass
518 | except Exception:  # pragma: no cover - optional dependency
    |        ^^^^^^^^^ BLE001
519 |     import types
    |

tests/conftest.py:731:43: F823 Local variable `dt` referenced before assignment
    |
729 |                     self.value = str(args[0])
730 |             else:
731 |                 self.value = datetime.now(dt.UTC).isoformat()
    |                                           ^^ F823
732 |             
733 |             # Handle timezone parameter
    |

tests/conftest.py:866:8: BLE001 Do not catch blind exception: `Exception`
    |
864 | try:
865 |     pass  # ensure real package available
866 | except Exception:  # pragma: no cover - allow missing in test env
    |        ^^^^^^^^^ BLE001
867 |     req_mod = types.ModuleType("requests")
868 |     exc_mod = types.ModuleType("requests.exceptions")
    |

tests/conftest.py:879:8: BLE001 Do not catch blind exception: `Exception`
    |
877 | try:
878 |     pass
879 | except Exception:  # pragma: no cover - optional dependency
    |        ^^^^^^^^^ BLE001
880 |     import types
881 |     ta_mod = types.ModuleType("pandas_ta")
    |

tests/conftest.py:897:8: BLE001 Do not catch blind exception: `Exception`
    |
895 | try:
896 |     pass
897 | except Exception:  # pragma: no cover - optional dependency
    |        ^^^^^^^^^ BLE001
898 |     import types
    |

tests/conftest.py:913:8: BLE001 Do not catch blind exception: `Exception`
    |
911 | try:
912 |     pass
913 | except Exception:  # pragma: no cover - optional dependency
    |        ^^^^^^^^^ BLE001
914 |     import types
    |

tests/conftest.py:1014:8: BLE001 Do not catch blind exception: `Exception`
     |
1012 | try:
1013 |     pass
1014 | except Exception:  # pragma: no cover - optional dependency
     |        ^^^^^^^^^ BLE001
1015 |     import types
     |

tests/conftest.py:1046:8: BLE001 Do not catch blind exception: `Exception`
     |
1044 | try:
1045 |     pass
1046 | except Exception:  # pragma: no cover - optional dependency
     |        ^^^^^^^^^ BLE001
1047 |     import types
     |

tests/conftest.py:1072:8: BLE001 Do not catch blind exception: `Exception`
     |
1070 | try:
1071 |     from alpaca.common.exceptions import APIError
1072 | except Exception:  # pragma: no cover - optional dependency
     |        ^^^^^^^^^ BLE001
1073 |     import types
1074 |     from enum import Enum
     |

tests/conftest.py:1257:8: BLE001 Do not catch blind exception: `Exception`
     |
1255 | try:
1256 |     pass
1257 | except Exception:  # pragma: no cover - optional dependency
     |        ^^^^^^^^^ BLE001
1258 |     import types
1259 |     psutil_mod = types.ModuleType("psutil")
     |

tests/conftest.py:1265:8: BLE001 Do not catch blind exception: `Exception`
     |
1263 | try:
1264 |     pass
1265 | except Exception:  # pragma: no cover - optional dependency
     |        ^^^^^^^^^ BLE001
1266 |     import types
1267 |     tzlocal_mod = types.ModuleType("tzlocal")
     |

tests/conftest.py:1275:8: BLE001 Do not catch blind exception: `Exception`
     |
1273 | try:
1274 |     from bs4 import BeautifulSoup
1275 | except Exception:  # pragma: no cover - optional dependency
     |        ^^^^^^^^^ BLE001
1276 |     import types
     |

tests/conftest.py:1299:8: BLE001 Do not catch blind exception: `Exception`
     |
1297 | try:
1298 |     from flask import Flask
1299 | except Exception:  # pragma: no cover - optional dependency
     |        ^^^^^^^^^ BLE001
1300 |     import types
     |

tests/conftest.py:1327:8: BLE001 Do not catch blind exception: `Exception`
     |
1325 | try:
1326 |     from ratelimit import limits, sleep_and_retry
1327 | except Exception:  # pragma: no cover - optional dependency
     |        ^^^^^^^^^ BLE001
1328 |     import types
     |

tests/conftest.py:1347:8: BLE001 Do not catch blind exception: `Exception`
     |
1345 | try:
1346 |     pass
1347 | except Exception:  # pragma: no cover - optional dependency
     |        ^^^^^^^^^ BLE001
1348 |     import types
     |

tests/conftest.py:1371:8: BLE001 Do not catch blind exception: `Exception`
     |
1369 | try:
1370 |     from prometheus_client import Counter, Gauge, Histogram, start_http_server
1371 | except Exception:  # pragma: no cover - optional dependency
     |        ^^^^^^^^^ BLE001
1372 |     import types
     |

tests/conftest.py:1446:1: E402 Module level import not at top of file
     |
1446 | import importlib
     | ^^^^^^^^^^^^^^^^ E402
1447 | import types
     |

tests/conftest.py:1447:1: E402 Module level import not at top of file
     |
1446 | import importlib
1447 | import types
     | ^^^^^^^^^^^^ E402
     |

tests/conftest.py:1474:40: F821 Undefined name `MockTradingConfig`
     |
1472 |             # Set the attribute on the config module instance, not the class
1473 |             if hasattr(config, '__dict__'):
1474 |                 config.TradingConfig = MockTradingConfig
     |                                        ^^^^^^^^^^^^^^^^^ F821
1475 |             else:
1476 |                 # If config is an instance, set it as an attribute 
     |

tests/conftest.py:1477:40: F821 Undefined name `MockTradingConfig`
     |
1475 |             else:
1476 |                 # If config is an instance, set it as an attribute 
1477 |                 config.TradingConfig = MockTradingConfig
     |                                        ^^^^^^^^^^^^^^^^^ F821
1478 |     except ImportError as e:
1479 |         # AI-AGENT-REF: Log config import failure for debugging 
     |

tests/conftest.py:1510:12: BLE001 Do not catch blind exception: `Exception`
     |
1508 |         logger.debug(f"Could not import bot_engine for mocking: {e}")
1509 |         pass
1510 |     except Exception:
     |            ^^^^^^^^^ BLE001
1511 |         # If bot_engine import fails due to config issues, skip it for now
1512 |         pass
     |

tests/conftest.py:1600:1: E402 Module level import not at top of file
     |
1599 | # AI-AGENT-REF: provide minimal 'config' stub for tests
1600 | import os as _os
     | ^^^^^^^^^^^^^^^^ E402
1601 | import sys as _sys
1602 | import types as _types
     |

tests/conftest.py:1601:1: E402 Module level import not at top of file
     |
1599 | # AI-AGENT-REF: provide minimal 'config' stub for tests
1600 | import os as _os
1601 | import sys as _sys
     | ^^^^^^^^^^^^^^^^^^ E402
1602 | import types as _types
     |

tests/conftest.py:1602:1: E402 Module level import not at top of file
     |
1600 | import os as _os
1601 | import sys as _sys
1602 | import types as _types
     | ^^^^^^^^^^^^^^^^^^^^^^ E402
     |

tests/conftest.py:1638:8: BLE001 Do not catch blind exception: `Exception`
     |
1636 | try:
1637 |     from pydantic import AliasChoices as _AliasChoices  # noqa: F401
1638 | except Exception:
     |        ^^^^^^^^^ BLE001
1639 |     import pydantic as _pydantic
     |

tests/conftest.py:1648:8: BLE001 Do not catch blind exception: `Exception`
     |
1646 | try:
1647 |     from pydantic import model_validator as _model_validator  # noqa: F401
1648 | except Exception:
     |        ^^^^^^^^^ BLE001
1649 |     import pydantic as _pydantic
     |

tests/conftest.py:1662:8: BLE001 Do not catch blind exception: `Exception`
     |
1660 | try:
1661 |     import pydantic_settings as _pydantic_settings  # noqa: F401
1662 | except Exception:
     |        ^^^^^^^^^ BLE001
1663 |     import types as _types2
1664 |     _pydantic_settings = _types2.ModuleType("pydantic_settings")
     |

tests/institutional/framework.py:99:20: BLE001 Do not catch blind exception: `Exception`
    |
 97 |                     logger.error(f"❌ {scenario_name} failed: {scenario_result.get('error', 'Unknown error')}")
 98 |                     
 99 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
100 |                 logger.error(f"❌ {scenario_name} failed with exception: {e}")
101 |                 results["scenarios"].append({
    |

tests/institutional/framework.py:145:20: BLE001 Do not catch blind exception: `Exception`
    |
143 |                     passed += 1
144 |                     
145 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
146 |                 results["scenarios"].append({
147 |                     "name": scenario_name,
    |

tests/institutional/framework.py:233:16: BLE001 Do not catch blind exception: `Exception`
    |
231 |                 "order_id": result.get("id") if result else None
232 |             }
233 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
234 |             return {"status": "failed", "error": str(e)}
    |

tests/institutional/framework.py:251:16: BLE001 Do not catch blind exception: `Exception`
    |
249 |                 "order_id": result.get("id") if result else None
250 |             }
251 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
252 |             return {"status": "failed", "error": str(e)}
    |

tests/institutional/framework.py:273:16: BLE001 Do not catch blind exception: `Exception`
    |
271 |                 "details": f"Cancellation result: {cancel_result}"
272 |             }
273 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
274 |             return {"status": "failed", "error": str(e)}
    |

tests/institutional/framework.py:295:16: BLE001 Do not catch blind exception: `Exception`
    |
293 |                 "details": f"Successfully submitted {len(successful_orders)}/{len(symbols)} orders"
294 |             }
295 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
296 |             return {"status": "failed", "error": str(e)}
    |

tests/institutional/framework.py:319:16: BLE001 Do not catch blind exception: `Exception`
    |
317 |                 "details": "Error handling validation"
318 |             }
319 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
320 |             return {"status": "failed", "error": str(e)}
    |

tests/institutional/framework.py:339:16: BLE001 Do not catch blind exception: `Exception`
    |
337 |                 "details": "Circuit breaker status check"
338 |             }
339 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
340 |             return {"status": "failed", "error": str(e)}
    |

tests/institutional/framework.py:423:20: BLE001 Do not catch blind exception: `Exception`
    |
421 |                     passed += 1
422 |                     
423 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
424 |                 results["tests"].append({
425 |                     "name": test_name,
    |

tests/institutional/test_live_trading.py:21:1: E402 Module level import not at top of file
   |
19 | pytest.importorskip('alpaca_trade_api', reason='alpaca not installed')
20 |
21 | from ai_trading.execution.live_trading import AlpacaExecutionEngine
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
22 |
23 | from .framework import (
   |

tests/institutional/test_live_trading.py:23:1: E402 Module level import not at top of file
   |
21 |   from ai_trading.execution.live_trading import AlpacaExecutionEngine
22 |
23 | / from .framework import (
24 | |     ComplianceTestSuite,
25 | |     MockMarketDataProvider,
26 | |     TradingScenarioRunner,
27 | | )
   | |_^ E402
   |

tests/institutional/test_live_trading.py:179:16: BLE001 Do not catch blind exception: `Exception`
    |
177 |             invalid_side_result = execution_engine.submit_market_order("AAPL", "invalid_side", 100)
178 |             # Should handle gracefully
179 |         except Exception:
    |                ^^^^^^^^^ BLE001
180 |             # Error handling is working
181 |             pass
    |

tests/integration/test_regime_fallback.py:6:8: BLE001 Do not catch blind exception: `Exception`
  |
4 | try:
5 |     import ai_trading.core.bot_engine as bot_engine
6 | except Exception:
  |        ^^^^^^^^^ BLE001
7 |     pytest.skip("bot engine not importable", allow_module_level=True)
  |

tests/mocks/alpaca_mocks.py:31:1: E402 Module level import not at top of file
   |
31 | import types
   | ^^^^^^^^^^^^ E402
   |

tests/mocks/tenacity_mock.py:15:12: F821 Undefined name `MockWait`
   |
14 | def wait_exponential(*args, **kwargs):
15 |     return MockWait()
   |            ^^^^^^^^ F821
16 |
17 | def wait_random(*args, **kwargs):
   |

tests/mocks/tenacity_mock.py:18:12: F821 Undefined name `MockWait`
   |
17 | def wait_random(*args, **kwargs):
18 |     return MockWait()
   |            ^^^^^^^^ F821
19 |
20 | def retry_if_exception_type(*args):
   |

tests/runtime/test_alpaca_wrapped.py:7:1: E402 Module level import not at top of file
  |
5 | pytest.importorskip("alpaca")
6 |
7 | from ai_trading.broker.alpaca import AlpacaBroker, APIError
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
  |

tests/slow/test_meta_learning_heavy.py:10:8: BLE001 Do not catch blind exception: `Exception`
   |
 8 |     import pydantic_settings  # noqa: F401
 9 |     from ai_trading import meta_learning
10 | except Exception:
   |        ^^^^^^^^^ BLE001
11 |     pytest.skip("pydantic v2 required", allow_module_level=True)
12 | import sklearn.linear_model
   |

tests/test_additional_coverage.py:18:8: BLE001 Do not catch blind exception: `Exception`
   |
16 |     import ai_trading.config as config
17 |     from ai_trading import meta_learning
18 | except Exception:
   |        ^^^^^^^^^ BLE001
19 |     pytest.skip("pydantic v2 required", allow_module_level=True)
   |

tests/test_advanced_features.py:23:8: BLE001 Do not catch blind exception: `Exception`
   |
21 | try:
22 |     import ai_trading.alpaca_api as alpaca_api  # AI-AGENT-REF: canonical import
23 | except Exception:
   |        ^^^^^^^^^ BLE001
24 |     pytest.skip("alpaca_api not available", allow_module_level=True)
25 | try:
   |

tests/test_advanced_features.py:27:8: BLE001 Do not catch blind exception: `Exception`
   |
25 | try:
26 |     from ai_trading import rebalancer
27 | except Exception:
   |        ^^^^^^^^^ BLE001
28 |     pytest.skip("alpaca_trade_api not available", allow_module_level=True)
29 | try:
   |

tests/test_advanced_features.py:31:8: BLE001 Do not catch blind exception: `Exception`
   |
29 | try:
30 |     from ai_trading.execution import slippage  # AI-AGENT-REF: use prod slippage module
31 | except Exception:  # pragma: no cover - module optional
   |        ^^^^^^^^^ BLE001
32 |     slippage = None
   |

tests/test_alpaca_timeframe_mapping.py:11:8: BLE001 Do not catch blind exception: `Exception`
   |
 9 | try:
10 |     from alpaca.data.timeframe import TimeFrame, TimeFrameUnit
11 | except Exception:  # pragma: no cover - inject stub
   |        ^^^^^^^^^ BLE001
12 |     mod = types.ModuleType("alpaca.data.timeframe")
   |

tests/test_alpha_quality.py:37:12: BLE001 Do not catch blind exception: `Exception`
   |
35 |     except ImportError:
36 |         print("⚠ Skipping fixed horizon return test - module not available")
37 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
38 |         print(f"✗ Fixed horizon return test failed: {e}")
   |

tests/test_alpha_quality.py:64:12: BLE001 Do not catch blind exception: `Exception`
   |
62 |     except ImportError:
63 |         print("⚠ Skipping leakage validation test - module not available")
64 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
65 |         print(f"✗ Data leakage validation test failed: {e}")
   |

tests/test_alpha_quality.py:92:12: BLE001 Do not catch blind exception: `Exception`
   |
90 |     except ImportError:
91 |         print("⚠ Skipping slippage calculation test - module not available")
92 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
93 |         print(f"✗ Slippage calculation test failed: {e}")
   |

tests/test_alpha_quality.py:132:12: BLE001 Do not catch blind exception: `Exception`
    |
130 |     except ImportError:
131 |         print("⚠ Skipping RL reward penalties test - module not available")
132 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
133 |         print(f"✗ RL reward penalties test failed: {e}")
    |

tests/test_alpha_quality.py:141:16: F401 `os` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
139 |         from ai_trading.model_registry import ModelRegistry
140 |         import tempfile
141 |         import os
    |                ^^ F401
142 |         
143 |         # Create temporary directory for testing
    |
    = help: Remove unused import: `os`

tests/test_alpha_quality.py:181:12: BLE001 Do not catch blind exception: `Exception`
    |
179 |     except ImportError:
180 |         print("⚠ Skipping model registry test - module not available")
181 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
182 |         print(f"✗ Model registry test failed: {e}")
    |

tests/test_alpha_quality.py:223:12: BLE001 Do not catch blind exception: `Exception`
    |
221 |     except ImportError:
222 |         print("⚠ Skipping walk-forward timeline test - module not available")
223 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
224 |         print(f"✗ Walk-forward timeline test failed: {e}")
    |

tests/test_alpha_quality.py:259:16: BLE001 Do not catch blind exception: `Exception`
    |
257 |             # The test should pass (no obvious leakage)
258 |             print("✓ Feature pipeline leakage test passed")
259 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
260 |             # If validation fails due to missing dependencies, that's OK
261 |             print(f"⚠ Feature pipeline test skipped: {e}")
    |

tests/test_alpha_quality.py:265:12: BLE001 Do not catch blind exception: `Exception`
    |
263 |     except ImportError:
264 |         print("⚠ Skipping feature pipeline test - module not available")
265 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
266 |         print(f"✗ Feature pipeline test failed: {e}")
    |

tests/test_audit_column_fix.py:16:12: BLE001 Do not catch blind exception: `Exception`
   |
14 |             if not attr_name.startswith('_'):
15 |                 getattr(mod, attr_name, None)
16 |     except Exception:
   |            ^^^^^^^^^ BLE001
17 |         # Fallback to original method if needed for coverage
18 |         lines = Path(mod.__file__).read_text().splitlines()
   |

tests/test_audit_smoke.py:16:12: BLE001 Do not catch blind exception: `Exception`
   |
14 |             if not attr_name.startswith('_'):
15 |                 getattr(mod, attr_name, None)
16 |     except Exception:
   |            ^^^^^^^^^ BLE001
17 |         # Fallback to original method if needed for coverage
18 |         lines = Path(mod.__file__).read_text().splitlines()
   |

tests/test_backtest_smoke.py:14:12: BLE001 Do not catch blind exception: `Exception`
   |
12 |             if not attr_name.startswith('_'):
13 |                 getattr(mod, attr_name, None)
14 |     except Exception:
   |            ^^^^^^^^^ BLE001
15 |         # Fallback to original method if needed for coverage
16 |         lines = Path(mod.__file__).read_text().splitlines()
   |

tests/test_batch_and_warmup.py:5:8: BLE001 Do not catch blind exception: `Exception`
  |
3 | try:
4 |     from ai_trading.data_fetcher import get_bars_batch, warmup_cache
5 | except Exception:
  |        ^^^^^^^^^ BLE001
6 |     pytest.skip("data_fetcher deps missing", allow_module_level=True)
  |

tests/test_bot.py:202:1: E402 Module level import not at top of file
    |
200 |     sys.modules["pandas_ta"].vwap = lambda *a, **k: pd.Series([0])
201 |
202 | from ai_trading.core import bot_engine as bot
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
    |

tests/test_bot_engine_imports.py:41:24: BLE001 Do not catch blind exception: `Exception`
   |
39 |                     assert model_pipeline == "mock_model_pipeline"
40 |                     primary_success = True
41 |                 except Exception:
   |                        ^^^^^^^^^ BLE001
42 |                     primary_success = False
   |

tests/test_bot_engine_imports.py:70:28: BLE001 Do not catch blind exception: `Exception`
   |
68 |                         from ai_trading.pipeline import model_pipeline  # type: ignore
69 |                         fallback_triggered = False
70 |                     except Exception:  # pragma: no cover
   |                            ^^^^^^^^^ BLE001
71 |                         from pipeline import model_pipeline  # type: ignore
72 |                         fallback_triggered = True
   |

tests/test_bot_extended.py:201:1: E402 Module level import not at top of file
    |
199 | sys.modules["pybreaker"].CircuitBreaker = _DummyBreaker
200 |
201 | from ai_trading.core import bot_engine as bot
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
    |

tests/test_capital_scaling_smoke.py:18:12: BLE001 Do not catch blind exception: `Exception`
   |
16 |             if not attr_name.startswith('_'):
17 |                 getattr(mod, attr_name, None)
18 |     except Exception:
   |            ^^^^^^^^^ BLE001
19 |         # Fallback to original method if needed for coverage
20 |         lines = Path(mod.__file__).read_text().splitlines()
   |

tests/test_centralized_logging_no_duplicates.py:13:9: F401 `ai_trading.logging.get_logger` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
11 |     from ai_trading.logging import (
12 |         setup_logging, 
13 |         get_logger, 
   |         ^^^^^^^^^^ F401
14 |         validate_logging_setup,
15 |         _LOGGING_CONFIGURED,
   |
   = help: Remove unused import

tests/test_centralized_logging_no_duplicates.py:15:9: F401 `ai_trading.logging._LOGGING_CONFIGURED` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
13 |         get_logger, 
14 |         validate_logging_setup,
15 |         _LOGGING_CONFIGURED,
   |         ^^^^^^^^^^^^^^^^^^^ F401
16 |         _LOGGING_LOCK
17 |     )
   |
   = help: Remove unused import

tests/test_centralized_logging_no_duplicates.py:16:9: F401 `ai_trading.logging._LOGGING_LOCK` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
14 |         validate_logging_setup,
15 |         _LOGGING_CONFIGURED,
16 |         _LOGGING_LOCK
   |         ^^^^^^^^^^^^^ F401
17 |     )
18 |     CENTRALIZED_LOGGING_AVAILABLE = True
   |
   = help: Remove unused import

tests/test_centralized_logging_no_duplicates.py:78:16: F401 `logging_config` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
76 |     # Test that logging_config cannot be imported
77 |     try:
78 |         import logging_config
   |                ^^^^^^^^^^^^^^ F401
79 |         assert False, "logging_config should not be importable after removal"
80 |     except ImportError:
   |
   = help: Remove unused import: `logging_config`

tests/test_centralized_logging_no_duplicates.py:85:16: F401 `logger` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
83 |     # Test that logger cannot be imported
84 |     try:
85 |         import logger
   |                ^^^^^^ F401
86 |         assert False, "logger should not be importable after removal"
87 |     except ImportError:
   |
   = help: Remove unused import: `logger`

tests/test_centralized_logging_no_duplicates.py:113:16: BLE001 Do not catch blind exception: `Exception`
    |
111 |                 logger = setup_logging(debug=True)
112 |                 results.append(len(logging.getLogger().handlers))
113 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
114 |             exceptions.append(e)
    |

tests/test_confidence_gate.py:9:12: BLE001 Do not catch blind exception: `Exception`
   |
 7 |         import ai_trading.strategy_allocator as s
 8 |         return s
 9 |     except Exception:
   |            ^^^^^^^^^ BLE001
10 |         import scripts.strategy_allocator as s
11 |         return s
   |

tests/test_config_deadlock_fix.py:138:12: BLE001 Do not catch blind exception: `Exception`
    |
136 |         # This is the specific test case mentioned in the problem statement
137 |         print('Import successful')
138 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
139 |         # Import might fail due to missing dependencies, but it shouldn't hang
140 |         print(f'Import failed (expected): {e}')
    |

tests/test_config_env.py:69:20: BLE001 Do not catch blind exception: `Exception`
   |
67 |                 result = os.getenv("DISABLE_DAILY_RETRAIN", "false").lower() in ("true", "1")
68 |                 assert result is True
69 |             except Exception as e:
   |                    ^^^^^^^^^ BLE001
70 |                 # If import fails due to missing env vars, that's expected in test environment
71 |                 # Just ensure our logic works
   |

tests/test_coverage_hack.py:21:16: BLE001 Do not catch blind exception: `Exception`
   |
19 |         except SyntaxError as e:
20 |             logger.error("Syntax error in %s: %s", fname, e)
21 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
22 |             logger.error("Coverage test failed for %s: %s", fname, e)
23 |             # Don't fail the test, just log the error
   |

tests/test_critical_datetime_fixes.py:67:16: BLE001 Do not catch blind exception: `Exception`
   |
65 |         try:
66 |             get_bars("AAPL", start_dt, end_dt)
67 |         except Exception as e:  # pragma: no cover - ensure no TZ errors
   |                ^^^^^^^^^ BLE001
68 |             if "timezone" in str(e).lower():
69 |                 self.fail(f"get_bars failed due to timezone issues: {e}")
   |

tests/test_critical_fixes.py:215:12: BLE001 Do not catch blind exception: `Exception`
    |
213 |         log_trade("AAPL", 10, "buy", 150.0, datetime.now(timezone.utc), "test")
214 |         # If it succeeds, that's fine - we're mainly testing the error handling path exists
215 |     except Exception:
    |            ^^^^^^^^^ BLE001
216 |         # If it fails due to missing dependencies, that's also acceptable for this test
217 |         pass
    |

tests/test_critical_fixes_focused.py:69:16: BLE001 Do not catch blind exception: `Exception`
   |
67 |                               f"Signal confidence {signal.confidence} is not in [0,1] range")
68 |             print("✓ Confidence normalization handles out-of-range values")
69 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
70 |             self.fail(f"Confidence normalization failed: {e}")
   |

tests/test_critical_fixes_focused.py:294:5: F821 Undefined name `test_timestamp_format_includes_timezone`
    |
293 | if __name__ == "__main__":
294 |     test_timestamp_format_includes_timezone()
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F821
295 |     test_position_sizing_minimum_viable()
296 |     test_meta_learning_price_conversion()
    |

tests/test_critical_fixes_implementation.py:76:16: BLE001 Do not catch blind exception: `Exception`
   |
74 |                 result = optimizer._calculate_kelly_fraction("TEST")
75 |                 results.append(result)
76 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
77 |             errors.append(e)
   |

tests/test_critical_fixes_implementation.py:260:40: F821 Undefined name `MockConfigManager`
    |
258 |     # Mock implementation
259 |     # Register implementation
260 |     container.register(IConfigManager, MockConfigManager)
    |                                        ^^^^^^^^^^^^^^^^^ F821
261 |     
262 |     # Resolve implementation
    |

tests/test_critical_fixes_implementation.py:264:39: F821 Undefined name `MockConfigManager`
    |
262 |     # Resolve implementation
263 |     config_manager = container.resolve(IConfigManager)
264 |     assert isinstance(config_manager, MockConfigManager)
    |                                       ^^^^^^^^^^^^^^^^^ F821
265 |     assert config_manager.get("test") == "mock_test"
    |

tests/test_critical_fixes_implementation.py:268:40: F821 Undefined name `MockConfigManager`
    |
267 |     # Test singleton
268 |     container.register(IConfigManager, MockConfigManager, singleton=True)
    |                                        ^^^^^^^^^^^^^^^^^ F821
269 |     instance1 = container.resolve(IConfigManager)
270 |     instance2 = container.resolve(IConfigManager)
    |

tests/test_critical_issues_resolution.py:21:33: F401 `ai_trading.core.bot_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
19 |     from ai_trading.math.money import Money
20 |     from ai_trading.risk.engine import RiskEngine  # AI-AGENT-REF: normalized import
21 |     from ai_trading.core import bot_engine
   |                                 ^^^^^^^^^^ F401
22 |     HAS_FULL_IMPORTS = True
23 | except ImportError as e:
   |
   = help: Remove unused import: `ai_trading.core.bot_engine`

tests/test_critical_issues_resolution.py:51:16: BLE001 Do not catch blind exception: `Exception`
   |
49 |             order.add_fill(1, Money(150.0))
50 |             self.assertTrue(order.is_partially_filled)
51 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
52 |             self.fail(f"Partial fill handling failed: {e}")
   |

tests/test_critical_issues_resolution.py:93:16: BLE001 Do not catch blind exception: `Exception`
   |
91 |                 fallback_result = {'status': 'fallback_active', 'reason': 'insufficient_data'}
92 |                 self.assertEqual(fallback_result['status'], 'fallback_active')
93 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
94 |             self.fail(f"Fallback mechanism should not raise exceptions: {e}")
   |

tests/test_critical_issues_resolution.py:168:16: BLE001 Do not catch blind exception: `Exception`
    |
166 |             self.assertIsInstance(spacing, float, "Order spacing should return float")
167 |             self.assertGreaterEqual(spacing, 0, "Order spacing should be non-negative")
168 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
169 |             self.fail(f"RiskEngine order spacing test failed: {e}")
    |

tests/test_critical_trading_fixes.py:27:8: BLE001 Do not catch blind exception: `Exception`
   |
25 | try:
26 |     import ai_trading.analysis.sentiment as sentiment
27 | except Exception:  # pragma: no cover - optional torch dependency
   |        ^^^^^^^^^ BLE001
28 |     pytest.skip("sentiment module unavailable", allow_module_level=True)
29 | from ai_trading import meta_learning
   |

tests/test_critical_trading_fixes.py:207:20: BLE001 Do not catch blind exception: `Exception`
    |
205 |                 meta_learning._generate_bootstrap_training_data(self.trade_log_path, 10)
206 |                 success = True
207 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
208 |                 success = False
209 |                 print(f"Bootstrap generation failed: {e}")
    |

tests/test_critical_trading_fixes.py:751:20: BLE001 Do not catch blind exception: `Exception`
    |
749 |             try:
750 |                 retrain_meta_learner(trade_log_path=tmp_path, min_samples=1)
751 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
752 |                 # Training may fail due to missing sklearn, but that's OK for this test
753 |                 mock_logger.warning.call_args_list.append(f"Meta learning training failed as expected: {e}")
    |

tests/test_data_fetcher.py:86:1: E402 Module level import not at top of file
   |
84 | sys.modules["finnhub"].FinnhubAPIException = _DummyFinnhubException
85 |
86 | from ai_trading import data_fetcher
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

tests/test_data_fetcher.py:233:1: E402 Module level import not at top of file
    |
232 | # AI-AGENT-REF: Replaced unsafe _raise_dynamic_exec_disabled() with direct import from core module
233 | from ai_trading.core.bot_engine import fetch_minute_df_safe
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
    |

tests/test_enhanced_execution_debugging.py:22:35: F401 `ai_trading.execution.pnl_attributor.PnLEvent` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
20 |     )
21 |     from ai_trading.execution.pnl_attributor import (
22 |         PnLAttributor, PnLSource, PnLEvent,
   |                                   ^^^^^^^^ F401
23 |         get_pnl_attributor
24 |     )
   |
   = help: Remove unused import: `ai_trading.execution.pnl_attributor.PnLEvent`

tests/test_enhanced_signals.py:6:8: BLE001 Do not catch blind exception: `Exception`
  |
4 | try:
5 |     import ai_trading.risk.engine as risk_engine  # AI-AGENT-REF: normalized import
6 | except Exception:  # pragma: no cover - optional dependency
  |        ^^^^^^^^^ BLE001
7 |     import pytest
8 |     pytest.skip("risk_engine not available", allow_module_level=True)
  |

tests/test_env_order_and_lazy_import.py:225:20: BLE001 Do not catch blind exception: `Exception`
    |
223 |                 # If we get here, import succeeded despite missing .env
224 |                 assert True
225 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
226 |                 pytest.fail(f"Import failed with missing .env file: {e}")
    |

tests/test_features.py:26:1: E402 Module level import not at top of file
   |
24 | pytestmark = pytest.mark.usefixtures("default_env", "features_env")
25 |
26 | import pytest
   | ^^^^^^^^^^^^^ E402
27 |
28 | @pytest.fixture(autouse=True)
   |

tests/test_fetch_contract.py:15:1: E402 Module level import not at top of file
   |
13 | sys.modules["dotenv"] = dotenv_stub
14 |
15 | from ai_trading import data_fetcher
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

tests/test_fill_rate_calculation_fix.py:18:8: BLE001 Do not catch blind exception: `Exception`
   |
16 | try:
17 |     from ai_trading import ExecutionEngine
18 | except Exception:  # pragma: no cover - optional component
   |        ^^^^^^^^^ BLE001
19 |     pytest.skip("ExecutionEngine not available", allow_module_level=True)
   |

tests/test_fill_rate_calculation_fix.py:26:11: F821 Undefined name `MockContext`
   |
24 |     """Test that fill rate calculation now works correctly when order.filled_qty is None."""
25 |     
26 |     ctx = MockContext()
   |           ^^^^^^^^^^^ F821
27 |     engine = ExecutionEngine(ctx)
   |

tests/test_fill_rate_calculation_fix.py:32:36: F821 Undefined name `MockOrder`
   |
31 |         # Test Case: Order with filled_qty=None (the bug condition that was fixed)
32 |         order_without_filled_qty = MockOrder(filled_qty=None)
   |                                    ^^^^^^^^^ F821
33 |         
34 |         engine._reconcile_partial_fills(
   |

tests/test_fill_rate_calculation_fix.py:58:11: F821 Undefined name `MockContext`
   |
56 |     """Test that fill rate alert thresholds are now more realistic for market conditions."""
57 |     
58 |     ctx = MockContext()
   |           ^^^^^^^^^^^ F821
59 |     engine = ExecutionEngine(ctx)
   |

tests/test_fill_rate_calculation_fix.py:64:23: F821 Undefined name `MockOrder`
   |
63 |         # Test 50% fill rate - should NOT trigger any error alerts now
64 |         order_50pct = MockOrder(filled_qty=25)
   |                       ^^^^^^^^^ F821
65 |         
66 |         engine._reconcile_partial_fills(
   |

tests/test_fill_rate_calculation_fix.py:81:23: F821 Undefined name `MockOrder`
   |
79 |         # Test 30% fill rate - should trigger moderate warning but not error
80 |         mock_logger.reset_mock()
81 |         order_30pct = MockOrder(filled_qty=15)
   |                       ^^^^^^^^^ F821
82 |         
83 |         engine._reconcile_partial_fills(
   |

tests/test_fill_rate_calculation_fix.py:98:23: F821 Undefined name `MockOrder`
    |
 96 |         # Test 20% fill rate - should now trigger error-level alert
 97 |         mock_logger.reset_mock() 
 98 |         order_20pct = MockOrder(filled_qty=10)
    |                       ^^^^^^^^^ F821
 99 |         
100 |         engine._reconcile_partial_fills(
    |

tests/test_fill_rate_calculation_fix.py:118:11: F821 Undefined name `MockContext`
    |
116 |     """Test that fill rate calculation still works when order.filled_qty is properly set."""
117 |     
118 |     ctx = MockContext()
    |           ^^^^^^^^^^^ F821
119 |     engine = ExecutionEngine(ctx)
    |

tests/test_fill_rate_calculation_fix.py:124:33: F821 Undefined name `MockOrder`
    |
123 |         # Test Case: Order with valid filled_qty
124 |         order_with_filled_qty = MockOrder(filled_qty=75)  # 75 out of 100 requested
    |                                 ^^^^^^^^^ F821
125 |         
126 |         engine._reconcile_partial_fills(
    |

tests/test_fixes.py:91:16: BLE001 Do not catch blind exception: `Exception`
   |
89 |             else:
90 |                 print("✅ SMA calculation working (fallback mode)")
91 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
92 |             print(f"⚠️ SMA calculation issue: {e}")
   |

tests/test_fixes.py:100:12: BLE001 Do not catch blind exception: `Exception`
    |
 98 |         print(f"❌ Failed to import TA-Lib modules: {e}")
 99 |         return False
100 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
101 |         print(f"❌ Error testing TA-Lib: {e}")
102 |         return False
    |

tests/test_fixes.py:134:12: BLE001 Do not catch blind exception: `Exception`
    |
132 |         return True
133 |         
134 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
135 |         print(f"❌ Error checking screen_universe logging: {e}")
136 |         return False
    |

tests/test_fixes.py:152:16: BLE001 Do not catch blind exception: `Exception`
    |
150 |         try:
151 |             results.append(test())
152 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
153 |             print(f"❌ Test {test.__name__} failed with exception: {e}")
154 |             results.append(False)
    |

tests/test_fixes_minimal.py:49:12: BLE001 Do not catch blind exception: `Exception`
   |
47 |         return True
48 |         
49 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
50 |         print(f"✗ RiskEngine test failed: {e}")
51 |         return False
   |

tests/test_fixes_minimal.py:93:12: BLE001 Do not catch blind exception: `Exception`
   |
91 |         return True
92 |         
93 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
94 |         print(f"✗ BotContext test failed: {e}")
95 |         return False
   |

tests/test_fixes_minimal.py:113:12: BLE001 Do not catch blind exception: `Exception`
    |
111 |         return True
112 |
113 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
114 |         print(f"✗ ProcessManager test failed: {e}")
115 |         return False
    |

tests/test_fixes_minimal.py:140:12: BLE001 Do not catch blind exception: `Exception`
    |
138 |         return True
139 |         
140 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
141 |         print(f"✗ Data validation test failed: {e}")
142 |         return False
    |

tests/test_fixes_minimal.py:164:12: BLE001 Do not catch blind exception: `Exception`
    |
162 |         return True
163 |         
164 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
165 |         print(f"✗ Audit permission handling test failed: {e}")
166 |         return False
    |

tests/test_fixes_minimal.py:192:16: BLE001 Do not catch blind exception: `Exception`
    |
190 |             else:
191 |                 failed += 1
192 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
193 |             print(f"✗ Test {test.__name__} crashed: {e}")
194 |             failed += 1
    |

tests/test_health.py:231:1: E402 Module level import not at top of file
    |
229 | # AI-AGENT-REF: Remove ai_trading.main import that causes deep torch dependency chain
230 | # from ai_trading.main import main  # Not used in this test, causes torch import issues
231 | from ai_trading.core.bot_engine import pre_trade_health_check
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
    |

tests/test_institutional_enhancements.py:421:16: BLE001 Do not catch blind exception: `Exception`
    |
419 |             rebalance_portfolio(ctx)
420 |             enhanced_maybe_rebalance(ctx)
421 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
422 |             self.fail(f"Enhanced rebalancer raised exception: {e}")
    |

tests/test_integration.py:67:12: BLE001 Do not catch blind exception: `Exception`
   |
65 |         print("Rate Limiting Integration: ✓ PASS\n")
66 |         
67 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
68 |         print(f"Rate Limiting Integration: ✗ FAIL - {e}\n")
   |

tests/test_integration.py:84:12: BLE001 Do not catch blind exception: `Exception`
   |
82 |         print("=" * 50)
83 |         
84 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
85 |         print(f"❌ INTEGRATION TEST FAILED: {e}")
86 |         import traceback
   |

tests/test_integration_robust.py:15:8: BLE001 Do not catch blind exception: `Exception`
   |
13 | try:
14 |     pass  # type: ignore
15 | except Exception:
   |        ^^^^^^^^^ BLE001
16 |     sys.modules["pandas"] = types.ModuleType("pandas")
17 |     sys.modules["pandas"].DataFrame = MagicMock()
   |

tests/test_integration_robust.py:23:8: BLE001 Do not catch blind exception: `Exception`
   |
21 | try:
22 |     import numpy  # type: ignore  # noqa: F401
23 | except Exception:
   |        ^^^^^^^^^ BLE001
24 |     sys.modules["numpy"] = types.ModuleType("numpy")
25 |     sys.modules["numpy"].array = MagicMock()
   |

tests/test_integration_robust.py:33:8: BLE001 Do not catch blind exception: `Exception`
   |
31 | try:
32 |     import pandas_ta  # type: ignore  # noqa: F401
33 | except Exception:
   |        ^^^^^^^^^ BLE001
34 |     sys.modules["pandas_ta"] = types.ModuleType("pandas_ta")
35 | if "pandas_ta" in sys.modules:
   |

tests/test_integration_robust.py:46:8: BLE001 Do not catch blind exception: `Exception`
   |
44 | try:
45 |     import pandas_market_calendars  # type: ignore  # noqa: F401
46 | except Exception:
   |        ^^^^^^^^^ BLE001
47 |     sys.modules["pandas_market_calendars"] = types.ModuleType("pandas_market_calendars")
48 | if not hasattr(sys.modules["pandas_market_calendars"], "get_calendar"):
   |

tests/test_integration_robust.py:138:1: E402 Module level import not at top of file
    |
136 | sys.modules["alpaca.trading.requests"].MarketOrderRequest = _Req
137 | sys.modules["alpaca.trading.requests"].GetOrdersRequest = _Req
138 | from enum import Enum
    | ^^^^^^^^^^^^^^^^^^^^^ E402
139 |
140 | class _Enum(str, Enum):
    |

tests/test_integration_robust.py:424:16: BLE001 Do not catch blind exception: `Exception`
    |
422 |         try:
423 |             bot.main()
424 |         except Exception:
    |                ^^^^^^^^^ BLE001
425 |             pytest.fail("Bot should handle NaN signal gracefully")
    |

tests/test_intelligent_position_management.py:23:34: F401 `ai_trading.position.SignalStrength` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
21 |         IntelligentPositionManager,
22 |         MarketRegimeDetector, MarketRegime,
23 |         TechnicalSignalAnalyzer, SignalStrength, DivergenceType,
   |                                  ^^^^^^^^^^^^^^ F401
24 |         TrailingStopManager, TrailingStopType,
25 |         ProfitTakingEngine, ProfitTakingStrategy,
   |
   = help: Remove unused import

tests/test_intelligent_position_management.py:23:50: F401 `ai_trading.position.DivergenceType` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
21 |         IntelligentPositionManager,
22 |         MarketRegimeDetector, MarketRegime,
23 |         TechnicalSignalAnalyzer, SignalStrength, DivergenceType,
   |                                                  ^^^^^^^^^^^^^^ F401
24 |         TrailingStopManager, TrailingStopType,
25 |         ProfitTakingEngine, ProfitTakingStrategy,
   |
   = help: Remove unused import

tests/test_intelligent_position_management.py:24:30: F401 `ai_trading.position.TrailingStopType` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
22 |         MarketRegimeDetector, MarketRegime,
23 |         TechnicalSignalAnalyzer, SignalStrength, DivergenceType,
24 |         TrailingStopManager, TrailingStopType,
   |                              ^^^^^^^^^^^^^^^^ F401
25 |         ProfitTakingEngine, ProfitTakingStrategy,
26 |         PortfolioCorrelationAnalyzer, ConcentrationLevel
   |
   = help: Remove unused import

tests/test_intelligent_position_management.py:25:29: F401 `ai_trading.position.ProfitTakingStrategy` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
23 |         TechnicalSignalAnalyzer, SignalStrength, DivergenceType,
24 |         TrailingStopManager, TrailingStopType,
25 |         ProfitTakingEngine, ProfitTakingStrategy,
   |                             ^^^^^^^^^^^^^^^^^^^^ F401
26 |         PortfolioCorrelationAnalyzer, ConcentrationLevel
27 |     )
   |
   = help: Remove unused import

tests/test_intelligent_position_management.py:89:20: F821 Undefined name `MockPosition`
   |
87 |         """Test the enhanced should_hold_position method."""
88 |         # Create mock position
89 |         position = MockPosition(
   |                    ^^^^^^^^^^^^ F821
90 |             symbol='AAPL',
91 |             qty=100,
   |

tests/test_intelligent_position_management.py:110:20: F821 Undefined name `MockPosition`
    |
108 |     def test_analyze_position_basic(self):
109 |         """Test basic position analysis."""
110 |         position = MockPosition(
    |                    ^^^^^^^^^^^^ F821
111 |             symbol='AAPL',
112 |             qty=100,
    |

tests/test_intelligent_position_management.py:236:20: F821 Undefined name `MockPosition`
    |
234 |     def test_stop_initialization(self):
235 |         """Test trailing stop initialization."""
236 |         position = MockPosition(
    |                    ^^^^^^^^^^^^ F821
237 |             symbol='AAPL',
238 |             qty=100,
    |

tests/test_intelligent_position_management.py:252:20: F821 Undefined name `MockPosition`
    |
250 |     def test_stop_movement(self):
251 |         """Test that stops move up with price for long positions."""
252 |         position = MockPosition(
    |                    ^^^^^^^^^^^^ F821
253 |             symbol='AAPL',
254 |             qty=100,
    |

tests/test_intelligent_position_management.py:272:20: F821 Undefined name `MockPosition`
    |
270 |     def test_stop_trigger_detection(self):
271 |         """Test stop trigger detection."""
272 |         position = MockPosition(
    |                    ^^^^^^^^^^^^ F821
273 |             symbol='AAPL',
274 |             qty=100,
    |

tests/test_intelligent_position_management.py:299:20: F821 Undefined name `MockPosition`
    |
297 |     def test_profit_plan_creation(self):
298 |         """Test profit plan creation."""
299 |         position = MockPosition(
    |                    ^^^^^^^^^^^^ F821
300 |             symbol='AAPL',
301 |             qty=100,
    |

tests/test_intelligent_position_management.py:319:20: F821 Undefined name `MockPosition`
    |
317 |     def test_target_triggering(self):
318 |         """Test profit target triggering."""
319 |         position = MockPosition(
    |                    ^^^^^^^^^^^^ F821
320 |             symbol='AAPL',
321 |             qty=100,
    |

tests/test_intelligent_position_management.py:348:13: F821 Undefined name `MockPosition`
    |
346 |         """Test position data extraction."""
347 |         positions = [
348 |             MockPosition('AAPL', 100, 100.0, 11000.0),
    |             ^^^^^^^^^^^^ F821
349 |             MockPosition('MSFT', 50, 200.0, 10500.0),
350 |             MockPosition('GOOGL', 25, 150.0, 3750.0)
    |

tests/test_intelligent_position_management.py:349:13: F821 Undefined name `MockPosition`
    |
347 |         positions = [
348 |             MockPosition('AAPL', 100, 100.0, 11000.0),
349 |             MockPosition('MSFT', 50, 200.0, 10500.0),
    |             ^^^^^^^^^^^^ F821
350 |             MockPosition('GOOGL', 25, 150.0, 3750.0)
351 |         ]
    |

tests/test_intelligent_position_management.py:350:13: F821 Undefined name `MockPosition`
    |
348 |             MockPosition('AAPL', 100, 100.0, 11000.0),
349 |             MockPosition('MSFT', 50, 200.0, 10500.0),
350 |             MockPosition('GOOGL', 25, 150.0, 3750.0)
    |             ^^^^^^^^^^^^ F821
351 |         ]
    |

tests/test_intelligent_position_management.py:370:13: F821 Undefined name `MockPosition`
    |
368 |         """Test concentration level analysis."""
369 |         positions = [
370 |             MockPosition('AAPL', 100, 100.0, 50000.0),  # 50% of portfolio
    |             ^^^^^^^^^^^^ F821
371 |             MockPosition('MSFT', 50, 200.0, 25000.0),   # 25% of portfolio
372 |             MockPosition('GOOGL', 25, 150.0, 25000.0)   # 25% of portfolio
    |

tests/test_intelligent_position_management.py:371:13: F821 Undefined name `MockPosition`
    |
369 |         positions = [
370 |             MockPosition('AAPL', 100, 100.0, 50000.0),  # 50% of portfolio
371 |             MockPosition('MSFT', 50, 200.0, 25000.0),   # 25% of portfolio
    |             ^^^^^^^^^^^^ F821
372 |             MockPosition('GOOGL', 25, 150.0, 25000.0)   # 25% of portfolio
373 |         ]
    |

tests/test_intelligent_position_management.py:372:13: F821 Undefined name `MockPosition`
    |
370 |             MockPosition('AAPL', 100, 100.0, 50000.0),  # 50% of portfolio
371 |             MockPosition('MSFT', 50, 200.0, 25000.0),   # 25% of portfolio
372 |             MockPosition('GOOGL', 25, 150.0, 25000.0)   # 25% of portfolio
    |             ^^^^^^^^^^^^ F821
373 |         ]
    |

tests/test_intelligent_position_management.py:392:20: F821 Undefined name `MockPosition`
    |
390 |     def test_profitable_position_scenario(self):
391 |         """Test scenario with profitable position."""
392 |         position = MockPosition(
    |                    ^^^^^^^^^^^^ F821
393 |             symbol='AAPL',
394 |             qty=100,
    |

tests/test_intelligent_position_management.py:410:20: F821 Undefined name `MockPosition`
    |
408 |     def test_loss_position_scenario(self):
409 |         """Test scenario with losing position."""
410 |         position = MockPosition(
    |                    ^^^^^^^^^^^^ F821
411 |             symbol='AAPL',
412 |             qty=100,
    |

tests/test_intelligent_position_management.py:427:13: F821 Undefined name `MockPosition`
    |
425 |         """Test portfolio-level analysis and recommendations."""
426 |         positions = [
427 |             MockPosition('AAPL', 100, 100.0, 11000.0),
    |             ^^^^^^^^^^^^ F821
428 |             MockPosition('MSFT', 50, 200.0, 10500.0),
429 |             MockPosition('TSLA', 30, 150.0, 4800.0)
    |

tests/test_intelligent_position_management.py:428:13: F821 Undefined name `MockPosition`
    |
426 |         positions = [
427 |             MockPosition('AAPL', 100, 100.0, 11000.0),
428 |             MockPosition('MSFT', 50, 200.0, 10500.0),
    |             ^^^^^^^^^^^^ F821
429 |             MockPosition('TSLA', 30, 150.0, 4800.0)
430 |         ]
    |

tests/test_intelligent_position_management.py:429:13: F821 Undefined name `MockPosition`
    |
427 |             MockPosition('AAPL', 100, 100.0, 11000.0),
428 |             MockPosition('MSFT', 50, 200.0, 10500.0),
429 |             MockPosition('TSLA', 30, 150.0, 4800.0)
    |             ^^^^^^^^^^^^ F821
430 |         ]
    |

tests/test_kelly_confidence_fix.py:22:15: F821 Undefined name `MockBotContext`
   |
20 |         from ai_trading.core.bot_engine import fractional_kelly_size
21 |         
22 |         ctx = MockBotContext()
   |               ^^^^^^^^^^^^^^ F821
23 |         balance = 10000.0
24 |         price = 100.0
   |

tests/test_kelly_confidence_fix.py:75:15: F821 Undefined name `MockBotContext`
   |
73 |         from ai_trading.core.bot_engine import fractional_kelly_size
74 |         
75 |         ctx = MockBotContext()
   |               ^^^^^^^^^^^^^^ F821
76 |         
77 |         # Test invalid inputs return 0 or minimal position
   |

tests/test_logger_rotator_smoke.py:8:8: BLE001 Do not catch blind exception: `Exception`
  |
6 | try:
7 |     import logger_rotator
8 | except Exception:  # pragma: no cover - script optional
  |        ^^^^^^^^^ BLE001
9 |     pytest.skip("logger_rotator not available", allow_module_level=True)
  |

tests/test_logger_rotator_smoke.py:19:12: BLE001 Do not catch blind exception: `Exception`
   |
17 |             if not attr_name.startswith('_'):
18 |                 getattr(mod, attr_name, None)
19 |     except Exception:
   |            ^^^^^^^^^ BLE001
20 |         # Fallback to original method if needed for coverage
21 |         lines = Path(mod.__file__).read_text().splitlines()
   |

tests/test_logging_behavior.py:10:8: BLE001 Do not catch blind exception: `Exception`
   |
 8 | try:
 9 |     from ai_trading.strategies.base import TradeSignal
10 | except Exception:  # pragma: no cover - optional strategies package
   |        ^^^^^^^^^ BLE001
11 |     pytest.skip("TradeSignal unavailable", allow_module_level=True)
   |

tests/test_main_extended2.py:19:1: E402 Module level import not at top of file
   |
17 | flask_mod.jsonify = lambda *a, **k: {}
18 | sys.modules["flask"] = flask_mod
19 | import ai_trading.main as main
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
20 | import ai_trading.app as app
   |

tests/test_main_extended2.py:20:1: E402 Module level import not at top of file
   |
18 | sys.modules["flask"] = flask_mod
19 | import ai_trading.main as main
20 | import ai_trading.app as app
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

tests/test_main_smoke.py:6:8: BLE001 Do not catch blind exception: `Exception`
  |
4 | try:
5 |     main = importlib.import_module("run")
6 | except Exception:  # pragma: no cover - optional entrypoint
  |        ^^^^^^^^^ BLE001
7 |     pytest.skip("run module not available", allow_module_level=True)
  |

tests/test_meta_learning.py:9:1: E402 Module level import not at top of file
   |
 7 | np.random.seed(0)
 8 |
 9 | from ai_trading import meta_learning
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
10 | from ai_trading.meta_learning import MetaLearning
   |

tests/test_meta_learning.py:10:1: E402 Module level import not at top of file
   |
 9 | from ai_trading import meta_learning
10 | from ai_trading.meta_learning import MetaLearning
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

tests/test_parameter_optimization.py:122:29: F821 Undefined name `MockOrderManager`
    |
121 |         # Mock order manager for testing
122 |         vwap = VWAPExecutor(MockOrderManager())
    |                             ^^^^^^^^^^^^^^^^ F821
123 |         
124 |         # Verify optimized participation rate
    |

tests/test_performance_fixes.py:123:12: BLE001 Do not catch blind exception: `Exception`
    |
121 |     try:
122 |         engine._handle_order_result("AAPL", "buy", mock_order, 150.00, 100, start_time)
123 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
124 |         # Expected to fail on API calls in test environment
125 |         print(f"✓ Latency tracking code executed (API error expected: {type(e).__name__})")
    |

tests/test_performance_fixes.py:162:12: BLE001 Do not catch blind exception: `Exception`
    |
160 |         return True
161 |         
162 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
163 |         print(f"❌ TEST FAILED: {e}")
164 |         import traceback
    |

tests/test_portfolio_integration.py:163:16: BLE001 Do not catch blind exception: `Exception`
    |
161 |             # If it doesn't crash, that's a success in this test environment
162 |             assert True
163 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
164 |             # Some failures are expected due to limited test environment
165 |             # Just ensure it's handling errors gracefully
    |

tests/test_position_holding_simple.py:132:12: BLE001 Do not catch blind exception: `Exception`
    |
130 |         test_signal_filtering()
131 |         print("\n🎉 All simplified tests passed!")
132 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
133 |         print(f"❌ Test failed: {e}")
134 |         import traceback
    |

tests/test_position_intelligence.py:44:23: F821 Undefined name `MockSeries`
   |
42 |         # Test with trending price data
43 |         price_data = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]
44 |         mock_prices = MockSeries(price_data)
   |                       ^^^^^^^^^^ F821
45 |         
46 |         rsi = analyzer._calculate_rsi(mock_prices, 14)
   |

tests/test_position_intelligence.py:115:12: BLE001 Do not catch blind exception: `Exception`
    |
113 |         return True
114 |         
115 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
116 |         print(f"\n❌ Test failed: {e}")
117 |         import traceback
    |

tests/test_position_intelligence.py:191:12: BLE001 Do not catch blind exception: `Exception`
    |
189 |         return True
190 |         
191 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
192 |         print(f"\n❌ Integration test failed: {e}")
193 |         return False
    |

tests/test_problem_statement_validation.py:97:16: F401 `asyncio` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
95 |     """Test that asyncio uses modern get_running_loop pattern."""
96 |     try:
97 |         import asyncio
   |                ^^^^^^^ F401
98 |         import inspect
   |
   = help: Remove unused import: `asyncio`

tests/test_problem_statement_validation.py:207:16: BLE001 Do not catch blind exception: `Exception`
    |
205 |             passed += 1
206 |             print(f"✅ {test_func.__name__} PASSED\n")
207 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
208 |             failed += 1
209 |             print(f"❌ {test_func.__name__} FAILED: {e}\n")
    |

tests/test_production_system.py:17:49: F401 `ai_trading.risk.position_sizing.ATRPositionSizer` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
15 | try:
16 |     from ai_trading.core.enums import RiskLevel, OrderSide, OrderType
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
   |                                                 ^^^^^^^^^^^^^^^^ F401
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |
   = help: Remove unused import

tests/test_production_system.py:17:67: F401 `ai_trading.risk.position_sizing.DynamicPositionSizer` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
15 | try:
16 |     from ai_trading.core.enums import RiskLevel, OrderSide, OrderType
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
   |                                                                   ^^^^^^^^^^^^^^^^^^^^ F401
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |
   = help: Remove unused import

tests/test_production_system.py:18:50: F401 `ai_trading.risk.circuit_breakers.DrawdownCircuitBreaker` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
16 |     from ai_trading.core.enums import RiskLevel, OrderSide, OrderType
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^ F401
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
20 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
   |
   = help: Remove unused import

tests/test_production_system.py:18:74: F401 `ai_trading.risk.circuit_breakers.TradingHaltManager` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
16 |     from ai_trading.core.enums import RiskLevel, OrderSide, OrderType
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
   |                                                                          ^^^^^^^^^^^^^^^^^^ F401
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
20 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
   |
   = help: Remove unused import

tests/test_production_system.py:19:48: F401 `ai_trading.monitoring.alerting.AlertManager` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |                                                ^^^^^^^^^^^^ F401
20 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
21 | except ImportError as e:
   |
   = help: Remove unused import

tests/test_production_system.py:19:62: F401 `ai_trading.monitoring.alerting.AlertSeverity` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |                                                              ^^^^^^^^^^^^^ F401
20 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
21 | except ImportError as e:
   |
   = help: Remove unused import

tests/test_production_system.py:20:56: F401 `ai_trading.execution.production_engine.ProductionExecutionCoordinator` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
20 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F401
21 | except ImportError as e:
22 |     print(f"Import error (expected in test environment): {e}")
   |
   = help: Remove unused import: `ai_trading.execution.production_engine.ProductionExecutionCoordinator`

tests/test_production_system.py:70:12: BLE001 Do not catch blind exception: `Exception`
   |
68 |         print("⚠ ATR Position Sizer test skipped - module not available")
69 |         return True
70 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
71 |         print(f"✗ ATR Position Sizer test failed: {e}")
72 |         return False
   |

tests/test_production_system.py:78:78: F401 `ai_trading.risk.circuit_breakers.CircuitBreakerState` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
76 |     """Test drawdown circuit breaker functionality."""
77 |     try:
78 |         from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, CircuitBreakerState
   |                                                                              ^^^^^^^^^^^^^^^^^^^ F401
79 |         
80 |         # Test circuit breaker with 10% max drawdown
   |
   = help: Remove unused import: `ai_trading.risk.circuit_breakers.CircuitBreakerState`

tests/test_production_system.py:106:12: BLE001 Do not catch blind exception: `Exception`
    |
104 |         print("⚠ Drawdown Circuit Breaker test skipped - module not available")
105 |         return True
106 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
107 |         print(f"✗ Drawdown Circuit Breaker test failed: {e}")
108 |         return False
    |

tests/test_production_system.py:147:12: BLE001 Do not catch blind exception: `Exception`
    |
145 |         print("⚠ Trading Halt Manager test skipped - module not available")
146 |         return True
147 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
148 |         print(f"✗ Trading Halt Manager test failed: {e}")
149 |         return False
    |

tests/test_production_system.py:198:12: BLE001 Do not catch blind exception: `Exception`
    |
196 |         print("⚠ Alert Manager test skipped - module not available")
197 |         return True
198 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
199 |         print(f"✗ Alert Manager test failed: {e}")
200 |         return False
    |

tests/test_production_system.py:242:12: BLE001 Do not catch blind exception: `Exception`
    |
240 |         print("⚠ Production Execution Coordinator test skipped - module not available")
241 |         return True
242 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
243 |         print(f"✗ Production Execution Coordinator test failed: {e}")
244 |         return False
    |

tests/test_production_system.py:296:12: BLE001 Do not catch blind exception: `Exception`
    |
294 |         print("\n\n⏹️  Tests interrupted by user")
295 |         exit(1)
296 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
297 |         print(f"\n\n💥 Test runner error: {e}")
298 |         exit(1)
    |

tests/test_pydantic_v2_migration.py:82:12: BLE001 Do not catch blind exception: `Exception`
   |
80 |     except ImportError as e:
81 |         pytest.skip(f"Cannot import validate_env module: {e}")
82 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
83 |         # Don't fail if there are other validation issues, just check syntax works
84 |         if "field_validator" in str(e) or "validator" in str(e):
   |

tests/test_pydantic_v2_migration.py:110:20: BLE001 Do not catch blind exception: `Exception`
    |
108 |                 # If we get here, check that the problematic values were caught
109 |                 # by validators or set to defaults
110 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
111 |                 # Validation errors are expected with invalid inputs
112 |                 assert "ALPACA_SECRET_KEY appears too short" in str(e) or \
    |

tests/test_rebalancer_additional.py:31:24: BLE001 Do not catch blind exception: `Exception`
   |
29 |                 try:
30 |                     target()
31 |                 except Exception:
   |                        ^^^^^^^^^ BLE001
32 |                     # Catch any exceptions from the loop to prevent infinite execution
33 |                     pass
   |

tests/test_retry_idempotency_integration.py:77:14: F821 Undefined name `MockBrokerAPI`
   |
75 | def test_retry_idempotency_integration():
76 |     """Test that retry mechanism works with idempotency protection."""
77 |     broker = MockBrokerAPI(fail_count=2)  # Fail 2 times, succeed on 3rd
   |              ^^^^^^^^^^^^^ F821
78 |     idempotency_mgr = OrderIdempotencyManager()
79 |     reconciler = PositionReconciler()
   |

tests/test_retry_idempotency_integration.py:122:14: F821 Undefined name `MockBrokerAPI`
    |
120 | def test_reconciliation_heals_state():
121 |     """Test that reconciliation heals local/broker state after submission."""
122 |     broker = MockBrokerAPI(fail_count=0)  # No failures
    |              ^^^^^^^^^^^^^ F821
123 |     idempotency_mgr = OrderIdempotencyManager()
124 |     reconciler = PositionReconciler()
    |

tests/test_retry_idempotency_integration.py:151:14: F821 Undefined name `MockBrokerAPI`
    |
149 | def test_retry_exhaustion_with_idempotency():
150 |     """Test behavior when all retries are exhausted."""
151 |     broker = MockBrokerAPI(fail_count=5)  # Fail more times than retry limit
    |              ^^^^^^^^^^^^^ F821
152 |     idempotency_mgr = OrderIdempotencyManager()
    |

tests/test_risk_engine_module.py:11:1: E402 Module level import not at top of file
   |
 9 |     sys.modules.pop(m, None)
10 | sys.modules.pop("risk_engine", None)
11 | from ai_trading.risk.engine import RiskEngine  # AI-AGENT-REF: normalized import
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
12 | from ai_trading.strategies import TradeSignal
   |

tests/test_risk_engine_module.py:12:1: E402 Module level import not at top of file
   |
10 | sys.modules.pop("risk_engine", None)
11 | from ai_trading.risk.engine import RiskEngine  # AI-AGENT-REF: normalized import
12 | from ai_trading.strategies import TradeSignal
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

tests/test_risk_engine_package.py:91:16: BLE001 Do not catch blind exception: `Exception`
   |
89 |         try:
90 |             re.update_exposure(context=MockContext())
91 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
92 |             self.fail(f"update_exposure failed with context: {e}")
   |

tests/test_runtime_fixes.py:18:12: BLE001 Do not catch blind exception: `Exception`
   |
16 |         print("✓ signals import successful")
17 |         success = True
18 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
19 |         print(f"✗ signals import failed: {e}")
20 |         success = False
   |

tests/test_runtime_fixes.py:25:12: BLE001 Do not catch blind exception: `Exception`
   |
23 |     try:
24 |         print("✓ indicators import successful")
25 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
26 |         print(f"✗ indicators import failed: {e}")
27 |         success = False
   |

tests/test_runtime_fixes.py:32:12: BLE001 Do not catch blind exception: `Exception`
   |
30 |     try:
31 |         print("✓ rebalancer import successful")
32 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
33 |         if "ALPACA_API_KEY" in str(e) or "pydantic_settings" in str(e):
34 |             print("✓ rebalancer import failed as expected (missing env vars or deps)")
   |

tests/test_runtime_fixes.py:150:16: BLE001 Do not catch blind exception: `Exception`
    |
148 |             if test_func():
149 |                 passed += 1
150 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
151 |             print(f"✗ Test {test_func.__name__} crashed: {e}")
    |

tests/test_safe_submit_order.py:31:12: BLE001 Do not catch blind exception: `Exception`
   |
29 |         else:
30 |             assert order is None  # Acceptable in degraded mode
31 |     except Exception:
   |            ^^^^^^^^^ BLE001
32 |         # If imports fail due to missing dependencies, the test still passes
33 |         # as we've verified the core import structure works
   |

tests/test_short_selling_implementation.py:102:32: BLE001 Do not catch blind exception: `Exception`
    |
100 |                         try:
101 |                             result = engine.execute_order("AAPL", 10, "sell_short")
102 |                         except Exception:
    |                                ^^^^^^^^^ BLE001
103 |                             # Expected to reach this point, meaning it passed the initial validation
104 |                             pass
    |

tests/test_signals.py:10:1: E402 Module level import not at top of file
   |
 8 | np.random.seed(0)
 9 |
10 | from ai_trading.signals import GaussianHMM, detect_market_regime_hmm
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

tests/test_staleness_guard.py:41:16: BLE001 Do not catch blind exception: `Exception`
   |
39 |             _ensure_data_fresh(mock_fetcher, ["AAPL"], max_age_seconds=300)
40 |             success = True
41 |         except Exception:
   |                ^^^^^^^^^ BLE001
42 |             success = False
   |

tests/test_staleness_guard.py:190:20: BLE001 Do not catch blind exception: `Exception`
    |
188 |                 _ensure_data_fresh(mock_fetcher, ["AAPL"], max_age_seconds=300)
189 |                 success = True
190 |             except Exception:
    |                    ^^^^^^^^^ BLE001
191 |                 success = False
192 |             assert success, "Should handle both timezone-aware and naive timestamps"
    |

tests/test_strategies_module.py:62:1: E402 Module level import not at top of file
   |
60 | sys.modules["finnhub"] = finnhub_stub
61 |
62 | from ai_trading.core.bot_engine import get_strategies
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
63 | from ai_trading.config import settings as settings_module
   |

tests/test_strategies_module.py:63:1: E402 Module level import not at top of file
   |
62 | from ai_trading.core.bot_engine import get_strategies
63 | from ai_trading.config import settings as settings_module
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

tests/test_strategy_components.py:47:83: F401 `ai_trading.strategies.multi_timeframe.SignalStrength` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
45 |     """Test multi-timeframe analysis functionality."""
46 |     try:
47 |         from ai_trading.strategies.multi_timeframe import MultiTimeframeAnalyzer, SignalStrength, SignalDirection
   |                                                                                   ^^^^^^^^^^^^^^ F401
48 |         from ai_trading.core.enums import TimeFrame
   |
   = help: Remove unused import

tests/test_strategy_components.py:47:99: F401 `ai_trading.strategies.multi_timeframe.SignalDirection` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
45 |     """Test multi-timeframe analysis functionality."""
46 |     try:
47 |         from ai_trading.strategies.multi_timeframe import MultiTimeframeAnalyzer, SignalStrength, SignalDirection
   |                                                                                                   ^^^^^^^^^^^^^^^ F401
48 |         from ai_trading.core.enums import TimeFrame
   |
   = help: Remove unused import

tests/test_strategy_components.py:89:12: BLE001 Do not catch blind exception: `Exception`
   |
87 |         print("⚠ Multi-timeframe analyzer test skipped - module not available")
88 |         return True
89 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
90 |         print(f"✗ Multi-timeframe analyzer test failed: {e}")
91 |         return False
   |

tests/test_strategy_components.py:97:90: F401 `ai_trading.strategies.regime_detection.VolatilityRegime` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
95 |     """Test market regime detection functionality."""
96 |     try:
97 |         from ai_trading.strategies.regime_detection import RegimeDetector, MarketRegime, VolatilityRegime
   |                                                                                          ^^^^^^^^^^^^^^^^ F401
98 |         
99 |         # Create detector
   |
   = help: Remove unused import: `ai_trading.strategies.regime_detection.VolatilityRegime`

tests/test_strategy_components.py:137:12: BLE001 Do not catch blind exception: `Exception`
    |
135 |         print("⚠ Regime detector test skipped - module not available")
136 |         return True
137 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
138 |         print(f"✗ Regime detector test failed: {e}")
139 |         return False
    |

tests/test_strategy_components.py:194:12: BLE001 Do not catch blind exception: `Exception`
    |
192 |         print("⚠ Integrated strategy test skipped - module not available")
193 |         return True
194 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
195 |         print(f"✗ Integrated strategy test failed: {e}")
196 |         return False
    |

tests/test_strategy_components.py:251:12: BLE001 Do not catch blind exception: `Exception`
    |
249 |         print("⚠ Strategy performance scenarios test skipped - module not available")
250 |         return True
251 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
252 |         print(f"✗ Strategy performance scenarios test failed: {e}")
253 |         return False
    |

tests/test_strategy_components.py:302:12: BLE001 Do not catch blind exception: `Exception`
    |
300 |         print("\n\n⏹️  Tests interrupted by user")
301 |         exit(1)
302 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
303 |         print(f"\n\n💥 Test runner error: {e}")
304 |         exit(1)
    |

tests/test_stream_subscription_fix.py:111:24: BLE001 Do not catch blind exception: `Exception`
    |
109 |                         # Other AttributeErrors might be expected due to mocking
110 |                         success = True
111 |                 except Exception:
    |                        ^^^^^^^^^ BLE001
112 |                     # Other import errors are expected due to missing dependencies
113 |                     success = True
    |

tests/test_trigger_meta_learning_conversion.py:59:1: E402 Module level import not at top of file
   |
57 | sys.modules['config'] = MockConfig
58 |
59 | from ai_trading import meta_learning
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
60 |
61 | def test_trigger_meta_learning_conversion_pure_meta_format():
   |

tools/ci/gen_audit_artifacts.py:30:16: BLE001 Do not catch blind exception: `Exception`
   |
28 |         try:
29 |             text = p.read_text(encoding="utf-8", errors="ignore")
30 |         except Exception:
   |                ^^^^^^^^^ BLE001
31 |             continue
32 |         for name, rx in PATTERNS.items():
   |

tools/ci/gen_audit_artifacts.py:48:16: BLE001 Do not catch blind exception: `Exception`
   |
46 |         try:
47 |             compile(p.read_text(encoding="utf-8", errors="ignore"), srel, "exec")
48 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
49 |             errs.append({"file": srel, "error": repr(e)})
50 |     return errs
   |

tools/ci/guard_ast.py:65:16: BLE001 Do not catch blind exception: `Exception`
   |
63 |         try:
64 |             mod = cst.parse_module(py.read_text(encoding="utf-8"))
65 |         except Exception:
   |                ^^^^^^^^^ BLE001
66 |             continue
67 |         mod.visit(Visitor(py))
   |

tools/ci/list_shims.py:22:16: BLE001 Do not catch blind exception: `Exception`
   |
20 |         try:
21 |             text = p.read_text(encoding="utf-8", errors="ignore")
22 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
23 |             print(f"Error reading {p}: {e}")
24 |             continue
   |

tools/ci/list_targets.py:30:12: BLE001 Do not catch blind exception: `Exception`
   |
28 |     try:
29 |         text = p.read_text(encoding="utf-8")
30 |     except Exception:
   |            ^^^^^^^^^ BLE001
31 |         continue
32 |     lines = text.splitlines()
   |

tools/ci/unwrap_import_guards.py:39:13: F841 Local variable `body_end` is assigned to but never used
   |
37 |                 try_body_lines.append(lines[j])
38 |                 j += 1
39 |             body_end = j
   |             ^^^^^^^^ F841
40 |
41 |             # Check if next block is "except ImportError"
   |
   = help: Remove assignment to unused variable `body_end`

tools/ci/unwrap_import_guards.py:121:16: BLE001 Do not catch blind exception: `Exception`
    |
119 |                     continue
120 |             files += 1
121 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
122 |             print(f"Error processing {p.relative_to(ROOT)}: {e}")
123 |             continue
    |

tools/codemods/codemod_io_safety_yaml.py:83:21: F841 Local variable `has_shell_false` is assigned to but never used
   |
81 |                     has_timeout = True
82 |                 if "shell=False" in check_line:
83 |                     has_shell_false = True
   |                     ^^^^^^^^^^^^^^^ F841
84 |
85 |             # Add missing parameters
   |
   = help: Remove assignment to unused variable `has_shell_false`

tools/codemods/codemod_io_safety_yaml.py:226:12: BLE001 Do not catch blind exception: `Exception`
    |
224 |             return True
225 |
226 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
227 |         print(f"Error processing {filepath}: {e}")
228 |         return False
    |

tools/codemods/codemod_logging_time.py:126:12: BLE001 Do not catch blind exception: `Exception`
    |
124 |             return True
125 |
126 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
127 |         print(f"Error processing {filepath}: {e}")
128 |         return False
    |

tools/codemods/remove_import_guards.py:54:12: BLE001 Do not catch blind exception: `Exception`
   |
52 |             p.write_text(new.code, encoding="utf-8")
53 |             return True
54 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
55 |         print(f"Error transforming {p}: {e}")
56 |     return False
   |

tools/codemods/replace_eval_exec.py:46:16: BLE001 Do not catch blind exception: `Exception`
   |
44 |                 changed_files += 1
45 |                 print(f"Replaced eval/exec in: {p}")
46 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
47 |             print(f"Error processing {p}: {e}")
48 |     print(f"eval/exec replacements: changed {changed_files} files")
   |

tools/codemods/strip_config_magic.py:47:16: BLE001 Do not catch blind exception: `Exception`
   |
45 |                 CFG_INIT.write_text(new.code, encoding="utf-8")
46 |                 print(f"Removed __getattr__ from: {CFG_INIT}")
47 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
48 |             print(f"Error processing {CFG_INIT}: {e}")
   |

tools/codemods/strip_config_magic.py:62:16: BLE001 Do not catch blind exception: `Exception`
   |
60 |                 management.write_text(new.code, encoding="utf-8")
61 |                 print(f"Removed __getattr__ from: {management}")
62 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
63 |             print(f"Error processing {management}: {e}")
   |

tools/fix_import_time.py:109:16: BLE001 Do not catch blind exception: `Exception`
    |
107 |         try:
108 |             if patch_file(py): changed += 1
109 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
110 |             print(f"PATCH_FAIL {py}: {e}")
111 |     print(f"Done. Files changed: {changed}")
    |

tools/import_contract.py:25:5: F841 Local variable `simulate` is assigned to but never used
   |
24 |     # Allow tests to simulate a hang without touching real modules
25 |     simulate = "IMPORT_CONTRACT_SIMULATE_HANG" in env
   |     ^^^^^^^^ F841
26 |
27 |     # Build a tiny Python snippet that imports the module; optionally sleeps to simulate hang
   |
   = help: Remove assignment to unused variable `simulate`

tools/package_health.py:17:12: BLE001 Do not catch blind exception: `Exception`
   |
15 |         print("[health] psutil: ok")
16 |         return True
17 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
18 |         print("[health] psutil: MISSING ->", e)
19 |         return False
   |

tools/package_health.py:29:12: BLE001 Do not catch blind exception: `Exception`
   |
27 |         print(f"[health] alpaca_trade_api: ok (version={ver})")
28 |         return True
29 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
30 |         print("[health] alpaca_trade_api: MISSING ->", e)
31 |         return False
   |

tools/package_health.py:40:12: BLE001 Do not catch blind exception: `Exception`
   |
38 |         print("[health] strategy_allocator: ok")
39 |         return True
40 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
41 |         print("[health] strategy_allocator: MISSING/INVALID ->", e)
42 |         return False
   |

tools/package_health.py:51:12: BLE001 Do not catch blind exception: `Exception`
   |
49 |         import pytest_asyncio  # type: ignore  # noqa: F401
50 |         print("[health] pytest-asyncio: ok")
51 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
52 |         ok = False
53 |         print("[health] pytest-asyncio: MISSING ->", e)
   |

tools/package_health.py:57:12: BLE001 Do not catch blind exception: `Exception`
   |
55 |         import anyio  # type: ignore  # noqa: F401
56 |         print("[health] anyio: ok")
57 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
58 |         ok = False
59 |         print("[health] anyio: MISSING ->", e)
   |

tools/package_health.py:74:12: BLE001 Do not catch blind exception: `Exception`
   |
72 |         import joblib  # noqa
73 |         print('[health] joblib: ok')
74 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
75 |         print('[health] joblib: MISSING ->', e)
   |

tools/package_health.py:93:12: BLE001 Do not catch blind exception: `Exception`
   |
91 |         import joblib  # noqa: F401
92 |         print("[health] joblib: ok")
93 |     except Exception as e:
   |            ^^^^^^^^^ BLE001
94 |         print("[health] joblib: MISSING ->", e)
95 |         return False
   |

Found 963 errors.
No fixes available (30 hidden fixes can be enabled with the `--unsafe-fixes` option).
