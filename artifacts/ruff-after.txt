E501 Line too long (113 > 100)
   --> ai_trading/broker/alpaca.py:200:101
    |
198 |     # ---------- Positions & Account ----------
199 |     def list_open_positions(self) -> list[Any]:
200 |         """Return open positions as objects with symbol/qty/avg_entry_price."""  # AI-AGENT-REF: attribute access
    |                                                                                                     ^^^^^^^^^^^^^
201 |         try:
202 |             if self._is_new:
    |

E501 Line too long (106 > 100)
   --> ai_trading/broker/alpaca.py:222:101
    |
220 |                 )
221 |                 positions.append(SimpleNamespace(symbol=sym, qty=qty, avg_entry_price=aep))
222 |             except (KeyError, AttributeError, TypeError, ValueError):  # AI-AGENT-REF: narrow parse errors
    |                                                                                                     ^^^^^^
223 |                 continue
224 |         return positions
    |

E501 Line too long (111 > 100)
  --> ai_trading/broker/alpaca_credentials.py:20:101
   |
20 | def resolve_alpaca_credentials(env: Mapping[str, str] | None = None, *, prefer: str = "ALPACA") -> Credentials:
   |                                                                                                     ^^^^^^^^^^^
21 |     env = dict(env or os.environ)
22 |     prefer = prefer.upper()
   |

E501 Line too long (127 > 100)
  --> ai_trading/broker/alpaca_credentials.py:27:101
   |
25 |         b = env.get(key_b)
26 |         if a and b and a != b:
27 |             log.warning("Conflicting credentials for %s vs %s; using %s", key_a, key_b, key_a if prefer == "ALPACA" else key_b)
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
28 |         return (a if prefer == "ALPACA" else b) or (b if prefer == "ALPACA" else a)
29 |     api_key = _pick("ALPACA_API_KEY", "APCA_API_KEY_ID")
   |

E501 Line too long (109 > 100)
  --> ai_trading/core/constants.py:21:101
   |
19 | # Risk management parameters - Optimized for higher profit potential
20 | RISK_PARAMETERS = {
21 |     "MAX_PORTFOLIO_RISK": 0.025,  # 2.5% max portfolio risk per trade (increased for higher profit potential)
   |                                                                                                     ^^^^^^^^^
22 |     "MAX_CORRELATION_EXPOSURE": 0.15,  # 15% max exposure to correlated assets (reduced for better diversification)
23 |     "MAX_SECTOR_CONCENTRATION": 0.15,  # 15% max exposure to single sector
   |

E501 Line too long (115 > 100)
  --> ai_trading/core/constants.py:22:101
   |
20 | RISK_PARAMETERS = {
21 |     "MAX_PORTFOLIO_RISK": 0.025,  # 2.5% max portfolio risk per trade (increased for higher profit potential)
22 |     "MAX_CORRELATION_EXPOSURE": 0.15,  # 15% max exposure to correlated assets (reduced for better diversification)
   |                                                                                                     ^^^^^^^^^^^^^^^
23 |     "MAX_SECTOR_CONCENTRATION": 0.15,  # 15% max exposure to single sector
24 |     "MIN_LIQUIDITY_THRESHOLD": 1000000,  # $1M minimum daily volume
   |

E501 Line too long (104 > 100)
  --> ai_trading/core/constants.py:27:101
   |
25 |     "MAX_POSITION_SIZE": 0.25,  # 25% max position size
26 |     "STOP_LOSS_MULTIPLIER": 1.8,  # 1.8x ATR for stop loss (tightened for capital preservation)
27 |     "TAKE_PROFIT_MULTIPLIER": 2.5,  # 2.5x ATR for take profit (reduced for more frequent profit taking)
   |                                                                                                     ^^^^
28 | }
   |

E501 Line too long (125 > 100)
  --> ai_trading/core/constants.py:33:101
   |
31 | KELLY_PARAMETERS = {
32 |     "MIN_SAMPLE_SIZE": 20,  # Minimum trades for Kelly calculation (reduced for faster adaptation)
33 |     "MAX_KELLY_FRACTION": 0.30,  # Maximum Kelly fraction (30% - must be >= MAX_POSITION_SIZE for institutional requirements)
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
34 |     "CONFIDENCE_LEVEL": 0.90,  # Statistical confidence level (reduced for less conservative sizing)
35 |     "LOOKBACK_PERIODS": 252,  # Trading days for analysis
   |

E501 Line too long (105 > 100)
  --> ai_trading/core/constants.py:70:101
   |
68 | # Performance thresholds - Optimized for higher quality strategies
69 | PERFORMANCE_THRESHOLDS = {
70 |     "MIN_SHARPE_RATIO": 1.2,  # Minimum acceptable Sharpe ratio (increased for higher quality strategies)
   |                                                                                                     ^^^^^
71 |     "MAX_DRAWDOWN": 0.15,  # Maximum acceptable drawdown (15% for conservative risk management)
72 |     "MIN_WIN_RATE": 0.48,  # Minimum win rate threshold (increased for quality trade filtering)
   |

E501 Line too long (108 > 100)
   --> ai_trading/core/parameter_validator.py:162:101
    |
160 |                     result["status"] = "FAIL"
161 |                     result["violations"].append(
162 |                         f"{parameter_name} value {new_value} outside safe bounds [{min_bound}, {max_bound}]"
    |                                                                                                     ^^^^^^^^
163 |                     )
    |

E501 Line too long (111 > 100)
   --> ai_trading/core/parameter_validator.py:345:101
    |
343 |     logger.info("Kelly Criterion optimizations:")
344 |     logger.info(
345 |         f"  MAX_KELLY_FRACTION: 0.25 → {KELLY_PARAMETERS['MAX_KELLY_FRACTION']} (better risk-adjusted returns)"
    |                                                                                                     ^^^^^^^^^^^
346 |     )
347 |     logger.info(
    |

E501 Line too long (103 > 100)
   --> ai_trading/core/parameter_validator.py:351:101
    |
349 |     )
350 |     logger.info(
351 |         f"  CONFIDENCE_LEVEL: 0.95 → {KELLY_PARAMETERS['CONFIDENCE_LEVEL']} (less conservative sizing)"
    |                                                                                                     ^^^
352 |     )
    |

E501 Line too long (105 > 100)
   --> ai_trading/core/parameter_validator.py:356:101
    |
354 |     logger.info("Risk management optimizations:")
355 |     logger.info(
356 |         f"  MAX_PORTFOLIO_RISK: 0.02 → {RISK_PARAMETERS['MAX_PORTFOLIO_RISK']} (higher profit potential)"
    |                                                                                                     ^^^^^
357 |     )
358 |     logger.info(
    |

E501 Line too long (110 > 100)
   --> ai_trading/core/parameter_validator.py:359:101
    |
357 |     )
358 |     logger.info(
359 |         f"  MAX_POSITION_SIZE: 0.10 → {RISK_PARAMETERS['MAX_POSITION_SIZE']} (increased for larger positions)"
    |                                                                                                     ^^^^^^^^^^
360 |     )
361 |     logger.info(
    |

E501 Line too long (105 > 100)
   --> ai_trading/core/parameter_validator.py:362:101
    |
360 |     )
361 |     logger.info(
362 |         f"  STOP_LOSS_MULTIPLIER: 2.0 → {RISK_PARAMETERS['STOP_LOSS_MULTIPLIER']} (capital preservation)"
    |                                                                                                     ^^^^^
363 |     )
364 |     logger.info(
    |

E501 Line too long (111 > 100)
   --> ai_trading/core/parameter_validator.py:365:101
    |
363 |     )
364 |     logger.info(
365 |         f"  TAKE_PROFIT_MULTIPLIER: 3.0 → {RISK_PARAMETERS['TAKE_PROFIT_MULTIPLIER']} (frequent profit taking)"
    |                                                                                                     ^^^^^^^^^^^
366 |     )
367 |     logger.info(
    |

E501 Line too long (116 > 100)
   --> ai_trading/core/parameter_validator.py:368:101
    |
366 |     )
367 |     logger.info(
368 |         f"  MAX_CORRELATION_EXPOSURE: 0.20 → {RISK_PARAMETERS['MAX_CORRELATION_EXPOSURE']} (better diversification)"
    |                                                                                                     ^^^^^^^^^^^^^^^^
369 |     )
    |

E501 Line too long (105 > 100)
   --> ai_trading/core/parameter_validator.py:376:101
    |
374 |     )
375 |     logger.info(
376 |         f"  MAX_SLIPPAGE_BPS: 20 → {EXECUTION_PARAMETERS['MAX_SLIPPAGE_BPS']} (better execution quality)"
    |                                                                                                     ^^^^^
377 |     )
378 |     logger.info(
    |

E501 Line too long (109 > 100)
   --> ai_trading/core/parameter_validator.py:379:101
    |
377 |     )
378 |     logger.info(
379 |         f"  ORDER_TIMEOUT_SECONDS: 300 → {EXECUTION_PARAMETERS['ORDER_TIMEOUT_SECONDS']} (faster adaptation)"
    |                                                                                                     ^^^^^^^^^
380 |     )
    |

E501 Line too long (109 > 100)
   --> ai_trading/core/parameter_validator.py:384:101
    |
382 |     logger.info("Performance threshold optimizations:")
383 |     logger.info(
384 |         f"  MIN_SHARPE_RATIO: 1.0 → {PERFORMANCE_THRESHOLDS['MIN_SHARPE_RATIO']} (higher quality strategies)"
    |                                                                                                     ^^^^^^^^^
385 |     )
386 |     logger.info(
    |

E501 Line too long (104 > 100)
   --> ai_trading/core/parameter_validator.py:387:101
    |
385 |     )
386 |     logger.info(
387 |         f"  MAX_DRAWDOWN: 0.20 → {PERFORMANCE_THRESHOLDS['MAX_DRAWDOWN']} (better capital preservation)"
    |                                                                                                     ^^^^
388 |     )
389 |     logger.info(
    |

E501 Line too long (109 > 100)
 --> ai_trading/core/protocols.py:7:101
  |
6 | class AllocatorProtocol(Protocol):
7 |     def allocate(self, signals: Sequence[Mapping[str, Any]], runtime: "BotRuntime") -> Mapping[str, Any]: ...
  |                                                                                                     ^^^^^^^^^
  |

W293 Blank line contains whitespace
  --> ai_trading/core/runtime.py:55:1
   |
53 |     """
54 |     Standardized runtime context for the trading bot.
55 |     
   | ^^^^
56 |     Provides consistent access to configuration and runtime parameters
57 |     required by the trading loop and related components.
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/core/runtime.py:80:1
   |
78 |     """
79 |     Build a runtime context from trading configuration.
80 |     
   | ^^^^
81 |     Ensures all required parameters are populated from TradingConfig with 
82 |     explicit defaults as specified in the problem statement.
   |
help: Remove whitespace from blank line

W291 Trailing whitespace
  --> ai_trading/core/runtime.py:81:74
   |
79 |     Build a runtime context from trading configuration.
80 |     
81 |     Ensures all required parameters are populated from TradingConfig with 
   |                                                                          ^
82 |     explicit defaults as specified in the problem statement.
   |
help: Remove trailing whitespace

W293 Blank line contains whitespace
  --> ai_trading/core/runtime.py:83:1
   |
81 |     Ensures all required parameters are populated from TradingConfig with 
82 |     explicit defaults as specified in the problem statement.
83 |     
   | ^^^^
84 |     Args:
85 |         cfg: Trading configuration object
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/core/runtime.py:86:1
   |
84 |     Args:
85 |         cfg: Trading configuration object
86 |         
   | ^^^^^^^^
87 |     Returns:
88 |         BotRuntime with fully populated params dict
   |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> ai_trading/core/runtime.py:100:101
    |
100 | def enhance_runtime_with_context(runtime: BotRuntime, lazy_context: Any, **kwargs: Any) -> BotRuntime:
    |                                                                                                     ^^
101 |     """
102 |     Enhance runtime with attributes from LazyBotContext after initialization.
    |

W293 Blank line contains whitespace
   --> ai_trading/core/runtime.py:103:1
    |
101 |     """
102 |     Enhance runtime with attributes from LazyBotContext after initialization.
103 |     
    | ^^^^
104 |     Args:
105 |         runtime: BotRuntime to enhance
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/core/runtime.py:107:1
    |
105 |         runtime: BotRuntime to enhance
106 |         lazy_context: Initialized LazyBotContext
107 |         
    | ^^^^^^^^
108 |     Returns:
109 |         Enhanced runtime with context attributes
    |
help: Remove whitespace from blank line

E501 Line too long (110 > 100)
  --> ai_trading/data/bars.py:39:101
   |
37 | """AI-AGENT-REF: canonicalizers moved to ai_trading.logging.normalize"""
38 | # AI-AGENT-REF: canonical fallback payload builder
39 | def _format_fallback_payload(tf_str: str, feed_str: str, start_utc: datetime, end_utc: datetime) -> list[str]:
   |                                                                                                     ^^^^^^^^^^
40 |     s = start_utc.astimezone(UTC).isoformat()
41 |     e = end_utc.astimezone(UTC).isoformat()
   |

E501 Line too long (101 > 100)
  --> ai_trading/data/bars.py:46:101
   |
45 | # AI-AGENT-REF: debug helper mapping ET window to UTC
46 | def _log_fallback_window_debug(logger, day_et: date, start_utc: datetime, end_utc: datetime) -> None:
   |                                                                                                     ^
47 |     try:
48 |         logger.debug(
   |

E501 Line too long (109 > 100)
  --> ai_trading/data/bars.py:53:101
   |
51 |                 "et_day": day_et.isoformat(),
52 |                 "rth_et": "09:30-16:00",
53 |                 "rth_utc": f"{start_utc.astimezone(UTC).isoformat()}..{end_utc.astimezone(UTC).isoformat()}",
   |                                                                                                     ^^^^^^^^^
54 |             },
55 |         )
   |

E741 Ambiguous variable name: `l`
   --> ai_trading/data/bars.py:305:9
    |
303 |         o = mkt["open"].resample("1D").first()
304 |         h = mkt["high"].resample("1D").max()
305 |         l = mkt["low"].resample("1D").min()
    |         ^
306 |         c = mkt["close"].resample("1D").last()
307 |         v = mkt.get("volume")
    |

W293 Blank line contains whitespace
  --> ai_trading/data/corp_actions.py:36:1
   |
34 |         """
35 |         Calculate price adjustment factor for historical data.
36 |         
   | ^^^^^^^^
37 |         Returns:
38 |             Factor to multiply historical prices by
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/corp_actions.py:56:1
   |
54 |         """
55 |         Calculate volume adjustment factor for historical data.
56 |         
   | ^^^^^^^^
57 |         Returns:
58 |             Factor to multiply historical volumes by
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/corp_actions.py:74:1
   |
72 |         """
73 |         Initialize corporate action registry.
74 |         
   | ^^^^^^^^
75 |         Args:
76 |             data_path: Path to store corporate action data
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:148:1
    |
146 |         """
147 |         Add corporate action to registry.
148 |         
    | ^^^^^^^^
149 |         Args:
150 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:191:1
    |
189 |         """
190 |         Get corporate actions for symbol within date range.
191 |         
    | ^^^^^^^^
192 |         Args:
193 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:196:1
    |
194 |             start_date: Start date (inclusive)
195 |             end_date: End date (inclusive)
196 |             
    | ^^^^^^^^^^^^
197 |         Returns:
198 |             List of CorporateAction objects
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:223:1
    |
221 |         """
222 |         Get cumulative adjustment factors between two dates.
223 |         
    | ^^^^^^^^
224 |         Args:
225 |             symbol: Trading symbol  
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> ai_trading/data/corp_actions.py:225:35
    |
224 |         Args:
225 |             symbol: Trading symbol  
    |                                   ^^
226 |             reference_date: Reference date (usually more recent)
227 |             target_date: Target date to adjust to
    |
help: Remove trailing whitespace

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:228:1
    |
226 |             reference_date: Reference date (usually more recent)
227 |             target_date: Target date to adjust to
228 |             
    | ^^^^^^^^^^^^
229 |         Returns:
230 |             Tuple of (price_factor, volume_factor)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:283:1
    |
281 |     """
282 |     Adjust OHLCV bars for corporate actions.
283 |     
    | ^^^^
284 |     Args:
285 |         bars: DataFrame with OHLCV data and datetime index
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:288:1
    |
286 |         symbol: Trading symbol
287 |         reference_date: Reference date for adjustments (defaults to most recent)
288 |         
    | ^^^^^^^^
289 |     Returns:
290 |         DataFrame with adjusted OHLCV data
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:346:1
    |
344 |     """
345 |     Apply adjustment factor to a price.
346 |     
    | ^^^^
347 |     Args:
348 |         price: Original price
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:350:1
    |
348 |         price: Original price
349 |         factor: Adjustment factor
350 |         
    | ^^^^^^^^
351 |     Returns:
352 |         Adjusted price
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/labels.py:24:1
   |
22 |     """
23 |     Calculate fixed horizon future returns net of fees.
24 |     
   | ^^^^
25 |     Args:
26 |         prices: Price series or DataFrame with price column
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/labels.py:29:1
   |
27 |         horizon_bars: Number of bars to look ahead
28 |         fee_bps: Transaction fee in basis points (e.g., 5.0 for 5 bps)
29 |         
   | ^^^^^^^^
30 |     Returns:
31 |         Series of future log returns net of fees
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/labels.py:76:1
   |
74 |     """
75 |     Triple barrier labeling method.
76 |     
   | ^^^^
77 |     This is a stub implementation with proper API structure.
78 |     Full implementation would require advanced barrier calibration.
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/labels.py:79:1
   |
77 |     This is a stub implementation with proper API structure.
78 |     Full implementation would require advanced barrier calibration.
79 |     
   | ^^^^
80 |     Args:
81 |         prices: Price series or DataFrame
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/labels.py:88:1
   |
86 |         num_threads: Number of threads for parallel processing
87 |         vertical_barrier_times: Optional vertical barrier timestamps
88 |         
   | ^^^^^^^^
89 |     Returns:
90 |         DataFrame with labels: t1 (end time), ret (return), bin (label)
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/labels.py:211:1
    |
209 |     """
210 |     Calculate daily volatility for barrier calibration.
211 |     
    | ^^^^
212 |     Args:
213 |         prices: Price series
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/labels.py:215:1
    |
213 |         prices: Price series
214 |         span0: Span for EWMA calculation
215 |         
    | ^^^^^^^^
216 |     Returns:
217 |         Daily volatility series
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/sanitize.py:51:1
   |
49 |     """
50 |     Data sanitization pipeline for market data quality control.
51 |     
   | ^^^^
52 |     Provides comprehensive data cleaning including outlier detection,
53 |     volume filtering, stale data detection, and price validation.
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/sanitize.py:59:1
   |
57 |         """
58 |         Initialize data sanitizer.
59 |         
   | ^^^^^^^^
60 |         Args:
61 |             config: Sanitization configuration
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/sanitize.py:84:1
   |
82 |         """
83 |         Sanitize OHLCV bar data.
84 |         
   | ^^^^^^^^
85 |         Args:
86 |             bars: DataFrame with OHLCV data
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/sanitize.py:88:1
   |
86 |             bars: DataFrame with OHLCV data
87 |             symbol: Symbol for logging
88 |             
   | ^^^^^^^^^^^^
89 |         Returns:
90 |             Tuple of (cleaned_bars, sanitization_report)
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/sanitize.py:380:1
    |
378 |         """
379 |         Winsorize a series by capping extreme values.
380 |         
    | ^^^^^^^^
381 |         Args:
382 |             series: Series to winsorize
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/sanitize.py:384:1
    |
382 |             series: Series to winsorize
383 |             limits: (lower_percentile, upper_percentile) as decimals
384 |             
    | ^^^^^^^^^^^^
385 |         Returns:
386 |             Winsorized series
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/sanitize.py:439:1
    |
437 |     """
438 |     Convenience function to sanitize bars.
439 |     
    | ^^^^
440 |     Args:
441 |         bars: DataFrame with OHLCV data
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/sanitize.py:444:1
    |
442 |         symbol: Symbol for logging
443 |         config: Optional sanitization configuration
444 |         
    | ^^^^^^^^
445 |     Returns:
446 |         Tuple of (cleaned_bars, sanitization_report)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/sanitize.py:459:1
    |
457 |     """
458 |     Winsorize specified columns of a DataFrame.
459 |     
    | ^^^^
460 |     Args:
461 |         df: DataFrame to winsorize
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/sanitize.py:464:1
    |
462 |         columns: Columns to winsorize (None for all numeric columns)
463 |         limits: (lower_percentile, upper_percentile) as decimals
464 |         
    | ^^^^^^^^
465 |     Returns:
466 |         DataFrame with winsorized columns
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/splits.py:24:1
   |
22 |     """
23 |     Time series cross-validation with purging and embargo.
24 |     
   | ^^^^
25 |     Ensures no data leakage by purging observations that overlap
26 |     with the test set timeline and applying embargo periods.
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/splits.py:38:1
   |
36 |         """
37 |         Initialize purged group time series split.
38 |         
   | ^^^^^^^^
39 |         Args:
40 |             n_splits: Number of splits
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/splits.py:59:1
   |
57 |         """
58 |         Generate indices for train/test splits.
59 |         
   | ^^^^^^^^
60 |         Args:
61 |             X: Feature matrix
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/splits.py:65:1
   |
63 |             groups: Group labels (optional, uses index if not provided)
64 |             t1: End times for each observation (for proper purging)
65 |             
   | ^^^^^^^^^^^^
66 |         Yields:
67 |             Tuple of (train_indices, test_indices)
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/splits.py:153:1
    |
151 |         """
152 |         Purge training observations that overlap with test period.
153 |         
    | ^^^^^^^^
154 |         Args:
155 |             train_indices: Training indices
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> ai_trading/data/splits.py:156:39
    |
154 |         Args:
155 |             train_indices: Training indices
156 |             test_indices: Test indices  
    |                                       ^^
157 |             t1: End times for each observation
158 |             full_index: Full index of the dataset
    |
help: Remove trailing whitespace

W293 Blank line contains whitespace
   --> ai_trading/data/splits.py:159:1
    |
157 |             t1: End times for each observation
158 |             full_index: Full index of the dataset
159 |             
    | ^^^^^^^^^^^^
160 |         Returns:
161 |             Purged training indices
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/splits.py:224:1
    |
222 |     """
223 |     Generate walk-forward analysis splits.
224 |     
    | ^^^^
225 |     Args:
226 |         dates: Timeline of dates for analysis
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> ai_trading/data/splits.py:229:58
    |
227 |         mode: 'rolling' or 'anchored' walk-forward
228 |         train_span: Training period length (days or timedelta)
229 |         test_span: Test period length (days or timedelta)  
    |                                                          ^^
230 |         embargo_pct: Embargo period as fraction of training period
    |
help: Remove trailing whitespace

W293 Blank line contains whitespace
   --> ai_trading/data/splits.py:231:1
    |
229 |         test_span: Test period length (days or timedelta)  
230 |         embargo_pct: Embargo period as fraction of training period
231 |         
    | ^^^^^^^^
232 |     Returns:
233 |         List of split dictionaries with train/test periods
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/splits.py:311:1
    |
309 |     """
310 |     Validate that there's no data leakage between train and test sets.
311 |     
    | ^^^^
312 |     Args:
313 |         train_indices: Training set indices
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/splits.py:317:1
    |
315 |         timeline: Timeline of observations
316 |         t1: End times for each observation
317 |         
    | ^^^^^^^^
318 |     Returns:
319 |         True if no leakage detected, False otherwise
    |
help: Remove whitespace from blank line

E501 Line too long (105 > 100)
   --> ai_trading/data/splits.py:343:101
    |
341 | …                     obs_end = t1.iloc[train_idx]
342 | …                     if pd.notna(obs_end) and obs_end >= min_test_time:
343 | …                         logger.error(f"Training observation {train_idx} ends in test period")
    |                                                                                           ^^^^^
344 | …                         return False
    |

E501 Line too long (111 > 100)
  --> ai_trading/data/universe.py:26:101
   |
24 |     path = locate_tickers_csv()
25 |     if not path:
26 |         logger.error("TICKERS_FILE_MISSING", extra={"path": "ai_trading/data/tickers.csv", "fallback": "none"})
   |                                                                                                     ^^^^^^^^^^^
27 |         return []
28 |     df = pd.read_csv(path)
   |

E501 Line too long (110 > 100)
   --> ai_trading/data_fetcher.py:118:101
    |
117 | def age_cached_minute_timestamps(max_age_seconds: int) -> int:
118 |     """Drop cache entries older than max_age_seconds (based on inserted time)."""  # AI-AGENT-REF: cache prune
    |                                                                                                     ^^^^^^^^^^
119 |     now_s = int(_dt.datetime.now(tz=UTC).timestamp())
120 |     to_del = [sym for sym, (_, ins) in _MINUTE_CACHE.items() if now_s - ins > max_age_seconds]
    |

E501 Line too long (109 > 100)
   --> ai_trading/data_fetcher.py:127:101
    |
126 | def last_minute_bar_age_seconds(symbol: str) -> int | None:
127 |     """Age in seconds of last cached minute bar for symbol, or None if absent."""  # AI-AGENT-REF: age helper
    |                                                                                                     ^^^^^^^^^
128 |     ts = get_cached_minute_timestamp(symbol)
129 |     if ts is None:
    |

E501 Line too long (101 > 100)
   --> ai_trading/data_fetcher.py:241:101
    |
239 |                 df.columns = df.columns.get_level_values(0)
240 |             else:
241 |                 df.columns = ["_".join([str(x) for x in tup if x is not None]) for tup in df.columns]
    |                                                                                                     ^
242 |         except (AttributeError, IndexError, TypeError):  # AI-AGENT-REF: narrow flatten errors
243 |             df.columns = ["_".join([str(x) for x in tup if x is not None]) for tup in df.columns]
    |

E501 Line too long (114 > 100)
   --> ai_trading/data_fetcher.py:448:101
    |
446 |                         )
447 |                         rdf = _resample_to_daily(mdf)
448 |                     except (ImportError, ValueError, TypeError, KeyError):  # AI-AGENT-REF: narrow resample errors
    |                                                                                                     ^^^^^^^^^^^^^^
449 |                         mdf = pd.DataFrame()
450 |                     else:
    |

E501 Line too long (101 > 100)
   --> ai_trading/data_fetcher.py:566:101
    |
564 |             if last_ts is not None:
565 |                 set_cached_minute_timestamp(symbol, last_ts)
566 |     except (ValueError, TypeError, KeyError, AttributeError):  # pragma: no cover - cache best effort
    |                                                                                                     ^
567 |         pass
    |

E501 Line too long (101 > 100)
   --> ai_trading/data_fetcher.py:640:101
    |
640 | def fetch_minute_yfinance(symbol: str, start_dt: _dt.datetime, end_dt: _dt.datetime) -> pd.DataFrame:
    |                                                                                                     ^
641 |     """Explicit helper for tests and optional direct Yahoo minute fetch."""  # AI-AGENT-REF
642 |     df = _yahoo_get_bars(symbol, start_dt, end_dt, interval="1m")
    |

E501 Line too long (105 > 100)
   --> ai_trading/execution/debug_tracker.py:161:101
    |
159 |                         "correlation_id": correlation_id,
160 |                         "phase": phase.value,
161 |                         "message": "Failed to acquire lock within timeout, logging without state update",
    |                                                                                                     ^^^^^
162 |                     },
163 |                 )
    |

E501 Line too long (112 > 100)
   --> ai_trading/execution/pnl_attributor.py:187:101
    |
185 |                     pnl_amount=position_change_pnl,
186 |                     source=PnLSource.POSITION_CHANGE,
187 |                     description=f"Realized PnL from selling {abs(qty_change)} shares at ~${avg_exit_price:.2f}",
    |                                                                                                     ^^^^^^^^^^^^
188 |                     position_qty=qty_change,
189 |                     price=avg_exit_price,
    |

E501 Line too long (111 > 100)
   --> ai_trading/execution/pnl_attributor.py:206:101
    |
204 |                 pnl_amount=market_movement_pnl,
205 |                 source=PnLSource.MARKET_MOVEMENT,
206 |                 description=f"Market movement PnL: ${price_change:.2f} price change on {base_quantity} shares",
    |                                                                                                     ^^^^^^^^^^^
207 |                 position_qty=base_quantity,
208 |                 price=price_change,
    |

E501 Line too long (115 > 100)
   --> ai_trading/execution/pnl_attributor.py:232:101
    |
230 |                 pnl_amount=realized_pnl,
231 |                 source=PnLSource.POSITION_CHANGE,
232 |                 description=f"Trade PnL: {trade_qty} shares @ ${execution_price:.2f} (cost basis ${avg_cost:.2f})",
    |                                                                                                     ^^^^^^^^^^^^^^^
233 |                 position_qty=trade_qty,
234 |                 price=execution_price,
    |

E501 Line too long (105 > 100)
   --> ai_trading/execution/production_engine.py:335:101
    |
333 |     def __str__(self) -> str:
334 |         """String representation of order request."""
335 |         return f"OrderRequest({self.side.value} {self.quantity} {self.symbol} @ {self.order_type.value})"
    |                                                                                                     ^^^^^
336 |
337 |     def __repr__(self) -> str:
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:103:1
    |
101 |     """
102 |     Sophisticated transaction cost calculator with market impact modeling.
103 |     
    | ^^^^
104 |     Provides detailed cost analysis including spread, commission, market impact,
105 |     and opportunity costs. Validates trade profitability with safety margins.
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:115:1
    |
113 |         """
114 |         Initialize transaction cost calculator.
115 |         
    | ^^^^^^^^
116 |         Args:
117 |             commission_rate: Commission rate as decimal (e.g., 0.0001 = 1bp)
    |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
   --> ai_trading/execution/transaction_costs.py:122:101
    |
120 |             safety_margin_multiplier: Required safety margin over costs
121 |         """
122 |         self.commission_rate = _bounded_rate("commission_rate", commission_rate)  # AI-AGENT-REF: validate rate
    |                                                                                                     ^^^^^^^^^^^
123 |         self.min_commission = _finite_nonneg("min_commission", min_commission)  # AI-AGENT-REF: validate min
124 |         self.max_commission = _finite_nonneg("max_commission", max_commission)  # AI-AGENT-REF: validate max
    |

E501 Line too long (108 > 100)
   --> ai_trading/execution/transaction_costs.py:123:101
    |
121 | …     """
122 | …     self.commission_rate = _bounded_rate("commission_rate", commission_rate)  # AI-AGENT-REF: validate rate
123 | …     self.min_commission = _finite_nonneg("min_commission", min_commission)  # AI-AGENT-REF: validate min
    |                                                                                                   ^^^^^^^^
124 | …     self.max_commission = _finite_nonneg("max_commission", max_commission)  # AI-AGENT-REF: validate max
125 | …     self.safety_margin_multiplier = _finite_pos("safety_margin_multiplier", safety_margin_multiplier)  # AI-AGENT-REF: validate saf…
    |

E501 Line too long (108 > 100)
   --> ai_trading/execution/transaction_costs.py:124:101
    |
122 | …     self.commission_rate = _bounded_rate("commission_rate", commission_rate)  # AI-AGENT-REF: validate rate
123 | …     self.min_commission = _finite_nonneg("min_commission", min_commission)  # AI-AGENT-REF: validate min
124 | …     self.max_commission = _finite_nonneg("max_commission", max_commission)  # AI-AGENT-REF: validate max
    |                                                                                                   ^^^^^^^^
125 | …     self.safety_margin_multiplier = _finite_pos("safety_margin_multiplier", safety_margin_multiplier)  # AI-AGENT-REF: validate saf…
    |

E501 Line too long (145 > 100)
   --> ai_trading/execution/transaction_costs.py:125:101
    |
123 | …ion", min_commission)  # AI-AGENT-REF: validate min
124 | …ion", max_commission)  # AI-AGENT-REF: validate max
125 | …ty_margin_multiplier", safety_margin_multiplier)  # AI-AGENT-REF: validate safety margin
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
126 | …
127 | …
    |

E501 Line too long (103 > 100)
   --> ai_trading/execution/transaction_costs.py:140:101
    |
138 |         }
139 |
140 |         _log.info(f"TransactionCostCalculator initialized with commission_rate={commission_rate:.4f}, "
    |                                                                                                     ^^^
141 |                    f"safety_margin={safety_margin_multiplier}x")
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:149:1
    |
147 |         """
148 |         Calculate bid-ask spread cost for a trade.
149 |         
    | ^^^^^^^^
150 |         Args:
151 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:154:1
    |
152 |             trade_size: Number of shares to trade (positive for buy, negative for sell)
153 |             market_data: Market data including bid/ask prices
154 |             
    | ^^^^^^^^^^^^
155 |         Returns:
156 |             Spread cost in dollars
    |
help: Remove whitespace from blank line

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:187:101
    |
185 |             return spread_cost
186 |
187 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
188 |             _log.error(
189 |                 "SPREAD_COST_FAILED",
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:202:1
    |
200 |         """
201 |         Calculate broker commission for a trade.
202 |         
    | ^^^^^^^^
203 |         Args:
204 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:207:1
    |
205 |             trade_size: Number of shares to trade
206 |             trade_value: Dollar value of trade
207 |             
    | ^^^^^^^^^^^^
208 |         Returns:
209 |             Commission cost in dollars
    |
help: Remove whitespace from blank line

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:223:101
    |
221 |             return commission
222 |
223 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
224 |             _log.error(
225 |                 "COMMISSION_CALC_FAILED",
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:236:1
    |
234 |         """
235 |         Calculate market impact cost using sophisticated modeling.
236 |         
    | ^^^^^^^^
237 |         Args:
238 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:241:1
    |
239 |             trade_size: Number of shares to trade
240 |             market_data: Market data including volume, volatility
241 |             
    | ^^^^^^^^^^^^
242 |         Returns:
243 |             Tuple of (temporary_impact, permanent_impact) in dollars
    |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> ai_trading/execution/transaction_costs.py:261:101
    |
259 |             # Market impact model: combination of linear and square root terms
260 |             linear_impact = self.impact_model_params['linear_coefficient'] * participation_rate
261 |             sqrt_impact = self.impact_model_params['sqrt_coefficient'] * math.sqrt(participation_rate)
    |                                                                                                     ^^
262 |
263 |             # Volatility adjustment
    |

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:283:101
    |
281 |             return temporary_impact, permanent_impact
282 |
283 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
284 |             _log.error(
285 |                 "MARKET_IMPACT_FAILED",
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:300:1
    |
298 |         """
299 |         Calculate opportunity cost from execution delay.
300 |         
    | ^^^^^^^^
301 |         Args:
302 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:306:1
    |
304 |             expected_return: Expected return rate per day
305 |             trade_value: Dollar value of trade
306 |             
    | ^^^^^^^^^^^^
307 |         Returns:
308 |             Opportunity cost in dollars
    |
help: Remove whitespace from blank line

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:325:101
    |
323 |             return opportunity_cost
324 |
325 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
326 |             _log.error(
327 |                 "OPPORTUNITY_COST_FAILED",
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:339:1
    |
337 |         """
338 |         Calculate borrowing cost for short selling.
339 |         
    | ^^^^^^^^
340 |         Args:
341 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:345:1
    |
343 |             trade_value: Dollar value of trade
344 |             holding_period_days: Expected holding period
345 |             
    | ^^^^^^^^^^^^
346 |         Returns:
347 |             Borrowing cost in dollars
    |
help: Remove whitespace from blank line

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:366:101
    |
364 |             return borrowing_cost
365 |
366 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
367 |             _log.error(
368 |                 "BORROWING_COST_FAILED",
    |

E501 Line too long (101 > 100)
   --> ai_trading/execution/transaction_costs.py:380:101
    |
378 |                                        expected_delay: float = 1.0,
379 |                                        expected_return: float = 0.0,
380 |                                        holding_period_days: float = 1.0) -> TransactionCostBreakdown:
    |                                                                                                     ^
381 |         """
382 |         Calculate comprehensive transaction cost breakdown.
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:383:1
    |
381 |         """
382 |         Calculate comprehensive transaction cost breakdown.
383 |         
    | ^^^^^^^^
384 |         Args:
385 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:392:1
    |
390 |             expected_return: Expected return rate
391 |             holding_period_days: Expected holding period for short sales
392 |             
    | ^^^^^^^^^^^^
393 |         Returns:
394 |             Detailed transaction cost breakdown
    |
help: Remove whitespace from blank line

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:398:101
    |
396 |         try:
397 |             trade_size_abs = _finite_pos("qty", abs(trade_size))  # AI-AGENT-REF: validate quantity
398 |             price = _finite_pos("price", market_data.get('prices', {}).get(symbol, 100.0))  # AI-AGENT-REF: validate price
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
399 |             trade_value = trade_size_abs * price
    |

E501 Line too long (116 > 100)
   --> ai_trading/execution/transaction_costs.py:408:101
    |
406 |             market_impact = temp_impact + perm_impact
407 |
408 |             opportunity_cost = self.calculate_opportunity_cost(symbol, expected_delay, expected_return, trade_value)
    |                                                                                                     ^^^^^^^^^^^^^^^^
409 |             borrowing_cost = self.calculate_borrowing_cost(symbol, trade_size, trade_value, holding_period_days)
    |

E501 Line too long (112 > 100)
   --> ai_trading/execution/transaction_costs.py:409:101
    |
408 |             opportunity_cost = self.calculate_opportunity_cost(symbol, expected_delay, expected_return, trade_value)
409 |             borrowing_cost = self.calculate_borrowing_cost(symbol, trade_size, trade_value, holding_period_days)
    |                                                                                                     ^^^^^^^^^^^^
410 |
411 |             # Adjust costs based on trade type
    |

E501 Line too long (101 > 100)
   --> ai_trading/execution/transaction_costs.py:420:101
    |
418 |                 opportunity_cost *= 0.5
419 |
420 |             total_cost = spread_cost + commission + market_impact + opportunity_cost + borrowing_cost
    |                                                                                                     ^
421 |             cost_per_share = total_cost / trade_size_abs
422 |             cost_percentage = total_cost / max(trade_value, 1)
    |

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:455:101
    |
453 |             return result
454 |
455 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
456 |             _log.error(
457 |                 "TX_COST_FAILED",
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:471:1
    |
469 |         """
470 |         Validate that trade meets profitability requirements with safety margins.
471 |         
    | ^^^^^^^^
472 |         Args:
473 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:479:1
    |
477 |             trade_type: Type of trade
478 |             confidence_level: Confidence in profit estimate
479 |             
    | ^^^^^^^^^^^^
480 |         Returns:
481 |             Comprehensive profitability analysis
    |
help: Remove whitespace from blank line

E501 Line too long (113 > 100)
   --> ai_trading/execution/transaction_costs.py:493:101
    |
491 |             # Calculate net profit and margins
492 |             net_expected_profit = expected_profit - transaction_cost
493 |             profit_margin = net_expected_profit / max(abs(expected_profit), 0.01) if expected_profit != 0 else -1
    |                                                                                                     ^^^^^^^^^^^^^
494 |             cost_ratio = transaction_cost / max(abs(expected_profit), 0.01) if expected_profit != 0 else float('inf')
    |

E501 Line too long (117 > 100)
   --> ai_trading/execution/transaction_costs.py:494:101
    |
492 |             net_expected_profit = expected_profit - transaction_cost
493 |             profit_margin = net_expected_profit / max(abs(expected_profit), 0.01) if expected_profit != 0 else -1
494 |             cost_ratio = transaction_cost / max(abs(expected_profit), 0.01) if expected_profit != 0 else float('inf')
    |                                                                                                     ^^^^^^^^^^^^^^^^^
495 |
496 |             # Calculate required safety margin
    |

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:535:101
    |
533 |             )  # AI-AGENT-REF: structured logging
534 |             raise KeyError(f"Required market data missing: {str(e)}")
535 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
536 |             _log.error(
537 |                 "PROFITABILITY_VALIDATION_FAILED",
    |

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:567:101
    |
565 |             return spread_estimates.get(liquidity_tier, 0.005)
566 |
567 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
568 |             _log.warning(
569 |                 "SPREAD_PERCENT_ESTIMATE_FAILED",
    |

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:590:101
    |
588 |                 return LiquidityTier.ILLIQUID
589 |
590 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
591 |             _log.warning(
592 |                 "LIQUIDITY_CLASSIFICATION_FAILED",
    |

E501 Line too long (106 > 100)
   --> ai_trading/execution/transaction_costs.py:599:101
    |
598 | # AI-AGENT-REF: Transaction cost analysis for portfolio optimization
599 | def create_transaction_cost_calculator(config: dict[str, Any] | None = None) -> TransactionCostCalculator:
    |                                                                                                     ^^^^^^
600 |     """
601 |     Factory function to create transaction cost calculator with configuration.
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:602:1
    |
600 |     """
601 |     Factory function to create transaction cost calculator with configuration.
602 |     
    | ^^^^
603 |     Args:
604 |         config: Optional configuration dictionary
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:605:1
    |
603 |     Args:
604 |         config: Optional configuration dictionary
605 |         
    | ^^^^^^^^
606 |     Returns:
607 |         Configured TransactionCostCalculator instance
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> ai_trading/governance/promotion.py:106:101
    |
104 |             if shadow_models:
105 |                 self.logger.warning(
106 |                     f"Strategy {strategy} already has shadow models: {[m[0] for m in shadow_models]}"
    |                                                                                                     ^
107 |                 )
    |

E501 Line too long (109 > 100)
   --> ai_trading/governance/promotion.py:200:101
    |
199 |             self.logger.debug(
200 |                 f"Updated shadow metrics for model {model_id}: {current_metrics.sessions_completed} sessions"
    |                                                                                                     ^^^^^^^^^
201 |             )
    |

E501 Line too long (101 > 100)
   --> ai_trading/health_monitor.py:476:101
    |
474 |             ):
475 |                 self._send_alert(
476 |                     f"CRITICAL: {component} has {checker.consecutive_failures} consecutive failures",
    |                                                                                                     ^
477 |                     latest_result,
478 |                 )
    |

E501 Line too long (105 > 100)
   --> ai_trading/logging/__init__.py:276:101
    |
274 |             ).strip()
275 |
276 |         return json.dumps(payload, default=self._json_default, ensure_ascii=False, separators=(',', ':'))
    |                                                                                                     ^^^^^
    |

E501 Line too long (109 > 100)
 --> ai_trading/logging/normalize.py:1:101
  |
1 | """Central helpers to canonicalize logging payload fields."""  # AI-AGENT-REF: shared normalization utilities
  |                                                                                                     ^^^^^^^^^
2 |
3 | from __future__ import annotations
  |

E501 Line too long (122 > 100)
  --> ai_trading/logging/normalize.py:38:101
   |
37 | def canon_feed(value: Any) -> str:
38 |     """Return canonical feed: "iex" or "sip". Defaults to "sip" on ambiguity."""  # AI-AGENT-REF: unify feed normalization
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
39 |
40 |     s = _as_lower_str(value)
   |

E501 Line too long (136 > 100)
  --> ai_trading/logging/normalize.py:49:101
   |
48 | … -> dict:
49 | …timeframe if present."""  # AI-AGENT-REF: ensure logging extras use canonical values
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
50 | …
51 | …
   |

E501 Line too long (112 > 100)
   --> ai_trading/main.py:109:101
    |
108 | def _get_int_env(var: str, default: int | None = None) -> int | None:
109 |     """Parse integer from environment. Return default on missing/invalid."""  # AI-AGENT-REF: env parsing helper
    |                                                                                                     ^^^^^^^^^^^^
110 |     val = os.getenv(var)
111 |     if val is None or val == "":
    |

E501 Line too long (122 > 100)
   --> ai_trading/main.py:393:101
    |
391 |         "capital_cap": float(getattr(S, "capital_cap", 0.0)),
392 |         "dollar_risk_limit": float(getattr(S, "dollar_risk_limit", 0.0)),
393 |         "max_position_mode": str(getattr(S, "max_position_mode", getattr(config, "max_position_mode", "STATIC"))).upper(),
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
394 |         "max_position_size": float(getattr(S, "max_position_size", 0.0)),
395 |     }
    |

E501 Line too long (104 > 100)
   --> ai_trading/main.py:501:101
    |
499 |                     if gc_result.get("objects_collected", 0) > 100:
500 |                         logger.info(
501 |                             f"Cycle {count}: Garbage collected {gc_result['objects_collected']} objects"
    |                                                                                                     ^^^^
502 |                         )
    |

E501 Line too long (119 > 100)
   --> ai_trading/main.py:538:101
    |
536 |             # AI-AGENT-REF: periodic AUTO sizing refresh
537 |             try:
538 |                 mode_now = str(getattr(S, "max_position_mode", getattr(config, "max_position_mode", "STATIC"))).upper()
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^
539 |                 if mode_now == "AUTO":
540 |                     resolved_size, meta = resolve_max_position_size(config, S, force_refresh=False)
    |

E501 Line too long (103 > 100)
   --> ai_trading/model_registry.py:116:101
    |
114 |             if got != expected_dataset_fingerprint:
115 |                 raise ValueError(
116 |                     f"Dataset fingerprint mismatch: expected {expected_dataset_fingerprint}, got {got}"
    |                                                                                                     ^^^
117 |                 )
118 |         return model, meta
    |

E501 Line too long (107 > 100)
   --> ai_trading/monitoring/alerting.py:173:101
    |
171 |                 <p><strong>Source:</strong> {alert.source}</p>
172 |                 <p><strong>Time:</strong> {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')}</p>
173 |                 <div style="background-color: #f8f9fa; padding: 10px; border-radius: 4px; margin: 10px 0;">
    |                                                                                                     ^^^^^^^
174 |                     <pre style="margin: 0; white-space: pre-wrap;">{alert.message}</pre>
175 |                 </div>
    |

E501 Line too long (103 > 100)
   --> ai_trading/monitoring/alerting.py:186:101
    |
184 |                 html_body += f"""
185 |                     <tr>
186 |                         <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">{key}</td>
    |                                                                                                     ^^^
187 |                         <td style="border: 1px solid #ddd; padding: 8px;">{value}</td>
188 |                     </tr>
    |

E501 Line too long (101 > 100)
   --> ai_trading/monitoring/alerting.py:585:101
    |
583 |                     logger.error(f"Error processing alert: {e}")
584 |
585 |         except (RuntimeError, OSError, ValueError, TypeError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^
586 |             logger.error(f"Error in alert processing loop: {e}")
    |

E501 Line too long (115 > 100)
   --> ai_trading/monitoring/alerts.py:326:101
    |
324 |                     "max_drawdown",
325 |                     AlertSeverity.CRITICAL,
326 |                     f"Maximum drawdown {max_drawdown:.2%} exceeds threshold {self.thresholds['MAX_DRAWDOWN']:.2%}",
    |                                                                                                     ^^^^^^^^^^^^^^^
327 |                     value=max_drawdown,
328 |                     threshold=self.thresholds["MAX_DRAWDOWN"],
    |

E501 Line too long (111 > 100)
   --> ai_trading/monitoring/alerts.py:337:101
    |
335 |                     "sharpe_ratio",
336 |                     AlertSeverity.WARNING,
337 |                     f"Sharpe ratio {sharpe_ratio:.2f} below minimum {self.thresholds['MIN_SHARPE_RATIO']:.2f}",
    |                                                                                                     ^^^^^^^^^^^
338 |                     value=sharpe_ratio,
339 |                     threshold=self.thresholds["MIN_SHARPE_RATIO"],
    |

E501 Line too long (125 > 100)
   --> ai_trading/monitoring/alerts.py:371:101
    |
369 |                     f"position_concentration_{symbol}",
370 |                     AlertSeverity.WARNING,
371 |                     f"Position in {symbol} ({position_pct:.2%}) exceeds maximum {self.risk_params['MAX_POSITION_SIZE']:.2%}",
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
372 |                     symbol=symbol,
373 |                     value=position_pct,
    |

E501 Line too long (106 > 100)
   --> ai_trading/monitoring/alerts.py:418:101
    |
416 |                     "high_slippage",
417 |                     AlertSeverity.WARNING,
418 |                     f"Average slippage {avg_slippage_bps:.1f} bps exceeds maximum {max_slippage_bps} bps",
    |                                                                                                     ^^^^^^
419 |                     value=avg_slippage_bps,
420 |                     threshold=max_slippage_bps,
    |

W293 Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:137:1
    |
135 |     """
136 |     Comprehensive metrics collection for trading operations.
137 |     
    | ^^^^
138 |     Collects and tracks various performance metrics, system metrics,
139 |     and trading-related measurements for monitoring and analysis.
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> ai_trading/monitoring/metrics.py:156:101
    |
154 |         self.counters[key] += value
155 |
156 |     def observe_latency(self, name: str, latency_ms: float, labels: Optional[Dict[str, str]] = None):
    |                                                                                                     ^
157 |         """Record a latency observation."""
158 |         key = f"{name}_{hash(str(labels) if labels else '')}"
    |

W293 Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:213:1
    |
211 |     """
212 |     Unified performance monitoring for trading operations.
213 |     
    | ^^^^
214 |     Combines metrics collection with performance analysis and alerting.
215 |     This is the primary monitoring interface for the trading system.
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> ai_trading/monitoring/metrics.py:232:101
    |
230 |         self.metrics_collector.inc_counter(name, value, labels)
231 |
232 |     def observe_latency(self, name: str, latency_ms: float, labels: Optional[Dict[str, str]] = None):
    |                                                                                                     ^
233 |         """Record a latency observation."""
234 |         self.metrics_collector.observe_latency(name, latency_ms, labels)
    |

E501 Line too long (105 > 100)
   --> ai_trading/monitoring/metrics.py:277:101
    |
275 |             else:
276 |                 basic_metrics = {"sharpe": 0.0, "max_drawdown": 0.0}
277 |                 advanced_metrics = {"sortino": 0.0, "calmar": 0.0, "win_rate": 0.0, "profit_factor": 0.0}
    |                                                                                                     ^^^^^
278 |         else:
279 |             basic_metrics = {"sharpe": 0.0, "max_drawdown": 0.0}
    |

E501 Line too long (101 > 100)
   --> ai_trading/monitoring/metrics.py:280:101
    |
278 |         else:
279 |             basic_metrics = {"sharpe": 0.0, "max_drawdown": 0.0}
280 |             advanced_metrics = {"sortino": 0.0, "calmar": 0.0, "win_rate": 0.0, "profit_factor": 0.0}
    |                                                                                                     ^
281 |
282 |         # Combine with system metrics
    |

E501 Line too long (149 > 100)
  --> ai_trading/net/http.py:44:101
   |
42 | …
43 | …
44 | …DELETE", "HEAD", "OPTIONS", "PATCH"}),  # AI-AGENT-REF: frozenset for urllib3 compatibility
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 | …
46 | …
   |

W293 Blank line contains whitespace
  --> ai_trading/portfolio/optimizer.py:76:1
   |
74 |     """
75 |     Portfolio-Level Decision Engine for Churn Reduction.
76 |     
   | ^^^^
77 |     Implements sophisticated portfolio optimization that evaluates trades based on
78 |     their impact on overall portfolio performance rather than individual signals.
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/portfolio/optimizer.py:87:1
   |
85 |         """
86 |         Initialize portfolio optimizer.
87 |         
   | ^^^^^^^^
88 |         Args:
89 |             improvement_threshold: Minimum portfolio improvement required (2%+)
   |
help: Remove whitespace from blank line

E501 Line too long (109 > 100)
   --> ai_trading/portfolio/optimizer.py:108:101
    |
106 |         self.last_rebalance: datetime | None = None
107 |
108 |         logger.info(f"PortfolioOptimizer initialized with improvement_threshold={improvement_threshold:.1%}")
    |                                                                                                     ^^^^^^^^^
109 |
110 |     def calculate_portfolio_kelly_efficiency(self,
    |

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:116:1
    |
114 |         """
115 |         Calculate portfolio-level Kelly efficiency score.
116 |         
    | ^^^^^^^^
117 |         Args:
118 |             positions: Current position sizes {symbol: size}
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:121:1
    |
119 |             returns_data: Historical returns {symbol: [returns]}
120 |             current_prices: Current market prices {symbol: price}
121 |             
    | ^^^^^^^^^^^^
122 |         Returns:
123 |             Kelly efficiency score (0-1), higher is better
    |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
   --> ai_trading/portfolio/optimizer.py:130:101
    |
129 |             # Calculate portfolio returns
130 |             portfolio_returns = self._calculate_portfolio_returns(positions, returns_data, current_prices)
    |                                                                                                     ^^^^^^
131 |
132 |             if len(portfolio_returns) < 20:  # Minimum sample size
    |

E501 Line too long (106 > 100)
   --> ai_trading/portfolio/optimizer.py:147:101
    |
145 |             avg_loss = statistics.mean(negative_returns)
146 |
147 |             optimal_fraction = self.kelly_calculator.calculate_kelly_fraction(win_rate, avg_win, avg_loss)
    |                                                                                                     ^^^^^^
148 |
149 |             # Calculate current leverage vs optimal
    |

E501 Line too long (115 > 100)
   --> ai_trading/portfolio/optimizer.py:153:101
    |
151 |             efficiency = min(1.0, optimal_fraction / max(0.01, current_leverage))
152 |
153 |             logger.debug(f"Portfolio Kelly efficiency: {efficiency:.3f} (optimal_fraction={optimal_fraction:.3f})")
    |                                                                                                     ^^^^^^^^^^^^^^^
154 |             return efficiency
    |

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:199:1
    |
197 |         """
198 |         Calculate impact of adding/modifying position on portfolio correlations.
199 |         
    | ^^^^^^^^
200 |         Args:
201 |             new_symbol: Symbol being considered
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:204:1
    |
202 |             current_positions: Current portfolio positions
203 |             correlation_matrix: Correlation matrix between symbols
204 |             
    | ^^^^^^^^^^^^
205 |         Returns:
206 |             Correlation penalty (0-1), higher means more correlated
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:248:1
    |
246 |         """
247 |         Evaluate the impact of a proposed trade on portfolio performance.
248 |         
    | ^^^^^^^^
249 |         Args:
250 |             symbol: Symbol to trade
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:254:1
    |
252 |             current_positions: Current portfolio positions
253 |             market_data: Market data including prices, returns, correlations
254 |             
    | ^^^^^^^^^^^^
255 |         Returns:
256 |             Comprehensive trade impact analysis
    |
help: Remove whitespace from blank line

E501 Line too long (108 > 100)
   --> ai_trading/portfolio/optimizer.py:268:101
    |
267 |             # Calculate transaction cost
268 |             transaction_cost = self._estimate_transaction_cost(symbol, abs(position_change), current_prices)
    |                                                                                                     ^^^^^^^^
269 |
270 |             # Calculate correlation impact
    |

E501 Line too long (113 > 100)
   --> ai_trading/portfolio/optimizer.py:271:101
    |
270 |             # Calculate correlation impact
271 |             correlation_impact = self.calculate_correlation_impact(symbol, current_positions, correlation_matrix)
    |                                                                                                     ^^^^^^^^^^^^^
272 |
273 |             # Simulate new portfolio
    |

E501 Line too long (123 > 100)
   --> ai_trading/portfolio/optimizer.py:278:101
    |
277 |             # Calculate Kelly efficiency change
278 |             current_efficiency = self.calculate_portfolio_kelly_efficiency(current_positions, returns_data, current_prices)
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^
279 |             new_efficiency = self.calculate_portfolio_kelly_efficiency(new_positions, returns_data, current_prices)
280 |             kelly_efficiency_change = new_efficiency - current_efficiency
    |

E501 Line too long (115 > 100)
   --> ai_trading/portfolio/optimizer.py:279:101
    |
277 |             # Calculate Kelly efficiency change
278 |             current_efficiency = self.calculate_portfolio_kelly_efficiency(current_positions, returns_data, current_prices)
279 |             new_efficiency = self.calculate_portfolio_kelly_efficiency(new_positions, returns_data, current_prices)
    |                                                                                                     ^^^^^^^^^^^^^^^
280 |             kelly_efficiency_change = new_efficiency - current_efficiency
    |

E501 Line too long (103 > 100)
   --> ai_trading/portfolio/optimizer.py:283:101
    |
282 |             # Estimate expected return change (simplified)
283 |             expected_return_change = self._estimate_return_change(symbol, position_change, market_data)
    |                                                                                                     ^^^
284 |
285 |             # Estimate risk change
    |

E501 Line too long (109 > 100)
   --> ai_trading/portfolio/optimizer.py:286:101
    |
285 |             # Estimate risk change
286 |             risk_change = self._estimate_risk_change(symbol, position_change, current_positions, market_data)
    |                                                                                                     ^^^^^^^^^
287 |
288 |             # Calculate tax impact
    |

E501 Line too long (134 > 100)
   --> ai_trading/portfolio/optimizer.py:292:101
    |
291 |             # Calculate net benefit
292 |             net_benefit = expected_return_change - transaction_cost - (correlation_impact * self.max_correlation_penalty) + tax_impact
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
293 |
294 |             # Calculate confidence based on data quality
    |

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:319:1
    |
317 |         """
318 |         Make portfolio-level decision about whether to execute a trade.
319 |         
    | ^^^^^^^^
320 |         Args:
321 |             symbol: Symbol to trade
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:325:1
    |
323 |             current_positions: Current portfolio positions
324 |             market_data: Market data for analysis
325 |             
    | ^^^^^^^^^^^^
326 |         Returns:
327 |             Tuple of (decision, reasoning)
    |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
   --> ai_trading/portfolio/optimizer.py:331:101
    |
329 |         try:
330 |             # Analyze trade impact
331 |             impact = self.evaluate_trade_impact(symbol, proposed_position, current_positions, market_data)
    |                                                                                                     ^^^^^^
332 |
333 |             # Apply decision logic with multiple criteria
    |

E501 Line too long (137 > 100)
   --> ai_trading/portfolio/optimizer.py:337:101
    |
335 | …nt threshold
336 | …threshold:
337 | …t benefit {impact.net_benefit:.3f} below threshold {self.improvement_threshold:.3f}"
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
338 | …
339 | …eturn
    |

E501 Line too long (162 > 100)
   --> ai_trading/portfolio/optimizer.py:341:101
    |
339 | …
340 | …rn_change) * 0.5:
341 | …st {impact.transaction_cost:.3f} too high vs expected return {impact.expected_return_change:.3f}"
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
342 | …
343 | …
    |

E501 Line too long (152 > 100)
   --> ai_trading/portfolio/optimizer.py:345:101
    |
343 | …
344 | …ion_penalty:
345 | …n impact {impact.correlation_impact:.3f} exceeds maximum {self.max_correlation_penalty:.3f}"
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
346 | …
347 | …
    |

E501 Line too long (128 > 100)
   --> ai_trading/portfolio/optimizer.py:349:101
    |
347 |             # 4. Check Kelly efficiency improvement
348 |             if impact.kelly_efficiency_change < -0.05:  # Don't reduce efficiency by more than 5%
349 |                 return PortfolioDecision.REJECT, f"Kelly efficiency would decrease by {abs(impact.kelly_efficiency_change):.3f}"
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
350 |
351 |             # 5. Check confidence level
    |

E501 Line too long (101 > 100)
   --> ai_trading/portfolio/optimizer.py:353:101
    |
351 |             # 5. Check confidence level
352 |             if impact.confidence < 0.6:
353 |                 return PortfolioDecision.DEFER, f"Low confidence {impact.confidence:.3f} in analysis"
    |                                                                                                     ^
354 |
355 |             # 6. Consider batching for small improvements
    |

E501 Line too long (115 > 100)
   --> ai_trading/portfolio/optimizer.py:357:101
    |
355 |             # 6. Consider batching for small improvements
356 |             if 0.005 <= impact.net_benefit < self.improvement_threshold:
357 |                 return PortfolioDecision.BATCH, f"Small improvement {impact.net_benefit:.3f} suitable for batching"
    |                                                                                                     ^^^^^^^^^^^^^^^
358 |
359 |             # Approve trade
    |

E501 Line too long (148 > 100)
   --> ai_trading/portfolio/optimizer.py:360:101
    |
359 | …
360 | …improvement: {impact.net_benefit:.3f}, Kelly change: {impact.kelly_efficiency_change:.3f}"
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
361 | …
362 | …
    |

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:375:1
    |
373 |         """
374 |         Determine if portfolio should be rebalanced based on drift and tax considerations.
375 |         
    | ^^^^^^^^
376 |         Args:
377 |             current_positions: Current position sizes
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:380:1
    |
378 |             target_weights: Target portfolio weights
379 |             current_prices: Current market prices
380 |             
    | ^^^^^^^^^^^^
381 |         Returns:
382 |             Tuple of (should_rebalance, reasoning)
    |
help: Remove whitespace from blank line

E501 Line too long (116 > 100)
   --> ai_trading/portfolio/optimizer.py:410:101
    |
408 |             # Check drift thresholds
409 |             if max_drift > self.rebalance_drift_threshold:
410 |                 return True, f"Maximum drift {max_drift:.3f} exceeds threshold {self.rebalance_drift_threshold:.3f}"
    |                                                                                                     ^^^^^^^^^^^^^^^^
411 |
412 |             # Check time-based rebalancing (quarterly for tax efficiency)
    |

E501 Line too long (116 > 100)
   --> ai_trading/portfolio/optimizer.py:424:101
    |
422 |             return False, f"Error: {str(e)}"
423 |
424 |     def _estimate_transaction_cost(self, symbol: str, trade_size: float, current_prices: dict[str, float]) -> float:
    |                                                                                                     ^^^^^^^^^^^^^^^^
425 |         """Estimate transaction cost for a trade."""
426 |         try:
    |

E501 Line too long (113 > 100)
   --> ai_trading/portfolio/optimizer.py:441:101
    |
439 |             return 0.01  # Default small cost
440 |
441 |     def _estimate_return_change(self, symbol: str, position_change: float, market_data: dict[str, Any]) -> float:
    |                                                                                                     ^^^^^^^^^^^^^
442 |         """Estimate expected return change from position modification."""
443 |         try:
    |

E501 Line too long (103 > 100)
   --> ai_trading/portfolio/optimizer.py:460:101
    |
459 |     def _estimate_risk_change(self, symbol: str, position_change: float,
460 |                             current_positions: dict[str, float], market_data: dict[str, Any]) -> float:
    |                                                                                                     ^^^
461 |         """Estimate portfolio risk change from position modification."""
462 |         try:
    |

E501 Line too long (115 > 100)
   --> ai_trading/portfolio/optimizer.py:481:101
    |
479 |             return 0.0
480 |
481 |     def _estimate_tax_impact(self, symbol: str, position_change: float, current_prices: dict[str, float]) -> float:
    |                                                                                                     ^^^^^^^^^^^^^^^
482 |         """Estimate tax impact of trade."""
483 |         try:
    |

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:521:1
    |
519 |     """
520 |     Factory function to create portfolio optimizer with configuration.
521 |     
    | ^^^^
522 |     Args:
523 |         config: Optional configuration dictionary
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:524:1
    |
522 |     Args:
523 |         config: Optional configuration dictionary
524 |         
    | ^^^^^^^^
525 |     Returns:
526 |         Configured PortfolioOptimizer instance
    |
help: Remove whitespace from blank line

E501 Line too long (107 > 100)
   --> ai_trading/position/intelligent_manager.py:696:101
    |
695 |         if correlation_analysis.get("should_reduce", False):
696 |             return f"Portfolio risk management: {correlation_analysis.get('reduce_reason', 'correlation')}"
    |                                                                                                     ^^^^^^^
697 |
698 |         regime = regime_analysis.get("regime", MarketRegime.RANGE_BOUND)
    |

E501 Line too long (101 > 100)
   --> ai_trading/position/technical_analyzer.py:370:101
    |
368 |                 rs_normalized = max(0.0, min(1.0, (symbol_return + 10.0) / 20.0))
369 |
370 |             # Calculate percentile rank (simplified - would need sector data for full implementation)
    |                                                                                                     ^
371 |             # For now, use relative strength as proxy
372 |             rank = rs_normalized
    |

E501 Line too long (105 > 100)
   --> ai_trading/position_sizing.py:114:101
    |
114 | def resolve_max_position_size(cfg, tcfg, *, force_refresh: bool = False) -> tuple[float, dict[str, Any]]:
    |                                                                                                     ^^^^^
115 |     """Resolve max_position_size according to mode and settings."""  # AI-AGENT-REF: AUTO sizing resolver
116 |     mode = str(getattr(tcfg, "max_position_mode", getattr(cfg, "max_position_mode", "STATIC"))).upper()
    |

E501 Line too long (105 > 100)
   --> ai_trading/position_sizing.py:115:101
    |
114 | def resolve_max_position_size(cfg, tcfg, *, force_refresh: bool = False) -> tuple[float, dict[str, Any]]:
115 |     """Resolve max_position_size according to mode and settings."""  # AI-AGENT-REF: AUTO sizing resolver
    |                                                                                                     ^^^^^
116 |     mode = str(getattr(tcfg, "max_position_mode", getattr(cfg, "max_position_mode", "STATIC"))).upper()
117 |     ttl = float(getattr(tcfg, "dynamic_size_refresh_secs", getattr(cfg, "dynamic_size_refresh_secs", 3600.0)))
    |

E501 Line too long (103 > 100)
   --> ai_trading/position_sizing.py:116:101
    |
114 | def resolve_max_position_size(cfg, tcfg, *, force_refresh: bool = False) -> tuple[float, dict[str, Any]]:
115 |     """Resolve max_position_size according to mode and settings."""  # AI-AGENT-REF: AUTO sizing resolver
116 |     mode = str(getattr(tcfg, "max_position_mode", getattr(cfg, "max_position_mode", "STATIC"))).upper()
    |                                                                                                     ^^^
117 |     ttl = float(getattr(tcfg, "dynamic_size_refresh_secs", getattr(cfg, "dynamic_size_refresh_secs", 3600.0)))
118 |     cap = _coerce_float(getattr(tcfg, "capital_cap", 0.0), 0.0)
    |

E501 Line too long (110 > 100)
   --> ai_trading/position_sizing.py:117:101
    |
115 |     """Resolve max_position_size according to mode and settings."""  # AI-AGENT-REF: AUTO sizing resolver
116 |     mode = str(getattr(tcfg, "max_position_mode", getattr(cfg, "max_position_mode", "STATIC"))).upper()
117 |     ttl = float(getattr(tcfg, "dynamic_size_refresh_secs", getattr(cfg, "dynamic_size_refresh_secs", 3600.0)))
    |                                                                                                     ^^^^^^^^^^
118 |     cap = _coerce_float(getattr(tcfg, "capital_cap", 0.0), 0.0)
119 |     vmin = getattr(tcfg, "max_position_size_min", None)
    |

E501 Line too long (106 > 100)
   --> ai_trading/production_system.py:114:101
    |
112 |                 "Trading System",
113 |                 "System Started",
114 |                 f"Production trading system started successfully with ${self.account_equity:,.2f} equity",
    |                                                                                                     ^^^^^^
115 |                 AlertSeverity.INFO,
116 |             )
    |

E501 Line too long (108 > 100)
   --> ai_trading/risk/adaptive_sizing.py:363:101
    |
361 |         self.regime_multipliers = {
362 |             MarketRegime.BULL_TRENDING: 1.3,  # Increased from 1.2 for more aggressive positioning
363 |             MarketRegime.BEAR_TRENDING: 0.5,  # Reduced from 0.6 for more conservative defensive positioning
    |                                                                                                     ^^^^^^^^
364 |             MarketRegime.SIDEWAYS_RANGE: 0.9,
365 |             MarketRegime.HIGH_VOLATILITY: 0.4,  # Reduced from 0.5 for better risk management
    |

E501 Line too long (117 > 100)
   --> ai_trading/risk/adaptive_sizing.py:366:101
    |
364 |             MarketRegime.SIDEWAYS_RANGE: 0.9,
365 |             MarketRegime.HIGH_VOLATILITY: 0.4,  # Reduced from 0.5 for better risk management
366 |             MarketRegime.LOW_VOLATILITY: 1.2,  # Increased from 1.1 for more aggressive positioning in stable markets
    |                                                                                                     ^^^^^^^^^^^^^^^^^
367 |             MarketRegime.CRISIS: 0.15,  # Reduced from 0.2 for maximum capital preservation
368 |             MarketRegime.NORMAL: 1.0,
    |

E501 Line too long (113 > 100)
   --> ai_trading/risk/adaptive_sizing.py:373:101
    |
371 |         # Volatility regime adjustments - optimized for better risk-adjusted returns
372 |         self.volatility_adjustments = {
373 |             VolatilityRegime.EXTREMELY_LOW: 1.4,  # Increased from 1.3 for more aggressive positioning in low vol
    |                                                                                                     ^^^^^^^^^^^^^
374 |             VolatilityRegime.LOW: 1.15,  # Slightly increased from 1.1
375 |             VolatilityRegime.NORMAL: 1.0,
    |

E501 Line too long (101 > 100)
   --> ai_trading/risk/adaptive_sizing.py:377:101
    |
375 |             VolatilityRegime.NORMAL: 1.0,
376 |             VolatilityRegime.HIGH: 0.65,  # Slightly reduced from 0.7 for better risk management
377 |             VolatilityRegime.EXTREMELY_HIGH: 0.3,  # Reduced from 0.4 for better capital preservation
    |                                                                                                     ^
378 |         }
    |

E501 Line too long (104 > 100)
   --> ai_trading/risk/engine.py:129:101
    |
127 |         self._volatility_cache: dict[str, tuple] = {}
128 |         # Optional, lazily available data client for historical fetches.
129 |         # Priority: runtime ctx.data_client > self.data_client (constructed here) > ctx.api as fallback.
    |                                                                                                     ^^^^
130 |         self.data_client = None
131 |         try:
    |

E501 Line too long (105 > 100)
   --> ai_trading/risk/engine.py:837:101
    |
835 |         max_allowed = min(available_asset_capacity, available_strategy_capacity)
836 |
837 |         # AI-AGENT-REF: Use signal weight directly (confidence already factored into weight by allocator)
    |                                                                                                     ^^^^^
838 |         # The strategy allocator already assigns weights based on confidence and portfolio constraints
839 |         # Ensure weight is numeric to prevent type errors in arithmetic operations
    |

E501 Line too long (102 > 100)
   --> ai_trading/risk/engine.py:838:101
    |
837 |         # AI-AGENT-REF: Use signal weight directly (confidence already factored into weight by allocator)
838 |         # The strategy allocator already assigns weights based on confidence and portfolio constraints
    |                                                                                                     ^^
839 |         # Ensure weight is numeric to prevent type errors in arithmetic operations
840 |         try:
    |

E501 Line too long (105 > 100)
   --> ai_trading/risk/engine.py:844:101
    |
842 |         except (ValueError, TypeError) as e:
843 |             logger.warning(
844 |                 "Invalid signal.weight value '%s' for %s in _apply_weight_limits, defaulting to 0.0: %s",
    |                                                                                                     ^^^^^
845 |                 sig.weight,
846 |                 sig.symbol,
    |

E501 Line too long (104 > 100)
    --> ai_trading/risk/engine.py:1250:101
     |
1249 |     raise TypeError(
1250 |         "Invalid arguments for calculate_position_size. Expected (cash, price) or (signal, cash, price)"
     |                                                                                                     ^^^^
1251 |     )
     |

E501 Line too long (122 > 100)
  --> ai_trading/risk/kelly.py:80:101
   |
78 |             max_fraction if max_fraction is not None else self.config.kelly_fraction_max
79 |         )
80 |         # For backward compatibility, if no confidence_level in kwargs but we have explicit params, use 0.95 (old default)
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
81 |         if "confidence_level" in kwargs:
82 |             self.confidence_level = kwargs["confidence_level"]
   |

E501 Line too long (105 > 100)
  --> ai_trading/risk/manager.py:95:101
   |
93 |             if position_size_pct > self.max_position_size:
94 |                 assessment["warnings"].append(
95 |                     f"Position size {position_size_pct:.2%} exceeds maximum {self.max_position_size:.2%}"
   |                                                                                                     ^^^^^
96 |                 )
97 |                 # Recommend reduced size
   |

E501 Line too long (124 > 100)
   --> ai_trading/risk/manager.py:109:101
    |
107 |             if estimated_portfolio_risk > self.max_portfolio_risk:
108 |                 assessment["warnings"].append(
109 |                     f"Estimated portfolio risk {estimated_portfolio_risk:.2%} exceeds maximum {self.max_portfolio_risk:.2%}"
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
110 |                 )
    |

E501 Line too long (111 > 100)
   --> ai_trading/risk/manager.py:222:101
    |
220 |             if self.current_drawdown > self.max_drawdown_threshold:
221 |                 assessment["alerts"].append(
222 |                     f"Drawdown {self.current_drawdown:.2%} exceeds threshold {self.max_drawdown_threshold:.2%}"
    |                                                                                                     ^^^^^^^^^^^
223 |                 )
224 |                 assessment["recommendations"].append("Reduce position sizes")
    |

E501 Line too long (101 > 100)
   --> ai_trading/risk/position_sizing.py:464:101
    |
463 |         logger.info(
464 |             f"PortfolioPositionManager initialized with max_portfolio_risk={self.max_portfolio_risk}"
    |                                                                                                     ^
465 |         )
    |

E501 Line too long (106 > 100)
   --> ai_trading/risk/pre_trade_validation.py:208:101
    |
206 |                     category=ValidationCategory.LIQUIDITY,
207 |                     status=ValidationStatus.REJECTED,
208 |                     message=f"Insufficient liquidity: avg volume {avg_volume:,} < {self.min_liquidity:,}",
    |                                                                                                     ^^^^^^
209 |                     details=details,
210 |                     score=0.0,
    |

E501 Line too long (112 > 100)
   --> ai_trading/risk/pre_trade_validation.py:226:101
    |
224 |                     category=ValidationCategory.LIQUIDITY,
225 |                     status=ValidationStatus.WARNING,
226 |                     message=f"High participation rate: {participation_rate:.1%} > {self.max_participation:.1%}",
    |                                                                                                     ^^^^^^^^^^^^
227 |                     details=details,
228 |                     score=0.5,
    |

E501 Line too long (107 > 100)
   --> ai_trading/risk/pre_trade_validation.py:414:101
    |
412 |                     category=ValidationCategory.POSITION_LIMITS,
413 |                     status=ValidationStatus.REJECTED,
414 |                     message=f"Position size {position_pct:.1%} exceeds limit {self.max_position_size:.1%}",
    |                                                                                                     ^^^^^^^
415 |                     details=details,
416 |                     score=0.0,
    |

E501 Line too long (104 > 100)
   --> ai_trading/risk/pre_trade_validation.py:418:101
    |
416 |                     score=0.0,
417 |                     recommendations=[
418 |                         f"Reduce quantity to max {int(account_equity * self.max_position_size / price)}"
    |                                                                                                     ^^^^
419 |                     ],
420 |                 )
    |

E501 Line too long (101 > 100)
  --> ai_trading/rl_trading/inference.py:94:101
   |
92 |                 if model_action_space.shape[0] != 1:
93 |                     self.logger.error(
94 |                         f"Continuous action space mismatch: model shape {model_action_space.shape}, "
   |                                                                                                     ^
95 |                         f"expected (1,)"
96 |                     )
   |

E501 Line too long (106 > 100)
  --> ai_trading/rl_trading/tests/smoke_parity.py:82:101
   |
80 |             obs_cont, reward, terminated, truncated, info = env_cont.step(action)
81 |             logger.info(
82 |                 f"    Step {i}: action={action:.2f}, reward={reward:.4f}, position={info['position']:.2f}"
   |                                                                                                     ^^^^^^
83 |             )
   |

E501 Line too long (107 > 100)
   --> ai_trading/rl_trading/tests/smoke_parity.py:109:101
    |
107 |             )
108 |             logger.info(
109 |                 f"    Inference config discrete actions: {inference_config.action_config.discrete_actions}"
    |                                                                                                     ^^^^^^^
110 |             )
    |

E501 Line too long (124 > 100)
   --> ai_trading/rl_trading/tests/smoke_parity.py:127:101
    |
125 |                 )
126 |                 logger.info(
127 |                     f"    Postprocessed action: {action_details['action']} (confidence: {action_details['confidence']:.2f})"
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
128 |                 )
    |

E501 Line too long (107 > 100)
   --> ai_trading/rl_trading/train.py:118:101
    |
116 | …                     if self.verbose > 0:
117 | …                         logger.info(
118 | …                             f"Early stopping after {self.patience} evaluations without improvement"
    |                                                                                               ^^^^^^^
119 | …                         )
120 | …                     return False
    |

E501 Line too long (104 > 100)
   --> ai_trading/rl_trading/train.py:201:101
    |
199 |                 if self.verbose > 0:
200 |                     logger.info(
201 |                         f"Eval at step {self.n_calls}: mean_reward={mean_reward:.4f} ± {std_reward:.4f}"
    |                                                                                                     ^^^^
202 |                     )
    |

E501 Line too long (108 > 100)
   --> ai_trading/rl_trading/train.py:692:101
    |
691 |         logger.info(
692 |             f"Training completed with final reward: {results['final_evaluation'].get('mean_reward', 'N/A')}"
    |                                                                                                     ^^^^^^^^
693 |         )
    |

E501 Line too long (101 > 100)
  --> ai_trading/runtime/http_wrapped.py:14:101
   |
12 |     fetch: Callable[[], Any], retries: int = 3, backoff: float = 0.05
13 | ) -> Any:
14 |     """Return JSON-decoded payload with basic retry logic."""  # AI-AGENT-REF: add HTTP retry wrapper
   |                                                                                                     ^
15 |     attempts = max(1, int(retries))
16 |     last_exc: Exception | None = None
   |

E501 Line too long (112 > 100)
   --> ai_trading/safety/monitoring.py:245:101
    |
243 |                     "type": "order_rate_limit",
244 |                     "severity": AlertSeverity.WARNING,
245 |                     "message": f"Order rate limit exceeded: {self.metrics['orders_this_minute']} orders/minute",
    |                                                                                                     ^^^^^^^^^^^^
246 |                     "action": "pause_trading",
247 |                 }
    |

E741 Ambiguous variable name: `l`
   --> ai_trading/safety/monitoring.py:484:42
    |
483 |         # Calculate statistics
484 |         latencies = [l["latency_ms"] for l in self.metrics["order_latency"]]
    |                                          ^
485 |         avg_latency = sum(latencies) / len(latencies) if latencies else 0
486 |         max_latency = max(latencies) if latencies else 0
    |

E501 Line too long (107 > 100)
  --> ai_trading/settings.py:76:101
   |
74 |     # General runtime configuration
75 |     env: str = Field(default="test", alias="APP_ENV")  # AI-AGENT-REF: environment name
76 |     market_calendar: str = Field(default="XNYS", alias="MARKET_CALENDAR")  # AI-AGENT-REF: trading calendar
   |                                                                                                     ^^^^^^^
77 |     data_provider: str = Field(default="mock", alias="DATA_PROVIDER")  # AI-AGENT-REF: data provider source
78 |     log_level: str = Field(default="INFO", alias="LOG_LEVEL")  # AI-AGENT-REF: log level
   |

E501 Line too long (107 > 100)
  --> ai_trading/settings.py:77:101
   |
75 |     env: str = Field(default="test", alias="APP_ENV")  # AI-AGENT-REF: environment name
76 |     market_calendar: str = Field(default="XNYS", alias="MARKET_CALENDAR")  # AI-AGENT-REF: trading calendar
77 |     data_provider: str = Field(default="mock", alias="DATA_PROVIDER")  # AI-AGENT-REF: data provider source
   |                                                                                                     ^^^^^^^
78 |     log_level: str = Field(default="INFO", alias="LOG_LEVEL")  # AI-AGENT-REF: log level
79 |     enable_memory_optimization: bool = Field(default=True)  # AI-AGENT-REF: memory tweaks
   |

E501 Line too long (103 > 100)
  --> ai_trading/settings.py:80:101
   |
78 |     log_level: str = Field(default="INFO", alias="LOG_LEVEL")  # AI-AGENT-REF: log level
79 |     enable_memory_optimization: bool = Field(default=True)  # AI-AGENT-REF: memory tweaks
80 |     log_compact_json: bool = Field(False, alias="LOG_COMPACT_JSON")  # AI-AGENT-REF: compact log format
   |                                                                                                     ^^^
81 |     alpaca_api_key: str | None = Field(default=None, alias="ALPACA_API_KEY")  # AI-AGENT-REF: Alpaca key
82 |     alpaca_secret_key: SecretStr | None = Field(
   |

E501 Line too long (104 > 100)
  --> ai_trading/settings.py:81:101
   |
79 |     enable_memory_optimization: bool = Field(default=True)  # AI-AGENT-REF: memory tweaks
80 |     log_compact_json: bool = Field(False, alias="LOG_COMPACT_JSON")  # AI-AGENT-REF: compact log format
81 |     alpaca_api_key: str | None = Field(default=None, alias="ALPACA_API_KEY")  # AI-AGENT-REF: Alpaca key
   |                                                                                                     ^^^^
82 |     alpaca_secret_key: SecretStr | None = Field(
83 |         default=None, alias="ALPACA_SECRET_KEY"
   |

E501 Line too long (101 > 100)
  --> ai_trading/settings.py:89:101
   |
87 |         default="https://paper-api.alpaca.markets", alias="ALPACA_BASE_URL"
88 |     )  # AI-AGENT-REF: Alpaca base URL
89 |     trading_mode: str = Field(default="balanced", alias="TRADING_MODE")  # AI-AGENT-REF: trading mode
   |                                                                                                     ^
90 |     webhook_secret: str | None = Field(default=None, alias="WEBHOOK_SECRET")  # AI-AGENT-REF: webhook secret
91 |     testing: bool = Field(False, alias="TESTING")  # AI-AGENT-REF: test mode toggle
   |

E501 Line too long (108 > 100)
  --> ai_trading/settings.py:90:101
   |
88 |     )  # AI-AGENT-REF: Alpaca base URL
89 |     trading_mode: str = Field(default="balanced", alias="TRADING_MODE")  # AI-AGENT-REF: trading mode
90 |     webhook_secret: str | None = Field(default=None, alias="WEBHOOK_SECRET")  # AI-AGENT-REF: webhook secret
   |                                                                                                     ^^^^^^^^
91 |     testing: bool = Field(False, alias="TESTING")  # AI-AGENT-REF: test mode toggle
92 |     shadow_mode: bool = Field(False, alias="SHADOW_MODE")  # AI-AGENT-REF: shadow trades
   |

E501 Line too long (101 > 100)
  --> ai_trading/settings.py:94:101
   |
92 |     shadow_mode: bool = Field(False, alias="SHADOW_MODE")  # AI-AGENT-REF: shadow trades
93 |     log_market_fetch: bool = Field(True, alias="LOG_MARKET_FETCH")  # AI-AGENT-REF: fetch logging
94 |     healthcheck_port: int = Field(9001, alias="HEALTHCHECK_PORT")  # AI-AGENT-REF: health server port
   |                                                                                                     ^
95 |     min_health_rows: int = Field(120, alias="MIN_HEALTH_ROWS")  # AI-AGENT-REF: health rows threshold
   |

E501 Line too long (101 > 100)
  --> ai_trading/settings.py:95:101
   |
93 |     log_market_fetch: bool = Field(True, alias="LOG_MARKET_FETCH")  # AI-AGENT-REF: fetch logging
94 |     healthcheck_port: int = Field(9001, alias="HEALTHCHECK_PORT")  # AI-AGENT-REF: health server port
95 |     min_health_rows: int = Field(120, alias="MIN_HEALTH_ROWS")  # AI-AGENT-REF: health rows threshold
   |                                                                                                     ^
96 |
97 |     # --- API server configuration ---
   |

E501 Line too long (109 > 100)
   --> ai_trading/settings.py:157:101
    |
155 |         True, env="AI_TRADER_DATA_CACHE_DISK_ENABLE"
156 |     )  # AI-AGENT-REF: disk cache toggle
157 |     pretrade_lookback_days: int = Field(120, alias="PRETRADE_LOOKBACK_DAYS")  # AI-AGENT-REF: safety lookback
    |                                                                                                     ^^^^^^^^^
158 |     verbose_logging: bool = Field(default=False, env="AI_TRADER_VERBOSE_LOGGING")
159 |     # Plotting (matplotlib) allowed in environments that support it
    |

E501 Line too long (104 > 100)
   --> ai_trading/strategies/base.py:447:101
    |
446 |         logger.debug(
447 |             f"Generated {len(all_signals)} signals from {len(self.active_strategies)} active strategies"
    |                                                                                                     ^^^^
448 |         )
449 |         return all_signals
    |

E501 Line too long (150 > 100)
   --> ai_trading/strategies/metalearning.py:303:101
    |
301 | …
302 | …
303 | …len(features_df) if features_df is not None else 0} < {self.parameters['min_data_points']}"
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
304 | …
305 | …
    |

E501 Line too long (105 > 100)
   --> ai_trading/strategies/metalearning.py:328:101
    |
326 |             if len(unique_classes) < 2:
327 |                 logger.error(
328 |                     f"Insufficient class diversity for ML training: only {len(unique_classes)} class(es)"
    |                                                                                                     ^^^^^
329 |                 )
330 |                 return False
    |

E501 Line too long (109 > 100)
   --> ai_trading/strategies/metalearning.py:338:101
    |
336 |             ):  # Need at least 3 samples per class for train/test split
337 |                 logger.warning(
338 |                     f"Small class size detected: {min_class_size} samples. This may affect training quality."
    |                                                                                                     ^^^^^^^^^
339 |                 )
340 |                 # Continue with training but log the warning
    |

E501 Line too long (113 > 100)
   --> ai_trading/strategies/multi_timeframe.py:188:101
    |
187 |         logger.info(
188 |             f"MultiTimeframeAnalyzer initialized with timeframes: {[tf.value for tf in self.primary_timeframes]}"
    |                                                                                                     ^^^^^^^^^^^^^
189 |         )
    |

W293 Blank line contains whitespace
  --> ai_trading/strategies/performance_allocator.py:78:1
   |
76 |     """
77 |     Dynamic strategy allocator based on rolling performance metrics.
78 |     
   | ^^^^
79 |     Tracks strategy performance over a rolling window and adjusts capital
80 |     allocation to favor better-performing strategies while maintaining
   |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
  --> ai_trading/strategies/performance_allocator.py:96:101
   |
94 |         # Performance tracking configuration
95 |         self.window_days = self.config.get("performance_window_days", 20)  # 20 trading days
96 |         self.min_trades_threshold = self.config.get("min_trades_threshold", 5)  # Minimum trades for evaluation
   |                                                                                                     ^^^^^^^^^^^
97 |         self.decay_factor = self.config.get("decay_factor", 0.95)  # Exponential decay for older performance
   |

E501 Line too long (108 > 100)
  --> ai_trading/strategies/performance_allocator.py:97:101
   |
95 |         self.window_days = self.config.get("performance_window_days", 20)  # 20 trading days
96 |         self.min_trades_threshold = self.config.get("min_trades_threshold", 5)  # Minimum trades for evaluation
97 |         self.decay_factor = self.config.get("decay_factor", 0.95)  # Exponential decay for older performance
   |                                                                                                     ^^^^^^^^
98 |
99 |         # Allocation bounds
   |

E501 Line too long (101 > 100)
   --> ai_trading/strategies/performance_allocator.py:101:101
    |
 99 |         # Allocation bounds
100 |         self.min_allocation = self.config.get("min_allocation_pct", 0.05)  # 5% minimum per strategy
101 |         self.max_allocation = self.config.get("max_allocation_pct", 0.40)  # 40% maximum per strategy
    |                                                                                                     ^
102 |         self.default_allocation = self.config.get("default_allocation_pct", 0.20)  # 20% default
    |

E501 Line too long (104 > 100)
   --> ai_trading/strategies/performance_allocator.py:137:101
    |
135 |         return max(0.0, min(1.0, s))
136 |
137 |     def allocate(self, strategies: Dict[str, List[Any]], config: TradingConfig) -> Dict[str, List[Any]]:
    |                                                                                                     ^^^^
138 |         """Filter low-confidence signals and bias weights by confidence."""  # AI-AGENT-REF
139 |         th = _resolve_conf_threshold(config)
    |

E501 Line too long (101 > 100)
   --> ai_trading/strategies/performance_allocator.py:170:101
    |
168 |                 logger.info(
169 |                     "CONFIDENCE_DROP",
170 |                     extra={"strategy": name, "threshold": th, "dropped": dropped, "kept": len(kept)},
    |                                                                                                     ^
171 |                 )
172 |             if kept:
    |

W293 Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:194:1
    |
192 |         """
193 |         Record a trade result for a strategy.
194 |         
    | ^^^^^^^^
195 |         Args:
196 |             strategy_name: Name of the strategy
    |
help: Remove whitespace from blank line

E501 Line too long (118 > 100)
   --> ai_trading/strategies/performance_allocator.py:219:101
    |
217 |                 **trade_result,
218 |                 'recorded_at': datetime.now(UTC),
219 |                 'return_pct': trade_result['pnl'] / abs(trade_result['entry_price'] * trade_result.get('quantity', 1))
    |                                                                                                     ^^^^^^^^^^^^^^^^^^
220 |             }
    |

E501 Line too long (128 > 100)
   --> ai_trading/strategies/performance_allocator.py:229:101
    |
227 |         except (KeyError, ValueError, TypeError) as e:
228 |             logger.warning("Failed to record trade result for strategy %s: %s", strategy_name, e,
229 |                           extra={"component": "performance_allocator", "strategy": strategy_name, "error_type": "trade_record"})
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
230 |         except Exception as e:
231 |             logger.error("Unexpected error recording trade for strategy %s: %s", strategy_name, e,
    |

E501 Line too long (124 > 100)
   --> ai_trading/strategies/performance_allocator.py:232:101
    |
230 |         except Exception as e:
231 |             logger.error("Unexpected error recording trade for strategy %s: %s", strategy_name, e,
232 |                         extra={"component": "performance_allocator", "strategy": strategy_name, "error_type": "unexpected"})
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
233 |
234 |     def calculate_strategy_allocations(self, strategies: List[str],
    |

W293 Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:238:1
    |
236 |         """
237 |         Calculate optimal capital allocation across strategies based on performance.
238 |         
    | ^^^^^^^^
239 |         Args:
240 |             strategies: List of strategy names
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:242:1
    |
240 |             strategies: List of strategy names
241 |             total_capital: Total capital to allocate
242 |             
    | ^^^^^^^^^^^^
243 |         Returns:
244 |             Dictionary mapping strategy name to allocated capital amount
    |
help: Remove whitespace from blank line

E501 Line too long (117 > 100)
   --> ai_trading/strategies/performance_allocator.py:335:101
    |
333 |             # Composite score calculation
334 |             sharpe_component = self._normalize_metric(sharpe_ratio, -2, 3) * self.sharpe_weight
335 |             return_component = self._normalize_metric(avg_return * 252, -0.5, 0.5) * self.return_weight  # Annualized
    |                                                                                                     ^^^^^^^^^^^^^^^^^
336 |             hit_rate_component = self._normalize_metric(hit_rate, 0.3, 0.7) * self.hit_rate_weight
337 |             drawdown_component = self._normalize_metric(-max_drawdown, -0.3, 0) * self.drawdown_weight
    |

E501 Line too long (102 > 100)
   --> ai_trading/strategies/performance_allocator.py:337:101
    |
335 |             return_component = self._normalize_metric(avg_return * 252, -0.5, 0.5) * self.return_weight  # Annualized
336 |             hit_rate_component = self._normalize_metric(hit_rate, 0.3, 0.7) * self.hit_rate_weight
337 |             drawdown_component = self._normalize_metric(-max_drawdown, -0.3, 0) * self.drawdown_weight
    |                                                                                                     ^^
338 |
339 |             composite_score = (sharpe_component + return_component +
    |

E501 Line too long (112 > 100)
   --> ai_trading/strategies/performance_allocator.py:345:101
    |
343 |             composite_score = max(0.0, min(1.0, composite_score))
344 |
345 |             logger.debug("Strategy %s metrics: Sharpe=%.2f, Return=%.3f, HitRate=%.1f%%, DD=%.2f%%, Score=%.3f",
    |                                                                                                     ^^^^^^^^^^^^
346 |                         strategy_name, sharpe_ratio, avg_return * 252, hit_rate * 100,
347 |                         max_drawdown * 100, composite_score)
    |

E501 Line too long (106 > 100)
   --> ai_trading/strategies/performance_allocator.py:355:101
    |
353 |             return 0.3  # Below average for calculation errors
354 |         except Exception as e:
355 |             logger.error("Unexpected error calculating performance for strategy %s: %s", strategy_name, e)
    |                                                                                                     ^^^^^^
356 |             return 0.3
    |

E501 Line too long (115 > 100)
   --> ai_trading/strategies/performance_allocator.py:463:101
    |
461 |                         "avg_return": np.mean(returns),
462 |                         "hit_rate": sum(1 for r in returns if r > 0) / len(returns),
463 |                         "sharpe": (np.mean(returns) / np.std(returns) * np.sqrt(252)) if np.std(returns) > 0 else 0
    |                                                                                                     ^^^^^^^^^^^^^^^
464 |                     }
    |

E501 Line too long (102 > 100)
   --> ai_trading/strategies/performance_allocator.py:469:101
    |
468 |         except Exception as e:
469 |             logger.error("Performance report generation failed for strategy %s: %s", strategy_name, e)
    |                                                                                                     ^^
470 |             return {
471 |                 "strategy": strategy_name,
    |

E501 Line too long (101 > 100)
   --> ai_trading/strategies/performance_allocator.py:493:101
    |
492 |             # Check if performance ordering has changed significantly
493 |             old_ranking = sorted(self.strategy_allocations.items(), key=lambda x: x[1], reverse=True)
    |                                                                                                     ^
494 |             new_ranking = sorted(current_scores.items(), key=lambda x: x[1], reverse=True)
    |

E501 Line too long (114 > 100)
  --> ai_trading/strategy_allocator.py:15:101
   |
14 | class StrategyAllocator:
15 |     """Minimal allocator with confidence normalization hook for tests."""  # AI-AGENT-REF: test strategy allocator
   |                                                                                                     ^^^^^^^^^^^^^^
16 |
17 |     # AI-AGENT-REF: resolve threshold via config chain
   |

E501 Line too long (103 > 100)
 --> ai_trading/tools/__init__.py:2:101
  |
1 | raise ImportError(
2 |     "The legacy 'ai_trading.tools' package is removed. Use 'ai_trading.tools.env_validate' explicitly."
  |                                                                                                     ^^^
3 | )
  |

E501 Line too long (103 > 100)
   --> ai_trading/utils/http.py:105:101
    |
103 |     kwargs = _with_timeout(kwargs)
104 |     retries, backoff, max_backoff, jitter = _retry_config()
105 |     # Some call-sites intentionally raise ValueError during request/parse pipeline; treat it transient.
    |                                                                                                     ^^^
106 |     excs = (
107 |         RequestException,
    |

E501 Line too long (112 > 100)
  --> scripts/INTEGRATION_GUIDE.py:45:101
   |
43 |         log_execution_phase(correlation_id, ExecutionPhase.RISK_CHECK, {
44 |             'requested_qty': qty,
45 |             'available_cash': engine.ctx.get_account().cash if hasattr(engine.ctx, 'get_account') else 'unknown'
   |                                                                                                     ^^^^^^^^^^^^
46 |         })
   |

E501 Line too long (103 > 100)
   --> scripts/INTEGRATION_GUIDE.py:103:101
    |
101 |                     'confidence': signal.confidence,
102 |                     'trigger_price': getattr(signal, 'price', None),
103 |                     'timestamp': signal.timestamp.isoformat() if hasattr(signal, 'timestamp') else None
    |                                                                                                     ^^^
104 |                 }
105 |             )
    |

E501 Line too long (122 > 100)
   --> scripts/INTEGRATION_GUIDE.py:125:101
    |
123 |         fees = getattr(order, 'fees', 0)
124 |         expected_price = getattr(order, 'limit_price', fill_price)
125 |         slippage = (fill_price - expected_price) * fill_qty if side == 'buy' else (expected_price - fill_price) * fill_qty
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
126 |
127 |         # Get average cost basis (you'll need to track this)
    |

E501 Line too long (116 > 100)
   --> scripts/INTEGRATION_GUIDE.py:172:101
    |
170 |             for disc in discrepancies:
171 |                 if disc.severity in ['high', 'medium']:
172 |                     logging.info(f"  {disc.symbol}: Bot={disc.bot_qty}, Broker={disc.broker_qty} ({disc.severity})")
    |                                                                                                     ^^^^^^^^^^^^^^^^
173 |
174 |         # Check execution statistics
    |

E501 Line too long (113 > 100)
   --> scripts/INTEGRATION_GUIDE.py:206:101
    |
204 |             logging.info(f"🚨 ALERT: {len(recent_failures)} failed executions recently")
205 |             for failure in recent_failures:
206 |                 logging.info(f"  {failure['symbol']} {failure['side']}: {failure.get('error', 'Unknown error')}")
    |                                                                                                     ^^^^^^^^^^^^^
207 |
208 |         # Check for stuck orders
    |

E501 Line too long (105 > 100)
   --> scripts/INTEGRATION_GUIDE.py:215:101
    |
213 |             logging.info(f"🚨 ALERT: {len(stuck_orders)} orders appear stuck")
214 |             for order in stuck_orders:
215 |                 logging.info(str(f"  {order['symbol']} {order['side']} - started {order['start_time']}"))
    |                                                                                                     ^^^^^
216 |
217 |     def was_recent(timestamp_str, minutes=30):
    |

E501 Line too long (107 > 100)
   --> scripts/algorithm_optimizer.py:455:101
    |
453 |                                       volatility: float,
454 |                                       market_conditions: MarketConditions) -> float:
455 |         """Calculate optimal position size using Kelly criterion and risk management with thread safety."""
    |                                                                                                     ^^^^^^^
456 |         with self._lock:  # AI-AGENT-REF: Thread-safe position size calculation
457 |             try:
    |

E501 Line too long (104 > 100)
   --> scripts/algorithm_optimizer.py:460:101
    |
458 |                 # AI-AGENT-REF: Division by zero protection
459 |                 if price <= 0 or account_value <= 0:
460 |                     self.logger.warning(f"Invalid inputs: price={price}, account_value={account_value}")
    |                                                                                                     ^^^^
461 |                     return 0
    |

E501 Line too long (107 > 100)
   --> scripts/algorithm_optimizer.py:470:101
    |
469 |                 # Apply Kelly criterion with safety caps
470 |                 kelly_adjusted_pct = min(kelly_fraction, 0.25) if kelly_fraction > 0 else base_position_pct
    |                                                                                                     ^^^^^^^
471 |
472 |                 # Adjust for market conditions
    |

E501 Line too long (115 > 100)
   --> scripts/algorithm_optimizer.py:508:101
    |
506 |                 self.logger.debug(
507 |                     f"Position size calculated for {symbol}: {final_shares} shares "
508 |                     f"(${final_shares * price:.2f}, {final_shares * price / account_value * 100:.2f}% of account) "
    |                                                                                                     ^^^^^^^^^^^^^^^
509 |                     f"Kelly fraction: {kelly_fraction:.4f}"
510 |                 )
    |

E501 Line too long (102 > 100)
   --> scripts/algorithm_optimizer.py:546:101
    |
544 |             avg_loss = sum(losses) / max(len(losses), 1) if losses else epsilon
545 |
546 |             # Kelly formula: f = (bp - q) / b where b = avg_win/avg_loss, p = win_rate, q = 1-win_rate
    |                                                                                                     ^^
547 |             if avg_loss <= epsilon:  # Avoid division by zero
548 |                 return min(0.25, win_rate * 0.5)  # Conservative fallback
    |

E501 Line too long (108 > 100)
   --> scripts/algorithm_optimizer.py:663:101
    |
661 |             test_size = self.calculate_optimal_position_size(
662 |                 'TEST', 100.0, 10000.0, 0.2,
663 |                 MarketConditions(MarketRegime.SIDEWAYS, 0.2, 0.5, 1.0, 0.5, 0.0, 20.0, TradingPhase.MID_DAY)
    |                                                                                                     ^^^^^^^^
664 |             )
665 |             assert test_size > 0, "Position size must be positive"
    |

E501 Line too long (108 > 100)
   --> scripts/algorithm_optimizer.py:699:101
    |
697 |             )
698 |             optimized = self.optimize_parameters(conditions, [0.01, -0.02, 0.03], True)
699 |             assert hasattr(optimized, 'position_size_multiplier'), "Optimized parameters missing attributes"
    |                                                                                                     ^^^^^^^^
700 |             validation_results['tests_passed'] += 1
701 |             validation_results['tests_run'].append('parameter_optimization')
    |

E501 Line too long (104 > 100)
   --> scripts/algorithm_optimizer.py:713:101
    |
711 |             'timestamp': datetime.now(UTC).isoformat(),
712 |             'optimization_enabled': self.optimization_enabled,
713 |             'last_optimization': self.last_optimization.isoformat() if self.last_optimization else None,
    |                                                                                                     ^^^^
714 |             'current_parameters': self.current_parameters.__dict__,
715 |             'base_parameters': self.base_parameters.__dict__,
    |

E501 Line too long (120 > 100)
   --> scripts/algorithm_optimizer.py:722:101
    |
720 |                     'count': len(performances),
721 |                     'avg_performance': statistics.mean(performances) if performances else 0.0,
722 |                     'win_rate': sum(1 for p in performances if p > 0) / len(performances) * 100 if performances else 0.0
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
723 |                 }
724 |                 for regime, performances in self.regime_performance.items()
    |

E501 Line too long (114 > 100)
  --> scripts/audit.py:82:101
   |
81 |     # Determine if we should use simple audit format (for tests or specific modes)
82 |     use_simple_format = (extra_info and ("TEST" in str(extra_info).upper() or "AUDIT" in str(extra_info).upper()))
   |                                                                                                     ^^^^^^^^^^^^^^
83 |
84 |     # AI-AGENT-REF: record exposure and intent
   |

E501 Line too long (105 > 100)
  --> scripts/backtest_framework.py:30:101
   |
28 |             # Validate signal doesn't use future data
29 |             if hasattr(signal, 'timestamp'):
30 |                 latest_data_time = available_data.index[-1] if hasattr(available_data, 'index') else None
   |                                                                                                     ^^^^^
31 |                 if latest_data_time and signal.timestamp > latest_data_time:
32 |                     raise ValueError(f"Signal timestamp {signal.timestamp} is after latest data {latest_data_time}")
   |

E501 Line too long (116 > 100)
  --> scripts/backtest_framework.py:32:101
   |
30 |                 latest_data_time = available_data.index[-1] if hasattr(available_data, 'index') else None
31 |                 if latest_data_time and signal.timestamp > latest_data_time:
32 |                     raise ValueError(f"Signal timestamp {signal.timestamp} is after latest data {latest_data_time}")
   |                                                                                                     ^^^^^^^^^^^^^^^^
33 |
34 |             assert signal.confidence == pytest.approx(future_signal.confidence)
   |

W293 Blank line contains whitespace
  --> scripts/circuit_breaker.py:36:1
   |
34 |     """
35 |     Circuit breaker implementation for external service calls.
36 |     
   | ^^^^
37 |     Prevents cascading failures by failing fast when a service is down,
38 |     and periodically checking if the service has recovered.
   |
help: Remove whitespace from blank line

E501 Line too long (129 > 100)
  --> scripts/circuit_breaker.py:75:101
   |
73 |             self._open_circuit()
74 |
75 |         logger.warning(f"Circuit breaker {self.name}: Failure recorded (count: {self.failure_count}, state: {self.state.value})")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
76 |
77 |     def _open_circuit(self):
   |

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:108:1
    |
106 |         """
107 |         Execute function with circuit breaker protection.
108 |         
    | ^^^^^^^^
109 |         Args:
110 |             func: Function to execute
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:113:1
    |
111 |             *args: Arguments for the function
112 |             **kwargs: Keyword arguments for the function
113 |             
    | ^^^^^^^^^^^^
114 |         Returns:
115 |             Function result if successful
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:116:1
    |
114 |         Returns:
115 |             Function result if successful
116 |             
    | ^^^^^^^^^^^^
117 |         Raises:
118 |             CircuitBreakerOpenError: If circuit is open
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:159:1
    |
157 |     """
158 |     Decorator for applying circuit breaker pattern to functions.
159 |     
    | ^^^^
160 |     Args:
161 |         name: Circuit breaker name
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:163:1
    |
161 |         name: Circuit breaker name
162 |         config: Circuit breaker configuration
163 |         
    | ^^^^^^^^
164 |     Usage:
165 |         @circuit_breaker("external_api")
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:219:1
    |
217 |     """
218 |     Enhanced retry decorator with exponential backoff and jitter.
219 |     
    | ^^^^
220 |     Args:
221 |         max_attempts: Maximum number of retry attempts
    |
help: Remove whitespace from blank line

E501 Line too long (124 > 100)
   --> scripts/circuit_breaker.py:252:101
    |
250 |                         delay = delay * (0.5 + random.random() * 0.5)
251 |
252 |                     logger.debug(f"Retry attempt {attempt + 1}/{max_attempts} for {func.__name__} after {delay:.2f}s delay")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
253 |                     time.sleep(delay)
    |

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:267:1
    |
265 |     """
266 |     Perform a health check on an external service.
267 |     
    | ^^^^
268 |     Args:
269 |         name: Service name for logging
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:272:1
    |
270 |         check_func: Function that returns True if service is healthy
271 |         timeout: Timeout for the health check
272 |         
    | ^^^^^^^^
273 |     Returns:
274 |         True if service is healthy, False otherwise
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
  --> scripts/codemods/phase3_canonical_imports.py:43:101
   |
41 |             new = self._rewrite_name(updated.name.value)
42 |             if new != updated.name.value:
43 |                 return updated.with_changes(name=cst.parse_module(new).body[0].body[0].names[0].name)
   |                                                                                                     ^
44 |         elif isinstance(updated.name, cst.Attribute):
45 |             # import bot_engine.something -> ai_trading.bot_engine.something
   |

E501 Line too long (102 > 100)
  --> scripts/codemods/phase3_canonical_imports.py:85:101
   |
83 |                 return updated
84 |
85 |             # For files outside ai_trading/, convert relative imports if they reference legacy modules
   |                                                                                                     ^^
86 |             if updated.module.module is not None:
87 |                 module_name = cst.Module([]).code_for_node(updated.module.module)
   |

E501 Line too long (104 > 100)
   --> scripts/codemods/phase3_canonical_imports.py:108:101
    |
106 |     rel = str(path)
107 |     # Visit production code and tests; skip venv, build, .git, artifacts
108 |     skip_dirs = (".git/", "venv/", ".venv/", "build/", "dist/", "artifacts/", "models/", "__pycache__/")
    |                                                                                                     ^^^^
109 |     return not any(s in rel for s in skip_dirs)
    |

E501 Line too long (104 > 100)
  --> scripts/critical_fixes_validation.py:66:101
   |
64 |                         "Recovery timeout should be increased from 1800s to 3600s")
65 |
66 |         logging.info(f"  ✓ Failure threshold increased to {self.sentiment.SENTIMENT_FAILURE_THRESHOLD}")
   |                                                                                                     ^^^^
67 |         logging.info(f"  ✓ Recovery timeout increased to {self.sentiment.SENTIMENT_RECOVERY_TIMEOUT}s (1 hour)")
68 |         logging.info("  ✓ Circuit breaker now more tolerant of API rate limiting")
   |

E501 Line too long (112 > 100)
  --> scripts/critical_fixes_validation.py:67:101
   |
66 |         logging.info(f"  ✓ Failure threshold increased to {self.sentiment.SENTIMENT_FAILURE_THRESHOLD}")
67 |         logging.info(f"  ✓ Recovery timeout increased to {self.sentiment.SENTIMENT_RECOVERY_TIMEOUT}s (1 hour)")
   |                                                                                                     ^^^^^^^^^^^^
68 |         logging.info("  ✓ Circuit breaker now more tolerant of API rate limiting")
   |

W291 Trailing whitespace
  --> scripts/debug_cli.py:12:81
   |
10 |     python debug_cli.py status                    # Show overall status
11 |     python debug_cli.py executions [--limit 10]  # Show recent executions
12 |     python debug_cli.py positions                 # Check position discrepancies  
   |                                                                                 ^^
13 |     python debug_cli.py pnl [symbol]             # Show PnL breakdown
14 |     python debug_cli.py trace [correlation_id]   # Trace execution timeline
   |
help: Remove trailing whitespace

E501 Line too long (112 > 100)
   --> scripts/debug_cli.py:144:99
    |
142 |             logging.info(f"\n⚠️  DISCREPANCIES FOUND ({len(discrepancies)}):")
143 |             for disc in discrepancies:
144 |                 severity_icon = "🔴" if disc.severity == "high" else "🟡" if disc.severity == "medium" else "🟢"
    |                                                                                                     ^^^^^^^^^^^^
145 |                 logging.info(f"  {severity_icon} {disc.symbol}:")
146 |                 logging.info(f"    Bot: {disc.bot_qty} shares")
    |

E501 Line too long (101 > 100)
   --> scripts/debug_cli.py:194:101
    |
192 |                 if 'unrealized' in breakdown:
193 |                     logging.info(str(f"  Unrealized: ${breakdown['unrealized']:+.2f}"))
194 |                     logging.info(str(f"  Net PnL: ${total_realized + breakdown['unrealized']:+.2f}"))
    |                                                                                                     ^
195 |
196 |                 # Explain recent changes
    |

E501 Line too long (102 > 100)
   --> scripts/debug_cli.py:313:101
    |
311 |         high_severity_discrepancies = [d for d in discrepancies if d.severity == 'high']
312 |         if high_severity_discrepancies:
313 |             issues.append(f"High severity position discrepancies: {len(high_severity_discrepancies)}")
    |                                                                                                     ^^
314 |
315 |         # Check PnL attribution
    |

E501 Line too long (114 > 100)
  --> scripts/debug_drawdown.py:72:101
   |
70 |                 result = breaker.update_equity(equity)
71 |                 status = breaker.get_status()
72 |                 logging.info(str(f"Update {i+1}: equity=${equity:.2f}, result={result}, state={status['state']}"))
   |                                                                                                     ^^^^^^^^^^^^^^
73 |             except Exception as e:
74 |                 logging.info(f"❌ Error on update {i+1}: {e}")
   |

W291 Trailing whitespace
 --> scripts/demo_centralized_imports.py:7:70
  |
5 | Demonstration of the centralized import management system.
6 |
7 | This script shows how the ai_trading.imports module provides graceful 
  |                                                                      ^
8 | fallbacks for dependencies that may not be available.
  |
help: Remove trailing whitespace

E501 Line too long (102 > 100)
  --> scripts/demo_centralized_imports.py:49:99
   |
47 |     logging.info(str(f"   Scikit-learn:{'✅ Available' if SKLEARN_AVAILABLE else '❌ Using Mock'}"))
48 |     logging.info(str(f"   TA-Lib:      {'✅ Available' if TALIB_AVAILABLE else '❌ Using Mock'}"))
49 |     logging.info(str(f"   pandas-ta:   {'✅ Available' if PANDAS_TA_AVAILABLE else '❌ Using Mock'}"))
   |                                                                                                     ^^
50 |
51 |     logging.info("\n🔬 Testing NumPy Operations:")
   |

E501 Line too long (103 > 100)
  --> scripts/demo_centralized_imports.py:71:101
   |
69 |     # Test Series operations
70 |     price_series = df['price'] if hasattr(df, '__getitem__') else pd.Series([100, 102, 101, 105])
71 |     rolling_mean = price_series.rolling(3).mean() if hasattr(price_series, 'rolling') else price_series
   |                                                                                                     ^^^
72 |     logging.info(f"   Price series mean: {price_series.mean()}")
73 |     logging.info(f"   Rolling mean calculated: {hasattr(rolling_mean, 'data') or hasattr(rolling_mean, '__len__')}")
   |

E501 Line too long (116 > 100)
  --> scripts/demo_centralized_imports.py:73:101
   |
71 |     rolling_mean = price_series.rolling(3).mean() if hasattr(price_series, 'rolling') else price_series
72 |     logging.info(f"   Price series mean: {price_series.mean()}")
73 |     logging.info(f"   Rolling mean calculated: {hasattr(rolling_mean, 'data') or hasattr(rolling_mean, '__len__')}")
   |                                                                                                     ^^^^^^^^^^^^^^^^
74 |
75 |     logging.info("\n🤖 Testing Machine Learning:")
   |

E501 Line too long (106 > 100)
  --> scripts/demo_centralized_imports.py:91:101
   |
89 |     X_scaled = scaler.fit_transform(X)
90 |     logging.info("   Standard scaling completed")
91 |     logging.info(str(f"   Scaled data shape: {len(X_scaled) if hasattr(X_scaled, '__len__') else 'N/A'}"))
   |                                                                                                     ^^^^^^
92 |
93 |     logging.info("\n📊 Testing Technical Analysis:")
   |

E501 Line too long (115 > 100)
   --> scripts/demo_centralized_imports.py:104:101
    |
102 |     sma_5 = ta_lib.SMA(price_data, timeperiod=5)
103 |     logging.info(f"   SMA(5) calculated: {len(sma_5)} values")
104 |     logging.info(str(f"   SMA(5) last 3 values: {sma_5[-3:] if hasattr(sma_5, '__getitem__') else 'Mock result'}"))
    |                                                                                                     ^^^^^^^^^^^^^^^
105 |
106 |     # Test EMA
    |

E501 Line too long (155 > 100)
  --> scripts/demo_drawdown_protection.py:35:101
   |
33 | …
34 | …
35 | …_config.max_drawdown_threshold:.1%}, Daily Loss = {conservative_config.daily_loss_limit:.1%}")
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
36 | …fig.max_drawdown_threshold:.1%}, Daily Loss = {balanced_config.daily_loss_limit:.1%}")
37 | …onfig.max_drawdown_threshold:.1%}, Daily Loss = {aggressive_config.daily_loss_limit:.1%}")
   |

E501 Line too long (147 > 100)
  --> scripts/demo_drawdown_protection.py:36:101
   |
34 | …
35 | …tive_config.max_drawdown_threshold:.1%}, Daily Loss = {conservative_config.daily_loss_limit:.1%}")
36 | …_config.max_drawdown_threshold:.1%}, Daily Loss = {balanced_config.daily_loss_limit:.1%}")
   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
37 | …ve_config.max_drawdown_threshold:.1%}, Daily Loss = {aggressive_config.daily_loss_limit:.1%}")
38 | …
   |

E501 Line too long (151 > 100)
  --> scripts/demo_drawdown_protection.py:37:101
   |
35 | …ve_config.max_drawdown_threshold:.1%}, Daily Loss = {conservative_config.daily_loss_limit:.1%}")
36 | …onfig.max_drawdown_threshold:.1%}, Daily Loss = {balanced_config.daily_loss_limit:.1%}")
37 | …_config.max_drawdown_threshold:.1%}, Daily Loss = {aggressive_config.daily_loss_limit:.1%}")
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
38 | …
   |

E501 Line too long (135 > 100)
  --> scripts/demo_drawdown_protection.py:84:101
   |
82 |         drawdown_pct = status["current_drawdown"] * 100
83 |
84 |         logging.info(f"{time}: ${equity:>8,.0f} {change:<15} | {trading_status:<12} | Drawdown: {drawdown_pct:>4.1f}% | {description}")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
85 |
86 |         # Additional logging for important events
   |

E501 Line too long (140 > 100)
  --> scripts/demo_drawdown_protection.py:88:100
   |
86 | …
87 | …wdown"] > config.MAX_DRAWDOWN_THRESHOLD:
88 | … TRIGGERED: {status['current_drawdown']:.1%} > {config.MAX_DRAWDOWN_THRESHOLD:.1%}"))
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
89 | …own"] > 0:
90 | …ity"] if status["peak_equity"] > 0 else 0
   |

E501 Line too long (106 > 100)
  --> scripts/demo_drawdown_protection.py:92:100
   |
90 |             recovery_ratio = equity / status["peak_equity"] if status["peak_equity"] > 0 else 0
91 |             if recovery_ratio >= breaker.recovery_threshold:
92 |                 logging.info(f"      🔄 TRADING RESUMED: Recovery to {recovery_ratio:.1%} of peak equity")
   |                                                                                                     ^^^^^^
93 |
94 |     logging.info(str("\n" + "=" * 60))
   |

E501 Line too long (149 > 100)
   --> scripts/demo_drawdown_protection.py:99:101
    |
 97 | …uity']:,.0f}"))
 98 | …
 99 | …urrent_drawdown'] for _, e, _ in trading_session for s in [breaker.get_status()]]):.1%}"))
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
100 | …f final_status['trading_allowed'] else '🔴 Trading Halted'}"))
    |

E501 Line too long (122 > 100)
   --> scripts/demo_drawdown_protection.py:100:100
    |
 98 |     logging.info(f"Final Equity: ${equity:,.0f}")
 99 |     logging.info(str(f"Max Drawdown Experienced: {max([s['current_drawdown'] for _, e, _ in trading_session for s in [breaker.get_sta…
100 |     logging.info(str(f"Final Status: {'🟢 Trading Allowed' if final_status['trading_allowed'] else '🔴 Trading Halted'}"))
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
101 |
102 |     logging.info("\n🛡️  Protection Summary:")
    |

W293 Blank line contains whitespace
  --> scripts/demo_grid_search.py:18:1
   |
16 |     Example evaluator function for backtesting.
17 |     In a real implementation, this would run your backtest here and return metrics dict.
18 |     
   | ^^^^
19 |     Args:
20 |         params: Dictionary of parameters to test
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> scripts/demo_grid_search.py:21:1
   |
19 |     Args:
20 |         params: Dictionary of parameters to test
21 |         
   | ^^^^^^^^
22 |     Returns:
23 |         Dictionary of performance metrics
   |
help: Remove whitespace from blank line

E501 Line too long (123 > 100)
  --> scripts/demo_grid_search.py:58:101
   |
56 |     }
57 |
58 |     logging.info(f"Testing {len(grid['kelly']) * len(grid['atr_mult']) * len(grid['lookback'])} parameter combinations...")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^
59 |     logging.info(f"Grid: {grid}\n")
   |

E501 Line too long (106 > 100)
  --> scripts/demo_grid_search.py:97:101
   |
95 |         out_dir = persist_artifacts(run, tmp_dir)
96 |         logging.info(f"\nArtifacts saved to: {out_dir}")
97 |         logging.info("(Note: Using temporary directory for demo - in production, use persistent storage)")
   |                                                                                                     ^^^^^^
98 |
99 |     logging.info("\n=== Grid Search Complete ===")
   |

E501 Line too long (102 > 100)
  --> scripts/demo_intelligent_position_management.py:74:100
   |
72 |         print()
73 |
74 |     logging.info("💡 Key Insight: System automatically adapts holding strategy to market conditions!")
   |                                                                                                     ^^
75 |     logging.info("   • Bull trends → Wider stops, more patient profit taking")
76 |     logging.info("   • High volatility → Tighter stops, quick profits, smaller sizes")
   |

E501 Line too long (103 > 100)
   --> scripts/demo_intelligent_position_management.py:140:101
    |
139 |     logging.info("\n🔹 MOMENTUM-BASED ADJUSTMENT:")
140 |     logging.info(f"   • Strong momentum (>{stop_manager.strong_momentum_threshold}): 1.3x wider stops")
    |                                                                                                     ^^^
141 |     logging.info(f"   • Weak momentum (<{stop_manager.weak_momentum_threshold}): 0.7x tighter stops")
142 |     logging.info("   • Adapts to trend strength changes")
    |

E501 Line too long (101 > 100)
   --> scripts/demo_intelligent_position_management.py:141:101
    |
139 |     logging.info("\n🔹 MOMENTUM-BASED ADJUSTMENT:")
140 |     logging.info(f"   • Strong momentum (>{stop_manager.strong_momentum_threshold}): 1.3x wider stops")
141 |     logging.info(f"   • Weak momentum (<{stop_manager.weak_momentum_threshold}): 0.7x tighter stops")
    |                                                                                                     ^
142 |     logging.info("   • Adapts to trend strength changes")
    |

E501 Line too long (103 > 100)
   --> scripts/demo_intelligent_position_management.py:191:101
    |
190 |     logging.info("\n🔹 CORRELATION-BASED ADJUSTMENTS:")
191 |     logging.info(f"   • Portfolio correlation >{profit_engine.correlation_threshold}: Reduce exposure")
    |                                                                                                     ^^^
192 |     logging.info("   • Sector concentration monitoring")
193 |     logging.info("   • Risk budget reallocation")
    |

E501 Line too long (102 > 100)
   --> scripts/demo_intelligent_position_management.py:231:101
    |
229 |     sectors = ['Technology', 'Financials', 'Healthcare']
230 |     for sector in sectors:
231 |         classification = corr_analyzer._get_symbol_sector('AAPL' if sector == 'Technology' else 'JPM')
    |                                                                                                     ^^
232 |         logging.info(f"   • {sector}: Auto-classification and monitoring")
    |

E501 Line too long (109 > 100)
  --> scripts/demo_no_trade_bands.py:89:101
   |
87 |         logging.info(f"  Trades needed: {trades_needed}/7 positions")
88 |         logging.info(f"  Total turnover: {total_turnover:.4f} ({total_turnover*100:.2f}%)")
89 |         logging.info(f"  Transaction cost savings: ~{(7-trades_needed)*0.0005*100:.2f}bps per avoided trade")
   |                                                                                                     ^^^^^^^^^
90 |
91 |     # Demonstrate with larger moves that should trigger trades
   |

E501 Line too long (126 > 100)
   --> scripts/demo_position_holding.py:112:101
    |
110 |     logging.info(f"• Enhanced signals: {len(enhanced_signals)}")
111 |     logging.info(f"• Filtered out: {len(original_signals) - len(enhanced_signals)}")
112 |     logging.info(f"• Churn reduction: {((len(original_signals) - len(enhanced_signals)) / len(original_signals) * 100):.1f}%")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

E501 Line too long (121 > 100)
   --> scripts/demo_position_holding.py:133:100
    |
132 |     for trade in trade_executions:
133 |         logging.info(str(f"📈 TRADE_EXECUTED: {trade['symbol']} {trade['side']} {trade['qty']} @ ${trade['price']:.2f}"))
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
134 |
135 |         # Simulate meta-learning trigger
    |

E501 Line too long (120 > 100)
  --> scripts/demo_short_selling_implementation.py:60:101
   |
58 |             with patch.object(engine, '_select_api', return_value=mock_api):
59 |                 with patch.object(engine, '_validate_short_selling', return_value=True):
60 |                     with patch.object(engine, '_assess_liquidity', side_effect=Exception("Stopped at liquidity check")):
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
61 |                         try:
62 |                             result = engine.execute_order("AAPL", 10, "sell_short")
   |

E501 Line too long (106 > 100)
  --> scripts/demo_short_selling_implementation.py:65:101
   |
63 |                         except Exception:
64 |                             pass  # Expected to stop at liquidity check
65 |                         logging.info("✓ sell_short order bypassed position checks and reached validation")
   |                                                                                                     ^^^^^^
66 |
67 |         # Test 3: Demonstrate order tracking
   |

E501 Line too long (105 > 100)
   --> scripts/demo_short_selling_implementation.py:119:101
    |
117 |         with _order_tracking_lock:
118 |             if "monitor_test_456" in _active_orders:
119 |                 _active_orders["monitor_test_456"].submitted_time = current_time - 700  # 700 seconds ago
    |                                                                                                     ^^^^^
120 |
121 |         # Test stale order cleanup
    |

E501 Line too long (110 > 100)
  --> scripts/demonstrate_optimization.py:47:101
   |
45 |         logging.info("\n  CONSERVATIVE MODE (Lower Risk):")
46 |         logging.info(f"  • KELLY_FRACTION: {conservative_config.kelly_fraction} (25% lower risk)")
47 |         logging.info(f"  • CONF_THRESHOLD: {conservative_config.conf_threshold} (85% confidence requirement)")
   |                                                                                                     ^^^^^^^^^^
48 |         logging.info(f"  • DAILY_LOSS_LIMIT: {conservative_config.daily_loss_limit} (3% daily loss limit)")
49 |         logging.info(f"  • CAPITAL_CAP: {conservative_config.capital_cap} (20% capital allocation)")
   |

E501 Line too long (107 > 100)
  --> scripts/demonstrate_optimization.py:48:101
   |
46 |         logging.info(f"  • KELLY_FRACTION: {conservative_config.kelly_fraction} (25% lower risk)")
47 |         logging.info(f"  • CONF_THRESHOLD: {conservative_config.conf_threshold} (85% confidence requirement)")
48 |         logging.info(f"  • DAILY_LOSS_LIMIT: {conservative_config.daily_loss_limit} (3% daily loss limit)")
   |                                                                                                     ^^^^^^^
49 |         logging.info(f"  • CAPITAL_CAP: {conservative_config.capital_cap} (20% capital allocation)")
50 |         logging.info(f"  • CONFIRMATION_COUNT: {conservative_config.confirmation_count} (Triple confirmation)")
   |

E501 Line too long (111 > 100)
  --> scripts/demonstrate_optimization.py:50:101
   |
48 |         logging.info(f"  • DAILY_LOSS_LIMIT: {conservative_config.daily_loss_limit} (3% daily loss limit)")
49 |         logging.info(f"  • CAPITAL_CAP: {conservative_config.capital_cap} (20% capital allocation)")
50 |         logging.info(f"  • CONFIRMATION_COUNT: {conservative_config.confirmation_count} (Triple confirmation)")
   |                                                                                                     ^^^^^^^^^^^
51 |
52 |         logging.info("\n  BALANCED MODE (Default):")
   |

E501 Line too long (106 > 100)
  --> scripts/demonstrate_optimization.py:54:101
   |
52 |         logging.info("\n  BALANCED MODE (Default):")
53 |         logging.info(f"  • KELLY_FRACTION: {balanced_config.kelly_fraction} (Balanced risk)")
54 |         logging.info(f"  • CONF_THRESHOLD: {balanced_config.conf_threshold} (75% confidence requirement)")
   |                                                                                                     ^^^^^^
55 |         logging.info(f"  • DAILY_LOSS_LIMIT: {balanced_config.daily_loss_limit} (7% daily loss limit)")
56 |         logging.info(f"  • CAPITAL_CAP: {balanced_config.capital_cap} (25% capital allocation)")
   |

E501 Line too long (103 > 100)
  --> scripts/demonstrate_optimization.py:55:101
   |
53 |         logging.info(f"  • KELLY_FRACTION: {balanced_config.kelly_fraction} (Balanced risk)")
54 |         logging.info(f"  • CONF_THRESHOLD: {balanced_config.conf_threshold} (75% confidence requirement)")
55 |         logging.info(f"  • DAILY_LOSS_LIMIT: {balanced_config.daily_loss_limit} (7% daily loss limit)")
   |                                                                                                     ^^^
56 |         logging.info(f"  • CAPITAL_CAP: {balanced_config.capital_cap} (25% capital allocation)")
57 |         logging.info(f"  • CONFIRMATION_COUNT: {balanced_config.confirmation_count} (Double confirmation)")
   |

E501 Line too long (107 > 100)
  --> scripts/demonstrate_optimization.py:57:101
   |
55 |         logging.info(f"  • DAILY_LOSS_LIMIT: {balanced_config.daily_loss_limit} (7% daily loss limit)")
56 |         logging.info(f"  • CAPITAL_CAP: {balanced_config.capital_cap} (25% capital allocation)")
57 |         logging.info(f"  • CONFIRMATION_COUNT: {balanced_config.confirmation_count} (Double confirmation)")
   |                                                                                                     ^^^^^^^
58 |
59 |         logging.info("\n  AGGRESSIVE MODE (Higher Risk):")
   |

E501 Line too long (107 > 100)
  --> scripts/demonstrate_optimization.py:60:101
   |
59 |         logging.info("\n  AGGRESSIVE MODE (Higher Risk):")
60 |         logging.info(f"  • KELLY_FRACTION: {aggressive_config.kelly_fraction} (75% higher risk tolerance)")
   |                                                                                                     ^^^^^^^
61 |         logging.info(f"  • CONF_THRESHOLD: {aggressive_config.conf_threshold} (65% confidence requirement)")
62 |         logging.info(f"  • DAILY_LOSS_LIMIT: {aggressive_config.daily_loss_limit} (8% daily loss limit)")
   |

E501 Line too long (108 > 100)
  --> scripts/demonstrate_optimization.py:61:101
   |
59 |         logging.info("\n  AGGRESSIVE MODE (Higher Risk):")
60 |         logging.info(f"  • KELLY_FRACTION: {aggressive_config.kelly_fraction} (75% higher risk tolerance)")
61 |         logging.info(f"  • CONF_THRESHOLD: {aggressive_config.conf_threshold} (65% confidence requirement)")
   |                                                                                                     ^^^^^^^^
62 |         logging.info(f"  • DAILY_LOSS_LIMIT: {aggressive_config.daily_loss_limit} (8% daily loss limit)")
63 |         logging.info(f"  • CAPITAL_CAP: {aggressive_config.capital_cap} (30% capital allocation)")
   |

E501 Line too long (105 > 100)
  --> scripts/demonstrate_optimization.py:62:101
   |
60 |         logging.info(f"  • KELLY_FRACTION: {aggressive_config.kelly_fraction} (75% higher risk tolerance)")
61 |         logging.info(f"  • CONF_THRESHOLD: {aggressive_config.conf_threshold} (65% confidence requirement)")
62 |         logging.info(f"  • DAILY_LOSS_LIMIT: {aggressive_config.daily_loss_limit} (8% daily loss limit)")
   |                                                                                                     ^^^^^
63 |         logging.info(f"  • CAPITAL_CAP: {aggressive_config.capital_cap} (30% capital allocation)")
64 |         logging.info(f"  • CONFIRMATION_COUNT: {aggressive_config.confirmation_count} (Single confirmation)")
   |

E501 Line too long (109 > 100)
  --> scripts/demonstrate_optimization.py:64:101
   |
62 |         logging.info(f"  • DAILY_LOSS_LIMIT: {aggressive_config.daily_loss_limit} (8% daily loss limit)")
63 |         logging.info(f"  • CAPITAL_CAP: {aggressive_config.capital_cap} (30% capital allocation)")
64 |         logging.info(f"  • CONFIRMATION_COUNT: {aggressive_config.confirmation_count} (Single confirmation)")
   |                                                                                                     ^^^^^^^^^
65 |
66 |         logging.info(str("\n" + "-"*60))
   |

E501 Line too long (111 > 100)
  --> scripts/demonstrate_optimization.py:70:101
   |
68 |         logging.info(str("-"*60))
69 |         logging.info("Centralized risk parameters with institutional-grade safety:")
70 |         logging.info(f"  • MAX_POSITION_SIZE: {balanced_config.max_position_size} USD (Single position limit)")
   |                                                                                                     ^^^^^^^^^^^
71 |         logging.info(f"  • MAX_POSITION_SIZE_PCT: {balanced_config.max_position_size_pct*100:.1f}% (Portfolio percentage limit)")
72 |         logging.info(f"  • MAX_PORTFOLIO_RISK: {balanced_config.max_portfolio_risk*100:.1f}% (Total portfolio risk)")
   |

E501 Line too long (129 > 100)
  --> scripts/demonstrate_optimization.py:71:101
   |
69 | …     logging.info("Centralized risk parameters with institutional-grade safety:")
70 | …     logging.info(f"  • MAX_POSITION_SIZE: {balanced_config.max_position_size} USD (Single position limit)")
71 | …     logging.info(f"  • MAX_POSITION_SIZE_PCT: {balanced_config.max_position_size_pct*100:.1f}% (Portfolio percentage limit)")
   |                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
72 | …     logging.info(f"  • MAX_PORTFOLIO_RISK: {balanced_config.max_portfolio_risk*100:.1f}% (Total portfolio risk)")
73 | …     logging.info(f"  • MAX_CORRELATION_EXPOSURE: {balanced_config.max_correlation_exposure*100:.0f}% (Diversification requirement)")
   |

E501 Line too long (117 > 100)
  --> scripts/demonstrate_optimization.py:72:101
   |
70 | …     logging.info(f"  • MAX_POSITION_SIZE: {balanced_config.max_position_size} USD (Single position limit)")
71 | …     logging.info(f"  • MAX_POSITION_SIZE_PCT: {balanced_config.max_position_size_pct*100:.1f}% (Portfolio percentage limit)")
72 | …     logging.info(f"  • MAX_PORTFOLIO_RISK: {balanced_config.max_portfolio_risk*100:.1f}% (Total portfolio risk)")
   |                                                                                                   ^^^^^^^^^^^^^^^^^
73 | …     logging.info(f"  • MAX_CORRELATION_EXPOSURE: {balanced_config.max_correlation_exposure*100:.0f}% (Diversification requirement)")
74 | …     logging.info(f"  • STOP_LOSS_MULTIPLIER: {balanced_config.stop_loss_multiplier}x (Capital preservation)")
   |

E501 Line too long (136 > 100)
  --> scripts/demonstrate_optimization.py:73:101
   |
71 | …alanced_config.max_position_size_pct*100:.1f}% (Portfolio percentage limit)")
72 | …nced_config.max_portfolio_risk*100:.1f}% (Total portfolio risk)")
73 | … {balanced_config.max_correlation_exposure*100:.0f}% (Diversification requirement)")
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
74 | …lanced_config.stop_loss_multiplier}x (Capital preservation)")
75 | …balanced_config.take_profit_multiplier}x (Profit taking)")
   |

E501 Line too long (113 > 100)
  --> scripts/demonstrate_optimization.py:74:101
   |
72 | …     logging.info(f"  • MAX_PORTFOLIO_RISK: {balanced_config.max_portfolio_risk*100:.1f}% (Total portfolio risk)")
73 | …     logging.info(f"  • MAX_CORRELATION_EXPOSURE: {balanced_config.max_correlation_exposure*100:.0f}% (Diversification requirement)")
74 | …     logging.info(f"  • STOP_LOSS_MULTIPLIER: {balanced_config.stop_loss_multiplier}x (Capital preservation)")
   |                                                                                                   ^^^^^^^^^^^^^
75 | …     logging.info(f"  • TAKE_PROFIT_MULTIPLIER: {balanced_config.take_profit_multiplier}x (Profit taking)")
   |

E501 Line too long (110 > 100)
  --> scripts/demonstrate_optimization.py:75:101
   |
73 |         logging.info(f"  • MAX_CORRELATION_EXPOSURE: {balanced_config.max_correlation_exposure*100:.0f}% (Diversification requirement)…
74 |         logging.info(f"  • STOP_LOSS_MULTIPLIER: {balanced_config.stop_loss_multiplier}x (Capital preservation)")
75 |         logging.info(f"  • TAKE_PROFIT_MULTIPLIER: {balanced_config.take_profit_multiplier}x (Profit taking)")
   |                                                                                                     ^^^^^^^^^^
76 |
77 |         logging.info(str("\n" + "-"*60))
   |

E501 Line too long (117 > 100)
  --> scripts/demonstrate_optimization.py:81:101
   |
79 |         logging.info(str("-"*60))
80 |         logging.info("Enhanced execution with better fills and quality control:")
81 |         logging.info(f"  • PARTICIPATION_RATE: {balanced_config.participation_rate*100:.0f}% (Market participation)")
   |                                                                                                     ^^^^^^^^^^^^^^^^^
82 |         logging.info(f"  • MAX_SLIPPAGE_BPS: {balanced_config.max_slippage_bps} bps (Slippage control)")
83 |         logging.info(f"  • ORDER_TIMEOUT: {balanced_config.order_timeout_seconds}s (Order management)")
   |

E501 Line too long (104 > 100)
  --> scripts/demonstrate_optimization.py:82:101
   |
80 |         logging.info("Enhanced execution with better fills and quality control:")
81 |         logging.info(f"  • PARTICIPATION_RATE: {balanced_config.participation_rate*100:.0f}% (Market participation)")
82 |         logging.info(f"  • MAX_SLIPPAGE_BPS: {balanced_config.max_slippage_bps} bps (Slippage control)")
   |                                                                                                     ^^^^
83 |         logging.info(f"  • ORDER_TIMEOUT: {balanced_config.order_timeout_seconds}s (Order management)")
84 |         logging.info(f"  • LIMIT_ORDER_SLIPPAGE: {balanced_config.limit_order_slippage} (Price improvement)")
   |

E501 Line too long (103 > 100)
  --> scripts/demonstrate_optimization.py:83:101
   |
81 |         logging.info(f"  • PARTICIPATION_RATE: {balanced_config.participation_rate*100:.0f}% (Market participation)")
82 |         logging.info(f"  • MAX_SLIPPAGE_BPS: {balanced_config.max_slippage_bps} bps (Slippage control)")
83 |         logging.info(f"  • ORDER_TIMEOUT: {balanced_config.order_timeout_seconds}s (Order management)")
   |                                                                                                     ^^^
84 |         logging.info(f"  • LIMIT_ORDER_SLIPPAGE: {balanced_config.limit_order_slippage} (Price improvement)")
85 |         logging.info(f"  • POV_SLICE_PCT: {balanced_config.pov_slice_pct} (Volume participation)")
   |

E501 Line too long (109 > 100)
  --> scripts/demonstrate_optimization.py:84:101
   |
82 |         logging.info(f"  • MAX_SLIPPAGE_BPS: {balanced_config.max_slippage_bps} bps (Slippage control)")
83 |         logging.info(f"  • ORDER_TIMEOUT: {balanced_config.order_timeout_seconds}s (Order management)")
84 |         logging.info(f"  • LIMIT_ORDER_SLIPPAGE: {balanced_config.limit_order_slippage} (Price improvement)")
   |                                                                                                     ^^^^^^^^^
85 |         logging.info(f"  • POV_SLICE_PCT: {balanced_config.pov_slice_pct} (Volume participation)")
   |

E501 Line too long (119 > 100)
  --> scripts/demonstrate_optimization.py:91:101
   |
89 |         logging.info(str("-"*60))
90 |         logging.info("Advanced signal processing with adaptive parameters:")
91 |         logging.info(f"  • SIGNAL_CONFIRMATION_BARS: {balanced_config.signal_confirmation_bars} (Confirmation period)")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^
92 |         logging.info(f"  • SIGNAL_PERIOD: {balanced_config.signal_period} (Technical indicator period)")
93 |         logging.info(f"  • FAST_PERIOD: {balanced_config.fast_period} (Fast moving average)")
   |

E501 Line too long (104 > 100)
  --> scripts/demonstrate_optimization.py:92:101
   |
90 |         logging.info("Advanced signal processing with adaptive parameters:")
91 |         logging.info(f"  • SIGNAL_CONFIRMATION_BARS: {balanced_config.signal_confirmation_bars} (Confirmation period)")
92 |         logging.info(f"  • SIGNAL_PERIOD: {balanced_config.signal_period} (Technical indicator period)")
   |                                                                                                     ^^^^
93 |         logging.info(f"  • FAST_PERIOD: {balanced_config.fast_period} (Fast moving average)")
94 |         logging.info(f"  • SLOW_PERIOD: {balanced_config.slow_period} (Slow moving average)")
   |

E501 Line too long (108 > 100)
  --> scripts/demonstrate_optimization.py:95:101
   |
93 |         logging.info(f"  • FAST_PERIOD: {balanced_config.fast_period} (Fast moving average)")
94 |         logging.info(f"  • SLOW_PERIOD: {balanced_config.slow_period} (Slow moving average)")
95 |         logging.info(f"  • ENTRY_START_OFFSET: {balanced_config.entry_start_offset_min} min (Entry timing)")
   |                                                                                                     ^^^^^^^^
96 |         logging.info(f"  • ENTRY_END_OFFSET: {balanced_config.entry_end_offset_min} min (Exit timing)")
   |

E501 Line too long (103 > 100)
  --> scripts/demonstrate_optimization.py:96:101
   |
94 |         logging.info(f"  • SLOW_PERIOD: {balanced_config.slow_period} (Slow moving average)")
95 |         logging.info(f"  • ENTRY_START_OFFSET: {balanced_config.entry_start_offset_min} min (Entry timing)")
96 |         logging.info(f"  • ENTRY_END_OFFSET: {balanced_config.entry_end_offset_min} min (Exit timing)")
   |                                                                                                     ^^^
97 |
98 |         logging.info(str("\n" + "-"*60))
   |

E501 Line too long (105 > 100)
   --> scripts/demonstrate_optimization.py:102:101
    |
100 |         logging.info(str("-"*60))
101 |         logging.info("Higher standards for strategy quality:")
102 |         logging.info(f"  • MIN_SHARPE_RATIO: {balanced_config.min_sharpe_ratio} (Risk-adjusted returns)")
    |                                                                                                     ^^^^^
103 |         logging.info(f"  • MAX_DRAWDOWN: {balanced_config.max_drawdown*100:.0f}% (Capital preservation)")
104 |         logging.info(f"  • MIN_WIN_RATE: {balanced_config.min_win_rate*100:.0f}% (Strategy quality)")
    |

E501 Line too long (105 > 100)
   --> scripts/demonstrate_optimization.py:103:101
    |
101 |         logging.info("Higher standards for strategy quality:")
102 |         logging.info(f"  • MIN_SHARPE_RATIO: {balanced_config.min_sharpe_ratio} (Risk-adjusted returns)")
103 |         logging.info(f"  • MAX_DRAWDOWN: {balanced_config.max_drawdown*100:.0f}% (Capital preservation)")
    |                                                                                                     ^^^^^
104 |         logging.info(f"  • MIN_WIN_RATE: {balanced_config.min_win_rate*100:.0f}% (Strategy quality)")
105 |         logging.info(f"  • MIN_PROFIT_FACTOR: {balanced_config.min_profit_factor} (Profitability threshold)")
    |

E501 Line too long (101 > 100)
   --> scripts/demonstrate_optimization.py:104:101
    |
102 |         logging.info(f"  • MIN_SHARPE_RATIO: {balanced_config.min_sharpe_ratio} (Risk-adjusted returns)")
103 |         logging.info(f"  • MAX_DRAWDOWN: {balanced_config.max_drawdown*100:.0f}% (Capital preservation)")
104 |         logging.info(f"  • MIN_WIN_RATE: {balanced_config.min_win_rate*100:.0f}% (Strategy quality)")
    |                                                                                                     ^
105 |         logging.info(f"  • MIN_PROFIT_FACTOR: {balanced_config.min_profit_factor} (Profitability threshold)")
106 |         logging.info(f"  • MAX_VAR_95: {balanced_config.max_var_95*100:.0f}% (Value at Risk)")
    |

E501 Line too long (109 > 100)
   --> scripts/demonstrate_optimization.py:105:101
    |
103 |         logging.info(f"  • MAX_DRAWDOWN: {balanced_config.max_drawdown*100:.0f}% (Capital preservation)")
104 |         logging.info(f"  • MIN_WIN_RATE: {balanced_config.min_win_rate*100:.0f}% (Strategy quality)")
105 |         logging.info(f"  • MIN_PROFIT_FACTOR: {balanced_config.min_profit_factor} (Profitability threshold)")
    |                                                                                                     ^^^^^^^^^
106 |         logging.info(f"  • MAX_VAR_95: {balanced_config.max_var_95*100:.0f}% (Value at Risk)")
    |

E501 Line too long (137 > 100)
   --> scripts/demonstrate_optimization.py:163:101
    |
161 | …
162 | …
163 | …n([k for k in conservative_config.__dict__ if not k.startswith('_')])} parameters"))
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
164 | …n([k for k in balanced_config.__dict__ if not k.startswith('_')])} parameters"))
165 | …n([k for k in aggressive_config.__dict__ if not k.startswith('_')])} parameters"))
    |

E501 Line too long (133 > 100)
   --> scripts/demonstrate_optimization.py:164:101
    |
162 | …)
163 | …len([k for k in conservative_config.__dict__ if not k.startswith('_')])} parameters"))
164 | …len([k for k in balanced_config.__dict__ if not k.startswith('_')])} parameters"))
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
165 | …len([k for k in aggressive_config.__dict__ if not k.startswith('_')])} parameters"))
    |

E501 Line too long (135 > 100)
   --> scripts/demonstrate_optimization.py:165:101
    |
163 | …en([k for k in conservative_config.__dict__ if not k.startswith('_')])} parameters"))
164 | …en([k for k in balanced_config.__dict__ if not k.startswith('_')])} parameters"))
165 | …en([k for k in aggressive_config.__dict__ if not k.startswith('_')])} parameters"))
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
166 | …
167 | …
    |

E501 Line too long (109 > 100)
   --> scripts/demonstrate_optimization_simple.py:119:101
    |
117 |         logging.info("Projected improvements from parameter optimizations:")
118 |         logging.info("\n  🎯 Profit Potential:")
119 |         logging.info("    • Higher portfolio risk allocation (2.5% vs 2.0%) = +25% position sizing capacity")
    |                                                                                                     ^^^^^^^^^
120 |         logging.info("    • More aggressive bull market positioning = Enhanced upside capture")
121 |         logging.info("    • Faster execution (15% vs 10% participation) = Reduced market impact")
    |

E501 Line too long (104 > 100)
   --> scripts/demonstrate_optimization_simple.py:124:101
    |
123 |         logging.info("\n  📊 Risk-Adjusted Returns:")
124 |         logging.info("    • Reduced Kelly fraction (15% vs 25%) = Better risk-adjusted position sizing")
    |                                                                                                     ^^^^
125 |         logging.info("    • Tighter stops (1.8x vs 2.0x ATR) = Improved capital preservation")
126 |         logging.info("    • Lower correlation limits (15% vs 20%) = Enhanced diversification")
    |

E501 Line too long (106 > 100)
   --> scripts/demonstrate_optimization_simple.py:129:101
    |
128 |         logging.info("\n  ⚡ Execution Quality:")
129 |         logging.info("    • Tighter slippage control (15 vs 20 bps) = +25% execution quality improvement")
    |                                                                                                     ^^^^^^
130 |         logging.info("    • Faster timeouts (180s vs 300s) = +40% faster market adaptation")
131 |         logging.info("    • Optimized slice intervals = More efficient order execution")
    |

E501 Line too long (102 > 100)
   --> scripts/demonstrate_optimization_simple.py:134:101
    |
133 |         logging.info("\n  🛡️ Risk Management:")
134 |         logging.info("    • Lower drawdown tolerance (15% vs 20%) = +25% better capital preservation")
    |                                                                                                     ^^
135 |         logging.info("    • Higher quality thresholds (1.2 vs 1.0 Sharpe) = Better strategy selection")
136 |         logging.info("    • Enhanced regime detection = More responsive to market conditions")
    |

E501 Line too long (103 > 100)
   --> scripts/demonstrate_optimization_simple.py:135:101
    |
133 |         logging.info("\n  🛡️ Risk Management:")
134 |         logging.info("    • Lower drawdown tolerance (15% vs 20%) = +25% better capital preservation")
135 |         logging.info("    • Higher quality thresholds (1.2 vs 1.0 Sharpe) = Better strategy selection")
    |                                                                                                     ^^^
136 |         logging.info("    • Enhanced regime detection = More responsive to market conditions")
    |

E501 Line too long (105 > 100)
   --> scripts/demonstrate_optimization_simple.py:152:101
    |
150 |         logging.info("    • All risk parameters within [0.01-0.05, 0.05-0.15, 1.0-3.0] bounds ✅")
151 |         logging.info("    • All execution parameters within [0.05-0.25, 5-50, 60-600] bounds ✅")
152 |         logging.info("    • All performance parameters within [0.5-2.0, 0.05-0.30, 0.30-0.70] bounds ✅")
    |                                                                                                     ^^^^^
153 |
154 |         logging.info(str("\n" + "="*80))
    |

E501 Line too long (101 > 100)
   --> scripts/demonstrate_optimization_simple.py:178:101
    |
176 |         logging.info("   • Average Slippage: Should decrease below 15 bps")
177 |         logging.info("   • Order Fill Rate: Should improve with faster participation")
178 |         logging.info("   • Portfolio Volatility: Should be better managed with tighter correlations")
    |                                                                                                     ^
179 |
180 |         logging.info("\n⚠️  Risk Mitigation Measures:")
    |

E501 Line too long (114 > 100)
   --> scripts/demonstrate_optimization_simple.py:190:101
    |
188 |         logging.info("PARAMETER OPTIMIZATION COMPLETE")
189 |         logging.info(str("="*80))
190 |         logging.info("All optimizations successfully implemented with institutional safety standards maintained.")
    |                                                                                                     ^^^^^^^^^^^^^^
191 |
192 |         return True
    |

E501 Line too long (117 > 100)
   --> scripts/demonstrate_portfolio_optimization.py:133:101
    |
131 |             current_pos = current_positions.get(symbol, 0.0)
132 |             position_change = abs(proposed_position - current_pos)
133 |             expected_profit = position_change * market_data['prices'].get(symbol, 100.0) * 0.02  # 2% expected return
    |                                                                                                     ^^^^^^^^^^^^^^^^^
134 |
135 |             profitability = transaction_calculator.validate_trade_profitability(
    |

E501 Line too long (143 > 100)
   --> scripts/demonstrate_portfolio_optimization.py:150:100
    |
148 | …
149 | …
150 | …Expected profit ${expected_profit:.2f} vs cost ${profitability.transaction_cost:.2f}")
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
151 | …
152 | …
    |

E501 Line too long (101 > 100)
   --> scripts/demonstrate_portfolio_optimization.py:198:100
    |
196 |     logging.info("   ✅ Comprehensive transaction cost analysis with safety margins")
197 |     logging.info("   ✅ Correlation impact assessment and penalty application")
198 |     logging.info(f"   ✅ Achieved {reduction_percentage:.1f}% churn reduction in this demonstration")
    |                                                                                                     ^
199 |     logging.info("   ✅ Tax-aware quarterly rebalancing prioritization")
200 |     logging.info("   ✅ Crisis and volatility regime protective measures")
    |

W293 Blank line contains whitespace
  --> scripts/error_handling.py:35:1
   |
33 |     """
34 |     Decorator for robust error handling in trading operations.
35 |     
   | ^^^^
36 |     Args:
37 |         error_type: Type of exception to catch
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> scripts/error_handling.py:74:1
   |
72 |     """
73 |     Safely execute API calls with retry logic.
74 |     
   | ^^^^
75 |     Args:
76 |         func: Function to execute
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> scripts/error_handling.py:79:1
   |
77 |         retries: Number of retry attempts
78 |         delay: Delay between retries in seconds
79 |         
   | ^^^^^^^^
80 |     Returns:
81 |         Function result or None on failure
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/error_handling.py:102:1
    |
100 |     """
101 |     Validate trade data before execution.
102 |     
    | ^^^^
103 |     Args:
104 |         symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/error_handling.py:108:1
    |
106 |         side: 'buy' or 'sell'
107 |         price: Optional price for validation
108 |         
    | ^^^^^^^^
109 |     Returns:
110 |         True if data is valid, False otherwise
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/error_handling.py:139:1
    |
137 |     """
138 |     Perform graceful shutdown of trading operations.
139 |     
    | ^^^^
140 |     Args:
141 |         reason: Reason for shutdown
    |
help: Remove whitespace from blank line

E501 Line too long (109 > 100)
  --> scripts/final_validation_report.py:16:101
   |
14 |     """Validate Issue 1: Meta-Learning System Not Functioning"""
15 |     logging.info("🔍 Issue 1: Meta-Learning System Not Functioning")
16 |     logging.info("   Problem: 'METALEARN_EMPTY_TRADE_LOG - No valid trades found' despite successful trades")
   |                                                                                                     ^^^^^^^^^
17 |     logging.info("   Root Cause: Audit-to-meta conversion not triggered automatically")
   |

E501 Line too long (102 > 100)
  --> scripts/final_validation_report.py:70:100
   |
68 |         fixes_found = 0
69 |         if '"requested_qty": requested_qty' in content:
70 |             logging.info("   ✅ Fix: FULL_FILL_SUCCESS now logs both requested and filled quantities")
   |                                                                                                     ^^
71 |             fixes_found += 1
   |

F401 `production_monitoring.HealthCheckResult` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/health_check.py:34:60
   |
32 |         get_production_monitor,
33 |     )
34 |     from production_monitoring import HealthCheckResult as ProdHealthCheckResult
   |                                                            ^^^^^^^^^^^^^^^^^^^^^
35 |     from production_monitoring import HealthStatus as ProdHealthStatus
36 |     PRODUCTION_MONITORING_AVAILABLE = True
   |
help: Remove unused import: `production_monitoring.HealthCheckResult`

F401 `production_monitoring.HealthStatus` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/health_check.py:35:55
   |
33 |     )
34 |     from production_monitoring import HealthCheckResult as ProdHealthCheckResult
35 |     from production_monitoring import HealthStatus as ProdHealthStatus
   |                                                       ^^^^^^^^^^^^^^^^
36 |     PRODUCTION_MONITORING_AVAILABLE = True
37 | except ImportError:
   |
help: Remove unused import: `production_monitoring.HealthStatus`

F401 `ai_trading.core.bot_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/health_check.py:469:41
    |
467 |         # Check if trading modules are importable
468 |         try:
469 |             from ai_trading.core import bot_engine
    |                                         ^^^^^^^^^^
470 |             details["bot_engine"] = "OK"
471 |         except ImportError as e:
    |
help: Remove unused import: `ai_trading.core.bot_engine`

F401 `trade_execution` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/health_check.py:476:20
    |
475 |         try:
476 |             import trade_execution
    |                    ^^^^^^^^^^^^^^^
477 |             details["trade_execution"] = "OK"
478 |         except ImportError as e:
    |
help: Remove unused import: `trade_execution`

E501 Line too long (128 > 100)
   --> scripts/integration_test.py:180:101
    |
178 | …     # Look for the specific import patterns we implemented
179 | …     if filename == "profile_indicators.py":
180 | …         assert "import ai_trading.signals as signals" in content, f"Missing ai_trading signals import in {filename}"
    |                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
181 | …         assert "import ai_trading.indicators as indicators" in content, f"Missing ai_trading indicators import in {filename}"
182 | …     else:
    |

E501 Line too long (137 > 100)
   --> scripts/integration_test.py:181:101
    |
179 | …     if filename == "profile_indicators.py":
180 | …         assert "import ai_trading.signals as signals" in content, f"Missing ai_trading signals import in {filename}"
181 | …         assert "import ai_trading.indicators as indicators" in content, f"Missing ai_trading indicators import in {filename}"
    |                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
182 | …     else:
183 | …         assert "from ai_trading." in content, f"Missing ai_trading imports in {filename}"
    |

E501 Line too long (101 > 100)
   --> scripts/integration_test.py:183:101
    |
181 | …         assert "import ai_trading.indicators as indicators" in content, f"Missing ai_trading indicators import in {filename}"
182 | …     else:
183 | …         assert "from ai_trading." in content, f"Missing ai_trading imports in {filename}"
    |                                                                                           ^
184 | …     assert "except Exception:" in content, f"Missing fallback imports in {filename}"
    |

E501 Line too long (146 > 100)
   --> scripts/memory_optimizer.py:124:101
    |
123 | …
124 | …{result['objects_collected']} objects collected in {result['collection_time_ms']:.2f}ms")
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
125 | …
126 | …
    |

E501 Line too long (107 > 100)
   --> scripts/memory_optimizer.py:295:101
    |
294 |         final_memory = self.get_memory_usage()
295 |         self.logger.warning(f"Emergency cleanup completed. Current memory: {final_memory['rss_mb']:.2f}MB")
    |                                                                                                     ^^^^^^^
296 |
297 |         return final_memory
    |

E501 Line too long (116 > 100)
  --> scripts/ml_model.py:43:101
   |
42 | # Prefer spec check over ImportError guards
43 | if importlib.util.find_spec("sklearn") is not None and importlib.util.find_spec("sklearn.linear_model") is not None:
   |                                                                                                     ^^^^^^^^^^^^^^^^
44 |     from sklearn.linear_model import LinearRegression
45 | else:
   |

E501 Line too long (102 > 100)
   --> scripts/monitoring_dashboard.py:249:101
    |
247 |             win_rate = len(winning_trades) / len(recent_trades) * 100 if recent_trades else 0
248 |             avg_win = statistics.mean([t['pnl'] for t in winning_trades]) if winning_trades else 0
249 |             avg_loss = statistics.mean([abs(t['pnl']) for t in losing_trades]) if losing_trades else 0
    |                                                                                                     ^^
250 |             profit_factor = abs(avg_win / avg_loss) if avg_loss > 0 else 0
    |

E501 Line too long (110 > 100)
   --> scripts/monitoring_dashboard.py:343:101
    |
341 |                 var_95=abs(var_95),
342 |                 var_99=abs(var_99),
343 |                 expected_shortfall=abs(statistics.mean(sorted_pnl[:var_95_index])) if var_95_index > 0 else 0,
    |                                                                                                     ^^^^^^^^^^
344 |                 beta=1.0,  # Would calculate vs benchmark
345 |                 volatility=volatility,
    |

E501 Line too long (114 > 100)
   --> scripts/monitoring_dashboard.py:382:101
    |
381 |             # Check risk thresholds
382 |             if latest_risk and latest_risk.get('current_drawdown', 0) > self.alert_thresholds['drawdown_percent']:
    |                                                                                                     ^^^^^^^^^^^^^^
383 |                 self.add_alert(
384 |                     'CRITICAL',
    |

E501 Line too long (110 > 100)
   --> scripts/monitoring_dashboard.py:551:101
    |
549 |         body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
550 |         .container { max-width: 1200px; margin: 0 auto; }
551 |         .header { background: #2c3e50; color: white; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
    |                                                                                                     ^^^^^^^^^^
552 |         .metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
553 |         .metric-card { background: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
    |

E501 Line too long (112 > 100)
   --> scripts/monitoring_dashboard.py:552:101
    |
550 |         .container { max-width: 1200px; margin: 0 auto; }
551 |         .header { background: #2c3e50; color: white; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
552 |         .metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
    |                                                                                                     ^^^^^^^^^^^^
553 |         .metric-card { background: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
554 |         .metric-title { font-size: 18px; font-weight: bold; margin-bottom: 10px; color: #2c3e50; }
    |

E501 Line too long (117 > 100)
   --> scripts/monitoring_dashboard.py:553:101
    |
551 |         .header { background: #2c3e50; color: white; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
552 |         .metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
553 |         .metric-card { background: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
    |                                                                                                     ^^^^^^^^^^^^^^^^^
554 |         .metric-title { font-size: 18px; font-weight: bold; margin-bottom: 10px; color: #2c3e50; }
555 |         .metric-value { font-size: 24px; font-weight: bold; color: #27ae60; }
    |

E501 Line too long (130 > 100)
   --> scripts/monitoring_dashboard.py:563:101
    |
561 |         .alert-critical { background: #e74c3c; color: white; }
562 |         .alert-info { background: #3498db; color: white; }
563 |         .refresh-btn { background: #3498db; color: white; border: none; padding: 10px 20px; border-radius: 3px; cursor: pointer; }
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
564 |         .status-indicator { display: inline-block; width: 10px; height: 10px; border-radius: 50%; margin-right: 5px; }
565 |         .status-healthy { background: #27ae60; }
    |

E501 Line too long (118 > 100)
   --> scripts/monitoring_dashboard.py:564:101
    |
562 |         .alert-info { background: #3498db; color: white; }
563 |         .refresh-btn { background: #3498db; color: white; border: none; padding: 10px 20px; border-radius: 3px; cursor: pointer; }
564 |         .status-indicator { display: inline-block; width: 10px; height: 10px; border-radius: 50%; margin-right: 5px; }
    |                                                                                                     ^^^^^^^^^^^^^^^^^^
565 |         .status-healthy { background: #27ae60; }
566 |         .status-warning { background: #f39c12; }
    |

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:577:1
    |
575 |             <button class="refresh-btn" onclick="refreshData()">Refresh Data</button>
576 |         </div>
577 |         
    | ^^^^^^^^
578 |         <div id="alerts-section">
579 |             <!-- Alerts will be loaded here -->
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:581:1
    |
579 |             <!-- Alerts will be loaded here -->
580 |         </div>
581 |         
    | ^^^^^^^^
582 |         <div class="metrics-grid">
583 |             <div class="metric-card">
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:590:1
    |
588 |                 </div>
589 |             </div>
590 |             
    | ^^^^^^^^^^^^
591 |             <div class="metric-card">
592 |                 <div class="metric-title">Total P&L</div>
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:596:1
    |
594 |                 <div class="metric-change" id="pnl-change">No change</div>
595 |             </div>
596 |             
    | ^^^^^^^^^^^^
597 |             <div class="metric-card">
598 |                 <div class="metric-title">Win Rate</div>
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:602:1
    |
600 |                 <div class="metric-change" id="win-rate-change">--</div>
601 |             </div>
602 |             
    | ^^^^^^^^^^^^
603 |             <div class="metric-card">
604 |                 <div class="metric-title">Active Positions</div>
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:608:1
    |
606 |                 <div class="metric-change" id="positions-change">--</div>
607 |             </div>
608 |             
    | ^^^^^^^^^^^^
609 |             <div class="metric-card">
610 |                 <div class="metric-title">CPU Usage</div>
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:614:1
    |
612 |                 <div class="metric-change" id="cpu-change">--</div>
613 |             </div>
614 |             
    | ^^^^^^^^^^^^
615 |             <div class="metric-card">
616 |                 <div class="metric-title">Memory Usage</div>
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:621:1
    |
619 |             </div>
620 |         </div>
621 |         
    | ^^^^^^^^
622 |         <div class="metrics-grid" style="margin-top: 20px;">
623 |             <div class="metric-card">
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:631:1
    |
629 |                 </div>
630 |             </div>
631 |             
    | ^^^^^^^^^^^^
632 |             <div class="metric-card">
633 |                 <div class="metric-title">Recent Trades</div>
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:640:1
    |
638 |         </div>
639 |     </div>
640 |     
    | ^^^^
641 |     <script>
642 |         function refreshData() {
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:656:1
    |
654 |             .catch(error => console.error('Error fetching data:', error));
655 |         }
656 |         
    | ^^^^^^^^
657 |         function updateMetrics(data) {
658 |             if (data.trading_metrics) {
    |
help: Remove whitespace from blank line

E501 Line too long (122 > 100)
   --> scripts/monitoring_dashboard.py:659:101
    |
657 |         function updateMetrics(data) {
658 |             if (data.trading_metrics) {
659 |                 document.getElementById('total-pnl').textContent = '$' + (data.trading_metrics.total_pnl || 0).toFixed(2);
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
660 |                 document.getElementById('win-rate').textContent = (data.trading_metrics.win_rate || 0).toFixed(1) + '%';
661 |             }
    |

E501 Line too long (120 > 100)
   --> scripts/monitoring_dashboard.py:660:101
    |
658 |             if (data.trading_metrics) {
659 |                 document.getElementById('total-pnl').textContent = '$' + (data.trading_metrics.total_pnl || 0).toFixed(2);
660 |                 document.getElementById('win-rate').textContent = (data.trading_metrics.win_rate || 0).toFixed(1) + '%';
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
661 |             }
    |

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:662:1
    |
660 |                 document.getElementById('win-rate').textContent = (data.trading_metrics.win_rate || 0).toFixed(1) + '%';
661 |             }
662 |             
    | ^^^^^^^^^^^^
663 |             if (data.performance_kpis) {
664 |                 document.getElementById('cpu-usage').textContent = (data.performance_kpis.cpu_utilization || 0).toFixed(1) + '%';
    |
help: Remove whitespace from blank line

E501 Line too long (129 > 100)
   --> scripts/monitoring_dashboard.py:664:101
    |
663 | …     if (data.performance_kpis) {
664 | …         document.getElementById('cpu-usage').textContent = (data.performance_kpis.cpu_utilization || 0).toFixed(1) + '%';
    |                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
665 | …         document.getElementById('memory-usage').textContent = (data.performance_kpis.memory_utilization || 0).toFixed(1) + '%';
666 | …         document.getElementById('active-positions').textContent = data.performance_kpis.active_positions || 0;
    |

E501 Line too long (135 > 100)
   --> scripts/monitoring_dashboard.py:665:101
    |
663 | …
664 | ….textContent = (data.performance_kpis.cpu_utilization || 0).toFixed(1) + '%';
665 | …e').textContent = (data.performance_kpis.memory_utilization || 0).toFixed(1) + '%';
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
666 | …tions').textContent = data.performance_kpis.active_positions || 0;
667 | …
    |

E501 Line too long (118 > 100)
   --> scripts/monitoring_dashboard.py:666:101
    |
664 | …         document.getElementById('cpu-usage').textContent = (data.performance_kpis.cpu_utilization || 0).toFixed(1) + '%';
665 | …         document.getElementById('memory-usage').textContent = (data.performance_kpis.memory_utilization || 0).toFixed(1) + '%';
666 | …         document.getElementById('active-positions').textContent = data.performance_kpis.active_positions || 0;
    |                                                                                               ^^^^^^^^^^^^^^^^^^
667 | …     }
    |

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:668:1
    |
666 |                 document.getElementById('active-positions').textContent = data.performance_kpis.active_positions || 0;
667 |             }
668 |             
    | ^^^^^^^^^^^^
669 |             if (data.risk_metrics) {
670 |                 document.getElementById('var-95').textContent = '$' + (data.risk_metrics.var_95 || 0).toFixed(2);
    |
help: Remove whitespace from blank line

E501 Line too long (113 > 100)
   --> scripts/monitoring_dashboard.py:670:101
    |
669 |             if (data.risk_metrics) {
670 |                 document.getElementById('var-95').textContent = '$' + (data.risk_metrics.var_95 || 0).toFixed(2);
    |                                                                                                     ^^^^^^^^^^^^^
671 |                 document.getElementById('max-drawdown').textContent = (data.risk_metrics.max_drawdown || 0).toFixed(1) + '%';
672 |                 document.getElementById('volatility').textContent = ((data.risk_metrics.volatility || 0) * 100).toFixed(2) + '%';
    |

E501 Line too long (125 > 100)
   --> scripts/monitoring_dashboard.py:671:101
    |
669 |             if (data.risk_metrics) {
670 |                 document.getElementById('var-95').textContent = '$' + (data.risk_metrics.var_95 || 0).toFixed(2);
671 |                 document.getElementById('max-drawdown').textContent = (data.risk_metrics.max_drawdown || 0).toFixed(1) + '%';
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
672 |                 document.getElementById('volatility').textContent = ((data.risk_metrics.volatility || 0) * 100).toFixed(2) + '%';
673 |             }
    |

E501 Line too long (129 > 100)
   --> scripts/monitoring_dashboard.py:672:101
    |
670 |                 document.getElementById('var-95').textContent = '$' + (data.risk_metrics.var_95 || 0).toFixed(2);
671 |                 document.getElementById('max-drawdown').textContent = (data.risk_metrics.max_drawdown || 0).toFixed(1) + '%';
672 |                 document.getElementById('volatility').textContent = ((data.risk_metrics.volatility || 0) * 100).toFixed(2) + '%';
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
673 |             }
    |

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:674:1
    |
672 |                 document.getElementById('volatility').textContent = ((data.risk_metrics.volatility || 0) * 100).toFixed(2) + '%';
673 |             }
674 |             
    | ^^^^^^^^^^^^
675 |             if (data.alerts && data.alerts.length > 0) {
676 |                 updateAlerts(data.alerts);
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:679:1
    |
677 |             }
678 |         }
679 |         
    | ^^^^^^^^
680 |         function updateTrades(trades) {
681 |             const tradesDiv = document.getElementById('recent-trades');
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> scripts/monitoring_dashboard.py:684:64
    |
682 |             if (trades && trades.length > 0) {
683 |                 const recentTrades = trades.slice(-5);
684 |                 tradesDiv.innerHTML = recentTrades.map(trade => 
    |                                                                ^
685 |                     `<p>${trade.symbol} ${trade.side} ${trade.quantity} @ $${trade.price}</p>`
686 |                 ).join('');
    |
help: Remove trailing whitespace

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:691:1
    |
689 |             }
690 |         }
691 |         
    | ^^^^^^^^
692 |         function updateHealth(health) {
693 |             const statusDiv = document.getElementById('system-status');
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:698:1
    |
696 |                 let statusClass = 'status-healthy';
697 |                 let statusText = 'All Systems Operational';
698 |                 
    | ^^^^^^^^^^^^^^^^
699 |                 if (status === 'warning') {
700 |                     statusClass = 'status-warning';
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:706:1
    |
704 |                     statusText = 'Critical Issues Detected';
705 |                 }
706 |                 
    | ^^^^^^^^^^^^^^^^
707 |                 statusDiv.innerHTML = `<span class="status-indicator ${statusClass}"></span><span>${statusText}</span>`;
708 |             }
    |
help: Remove whitespace from blank line

E501 Line too long (120 > 100)
   --> scripts/monitoring_dashboard.py:707:101
    |
705 |                 }
706 |                 
707 |                 statusDiv.innerHTML = `<span class="status-indicator ${statusClass}"></span><span>${statusText}</span>`;
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
708 |             }
709 |         }
    |

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:710:1
    |
708 |             }
709 |         }
710 |         
    | ^^^^^^^^
711 |         function updateAlerts(alerts) {
712 |             const alertsSection = document.getElementById('alerts-section');
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> scripts/monitoring_dashboard.py:714:69
    |
712 |             const alertsSection = document.getElementById('alerts-section');
713 |             if (alerts && alerts.length > 0) {
714 |                 alertsSection.innerHTML = '<h3>Recent Alerts</h3>' + 
    |                                                                     ^
715 |                     alerts.map(alert => {
716 |                         const alertClass = `alert-${alert.level.toLowerCase()}`;
    |
help: Remove trailing whitespace

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:721:1
    |
719 |             }
720 |         }
721 |         
    | ^^^^^^^^
722 |         // Auto-refresh every 30 seconds
723 |         setInterval(refreshData, 30000);
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:724:1
    |
722 |         // Auto-refresh every 30 seconds
723 |         setInterval(refreshData, 30000);
724 |         
    | ^^^^^^^^
725 |         // Initial load
726 |         refreshData();
    |
help: Remove whitespace from blank line

E501 Line too long (112 > 100)
  --> scripts/patch_short_selling.py:21:101
   |
19 |         if i == 1799 and 'if side.lower() == "sell" and existing == 0:' in line:
20 |             # Replace the simple logic with enhanced short selling logic
21 |             lines[i+1] = '            # No existing position - check if this is a valid short selling request\n'
   |                                                                                                     ^^^^^^^^^^^^
22 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
23 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
   |

E501 Line too long (120 > 100)
  --> scripts/patch_short_selling.py:22:101
   |
20 |             # Replace the simple logic with enhanced short selling logic
21 |             lines[i+1] = '            # No existing position - check if this is a valid short selling request\n'
22 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
23 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
24 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
   |

E501 Line too long (101 > 100)
  --> scripts/patch_short_selling.py:23:101
   |
21 |             lines[i+1] = '            # No existing position - check if this is a valid short selling request\n'
22 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
23 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
   |                                                                                                     ^
24 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
25 |             lines[i+5] = '                else:\n'
   |

E501 Line too long (130 > 100)
  --> scripts/patch_short_selling.py:24:101
   |
22 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
23 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
24 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
25 |             lines[i+5] = '                else:\n'
26 |             lines[i+6] = '                    self.logger.info("SHORT_SELLING_REJECTED | symbol=%s qty=%d", symbol, remaining)\n'
   |

E501 Line too long (129 > 100)
  --> scripts/patch_short_selling.py:26:101
   |
24 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
25 |             lines[i+5] = '                else:\n'
26 |             lines[i+6] = '                    self.logger.info("SHORT_SELLING_REJECTED | symbol=%s qty=%d", symbol, remaining)\n'
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
27 |             lines[i+7] = '                    return None\n'
28 |             lines[i+8] = '            else:\n'
   |

E501 Line too long (111 > 100)
  --> scripts/patch_short_selling.py:29:101
   |
27 |             lines[i+7] = '                    return None\n'
28 |             lines[i+8] = '            else:\n'
29 |             lines[i+9] = '                self.logger.info("SKIP_NO_POSITION | no shares to sell, skipping")\n'
   |                                                                                                     ^^^^^^^^^^^
30 |             lines[i+10] = '                return None\n'
31 |             logging.info(f"Updated sync execute_order at line {i+1}")
   |

E501 Line too long (112 > 100)
  --> scripts/patch_short_selling.py:38:101
   |
36 |         if i == 2087 and 'if side.lower() == "sell" and existing == 0:' in line:
37 |             # Replace the simple logic with enhanced short selling logic
38 |             lines[i+1] = '            # No existing position - check if this is a valid short selling request\n'
   |                                                                                                     ^^^^^^^^^^^^
39 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
40 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
   |

E501 Line too long (120 > 100)
  --> scripts/patch_short_selling.py:39:101
   |
37 |             # Replace the simple logic with enhanced short selling logic
38 |             lines[i+1] = '            # No existing position - check if this is a valid short selling request\n'
39 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
40 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
41 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
   |

E501 Line too long (101 > 100)
  --> scripts/patch_short_selling.py:40:101
   |
38 |             lines[i+1] = '            # No existing position - check if this is a valid short selling request\n'
39 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
40 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
   |                                                                                                     ^
41 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
42 |             lines[i+5] = '                else:\n'
   |

E501 Line too long (130 > 100)
  --> scripts/patch_short_selling.py:41:101
   |
39 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
40 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
41 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
42 |             lines[i+5] = '                else:\n'
43 |             lines[i+6] = '                    self.logger.info("SHORT_SELLING_REJECTED | symbol=%s qty=%d", symbol, remaining)\n'
   |

E501 Line too long (129 > 100)
  --> scripts/patch_short_selling.py:43:101
   |
41 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
42 |             lines[i+5] = '                else:\n'
43 |             lines[i+6] = '                    self.logger.info("SHORT_SELLING_REJECTED | symbol=%s qty=%d", symbol, remaining)\n'
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 |             lines[i+7] = '                    return None\n'
45 |             lines[i+8] = '            else:\n'
   |

E501 Line too long (111 > 100)
  --> scripts/patch_short_selling.py:46:101
   |
44 |             lines[i+7] = '                    return None\n'
45 |             lines[i+8] = '            else:\n'
46 |             lines[i+9] = '                self.logger.info("SKIP_NO_POSITION | no shares to sell, skipping")\n'
   |                                                                                                     ^^^^^^^^^^^
47 |             lines[i+10] = '                return None\n'
48 |             logging.info(f"Updated async execute_order_async at line {i+1}")
   |

E501 Line too long (107 > 100)
  --> scripts/performance_demo.py:36:101
   |
34 |         results = diagnostic.run_full_diagnostic()
35 |
36 |         logging.info(str(f"✓ System diagnostic completed in {results['diagnostic_runtime_seconds']:.2f}s"))
   |                                                                                                     ^^^^^^^
37 |         logging.info(str(f"  - Memory usage: {results['memory_analysis']['system_memory']['usage_percent']:.1f}%"))
38 |         logging.info(str(f"  - Swap usage: {results['memory_analysis']['system_memory']['swap_used_mb']:.1f}MB"))
   |

E501 Line too long (115 > 100)
  --> scripts/performance_demo.py:37:101
   |
36 |         logging.info(str(f"✓ System diagnostic completed in {results['diagnostic_runtime_seconds']:.2f}s"))
37 |         logging.info(str(f"  - Memory usage: {results['memory_analysis']['system_memory']['usage_percent']:.1f}%"))
   |                                                                                                     ^^^^^^^^^^^^^^^
38 |         logging.info(str(f"  - Swap usage: {results['memory_analysis']['system_memory']['swap_used_mb']:.1f}MB"))
39 |         logging.info(str(f"  - Total objects: {results['garbage_collection']['object_counts']['total_objects']:,}"))
   |

E501 Line too long (113 > 100)
  --> scripts/performance_demo.py:38:101
   |
36 |         logging.info(str(f"✓ System diagnostic completed in {results['diagnostic_runtime_seconds']:.2f}s"))
37 |         logging.info(str(f"  - Memory usage: {results['memory_analysis']['system_memory']['usage_percent']:.1f}%"))
38 |         logging.info(str(f"  - Swap usage: {results['memory_analysis']['system_memory']['swap_used_mb']:.1f}MB"))
   |                                                                                                     ^^^^^^^^^^^^^
39 |         logging.info(str(f"  - Total objects: {results['garbage_collection']['object_counts']['total_objects']:,}"))
40 |         logging.info(str(f"  - Open file descriptors: {results['file_handles']['open_file_descriptors']}"))
   |

E501 Line too long (116 > 100)
  --> scripts/performance_demo.py:39:101
   |
37 |         logging.info(str(f"  - Memory usage: {results['memory_analysis']['system_memory']['usage_percent']:.1f}%"))
38 |         logging.info(str(f"  - Swap usage: {results['memory_analysis']['system_memory']['swap_used_mb']:.1f}MB"))
39 |         logging.info(str(f"  - Total objects: {results['garbage_collection']['object_counts']['total_objects']:,}"))
   |                                                                                                     ^^^^^^^^^^^^^^^^
40 |         logging.info(str(f"  - Open file descriptors: {results['file_handles']['open_file_descriptors']}"))
41 |         logging.info(str(f"  - Active threads: {results['thread_analysis']['active_threads']}"))
   |

E501 Line too long (107 > 100)
  --> scripts/performance_demo.py:40:101
   |
38 |         logging.info(str(f"  - Swap usage: {results['memory_analysis']['system_memory']['swap_used_mb']:.1f}MB"))
39 |         logging.info(str(f"  - Total objects: {results['garbage_collection']['object_counts']['total_objects']:,}"))
40 |         logging.info(str(f"  - Open file descriptors: {results['file_handles']['open_file_descriptors']}"))
   |                                                                                                     ^^^^^^^
41 |         logging.info(str(f"  - Active threads: {results['thread_analysis']['active_threads']}"))
   |

E501 Line too long (102 > 100)
  --> scripts/performance_demo.py:73:101
   |
71 |         # Force garbage collection
72 |         gc_result = optimizer.force_garbage_collection()
73 |         logging.info(str(f"✓ Garbage collection: {gc_result['objects_collected']} objects collected"))
   |                                                                                                     ^^
74 |         logging.info(str(f"  - Collection time: {gc_result['collection_time_ms']:.2f}ms"))
   |

E501 Line too long (121 > 100)
  --> scripts/performance_demo.py:79:101
   |
77 |         final_memory = optimizer.get_memory_usage()
78 |         logging.info(str(f"✓ Final memory: {final_memory['rss_mb']:.2f}MB"))
79 |         logging.info(str(f"  - Objects reduced by: {initial_memory['total_objects'] - final_memory['total_objects']:,}"))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
80 |
81 |         # Show top object types
   |

E501 Line too long (110 > 100)
   --> scripts/performance_monitor.py:152:101
    |
151 |             # Calculate CPU usage percentage (simplified)
152 |             cpu_metrics['usage_percent'] = min(cpu_metrics['load_1min'] / cpu_metrics['cpu_count'] * 100, 100)
    |                                                                                                     ^^^^^^^^^^
153 |
154 |         except Exception as e:
    |

W293 Blank line contains whitespace
   --> scripts/performance_monitor.py:245:1
    |
243 |         """
244 |         Count trading-bot specific processes, filtering out temporary/diagnostic processes.
245 |         
    | ^^^^^^^^
246 |         This method addresses false positive alerts from temporary Python processes
247 |         by focusing on long-running trading-related processes only.
    |
help: Remove whitespace from blank line

E501 Line too long (124 > 100)
   --> scripts/performance_monitor.py:319:101
    |
317 |                                     # For now, just count it as valid if we can read the stat
318 |                                     trading_bot_count += 1
319 |                                     self.logger.debug(f"Counted trading bot process: PID {pid}, command: {command[:80]}...")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
320 |                         else:
321 |                             # If we can't check /proc, but other criteria match, count it
    |

E501 Line too long (107 > 100)
   --> scripts/performance_monitor.py:329:101
    |
327 |                             trading_bot_count += 1
328 |
329 |         except (subprocess.SubprocessError, subprocess.TimeoutExpired, subprocess.CalledProcessError) as e:
    |                                                                                                     ^^^^^^^
330 |             self.logger.warning(f"Error getting process list: {e}")
331 |             return self._count_python_processes_fallback()
    |

E501 Line too long (102 > 100)
   --> scripts/performance_monitor.py:346:101
    |
344 |             python_pids = result.stdout.strip().split('\n') if result.stdout.strip() else []
345 |             return len([p for p in python_pids if p])
346 |         except (subprocess.SubprocessError, subprocess.TimeoutExpired, subprocess.CalledProcessError):
    |                                                                                                     ^^
347 |             return 1  # Assume at least this process is running
    |

E501 Line too long (111 > 100)
   --> scripts/performance_monitor.py:400:101
    |
398 |             mem = metrics['memory']
399 |
400 |             if 'usage_percent' in mem and mem['usage_percent'] > self.alert_thresholds['memory_usage_percent']:
    |                                                                                                     ^^^^^^^^^^^
401 |                 alerts.append({
402 |                     'type': 'memory_high',
    |

E501 Line too long (102 > 100)
   --> scripts/performance_monitor.py:409:101
    |
407 |                 })
408 |
409 |             if 'swap_used_mb' in mem and mem['swap_used_mb'] > self.alert_thresholds['swap_usage_mb']:
    |                                                                                                     ^^
410 |                 alerts.append({
411 |                     'type': 'swap_high',
    |

E501 Line too long (108 > 100)
   --> scripts/performance_monitor.py:422:101
    |
420 |             cpu = metrics['cpu']
421 |
422 |             if 'usage_percent' in cpu and cpu['usage_percent'] > self.alert_thresholds['cpu_usage_percent']:
    |                                                                                                     ^^^^^^^^
423 |                 alerts.append({
424 |                     'type': 'cpu_high',
    |

E501 Line too long (115 > 100)
   --> scripts/performance_monitor.py:435:101
    |
433 |             proc = metrics['process']
434 |
435 |             if 'file_descriptors' in proc and proc['file_descriptors'] > self.alert_thresholds['file_descriptors']:
    |                                                                                                     ^^^^^^^^^^^^^^^
436 |                 alerts.append({
437 |                     'type': 'file_descriptors_high',
    |

E501 Line too long (103 > 100)
   --> scripts/performance_monitor.py:444:101
    |
442 |                 })
443 |
444 |             if 'thread_count' in proc and proc['thread_count'] > self.alert_thresholds['thread_count']:
    |                                                                                                     ^^^
445 |                 alerts.append({
446 |                     'type': 'thread_count_high',
    |

E501 Line too long (149 > 100)
   --> scripts/performance_monitor.py:459:101
    |
457 | …',
458 | …
459 | …sses detected: {proc['python_processes']} (filtered for trading-specific processes only)",
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
460 | …
461 | …
    |

E501 Line too long (111 > 100)
   --> scripts/performance_monitor.py:559:101
    |
557 |             if 'memory' in first and 'memory' in last:
558 |                 if 'usage_percent' in first['memory'] and 'usage_percent' in last['memory']:
559 |                     trends['memory_trend'] = last['memory']['usage_percent'] - first['memory']['usage_percent']
    |                                                                                                     ^^^^^^^^^^^
560 |
561 |         report = {
    |

E501 Line too long (112 > 100)
   --> scripts/performance_monitor.py:618:101
    |
616 |         if self.trade_metrics:
617 |             execution_times = [m['execution_time_ms'] for m in self.trade_metrics]
618 |             report['trade_execution']['average_execution_time_ms'] = sum(execution_times) / len(execution_times)
    |                                                                                                     ^^^^^^^^^^^^
619 |             report['trade_execution']['max_execution_time_ms'] = max(execution_times)
    |

E501 Line too long (109 > 100)
   --> scripts/performance_monitor.py:623:101
    |
621 |         if self.api_response_times:
622 |             response_times = [m['response_time_ms'] for m in self.api_response_times]
623 |             report['api_performance']['average_response_time_ms'] = sum(response_times) / len(response_times)
    |                                                                                                     ^^^^^^^^^
624 |             report['api_performance']['max_response_time_ms'] = max(response_times)
    |

W291 Trailing whitespace
 --> scripts/performance_optimizer.py:6:47
  |
4 | This module provides comprehensive performance optimization capabilities:
5 | - Real-time performance profiling and bottleneck identification
6 | - Memory usage optimization and leak detection  
  |                                               ^^
7 | - Latency optimization for order execution and data processing
8 | - Database query optimization and caching strategies
  |
help: Remove trailing whitespace

E501 Line too long (105 > 100)
   --> scripts/performance_optimizer.py:114:101
    |
112 |         return decorator
113 |
114 |     def _profile_execution(self, func: Callable, args: tuple, kwargs: dict, include_memory: bool) -> Any:
    |                                                                                                     ^^^^^
115 |         """Execute function with performance profiling."""
116 |         func_name = f"{func.__module__}.{func.__name__}"
    |

E501 Line too long (107 > 100)
   --> scripts/performance_optimizer.py:266:101
    |
264 |         """Check memory usage against thresholds."""
265 |         if snapshot.rss_mb > self.memory_thresholds['critical']:
266 |             self.logger.error(f"CRITICAL: Memory usage {snapshot.rss_mb:.1f}MB exceeds critical threshold")
    |                                                                                                     ^^^^^^^
267 |             self._trigger_memory_optimization()
268 |         elif snapshot.rss_mb > self.memory_thresholds['warning']:
    |

E501 Line too long (107 > 100)
   --> scripts/performance_optimizer.py:269:101
    |
267 |             self._trigger_memory_optimization()
268 |         elif snapshot.rss_mb > self.memory_thresholds['warning']:
269 |             self.logger.warning(f"WARNING: Memory usage {snapshot.rss_mb:.1f}MB exceeds warning threshold")
    |                                                                                                     ^^^^^^^
270 |         elif snapshot.rss_mb > self.memory_thresholds['gc_trigger']:
271 |             self._trigger_garbage_collection()
    |

E501 Line too long (103 > 100)
   --> scripts/performance_optimizer.py:379:101
    |
377 |         memory_trend = {
378 |             'current_mb': recent_snapshots[-1].rss_mb if recent_snapshots else 0,
379 |             'avg_mb': statistics.mean([s.rss_mb for s in recent_snapshots]) if recent_snapshots else 0,
    |                                                                                                     ^^^
380 |             'max_mb': max([s.rss_mb for s in recent_snapshots]) if recent_snapshots else 0,
381 |             'snapshots_count': len(recent_snapshots)
    |

E501 Line too long (120 > 100)
  --> scripts/problem_statement_validation.py:32:101
   |
30 |         content = config_path.read_text()
31 |         # Check for correct implementation
32 |         assert 'DISABLE_DAILY_RETRAIN = os.getenv("DISABLE_DAILY_RETRAIN", "false").lower() in ("true", "1")' in content
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
33 |         logging.info("  - DISABLE_DAILY_RETRAIN read from correct key with safe default ✓")
   |

E501 Line too long (106 > 100)
   --> scripts/problem_statement_validation.py:121:101
    |
119 |         assert "def _ensure_data_fresh(symbols, max_age_seconds: int)" in content
120 |         assert (
121 |             "from ai_trading.data_fetcher import get_cached_minute_timestamp, last_minute_bar_age_seconds"
    |                                                                                                     ^^^^^^
122 |             in content
123 |         )
    |

W293 Blank line contains whitespace
   --> scripts/process_manager.py:203:1
    |
201 |         """
202 |         Ensure only one instance of the trading bot is running.
203 |         
    | ^^^^^^^^
204 |         Args:
205 |             pidfile_path: Path to the PID file for instance tracking
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/process_manager.py:206:1
    |
204 |         Args:
205 |             pidfile_path: Path to the PID file for instance tracking
206 |             
    | ^^^^^^^^^^^^
207 |         Returns:
208 |             True if this instance can proceed, False if another instance is running
    |
help: Remove whitespace from blank line

E501 Line too long (115 > 100)
   --> scripts/process_manager.py:243:101
    |
241 |                     try:
242 |                         os.kill(existing_pid, 0)  # Signal 0 just checks if process exists
243 |                         self.logger.error(f"Another trading bot instance is already running (PID: {existing_pid})")
    |                                                                                                     ^^^^^^^^^^^^^^^
244 |                         return False
245 |                     except OSError:
    |

E501 Line too long (108 > 100)
   --> scripts/process_manager.py:247:101
    |
245 |                     except OSError:
246 |                         # Process doesn't exist, remove stale PID file
247 |                         self.logger.info(f"Removing stale PID file for non-existent process {existing_pid}")
    |                                                                                                     ^^^^^^^^
248 |                         os.unlink(pidfile_path)
249 |                         # Try again
    |

E501 Line too long (106 > 100)
   --> scripts/process_manager.py:420:101
    |
418 |         if failed_services:
419 |             recommendations.append(
420 |                 f"MEDIUM PRIORITY: {len(failed_services)} failed services: {', '.join(failed_services)}. "
    |                                                                                                     ^^^^^^
421 |                 "Check service configuration and restart."
422 |             )
    |

W293 Blank line contains whitespace
   --> scripts/process_manager.py:438:1
    |
436 |         """
437 |         Acquire a process lock to prevent multiple instances.
438 |         
    | ^^^^^^^^
439 |         Parameters
440 |         ----------
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/process_manager.py:443:1
    |
441 |         lock_file : str
442 |             Path to the lock file
443 |             
    | ^^^^^^^^^^^^
444 |         Returns
445 |         -------
    |
help: Remove whitespace from blank line

E501 Line too long (109 > 100)
   --> scripts/process_manager.py:462:101
    |
460 |                         os.kill(existing_pid, 0)
461 |                         # Process is still running
462 |                         self.logger.warning(f"Another trading bot instance is running (PID: {existing_pid})")
    |                                                                                                     ^^^^^^^^^
463 |                         return False
464 |                     except OSError:
    |

W293 Blank line contains whitespace
   --> scripts/process_manager.py:502:1
    |
500 |         """
501 |         Check for multiple trading bot instances and provide recommendations.
502 |         
    | ^^^^^^^^
503 |         Returns
504 |         -------
    |
help: Remove whitespace from blank line

E501 Line too long (105 > 100)
   --> scripts/process_manager.py:549:101
    |
548 |     logging.info("\nPROCESS SUMMARY:")
549 |     logging.info(str(f"- Total Python processes: {report['process_summary']['total_python_processes']}"))
    |                                                                                                     ^^^^^
550 |     logging.info(str(f"- Total memory usage: {report['process_summary']['total_memory_mb']:.1f}MB"))
551 |     logging.info(str(f"- Duplicate processes: {report['process_summary']['duplicate_processes']}"))
    |

E501 Line too long (108 > 100)
   --> scripts/process_manager.py:556:101
    |
554 |         logging.info("\nACTIVE TRADING PROCESSES:")
555 |         for proc in report['processes']:
556 |             logging.info(str(f"- PID {proc['pid']}: {proc['memory_mb']:.1f}MB - {proc['command'][:80]}..."))
    |                                                                                                     ^^^^^^^^
557 |
558 |     if report['duplicates']:
    |

E501 Line too long (103 > 100)
   --> scripts/process_manager.py:587:101
    |
585 |     # Interactive cleanup option
586 |     if report['duplicates']:
587 |         response = input(f"\nFound {len(report['duplicates'])} duplicate processes. Clean up? (y/N): ")
    |                                                                                                     ^^^
588 |         if response.lower() == 'y':
589 |             logging.info("Performing cleanup (dry run first)...")
    |

E501 Line too long (105 > 100)
   --> scripts/process_manager.py:591:101
    |
589 |             logging.info("Performing cleanup (dry run first)...")
590 |             dry_run_result = manager.cleanup_duplicate_processes(dry_run=True)
591 |             logging.info(f"Dry run: Would terminate {len(dry_run_result['processes_killed'])} processes")
    |                                                                                                     ^^^^^
592 |
593 |             confirm = input("Proceed with actual cleanup? (y/N): ")
    |

E501 Line too long (113 > 100)
   --> scripts/process_manager.py:596:101
    |
594 |             if confirm.lower() == 'y':
595 |                 cleanup_result = manager.cleanup_duplicate_processes(dry_run=False)
596 |                 logging.info(f"Cleanup complete: {len(cleanup_result['processes_killed'])} processes terminated")
    |                                                                                                     ^^^^^^^^^^^^^
597 |
598 |     return report
    |

F401 `production_monitoring.get_production_monitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:28:9
   |
26 |         CircuitBreaker,
27 |         ProductionMonitor,
28 |         get_production_monitor,
   |         ^^^^^^^^^^^^^^^^^^^^^^
29 |         initialize_production_monitoring,
30 |     )
   |
help: Remove unused import: `production_monitoring.get_production_monitor`

F401 `performance_optimizer.cached` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:37:9
   |
35 | try:
36 |     from performance_optimizer import (
37 |         cached,
   |         ^^^^^^
38 |         get_performance_optimizer,
39 |         initialize_performance_optimizer,
   |
help: Remove unused import

F401 `performance_optimizer.get_performance_optimizer` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:38:9
   |
36 |     from performance_optimizer import (
37 |         cached,
38 |         get_performance_optimizer,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
39 |         initialize_performance_optimizer,
40 |         profile_performance,
   |
help: Remove unused import

F401 `performance_optimizer.profile_performance` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:40:9
   |
38 |         get_performance_optimizer,
39 |         initialize_performance_optimizer,
40 |         profile_performance,
   |         ^^^^^^^^^^^^^^^^^^^
41 |     )
42 |     PERFORMANCE_OPTIMIZER_AVAILABLE = True
   |
help: Remove unused import

F401 `security_manager.get_security_manager` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:47:34
   |
46 | try:
47 |     from security_manager import get_security_manager, initialize_security_manager
   |                                  ^^^^^^^^^^^^^^^^^^^^
48 |     SECURITY_MANAGER_AVAILABLE = True
49 | except ImportError:
   |
help: Remove unused import: `security_manager.get_security_manager`

F401 `monitoring_dashboard.get_monitoring_dashboard` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:54:9
   |
52 | try:
53 |     from monitoring_dashboard import (
54 |         get_monitoring_dashboard,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
55 |         initialize_monitoring_dashboard,
56 |     )
   |
help: Remove unused import: `monitoring_dashboard.get_monitoring_dashboard`

F401 `health_check.health_monitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:62:30
   |
61 | try:
62 |     from health_check import health_monitor
   |                              ^^^^^^^^^^^^^^
63 |     HEALTH_CHECK_AVAILABLE = True
64 | except ImportError:
   |
help: Remove unused import: `health_check.health_monitor`

E501 Line too long (102 > 100)
   --> scripts/production_integration.py:145:101
    |
144 |             if self.systems_initialized:
145 |                 self.logger.info(f"✓ All {total_systems} production systems initialized successfully")
    |                                                                                                     ^^
146 |             else:
147 |                 self.logger.warning(f"⚠ Only {success_count}/{total_systems} production systems initialized")
    |

E501 Line too long (109 > 100)
   --> scripts/production_integration.py:147:101
    |
145 |                 self.logger.info(f"✓ All {total_systems} production systems initialized successfully")
146 |             else:
147 |                 self.logger.warning(f"⚠ Only {success_count}/{total_systems} production systems initialized")
    |                                                                                                     ^^^^^^^^^
148 |
149 |             return self.systems_initialized
    |

E501 Line too long (101 > 100)
   --> scripts/production_integration.py:292:101
    |
290 |                 # AI-AGENT-REF: Add defensive null checks for production systems
291 |                 if self.production_monitor is not None:
292 |                     self.production_monitor.track_latency(f"{operation_name}_failed", execution_time)
    |                                                                                                     ^
293 |
294 |                 # Security logging for failures
    |

E501 Line too long (102 > 100)
   --> scripts/production_monitoring.py:284:101
    |
282 |             anomalies.append(f"High order latency: {metrics.order_latency_ms:.1f}ms")
283 |
284 |         if metrics.data_processing_latency_ms > self.anomaly_thresholds['data_processing_latency_ms']:
    |                                                                                                     ^^
285 |             anomalies.append(f"High data processing latency: {metrics.data_processing_latency_ms:.1f}ms")
    |

E501 Line too long (105 > 100)
   --> scripts/production_monitoring.py:285:101
    |
284 |         if metrics.data_processing_latency_ms > self.anomaly_thresholds['data_processing_latency_ms']:
285 |             anomalies.append(f"High data processing latency: {metrics.data_processing_latency_ms:.1f}ms")
    |                                                                                                     ^^^^^
286 |
287 |         # Alert on anomalies
    |

E501 Line too long (101 > 100)
   --> scripts/production_monitoring.py:352:101
    |
350 |         cpu_values = [m.cpu_percent for m in recent_metrics]
351 |         memory_values = [m.memory_percent for m in recent_metrics]
352 |         order_latency_values = [m.order_latency_ms for m in recent_metrics if m.order_latency_ms > 0]
    |                                                                                                     ^
353 |
354 |         report = {
    |

E501 Line too long (121 > 100)
   --> scripts/production_monitoring.py:373:101
    |
371 |                     'current': order_latency_values[-1] if order_latency_values else 0,
372 |                     'average': statistics.mean(order_latency_values) if order_latency_values else 0,
373 |                     'p95': statistics.quantiles(order_latency_values, n=20)[18] if len(order_latency_values) > 20 else 0,
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
374 |                     'target': self.performance_targets['order_execution_latency_ms']
375 |                 }
    |

E501 Line too long (105 > 100)
   --> scripts/production_monitoring.py:377:101
    |
375 |                 }
376 |             },
377 |             'health_checks': {name: asdict(result) for name, result in self.last_health_results.items()},
    |                                                                                                     ^^^^^
378 |             'circuit_breakers': {name: cb.state.value for name, cb in self.circuit_breakers.items()}
379 |         }
    |

E501 Line too long (120 > 100)
   --> scripts/production_validator.py:164:101
    |
162 |         total_requests = successful_requests + failed_requests
163 |         test_duration = end_time - start_time
164 |         requests_per_second = total_requests / test_duration.total_seconds() if test_duration.total_seconds() > 0 else 0
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
165 |
166 |         # Create results
    |

E501 Line too long (104 > 100)
   --> scripts/production_validator.py:292:101
    |
290 |             benchmark_count += 1
291 |
292 |         benchmark_results['overall_score'] = total_score / benchmark_count if benchmark_count > 0 else 0
    |                                                                                                     ^^^^
293 |
294 |         return benchmark_results
    |

E501 Line too long (105 > 100)
   --> scripts/production_validator.py:417:101
    |
415 |                 'cpu_percent': psutil.cpu_percent(interval=0.1),
416 |                 'memory_percent': psutil.virtual_memory().percent,
417 |                 'disk_io_read': psutil.disk_io_counters().read_bytes if psutil.disk_io_counters() else 0,
    |                                                                                                     ^^^^^
418 |                 'disk_io_write': psutil.disk_io_counters().write_bytes if psutil.disk_io_counters() else 0,
419 |                 'network_sent': psutil.net_io_counters().bytes_sent if psutil.net_io_counters() else 0,
    |

E501 Line too long (107 > 100)
   --> scripts/production_validator.py:418:101
    |
416 |                 'memory_percent': psutil.virtual_memory().percent,
417 |                 'disk_io_read': psutil.disk_io_counters().read_bytes if psutil.disk_io_counters() else 0,
418 |                 'disk_io_write': psutil.disk_io_counters().write_bytes if psutil.disk_io_counters() else 0,
    |                                                                                                     ^^^^^^^
419 |                 'network_sent': psutil.net_io_counters().bytes_sent if psutil.net_io_counters() else 0,
420 |                 'network_recv': psutil.net_io_counters().bytes_recv if psutil.net_io_counters() else 0
    |

E501 Line too long (103 > 100)
   --> scripts/production_validator.py:419:101
    |
417 |                 'disk_io_read': psutil.disk_io_counters().read_bytes if psutil.disk_io_counters() else 0,
418 |                 'disk_io_write': psutil.disk_io_counters().write_bytes if psutil.disk_io_counters() else 0,
419 |                 'network_sent': psutil.net_io_counters().bytes_sent if psutil.net_io_counters() else 0,
    |                                                                                                     ^^^
420 |                 'network_recv': psutil.net_io_counters().bytes_recv if psutil.net_io_counters() else 0
421 |             }
    |

E501 Line too long (102 > 100)
   --> scripts/production_validator.py:420:101
    |
418 |                 'disk_io_write': psutil.disk_io_counters().write_bytes if psutil.disk_io_counters() else 0,
419 |                 'network_sent': psutil.net_io_counters().bytes_sent if psutil.net_io_counters() else 0,
420 |                 'network_recv': psutil.net_io_counters().bytes_recv if psutil.net_io_counters() else 0
    |                                                                                                     ^^
421 |             }
422 |         except ImportError:
    |

E501 Line too long (101 > 100)
   --> scripts/production_validator.py:612:101
    |
611 |             if performance_score < self.validation_criteria['performance']['min_score']:
612 |                 critical_failures.append(f"Performance tests failed: {performance_score:.1f}% score")
    |                                                                                                     ^
613 |             elif performance_score < 90:
614 |                 warnings.append(f"Performance could be improved: {performance_score:.1f}% score")
    |

E501 Line too long (101 > 100)
   --> scripts/production_validator.py:632:101
    |
631 |             if reliability_score < self.validation_criteria['reliability']['min_score']:
632 |                 critical_failures.append(f"Reliability tests failed: {reliability_score:.1f}% score")
    |                                                                                                     ^
633 |
634 |         except Exception as e:
    |

E501 Line too long (105 > 100)
   --> scripts/production_validator.py:658:101
    |
657 |             if functionality_score < self.validation_criteria['functionality']['min_score']:
658 |                 critical_failures.append(f"Functionality tests failed: {functionality_score:.1f}% score")
    |                                                                                                     ^^^^^
659 |
660 |         except Exception as e:
    |

E501 Line too long (119 > 100)
   --> scripts/production_validator.py:718:101
    |
716 |         # Evaluate load test results
717 |         for test_name, result in load_results.items():
718 |             success_rate = result.successful_requests / result.total_requests * 100 if result.total_requests > 0 else 0
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^
719 |
720 |             # Score based on success rate and response time
    |

E501 Line too long (102 > 100)
   --> scripts/production_validator.py:746:101
    |
744 |             availability_score = max(0, 100 - result.availability_impact)
745 |
746 |             test_score = (recovery_score * 0.4) + (integrity_score * 0.4) + (availability_score * 0.2)
    |                                                                                                     ^^
747 |             scores.append(test_score)
    |

F401 `cryptography` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:791:20
    |
789 |         # Check if encryption modules are available
790 |         try:
791 |             import cryptography
    |                    ^^^^^^^^^^^^
792 |             return 95
793 |         except ImportError:
    |
help: Remove unused import: `cryptography`

F401 `trade_execution` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:817:20
    |
815 |         try:
816 |             # Test imports
817 |             import trade_execution
    |                    ^^^^^^^^^^^^^^^
818 |             from ai_trading.core import bot_engine  # AI-AGENT-REF: canonical import
819 |             return 95
    |
help: Remove unused import: `trade_execution`

F401 `ai_trading.core.bot_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:818:41
    |
816 |             # Test imports
817 |             import trade_execution
818 |             from ai_trading.core import bot_engine  # AI-AGENT-REF: canonical import
    |                                         ^^^^^^^^^^
819 |             return 95
820 |         except ImportError:
    |
help: Remove unused import: `ai_trading.core.bot_engine`

F401 `indicators` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:835:20
    |
833 |         """Test data processing functionality."""
834 |         try:
835 |             import indicators
    |                    ^^^^^^^^^^
836 |
837 |             from ai_trading import data_fetcher
    |
help: Remove unused import: `indicators`

F401 `ai_trading.data_fetcher` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:837:36
    |
835 |             import indicators
836 |
837 |             from ai_trading import data_fetcher
    |                                    ^^^^^^^^^^^^
838 |             return 90
839 |         except ImportError:
    |
help: Remove unused import: `ai_trading.data_fetcher`

F401 `ai_trading.telemetry.metrics_logger` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:845:46
    |
843 |         """Test reporting system functionality."""
844 |         try:
845 |             from ai_trading.telemetry import metrics_logger
    |                                              ^^^^^^^^^^^^^^
846 |             return 85
847 |         except ImportError:
    |
help: Remove unused import: `ai_trading.telemetry.metrics_logger`

E501 Line too long (124 > 100)
   --> scripts/production_validator.py:892:101
    |
890 |         # Performance recommendations
891 |         if test_scores.get('performance', 0) < 85:
892 |             recommendations.append("Optimize performance: Consider caching, connection pooling, and algorithm optimization")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
893 |
894 |         # Reliability recommendations
    |

E501 Line too long (114 > 100)
   --> scripts/production_validator.py:896:101
    |
894 |         # Reliability recommendations
895 |         if test_scores.get('reliability', 0) < 90:
896 |             recommendations.append("Improve reliability: Implement better error handling and recovery mechanisms")
    |                                                                                                     ^^^^^^^^^^^^^^
897 |
898 |         # Security recommendations
    |

E501 Line too long (109 > 100)
   --> scripts/production_validator.py:900:101
    |
898 |         # Security recommendations
899 |         if test_scores.get('security', 0) < 95:
900 |             recommendations.append("Enhance security: Review access controls, encryption, and audit logging")
    |                                                                                                     ^^^^^^^^^
901 |
902 |         # Functionality recommendations
    |

E501 Line too long (115 > 100)
   --> scripts/production_validator.py:904:101
    |
902 |         # Functionality recommendations
903 |         if test_scores.get('functionality', 0) < 95:
904 |             recommendations.append("Fix functionality issues: Address module import errors and core functionality")
    |                                                                                                     ^^^^^^^^^^^^^^^
905 |
906 |         # General recommendations
    |

E501 Line too long (124 > 100)
  --> scripts/profile_indicators.py:46:101
   |
44 |             ]
45 |             if len(required_positional) != 1:
46 |                 logger.info("Skipping %s.%s - requires %s positional args", module.__name__, name, len(required_positional))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
47 |                 continue
48 |             if hasattr(func, "py_func") or name == "jit":
   |

E501 Line too long (102 > 100)
  --> scripts/profile_indicators.py:49:101
   |
47 |                 continue
48 |             if hasattr(func, "py_func") or name == "jit":
49 |                 logger.info("Skipping decorator or jit-wrapped function %s.%s", module.__name__, name)
   |                                                                                                     ^^
50 |                 continue
51 |             _, elapsed = profile(func, df)
   |

E501 Line too long (105 > 100)
  --> scripts/profile_indicators.py:54:101
   |
52 |             timings.append((module.__name__ + "." + name, elapsed))
53 |
54 |     pd.DataFrame(timings, columns=["Function", "Time(sec)"]).to_csv("indicator_timings.csv", index=False)
   |                                                                                                     ^^^^^
55 |
56 | if __name__ == "__main__":
   |

E501 Line too long (112 > 100)
   --> scripts/retrain_model.py:516:101
    |
514 |     if not raw_store:
515 |         logger.critical(
516 |             "No symbols returned valid data for the day. Cannot trade or retrain. Check your data subscription."
    |                                                                                                     ^^^^^^^^^^^^
517 |         )
    |

E501 Line too long (112 > 100)
   --> scripts/retrain_model.py:801:101
    |
799 |     if not raw_store:
800 |         logger.critical(
801 |             "No symbols returned valid data for the day. Cannot trade or retrain. Check your data subscription."
    |                                                                                                     ^^^^^^^^^^^^
802 |         )
803 |         return False
    |

F401 `ai_trading.signals.generate_cost_aware_signals` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/run_wfa.py:22:60
   |
20 |     from ai_trading.evaluation.walkforward import WalkForwardEvaluator
21 |     from ai_trading.logging import logger
22 |     from ai_trading.signals import SignalDecisionPipeline, generate_cost_aware_signals
   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
23 | except ImportError as e:
24 |     print(f"Import error: {e}")
   |
help: Remove unused import: `ai_trading.signals.generate_cost_aware_signals`

W293 Blank line contains whitespace
  --> scripts/run_wfa.py:35:1
   |
33 |         """
34 |         Cost-aware strategy implementation for walk-forward validation.
35 |         
   | ^^^^^^^^
36 |         Args:
37 |             train_data: Dictionary of {symbol: pd.DataFrame} for training period
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> scripts/run_wfa.py:39:1
   |
37 |             train_data: Dictionary of {symbol: pd.DataFrame} for training period
38 |             test_data: Dictionary of {symbol: pd.DataFrame} for testing period
39 |             
   | ^^^^^^^^^^^^
40 |         Returns:
41 |             List of prediction dictionaries
   |
help: Remove whitespace from blank line

E501 Line too long (118 > 100)
   --> scripts/run_wfa.py:114:101
    |
112 |                         # Simple exit logic (could be enhanced)
113 |                         for j in range(i + 1, exit_idx + 1):
114 |                             day_low = test_df['low'].iloc[j] if 'low' in test_df.columns else test_df['close'].iloc[j]
    |                                                                                                     ^^^^^^^^^^^^^^^^^^
115 |                             day_high = test_df['high'].iloc[j] if 'high' in test_df.columns else test_df['close'].iloc[j]
    |

E501 Line too long (121 > 100)
   --> scripts/run_wfa.py:115:101
    |
113 |                         for j in range(i + 1, exit_idx + 1):
114 |                             day_low = test_df['low'].iloc[j] if 'low' in test_df.columns else test_df['close'].iloc[j]
115 |                             day_high = test_df['high'].iloc[j] if 'high' in test_df.columns else test_df['close'].iloc[j]
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
116 |
117 |                             if day_low <= stop_loss:
    |

E501 Line too long (125 > 100)
   --> scripts/run_wfa.py:133:101
    |
131 |                             "predicted_edge": predicted_edge,
132 |                             "decision_reason": decision.get("reason", "UNKNOWN"),
133 |                             "timestamp": test_df.index[i] if hasattr(test_df.index[i], 'strftime') else str(test_df.index[i])
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
134 |                         })
    |

E501 Line too long (109 > 100)
   --> scripts/run_wfa.py:194:101
    |
192 |     """Main entry point for WFA runner."""
193 |     parser = argparse.ArgumentParser(description="Run walk-forward validation")
194 |     parser.add_argument("--symbols", type=str, help="Comma-separated list of symbols (default: from config)")
    |                                                                                                     ^^^^^^^^^
195 |     parser.add_argument("--universe-file", type=str, help="Path to file containing symbols list")
196 |     parser.add_argument("--dry-run", action="store_true", help="Validate setup without running")
    |

E501 Line too long (126 > 100)
   --> scripts/run_wfa.py:256:101
    |
255 |             validation_summary = results.get("validation_summary", {})
256 |             print(f"Valid Windows: {validation_summary.get('valid_windows', 0)}/{validation_summary.get('total_windows', 0)}")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
257 |
258 |             print("\nArtifacts saved to: artifacts/wfa/")
    |

E501 Line too long (107 > 100)
   --> scripts/scalability_manager.py:98:101
    |
 96 |         self.logger.info(f"Load balancer initialized with {self.max_workers} workers")
 97 |
 98 |     def submit_task(self, func: Callable, *args, priority: int = 0, **kwargs) -> concurrent.futures.Future:
    |                                                                                                     ^^^^^^^
 99 |         """Submit task with load balancing and priority."""
100 |         try:
    |

E501 Line too long (102 > 100)
   --> scripts/scalability_manager.py:244:101
    |
242 |             new_workers = max(self.min_workers, self.max_workers - 1)
243 |             self._resize_worker_pool(new_workers)
244 |             self.logger.info(f"Scaled down to {new_workers} workers (utilization: {utilization:.1%})")
    |                                                                                                     ^^
245 |
246 |     def _resize_worker_pool(self, new_size: int):
    |

E501 Line too long (111 > 100)
   --> scripts/scalability_manager.py:288:101
    |
286 |         self.backup_dir.mkdir(parents=True, exist_ok=True)
287 |
288 |         self.logger.info(f"Data replication manager initialized: {self.primary_data_dir} -> {self.backup_dir}")
    |                                                                                                     ^^^^^^^^^^^
289 |
290 |     def create_backup(self, backup_name: str | None = None) -> dict[str, Any]:
    |

E501 Line too long (129 > 100)
   --> scripts/scalability_manager.py:673:101
    |
671 |             current_downtime += current_time - self.downtime_start
672 |
673 |         uptime_percentage = ((total_uptime - current_downtime) / total_uptime * 100) if total_uptime.total_seconds() > 0 else 100
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
674 |
675 |         return {
    |

E501 Line too long (103 > 100)
   --> scripts/scalability_manager.py:688:101
    |
686 |             'load_balancer': self.load_balancer.get_performance_metrics(),
687 |             'backup_system': self.data_replication.get_backup_status(),
688 |             'last_health_check': self.last_health_check.isoformat() if self.last_health_check else None
    |                                                                                                     ^^^
689 |         }
    |

E501 Line too long (101 > 100)
   --> scripts/security_manager.py:501:101
    |
500 |             # Check if client should be locked
501 |             if len(self.failed_attempts[client_ip]) >= self.security_settings['max_failed_attempts']:
    |                                                                                                     ^
502 |                 self.locked_clients[client_ip] = current_time + self.security_settings['lockout_duration']
503 |                 self._log_security_event(
    |

E501 Line too long (106 > 100)
   --> scripts/security_manager.py:502:101
    |
500 |             # Check if client should be locked
501 |             if len(self.failed_attempts[client_ip]) >= self.security_settings['max_failed_attempts']:
502 |                 self.locked_clients[client_ip] = current_time + self.security_settings['lockout_duration']
    |                                                                                                     ^^^^^^
503 |                 self._log_security_event(
504 |                     "CLIENT_LOCKED",
    |

E501 Line too long (104 > 100)
   --> scripts/security_manager.py:614:101
    |
612 |                 'active_rate_limits': self.rate_limiter.get_stats(),
613 |                 'locked_clients': len(self.locked_clients),
614 |                 'failed_auth_attempts': sum(len(attempts) for attempts in self.failed_attempts.values())
    |                                                                                                     ^^^^
615 |             },
616 |             'event_breakdown': dict(event_summary),
    |

E501 Line too long (103 > 100)
   --> scripts/security_manager.py:650:101
    |
648 |         else:
649 |             audit_results['audit_checks']['data_encryption'] = 'FAIL'
650 |             audit_results['recommendations'].append("Enable data encryption for sensitive information")
    |                                                                                                     ^^^
651 |             score -= 15
    |

E501 Line too long (103 > 100)
   --> scripts/security_manager.py:679:101
    |
677 |             audit_results['audit_checks']['recent_incidents'] = 'FAIL'
678 |             audit_results['recommendations'].append(
679 |                 f"Address {len(recent_critical_events)} critical security incidents from last 24 hours"
    |                                                                                                     ^^^
680 |             )
681 |             score -= 25
    |

E501 Line too long (131 > 100)
  --> scripts/smoke_imports.py:22:101
   |
22 | def test_class_instantiation(module_name: str, class_name: str, args=None, kwargs=None, description: str = "") -> Tuple[bool, str]:
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
23 |     """Test importing and instantiating a class."""
24 |     args = args or []
   |

F401 `ai_trading.monitoring.MetricsCollector` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/smoke_imports.py:54:43
   |
52 |     # Monitoring classes - critical for startup
53 |     try:
54 |         from ai_trading.monitoring import MetricsCollector, PerformanceMonitor
   |                                           ^^^^^^^^^^^^^^^^
55 |         tests.append((True, "✅ MetricsCollector and PerformanceMonitor imported successfully"))
56 |     except ImportError as e:
   |
help: Remove unused import

F401 `ai_trading.monitoring.PerformanceMonitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/smoke_imports.py:54:61
   |
52 |     # Monitoring classes - critical for startup
53 |     try:
54 |         from ai_trading.monitoring import MetricsCollector, PerformanceMonitor
   |                                                             ^^^^^^^^^^^^^^^^^^
55 |         tests.append((True, "✅ MetricsCollector and PerformanceMonitor imported successfully"))
56 |     except ImportError as e:
   |
help: Remove unused import

E501 Line too long (106 > 100)
  --> scripts/smoke_imports.py:77:101
   |
75 |     tests.append(test_import("ai_trading.portfolio.optimizer", "- portfolio optimizer"))
76 |     tests.append(test_import("ai_trading.execution.transaction_costs", "- transaction costs"))
77 |     tests.append(test_import("scripts.transaction_cost_calculator", "- transaction cost calculator shim"))
   |                                                                                                     ^^^^^^
78 |     tests.append(test_import("scripts.portfolio_optimizer", "- portfolio optimizer shim"))
79 |     tests.append(test_import("scripts.strategy_allocator", "- strategy allocator"))
   |

E501 Line too long (105 > 100)
   --> scripts/smoke_imports.py:120:100
    |
118 |             tests.append((True, "✅ TradingConfig.to_dict(safe=True) redacts secrets"))
119 |         else:
120 |             tests.append((False, "❌ TradingConfig.to_dict(safe=True) does not redact secrets properly"))
    |                                                                                                     ^^^^^
121 |
122 |     except Exception as e:
    |

W291 Trailing whitespace
 --> scripts/smoke_runtime.py:6:40
  |
5 | Tests that:
6 | 1. LazyBotContext has .params attribute 
  |                                        ^
7 | 2. pandas MultiIndex is used instead of private _RealMultiIndex
8 | 3. _prepare_run can access runtime.params without AttributeError
  |
help: Remove trailing whitespace

E501 Line too long (103 > 100)
  --> scripts/smoke_runtime.py:94:101
   |
93 |         # This should not raise AttributeError: 'MockRuntime' object has no attribute 'params'
94 |         # Note: It may raise other errors due to missing dependencies, but not AttributeError on params
   |                                                                                                     ^^^
95 |         try:
96 |             _prepare_run(runtime, state)
   |

E501 Line too long (110 > 100)
  --> scripts/strategy_allocator.py:59:101
   |
58 |         if not isinstance(signals_by_strategy, dict):
59 |             logger.warning("Allocate called with non-dict signals_by_strategy: %s", type(signals_by_strategy))
   |                                                                                                     ^^^^^^^^^^
60 |             return []
   |

E501 Line too long (114 > 100)
  --> scripts/strategy_allocator.py:64:101
   |
62 |         # Count total signals for logging
63 |         total_signals = sum(len(signals) for signals in signals_by_strategy.values())
64 |         logger.debug(f"Allocate called with {len(signals_by_strategy)} strategies, {total_signals} total signals")
   |                                                                                                     ^^^^^^^^^^^^^^
65 |
66 |         # AI-AGENT-REF: Enhanced debugging for signal confirmation troubleshooting
   |

E501 Line too long (105 > 100)
  --> scripts/strategy_allocator.py:67:101
   |
66 |         # AI-AGENT-REF: Enhanced debugging for signal confirmation troubleshooting
67 |         logger.debug(f"Current config: signal_confirmation_bars={self.config.signal_confirmation_bars}, "
   |                                                                                                     ^^^^^
68 |                     f"min_confidence={self.config.min_confidence}, delta_threshold={self.config.delta_threshold}")
69 |         logger.debug(f"Current signal_history state: {dict(self.signal_history)}")
   |

E501 Line too long (114 > 100)
  --> scripts/strategy_allocator.py:68:101
   |
66 |         # AI-AGENT-REF: Enhanced debugging for signal confirmation troubleshooting
67 |         logger.debug(f"Current config: signal_confirmation_bars={self.config.signal_confirmation_bars}, "
68 |                     f"min_confidence={self.config.min_confidence}, delta_threshold={self.config.delta_threshold}")
   |                                                                                                     ^^^^^^^^^^^^^^
69 |         logger.debug(f"Current signal_history state: {dict(self.signal_history)}")
   |

E501 Line too long (124 > 100)
  --> scripts/strategy_allocator.py:75:101
   |
73 |         # AI-AGENT-REF: Log confirmed signals for debugging
74 |         confirmed_count = sum(len(signals) for signals in confirmed_signals.values())
75 |         logger.debug(f"Signal confirmation produced {confirmed_count} confirmed signals from {total_signals} input signals")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
76 |
77 |         # AI-AGENT-REF: confidence gate before risk sizing
   |

E501 Line too long (102 > 100)
   --> scripts/strategy_allocator.py:127:101
    |
125 |             for s in signals:
126 |                 # Validate signal object has required attributes
127 |                 if not hasattr(s, 'symbol') or not hasattr(s, 'side') or not hasattr(s, 'confidence'):
    |                                                                                                     ^^
128 |                     logger.warning(f"Invalid signal object missing required attributes: {s}")
129 |                     continue
    |

E501 Line too long (144 > 100)
   --> scripts/strategy_allocator.py:162:101
    |
161 | …l value
162 | …ZED | symbol={s.symbol} original={original_confidence:.4f} normalized={confidence:.4f}")
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
163 | …
164 | …
    |

E501 Line too long (112 > 100)
   --> scripts/strategy_allocator.py:176:101
    |
174 |                 # AI-AGENT-REF: Ensure signal_confirmation_bars is valid before using it
175 |                 confirmation_bars = getattr(self.config, 'signal_confirmation_bars', 2)
176 |                 if confirmation_bars is None or not isinstance(confirmation_bars, int) or confirmation_bars < 1:
    |                                                                                                     ^^^^^^^^^^^^
177 |                     logger.warning(f"Invalid signal_confirmation_bars: {confirmation_bars}, using default 2")
178 |                     confirmation_bars = 2
    |

E501 Line too long (109 > 100)
   --> scripts/strategy_allocator.py:177:101
    |
175 |                 confirmation_bars = getattr(self.config, 'signal_confirmation_bars', 2)
176 |                 if confirmation_bars is None or not isinstance(confirmation_bars, int) or confirmation_bars < 1:
177 |                     logger.warning(f"Invalid signal_confirmation_bars: {confirmation_bars}, using default 2")
    |                                                                                                     ^^^^^^^^^
178 |                     confirmation_bars = 2
    |

E501 Line too long (109 > 100)
   --> scripts/strategy_allocator.py:193:101
    |
191 |                         avg_conf = sum(history_values) / len(history_values)
192 |                         if not isinstance(avg_conf, int | float) or avg_conf < 0:
193 |                             logger.warning(f"Invalid average confidence {avg_conf} for {s.symbol}, skipping")
    |                                                                                                     ^^^^^^^^^
194 |                             continue
195 |                     except (ZeroDivisionError, TypeError, ValueError) as e:
    |

E501 Line too long (101 > 100)
   --> scripts/strategy_allocator.py:203:101
    |
202 |                     # AI-AGENT-REF: Additional defensive check for None or invalid threshold
203 |                     if min_conf_threshold is None or not isinstance(min_conf_threshold, int | float):
    |                                                                                                     ^
204 |                         logger.warning(f"Invalid min_confidence threshold: {min_conf_threshold}, using default 0.6")
205 |                         min_conf_threshold = 0.6
    |

E501 Line too long (116 > 100)
   --> scripts/strategy_allocator.py:204:101
    |
202 |                     # AI-AGENT-REF: Additional defensive check for None or invalid threshold
203 |                     if min_conf_threshold is None or not isinstance(min_conf_threshold, int | float):
204 |                         logger.warning(f"Invalid min_confidence threshold: {min_conf_threshold}, using default 0.6")
    |                                                                                                     ^^^^^^^^^^^^^^^^
205 |                         min_conf_threshold = 0.6
    |

E501 Line too long (101 > 100)
   --> scripts/strategy_allocator.py:208:101
    |
207 |                     # AI-AGENT-REF: Enhanced debugging for confirmation decisions
208 |                     logger.debug(f"Signal confirmation check: {s.symbol}, history={history_values}, "
    |                                                                                                     ^
209 |                                 f"avg_conf={avg_conf:.4f}, threshold={min_conf_threshold:.4f}, "
210 |                                 f"bars_required={confirmation_bars}, bars_available={len(history_values)}")
    |

E501 Line too long (107 > 100)
   --> scripts/strategy_allocator.py:210:101
    |
208 |                     logger.debug(f"Signal confirmation check: {s.symbol}, history={history_values}, "
209 |                                 f"avg_conf={avg_conf:.4f}, threshold={min_conf_threshold:.4f}, "
210 |                                 f"bars_required={confirmation_bars}, bars_available={len(history_values)}")
    |                                                                                                     ^^^^^^^
211 |
212 |                     if avg_conf >= min_conf_threshold:
    |

E501 Line too long (138 > 100)
   --> scripts/strategy_allocator.py:218:101
    |
216 | …         confirmed_signal.confidence = avg_conf
217 | …         confirmed[strategy].append(confirmed_signal)
218 | …         logger.debug(f"Signal CONFIRMED: {s.symbol} with avg_conf: {avg_conf:.4f} >= threshold: {min_conf_threshold:.4f}")
    |                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
219 | …     else:
220 | …         logger.debug(f"Signal REJECTED: {s.symbol}, avg_conf: {avg_conf:.4f} < threshold: {min_conf_threshold:.4f}")
    |

E501 Line too long (132 > 100)
   --> scripts/strategy_allocator.py:220:101
    |
218 | …             logger.debug(f"Signal CONFIRMED: {s.symbol} with avg_conf: {avg_conf:.4f} >= threshold: {min_conf_threshold:.4f}")
219 | …         else:
220 | …             logger.debug(f"Signal REJECTED: {s.symbol}, avg_conf: {avg_conf:.4f} < threshold: {min_conf_threshold:.4f}")
    |                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
221 | …     else:
222 | …         logger.debug(f"Signal NOT READY: {s.symbol}, history length: {len(self.signal_history[key])}/{confirmation_bars} (need {con…
    |

E501 Line too long (198 > 100)
   --> scripts/strategy_allocator.py:222:101
    |
220 | …conf:.4f} < threshold: {min_conf_threshold:.4f}")
221 | …
222 | …en(self.signal_history[key])}/{confirmation_bars} (need {confirmation_bars - len(self.signal_history[key])} more)")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
223 | …
224 | …y[key]}")
    |

E501 Line too long (105 > 100)
   --> scripts/strategy_allocator.py:254:101
    |
252 |                 logger.info(
253 |                     "SIGNAL_SKIPPED_DELTA",
254 |                     extra={"symbol": s.symbol, "delta": delta, "threshold": self.config.delta_threshold},
    |                                                                                                     ^^^^^
255 |                 )
256 |                 continue
    |

E501 Line too long (128 > 100)
   --> scripts/strategy_allocator.py:299:101
    |
297 |                     signal.weight = min(confidence_weight, max_individual_weight)
298 |
299 |                     logger.debug(f"Assigned weight {signal.weight:.3f} to {signal.symbol} (confidence={signal.confidence:.3f})")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
300 |             else:
301 |                 # Fallback: equal weight distribution
    |

E501 Line too long (106 > 100)
   --> scripts/strategy_allocator.py:302:101
    |
300 |             else:
301 |                 # Fallback: equal weight distribution
302 |                 equal_weight = min(max_total_exposure / len(buy_signals), 0.15)  # Cap at 15% per position
    |                                                                                                     ^^^^^^
303 |                 for signal in buy_signals:
304 |                     signal.weight = equal_weight
    |

E501 Line too long (111 > 100)
   --> scripts/strategy_allocator.py:318:101
    |
316 |             # Use a reasonable default that respects exposure caps
317 |             # This should be set based on actual position size, but for safety, cap at max exposure
318 |             max_exit_weight = min(0.25, max_total_exposure / max(len(sell_signals), 1))  # Cap individual exits
    |                                                                                                     ^^^^^^^^^^^
319 |             signal.weight = max_exit_weight
    |

E501 Line too long (112 > 100)
   --> scripts/strategy_allocator.py:321:101
    |
319 |             signal.weight = max_exit_weight
320 |
321 |             logger.debug(f"Assigned exit weight {signal.weight:.3f} to {signal.symbol} (was defaulting to 1.0)")
    |                                                                                                     ^^^^^^^^^^^^
322 |
323 |         # Validate total exposure doesn't exceed cap
    |

E501 Line too long (121 > 100)
   --> scripts/strategy_allocator.py:326:101
    |
324 |         total_buy_weight = sum(s.weight for s in buy_signals)
325 |         if total_buy_weight > max_total_exposure:
326 |             logger.warning(f"Total buy weight {total_buy_weight:.3f} exceeds cap {max_total_exposure:.3f}, scaling down")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
327 |             scale_factor = max_total_exposure / total_buy_weight
328 |             for signal in buy_signals:
    |

E501 Line too long (153 > 100)
   --> scripts/strategy_allocator.py:332:101
    |
330 | …t:.3f} for {signal.symbol}")
331 | …
332 | …} buys (total weight: {sum(s.weight for s in buy_signals):.3f}), {len(sell_signals)} sells")
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
333 | …
334 | …None:
    |

E501 Line too long (106 > 100)
  --> scripts/system_diagnostic.py:93:101
   |
91 |         try:
92 |             # Use ps to find Python processes
93 |             result = subprocess.run(['ps', 'aux'], capture_output=True, text=True, timeout=30, check=True)
   |                                                                                                     ^^^^^^
94 |             if result.returncode == 0:
95 |                 lines = result.stdout.split('\n')
   |

E501 Line too long (109 > 100)
   --> scripts/system_diagnostic.py:350:101
    |
348 |         # Process recommendations
349 |         if 'process_analysis' in results and isinstance(results['process_analysis'], list):
350 |             python_processes = [p for p in results['process_analysis'] if isinstance(p, dict) and 'pid' in p]
    |                                                                                                     ^^^^^^^^^
351 |             if len(python_processes) > 1:
352 |                 recommendations.append(
    |

E501 Line too long (102 > 100)
   --> scripts/system_diagnostic.py:353:101
    |
351 |             if len(python_processes) > 1:
352 |                 recommendations.append(
353 |                     f"MEDIUM PRIORITY: Multiple Python processes detected ({len(python_processes)}). "
    |                                                                                                     ^^
354 |                     "Consider consolidating or implementing proper process management."
355 |                 )
    |

E501 Line too long (105 > 100)
   --> scripts/system_diagnostic.py:382:101
    |
380 |             if 'open_file_descriptors' in fh_data and fh_data['open_file_descriptors'] > 100:
381 |                 recommendations.append(
382 |                     f"MEDIUM PRIORITY: High file descriptor count ({fh_data['open_file_descriptors']}). "
    |                                                                                                     ^^^^^
383 |                     "Check for file handle leaks."
384 |                 )
    |

W291 Trailing whitespace
 --> scripts/system_health_checker.py:6:30
  |
4 | Provides centralized health monitoring for:
5 | - Sentiment analysis success rates
6 | - Meta-learning system status  
  |                              ^^
7 | - Order execution performance
8 | - Liquidity management effectiveness
  |
help: Remove trailing whitespace

W293 Blank line contains whitespace
  --> scripts/system_health_checker.py:54:1
   |
52 |     """
53 |     Comprehensive system health monitoring for the trading bot.
54 |     
   | ^^^^
55 |     Monitors all critical components and provides centralized health reporting
56 |     with automated alerting for degraded performance.
   |
help: Remove whitespace from blank line

E501 Line too long (117 > 100)
   --> scripts/system_health_checker.py:176:101
    |
174 |         for comp_name, comp_health in components.items():
175 |             if comp_health.status == "critical":
176 |                 alerts.append(f"{comp_name.title()}: CRITICAL - {comp_health.details.get('issue', 'Unknown issue')}")
    |                                                                                                     ^^^^^^^^^^^^^^^^^
177 |             elif comp_health.status == "warning":
178 |                 alerts.append(f"{comp_name.title()}: WARNING - {comp_health.details.get('issue', 'Performance degraded')}")
    |

E501 Line too long (123 > 100)
   --> scripts/system_health_checker.py:178:101
    |
176 |                 alerts.append(f"{comp_name.title()}: CRITICAL - {comp_health.details.get('issue', 'Unknown issue')}")
177 |             elif comp_health.status == "warning":
178 |                 alerts.append(f"{comp_name.title()}: WARNING - {comp_health.details.get('issue', 'Performance degraded')}")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^
179 |
180 |         return SystemHealthStatus(
    |

E501 Line too long (101 > 100)
   --> scripts/system_health_checker.py:283:101
    |
281 |                         'min_required': min_trades,
282 |                         'data_quality_score': quality_report.get('data_quality_score', 0),
283 |                         'bootstrap_enabled': getattr(config, 'META_LEARNING_BOOTSTRAP_ENABLED', True)
    |                                                                                                     ^
284 |                     }
285 |                 )
    |

E501 Line too long (105 > 100)
   --> scripts/system_health_checker.py:323:101
    |
322 |                 # Determine status
323 |                 if (success_rate >= self.health_thresholds['order_execution']['success_rate_warning'] and
    |                                                                                                     ^^^^^
324 |                     avg_fill_time <= self.health_thresholds['order_execution']['avg_fill_time_warning']):
325 |                     status = "healthy"
    |

E501 Line too long (105 > 100)
   --> scripts/system_health_checker.py:324:101
    |
322 |                 # Determine status
323 |                 if (success_rate >= self.health_thresholds['order_execution']['success_rate_warning'] and
324 |                     avg_fill_time <= self.health_thresholds['order_execution']['avg_fill_time_warning']):
    |                                                                                                     ^^^^^
325 |                     status = "healthy"
326 |                     issue = "Operating normally"
    |

E501 Line too long (108 > 100)
   --> scripts/system_health_checker.py:327:101
    |
325 |                     status = "healthy"
326 |                     issue = "Operating normally"
327 |                 elif (success_rate >= self.health_thresholds['order_execution']['success_rate_critical'] and
    |                                                                                                     ^^^^^^^^
328 |                       avg_fill_time <= self.health_thresholds['order_execution']['avg_fill_time_critical']):
329 |                     status = "warning"
    |

E501 Line too long (108 > 100)
   --> scripts/system_health_checker.py:328:101
    |
326 |                     issue = "Operating normally"
327 |                 elif (success_rate >= self.health_thresholds['order_execution']['success_rate_critical'] and
328 |                       avg_fill_time <= self.health_thresholds['order_execution']['avg_fill_time_critical']):
    |                                                                                                     ^^^^^^^^
329 |                     status = "warning"
330 |                     issue = f"Performance degraded: {success_rate:.1%} success, {avg_fill_time:.1f}s avg fill"
    |

E501 Line too long (110 > 100)
   --> scripts/system_health_checker.py:330:101
    |
328 |                       avg_fill_time <= self.health_thresholds['order_execution']['avg_fill_time_critical']):
329 |                     status = "warning"
330 |                     issue = f"Performance degraded: {success_rate:.1%} success, {avg_fill_time:.1f}s avg fill"
    |                                                                                                     ^^^^^^^^^^
331 |                 else:
332 |                     status = "critical"
    |

E501 Line too long (106 > 100)
   --> scripts/system_health_checker.py:333:101
    |
331 |                 else:
332 |                     status = "critical"
333 |                     issue = f"Poor performance: {success_rate:.1%} success, {avg_fill_time:.1f}s avg fill"
    |                                                                                                     ^^^^^^
334 |
335 |                 return ComponentHealth(
    |

E501 Line too long (109 > 100)
   --> scripts/system_health_checker.py:465:101
    |
463 |             "overall_status": health_status.overall_status,
464 |             "component_count": len(health_status.components),
465 |             "healthy_components": sum(1 for c in health_status.components.values() if c.status == "healthy"),
    |                                                                                                     ^^^^^^^^^
466 |             "warning_components": sum(1 for c in health_status.components.values() if c.status == "warning"),
467 |             "critical_components": sum(1 for c in health_status.components.values() if c.status == "critical"),
    |

E501 Line too long (109 > 100)
   --> scripts/system_health_checker.py:466:101
    |
464 |             "component_count": len(health_status.components),
465 |             "healthy_components": sum(1 for c in health_status.components.values() if c.status == "healthy"),
466 |             "warning_components": sum(1 for c in health_status.components.values() if c.status == "warning"),
    |                                                                                                     ^^^^^^^^^
467 |             "critical_components": sum(1 for c in health_status.components.values() if c.status == "critical"),
468 |             "alert_count": len(health_status.alerts)
    |

E501 Line too long (111 > 100)
   --> scripts/system_health_checker.py:467:101
    |
465 |             "healthy_components": sum(1 for c in health_status.components.values() if c.status == "healthy"),
466 |             "warning_components": sum(1 for c in health_status.components.values() if c.status == "warning"),
467 |             "critical_components": sum(1 for c in health_status.components.values() if c.status == "critical"),
    |                                                                                                     ^^^^^^^^^^^
468 |             "alert_count": len(health_status.alerts)
469 |         }
    |

E501 Line too long (132 > 100)
  --> scripts/validate_critical_features.py:18:101
   |
16 |     logging.info(f"Running: {description}")
17 |     try:
18 |         result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=30, cwd=Path(__file__).parent, check=False)
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
19 |         if result.returncode == 0:
20 |             logging.info(f"✓ {description} passed")
   |

W291 Trailing whitespace
  --> scripts/validate_critical_fixes.py:11:62
   |
10 | 1. Missing Sentiment Module (CRITICAL)
11 | 2. MetaLearning Strategy Method Signature Mismatch (CRITICAL) 
   |                                                              ^
12 | 3. Alpaca API Endpoint Issues (HIGH PRIORITY)
13 | 4. Module Import Path Problems (MEDIUM)
   |
help: Remove trailing whitespace

E501 Line too long (109 > 100)
  --> scripts/validate_enhancements.py:51:101
   |
49 |         perf_metrics = performance_monitor.get_performance_metrics()
50 |
51 |         print(f"  ✓ Metrics collected: {len(summary['counters'])} counters, {len(summary['gauges'])} gauges")
   |                                                                                                     ^^^^^^^^^
52 |         print(f"  ✓ Performance tracking: {perf_metrics['total_trades']} trades recorded")
   |

E501 Line too long (110 > 100)
  --> scripts/validate_enhancements.py:78:101
   |
77 |                 if signal_score <= 0:
78 |                     return {"decision": "REJECT", "reason": "REJECT_COST_UNPROFITABLE", "score": signal_score}
   |                                                                                                     ^^^^^^^^^^
79 |                 elif signal_score < self.min_edge_threshold:
80 |                     return {"decision": "REJECT", "reason": "REJECT_EDGE_TOO_LOW", "score": signal_score}
   |

E501 Line too long (105 > 100)
  --> scripts/validate_enhancements.py:80:101
   |
78 |                     return {"decision": "REJECT", "reason": "REJECT_COST_UNPROFITABLE", "score": signal_score}
79 |                 elif signal_score < self.min_edge_threshold:
80 |                     return {"decision": "REJECT", "reason": "REJECT_EDGE_TOO_LOW", "score": signal_score}
   |                                                                                                     ^^^^^
81 |                 else:
82 |                     return {"decision": "ACCEPT", "reason": "ACCEPT_OK", "score": signal_score}
   |

E501 Line too long (107 > 100)
   --> scripts/validate_enhancements.py:102:101
    |
101 |         for status, symbol, edge, expected, actual, reason in results:
102 |             print(f"  {status} {symbol}: edge={edge:.4f}, expected={expected}, actual={actual} ({reason})")
    |                                                                                                     ^^^^^^^
103 |
104 |         passed = sum(1 for r in results if r[0] == "✓")
    |

E501 Line too long (145 > 100)
   --> scripts/validate_enhancements.py:138:101
    |
136 | …
137 | …
138 | …: 100, "exit_price": 105, "pnl": 500, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
139 | …: 200, "exit_price": 208, "pnl": 800, "quantity": 100, "timestamp": datetime.now(UTC)}),
140 | …": 150, "exit_price": 155, "pnl": 500, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |

E501 Line too long (145 > 100)
   --> scripts/validate_enhancements.py:139:101
    |
137 | …
138 | …: 100, "exit_price": 105, "pnl": 500, "quantity": 100, "timestamp": datetime.now(UTC)}),
139 | …: 200, "exit_price": 208, "pnl": 800, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
140 | …": 150, "exit_price": 155, "pnl": 500, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |

E501 Line too long (146 > 100)
   --> scripts/validate_enhancements.py:140:101
    |
138 | …: 100, "exit_price": 105, "pnl": 500, "quantity": 100, "timestamp": datetime.now(UTC)}),
139 | …: 200, "exit_price": 208, "pnl": 800, "quantity": 100, "timestamp": datetime.now(UTC)}),
140 | …": 150, "exit_price": 155, "pnl": 500, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
141 | …
142 | …
    |

E501 Line too long (151 > 100)
   --> scripts/validate_enhancements.py:143:101
    |
142 | …
143 | …ce": 100, "exit_price": 98, "pnl": -200, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
144 | …ce": 300, "exit_price": 310, "pnl": 1000, "quantity": 100, "timestamp": datetime.now(UTC)}),
145 | …e": 80, "exit_price": 82, "pnl": 200, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |

E501 Line too long (152 > 100)
   --> scripts/validate_enhancements.py:144:101
    |
142 | …
143 | …ce": 100, "exit_price": 98, "pnl": -200, "quantity": 100, "timestamp": datetime.now(UTC)}),
144 | …ce": 300, "exit_price": 310, "pnl": 1000, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
145 | …e": 80, "exit_price": 82, "pnl": 200, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |

E501 Line too long (148 > 100)
   --> scripts/validate_enhancements.py:145:101
    |
143 | …rice": 100, "exit_price": 98, "pnl": -200, "quantity": 100, "timestamp": datetime.now(UTC)}),
144 | …rice": 300, "exit_price": 310, "pnl": 1000, "quantity": 100, "timestamp": datetime.now(UTC)}),
145 | …ice": 80, "exit_price": 82, "pnl": 200, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
146 | …
147 | …
    |

E501 Line too long (147 > 100)
   --> scripts/validate_enhancements.py:148:101
    |
147 | …
148 | … 400, "exit_price": 390, "pnl": -1000, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
149 | … 250, "exit_price": 245, "pnl": -500, "quantity": 100, "timestamp": datetime.now(UTC)}),
150 | … 350, "exit_price": 348, "pnl": -200, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |

E501 Line too long (146 > 100)
   --> scripts/validate_enhancements.py:149:101
    |
147 | …
148 | …: 400, "exit_price": 390, "pnl": -1000, "quantity": 100, "timestamp": datetime.now(UTC)}),
149 | …: 250, "exit_price": 245, "pnl": -500, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
150 | …: 350, "exit_price": 348, "pnl": -200, "quantity": 100, "timestamp": datetime.now(UTC)}),
151 | …
    |

E501 Line too long (146 > 100)
   --> scripts/validate_enhancements.py:150:101
    |
148 | …: 400, "exit_price": 390, "pnl": -1000, "quantity": 100, "timestamp": datetime.now(UTC)}),
149 | …: 250, "exit_price": 245, "pnl": -500, "quantity": 100, "timestamp": datetime.now(UTC)}),
150 | …: 350, "exit_price": 348, "pnl": -200, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
151 | …
    |

E501 Line too long (102 > 100)
   --> scripts/validate_enhancements.py:165:101
    |
163 |         # Verify allocations
164 |         total_allocated = sum(allocations.values())
165 |         print(f"  ✓ Total capital allocated: ${total_allocated:,.0f} (target: ${total_capital:,.0f})")
    |                                                                                                     ^^
166 |
167 |         for strategy, allocation in allocations.items():
    |

E501 Line too long (111 > 100)
   --> scripts/validate_enhancements.py:175:101
    |
173 |         best_strategy = allocations_by_value[0][0]
174 |
175 |         print(f"  ✓ Highest allocation to: {best_strategy} (expected momentum based on simulated performance)")
    |                                                                                                     ^^^^^^^^^^^
176 |
177 |         # Test rebalancing decision
    |

E501 Line too long (103 > 100)
  --> scripts/validate_final_polish.py:21:101
   |
19 |         content = f.read()
20 |
21 |     if len(content.strip().split('\n')) <= 5 and 'from ai_trading.core.bot_engine import *' in content:
   |                                                                                                     ^^^
22 |         logging.info("✓ Bot engine shim is correctly minimal")
23 |     else:
   |

E501 Line too long (121 > 100)
  --> scripts/validate_final_polish.py:30:101
   |
28 |         ci_content = f.read()
29 |
30 |     if 'matrix:' in ci_content and 'python-version:' in ci_content and '3.12.3' in ci_content and "'3.12'" in ci_content:
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
31 |         logging.info("✓ CI matrix configured correctly")
32 |     else:
   |

E501 Line too long (150 > 100)
  --> scripts/validate_fixes.py:28:101
   |
27 | …
28 | …d UnboundLocalError in else block\s*status = ctx\.drawdown_circuit_breaker\.get_status\(\)"
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
29 | …
30 | …
   |

E501 Line too long (112 > 100)
   --> scripts/validate_fixes.py:145:101
    |
143 |     logging.info("4. Validating circuit breaker error handling fix...")
144 |
145 |     circuit_breaker_path = "/home/runner/work/ai-trading-bot/ai-trading-bot/ai_trading/risk/circuit_breakers.py"
    |                                                                                                     ^^^^^^^^^^^^
146 |
147 |     if not os.path.exists(circuit_breaker_path):
    |

E501 Line too long (101 > 100)
  --> scripts/validate_fixes_root.py:95:101
   |
93 | def validate_bot_engine_functions():
94 |     """Validate that the new functions exist in bot_engine without importing."""
95 |     bot_engine_path = '/home/runner/work/ai-trading-bot/ai-trading-bot/ai_trading/core/bot_engine.py'
   |                                                                                                     ^
96 |
97 |     with open(bot_engine_path, 'r') as f:
   |

E501 Line too long (105 > 100)
   --> scripts/validate_fixes_root.py:136:101
    |
134 |         return True
135 |     else:
136 |         print(f"✗ Expected at least 2 instances of ensure_ascii=False, found {ensure_ascii_false_count}")
    |                                                                                                     ^^^^^
137 |         return False
    |

E501 Line too long (103 > 100)
   --> scripts/validate_improvements.py:132:101
    |
130 | def main():
131 |     """Run all validation tests."""
132 |     logging.info("Running validation tests for package-safe imports and reliability improvements...\n")
    |                                                                                                     ^^^
133 |
134 |     # Set testing mode to avoid environment validation errors
    |

E501 Line too long (103 > 100)
  --> scripts/validate_migration.py:92:101
   |
90 |     # Check signals.py imports transaction costs correctly
91 |     signals_imports = extract_imports("ai_trading/signals.py")
92 |     correct_tc_import = any("ai_trading.execution.transaction_costs" in imp for imp in signals_imports)
   |                                                                                                     ^^^
93 |     incorrect_tc_import = any("scripts.transaction_cost" in imp for imp in signals_imports)
   |

E501 Line too long (150 > 100)
  --> scripts/validate_problem_statement_fixes.py:38:101
   |
36 | …OUT
37 | …
38 | … (expected: {expected_failures}) - {'✓' if actual_failures == expected_failures else '✗'}")
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
39 | … (expected: {expected_recovery}s) - {'✓' if actual_recovery == expected_recovery else '✗'}")
   |

E501 Line too long (151 > 100)
  --> scripts/validate_problem_statement_fixes.py:39:101
   |
38 | … (expected: {expected_failures}) - {'✓' if actual_failures == expected_failures else '✗'}")
39 | … (expected: {expected_recovery}s) - {'✓' if actual_recovery == expected_recovery else '✗'}")
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
40 | …
41 | …
   |

E501 Line too long (217 > 100)
  --> scripts/validate_problem_statement_fixes.py:51:101
   |
49 | …
50 | …
51 | …ery={bot_recovery_val} - {'✓' if bot_failures_val == expected_failures and bot_recovery_val == expected_recovery else '✗'}"))
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
52 | …
53 | …
   |

E501 Line too long (145 > 100)
  --> scripts/validate_problem_statement_fixes.py:75:101
   |
73 | …
74 | …
75 | …value} (expected: {expected_value}) - {'✓' if current_value == expected_value else '✗'}")
   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
76 | …
77 | …
   |

E501 Line too long (119 > 100)
   --> scripts/validate_problem_statement_fixes.py:121:101
    |
119 |             'Market status caching': '_MARKET_STATUS_CACHE' in content,
120 |             'Order validation integration': 'ORDER_VALIDATION_FAILED' in content,
121 |             'Async validation integration': 'Pre-validate order to reduce execution latency (async version)' in content
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^
122 |         }
    |

E501 Line too long (105 > 100)
   --> scripts/validate_problem_statement_fixes.py:149:101
    |
147 |             'FULL_FILL_SUCCESS includes requested_qty': '"requested_qty": requested_qty' in content,
148 |             'FULL_FILL_SUCCESS includes filled_qty': '"filled_qty": filled_qty' in content,
149 |             'ORDER_FILL_CONSOLIDATED uses total_filled_qty': '"total_filled_qty": buf["qty"]' in content,
    |                                                                                                     ^^^^^
150 |             'Clear field name documentation': 'AI-AGENT-REF: Clarify this is the total filled quantity' in content
151 |         }
    |

E501 Line too long (114 > 100)
   --> scripts/validate_problem_statement_fixes.py:150:101
    |
148 |             'FULL_FILL_SUCCESS includes filled_qty': '"filled_qty": filled_qty' in content,
149 |             'ORDER_FILL_CONSOLIDATED uses total_filled_qty': '"total_filled_qty": buf["qty"]' in content,
150 |             'Clear field name documentation': 'AI-AGENT-REF: Clarify this is the total filled quantity' in content
    |                                                                                                     ^^^^^^^^^^^^^^
151 |         }
    |

E501 Line too long (110 > 100)
   --> scripts/validate_problem_statement_fixes.py:196:101
    |
194 |     if all_passed:
195 |         logging.info("🎉 ALL FIXES VALIDATED SUCCESSFULLY!")
196 |         logging.info("The trading bot critical issues have been resolved according to the problem statement.")
    |                                                                                                     ^^^^^^^^^^
197 |     else:
198 |         logging.info("❌ SOME FIXES FAILED VALIDATION")
    |

E501 Line too long (115 > 100)
   --> scripts/validate_production_fixes.py:195:100
    |
193 |                 # Allow for missing dependencies like pandas
194 |                 if any(dep in str(e).lower() for dep in ['pandas', 'pydantic', 'pytz']):
195 |                     logging.info(f"✅ {module_name} import blocked by missing dependencies (expected in test env)")
    |                                                                                                     ^^^^^^^^^^^^^^^
196 |                 else:
197 |                     logging.info(f"❌ {module_name} import failed: {e}")
    |

E501 Line too long (101 > 100)
  --> scripts/validate_runtime_hardening.py:30:101
   |
28 |     dt = datetime(2024, 1, 1, 12, 0, 0, tzinfo=UTC)
29 |     formatted = format_datetime_utc(dt)
30 |     assert formatted == "2024-01-01T12:00:00Z", f"Expected '2024-01-01T12:00:00Z', got '{formatted}'"
   |                                                                                                     ^
31 |
32 |     logging.info("✓ UTC timestamp helper working correctly")
   |

E501 Line too long (104 > 100)
   --> scripts/validate_standalone.py:148:101
    |
147 |         def total_execution_cost_bps(self, volume_ratio: float = 1.0) -> float:
148 |             return self.half_spread_bps * 2 + self.commission_bps + self.slippage_cost_bps(volume_ratio)
    |                                                                                                     ^^^^
149 |
150 |     # Test cost calculation
    |

W291 Trailing whitespace
  --> scripts/validate_startup_fixes.py:11:66
   |
10 | 1. Defer Alpaca validation to runtime (no sys.exit during import)
11 | 2. Load .env before constructing settings, lazy-import the engine  
   |                                                                  ^^
12 | 3. Accept both ALPACA_* and APCA_* credentials, with safe redacted logging
13 | 4. Fix UTC timestamp format (no double "Z")
   |
help: Remove trailing whitespace

F401 `ai_trading.runner` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/validate_startup_fixes.py:33:32
   |
32 |     try:
33 |         from ai_trading import runner
   |                                ^^^^^^
34 |         from ai_trading.config.management import _resolve_alpaca_env
35 |         logging.info("   ✓ Core modules imported without credentials")
   |
help: Remove unused import: `ai_trading.runner`

F401 `ai_trading.config.management._resolve_alpaca_env` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/validate_startup_fixes.py:34:50
   |
32 |     try:
33 |         from ai_trading import runner
34 |         from ai_trading.config.management import _resolve_alpaca_env
   |                                                  ^^^^^^^^^^^^^^^^^^^
35 |         logging.info("   ✓ Core modules imported without credentials")
36 |         logging.info("   ✓ No sys.exit() calls during import")
   |
help: Remove unused import: `ai_trading.config.management._resolve_alpaca_env`

E501 Line too long (102 > 100)
   --> scripts/validate_startup_fixes.py:208:101
    |
206 |         api_key, secret_key, base_url = _resolve_alpaca_env()
207 |
208 |         if api_key == 'secret_key_should_be_masked' and secret_key == 'secret_value_should_be_masked':
    |                                                                                                     ^^
209 |             logging.info("   ✓ Credential resolution works (logging is redacted in implementation)")
210 |             return True
    |

E712 Avoid equality comparisons to `True`; use `masked['has_credentials']:` for truth checks
  --> scripts/validate_unified_config.py:48:12
   |
46 |     masked = get_masked_config()
47 |     assert "test..._123" in masked['alpaca_api_key'] or "***MASKED***" in masked['alpaca_api_key']
48 |     assert masked['has_credentials'] == True
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |     logging.info("✓ Masked config logging works")
   |
help: Replace with `masked['has_credentials']`

E712 Avoid equality comparisons to `True`; use `acquired:` for truth checks
  --> scripts/validate_unified_config.py:95:12
   |
93 |     # Test basic acquisition
94 |     acquired = limiter.acquire_sync("test_route", tokens=1, timeout=5.0)
95 |     assert acquired == True, "Should acquire tokens successfully"
   |            ^^^^^^^^^^^^^^^^
96 |     logging.info("✓ Basic token acquisition works")
   |
help: Replace with `acquired`

E712 Avoid equality comparisons to `True`; use `status["enabled"]:` for truth checks
   --> scripts/validate_unified_config.py:101:12
    |
 99 |     status = limiter.get_status("orders")
100 |     assert "available_tokens" in status, "Status should include available tokens"
101 |     assert status["enabled"] == True, "Orders route should be enabled"
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^
102 |     logging.info("✓ Rate limiter status works")
    |
help: Replace with `status["enabled"]`

E712 Avoid equality comparisons to `False`; use `not validation_report["file_exists"]:` for false checks
   --> scripts/validate_unified_config.py:150:12
    |
148 |     # Test validation
149 |     validation_report = validate_hyperparams_file("nonexistent_file.json")
150 |     assert validation_report["file_exists"] == False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
151 |     assert len(validation_report["warnings"]) > 0
152 |     logging.info("✓ Validation report works")
    |
help: Replace with `not validation_report["file_exists"]`

E501 Line too long (161 > 100)
  --> scripts/verify_config.py:53:102
   |
51 | …ronment variables
52 | …
53 | …env: {', '.join(placeholder_vars)}\n   Please replace YOUR_* placeholders with your real API keys"
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
54 | …
55 | …
   |

E501 Line too long (105 > 100)
   --> scripts/verify_config.py:120:101
    |
119 |         # Check if keys are accessible
120 |         has_api_key = bool(config.ALPACA_API_KEY and config.ALPACA_API_KEY != 'YOUR_ALPACA_API_KEY_HERE')
    |                                                                                                     ^^^^^
121 |         has_secret = bool(config.ALPACA_SECRET_KEY and config.ALPACA_SECRET_KEY != 'YOUR_ALPACA_SECRET_KEY_HERE')
    |

E501 Line too long (113 > 100)
   --> scripts/verify_config.py:121:101
    |
119 |         # Check if keys are accessible
120 |         has_api_key = bool(config.ALPACA_API_KEY and config.ALPACA_API_KEY != 'YOUR_ALPACA_API_KEY_HERE')
121 |         has_secret = bool(config.ALPACA_SECRET_KEY and config.ALPACA_SECRET_KEY != 'YOUR_ALPACA_SECRET_KEY_HERE')
    |                                                                                                     ^^^^^^^^^^^^^
122 |
123 |         if has_api_key and has_secret:
    |

E501 Line too long (105 > 100)
  --> scripts/verify_critical_fixes.py:15:101
   |
14 |     # Check that the fix is present
15 |     assert '.replace(\'+00:00\', \'Z\')' in content, "RFC3339 timestamp fix not found in data_fetcher.py"
   |                                                                                                     ^^^^^
16 |
17 |     # Check both start and end parameters are fixed
   |

E501 Line too long (121 > 100)
  --> scripts/verify_critical_fixes.py:53:101
   |
51 |     assert 'pd.to_numeric' in content, "Price conversion logic not found"
52 |     assert 'errors="coerce"' in content, "Error handling for price conversion not found"
53 |     assert 'METALEARN_INVALID_PRICES - No trades with valid prices' in content, "Invalid prices error handling not found"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
54 |
55 |     logging.info("✓ Meta learning price conversion fixes verified in meta_learning.py")
   |

E501 Line too long (101 > 100)
  --> scripts/verify_critical_fixes.py:66:101
   |
64 |     assert 'ALLOW_STALE_DATA_STARTUP' in content, "Stale data bypass environment variable not found"
65 |     assert 'BYPASS_STALE_DATA_STARTUP' in content, "Stale data bypass logic not found"
66 |     assert 'stale_data = summary.get("stale_data", [])' in content, "Stale data extraction not found"
   |                                                                                                     ^
67 |
68 |     logging.info("✓ Stale data bypass fix verified in bot_engine.py")
   |

E501 Line too long (101 > 100)
   --> tests/conftest.py:427:101
    |
425 |         def __truediv__(self, other):
426 |             if isinstance(other, (list, ArrayStub)):
427 |                 return ArrayStub([a / b if b != 0 else 0 for a, b in zip(self, other, strict=False)])
    |                                                                                                     ^
428 |             return ArrayStub([x / other if other != 0 else 0 for x in self])
    |

E501 Line too long (121 > 100)
   --> tests/conftest.py:473:101
    |
471 |     numpy_mod.isscalar = lambda x: isinstance(x, (int, float, complex))
472 |     numpy_mod.bool_ = bool
473 |     numpy_mod.linspace = lambda start, stop, num: ArrayStub([start + (stop - start) * i / (num - 1) for i in range(num)])
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
474 |
475 |     # Add random module stub
    |

E501 Line too long (108 > 100)
   --> tests/conftest.py:714:101
    |
712 |                         result.append(self[i] / other[i])
713 |                 return SeriesStub(result)
714 |             return SeriesStub([x / other if str(x) != 'nan' and other != 0 else float('nan') for x in self])
    |                                                                                                     ^^^^^^^^
715 |
716 |         def __getattr__(self, name):
    |

E501 Line too long (131 > 100)
   --> tests/conftest.py:885:101
    |
883 |     ta_mod.atr = lambda *a, **k: [1.0] * 14  # Return dummy ATR values
884 |     # AI-AGENT-REF: Add missing TA-Lib compatible methods for test compatibility
885 |     ta_mod.SMA = lambda data, timeperiod=20: [sum(data[max(0, i-timeperiod+1):i+1])/min(timeperiod, i+1) for i in range(len(data))]
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
886 |     ta_mod.EMA = lambda data, timeperiod=20: data  # Simplified for testing
887 |     ta_mod.RSI = lambda data, timeperiod=14: [50.0] * len(data)  # Simplified for testing
    |

E501 Line too long (134 > 100)
   --> tests/conftest.py:888:101
    |
886 |     ta_mod.EMA = lambda data, timeperiod=20: data  # Simplified for testing
887 |     ta_mod.RSI = lambda data, timeperiod=14: [50.0] * len(data)  # Simplified for testing
888 |     ta_mod.MACD = lambda data, fastperiod=12, slowperiod=26, signalperiod=9: ([0.0] * len(data), [0.0] * len(data), [0.0] * len(data))
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
889 |     ta_mod.BBANDS = lambda data, timeperiod=20, nbdevup=2, nbdevdn=2: ([x+2 for x in data], data, [x-2 for x in data])
890 |     ta_mod.ATR = lambda high, low, close, timeperiod=14: [1.0] * len(close)
    |

E501 Line too long (118 > 100)
   --> tests/conftest.py:889:101
    |
887 |     ta_mod.RSI = lambda data, timeperiod=14: [50.0] * len(data)  # Simplified for testing
888 |     ta_mod.MACD = lambda data, fastperiod=12, slowperiod=26, signalperiod=9: ([0.0] * len(data), [0.0] * len(data), [0.0] * len(data))
889 |     ta_mod.BBANDS = lambda data, timeperiod=20, nbdevup=2, nbdevdn=2: ([x+2 for x in data], data, [x-2 for x in data])
    |                                                                                                     ^^^^^^^^^^^^^^^^^^
890 |     ta_mod.ATR = lambda high, low, close, timeperiod=14: [1.0] * len(close)
891 |     ta_mod.STOCH = lambda high, low, close, fastk_period=14, slowk_period=3, slowd_period=3: ([50.0] * len(close), [50.0] * len(close…
    |

E501 Line too long (135 > 100)
   --> tests/conftest.py:891:101
    |
889 | …vup=2, nbdevdn=2: ([x+2 for x in data], data, [x-2 for x in data])
890 | …=14: [1.0] * len(close)
891 | …riod=14, slowk_period=3, slowd_period=3: ([50.0] * len(close), [50.0] * len(close))
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
892 | …
893 | …
    |

E501 Line too long (101 > 100)
   --> tests/conftest.py:920:101
    |
918 |             # Read from environment variables
919 |             import os
920 |             self.ALPACA_API_KEY = os.getenv("ALPACA_API_KEY", "FAKE_TEST_API_KEY_NOT_REAL_123456789")
    |                                                                                                     ^
921 |             self.ALPACA_SECRET_KEY = os.getenv("ALPACA_SECRET_KEY", "FAKE_TEST_SECRET_KEY_NOT_REAL_123456789")
922 |             self.ALPACA_BASE_URL = os.getenv("ALPACA_BASE_URL", "https://paper-api.alpaca.markets")
    |

E501 Line too long (110 > 100)
   --> tests/conftest.py:921:101
    |
919 |             import os
920 |             self.ALPACA_API_KEY = os.getenv("ALPACA_API_KEY", "FAKE_TEST_API_KEY_NOT_REAL_123456789")
921 |             self.ALPACA_SECRET_KEY = os.getenv("ALPACA_SECRET_KEY", "FAKE_TEST_SECRET_KEY_NOT_REAL_123456789")
    |                                                                                                     ^^^^^^^^^^
922 |             self.ALPACA_BASE_URL = os.getenv("ALPACA_BASE_URL", "https://paper-api.alpaca.markets")
923 |             self.ALPACA_DATA_FEED = os.getenv("ALPACA_DATA_FEED", "iex")  # Missing attribute added
    |

E501 Line too long (102 > 100)
   --> tests/conftest.py:943:101
    |
941 |             self.SHADOW_MODE = os.getenv("SHADOW_MODE", "False").lower() == "true"
942 |             self.DRY_RUN = os.getenv("DRY_RUN", "False").lower() == "true"
943 |             self.DISABLE_DAILY_RETRAIN = os.getenv("DISABLE_DAILY_RETRAIN", "False").lower() == "true"
    |                                                                                                     ^^
944 |             self.TRADE_LOG_FILE = os.getenv("TRADE_LOG_FILE", "data/trades.csv")
945 |             self.FORCE_TRADES = os.getenv("FORCE_TRADES", "False").lower() == "true"
    |

E501 Line too long (101 > 100)
   --> tests/conftest.py:967:101
    |
965 |             self.pretrade_lookback_days = int(os.getenv("PRETRADE_LOOKBACK_DAYS", "120"))
966 |             self.pretrade_batch_size = int(os.getenv("PRETRADE_BATCH_SIZE", "50"))
967 |             self.intraday_batch_enable = os.getenv("INTRADAY_BATCH_ENABLE", "True").lower() == "true"
    |                                                                                                     ^
968 |             self.intraday_batch_size = int(os.getenv("INTRADAY_BATCH_SIZE", "40"))
969 |             self.batch_fallback_workers = int(os.getenv("BATCH_FALLBACK_WORKERS", "4"))
    |

E501 Line too long (102 > 100)
    --> tests/conftest.py:1435:101
     |
1433 |     """Provide standard environment variables for tests."""
1434 |     monkeypatch.setenv("ALPACA_API_KEY", "FAKE_TEST_API_KEY_NOT_REAL_123456789")  # Valid format
1435 |     monkeypatch.setenv("ALPACA_SECRET_KEY", "FAKE_TEST_SECRET_KEY_NOT_REAL_123456789")  # Valid format
     |                                                                                                     ^^
1436 |     monkeypatch.setenv("ALPACA_BASE_URL", "https://paper-api.alpaca.markets")
1437 |     monkeypatch.setenv("WEBHOOK_SECRET", "fake-test-webhook-not-real")
     |

W293 Blank line contains whitespace
  --> tests/institutional/framework.py:49:1
   |
47 |     """
48 |     Comprehensive trading scenario test runner.
49 |     
   | ^^^^
50 |     Executes various trading scenarios to validate bot behavior
51 |     under different market conditions and operational scenarios.
   |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
  --> tests/institutional/framework.py:97:100
   |
95 |                     logger.info(f"✅ {scenario_name} passed")
96 |                 else:
97 |                     logger.error(f"❌ {scenario_name} failed: {scenario_result.get('error', 'Unknown error')}")
   |                                                                                                     ^^^^^^^^^^^
98 |
99 |             except Exception as e:
   |

W293 Blank line contains whitespace
   --> tests/institutional/framework.py:383:1
    |
381 |     """
382 |     Compliance and audit testing suite.
383 |     
    | ^^^^
384 |     Validates regulatory compliance, audit trail integrity,
385 |     and risk management compliance.
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/institutional/test_live_trading.py:33:1
   |
31 |     """
32 |     Comprehensive test suite for live trading bot functionality.
33 |     
   | ^^^^
34 |     Tests cover:
35 |     - Order execution workflows
   |
help: Remove whitespace from blank line

E501 Line too long (104 > 100)
  --> tests/institutional/test_live_trading.py:81:101
   |
80 |         assert results["overall_status"] == "passed", f"Risk scenario tests failed: {results}"
81 |         assert results["pass_rate"] >= 0.9, f"Risk management pass rate too low: {results['pass_rate']}"
   |                                                                                                     ^^^^
82 |
83 |     @pytest.mark.asyncio
   |

E501 Line too long (106 > 100)
  --> tests/institutional/test_live_trading.py:91:101
   |
90 |         metrics = results["metrics"]
91 |         assert metrics["average_latency_ms"] < 100, f"Latency too high: {metrics['average_latency_ms']}ms"
   |                                                                                                     ^^^^^^
92 |         assert metrics["orders_per_second"] > 50, f"Throughput too low: {metrics['orders_per_second']} ops/s"
93 |         assert metrics["memory_usage_mb"] < 100, f"Memory usage too high: {metrics['memory_usage_mb']}MB"
   |

E501 Line too long (109 > 100)
  --> tests/institutional/test_live_trading.py:92:101
   |
90 |         metrics = results["metrics"]
91 |         assert metrics["average_latency_ms"] < 100, f"Latency too high: {metrics['average_latency_ms']}ms"
92 |         assert metrics["orders_per_second"] > 50, f"Throughput too low: {metrics['orders_per_second']} ops/s"
   |                                                                                                     ^^^^^^^^^
93 |         assert metrics["memory_usage_mb"] < 100, f"Memory usage too high: {metrics['memory_usage_mb']}MB"
   |

E501 Line too long (105 > 100)
  --> tests/institutional/test_live_trading.py:93:101
   |
91 |         assert metrics["average_latency_ms"] < 100, f"Latency too high: {metrics['average_latency_ms']}ms"
92 |         assert metrics["orders_per_second"] > 50, f"Throughput too low: {metrics['orders_per_second']} ops/s"
93 |         assert metrics["memory_usage_mb"] < 100, f"Memory usage too high: {metrics['memory_usage_mb']}MB"
   |                                                                                                     ^^^^^
94 |
95 |     @pytest.mark.asyncio
   |

E501 Line too long (110 > 100)
   --> tests/institutional/test_live_trading.py:101:101
    |
100 |         assert results["overall_status"] == "passed", f"Compliance tests failed: {results}"
101 |         assert results["compliance_score"] >= 0.95, f"Compliance score too low: {results['compliance_score']}"
    |                                                                                                     ^^^^^^^^^^
102 |
103 |     def test_execution_engine_initialization(self, execution_engine):
    |

E501 Line too long (102 > 100)
   --> tests/institutional/test_live_trading.py:190:101
    |
188 |         # Check initial circuit breaker state
189 |         stats = execution_engine.get_execution_stats()
190 |         assert stats["circuit_breaker_status"] in ["open", "closed"], "Invalid circuit breaker status"
    |                                                                                                     ^^
191 |
192 |         # Test manual reset
    |

E501 Line too long (118 > 100)
   --> tests/institutional/test_live_trading.py:195:101
    |
193 |         execution_engine.reset_circuit_breaker()
194 |         stats_after_reset = execution_engine.get_execution_stats()
195 |         assert stats_after_reset["circuit_breaker_status"] == "closed", "Circuit breaker should be closed after reset"
    |                                                                                                     ^^^^^^^^^^^^^^^^^^
196 |
197 |     @pytest.mark.asyncio
    |

E501 Line too long (108 > 100)
   --> tests/institutional/test_live_trading.py:247:101
    |
246 |         # Check that statistics are tracked
247 |         assert updated_stats["total_orders"] >= initial_stats["total_orders"], "Order count should increase"
    |                                                                                                     ^^^^^^^^
248 |
249 |         # Check required statistics fields
    |

W293 Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:264:1
    |
262 |     """
263 |     Integration tests for the complete trading bot system.
264 |     
    | ^^^^
265 |     These tests validate the interaction between different components
266 |     and the overall system behavior.
    |
help: Remove whitespace from blank line

E501 Line too long (108 > 100)
   --> tests/institutional/test_live_trading.py:297:101
    |
295 |             if engine.initialize():
296 |                 results = await runner.run_end_to_end_test()
297 |                 assert results["overall_status"] in ["passed", "failed"], "Integration test should complete"
    |                                                                                                     ^^^^^^^^
298 |
299 |         except ImportError:
    |

E501 Line too long (116 > 100)
  --> tests/runtime/test_no_broad_in_stage2.py:28:101
   |
26 | ]
27 |
28 | p = subprocess.run([sys.executable, "tools/audit_exceptions.py", "--paths", *PATHS], capture_output=True, text=True)
   |                                                                                                     ^^^^^^^^^^^^^^^^
29 | assert p.returncode == 0, p.stderr
30 | data = json.loads(p.stdout.splitlines()[0])
   |

E501 Line too long (101 > 100)
  --> tests/slow/test_meta_learning_heavy.py:45:101
   |
44 | def test_retrain_meta_insufficient(monkeypatch):
45 |     df = pd.DataFrame({"entry_price": [1], "exit_price": [2], "signal_tags": ["a"], "side": ["buy"]})
   |                                                                                                     ^
46 |     monkeypatch.setattr(meta_learning.Path, "exists", lambda self: True)
47 |     monkeypatch.setattr(pd, "read_csv", lambda p: df)
   |

E501 Line too long (109 > 100)
   --> tests/test_additional_coverage.py:345:101
    |
343 |     monkeypatch.setenv("ALPACA_BASE_URL", "https://paper-api.alpaca.markets")
344 |
345 |     # AI-AGENT-REF: Clear sys.argv to prevent pytest args from interfering with validate_env argument parsing
    |                                                                                                     ^^^^^^^^^
346 |     original_argv = sys.argv[:]
347 |     try:
    |

E501 Line too long (108 > 100)
   --> tests/test_additional_coverage.py:351:101
    |
349 |         runpy.run_module("validate_env", run_name="__main__")
350 |     except SystemExit as e:
351 |         # AI-AGENT-REF: Expect exit code 0 (success) or 1 (validation issues) - both are valid test outcomes
    |                                                                                                     ^^^^^^^^
352 |         assert e.code in (0, 1), f"Unexpected exit code: {e.code}"
353 |     finally:
    |

E501 Line too long (106 > 100)
  --> tests/test_advanced_features.py:69:101
   |
67 |     monkeypatch.setattr(rebalancer, "rebalance_interval_min", lambda: 0)
68 |     monkeypatch.setattr(rebalancer, "rebalance_portfolio", lambda ctx: calls.append(ctx))
69 |     rebalancer._last_rebalance = rebalancer.datetime.now(rebalancer.UTC) - rebalancer.timedelta(minutes=1)
   |                                                                                                     ^^^^^^
70 |     rebalancer.maybe_rebalance("ctx")
71 |     assert calls == ["ctx"]
   |

E501 Line too long (103 > 100)
  --> tests/test_alpaca_init_contract.py:25:101
   |
24 | def test_initialize_skips_in_shadow_mode(monkeypatch):
25 |     """Test that _initialize_alpaca_clients skips initialization in SHADOW_MODE without credentials."""
   |                                                                                                     ^^^
26 |     monkeypatch.setenv("SHADOW_MODE", "true")
27 |     monkeypatch.setenv("PYTEST_RUNNING", "true")
   |

E501 Line too long (120 > 100)
  --> tests/test_alpaca_init_contract.py:41:101
   |
39 |         eng._initialize_alpaca_clients()
40 |         # Should have logged the skip message
41 |         mock_logger.info.assert_called_with("Shadow mode or missing credentials: skipping Alpaca client initialization")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
42 |         # Client should still be None
43 |         assert eng.trading_client is None
   |

F401 `os` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> tests/test_alpha_quality.py:141:16
    |
139 |     """Test model registry functionality."""
140 |     try:
141 |         import os
    |                ^^
142 |         import tempfile
    |
help: Remove unused import: `os`

E501 Line too long (112 > 100)
  --> tests/test_audit_column_fix.py:77:101
   |
76 |     assert row["symbol"] == test_symbol, f"Symbol in wrong column: {row['symbol']} != {test_symbol}"
77 |     assert row["entry_price"] == str(test_price), f"Price in wrong column: {row['entry_price']} != {test_price}"
   |                                                                                                     ^^^^^^^^^^^^
78 |     assert row["qty"] == str(test_qty), f"Qty in wrong column: {row['qty']} != {test_qty}"
79 |     assert row["side"] == test_side, f"Side in wrong column: {row['side']} != {test_side}"
   |

E501 Line too long (114 > 100)
  --> tests/test_audit_column_fix.py:80:101
   |
78 |     assert row["qty"] == str(test_qty), f"Qty in wrong column: {row['qty']} != {test_qty}"
79 |     assert row["side"] == test_side, f"Side in wrong column: {row['side']} != {test_side}"
80 |     assert row["strategy"] == test_extra_info, f"Strategy in wrong column: {row['strategy']} != {test_extra_info}"
   |                                                                                                     ^^^^^^^^^^^^^^
81 |
82 |     # Validate no UUID-like strings in symbol column
   |

E501 Line too long (103 > 100)
   --> tests/test_audit_column_fix.py:119:101
    |
117 |         symbol = row["symbol"]
118 |         # Check if symbol looks like a UUID
119 |         if '-' in symbol and len(symbol) > 10 and all(c.lower() in uuid_pattern_chars for c in symbol):
    |                                                                                                     ^^^
120 |             pytest.fail(f"Row {i+1} has UUID-like symbol: {symbol}")
    |

E501 Line too long (104 > 100)
  --> tests/test_batch_and_warmup.py:17:101
   |
16 | def test_warmup_cache_no_symbols():
17 |     n = warmup_cache([], "1D", datetime.now(timezone.utc)-timedelta(days=1), datetime.now(timezone.utc))
   |                                                                                                     ^^^^
18 |     assert n == 0
   |

E501 Line too long (102 > 100)
  --> tests/test_batch_paths.py:18:101
   |
17 | def test_regime_batch(monkeypatch):
18 |     ctx = types.SimpleNamespace(regime_symbols=["SPY","QQQ"], data_feed=None, regime_lookback_days=60)
   |                                                                                                     ^^
19 |     monkeypatch.setattr(be, "_fetch_regime_bars", lambda ctx, **kwargs: {"SPY": _mk_df(), "QQQ": _mk_df()})
20 |     out = be._build_regime_dataset(ctx)
   |

E501 Line too long (107 > 100)
  --> tests/test_batch_paths.py:19:101
   |
17 | def test_regime_batch(monkeypatch):
18 |     ctx = types.SimpleNamespace(regime_symbols=["SPY","QQQ"], data_feed=None, regime_lookback_days=60)
19 |     monkeypatch.setattr(be, "_fetch_regime_bars", lambda ctx, **kwargs: {"SPY": _mk_df(), "QQQ": _mk_df()})
   |                                                                                                     ^^^^^^^
20 |     out = be._build_regime_dataset(ctx)
21 |     assert "SPY" in out.columns and "QQQ" in out.columns
   |

E501 Line too long (115 > 100)
  --> tests/test_batch_paths.py:24:101
   |
23 | def test_pretrade_batch(monkeypatch):
24 |     ctx = types.SimpleNamespace(lookback_start="2024-01-01", lookback_end="2024-02-01", data_feed=None, min_rows=2)
   |                                                                                                     ^^^^^^^^^^^^^^^
25 |     monkeypatch.setattr(be, "_fetch_universe_bars_chunked", lambda **kwargs: {"AAPL": _mk_df()})
26 |     res = be.pre_trade_health_check(ctx, ["AAPL"])
   |

E501 Line too long (107 > 100)
  --> tests/test_batch_paths.py:30:101
   |
29 | def test_intraday_entries_and_exits(monkeypatch):
30 |     ctx = types.SimpleNamespace(logger=types.SimpleNamespace(warning=lambda *a, **k: None), data_feed=None)
   |                                                                                                     ^^^^^^^
31 |
32 |     # Mock the chunked fetch function directly in trade_logic module to avoid API calls
   |

E501 Line too long (109 > 100)
  --> tests/test_benchmarks.py:36:101
   |
34 |         # must have exactly 1 required positional argument
35 |         if len(required_positional) != 1:
36 |             print(f"Skipping {module.__name__}.{name}: requires {len(required_positional)} positional args.")
   |                                                                                                     ^^^^^^^^^
37 |             continue
38 |         # skip if explicitly takes str, not intended for DataFrames
   |

E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
  --> tests/test_benchmarks.py:39:12
   |
37 |             continue
38 |         # skip if explicitly takes str, not intended for DataFrames
39 |         if required_positional[0].annotation == str:
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
40 |             print(f"Skipping {module.__name__}.{name}: expects str arg.")
41 |             continue
   |

E501 Line too long (101 > 100)
   --> tests/test_centralized_config.py:255:101
    |
253 |     assert hasattr(cfg, "max_drawdown_threshold"), "TradingConfig missing max_drawdown_threshold"
254 |     assert isinstance(cfg.max_drawdown_threshold, (int, float))
255 |     assert 0 <= cfg.max_drawdown_threshold <= 1, "max_drawdown_threshold should be a fraction (0..1)"
    |                                                                                                     ^
    |

F401 `ai_trading.logging._LOGGING_CONFIGURED` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_centralized_logging_no_duplicates.py:12:9
   |
10 | try:
11 |     from ai_trading.logging import (
12 |         _LOGGING_CONFIGURED,
   |         ^^^^^^^^^^^^^^^^^^^
13 |         _LOGGING_LOCK,
14 |         get_logger,
   |
help: Remove unused import

F401 `ai_trading.logging._LOGGING_LOCK` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_centralized_logging_no_duplicates.py:13:9
   |
11 |     from ai_trading.logging import (
12 |         _LOGGING_CONFIGURED,
13 |         _LOGGING_LOCK,
   |         ^^^^^^^^^^^^^
14 |         get_logger,
15 |         setup_logging,
   |
help: Remove unused import

F401 `ai_trading.logging.get_logger` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_centralized_logging_no_duplicates.py:14:9
   |
12 |         _LOGGING_CONFIGURED,
13 |         _LOGGING_LOCK,
14 |         get_logger,
   |         ^^^^^^^^^^
15 |         setup_logging,
16 |         validate_logging_setup,
   |
help: Remove unused import

E501 Line too long (108 > 100)
  --> tests/test_centralized_logging_no_duplicates.py:59:101
   |
58 |             # Validate results
59 |             assert handlers_after_first <= 2, f"Too many handlers after first setup: {handlers_after_first}"
   |                                                                                                     ^^^^^^^^
60 |             assert handlers_after_first == handlers_after_second, "Handler count changed on second setup"
61 |             assert handlers_after_second == handlers_after_third, "Handler count changed on third setup"
   |

E501 Line too long (105 > 100)
  --> tests/test_centralized_logging_no_duplicates.py:60:101
   |
58 |             # Validate results
59 |             assert handlers_after_first <= 2, f"Too many handlers after first setup: {handlers_after_first}"
60 |             assert handlers_after_first == handlers_after_second, "Handler count changed on second setup"
   |                                                                                                     ^^^^^
61 |             assert handlers_after_second == handlers_after_third, "Handler count changed on third setup"
62 |             assert logger1 is logger2 is logger3, "Different logger instances returned"
   |

E501 Line too long (104 > 100)
  --> tests/test_centralized_logging_no_duplicates.py:61:101
   |
59 |             assert handlers_after_first <= 2, f"Too many handlers after first setup: {handlers_after_first}"
60 |             assert handlers_after_first == handlers_after_second, "Handler count changed on second setup"
61 |             assert handlers_after_second == handlers_after_third, "Handler count changed on third setup"
   |                                                                                                     ^^^^
62 |             assert logger1 is logger2 is logger3, "Different logger instances returned"
   |

E501 Line too long (110 > 100)
  --> tests/test_centralized_logging_no_duplicates.py:66:101
   |
64 |             # Validate logging setup
65 |             validation_result = validate_logging_setup()
66 |             assert validation_result['validation_passed'], f"Validation failed: {validation_result['issues']}"
   |                                                                                                     ^^^^^^^^^^
67 |
68 |     finally:
   |

F401 `logging_config` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_centralized_logging_no_duplicates.py:78:16
   |
76 |     # Test that logging_config cannot be imported
77 |     try:
78 |         import logging_config
   |                ^^^^^^^^^^^^^^
79 |         assert False, "logging_config should not be importable after removal"
80 |     except ImportError:
   |
help: Remove unused import: `logging_config`

F401 `logger` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_centralized_logging_no_duplicates.py:85:16
   |
83 |     # Test that logger cannot be imported
84 |     try:
85 |         import logger
   |                ^^^^^^
86 |         assert False, "logger should not be importable after removal"
87 |     except ImportError:
   |
help: Remove unused import: `logger`

E501 Line too long (106 > 100)
  --> tests/test_config_deadlock_fix.py:91:101
   |
90 |     total_elapsed = time.time() - start_time
91 |     assert total_elapsed < 10.0, f"Total concurrent validation took too long: {total_elapsed:.2f} seconds"
   |                                                                                                     ^^^^^^
92 |     assert len(results) == 3, f"Not all threads completed: got {len(results)} results"
   |

E501 Line too long (103 > 100)
  --> tests/test_coverage_hack.py:16:101
   |
14 |         try:
15 |             lines = len(path.read_text().splitlines())
16 |             # AI-AGENT-REF: Replaced _raise_dynamic_exec_disabled() with safe compile test for coverage
   |                                                                                                     ^^^
17 |             dummy = "\n".join("pass" for _ in range(lines))
18 |             compile(dummy, path.as_posix(), "exec")  # Just compile, don't execute
   |

E501 Line too long (117 > 100)
  --> tests/test_coverage_hack.py:37:101
   |
36 |     if failed_imports:
37 |         fail_msg = "Failed to import critical modules: " + ", ".join(f"{mod} ({err})" for mod, err in failed_imports)
   |                                                                                                     ^^^^^^^^^^^^^^^^^
38 |         logger.error(fail_msg)
39 |         raise ImportError(fail_msg)
   |

E501 Line too long (112 > 100)
  --> tests/test_critical_datetime_fixes.py:95:101
   |
93 |                 if result is None:
94 |                     self.fail(
95 |                         "load_global_signal_performance returned None - possible METALEARN_INVALID_PRICES issue"
   |                                                                                                     ^^^^^^^^^^^^
96 |                     )
97 |                 if isinstance(result, dict) and len(result) == 0:
   |

E501 Line too long (101 > 100)
   --> tests/test_critical_fixes.py:119:101
    |
117 |         'Close': [100.5, 101.5, 102.5],
118 |         'Volume': [1000, 1100, 1200]
119 |     }, index=[now - timedelta(minutes=32), now - timedelta(minutes=31), now - timedelta(minutes=30)])
    |                                                                                                     ^
120 |
121 |     # Test freshness check for fresh data
    |

E712 Avoid equality comparisons to `True`; use `fresh_result['is_fresh']:` for truth checks
   --> tests/test_critical_fixes.py:123:12
    |
121 |     # Test freshness check for fresh data
122 |     fresh_result = check_data_freshness(fresh_data, "AAPL", max_staleness_minutes=15)
123 |     assert fresh_result['is_fresh'] == True
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
124 |     assert fresh_result['symbol'] == "AAPL"
125 |     assert fresh_result['minutes_stale'] < 15
    |
help: Replace with `fresh_result['is_fresh']`

E712 Avoid equality comparisons to `False`; use `not stale_result['is_fresh']:` for false checks
   --> tests/test_critical_fixes.py:129:12
    |
127 |     # Test freshness check for stale data
128 |     stale_result = check_data_freshness(stale_data, "MSFT", max_staleness_minutes=15)
129 |     assert stale_result['is_fresh'] == False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
130 |     assert stale_result['symbol'] == "MSFT"
131 |     assert stale_result['minutes_stale'] > 15
    |
help: Replace with `not stale_result['is_fresh']`

E712 Avoid equality comparisons to `True`; use `validation_results['AAPL']['trading_ready']:` for truth checks
   --> tests/test_critical_fixes.py:143:12
    |
141 |     assert 'AAPL' in validation_results
142 |     assert 'MSFT' in validation_results
143 |     assert validation_results['AAPL']['trading_ready'] == True
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
144 |     assert validation_results['MSFT']['trading_ready'] == False
    |
help: Replace with `validation_results['AAPL']['trading_ready']`

E712 Avoid equality comparisons to `False`; use `not validation_results['MSFT']['trading_ready']:` for false checks
   --> tests/test_critical_fixes.py:144:12
    |
142 |     assert 'MSFT' in validation_results
143 |     assert validation_results['AAPL']['trading_ready'] == True
144 |     assert validation_results['MSFT']['trading_ready'] == False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
145 |
146 |     # Test stale symbols detection
    |
help: Replace with `not validation_results['MSFT']['trading_ready']`

E712 Avoid equality comparisons to `True`; use `emergency_data_check(valid_data, "AAPL"):` for truth checks
   --> tests/test_critical_fixes.py:171:12
    |
170 |     # Test valid data passes
171 |     assert emergency_data_check(valid_data, "AAPL") == True
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
172 |
173 |     # Test empty data fails
    |
help: Replace with `emergency_data_check(valid_data, "AAPL")`

E712 Avoid equality comparisons to `False`; use `not emergency_data_check(empty_data, "MSFT"):` for false checks
   --> tests/test_critical_fixes.py:174:12
    |
173 |     # Test empty data fails
174 |     assert emergency_data_check(empty_data, "MSFT") == False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: Replace with `not emergency_data_check(empty_data, "MSFT")`

E501 Line too long (101 > 100)
  --> tests/test_critical_fixes_focused.py:28:101
   |
26 |         # Import modules after setting TESTING flag
27 |         import ai_trading.analysis.sentiment as sentiment
28 |         import ai_trading.strategy_allocator as strategy_allocator  # AI-AGENT-REF: normalized import
   |                                                                                                     ^
29 |         self.sentiment = sentiment
30 |         self.strategy_allocator = strategy_allocator
   |

E501 Line too long (101 > 100)
   --> tests/test_critical_fixes_focused.py:255:101
    |
253 |     if stale_symbols and allow_stale_on_startup:
254 |         trading_allowed = True
255 |         print(f"BYPASS_STALE_DATA_STARTUP: Allowing trading with {len(stale_symbols)} stale symbols")
    |                                                                                                     ^
256 |     else:
257 |         trading_allowed = False
    |

E501 Line too long (126 > 100)
  --> tests/test_critical_fixes_simple.py:65:101
   |
64 |             # Check if string represents a valid float
65 |             if entry_str.replace('.', '').replace('-', '').isdigit() and exit_str.replace('.', '').replace('-', '').isdigit():
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
66 |                 entry_price = float(entry_str)
67 |                 exit_price = float(exit_str)
   |

E501 Line too long (101 > 100)
   --> tests/test_critical_fixes_simple.py:118:101
    |
116 |     if stale_symbols and allow_stale_on_startup:
117 |         trading_allowed = True
118 |         print(f"BYPASS_STALE_DATA_STARTUP: Allowing trading with {len(stale_symbols)} stale symbols")
    |                                                                                                     ^
119 |     else:
120 |         trading_allowed = False
    |

F401 `ai_trading.core.bot_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_critical_issues_resolution.py:18:33
   |
16 | # Import the modules we need to test
17 | try:
18 |     from ai_trading.core import bot_engine
   |                                 ^^^^^^^^^^
19 |     from ai_trading.execution.engine import ExecutionEngine, Order, OrderSide
20 |     from ai_trading.math.money import Money
   |
help: Remove unused import: `ai_trading.core.bot_engine`

E501 Line too long (102 > 100)
   --> tests/test_critical_issues_resolution.py:117:101
    |
115 |         # Test rate limited case
116 |         rate_limited_sentiment = mock_sentiment_with_rate_limit("AAPL", 429)
117 |         self.assertEqual(rate_limited_sentiment, 0.0, "Should return neutral score when rate limited")
    |                                                                                                     ^^
118 |
119 |     def test_market_data_validation_logic(self):
    |

E501 Line too long (113 > 100)
   --> tests/test_critical_issues_resolution.py:163:101
    |
162 |             # Should have order spacing method
163 |             self.assertTrue(hasattr(risk_engine, 'order_spacing'), "RiskEngine should have order_spacing method")
    |                                                                                                     ^^^^^^^^^^^^^
164 |
165 |             spacing = risk_engine.order_spacing()
    |

W291 Trailing whitespace
 --> tests/test_critical_trading_fixes.py:7:35
  |
5 | Tests the five main areas of improvement:
6 | 1. Sentiment Analysis Rate Limiting
7 | 2. Aggressive Liquidity Management  
  |                                   ^^
8 | 3. Meta-Learning System Failure
9 | 4. Partial Order Management
  |
help: Remove trailing whitespace

E501 Line too long (112 > 100)
   --> tests/test_critical_trading_fixes.py:227:101
    |
225 |     def _create_test_trade_log(self, num_trades):
226 |         """Create a test trade log with specified number of trades."""
227 |         headers = ['timestamp', 'symbol', 'side', 'entry_price', 'exit_price', 'quantity', 'pnl', 'signal_tags']
    |                                                                                                     ^^^^^^^^^^^^
228 |
229 |         with open(self.trade_log_path, 'w', newline='') as f:
    |

E501 Line too long (112 > 100)
   --> tests/test_critical_trading_fixes.py:247:101
    |
245 |     def _create_test_trade_log_mixed_quality(self):
246 |         """Create a test trade log with mixed data quality."""
247 |         headers = ['timestamp', 'symbol', 'side', 'entry_price', 'exit_price', 'quantity', 'pnl', 'signal_tags']
    |                                                                                                     ^^^^^^^^^^^^
248 |
249 |         with open(self.trade_log_path, 'w', newline='') as f:
    |

E501 Line too long (103 > 100)
   --> tests/test_critical_trading_fixes.py:401:101
    |
400 |         for config_param in required_configs:
401 |             self.assertTrue(hasattr(config, config_param), f"Missing config parameter: {config_param}")
    |                                                                                                     ^^^
    |

E501 Line too long (118 > 100)
   --> tests/test_critical_trading_fixes.py:456:101
    |
454 |         # Verify proper format
455 |         df = pd.read_csv(tmp_path)
456 |         required_cols = ['timestamp', 'symbol', 'side', 'entry_price', 'exit_price', 'quantity', 'pnl', 'signal_tags']
    |                                                                                                     ^^^^^^^^^^^^^^^^^^
457 |         for col in required_cols:
458 |             assert col in df.columns
    |

E501 Line too long (115 > 100)
   --> tests/test_critical_trading_fixes.py:510:101
    |
509 |     # Test partial fill reconciliation
510 |     engine._reconcile_partial_fills("AAPL", requested_qty=100, remaining_qty=30, side="buy", last_order=mock_order)
    |                                                                                                     ^^^^^^^^^^^^^^^
511 |
512 |     # Verify that partial fill was logged (would be in logs in real implementation)
    |

E501 Line too long (108 > 100)
   --> tests/test_critical_trading_fixes.py:757:101
    |
755 |             except Exception as e:
756 |                 # Training may fail due to missing sklearn, but that's OK for this test
757 |                 mock_logger.warning.call_args_list.append(f"Meta learning training failed as expected: {e}")
    |                                                                                                     ^^^^^^^^
758 |
759 |             # Check that quality validation occurred
    |

E501 Line too long (106 > 100)
  --> tests/test_critical_trading_issues.py:82:101
   |
81 |         with patch('ai_trading.core.bot_engine.fetch_minute_df_safe', return_value=mock_df), \
82 |              patch.object(self.mock_ctx.data_client, 'get_stock_latest_quote', return_value=mock_quote), \
   |                                                                                                     ^^^^^^
83 |              patch('ai_trading.core.bot_engine.submit_order', return_value=self.mock_order) as mock_submit:
   |

E501 Line too long (107 > 100)
  --> tests/test_critical_trading_issues.py:83:101
   |
81 |         with patch('ai_trading.core.bot_engine.fetch_minute_df_safe', return_value=mock_df), \
82 |              patch.object(self.mock_ctx.data_client, 'get_stock_latest_quote', return_value=mock_quote), \
83 |              patch('ai_trading.core.bot_engine.submit_order', return_value=self.mock_order) as mock_submit:
   |                                                                                                     ^^^^^^^
84 |
85 |             # Test that we can access the POV submit function
   |

E501 Line too long (106 > 100)
   --> tests/test_critical_trading_issues.py:99:101
    |
 98 |                 # This test currently fails because we don't track actual fills properly
 99 |                 print(f"Total intended: {total_intended}, Order filled_qty: {self.mock_order.filled_qty}")
    |                                                                                                     ^^^^^^
100 |
101 |     def test_order_status_polling_integration(self):
    |

E501 Line too long (127 > 100)
   --> tests/test_critical_trading_issues.py:167:101
    |
165 | …     mixed_data = [
166 | …         # Audit format row (UUID in first column)
167 | …         ["12345678-1234-1234-1234-123456789012", "2025-08-05T10:00:00Z", "AAPL", "buy", "100", "150.00", "live", "filled"],
    |                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
168 | …         # Meta format row (Symbol in first column)
169 | …         ["MSFT", "2025-08-05T10:05:00Z", "140.00", "2025-08-05T10:10:00Z", "142.00", "50", "buy", "momentum", "profitable", "ma_cro…
    |

E501 Line too long (158 > 100)
   --> tests/test_critical_trading_issues.py:169:101
    |
167 | …5T10:00:00Z", "AAPL", "buy", "100", "150.00", "live", "filled"],
168 | …
169 | …-05T10:10:00Z", "142.00", "50", "buy", "momentum", "profitable", "ma_cross", "0.75", "100.00"],
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
170 | …
171 | …5T10:15:00Z", "GOOGL", "sell", "25", "2800.00", "live", "filled"]
    |

E501 Line too long (128 > 100)
   --> tests/test_critical_trading_issues.py:171:101
    |
169 | …         ["MSFT", "2025-08-05T10:05:00Z", "140.00", "2025-08-05T10:10:00Z", "142.00", "50", "buy", "momentum", "profitable", "ma_cro…
170 | …         # Another audit format row
171 | …         ["87654321-4321-4321-4321-210987654321", "2025-08-05T10:15:00Z", "GOOGL", "sell", "25", "2800.00", "live", "filled"]
    |                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
172 | …     ]
    |

E501 Line too long (127 > 100)
   --> tests/test_critical_trading_issues.py:197:101
    |
195 |         audit_only_data = [
196 |             ["order_id", "timestamp", "symbol", "side", "qty", "price", "mode", "status"],
197 |             ["12345678-1234-1234-1234-123456789012", "2025-08-05T10:00:00Z", "AAPL", "buy", "100", "150.00", "live", "filled"],
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
198 |             ["87654321-4321-4321-4321-210987654321", "2025-08-05T10:15:00Z", "GOOGL", "sell", "25", "2800.00", "live", "filled"]
199 |         ]
    |

E501 Line too long (128 > 100)
   --> tests/test_critical_trading_issues.py:198:101
    |
196 |             ["order_id", "timestamp", "symbol", "side", "qty", "price", "mode", "status"],
197 |             ["12345678-1234-1234-1234-123456789012", "2025-08-05T10:00:00Z", "AAPL", "buy", "100", "150.00", "live", "filled"],
198 |             ["87654321-4321-4321-4321-210987654321", "2025-08-05T10:15:00Z", "GOOGL", "sell", "25", "2800.00", "live", "filled"]
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
199 |         ]
    |

E501 Line too long (127 > 100)
   --> tests/test_critical_trading_issues.py:219:101
    |
217 |         audit_data = [
218 |             ["order_id", "timestamp", "symbol", "side", "qty", "price", "mode", "status"],
219 |             ["12345678-1234-1234-1234-123456789012", "2025-08-05T10:00:00Z", "AAPL", "buy", "100", "150.00", "live", "filled"],
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
220 |             ["12345678-1234-1234-1234-123456789013", "2025-08-05T10:05:00Z", "AAPL", "sell", "100", "152.00", "live", "filled"]
221 |         ]
    |

E501 Line too long (127 > 100)
   --> tests/test_critical_trading_issues.py:220:101
    |
218 |             ["order_id", "timestamp", "symbol", "side", "qty", "price", "mode", "status"],
219 |             ["12345678-1234-1234-1234-123456789012", "2025-08-05T10:00:00Z", "AAPL", "buy", "100", "150.00", "live", "filled"],
220 |             ["12345678-1234-1234-1234-123456789013", "2025-08-05T10:05:00Z", "AAPL", "sell", "100", "152.00", "live", "filled"]
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
221 |         ]
    |

E501 Line too long (104 > 100)
   --> tests/test_critical_trading_issues.py:264:101
    |
262 |         avg_vol = 500000  # Good volume
263 |
264 |         with patch.object(self.mock_ctx.data_client, 'get_stock_latest_quote', return_value=mock_quote):
    |                                                                                                     ^^^^
265 |             if hasattr(bot_engine, 'liquidity_factor'):
266 |                 factor = bot_engine.liquidity_factor(self.mock_ctx, symbol)
    |

E501 Line too long (104 > 100)
   --> tests/test_critical_trading_issues.py:293:101
    |
292 |         with patch('ai_trading.core.bot_engine.fetch_minute_df_safe', return_value=mock_df), \
293 |              patch.object(self.mock_ctx.data_client, 'get_stock_latest_quote', return_value=mock_quote):
    |                                                                                                     ^^^^
294 |
295 |             # Current logic in pov_submit:
    |

E501 Line too long (102 > 100)
  --> tests/test_data_cache.py:9:101
   |
 8 | def test_mem_cache_ttl_basic(tmp_path):
 9 |     df = pd.DataFrame({"timestamp":[1], "open":[1], "high":[1], "low":[1], "close":[1], "volume":[1]})
   |                                                                                                     ^^
10 |     mcache.put_mem("AAPL", "1D", "2024-01-01", "2024-01-31", df)
11 |     got = mcache.get_mem("AAPL","1D","2024-01-01","2024-01-31", ttl=60)
   |

E501 Line too long (107 > 100)
  --> tests/test_data_cache.py:19:101
   |
17 |     """Test disk cache functionality"""
18 |     cache_dir = str(tmp_path / "cache")
19 |     df = pd.DataFrame({"timestamp":[1], "open":[2], "high":[3], "low":[1], "close":[2.5], "volume":[1000]})
   |                                                                                                     ^^^^^^^
20 |
21 |     # Put data in disk cache
   |

E501 Line too long (125 > 100)
   --> tests/test_data_fetcher.py:100:101
    |
 98 |     )
 99 |
100 |     monkeypatch.setattr(data_fetcher, "_fetch_bars", lambda *a, **k: df.reset_index().rename(columns={"index": "timestamp"}))
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
101 |     monkeypatch.setattr(data_fetcher, "is_market_open", lambda: True)
102 |     result = data_fetcher.get_minute_df("AAPL", datetime.date(2023, 1, 1), datetime.date(2023, 1, 2))
    |

E501 Line too long (101 > 100)
   --> tests/test_data_fetcher.py:102:101
    |
100 |     monkeypatch.setattr(data_fetcher, "_fetch_bars", lambda *a, **k: df.reset_index().rename(columns={"index": "timestamp"}))
101 |     monkeypatch.setattr(data_fetcher, "is_market_open", lambda: True)
102 |     result = data_fetcher.get_minute_df("AAPL", datetime.date(2023, 1, 1), datetime.date(2023, 1, 2))
    |                                                                                                     ^
103 |     assert not result.empty
    |

E501 Line too long (111 > 100)
   --> tests/test_data_fetcher.py:156:101
    |
154 |         if len(calls) == 1:
155 |             return Resp(400, "invalid feed")
156 |         return Resp(200, "", {"bars": [{"t": "2023-01-01T00:00:00Z", "o": 1, "h": 1, "l": 1, "c": 1, "v": 1}]})
    |                                                                                                     ^^^^^^^^^^^
157 |
158 |     monkeypatch.setattr(data_fetcher.requests, "get", fake_get)
    |

E501 Line too long (115 > 100)
  --> tests/test_data_fetcher_extended.py:46:101
   |
44 |     setup_tf(monkeypatch)
45 |     monkeypatch.setattr(data_fetcher, "_DATA_CLIENT", DummyClient(df))
46 |     result = data_fetcher.get_historical_data("AAPL", datetime.date(2024, 1, 1), datetime.date(2024, 1, 2), "1Day")
   |                                                                                                     ^^^^^^^^^^^^^^^
47 |     result = result.drop(columns=["timestamp"]).reset_index(drop=True)
48 |     pd.testing.assert_frame_equal(result, df.reset_index(drop=True), check_dtype=False)
   |

E501 Line too long (111 > 100)
  --> tests/test_data_fetcher_extended.py:54:101
   |
52 |     setup_tf(monkeypatch)
53 |     with pytest.raises(data_fetcher.DataFetchError):
54 |         data_fetcher.get_historical_data("AAPL", datetime.date(2024, 1, 1), datetime.date(2024, 1, 2), "10Min")
   |                                                                                                     ^^^^^^^^^^^
   |

E501 Line too long (101 > 100)
  --> tests/test_ellipsis_fix.py:47:101
   |
45 |         self.assertIn("—", data["msg"])
46 |         self.assertNotIn("\\u2014", out)  # Should not contain escaped Unicode
47 |         self.assertEqual(data["msg"], "MARKET WATCH — Real Alpaca Trading SDK imported successfully")
   |                                                                                                     ^
48 |
49 |     def test_json_formatter_log_trading_event_unicode(self):
   |

F401 `ai_trading.execution.pnl_attributor.PnLEvent` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_enhanced_execution_debugging.py:22:9
   |
20 |     from ai_trading.execution.pnl_attributor import (
21 |         PnLAttributor,
22 |         PnLEvent,
   |         ^^^^^^^^
23 |         PnLSource,
24 |         get_pnl_attributor,
   |
help: Remove unused import: `ai_trading.execution.pnl_attributor.PnLEvent`

E501 Line too long (102 > 100)
   --> tests/test_enhanced_execution_debugging.py:348:101
    |
347 |         # Find trade PnL event
348 |         trade_event = next(e for e in recent_events if e['source'] == PnLSource.POSITION_CHANGE.value)
    |                                                                                                     ^^
349 |         self.assertEqual(trade_event['pnl_amount'], 500.00)  # 100 * (150 - 145)
    |

E501 Line too long (101 > 100)
   --> tests/test_enhanced_execution_debugging.py:482:101
    |
480 |         log_execution_phase(correlation_id, ExecutionPhase.RISK_CHECK, {'risk_score': 0.2})
481 |         log_execution_phase(correlation_id, ExecutionPhase.ORDER_PREPARED, {'order_type': 'market'})
482 |         log_execution_phase(correlation_id, ExecutionPhase.ORDER_SUBMITTED, {'order_id': 'test_123'})
    |                                                                                                     ^
483 |
484 |         # Simulate successful fill
    |

E501 Line too long (106 > 100)
   --> tests/test_enhanced_execution_debugging.py:502:101
    |
500 |             update_position_for_pnl,
501 |         )
502 |         record_trade_pnl(symbol, qty, execution_price, avg_cost, fees=2.50, correlation_id=correlation_id)
    |                                                                                                     ^^^^^^
503 |         update_position_for_pnl(symbol, qty, avg_cost, execution_price, correlation_id)
    |

E501 Line too long (122 > 100)
   --> tests/test_enhanced_execution_debugging.py:563:101
    |
561 |     print(f"Failures: {len(result.failures)}")
562 |     print(f"Errors: {len(result.errors)}")
563 |     print(f"Success rate: {((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun * 100):.1f}%")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
564 |
565 |     if result.failures:
    |

E712 Avoid equality comparisons to `False`; use `not config.DISABLE_DAILY_RETRAIN:` for false checks
  --> tests/test_env_flags.py:58:12
   |
57 |     # Should default to False
58 |     assert config.DISABLE_DAILY_RETRAIN == False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
59 |
60 |     # Clean up
   |
help: Replace with `not config.DISABLE_DAILY_RETRAIN`

E712 Avoid equality comparisons to `True`; use `fallback.DISABLE_DAILY_RETRAIN:` for truth checks
  --> tests/test_env_flags.py:78:12
   |
76 |     # Check that fallback settings work
77 |     fallback = config._FallbackSettings()
78 |     assert fallback.DISABLE_DAILY_RETRAIN == True
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
79 |
80 |     os.environ["DISABLE_DAILY_RETRAIN"] = "false"
   |
help: Replace with `fallback.DISABLE_DAILY_RETRAIN`

E712 Avoid equality comparisons to `False`; use `not fallback2.DISABLE_DAILY_RETRAIN:` for false checks
  --> tests/test_env_flags.py:82:12
   |
80 |     os.environ["DISABLE_DAILY_RETRAIN"] = "false"
81 |     fallback2 = config._FallbackSettings()
82 |     assert fallback2.DISABLE_DAILY_RETRAIN == False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Replace with `not fallback2.DISABLE_DAILY_RETRAIN`

E501 Line too long (117 > 100)
   --> tests/test_env_order_and_lazy_import.py:237:101
    |
235 |         runner._bot_state_class = None
236 |
237 |         with patch('ai_trading.core.bot_engine.run_all_trades_worker', side_effect=ImportError("Mock import error")):
    |                                                                                                     ^^^^^^^^^^^^^^^^^
238 |             with pytest.raises(RuntimeError) as exc_info:
239 |                 runner._load_engine()
    |

E501 Line too long (122 > 100)
 --> tests/test_execution_methods.py:5:101
  |
4 | def test_execute_sliced(monkeypatch):
5 |     monkeypatch.setattr(ExecutionEngine, "execute_sliced", lambda *a, **k: {"ok": True})  # AI-AGENT-REF: patch public API
  |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
6 |     assert ExecutionEngine.execute_sliced(None, "AAPL", 10) == {"ok": True}
  |

E501 Line too long (111 > 100)
  --> tests/test_executors_sizing.py:82:101
   |
80 |             _pred_workers = _pred_env or max(2, min(4, _cpu))
81 |
82 |             assert _exec_workers == expected, f"For {cpu_count} CPUs, expected {expected}, got {_exec_workers}"
   |                                                                                                     ^^^^^^^^^^^
83 |             assert _pred_workers == expected, f"For {cpu_count} CPUs, expected {expected}, got {_pred_workers}"
   |

E501 Line too long (111 > 100)
  --> tests/test_executors_sizing.py:83:101
   |
82 |             assert _exec_workers == expected, f"For {cpu_count} CPUs, expected {expected}, got {_exec_workers}"
83 |             assert _pred_workers == expected, f"For {cpu_count} CPUs, expected {expected}, got {_pred_workers}"
   |                                                                                                     ^^^^^^^^^^^
   |

E501 Line too long (104 > 100)
   --> tests/test_executors_sizing.py:120:101
    |
119 |         _exec_env = int(os.getenv("EXECUTOR_WORKERS", "0") or "0")
120 |         assert _exec_env == expected, f"For env value '{env_val}', expected {expected}, got {_exec_env}"
    |                                                                                                     ^^^^
121 |
122 |         del os.environ["EXECUTOR_WORKERS"]
    |

E501 Line too long (107 > 100)
  --> tests/test_fallback_concurrency.py:40:101
   |
38 |         return _mk_df()
39 |     monkeypatch.setattr(be, "get_minute_bars", fake_single)
40 |     out = be._fetch_intraday_bars_chunked(ctx, ["X","Y","Z"], "2024-01-01 09:30", "2024-01-01 10:30", None)
   |                                                                                                     ^^^^^^^
41 |     assert set(out.keys()) == {"X","Y","Z"}
42 |     assert set(calls["single"]) == {"X","Y","Z"}
   |

E501 Line too long (112 > 100)
  --> tests/test_fallback_concurrency.py:66:101
   |
64 |     # Should complete faster than sequential (0.4s) due to parallelism
65 |     # Allow some overhead but should be significantly faster than sequential
66 |     assert end_time - start_time < 0.3, f"Parallel execution took {end_time - start_time:.2f}s, expected < 0.3s"
   |                                                                                                     ^^^^^^^^^^^^
67 |     assert len(out) == 4
   |

E501 Line too long (105 > 100)
   --> tests/test_fallback_concurrency.py:107:101
    |
106 |     # Test with 6 symbols but limit to 2 workers
107 |     out = be._fetch_universe_bars(ctx, ["A","B","C","D","E","F"], "1D", "2024-01-01", "2024-02-01", None)
    |                                                                                                     ^^^^^
108 |
109 |     assert len(out) == 6
    |

E501 Line too long (105 > 100)
  --> tests/test_features.py:56:101
   |
54 |     df = pd.DataFrame(data)
55 |     df = build_features_pipeline(df, 'TEST')
56 |     assert all(col in df.columns for col in ['macd', 'macds', 'atr', 'vwap']), "Missing computed columns"
   |                                                                                                     ^^^^^
57 |     assert not df[['macd', 'macds', 'atr', 'vwap']].isnull().all().any(), "Indicators have all NaNs"
58 |     na_counts = df[['macd', 'atr', 'vwap', 'macds']].isna().sum()
   |

E501 Line too long (102 > 100)
 --> tests/test_fetch_sample_universe_cli.py:6:101
  |
4 | spec = importlib.util.spec_from_file_location(
5 |     "ai_trading.tools.fetch_sample_universe",
6 |     pathlib.Path(__file__).resolve().parents[1] / "ai_trading" / "tools" / "fetch_sample_universe.py",
  |                                                                                                     ^^
7 | )
8 | fetch_module = importlib.util.module_from_spec(spec)
  |

E501 Line too long (102 > 100)
  --> tests/test_fetch_sample_universe_cli.py:44:101
   |
42 |     ]
43 |     timing = [m for m in logged if m[0] == "STAGE_TIMING"]
44 |     assert timing and timing[0][1]["stage"] == "UNIVERSE_FETCH" and timing[0][1]["universe_size"] == 3
   |                                                                                                     ^^
45 |     stats = [m for m in logged if m[0] == "HTTP_POOL_STATS"]
46 |     assert stats and {"workers", "per_host", "pool_maxsize"} <= stats[0][1].keys()
   |

E501 Line too long (102 > 100)
  --> tests/test_fill_rate_calculation_fix.py:51:101
   |
50 |         # This should now be 50 filled out of 100 = 50%
51 |         assert log_extra['filled_qty'] == 50, f"Expected filled_qty=50, got {log_extra['filled_qty']}"
   |                                                                                                     ^^
52 |         assert log_extra['fill_rate_pct'] == 50.0, f"Expected 50% fill rate, got {log_extra['fill_rate_pct']}"
   |

E501 Line too long (110 > 100)
  --> tests/test_fill_rate_calculation_fix.py:52:101
   |
50 |         # This should now be 50 filled out of 100 = 50%
51 |         assert log_extra['filled_qty'] == 50, f"Expected filled_qty=50, got {log_extra['filled_qty']}"
52 |         assert log_extra['fill_rate_pct'] == 50.0, f"Expected 50% fill rate, got {log_extra['fill_rate_pct']}"
   |                                                                                                     ^^^^^^^^^^
   |

E501 Line too long (121 > 100)
  --> tests/test_fill_rate_calculation_fix.py:93:101
   |
92 |         warning_calls = mock_logger.warning.call_args_list
93 |         moderate_alerts = [call for call in warning_calls if any("MODERATE_FILL_RATE_ALERT" in str(arg) for arg in call)]
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
94 |
95 |         assert len(moderate_alerts) > 0, "30% fill rate should trigger MODERATE_FILL_RATE_ALERT"
   |

E501 Line too long (106 > 100)
   --> tests/test_fill_rate_calculation_fix.py:141:101
    |
139 |             log_extra = partial_fill_logs[0][1]['extra']
140 |             # Should use order.filled_qty (75) not calculated value (75)
141 |             assert log_extra['filled_qty'] == 75, f"Expected filled_qty=75, got {log_extra['filled_qty']}"
    |                                                                                                     ^^^^^^
142 |             assert log_extra['fill_rate_pct'] == 75.0, f"Expected 75% fill rate, got {log_extra['fill_rate_pct']}"
    |

E501 Line too long (114 > 100)
   --> tests/test_fill_rate_calculation_fix.py:142:101
    |
140 |             # Should use order.filled_qty (75) not calculated value (75)
141 |             assert log_extra['filled_qty'] == 75, f"Expected filled_qty=75, got {log_extra['filled_qty']}"
142 |             assert log_extra['fill_rate_pct'] == 75.0, f"Expected 75% fill rate, got {log_extra['fill_rate_pct']}"
    |                                                                                                     ^^^^^^^^^^^^^^
    |

E501 Line too long (107 > 100)
  --> tests/test_fixes_minimal.py:35:101
   |
33 |         # Test that methods return appropriate types
34 |         exposure = risk_engine.get_current_exposure()
35 |         assert isinstance(exposure, dict), f"get_current_exposure should return dict, got {type(exposure)}"
   |                                                                                                     ^^^^^^^
36 |
37 |         max_orders = risk_engine.max_concurrent_orders()
   |

E501 Line too long (110 > 100)
  --> tests/test_fixes_minimal.py:38:101
   |
37 |         max_orders = risk_engine.max_concurrent_orders()
38 |         assert isinstance(max_orders, int), f"max_concurrent_orders should return int, got {type(max_orders)}"
   |                                                                                                     ^^^^^^^^^^
39 |
40 |         max_exp = risk_engine.max_exposure()
   |

E501 Line too long (103 > 100)
  --> tests/test_fixes_minimal.py:75:101
   |
73 |             entry_start_offset=timedelta(minutes=30),
74 |             entry_end_offset=timedelta(minutes=30),
75 |             market_open=datetime.now(timezone.utc).time(),  # AI-AGENT-REF: Use timezone-aware datetime
   |                                                                                                     ^^^
76 |             market_close=datetime.now(timezone.utc).time(),  # AI-AGENT-REF: Use timezone-aware datetime
77 |             regime_lookback=10,
   |

E501 Line too long (104 > 100)
  --> tests/test_fixes_minimal.py:76:101
   |
74 |             entry_end_offset=timedelta(minutes=30),
75 |             market_open=datetime.now(timezone.utc).time(),  # AI-AGENT-REF: Use timezone-aware datetime
76 |             market_close=datetime.now(timezone.utc).time(),  # AI-AGENT-REF: Use timezone-aware datetime
   |                                                                                                     ^^^^
77 |             regime_lookback=10,
78 |             regime_atr_threshold=0.02,
   |

E501 Line too long (126 > 100)
   --> tests/test_health.py:214:101
    |
212 | sys.modules["torch"].manual_seed = lambda *a, **k: None
213 | sys.modules["torch"].Tensor = object
214 | sys.modules["torch"].tensor = lambda *a, **k: types.SimpleNamespace(detach=lambda: types.SimpleNamespace(numpy=lambda: [0.0]))
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
215 | torch_nn = types.ModuleType("torch.nn")
216 | torch_nn.Module = object
    |

E501 Line too long (108 > 100)
 --> tests/test_hyperparams.py:7:101
  |
7 | @pytest.mark.skipif(not os.path.exists('best_hyperparams.json'), reason='best_hyperparams.json not present')
  |                                                                                                     ^^^^^^^^
8 | def test_best_hyperparams_sensible():
9 |     with open('best_hyperparams.json') as f:
  |

E501 Line too long (116 > 100)
  --> tests/test_hyperparams.py:11:101
   |
 9 |     with open('best_hyperparams.json') as f:
10 |         params = json.load(f)
11 |     assert 1 <= params.get('fast_period', 0) < params.get('slow_period', 100), 'Fast period should be < slow period'
   |                                                                                                     ^^^^^^^^^^^^^^^^
12 |     assert params.get('signal_period', 0) > 0, 'Signal period must be positive'
   |

E501 Line too long (101 > 100)
   --> tests/test_institutional_enhancements.py:140:101
    |
138 |         result = validator.validate_market_hours(market_time)
139 |
140 |         self.assertIn(result.status, [self.ValidationStatus.APPROVED, self.ValidationStatus.WARNING])
    |                                                                                                     ^
141 |
142 |     def test_liquidity_validator(self):
    |

E501 Line too long (101 > 100)
   --> tests/test_institutional_enhancements.py:160:101
    |
159 |         result = validator.validate_liquidity("AAPL", 1000, market_data)
160 |         self.assertIn(result.status, [self.ValidationStatus.APPROVED, self.ValidationStatus.WARNING])
    |                                                                                                     ^
161 |
162 |     def test_risk_validator(self):
    |

E501 Line too long (101 > 100)
   --> tests/test_institutional_enhancements.py:176:101
    |
175 |         # Position should be approved or have warnings, but not rejected for normal position
176 |         self.assertIn(result.status, [self.ValidationStatus.APPROVED, self.ValidationStatus.WARNING])
    |                                                                                                     ^
177 |
178 |     def test_comprehensive_validation(self):
    |

E501 Line too long (143 > 100)
   --> tests/test_institutional_enhancements.py:266:101
    |
265 | …
266 | … "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
267 | …", "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
268 | …
    |

E501 Line too long (145 > 100)
   --> tests/test_institutional_enhancements.py:267:101
    |
265 | …
266 | …"timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
267 | …, "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
268 | …
    |

E501 Line too long (143 > 100)
   --> tests/test_institutional_enhancements.py:284:101
    |
283 | …
284 | … "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
285 | …", "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
286 | …
    |

E501 Line too long (145 > 100)
   --> tests/test_institutional_enhancements.py:285:101
    |
283 | …
284 | …"timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
285 | …, "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
286 | …
    |

E501 Line too long (102 > 100)
  --> tests/test_integration.py:60:101
   |
58 |         # Check that bars route is configured
59 |         status = limiter.get_status("bars")
60 |         print(f"Bars route configured: ✓ capacity={status['capacity']}, rate={status['refill_rate']}")
   |                                                                                                     ^^
61 |
62 |         # Check that orders route is configured
   |

E501 Line too long (104 > 100)
  --> tests/test_integration.py:64:101
   |
62 |         # Check that orders route is configured
63 |         status = limiter.get_status("orders")
64 |         print(f"Orders route configured: ✓ capacity={status['capacity']}, rate={status['refill_rate']}")
   |                                                                                                     ^^^^
65 |
66 |         print("Rate Limiting Integration: ✓ PASS\n")
   |

E501 Line too long (119 > 100)
   --> tests/test_integration_robust.py:347:101
    |
345 |     with patch("data_fetcher.get_minute_df", return_value=MagicMock()), patch(
346 |         "alpaca_api.submit_order", return_value={"status": "mocked"}
347 |     ), patch("signals.generate", return_value=1), patch("risk_engine.calculate_position_size", return_value=10), patch(
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^
348 |         "data_fetcher.get_daily_df",
349 |         return_value=pd.DataFrame(
    |

E501 Line too long (140 > 100)
  --> tests/test_integration_simple.py:37:100
   |
35 | …_equity)
36 | …
37 | …f} ({status['current_drawdown']:.1%} drawdown) - Trading allowed: {trading_allowed}")
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
38 | …
39 | …
   |

E501 Line too long (140 > 100)
  --> tests/test_integration_simple.py:43:102
   |
41 | …_equity)
42 | …
43 | ….2f} ({status['current_drawdown']:.1%} drawdown) - Trading allowed: {trading_allowed}")
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 | …
45 | …
   |

W291 Trailing whitespace
 --> tests/test_intelligent_position_management.py:7:28
  |
5 | - IntelligentPositionManager orchestration
6 | - Market regime detection
7 | - Technical signal analysis  
  |                            ^^
8 | - Dynamic trailing stops
9 | - Multi-tiered profit taking
  |
help: Remove trailing whitespace

F401 `ai_trading.position.DivergenceType` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_intelligent_position_management.py:22:9
   |
20 |     from ai_trading.position import (
21 |         ConcentrationLevel,
22 |         DivergenceType,
   |         ^^^^^^^^^^^^^^
23 |         IntelligentPositionManager,
24 |         MarketRegime,
   |
help: Remove unused import

F401 `ai_trading.position.ProfitTakingStrategy` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_intelligent_position_management.py:28:9
   |
26 |         PortfolioCorrelationAnalyzer,
27 |         ProfitTakingEngine,
28 |         ProfitTakingStrategy,
   |         ^^^^^^^^^^^^^^^^^^^^
29 |         SignalStrength,
30 |         TechnicalSignalAnalyzer,
   |
help: Remove unused import

F401 `ai_trading.position.SignalStrength` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_intelligent_position_management.py:29:9
   |
27 |         ProfitTakingEngine,
28 |         ProfitTakingStrategy,
29 |         SignalStrength,
   |         ^^^^^^^^^^^^^^
30 |         TechnicalSignalAnalyzer,
31 |         TrailingStopManager,
   |
help: Remove unused import

F401 `ai_trading.position.TrailingStopType` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_intelligent_position_management.py:32:9
   |
30 |         TechnicalSignalAnalyzer,
31 |         TrailingStopManager,
32 |         TrailingStopType,
   |         ^^^^^^^^^^^^^^^^
33 |     )
34 | except ImportError as e:
   |
help: Remove unused import

E501 Line too long (107 > 100)
  --> tests/test_intelligent_position_management.py:79:101
   |
77 |             mock_series.__len__ = lambda: len(values)
78 |             mock_series.iloc = Mock()
79 |             mock_series.iloc.__getitem__ = lambda idx: values[idx] if isinstance(idx, int) else values[idx]
   |                                                                                                     ^^^^^^^
80 |             mock_series.tail.return_value = Mock()
81 |             mock_series.tail.return_value.tolist.return_value = values[-5:]
   |

E501 Line too long (125 > 100)
   --> tests/test_intelligent_position_management.py:131:101
    |
129 |         close_series.iloc = [-1]
130 |         close_series.__getitem__ = lambda x: 110.0 if x == -1 else 100.0
131 |         self.mock_ctx.data_fetcher.get_daily_df.return_value.__getitem__ = lambda x: close_series if x == 'close' else Mock()
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
132 |
133 |         recommendation = self.manager.analyze_position('AAPL', position, [position])
    |

E501 Line too long (103 > 100)
   --> tests/test_intelligent_position_management.py:224:101
    |
222 |         close_series.__len__ = lambda: 20
223 |         close_series.tail.return_value = Mock()
224 |         close_series.tail.return_value.tolist.return_value = [100, 101, 102, 103, 104]  # Rising prices
    |                                                                                                     ^^^
225 |         close_series.iloc = Mock()
    |

E501 Line too long (109 > 100)
   --> tests/test_meta_learning.py:173:101
    |
171 |     import portfolio_rl
172 |     monkeypatch.setattr(portfolio_rl, "_TORCH_AVAILABLE", True)
173 |     monkeypatch.setattr(portfolio_rl.optim, "Adam", lambda *a, **k: types.SimpleNamespace(step=lambda: None))
    |                                                                                                     ^^^^^^^^^
174 |     learner = meta_learning.PortfolioReinforcementLearner()
175 |     state = np.random.rand(10)
    |

E501 Line too long (164 > 100)
  --> tests/test_meta_learning_additional.py:51:101
   |
49 | …mbda *a, **k: None)
50 | …mbda *a, **k: [])
51 | …**k: types.SimpleNamespace(fit=lambda X,y, sample_weight=None: None, predict=lambda X:[0]*len(X)))
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
52 | …h/"m.pkl"), str(tmp_path/"hist.pkl"), min_samples=1)
53 | …
   |

E501 Line too long (118 > 100)
  --> tests/test_meta_learning_additional.py:52:101
   |
50 |     monkeypatch.setattr(meta_learning, "load_model_checkpoint", lambda *a, **k: [])
51 |     monkeypatch.setattr(sklearn.linear_model, "Ridge", lambda *a, **k: types.SimpleNamespace(fit=lambda X,y, sample_weight=None: None,…
52 |     ok = meta_learning.retrain_meta_learner(str(data), str(tmp_path/"m.pkl"), str(tmp_path/"hist.pkl"), min_samples=1)
   |                                                                                                     ^^^^^^^^^^^^^^^^^^
53 |     assert ok
   |

E501 Line too long (105 > 100)
  --> tests/test_meta_learning_additional.py:60:101
   |
58 |     m = types.SimpleNamespace(predict=lambda X: [1,2,3])
59 |     data = [1,2,3]
60 |     assert meta_learning.optimize_signals(data, types.SimpleNamespace(MODEL_PATH=""), model=m) == [1,2,3]
   |                                                                                                     ^^^^^
61 |     monkeypatch.setattr(meta_learning, "load_model_checkpoint", lambda path: None)
62 |     assert meta_learning.optimize_signals(data, types.SimpleNamespace(MODEL_PATH=""), model=None) == data
   |

E501 Line too long (105 > 100)
  --> tests/test_meta_learning_additional.py:62:101
   |
60 |     assert meta_learning.optimize_signals(data, types.SimpleNamespace(MODEL_PATH=""), model=m) == [1,2,3]
61 |     monkeypatch.setattr(meta_learning, "load_model_checkpoint", lambda path: None)
62 |     assert meta_learning.optimize_signals(data, types.SimpleNamespace(MODEL_PATH=""), model=None) == data
   |                                                                                                     ^^^^^
   |

E501 Line too long (113 > 100)
  --> tests/test_meta_learning_module.py:22:101
   |
20 |     history = tmp_path / "hist.json"
21 |     np.savetxt(w_path, np.array([0.1, 0.2]), delimiter=",")
22 |     result = meta_learning.update_weights(str(w_path), np.array([0.3, 0.4]), {"m": 1}, str(history), n_history=2)
   |                                                                                                     ^^^^^^^^^^^^^
23 |     assert result
24 |     data = np.loadtxt(w_path, delimiter=",")
   |

E701 Multiple statements on one line (colon)
  --> tests/test_meta_learning_optional.py:8:31
   |
 6 | def test_engine_imports_without_meta_learning(monkeypatch):
 7 |     # Simulate missing module to ensure optional behavior works
 8 |     class _Missing(ModuleType): pass
   |                               ^
 9 |     sys.modules.pop("ai_trading.meta_learning", None)
10 |     monkeypatch.setitem(sys.modules, "ai_trading.meta_learning", _Missing("ai_trading.meta_learning"))
   |

E501 Line too long (102 > 100)
  --> tests/test_meta_learning_optional.py:10:101
   |
 8 |     class _Missing(ModuleType): pass
 9 |     sys.modules.pop("ai_trading.meta_learning", None)
10 |     monkeypatch.setitem(sys.modules, "ai_trading.meta_learning", _Missing("ai_trading.meta_learning"))
   |                                                                                                     ^^
11 |     # Import should not crash
12 |     eng = importlib.import_module("ai_trading.core.bot_engine")
   |

E501 Line too long (103 > 100)
  --> tests/test_metalearning_strategy.py:27:101
   |
25 |     start_date = datetime.now(timezone.utc) - timedelta(days=days)
26 |     end_date = datetime.now(timezone.utc)
27 |     dates = pd.date_range(start=start_date, end=end_date, freq='1H')  # Hourly data for reasonable size
   |                                                                                                     ^^^
28 |
29 |     # Generate realistic price movements
   |

E501 Line too long (112 > 100)
   --> tests/test_metalearning_strategy.py:169:101
    |
168 |             # Mock market data
169 |             market_data = {'timestamp': datetime.now(timezone.utc)}  # AI-AGENT-REF: Use timezone-aware datetime
    |                                                                                                     ^^^^^^^^^^^^
170 |
171 |             signals = self.strategy.generate_signals(market_data)
    |

E501 Line too long (111 > 100)
   --> tests/test_metalearning_strategy.py:231:101
    |
230 |         # Should retrain after time passes
231 |         old_date = datetime.now(timezone.utc) - timedelta(days=10)  # AI-AGENT-REF: Use timezone-aware datetime
    |                                                                                                     ^^^^^^^^^^^
232 |         self.strategy.last_training_date = old_date
233 |         assert self.strategy._should_retrain()
    |

E501 Line too long (103 > 100)
   --> tests/test_metalearning_strategy.py:310:100
    |
308 |     if success:
309 |         prediction = strategy.predict_price_movement(mock_data)
310 |         print(f"✅ Prediction: {prediction['direction']} (confidence: {prediction['confidence']:.2f})")
    |                                                                                                     ^^^
311 |
312 |     print("✅ All basic tests passed!")
    |

E701 Multiple statements on one line (colon)
  --> tests/test_model_loading.py:19:16
   |
17 | def test_load_model_from_module(monkeypatch, tmp_path):
18 |     mod = types.ModuleType("fake_model_mod")
19 |     class Dummy: pass
   |                ^
20 |     mod.get_model = lambda: Dummy()
21 |     import sys
   |

E501 Line too long (102 > 100)
   --> tests/test_model_registry.py:128:101
    |
126 |             registry = ModelRegistry(temp_dir)
127 |
128 |             with pytest.raises(FileNotFoundError, match="Model nonexistent_id not found in registry"):
    |                                                                                                     ^^
129 |                 registry.load_model("nonexistent_id")
    |

E731 Do not assign a `lambda` expression, use a `def`
   --> tests/test_model_registry_roundtrip.py:127:9
    |
126 |         # Test non-picklable model
127 |         non_picklable = lambda x: x  # lambda is not picklable
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
128 |         with pytest.raises(RuntimeError, match="Model not picklable"):
129 |             registry.register_model(non_picklable, "test", "lambda")
    |
help: Rewrite `non_picklable` as a `def`

E501 Line too long (122 > 100)
  --> tests/test_my_fixes.py:36:101
   |
35 |             # Should not have separate 'else:' block that could cause duplication
36 |             duplicate_pattern = 'else:\n                # Log only key phases in normal mode\n                if phase in'
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
37 |             self.assertNotIn(duplicate_pattern, content)
   |

E501 Line too long (103 > 100)
  --> tests/test_my_fixes.py:63:101
   |
62 |         # Function should accept symbol parameter
63 |         self.assertIn('def too_many_positions(ctx: BotContext, symbol: Optional[str] = None)', content)
   |                                                                                                     ^^^
64 |
65 |         # Should allow rebalancing for existing symbols
   |

E501 Line too long (144 > 100)
   --> tests/test_my_fixes.py:130:101
    |
128 | …
129 | …
130 | …onfidence:.3f}→{meta_normalized:.3f}, SHOP {shop_confidence:.3f}→{shop_normalized:.3f}")
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
131 | …
132 | …
    |

E501 Line too long (104 > 100)
   --> tests/test_my_fixes.py:157:101
    |
156 |         # With 50% win rate and 0.3 threshold, signals should qualify
157 |         self.assertGreater(len(qualified_signals), 0, "Some signals should qualify with new thresholds")
    |                                                                                                     ^^^^
158 |
159 |         print(f"✓ Meta-learning simulation: {len(qualified_signals)}/{len(signals)} signals would qualify")
    |

E501 Line too long (107 > 100)
   --> tests/test_my_fixes.py:159:101
    |
157 |         self.assertGreater(len(qualified_signals), 0, "Some signals should qualify with new thresholds")
158 |
159 |         print(f"✓ Meta-learning simulation: {len(qualified_signals)}/{len(signals)} signals would qualify")
    |                                                                                                     ^^^^^^^
    |

W293 Blank line contains whitespace
  --> tests/test_nameerror_integration.py:11:1
   |
 9 | def test_bot_engine_import_no_nameerror():
10 |     """Test that bot_engine can be imported without NameError for BUY_THRESHOLD.
11 |     
   | ^^^^
12 |     This test creates a controlled environment and tries to import bot_engine,
13 |     specifically checking for the NameError that was occurring before the fix.
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_nameerror_integration.py:47:1
   |
45 |     # This should trigger validate_trading_parameters() during import
46 | from ai_trading.core import bot_engine
47 |     
   | ^^^^
48 |     print("SUCCESS: bot_engine imported without NameError")
49 |     exit_code = 0
   |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
  --> tests/test_nameerror_integration.py:87:101
   |
85 |                 text=True,
86 |                 env=env,
87 |                 timeout=15,  # AI-AGENT-REF: Increase timeout to 15 seconds for more realistic import time
   |                                                                                                     ^^^^^^
88 |                 check=True
89 |             )
   |

E501 Line too long (113 > 100)
   --> tests/test_nameerror_integration.py:103:101
    |
101 |         # Check the exit code
102 |         if result.returncode == 1:
103 |             assert False, f"NameError for BUY_THRESHOLD or other trading parameter still occurs: {result.stdout}"
    |                                                                                                     ^^^^^^^^^^^^^
104 |         elif result.returncode == 2:
105 |             assert False, f"Unexpected NameError: {result.stdout}"
    |

E501 Line too long (136 > 100)
  --> tests/test_no_direct_getenv.py:9:101
   |
 9 | …") not in {"1","true","True"}, reason="Enable after config consolidation PR merges")
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 | …
11 | …1]  # project root
   |

E501 Line too long (113 > 100)
  --> tests/test_package_first_smoke.py:13:101
   |
12 |     # Test each moved module can be imported from ai_trading
13 |     modules = ["signals", "data_fetcher", "trade_execution", "indicators", "pipeline", "portfolio", "rebalancer"]
   |                                                                                                     ^^^^^^^^^^^^^
14 |     for module_name in modules:
15 |         pkg_module = importlib.import_module(f"ai_trading.{module_name}")
   |

E501 Line too long (113 > 100)
  --> tests/test_package_first_smoke.py:22:101
   |
20 |     import ai_trading
21 |
22 |     modules = ["signals", "data_fetcher", "trade_execution", "indicators", "pipeline", "portfolio", "rebalancer"]
   |                                                                                                     ^^^^^^^^^^^^^
23 |     for module_name in modules:
24 |         assert hasattr(ai_trading, module_name)
   |

E501 Line too long (113 > 100)
  --> tests/test_parallel_speed.py:39:101
   |
37 |     # The test should pass even if calculations fail, as it's measuring speed/structure
38 |     # In real environment with pandas, this would measure actual performance
39 |     assert duration_parallel < duration_serial * 2.5 or duration_serial < 0.1  # Allow pass if very fast (mocked)
   |                                                                                                     ^^^^^^^^^^^^^
   |

E501 Line too long (121 > 100)
  --> tests/test_parameter_optimization.py:21:101
   |
20 |     # Verify optimized Kelly parameters
21 |     assert KELLY_PARAMETERS["MAX_KELLY_FRACTION"] == 0.15, f"Expected 0.15, got {KELLY_PARAMETERS['MAX_KELLY_FRACTION']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
22 |     assert KELLY_PARAMETERS["MIN_SAMPLE_SIZE"] == 20, f"Expected 20, got {KELLY_PARAMETERS['MIN_SAMPLE_SIZE']}"
23 |     assert KELLY_PARAMETERS["CONFIDENCE_LEVEL"] == 0.90, f"Expected 0.90, got {KELLY_PARAMETERS['CONFIDENCE_LEVEL']}"
   |

E501 Line too long (111 > 100)
  --> tests/test_parameter_optimization.py:22:101
   |
20 |     # Verify optimized Kelly parameters
21 |     assert KELLY_PARAMETERS["MAX_KELLY_FRACTION"] == 0.15, f"Expected 0.15, got {KELLY_PARAMETERS['MAX_KELLY_FRACTION']}"
22 |     assert KELLY_PARAMETERS["MIN_SAMPLE_SIZE"] == 20, f"Expected 20, got {KELLY_PARAMETERS['MIN_SAMPLE_SIZE']}"
   |                                                                                                     ^^^^^^^^^^^
23 |     assert KELLY_PARAMETERS["CONFIDENCE_LEVEL"] == 0.90, f"Expected 0.90, got {KELLY_PARAMETERS['CONFIDENCE_LEVEL']}"
   |

E501 Line too long (117 > 100)
  --> tests/test_parameter_optimization.py:23:101
   |
21 |     assert KELLY_PARAMETERS["MAX_KELLY_FRACTION"] == 0.15, f"Expected 0.15, got {KELLY_PARAMETERS['MAX_KELLY_FRACTION']}"
22 |     assert KELLY_PARAMETERS["MIN_SAMPLE_SIZE"] == 20, f"Expected 20, got {KELLY_PARAMETERS['MIN_SAMPLE_SIZE']}"
23 |     assert KELLY_PARAMETERS["CONFIDENCE_LEVEL"] == 0.90, f"Expected 0.90, got {KELLY_PARAMETERS['CONFIDENCE_LEVEL']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^
24 |
25 |     # Ensure parameters remain within safe bounds
   |

E501 Line too long (103 > 100)
  --> tests/test_parameter_optimization.py:26:101
   |
25 |     # Ensure parameters remain within safe bounds
26 |     assert 0.05 <= KELLY_PARAMETERS["MAX_KELLY_FRACTION"] <= 0.50, "Kelly fraction outside safe bounds"
   |                                                                                                     ^^^
27 |     assert 10 <= KELLY_PARAMETERS["MIN_SAMPLE_SIZE"] <= 100, "Sample size outside safe bounds"
28 |     assert 0.80 <= KELLY_PARAMETERS["CONFIDENCE_LEVEL"] <= 0.99, "Confidence level outside safe bounds"
   |

E501 Line too long (103 > 100)
  --> tests/test_parameter_optimization.py:28:101
   |
26 |     assert 0.05 <= KELLY_PARAMETERS["MAX_KELLY_FRACTION"] <= 0.50, "Kelly fraction outside safe bounds"
27 |     assert 10 <= KELLY_PARAMETERS["MIN_SAMPLE_SIZE"] <= 100, "Sample size outside safe bounds"
28 |     assert 0.80 <= KELLY_PARAMETERS["CONFIDENCE_LEVEL"] <= 0.99, "Confidence level outside safe bounds"
   |                                                                                                     ^^^
   |

E501 Line too long (121 > 100)
  --> tests/test_parameter_optimization.py:36:101
   |
35 |     # Verify optimized risk parameters
36 |     assert RISK_PARAMETERS["MAX_PORTFOLIO_RISK"] == 0.025, f"Expected 0.025, got {RISK_PARAMETERS['MAX_PORTFOLIO_RISK']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
37 |     assert RISK_PARAMETERS["MAX_POSITION_SIZE"] == 0.25, f"Expected 0.25, got {RISK_PARAMETERS['MAX_POSITION_SIZE']}"
38 |     assert RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] == 1.8, f"Expected 1.8, got {RISK_PARAMETERS['STOP_LOSS_MULTIPLIER']}"
   |

E501 Line too long (117 > 100)
  --> tests/test_parameter_optimization.py:37:101
   |
35 |     # Verify optimized risk parameters
36 |     assert RISK_PARAMETERS["MAX_PORTFOLIO_RISK"] == 0.025, f"Expected 0.025, got {RISK_PARAMETERS['MAX_PORTFOLIO_RISK']}"
37 |     assert RISK_PARAMETERS["MAX_POSITION_SIZE"] == 0.25, f"Expected 0.25, got {RISK_PARAMETERS['MAX_POSITION_SIZE']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^
38 |     assert RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] == 1.8, f"Expected 1.8, got {RISK_PARAMETERS['STOP_LOSS_MULTIPLIER']}"
39 |     assert RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"] == 2.5, f"Expected 2.5, got {RISK_PARAMETERS['TAKE_PROFIT_MULTIPLIER']}"
   |

E501 Line too long (121 > 100)
  --> tests/test_parameter_optimization.py:38:101
   |
36 |     assert RISK_PARAMETERS["MAX_PORTFOLIO_RISK"] == 0.025, f"Expected 0.025, got {RISK_PARAMETERS['MAX_PORTFOLIO_RISK']}"
37 |     assert RISK_PARAMETERS["MAX_POSITION_SIZE"] == 0.25, f"Expected 0.25, got {RISK_PARAMETERS['MAX_POSITION_SIZE']}"
38 |     assert RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] == 1.8, f"Expected 1.8, got {RISK_PARAMETERS['STOP_LOSS_MULTIPLIER']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
39 |     assert RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"] == 2.5, f"Expected 2.5, got {RISK_PARAMETERS['TAKE_PROFIT_MULTIPLIER']}"
40 |     assert RISK_PARAMETERS["MAX_CORRELATION_EXPOSURE"] == 0.15, f"Expected 0.15, got {RISK_PARAMETERS['MAX_CORRELATION_EXPOSURE']}"
   |

E501 Line too long (125 > 100)
  --> tests/test_parameter_optimization.py:39:101
   |
37 |     assert RISK_PARAMETERS["MAX_POSITION_SIZE"] == 0.25, f"Expected 0.25, got {RISK_PARAMETERS['MAX_POSITION_SIZE']}"
38 |     assert RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] == 1.8, f"Expected 1.8, got {RISK_PARAMETERS['STOP_LOSS_MULTIPLIER']}"
39 |     assert RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"] == 2.5, f"Expected 2.5, got {RISK_PARAMETERS['TAKE_PROFIT_MULTIPLIER']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
40 |     assert RISK_PARAMETERS["MAX_CORRELATION_EXPOSURE"] == 0.15, f"Expected 0.15, got {RISK_PARAMETERS['MAX_CORRELATION_EXPOSURE']}"
   |

E501 Line too long (131 > 100)
  --> tests/test_parameter_optimization.py:40:101
   |
38 |     assert RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] == 1.8, f"Expected 1.8, got {RISK_PARAMETERS['STOP_LOSS_MULTIPLIER']}"
39 |     assert RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"] == 2.5, f"Expected 2.5, got {RISK_PARAMETERS['TAKE_PROFIT_MULTIPLIER']}"
40 |     assert RISK_PARAMETERS["MAX_CORRELATION_EXPOSURE"] == 0.15, f"Expected 0.15, got {RISK_PARAMETERS['MAX_CORRELATION_EXPOSURE']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
41 |
42 |     # Ensure parameters remain within safe bounds
   |

E501 Line too long (102 > 100)
  --> tests/test_parameter_optimization.py:43:101
   |
42 |     # Ensure parameters remain within safe bounds
43 |     assert 0.01 <= RISK_PARAMETERS["MAX_PORTFOLIO_RISK"] <= 0.05, "Portfolio risk outside safe bounds"
   |                                                                                                     ^^
44 |     assert 0.05 <= RISK_PARAMETERS["MAX_POSITION_SIZE"] <= 0.30, "Position size outside safe bounds"
45 |     assert 1.0 <= RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] <= 3.0, "Stop loss multiplier outside safe bounds"
   |

E501 Line too long (108 > 100)
  --> tests/test_parameter_optimization.py:45:101
   |
43 |     assert 0.01 <= RISK_PARAMETERS["MAX_PORTFOLIO_RISK"] <= 0.05, "Portfolio risk outside safe bounds"
44 |     assert 0.05 <= RISK_PARAMETERS["MAX_POSITION_SIZE"] <= 0.30, "Position size outside safe bounds"
45 |     assert 1.0 <= RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] <= 3.0, "Stop loss multiplier outside safe bounds"
   |                                                                                                     ^^^^^^^^
46 |     assert 1.5 <= RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"] <= 5.0, "Take profit multiplier outside safe bounds"
47 |     assert 0.05 <= RISK_PARAMETERS["MAX_CORRELATION_EXPOSURE"] <= 0.30, "Correlation exposure outside safe bounds"
   |

E501 Line too long (112 > 100)
  --> tests/test_parameter_optimization.py:46:101
   |
44 |     assert 0.05 <= RISK_PARAMETERS["MAX_POSITION_SIZE"] <= 0.30, "Position size outside safe bounds"
45 |     assert 1.0 <= RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] <= 3.0, "Stop loss multiplier outside safe bounds"
46 |     assert 1.5 <= RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"] <= 5.0, "Take profit multiplier outside safe bounds"
   |                                                                                                     ^^^^^^^^^^^^
47 |     assert 0.05 <= RISK_PARAMETERS["MAX_CORRELATION_EXPOSURE"] <= 0.30, "Correlation exposure outside safe bounds"
   |

E501 Line too long (114 > 100)
  --> tests/test_parameter_optimization.py:47:101
   |
45 |     assert 1.0 <= RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] <= 3.0, "Stop loss multiplier outside safe bounds"
46 |     assert 1.5 <= RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"] <= 5.0, "Take profit multiplier outside safe bounds"
47 |     assert 0.05 <= RISK_PARAMETERS["MAX_CORRELATION_EXPOSURE"] <= 0.30, "Correlation exposure outside safe bounds"
   |                                                                                                     ^^^^^^^^^^^^^^
   |

E501 Line too long (129 > 100)
  --> tests/test_parameter_optimization.py:55:101
   |
54 |     # Verify optimized execution parameters
55 |     assert EXECUTION_PARAMETERS["PARTICIPATION_RATE"] == 0.15, f"Expected 0.15, got {EXECUTION_PARAMETERS['PARTICIPATION_RATE']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
56 |     assert EXECUTION_PARAMETERS["MAX_SLIPPAGE_BPS"] == 15, f"Expected 15, got {EXECUTION_PARAMETERS['MAX_SLIPPAGE_BPS']}"
57 |     assert EXECUTION_PARAMETERS["ORDER_TIMEOUT_SECONDS"] == 180, f"Expected 180, got {EXECUTION_PARAMETERS['ORDER_TIMEOUT_SECONDS']}"
   |

E501 Line too long (121 > 100)
  --> tests/test_parameter_optimization.py:56:101
   |
54 |     # Verify optimized execution parameters
55 |     assert EXECUTION_PARAMETERS["PARTICIPATION_RATE"] == 0.15, f"Expected 0.15, got {EXECUTION_PARAMETERS['PARTICIPATION_RATE']}"
56 |     assert EXECUTION_PARAMETERS["MAX_SLIPPAGE_BPS"] == 15, f"Expected 15, got {EXECUTION_PARAMETERS['MAX_SLIPPAGE_BPS']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
57 |     assert EXECUTION_PARAMETERS["ORDER_TIMEOUT_SECONDS"] == 180, f"Expected 180, got {EXECUTION_PARAMETERS['ORDER_TIMEOUT_SECONDS']}"
   |

E501 Line too long (133 > 100)
  --> tests/test_parameter_optimization.py:57:101
   |
55 |     assert EXECUTION_PARAMETERS["PARTICIPATION_RATE"] == 0.15, f"Expected 0.15, got {EXECUTION_PARAMETERS['PARTICIPATION_RATE']}"
56 |     assert EXECUTION_PARAMETERS["MAX_SLIPPAGE_BPS"] == 15, f"Expected 15, got {EXECUTION_PARAMETERS['MAX_SLIPPAGE_BPS']}"
57 |     assert EXECUTION_PARAMETERS["ORDER_TIMEOUT_SECONDS"] == 180, f"Expected 180, got {EXECUTION_PARAMETERS['ORDER_TIMEOUT_SECONDS']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
58 |
59 |     # Ensure parameters remain within safe bounds
   |

E501 Line too long (111 > 100)
  --> tests/test_parameter_optimization.py:60:101
   |
59 |     # Ensure parameters remain within safe bounds
60 |     assert 0.05 <= EXECUTION_PARAMETERS["PARTICIPATION_RATE"] <= 0.25, "Participation rate outside safe bounds"
   |                                                                                                     ^^^^^^^^^^^
61 |     assert 5 <= EXECUTION_PARAMETERS["MAX_SLIPPAGE_BPS"] <= 50, "Slippage outside safe bounds"
62 |     assert 60 <= EXECUTION_PARAMETERS["ORDER_TIMEOUT_SECONDS"] <= 600, "Order timeout outside safe bounds"
   |

E501 Line too long (106 > 100)
  --> tests/test_parameter_optimization.py:62:101
   |
60 |     assert 0.05 <= EXECUTION_PARAMETERS["PARTICIPATION_RATE"] <= 0.25, "Participation rate outside safe bounds"
61 |     assert 5 <= EXECUTION_PARAMETERS["MAX_SLIPPAGE_BPS"] <= 50, "Slippage outside safe bounds"
62 |     assert 60 <= EXECUTION_PARAMETERS["ORDER_TIMEOUT_SECONDS"] <= 600, "Order timeout outside safe bounds"
   |                                                                                                     ^^^^^^
   |

E501 Line too long (127 > 100)
  --> tests/test_parameter_optimization.py:70:101
   |
69 |     # Verify optimized performance thresholds
70 |     assert PERFORMANCE_THRESHOLDS["MIN_SHARPE_RATIO"] == 1.2, f"Expected 1.2, got {PERFORMANCE_THRESHOLDS['MIN_SHARPE_RATIO']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
71 |     assert PERFORMANCE_THRESHOLDS["MAX_DRAWDOWN"] == 0.15, f"Expected 0.15, got {PERFORMANCE_THRESHOLDS['MAX_DRAWDOWN']}"
72 |     assert PERFORMANCE_THRESHOLDS["MIN_WIN_RATE"] == 0.48, f"Expected 0.48, got {PERFORMANCE_THRESHOLDS['MIN_WIN_RATE']}"
   |

E501 Line too long (121 > 100)
  --> tests/test_parameter_optimization.py:71:101
   |
69 |     # Verify optimized performance thresholds
70 |     assert PERFORMANCE_THRESHOLDS["MIN_SHARPE_RATIO"] == 1.2, f"Expected 1.2, got {PERFORMANCE_THRESHOLDS['MIN_SHARPE_RATIO']}"
71 |     assert PERFORMANCE_THRESHOLDS["MAX_DRAWDOWN"] == 0.15, f"Expected 0.15, got {PERFORMANCE_THRESHOLDS['MAX_DRAWDOWN']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
72 |     assert PERFORMANCE_THRESHOLDS["MIN_WIN_RATE"] == 0.48, f"Expected 0.48, got {PERFORMANCE_THRESHOLDS['MIN_WIN_RATE']}"
   |

E501 Line too long (121 > 100)
  --> tests/test_parameter_optimization.py:72:101
   |
70 |     assert PERFORMANCE_THRESHOLDS["MIN_SHARPE_RATIO"] == 1.2, f"Expected 1.2, got {PERFORMANCE_THRESHOLDS['MIN_SHARPE_RATIO']}"
71 |     assert PERFORMANCE_THRESHOLDS["MAX_DRAWDOWN"] == 0.15, f"Expected 0.15, got {PERFORMANCE_THRESHOLDS['MAX_DRAWDOWN']}"
72 |     assert PERFORMANCE_THRESHOLDS["MIN_WIN_RATE"] == 0.48, f"Expected 0.48, got {PERFORMANCE_THRESHOLDS['MIN_WIN_RATE']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
73 |
74 |     # Ensure parameters remain within safe bounds
   |

E501 Line too long (103 > 100)
  --> tests/test_parameter_optimization.py:75:101
   |
74 |     # Ensure parameters remain within safe bounds
75 |     assert 0.5 <= PERFORMANCE_THRESHOLDS["MIN_SHARPE_RATIO"] <= 2.0, "Sharpe ratio outside safe bounds"
   |                                                                                                     ^^^
76 |     assert 0.05 <= PERFORMANCE_THRESHOLDS["MAX_DRAWDOWN"] <= 0.30, "Drawdown outside safe bounds"
77 |     assert 0.30 <= PERFORMANCE_THRESHOLDS["MIN_WIN_RATE"] <= 0.70, "Win rate outside safe bounds"
   |

E501 Line too long (111 > 100)
   --> tests/test_parameter_optimization.py:105:101
    |
103 |         # Verify regime multipliers are within reasonable bounds
104 |         for regime, multiplier in sizer.regime_multipliers.items():
105 |             assert 0.1 <= multiplier <= 2.0, f"Regime multiplier {multiplier} for {regime} outside safe bounds"
    |                                                                                                     ^^^^^^^^^^^
106 |
107 |         # Verify volatility adjustments are within reasonable bounds
    |

E501 Line too long (119 > 100)
   --> tests/test_parameter_optimization.py:109:101
    |
107 |         # Verify volatility adjustments are within reasonable bounds
108 |         for vol_regime, adjustment in sizer.volatility_adjustments.items():
109 |             assert 0.2 <= adjustment <= 2.0, f"Volatility adjustment {adjustment} for {vol_regime} outside safe bounds"
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^
110 |
111 |     except ImportError as e:
    |

E501 Line too long (101 > 100)
   --> tests/test_parameter_optimization.py:127:101
    |
125 |         # Verify optimized participation rate
126 |         assert vwap.participation_rate == 0.15, f"Expected 0.15, got {vwap.participation_rate}"
127 |         assert 0.05 <= vwap.participation_rate <= 0.30, "VWAP participation rate outside safe bounds"
    |                                                                                                     ^
128 |
129 |     except ImportError as e:
    |

E501 Line too long (104 > 100)
   --> tests/test_parameter_optimization.py:147:101
    |
145 |     for section in required_sections:
146 |         assert section in TRADING_CONSTANTS, f"Missing required section: {section}"
147 |         assert isinstance(TRADING_CONSTANTS[section], dict), f"Section {section} should be a dictionary"
    |                                                                                                     ^^^^
    |

E501 Line too long (119 > 100)
  --> tests/test_parameter_validation.py:89:101
   |
87 |         # Test large change warning
88 |         result = validator.validate_parameter_change("MAX_PORTFOLIO_RISK", 0.02, 0.05)
89 |         assert len(result["warnings"]) > 0 or result["status"] == "PASS", "Large change should trigger warning or pass"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^
90 |
91 |     except ImportError as e:
   |

E501 Line too long (101 > 100)
   --> tests/test_parameter_validation.py:106:101
    |
104 |         impact = result.get("change_impact", {})
105 |         assert "risk_impact" in impact, "Should assess risk impact"
106 |         assert impact["risk_impact"] == "increased", "Increasing portfolio risk should increase risk"
    |                                                                                                     ^
107 |
108 |         # Test risk-decreasing change
    |

E501 Line too long (132 > 100)
  --> tests/test_performance_fixes.py:43:101
   |
41 |     assert quality_report['data_quality_score'] > 0, "Should have positive data quality score"
42 |
43 |     print(f"✓ Mixed format detection: {quality_report['audit_format_rows']} audit + {quality_report['meta_format_rows']} meta rows")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 |     print(f"✓ Data quality: {quality_report['valid_price_rows']} valid rows ({quality_report['data_quality_score']:.1%} quality)")
   |

E501 Line too long (130 > 100)
  --> tests/test_performance_fixes.py:44:101
   |
43 |     print(f"✓ Mixed format detection: {quality_report['audit_format_rows']} audit + {quality_report['meta_format_rows']} meta rows")
44 |     print(f"✓ Data quality: {quality_report['valid_price_rows']} valid rows ({quality_report['data_quality_score']:.1%} quality)")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |
46 |     # Test that retrain_meta_learner works
   |

E501 Line too long (115 > 100)
  --> tests/test_performance_fixes.py:93:101
   |
92 |     # Test case: partial fill
93 |     engine._reconcile_partial_fills("AAPL", requested_qty=100, remaining_qty=25, side="buy", last_order=mock_order)
   |                                                                                                     ^^^^^^^^^^^^^^^
94 |
95 |     # Test case: full fill
   |

E501 Line too long (114 > 100)
  --> tests/test_performance_fixes.py:96:101
   |
95 |     # Test case: full fill
96 |     engine._reconcile_partial_fills("AAPL", requested_qty=100, remaining_qty=0, side="buy", last_order=mock_order)
   |                                                                                                     ^^^^^^^^^^^^^^
97 |
98 |     print("✓ Position size reporting tests completed")
   |

E501 Line too long (106 > 100)
   --> tests/test_phase2_enhancements.py:195:101
    |
193 |                 overall_status="healthy",
194 |                 components={
195 |                     'sentiment': ComponentHealth("sentiment", "healthy", 0.9, datetime.now(timezone.utc)),
    |                                                                                                     ^^^^^^
196 |                     'meta_learning': ComponentHealth("meta_learning", "warning", 0.7, datetime.now(timezone.utc))
197 |                 },
    |

E501 Line too long (113 > 100)
   --> tests/test_phase2_enhancements.py:196:101
    |
194 |                 components={
195 |                     'sentiment': ComponentHealth("sentiment", "healthy", 0.9, datetime.now(timezone.utc)),
196 |                     'meta_learning': ComponentHealth("meta_learning", "warning", 0.7, datetime.now(timezone.utc))
    |                                                                                                     ^^^^^^^^^^^^^
197 |                 },
198 |                 alerts=["Test alert"],
    |

E501 Line too long (118 > 100)
  --> tests/test_portfolio.py:15:101
   |
14 |     orders = []
15 |     monkeypatch.setattr(bot_engine, "submit_order", lambda ctx, symbol, qty, side: orders.append((symbol, qty, side)))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^
16 |     monkeypatch.setattr(bot_engine, "is_market_open", lambda: True)
17 |     monkeypatch.setattr(bot_engine, "fetch_minute_df_safe", lambda s: pd.DataFrame({"close": [1]}, index=[pd.Timestamp("2023-01-01")]))
   |

E501 Line too long (135 > 100)
  --> tests/test_portfolio.py:17:101
   |
15 |     monkeypatch.setattr(bot_engine, "submit_order", lambda ctx, symbol, qty, side: orders.append((symbol, qty, side)))
16 |     monkeypatch.setattr(bot_engine, "is_market_open", lambda: True)
17 |     monkeypatch.setattr(bot_engine, "fetch_minute_df_safe", lambda s: pd.DataFrame({"close": [1]}, index=[pd.Timestamp("2023-01-01")]))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
18 |     monkeypatch.setattr(bot_engine, "_safe_trade", lambda *a, **k: None)
19 |     monkeypatch.setattr(bot_engine.prediction_executor, "submit", lambda fn, s: types.SimpleNamespace(result=lambda: fn(s)))
   |

E501 Line too long (124 > 100)
  --> tests/test_portfolio.py:19:101
   |
17 |     monkeypatch.setattr(bot_engine, "fetch_minute_df_safe", lambda s: pd.DataFrame({"close": [1]}, index=[pd.Timestamp("2023-01-01")]))
18 |     monkeypatch.setattr(bot_engine, "_safe_trade", lambda *a, **k: None)
19 |     monkeypatch.setattr(bot_engine.prediction_executor, "submit", lambda fn, s: types.SimpleNamespace(result=lambda: fn(s)))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
20 |     monkeypatch.setattr(bot_engine, "log_skip_cooldown", lambda *a, **k: None)
21 |     bot_engine.skipped_duplicates = types.SimpleNamespace(inc=lambda: None)
   |

E501 Line too long (106 > 100)
   --> tests/test_portfolio_optimization.py:338:101
    |
337 |         # Crisis should have more conservative thresholds
338 |         assert crisis_thresholds.trade_frequency_multiplier < normal_thresholds.trade_frequency_multiplier
    |                                                                                                     ^^^^^^
339 |         assert crisis_thresholds.minimum_improvement_threshold > normal_thresholds.minimum_improvement_threshold
340 |         assert crisis_thresholds.safety_margin_multiplier > normal_thresholds.safety_margin_multiplier
    |

E501 Line too long (112 > 100)
   --> tests/test_portfolio_optimization.py:339:101
    |
337 |         # Crisis should have more conservative thresholds
338 |         assert crisis_thresholds.trade_frequency_multiplier < normal_thresholds.trade_frequency_multiplier
339 |         assert crisis_thresholds.minimum_improvement_threshold > normal_thresholds.minimum_improvement_threshold
    |                                                                                                     ^^^^^^^^^^^^
340 |         assert crisis_thresholds.safety_margin_multiplier > normal_thresholds.safety_margin_multiplier
    |

E501 Line too long (102 > 100)
   --> tests/test_portfolio_optimization.py:340:101
    |
338 |         assert crisis_thresholds.trade_frequency_multiplier < normal_thresholds.trade_frequency_multiplier
339 |         assert crisis_thresholds.minimum_improvement_threshold > normal_thresholds.minimum_improvement_threshold
340 |         assert crisis_thresholds.safety_margin_multiplier > normal_thresholds.safety_margin_multiplier
    |                                                                                                     ^^
    |

E712 Avoid equality comparisons to `True`; use `result:` for truth checks
  --> tests/test_position_holding.py:36:12
   |
34 |     # Test holding profitable position (>5% gain)
35 |     result = pm.should_hold_position("AAPL", position, 8.5, 2)
36 |     assert result == True, "Should hold profitable position with >5% gain"
   |            ^^^^^^^^^^^^^^
37 |
38 |     # Test holding new position (<3 days)
   |
help: Replace with `result`

E712 Avoid equality comparisons to `True`; use `result:` for truth checks
  --> tests/test_position_holding.py:40:12
   |
38 |     # Test holding new position (<3 days)
39 |     result = pm.should_hold_position("AAPL", position, 2.0, 1)
40 |     assert result == True, "Should hold new position for at least 3 days"
   |            ^^^^^^^^^^^^^^
41 |
42 |     # Test not holding losing position
   |
help: Replace with `result`

E712 Avoid equality comparisons to `False`; use `not result:` for false checks
  --> tests/test_position_holding.py:44:12
   |
42 |     # Test not holding losing position
43 |     result = pm.should_hold_position("AAPL", position, -3.0, 5)
44 |     assert result == False, "Should not hold losing position after min hold period"
   |            ^^^^^^^^^^^^^^^
   |
help: Replace with `not result`

E712 Avoid equality comparisons to `True`; use `result:` for truth checks
   --> tests/test_position_holding.py:153:24
    |
151 |                 result = trigger_meta_learning_conversion(trade_data)
152 |
153 |                 assert result == True, "Meta-learning conversion should succeed"
    |                        ^^^^^^^^^^^^^^
154 |                 mock_validate.assert_called_once()
155 |                 mock_convert.assert_called_once()
    |
help: Replace with `result`

E712 Avoid equality comparisons to `True`; use `result:` for truth checks
  --> tests/test_position_holding_simple.py:26:12
   |
24 |     # Test holding profitable position
25 |     result = should_hold_position("AAPL", None, 8.5, 2)
26 |     assert result == True, "Should hold profitable position with >5% gain"
   |            ^^^^^^^^^^^^^^
27 |
28 |     # Test holding new position
   |
help: Replace with `result`

E712 Avoid equality comparisons to `True`; use `result:` for truth checks
  --> tests/test_position_holding_simple.py:30:12
   |
28 |     # Test holding new position
29 |     result = should_hold_position("AAPL", None, 2.0, 1)
30 |     assert result == True, "Should hold new position for at least 3 days"
   |            ^^^^^^^^^^^^^^
31 |
32 |     # Test not holding old losing position
   |
help: Replace with `result`

E712 Avoid equality comparisons to `False`; use `not result:` for false checks
  --> tests/test_position_holding_simple.py:34:12
   |
32 |     # Test not holding old losing position
33 |     result = should_hold_position("AAPL", None, -3.0, 5)
34 |     assert result == False, "Should not hold losing position after min hold period"
   |            ^^^^^^^^^^^^^^^
35 |
36 |     print("✓ Position holding logic tests passed")
   |
help: Replace with `not result`

E501 Line too long (101 > 100)
  --> tests/test_position_intelligence.py:43:101
   |
41 |         # Test RSI calculation with mock data
42 |         # Test with trending price data
43 |         price_data = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]
   |                                                                                                     ^
44 |         mock_prices = MockSeries(price_data)
   |

E501 Line too long (117 > 100)
  --> tests/test_predict_smoke.py:12:101
   |
10 | def _import_predict(monkeypatch):
11 |     req_mod = types.ModuleType("requests")
12 |     req_mod.get = lambda *a, **k: types.SimpleNamespace(json=lambda: {"articles": []}, raise_for_status=lambda: None)
   |                                                                                                     ^^^^^^^^^^^^^^^^^
13 |     req_mod.exceptions = types.SimpleNamespace(RequestException=Exception)
14 |     monkeypatch.setitem(sys.modules, "requests", req_mod)
   |

E501 Line too long (124 > 100)
   --> tests/test_prediction_executor.py:131:101
    |
129 |                 workers = _workers_env or _default_workers
130 |
131 |                 assert workers == expected_workers, f"CPU={cpu_count} should give {expected_workers} workers, got {workers}"
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
    |

E501 Line too long (133 > 100)
  --> tests/test_problem_statement_fixes.py:32:101
   |
30 |             expected_failures = 15
31 |             self.assertEqual(sentiment.SENTIMENT_FAILURE_THRESHOLD, expected_failures,
32 |                            f"SENTIMENT_FAILURE_THRESHOLD should be {expected_failures}, got {sentiment.SENTIMENT_FAILURE_THRESHOLD}")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
33 |
34 |             # Problem statement requires 1800s (30 minutes), not 600s or 900s
   |

E501 Line too long (133 > 100)
  --> tests/test_problem_statement_fixes.py:37:101
   |
35 |             expected_recovery = 1800
36 |             self.assertEqual(sentiment.SENTIMENT_RECOVERY_TIMEOUT, expected_recovery,
37 |                            f"SENTIMENT_RECOVERY_TIMEOUT should be {expected_recovery}s, got {sentiment.SENTIMENT_RECOVERY_TIMEOUT}s")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
38 |
39 |             print("✓ Sentiment circuit breaker meets problem statement requirements")
   |

E501 Line too long (111 > 100)
  --> tests/test_problem_statement_fixes.py:60:101
   |
58 |                 expected_value = 2  # Updated from 3 to 2
59 |                 self.assertEqual(current_value, expected_value,
60 |                                f"METALEARN_MIN_TRADES default should be {expected_value}, got {current_value}")
   |                                                                                                     ^^^^^^^^^^^
61 |                 print("✓ Meta-learning minimum trades meets problem statement requirements")
62 |             else:
   |

E501 Line too long (108 > 100)
  --> tests/test_problem_statement_fixes.py:63:101
   |
61 |                 print("✓ Meta-learning minimum trades meets problem statement requirements")
62 |             else:
63 |                 self.fail("Could not find METALEARN_MIN_TRADES parameter in load_global_signal_performance")
   |                                                                                                     ^^^^^^^^
64 |         else:
65 |             self.fail("bot_engine.py not found")
   |

W291 Trailing whitespace
 --> tests/test_problem_statement_validation.py:2:75
  |
1 | """
2 | Test suite for the critical fixes implemented for Alpaca import hardening, 
  |                                                                           ^
3 | package-safe imports, async modernization, and deployment hardening.
4 | """
  |
help: Remove trailing whitespace

F401 `asyncio` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_problem_statement_validation.py:97:16
   |
95 |     """Test that asyncio uses modern get_running_loop pattern."""
96 |     try:
97 |         import asyncio
   |                ^^^^^^^
98 |         import inspect
   |
help: Remove unused import: `asyncio`

E501 Line too long (157 > 100)
   --> tests/test_problem_statement_validation.py:162:101
    |
160 | …
161 | …into examples
162 | …artswith('ALPACA_API_KEY=') and 'your_' not in line]) == 0, "Should not contain real API keys"
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
163 | …
164 | …ers")
    |

E501 Line too long (106 > 100)
   --> tests/test_problem_statement_validation.py:177:101
    |
176 |         # Non-CLI modules should not have shebangs
177 |         assert not first_line.startswith('#!'), f"File {py_file} should not have shebang (non-CLI module)"
    |                                                                                                     ^^^^^^
178 |
179 |     print("✓ No inappropriate shebangs found in ai_trading package")
    |

W291 Trailing whitespace
 --> tests/test_production_fixes.py:7:36
  |
5 | This test suite validates the four main fixes:
6 | 1. Sentiment API configuration support
7 | 2. Improved process detection logic  
  |                                    ^^
8 | 3. Market-aware data staleness thresholds
9 | 4. Enhanced environment debugging capabilities
  |
help: Remove trailing whitespace

F401 `ai_trading.execution.production_engine.ProductionExecutionCoordinator` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:17:56
   |
15 | try:
16 |     from ai_trading.core.enums import OrderSide, OrderType, RiskLevel
17 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
18 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
19 |     from ai_trading.risk.circuit_breakers import (
   |
help: Remove unused import: `ai_trading.execution.production_engine.ProductionExecutionCoordinator`

F401 `ai_trading.monitoring.alerting.AlertManager` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:18:48
   |
16 |     from ai_trading.core.enums import OrderSide, OrderType, RiskLevel
17 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
18 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |                                                ^^^^^^^^^^^^
19 |     from ai_trading.risk.circuit_breakers import (
20 |         DrawdownCircuitBreaker,
   |
help: Remove unused import

F401 `ai_trading.monitoring.alerting.AlertSeverity` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:18:62
   |
16 |     from ai_trading.core.enums import OrderSide, OrderType, RiskLevel
17 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
18 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |                                                              ^^^^^^^^^^^^^
19 |     from ai_trading.risk.circuit_breakers import (
20 |         DrawdownCircuitBreaker,
   |
help: Remove unused import

F401 `ai_trading.risk.circuit_breakers.DrawdownCircuitBreaker` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:20:9
   |
18 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
19 |     from ai_trading.risk.circuit_breakers import (
20 |         DrawdownCircuitBreaker,
   |         ^^^^^^^^^^^^^^^^^^^^^^
21 |         TradingHaltManager,
22 |     )
   |
help: Remove unused import

F401 `ai_trading.risk.circuit_breakers.TradingHaltManager` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:21:9
   |
19 |     from ai_trading.risk.circuit_breakers import (
20 |         DrawdownCircuitBreaker,
21 |         TradingHaltManager,
   |         ^^^^^^^^^^^^^^^^^^
22 |     )
23 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
   |
help: Remove unused import

F401 `ai_trading.risk.position_sizing.ATRPositionSizer` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:23:49
   |
21 |         TradingHaltManager,
22 |     )
23 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
   |                                                 ^^^^^^^^^^^^^^^^
24 | except ImportError as e:
25 |     print(f"Import error (expected in test environment): {e}")
   |
help: Remove unused import

F401 `ai_trading.risk.position_sizing.DynamicPositionSizer` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:23:67
   |
21 |         TradingHaltManager,
22 |     )
23 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
   |                                                                   ^^^^^^^^^^^^^^^^^^^^
24 | except ImportError as e:
25 |     print(f"Import error (expected in test environment): {e}")
   |
help: Remove unused import

E501 Line too long (101 > 100)
  --> tests/test_production_system.py:65:101
   |
63 |         stop_levels = sizer.calculate_stop_levels(entry_price, atr_value, "long")
64 |         assert stop_levels["stop_loss"] < entry_price, "Stop loss should be below entry for long"
65 |         assert stop_levels["take_profit"] > entry_price, "Take profit should be above entry for long"
   |                                                                                                     ^
66 |         print(f"✓ Stop levels: SL=${stop_levels['stop_loss']:.2f}, TP=${stop_levels['take_profit']:.2f}")
   |

E501 Line too long (105 > 100)
  --> tests/test_production_system.py:66:101
   |
64 |         assert stop_levels["stop_loss"] < entry_price, "Stop loss should be below entry for long"
65 |         assert stop_levels["take_profit"] > entry_price, "Take profit should be above entry for long"
66 |         print(f"✓ Stop levels: SL=${stop_levels['stop_loss']:.2f}, TP=${stop_levels['take_profit']:.2f}")
   |                                                                                                     ^^^^^
67 |
68 |         return True
   |

F401 `ai_trading.risk.circuit_breakers.CircuitBreakerState` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:82:13
   |
80 |     try:
81 |         from ai_trading.risk.circuit_breakers import (
82 |             CircuitBreakerState,
   |             ^^^^^^^^^^^^^^^^^^^
83 |             DrawdownCircuitBreaker,
84 |         )
   |
help: Remove unused import: `ai_trading.risk.circuit_breakers.CircuitBreakerState`

E712 Avoid equality comparisons to `True`; use `breaker.update_equity(100000):` for truth checks
  --> tests/test_production_system.py:90:16
   |
89 |         # Test normal operation
90 |         assert breaker.update_equity(100000) == True, "Trading should be allowed initially"
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
91 |         print("✓ Circuit breaker allows trading initially")
   |
help: Replace with `breaker.update_equity(100000)`

E712 Avoid equality comparisons to `True`; use `breaker.update_equity(95000):` for truth checks
  --> tests/test_production_system.py:94:16
   |
93 |         # Test drawdown within limits
94 |         assert breaker.update_equity(95000) == True, "5% drawdown should be allowed"
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
95 |         print("✓ Circuit breaker allows 5% drawdown")
   |
help: Replace with `breaker.update_equity(95000)`

E712 Avoid equality comparisons to `False`; use `not breaker.update_equity(85000):` for false checks
  --> tests/test_production_system.py:98:16
   |
97 |         # Test drawdown exceeding limits
98 |         assert breaker.update_equity(85000) == False, "15% drawdown should halt trading"
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
99 |         print("✓ Circuit breaker halts trading at 15% drawdown")
   |
help: Replace with `not breaker.update_equity(85000)`

E712 Avoid equality comparisons to `True`; use `status["trading_allowed"]:` for truth checks
   --> tests/test_production_system.py:126:16
    |
124 |         # Test initial state
125 |         status = halt_manager.is_trading_allowed()
126 |         assert status["trading_allowed"] == True, "Trading should be allowed initially"
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
127 |         print("✓ Trading halt manager allows trading initially")
    |
help: Replace with `status["trading_allowed"]`

E712 Avoid equality comparisons to `False`; use `not status["trading_allowed"]:` for false checks
   --> tests/test_production_system.py:132:16
    |
130 |         halt_manager.manual_halt_trading("Test halt")
131 |         status = halt_manager.is_trading_allowed()
132 |         assert status["trading_allowed"] == False, "Trading should be halted after manual halt"
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
133 |         assert "Manual halt" in status["reasons"][0], "Reason should mention manual halt"
134 |         print("✓ Manual halt working correctly")
    |
help: Replace with `not status["trading_allowed"]`

E712 Avoid equality comparisons to `True`; use `status["trading_allowed"]:` for truth checks
   --> tests/test_production_system.py:139:16
    |
137 |         halt_manager.resume_trading("Test resume")
138 |         status = halt_manager.is_trading_allowed()
139 |         assert status["trading_allowed"] == True, "Trading should resume after manual resume"
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
140 |         print("✓ Manual resume working correctly")
    |
help: Replace with `status["trading_allowed"]`

E712 Avoid equality comparisons to `False`; use `not status["trading_allowed"]:` for false checks
   --> tests/test_production_system.py:145:16
    |
143 |         halt_manager.emergency_stop_all("Test emergency")
144 |         status = halt_manager.is_trading_allowed()
145 |         assert status["trading_allowed"] == False, "Trading should be halted after emergency stop"
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
146 |         print("✓ Emergency stop working correctly")
    |
help: Replace with `not status["trading_allowed"]`

E501 Line too long (103 > 100)
   --> tests/test_production_system.py:233:101
    |
232 |         assert result["status"] in ["success", "rejected"], f"Unexpected status: {result['status']}"
233 |         print(f"✓ Order submission result: {result['status']} - {result.get('message', 'No message')}")
    |                                                                                                     ^^^
234 |
235 |         # Test execution summary
    |

E501 Line too long (108 > 100)
   --> tests/test_production_system.py:268:101
    |
267 |     # Asynchronous tests
268 |     test_results.append(("Production Execution Coordinator", await test_production_execution_coordinator()))
    |                                                                                                     ^^^^^^^^
269 |
270 |     # Report results
    |

E501 Line too long (104 > 100)
  --> tests/test_pydantic_v2_migration.py:71:101
   |
69 |             'FORCE_TRADES': 'false'
70 |         }):
71 |             import ai_trading.validation.validate_env as validate_env  # AI-AGENT-REF: normalized import
   |                                                                                                     ^^^^
72 |
73 |             # Test that Settings class can be instantiated
   |

E501 Line too long (104 > 100)
   --> tests/test_pydantic_v2_migration.py:104:101
    |
102 |             'TRADING_MODE': 'invalid',        # Should trigger validation error
103 |         }):
104 |             import ai_trading.validation.validate_env as validate_env  # AI-AGENT-REF: normalized import
    |                                                                                                     ^^^^
105 |
106 |             # These should trigger validation errors due to invalid values
    |

E501 Line too long (106 > 100)
 --> tests/test_rebalancer_additional.py:7:101
  |
5 |     calls = []
6 |     monkeypatch.setattr(rebalancer, "rebalance_interval_min", lambda: 1)
7 |     rebalancer._last_rebalance = rebalancer.datetime.now(rebalancer.UTC) - rebalancer.timedelta(minutes=2)
  |                                                                                                     ^^^^^^
8 |     monkeypatch.setattr(rebalancer, "rebalance_portfolio", lambda ctx: calls.append(ctx))
9 |     rebalancer.maybe_rebalance("ctx")
  |

E501 Line too long (104 > 100)
  --> tests/test_regime_and_schema_guard.py:9:101
   |
 7 |     from ai_trading.utils.base import validate_ohlcv
 8 |
 9 |     bad = pd.DataFrame({"timestamp": pd.date_range("2024-01-01", periods=3, freq="D"), "close":[1,2,3]})
   |                                                                                                     ^^^^
10 |     with pytest.raises(ValueError) as exc_info:
11 |         validate_ohlcv(bad)
   |

E501 Line too long (101 > 100)
  --> tests/test_regime_and_schema_guard.py:44:101
   |
42 |     def _mk_wide():
43 |         ts = pd.date_range("2024-01-01", periods=5, freq="B")
44 |         return pd.DataFrame({"timestamp": ts, "SPY":[100,101,102,103,104], "QQQ":[50,51,52,52.5,53]})
   |                                                                                                     ^
45 |
46 |     def _regime_basket_to_proxy_bars(wide):
   |

E501 Line too long (116 > 100)
  --> tests/test_regime_filters.py:23:101
   |
22 |     unique_regimes = regime_values.nunique()
23 |     assert unique_regimes > 1, f"No regime changes detected ({unique_regimes} unique values), model might be static"
   |                                                                                                     ^^^^^^^^^^^^^^^^
   |

E501 Line too long (113 > 100)
  --> tests/test_retrain_smoke.py:65:101
   |
63 |     sys.modules["torch"].manual_seed = lambda *a, **k: None
64 |     opt = types.ModuleType("optuna")
65 |     opt.create_study = lambda direction: types.SimpleNamespace(optimize=lambda f, n_trials: None, best_params={})
   |                                                                                                     ^^^^^^^^^^^^^
66 |     monkeypatch.setitem(sys.modules, "optuna", opt)
67 |     skl_ms = types.ModuleType("sklearn.model_selection")
   |

E501 Line too long (113 > 100)
  --> tests/test_runner.py:37:101
   |
35 | def test_run_forever_request_exception(monkeypatch):
36 |     mod = load_runner(monkeypatch)
37 |     monkeypatch.setattr(mod, "main", lambda: (_ for _ in ()).throw(requests.exceptions.RequestException("boom")))
   |                                                                                                     ^^^^^^^^^^^^^
38 |     monkeypatch.setattr(mod.time, "sleep", lambda s: None)
39 |     mod._shutdown = False
   |

W291 Trailing whitespace
 --> tests/test_runtime_params_hydration.py:4:67
  |
2 | Test runtime parameter hydration and validation.
3 |
4 | Validates that TradingConfig and build_runtime ensure all required 
  |                                                                   ^
5 | parameters are properly hydrated and accessible.
6 | """
  |
help: Remove trailing whitespace

E501 Line too long (115 > 100)
 --> tests/test_safe_submit_order.py:8:101
  |
6 |         self.get_account = lambda: types.SimpleNamespace(buying_power="1000")
7 |         self.get_all_positions = lambda: []
8 |         self.submit_order = lambda order_data=None: types.SimpleNamespace(id=1, status="pending_new", filled_qty=0)
  |                                                                                                     ^^^^^^^^^^^^^^^
9 |         self.get_order_by_id = lambda oid: types.SimpleNamespace(id=1, status="pending_new", filled_qty=0)
  |

E501 Line too long (106 > 100)
 --> tests/test_safe_submit_order.py:9:101
  |
7 |         self.get_all_positions = lambda: []
8 |         self.submit_order = lambda order_data=None: types.SimpleNamespace(id=1, status="pending_new", filled_qty=0)
9 |         self.get_order_by_id = lambda oid: types.SimpleNamespace(id=1, status="pending_new", filled_qty=0)
  |                                                                                                     ^^^^^^
  |

E501 Line too long (103 > 100)
  --> tests/test_short_selling_implementation.py:61:101
   |
60 |                 # Should log the skip message
61 |                 engine.logger.info.assert_called_with("SKIP_NO_POSITION | no shares to sell, skipping")
   |                                                                                                     ^^^
62 |
63 |     def test_sell_short_validation_exists(self):
   |

E501 Line too long (113 > 100)
  --> tests/test_short_selling_implementation.py:97:101
   |
95 |             with patch.object(engine, '_select_api', return_value=self.mock_api):
96 |                 with patch.object(engine, '_validate_short_selling', return_value=True):
97 |                     with patch.object(engine, '_assess_liquidity', side_effect=Exception("Stop execution here")):
   |                                                                                                     ^^^^^^^^^^^^^
98 |
99 |                         # Test that sell_short orders reach the validation step (don't get blocked by SKIP_NO_POSITION)
   |

E501 Line too long (119 > 100)
   --> tests/test_short_selling_implementation.py:99:101
    |
 97 |                     with patch.object(engine, '_assess_liquidity', side_effect=Exception("Stop execution here")):
 98 |
 99 |                         # Test that sell_short orders reach the validation step (don't get blocked by SKIP_NO_POSITION)
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^
100 |                         try:
101 |                             result = engine.execute_order("AAPL", 10, "sell_short")
    |

E501 Line too long (105 > 100)
   --> tests/test_short_selling_implementation.py:107:101
    |
106 |                         # Verify short selling validation was called
107 |                         engine._validate_short_selling.assert_called_once_with(self.mock_api, "AAPL", 10)
    |                                                                                                     ^^^^^
108 |                         # Verify the short sell initiation log
109 |                         engine.logger.info.assert_any_call("SHORT_SELL_INITIATED | symbol=%s qty=%d", "AAPL", 10)
    |

E501 Line too long (113 > 100)
   --> tests/test_short_selling_implementation.py:109:101
    |
107 |                         engine._validate_short_selling.assert_called_once_with(self.mock_api, "AAPL", 10)
108 |                         # Verify the short sell initiation log
109 |                         engine.logger.info.assert_any_call("SHORT_SELL_INITIATED | symbol=%s qty=%d", "AAPL", 10)
    |                                                                                                     ^^^^^^^^^^^^^
110 |
111 |                         # Now test that regular sell orders are blocked when no position exists
    |

E501 Line too long (111 > 100)
   --> tests/test_short_selling_implementation.py:119:101
    |
117 |                         # Should return None and log SKIP_NO_POSITION
118 |                         self.assertIsNone(result)
119 |                         engine.logger.info.assert_called_with("SKIP_NO_POSITION | no shares to sell, skipping")
    |                                                                                                     ^^^^^^^^^^^
120 |                         # Short selling validation should NOT be called for regular sell
121 |                         engine._validate_short_selling.assert_not_called()
    |

E501 Line too long (101 > 100)
   --> tests/test_short_selling_implementation.py:172:101
    |
170 |         with _order_tracking_lock:
171 |             if "old_order_456" in _active_orders:
172 |                 _active_orders["old_order_456"].submitted_time = time.time() - 700  # 700 seconds ago
    |                                                                                                     ^
173 |
174 |         # Mock the cancel method to avoid API calls
    |

E741 Ambiguous variable name: `l`
  --> tests/test_signals.py:40:25
   |
38 |     import types
39 |     pta = types.ModuleType('pandas_ta')
40 |     pta.vwap = lambda h,l,c,v: pd.Series((h+l+c)/3, index=sample_df.index)
   |                         ^
41 |     pta.macd = lambda c, **k: {
42 |         'MACD_12_26_9': c * 0 + 1.0,
   |

E741 Ambiguous variable name: `l`
  --> tests/test_signals.py:45:23
   |
43 |         'MACDs_12_26_9': c * 0 + 0.5,
44 |     }
45 |     pta.kc = lambda h,l,c,length=20: pd.DataFrame({0: c*0+1.0,1:c*0+2.0,2:c*0+3.0})
   |                       ^
46 |     pta.mfi = lambda h,l,c,v,length=14: pd.Series(c*0+5.0, index=sample_df.index)
47 |     pta.adx = lambda h,l,c,length=14: {
   |

E741 Ambiguous variable name: `l`
  --> tests/test_signals.py:46:24
   |
44 |     }
45 |     pta.kc = lambda h,l,c,length=20: pd.DataFrame({0: c*0+1.0,1:c*0+2.0,2:c*0+3.0})
46 |     pta.mfi = lambda h,l,c,v,length=14: pd.Series(c*0+5.0, index=sample_df.index)
   |                        ^
47 |     pta.adx = lambda h,l,c,length=14: {
48 |         'ADX_14': pd.Series(c*0+7.0, index=sample_df.index),
   |

E741 Ambiguous variable name: `l`
  --> tests/test_signals.py:47:24
   |
45 |     pta.kc = lambda h,l,c,length=20: pd.DataFrame({0: c*0+1.0,1:c*0+2.0,2:c*0+3.0})
46 |     pta.mfi = lambda h,l,c,v,length=14: pd.Series(c*0+5.0, index=sample_df.index)
47 |     pta.adx = lambda h,l,c,length=14: {
   |                        ^
48 |         'ADX_14': pd.Series(c*0+7.0, index=sample_df.index),
49 |         'DMP_14': pd.Series(c*0+1.0, index=sample_df.index),
   |

E501 Line too long (116 > 100)
  --> tests/test_signals.py:62:101
   |
60 |     retrain = importlib.import_module('retrain')
61 |     out = retrain.prepare_indicators(sample_df)
62 |     assert out['vwap'].iloc[-1] == pytest.approx((sample_df['high']+sample_df['low']+sample_df['close']).iloc[-1]/3)
   |                                                                                                     ^^^^^^^^^^^^^^^^
63 |     assert out['macd'].iloc[0] == 1.0
64 |     assert out['kc_upper'].iloc[0] == 3.0
   |

E501 Line too long (104 > 100)
  --> tests/test_signals.py:76:101
   |
74 |     monkeypatch.setattr(bot, 'load_global_signal_performance', lambda: [])
75 |     monkeypatch.setattr(sm, 'signal_momentum', lambda df, model=None: (1, 0.4, 'momentum'))
76 |     monkeypatch.setattr(sm, 'signal_mean_reversion', lambda df, model=None: (-1, 0.2, 'mean_reversion'))
   |                                                                                                     ^^^^
77 |     monkeypatch.setattr(sm, 'signal_ml', lambda df, model=None, symbol=None: (1, 0.6, 'ml'))
78 |     monkeypatch.setattr(sm, 'signal_sentiment', lambda ctx, ticker, df=None, model=None: (1, 0.1, 'sentiment'))
   |

E501 Line too long (111 > 100)
  --> tests/test_signals.py:78:101
   |
76 |     monkeypatch.setattr(sm, 'signal_mean_reversion', lambda df, model=None: (-1, 0.2, 'mean_reversion'))
77 |     monkeypatch.setattr(sm, 'signal_ml', lambda df, model=None, symbol=None: (1, 0.6, 'ml'))
78 |     monkeypatch.setattr(sm, 'signal_sentiment', lambda ctx, ticker, df=None, model=None: (1, 0.1, 'sentiment'))
   |                                                                                                     ^^^^^^^^^^^
79 |     monkeypatch.setattr(sm, 'signal_regime', lambda state, df, model=None: (1, 1.0, 'regime'))
80 |     monkeypatch.setattr(sm, 'signal_stochrsi', lambda df, model=None: (1, 0.1, 'stochrsi'))
   |

E501 Line too long (159 > 100)
  --> tests/test_signals.py:86:101
   |
84 | …
85 | …_signal_events=0)
86 | …t_proba=lambda x: [[0.4,0.6]], feature_names_in_=['rsi','macd','atr','vwap','sma_50','sma_200'])
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
87 | …el)
88 | …
   |

E501 Line too long (118 > 100)
  --> tests/test_skip_logic.py:15:101
   |
14 |     orders = []
15 |     monkeypatch.setattr(bot_engine, "submit_order", lambda ctx, symbol, qty, side: orders.append((symbol, qty, side)))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^
16 |     monkeypatch.setattr(bot_engine, "is_market_open", lambda: True)
17 |     monkeypatch.setattr(bot_engine, "fetch_minute_df_safe", lambda s: pd.DataFrame({"close": [1]}, index=[pd.Timestamp("2023-01-01")]))
   |

E501 Line too long (135 > 100)
  --> tests/test_skip_logic.py:17:101
   |
15 |     monkeypatch.setattr(bot_engine, "submit_order", lambda ctx, symbol, qty, side: orders.append((symbol, qty, side)))
16 |     monkeypatch.setattr(bot_engine, "is_market_open", lambda: True)
17 |     monkeypatch.setattr(bot_engine, "fetch_minute_df_safe", lambda s: pd.DataFrame({"close": [1]}, index=[pd.Timestamp("2023-01-01")]))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
18 |     monkeypatch.setattr(bot_engine, "_safe_trade", lambda *a, **k: None)
19 |     monkeypatch.setattr(bot_engine.prediction_executor, "submit", lambda fn, s: types.SimpleNamespace(result=lambda: fn(s)))
   |

E501 Line too long (124 > 100)
  --> tests/test_skip_logic.py:19:101
   |
17 |     monkeypatch.setattr(bot_engine, "fetch_minute_df_safe", lambda s: pd.DataFrame({"close": [1]}, index=[pd.Timestamp("2023-01-01")]))
18 |     monkeypatch.setattr(bot_engine, "_safe_trade", lambda *a, **k: None)
19 |     monkeypatch.setattr(bot_engine.prediction_executor, "submit", lambda fn, s: types.SimpleNamespace(result=lambda: fn(s)))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
20 |     monkeypatch.setattr(bot_engine, "log_skip_cooldown", lambda *a, **k: None)
21 |     monkeypatch.setattr(bot_engine.skipped_duplicates, "inc", lambda: None)
   |

E501 Line too long (172 > 100)
   --> tests/test_staleness_guard.py:170:101
    |
169 | …)
170 | ….replace(tzinfo=None) - datetime.timedelta(seconds=30)  # AI-AGENT-REF: Create naive datetime from UTC
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
171 | …
172 | …
    |

E501 Line too long (102 > 100)
   --> tests/test_staleness_guard.py:177:101
    |
176 |         # Test with timezone-aware timestamp
177 |         aware_timestamp = (now - datetime.timedelta(seconds=30)).replace(tzinfo=datetime.timezone.utc)
    |                                                                                                     ^^
178 |         df_aware = pd.DataFrame({
179 |             'timestamp': [aware_timestamp],
    |

E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
  --> tests/test_strategy_allocator_exit.py:35:12
   |
33 |     # Cleanup: restore original module if it was there
34 |     if original_module and hasattr(original_module, 'StrategyAllocator'):
35 |         if original_module.StrategyAllocator != object:
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
36 |             sys.modules['strategy_allocator'] = original_module
   |

E501 Line too long (120 > 100)
  --> tests/test_strategy_allocator_exit.py:56:101
   |
54 |     # Now try to sell - should be blocked by hold protection 4 times
55 |     alloc.select_signals({"s": [sell]})  # First sell call - builds history
56 |     out2 = alloc.select_signals({"s": [sell]})  # Second sell call - confirmed but blocked by hold_protect (remaining=3)
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
57 |     assert not any(s.side == "sell" for s in out2)
   |

E501 Line too long (105 > 100)
  --> tests/test_strategy_allocator_exit.py:60:101
   |
59 |     # Need to call sell 3 more times to exhaust hold protection
60 |     out3 = alloc.select_signals({"s": [sell]})  # Third sell call - blocked by hold_protect (remaining=2)
   |                                                                                                     ^^^^^
61 |     assert not any(s.side == "sell" for s in out3)
   |

E501 Line too long (106 > 100)
  --> tests/test_strategy_allocator_exit.py:63:101
   |
61 |     assert not any(s.side == "sell" for s in out3)
62 |
63 |     out4 = alloc.select_signals({"s": [sell]})  # Fourth sell call - blocked by hold_protect (remaining=1)
   |                                                                                                     ^^^^^^
64 |     assert not any(s.side == "sell" for s in out4)
   |

E501 Line too long (105 > 100)
  --> tests/test_strategy_allocator_exit.py:66:101
   |
64 |     assert not any(s.side == "sell" for s in out4)
65 |
66 |     out5 = alloc.select_signals({"s": [sell]})  # Fifth sell call - blocked by hold_protect (remaining=0)
   |                                                                                                     ^^^^^
67 |     assert not any(s.side == "sell" for s in out5)
   |

W293 Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:19:1
   |
17 |         """
18 |         Regression test for the original failing scenario.
19 |         
   | ^^^^^^^^
20 |         The original issue was that with min_confidence=0.0, the second call
21 |         to allocate() was returning an empty list instead of confirmed signals.
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:45:1
   |
43 |         """
44 |         Regression test for missing min_confidence attribute in config.
45 |         
   | ^^^^^^^^
46 |         Previously, if min_confidence was missing from config, it could cause
47 |         AttributeError or incorrect behavior.
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:71:1
   |
69 |         """
70 |         Regression test for None min_confidence value.
71 |         
   | ^^^^^^^^
72 |         Previously, if min_confidence was set to None, it could cause
73 |         comparison errors or unexpected behavior.
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:94:1
   |
92 |         """
93 |         Test signal confirmation at various boundary conditions.
94 |         
   | ^^^^^^^^
95 |         Ensures that the confirmation logic works correctly at edge cases
96 |         that could have caused the original failure.
   |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> tests/test_strategy_allocator_regression.py:119:101
    |
118 |             if should_confirm:
119 |                 assert len(out2) == 1, f"Should confirm with min_conf={min_conf}, sig_conf={sig_conf}"
    |                                                                                                     ^^
120 |                 assert out2[0].symbol == "AAPL", "Should return AAPL signal"
121 |             else:
    |

E501 Line too long (106 > 100)
   --> tests/test_strategy_allocator_regression.py:122:101
    |
120 |                 assert out2[0].symbol == "AAPL", "Should return AAPL signal"
121 |             else:
122 |                 assert len(out2) == 0, f"Should NOT confirm with min_conf={min_conf}, sig_conf={sig_conf}"
    |                                                                                                     ^^^^^^
123 |
124 |     def test_invalid_signal_confidence_handling(self):
    |

W293 Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:127:1
    |
125 |         """
126 |         Test handling of invalid signal confidence values.
127 |         
    | ^^^^^^^^
128 |         Ensures that out-of-range confidence values are properly normalized
129 |         and don't cause the confirmation logic to fail.
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:164:1
    |
162 |         """
163 |         Test that multiple allocator instances don't share state.
164 |         
    | ^^^^^^^^
165 |         Ensures that the signal confirmation works consistently across
166 |         different allocator instances.
    |
help: Remove whitespace from blank line

E501 Line too long (108 > 100)
   --> tests/test_strategy_allocator_regression.py:180:101
    |
179 |             assert out1 == [], f"Instance {i}: First call should return empty list"
180 |             assert out2 and out2[0].symbol == "AAPL", f"Instance {i}: Second call should return AAPL signal"
    |                                                                                                     ^^^^^^^^
    |

E501 Line too long (138 > 100)
  --> tests/test_strategy_allocator_smoke.py:26:101
   |
25 | …ure config is applied correctly
26 | …, f"Expected signal_confirmation_bars=2, got {alloc.config.signal_confirmation_bars}"
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
27 | …cted min_confidence=0.0, got {alloc.config.min_confidence}"
28 | …ected delta_threshold=0.0, got {alloc.config.delta_threshold}"
   |

E501 Line too long (112 > 100)
  --> tests/test_strategy_allocator_smoke.py:27:101
   |
25 |     # AI-AGENT-REF: Add defensive verification to ensure config is applied correctly
26 |     assert alloc.config.signal_confirmation_bars == 2, f"Expected signal_confirmation_bars=2, got {alloc.config.signal_confirmation_ba…
27 |     assert alloc.config.min_confidence == 0.0, f"Expected min_confidence=0.0, got {alloc.config.min_confidence}"
   |                                                                                                     ^^^^^^^^^^^^
28 |     assert alloc.config.delta_threshold == 0.0, f"Expected delta_threshold=0.0, got {alloc.config.delta_threshold}"
   |

E501 Line too long (115 > 100)
  --> tests/test_strategy_allocator_smoke.py:28:101
   |
26 |     assert alloc.config.signal_confirmation_bars == 2, f"Expected signal_confirmation_bars=2, got {alloc.config.signal_confirmation_ba…
27 |     assert alloc.config.min_confidence == 0.0, f"Expected min_confidence=0.0, got {alloc.config.min_confidence}"
28 |     assert alloc.config.delta_threshold == 0.0, f"Expected delta_threshold=0.0, got {alloc.config.delta_threshold}"
   |                                                                                                     ^^^^^^^^^^^^^^^
29 |
30 |     sig = TradeSignal(symbol="AAPL", side="buy", confidence=1.0, strategy="s1")
   |

F401 `ai_trading.strategies.multi_timeframe.SignalDirection` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_strategy_components.py:51:13
   |
49 |         from ai_trading.strategies.multi_timeframe import (
50 |             MultiTimeframeAnalyzer,
51 |             SignalDirection,
   |             ^^^^^^^^^^^^^^^
52 |             SignalStrength,
53 |         )
   |
help: Remove unused import

F401 `ai_trading.strategies.multi_timeframe.SignalStrength` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_strategy_components.py:52:13
   |
50 |             MultiTimeframeAnalyzer,
51 |             SignalDirection,
52 |             SignalStrength,
   |             ^^^^^^^^^^^^^^
53 |         )
   |
help: Remove unused import

E501 Line too long (111 > 100)
  --> tests/test_strategy_components.py:86:101
   |
85 |         print(f"✓ Multi-timeframe analysis: {len(signals)} timeframes analyzed")
86 |         print(f"  Recommendation: {recommendation['action']} (confidence: {recommendation['confidence']:.2f})")
   |                                                                                                     ^^^^^^^^^^^
87 |         print(f"  Overall score: {result['combined_analysis'].get('overall_score', 0):.2f}")
   |

F401 `ai_trading.strategies.regime_detection.VolatilityRegime` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> tests/test_strategy_components.py:105:13
    |
103 |             MarketRegime,
104 |             RegimeDetector,
105 |             VolatilityRegime,
    |             ^^^^^^^^^^^^^^^^
106 |         )
    |
help: Remove unused import: `ai_trading.strategies.regime_detection.VolatilityRegime`

E501 Line too long (101 > 100)
   --> tests/test_strategy_components.py:133:101
    |
131 |         recommendations = detector.get_regime_recommendations()
132 |         assert "strategy_type" in recommendations, "Should provide strategy recommendations"
133 |         assert "position_size_multiplier" in recommendations, "Should provide position sizing advice"
    |                                                                                                     ^
134 |
135 |         print(f"✓ Regime detection: {regime.value} (confidence: {confidence:.2f})")
    |

E501 Line too long (103 > 100)
   --> tests/test_strategy_components.py:189:101
    |
187 |             "position_size_multiplier": adjusted_multiplier,
188 |             "regime": regime.value,
189 |             "reasoning": f"MTF analysis: {mtf_recommendation['action']}, Market regime: {regime.value}"
    |                                                                                                     ^^^
190 |         }
    |

E501 Line too long (103 > 100)
   --> tests/test_strategy_components.py:195:101
    |
193 |         print(f"  Final action: {integrated_recommendation['action']}")
194 |         print(f"  Combined confidence: {integrated_recommendation['confidence']:.2f}")
195 |         print(f"  Adjusted position size: {integrated_recommendation['position_size_multiplier']:.2f}")
    |                                                                                                     ^^^
196 |         print(f"  Reasoning: {integrated_recommendation['reasoning']}")
    |

E501 Line too long (108 > 100)
  --> tests/test_stream_subscription_fix.py:57:101
   |
56 |         self.assertTrue(success, "Stream subscription should not fail when stream is None")
57 |         mock_logger.info.assert_called_with("Trade updates stream not available - running in degraded mode")
   |                                                                                                     ^^^^^^^^
58 |
59 |     def test_stream_subscription_with_valid_stream(self):
   |

E501 Line too long (103 > 100)
   --> tests/test_stream_subscription_fix.py:107:101
    |
105 |                 except AttributeError as e:
106 |                     if "'NoneType' object has no attribute 'subscribe_trade_updates'" in str(e):
107 |                         self.fail("Stream subscription fix not working - still getting AttributeError")
    |                                                                                                     ^^^
108 |                     else:
109 |                         # Other AttributeErrors might be expected due to mocking
    |

W293 Blank line contains whitespace
  --> tests/test_systemd_startup.py:34:1
   |
32 |     from ai_trading.config.management import _resolve_alpaca_env
33 |     print("✓ Config management imported")
34 |     
   | ^^^^
35 |     from ai_trading import runner
36 |     print("✓ Runner imported")
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_systemd_startup.py:37:1
   |
35 |     from ai_trading import runner
36 |     print("✓ Runner imported")
37 |     
   | ^^^^
38 |     from ai_trading.utils.timefmt import utc_now_iso
39 |     print("✓ Time utilities imported")
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_systemd_startup.py:40:1
   |
38 |     from ai_trading.utils.timefmt import utc_now_iso
39 |     print("✓ Time utilities imported")
40 |     
   | ^^^^
41 |     # Test that credential resolution works
42 |     api_key, secret_key, base_url = _resolve_alpaca_env()
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_systemd_startup.py:47:1
   |
45 |     assert base_url == "https://paper-api.alpaca.markets"
46 |     print("✓ Credential resolution works with missing creds")
47 |     
   | ^^^^
48 |     # Test UTC timestamp doesn't have double Z
49 |     timestamp = utc_now_iso()
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_systemd_startup.py:53:1
   |
51 |     assert timestamp.count('Z') == 1
52 |     print("✓ UTC timestamp has single Z")
53 |     
   | ^^^^
54 |     print("SUCCESS: No import-time crashes!")
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_systemd_startup.py:55:1
   |
54 |     print("SUCCESS: No import-time crashes!")
55 |     
   | ^^^^
56 | except SystemExit as e:
57 |     print(f"FAIL: SystemExit called: {e}")
   |
help: Remove whitespace from blank line

E501 Line too long (176 > 100)
   --> tests/test_systemd_startup.py:136:101
    |
134 | …
135 | …
136 | …re_output=True, text=True, timeout=30, check=True)  # AI-AGENT-REF: Added timeout and check for security
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
137 | ….stderr}"
138 | …
    |

W291 Trailing whitespace
   --> tests/test_systemd_startup.py:150:49
    |
149 | assert api_key == "test_apca_key_from_env"
150 | assert secret_key == "test_apca_secret_from_env"  
    |                                                 ^^
151 | assert base_url == "https://api.alpaca.markets"
152 | print("✓ APCA schema with .env file works")
    |
help: Remove trailing whitespace

E501 Line too long (176 > 100)
   --> tests/test_systemd_startup.py:159:101
    |
157 | …
158 | …
159 | …re_output=True, text=True, timeout=30, check=True)  # AI-AGENT-REF: Added timeout and check for security
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
160 | …tderr}"
161 | …
    |

E501 Line too long (176 > 100)
   --> tests/test_systemd_startup.py:200:101
    |
199 | …
200 | …re_output=True, text=True, timeout=30, check=True)  # AI-AGENT-REF: Added timeout and check for security
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
201 | …
202 | …
    |

W291 Trailing whitespace
   --> tests/test_systemd_startup.py:223:38
    |
221 | # Verify lazy loading variables exist
222 | assert hasattr(runner, '_load_engine')
223 | assert hasattr(runner, '_bot_engine') 
    |                                      ^
224 | assert hasattr(runner, '_bot_state_class')
    |
help: Remove trailing whitespace

E501 Line too long (176 > 100)
   --> tests/test_systemd_startup.py:238:101
    |
237 | …
238 | …re_output=True, text=True, timeout=30, check=True)  # AI-AGENT-REF: Added timeout and check for security
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
239 | …
240 | …
    |

W293 Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:8:1
   |
 6 | def test_validate_trading_parameters_no_name_error():
 7 |     """Test that validate_trading_parameters function references only defined parameters.
 8 |     
   | ^^^^
 9 |     This test parses the bot_engine.py source code and validates that all parameters
10 |     referenced in validate_trading_parameters() are defined before the function call.
   |
help: Remove whitespace from blank line

E501 Line too long (118 > 100)
  --> tests/test_trading_parameter_validation.py:58:101
   |
57 |     if undefined_params:
58 |         print(f"Parameters referenced in validate_trading_parameters but not defined before call: {undefined_params}")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^
59 |         print(f"validate_trading_parameters called at line: {validate_call_line}")
60 |         for param in referenced_params:
   |

E501 Line too long (152 > 100)
  --> tests/test_trading_parameter_validation.py:66:101
   |
64 | …
65 | …
66 | …ams} are referenced in validate_trading_parameters but not defined before the function call"
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

E501 Line too long (138 > 100)
  --> tests/test_trading_parameter_validation.py:88:101
   |
86 | …trading_parameters should be called"
87 | …
88 | …hould be defined before validate_trading_parameters call (line {validate_call_line})"
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

E501 Line too long (107 > 100)
   --> tests/test_trigger_meta_learning_conversion.py:202:101
    |
200 |     """Test the exact scenario from the problem statement."""
201 |     with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
202 |         # Create exactly the scenario: mixed_format_detected=False, audit_format_rows=0, meta_format_rows=4
    |                                                                                                     ^^^^^^^
203 |         f.write("symbol,entry_time,entry_price,exit_time,exit_price,qty,side,strategy,classification,signal_tags,confidence,reward\n")
204 |         f.write("TEST,2025-08-05T23:17:35Z,100.0,2025-08-05T23:18:35Z,105.0,10,buy,test_strategy,test,signal1+signal2,0.8,5.0\n")
    |

E501 Line too long (113 > 100)
  --> tests/test_validate_logging_setup_single_handler.py:40:101
   |
38 |         assert res["handlers_count"] == post_count and res.get("deduped") is True
39 |     else:
40 |         pytest.skip("Neither dedupe_stream_handlers() nor validate_logging_setup() found in ai_trading.logging.")
   |                                                                                                     ^^^^^^^^^^^^^
   |

E501 Line too long (106 > 100)
  --> tests/test_yf_auto_adjust_and_cache.py:31:101
   |
29 |     from ai_trading.data_fetcher import _yahoo_get_bars
30 |
31 |     _ = _yahoo_get_bars("SPY", datetime(2025, 8, 1, tzinfo=UTC), datetime(2025, 8, 2, tzinfo=UTC), "1Day")
   |                                                                                                     ^^^^^^
32 |
33 |     assert calls["auto_adjust"] is True
   |

E501 Line too long (101 > 100)
  --> tests/unit/test_health_check.py:44:101
   |
42 |     # Test default is used when both are missing
43 |     ctx_no_attr = types.SimpleNamespace()
44 |     assert resolve_min_rows(None, ctx_no_attr) == 120, "Should use default when ctx.min_rows missing"
   |                                                                                                     ^
   |

E501 Line too long (105 > 100)
  --> tests/utils/test_http_retry.py:10:101
   |
10 | def test_get_retries_and_logs(monkeypatch: pytest.MonkeyPatch, caplog: pytest.LogCaptureFixture) -> None:
   |                                                                                                     ^^^^^
11 |     calls = {"n": 0}
   |

E501 Line too long (101 > 100)
  --> tests/utils/test_retry.py:45:101
   |
43 |     fn = Flaky(5)
44 |     with pytest.raises(TimeoutError):
45 |         retry_call(fn, exceptions=(TimeoutError,), retries=4, backoff=0.1, max_backoff=0.3, jitter=0)
   |                                                                                                     ^
46 |     assert sleeps[-1] <= 0.3
47 |     assert sleeps == sorted(sleeps)
   |

E501 Line too long (115 > 100)
  --> tools/ci/full_cleanup.py:18:101
   |
17 | def strip_mock_classes(text: str) -> str:
18 |     rx_bases = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*\([^)]*\)\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
   |                                                                                                     ^^^^^^^^^^^^^^^
19 |     rx_plain = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
20 |     text = rx_bases.sub('', text)
   |

E501 Line too long (103 > 100)
  --> tools/ci/full_cleanup.py:19:101
   |
17 | def strip_mock_classes(text: str) -> str:
18 |     rx_bases = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*\([^)]*\)\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
19 |     rx_plain = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
   |                                                                                                     ^^^
20 |     text = rx_bases.sub('', text)
21 |     text = rx_plain.sub('', text)
   |

E501 Line too long (120 > 100)
  --> tools/ci/full_cleanup.py:49:101
   |
47 |     prologue = (
48 |         "def _raise_dynamic_exec_disabled(*_args, **_kwargs):\n"
49 |         "    raise RuntimeError('Dynamic _raise_dynamic_exec_disabled() disabled. Replace with explicit dispatch.')\n\n"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
50 |         "def _raise_dynamic_eval_disabled(*_args, **_kwargs):\n"
51 |         "    raise RuntimeError('Dynamic _raise_dynamic_eval_disabled() disabled. Replace with explicit dispatch.')\n\n"
   |

E501 Line too long (120 > 100)
  --> tools/ci/full_cleanup.py:51:101
   |
49 |         "    raise RuntimeError('Dynamic _raise_dynamic_exec_disabled() disabled. Replace with explicit dispatch.')\n\n"
50 |         "def _raise_dynamic_eval_disabled(*_args, **_kwargs):\n"
51 |         "    raise RuntimeError('Dynamic _raise_dynamic_eval_disabled() disabled. Replace with explicit dispatch.')\n\n"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
52 |     )
53 |     lines = text.splitlines(keepends=True)
   |

E501 Line too long (106 > 100)
  --> tools/ci/full_cleanup.py:55:101
   |
53 |     lines = text.splitlines(keepends=True)
54 |     i = 0
55 |     while i < len(lines) and (lines[i].startswith('#!') or 'coding:' in lines[i] or lines[i].strip()==''):
   |                                                                                                     ^^^^^^
56 |         i += 1
57 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
   |

E702 Multiple statements on one line (semicolon)
  --> tools/ci/full_cleanup.py:58:33
   |
56 |         i += 1
57 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
58 |         q = lines[i].strip()[:3]; i += 1
   |                                 ^
59 |         while i < len(lines) and q not in lines[i]: i += 1
60 |         if i < len(lines): i += 1
   |

E701 Multiple statements on one line (colon)
  --> tools/ci/full_cleanup.py:59:51
   |
57 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
58 |         q = lines[i].strip()[:3]; i += 1
59 |         while i < len(lines) and q not in lines[i]: i += 1
   |                                                   ^
60 |         if i < len(lines): i += 1
61 |     while i < len(lines) and lines[i].lstrip().startswith(("import ","from ")):
   |

E701 Multiple statements on one line (colon)
  --> tools/ci/full_cleanup.py:60:26
   |
58 |         q = lines[i].strip()[:3]; i += 1
59 |         while i < len(lines) and q not in lines[i]: i += 1
60 |         if i < len(lines): i += 1
   |                          ^
61 |     while i < len(lines) and lines[i].lstrip().startswith(("import ","from ")):
62 |         i += 1
   |

E701 Multiple statements on one line (colon)
  --> tools/ci/full_cleanup.py:69:17
   |
67 | def migrate_config_callsites(text: str):
68 |     names = set(m.group(1) for m in UPPER.finditer(text))
69 |     if not names: return text, set()
   |                 ^
70 |     new = UPPER.sub(lambda m: f"S.{m.group(1).lower()}", text)
71 |     if "from ai_trading.config import get_settings" not in new:
   |

E501 Line too long (117 > 100)
  --> tools/ci/full_cleanup.py:89:101
   |
87 |         txt = ""
88 |     if "BaseSettings" not in txt:
89 |         fields = "".join([f"    {n.lower()}: str | None = Field(default=None, env='{n}')\n" for n in sorted(needed)])
   |                                                                                                     ^^^^^^^^^^^^^^^^^
90 |         txt = (
91 |             "from pydantic import BaseSettings, Field\n\n"
   |

E501 Line too long (125 > 100)
   --> tools/ci/full_cleanup.py:107:101
    |
105 |                      for n in sorted(needed) if n.lower() not in existing]
106 |         if additions and "class Settings" in txt:
107 |             txt = re.sub(r'(class\s+Settings\s*\(.*?\)\s*:\s*\n)', r'\1' + "".join(additions), txt, count=1, flags=re.DOTALL)
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
108 |         if "def get_settings" not in txt:
109 |             txt += (
    |

E501 Line too long (148 > 100)
  --> tools/ci/gen_audit_artifacts.py:13:101
   |
12 | …
13 | …*(?:from\s+[.\w]+\s+import\s+[^\n]+|import\s+[^\n]+))+?\n\s*except\s+ImportError\s*:\s*"),
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 | …z0-9_]+\s*:", re.MULTILINE),
15 | …_\s*\("),
   |

E501 Line too long (120 > 100)
  --> tools/ci/gen_audit_artifacts.py:28:101
   |
26 |         rel = p.relative_to(ROOT)
27 |         srel = str(rel)
28 |         if any(part in srel for part in ("/venv/", "/.venv/", "/site-packages/", "/build/", "/dist/", "/__pycache__/")):
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
29 |             continue
30 |         try:
   |

E501 Line too long (120 > 100)
  --> tools/ci/gen_audit_artifacts.py:46:101
   |
44 |         rel = p.relative_to(ROOT)
45 |         srel = str(rel)
46 |         if any(part in srel for part in ("/venv/", "/.venv/", "/site-packages/", "/build/", "/dist/", "/__pycache__/")):
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
47 |             continue
48 |         try:
   |

E501 Line too long (134 > 100)
  --> tools/ci/gen_audit_artifacts.py:76:101
   |
74 |     for r in markers:
75 |         counts[r["marker"]] = counts.get(r["marker"], 0) + 1
76 |     write_csv(OUT / "summary.csv", [{"marker":k,"count":v} for k,v in sorted(counts.items(), key=lambda x:-x[1])], ["marker","count"])
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
77 |
78 |     print("Artifacts written to tools/out/:")
   |

E501 Line too long (109 > 100)
  --> tools/ci/gen_audit_artifacts.py:79:101
   |
78 |     print("Artifacts written to tools/out/:")
79 |     for fn in ("markers_all.csv","import_guards.csv","runtime_mocks.csv","compile_errors.csv","summary.csv"):
   |                                                                                                     ^^^^^^^^^
80 |         print(" -", (OUT / fn).as_posix())
   |

E501 Line too long (138 > 100)
  --> tools/ci/guard_ast.py:18:101
   |
16 | …
17 | …
18 | …t.line if node.lpar else node.func.start.line, "raw _raise_dynamic_eval_disabled()"))
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
19 | …
20 | …
   |

E501 Line too long (134 > 100)
  --> tools/ci/guard_ast.py:22:101
   |
20 |     @m.visit(m.Call(func=m.Name("exec")))
21 |     def _exec(self, node: cst.Call) -> None:
22 |         FAILURES.append((self.path, node.lpar[0].start.line if node.lpar else node.func.start.line, "_raise_dynamic_exec_disabled()"))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
23 |
24 |     @m.visit(m.ExceptHandler(type=None))
   |

E501 Line too long (118 > 100)
  --> tools/ci/guard_ast.py:31:101
   |
29 |     def _empty_except(self, node: cst.ExceptHandler) -> None:
30 |         body = node.body
31 |         if len(body.body) == 1 and m.matches(body.body[0], m.SimpleStatementLine(body=m.OneOf(m.Pass(), m.Return()))):
   |                                                                                                     ^^^^^^^^^^^^^^^^^^
32 |             FAILURES.append((self.path, body.body[0].start.line, "empty except"))
   |

E501 Line too long (115 > 100)
  --> tools/ci/guard_ast.py:34:101
   |
32 |             FAILURES.append((self.path, body.body[0].start.line, "empty except"))
33 |
34 |     @m.visit(m.Call(func=m.Attribute(value=m.Name("requests"), attr=m.OneOf("get","post","put","delete","patch"))))
   |                                                                                                     ^^^^^^^^^^^^^^^
35 |     def _requests_timeout(self, node: cst.Call) -> None:
36 |         if not any(m.matches(a, m.Arg(keyword=m.Name("timeout"))) for a in node.args):
   |

E501 Line too long (130 > 100)
  --> tools/ci/guard_ast.py:39:101
   |
37 |             FAILURES.append((self.path, node.func.attr.start.line, "requests.* without timeout"))
38 |
39 |     @m.visit(m.Call(func=m.Attribute(value=m.Name("subprocess"), attr=m.OneOf("run","Popen","call","check_call","check_output"))))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
40 |     def _subproc_timeout(self, node: cst.Call) -> None:
41 |         if not any(m.matches(a, m.Arg(keyword=m.Name("timeout"))) for a in node.args):
   |

E501 Line too long (113 > 100)
  --> tools/ci/guard_ast.py:60:101
   |
58 |             return
59 |         for p in node.params.params + node.params.kwonly_params:
60 |             if p.default and m.matches(p.default.value, m.OneOf(m.List(), m.Dict(), m.Call(func=m.Name("set")))):
   |                                                                                                     ^^^^^^^^^^^^^
61 |                 FAILURES.append((self.path, p.default.value.start.line, "mutable default in signature"))
   |

E501 Line too long (104 > 100)
  --> tools/ci/guard_ast.py:61:101
   |
59 |         for p in node.params.params + node.params.kwonly_params:
60 |             if p.default and m.matches(p.default.value, m.OneOf(m.List(), m.Dict(), m.Call(func=m.Name("set")))):
61 |                 FAILURES.append((self.path, p.default.value.start.line, "mutable default in signature"))
   |                                                                                                     ^^^^
62 |
63 | def scan_dir(root: Path) -> int:
   |

E501 Line too long (142 > 100)
  --> tools/ci/list_shims.py:10:101
   |
 8 | …
 9 | …
10 | …:from\s+[.\w]+\s+import\s+[^\n]+|import\s+[^\n]+))+?\n\s*except\s+ImportError\s*:\s*"),
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 | …tr__\s*\("),
12 | …s+def\s+[A-Z0-9_]+\s*\("),
   |

E501 Line too long (110 > 100)
  --> tools/ci/optionalize_features.py:24:101
   |
22 |         return False
23 |     # Append a safe, reviewable block at end (human may inline later)
24 |     path.write_text(txt + "\n\n" + TEMPLATE.format(flag=flag, module=module, symbol=symbol), encoding="utf-8")
   |                                                                                                     ^^^^^^^^^^
25 |     return True
   |

E501 Line too long (120 > 100)
  --> tools/ci/sweep_tests_tools.py:40:101
   |
38 |     prologue = (
39 |         "def _raise_dynamic_exec_disabled(*_args, **_kwargs):\n"
40 |         "    raise RuntimeError('Dynamic _raise_dynamic_exec_disabled() disabled. Replace with explicit dispatch.')\n\n"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
41 |         "def _raise_dynamic_eval_disabled(*_args, **_kwargs):\n"
42 |         "    raise RuntimeError('Dynamic _raise_dynamic_eval_disabled() disabled. Replace with explicit dispatch.')\n\n"
   |

E501 Line too long (120 > 100)
  --> tools/ci/sweep_tests_tools.py:42:101
   |
40 |         "    raise RuntimeError('Dynamic _raise_dynamic_exec_disabled() disabled. Replace with explicit dispatch.')\n\n"
41 |         "def _raise_dynamic_eval_disabled(*_args, **_kwargs):\n"
42 |         "    raise RuntimeError('Dynamic _raise_dynamic_eval_disabled() disabled. Replace with explicit dispatch.')\n\n"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
43 |     )
44 |     lines = text.splitlines(keepends=True)
   |

E501 Line too long (106 > 100)
  --> tools/ci/sweep_tests_tools.py:47:101
   |
45 |     # insert after initial imports/docstring where reasonable
46 |     i = 0
47 |     while i < len(lines) and (lines[i].startswith('#!') or 'coding:' in lines[i] or lines[i].strip()==''):
   |                                                                                                     ^^^^^^
48 |         i += 1
49 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
   |

E702 Multiple statements on one line (semicolon)
  --> tools/ci/sweep_tests_tools.py:50:33
   |
48 |         i += 1
49 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
50 |         q = lines[i].strip()[:3]; i += 1
   |                                 ^
51 |         while i < len(lines) and q not in lines[i]: i += 1
52 |         if i < len(lines): i += 1
   |

E701 Multiple statements on one line (colon)
  --> tools/ci/sweep_tests_tools.py:51:51
   |
49 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
50 |         q = lines[i].strip()[:3]; i += 1
51 |         while i < len(lines) and q not in lines[i]: i += 1
   |                                                   ^
52 |         if i < len(lines): i += 1
53 |     while i < len(lines) and lines[i].lstrip().startswith(("import ","from ")):
   |

E701 Multiple statements on one line (colon)
  --> tools/ci/sweep_tests_tools.py:52:26
   |
50 |         q = lines[i].strip()[:3]; i += 1
51 |         while i < len(lines) and q not in lines[i]: i += 1
52 |         if i < len(lines): i += 1
   |                          ^
53 |     while i < len(lines) and lines[i].lstrip().startswith(("import ","from ")):
54 |         i += 1
   |

E501 Line too long (149 > 100)
  --> tools/ci/sweep_tests_tools.py:59:101
   |
58 | …
59 | …broad Mock* used at runtime; prefer relocating to tests/support/mocks_runtime.py if needed.
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
60 | …0-9_]+\s*\([^)]*\)\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
61 | …0-9_]+\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
   |

E501 Line too long (115 > 100)
  --> tools/ci/sweep_tests_tools.py:60:101
   |
58 | def strip_mock_classes(text: str) -> str:
59 |     # Only adjust tests/tools if they accidentally define broad Mock* used at runtime; prefer relocating to tests/support/mocks_runtim…
60 |     rx_bases = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*\([^)]*\)\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
   |                                                                                                     ^^^^^^^^^^^^^^^
61 |     rx_plain = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
62 |     return rx_plain.sub('', rx_bases.sub('', text))
   |

E501 Line too long (103 > 100)
  --> tools/ci/sweep_tests_tools.py:61:101
   |
59 |     # Only adjust tests/tools if they accidentally define broad Mock* used at runtime; prefer relocating to tests/support/mocks_runtim…
60 |     rx_bases = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*\([^)]*\)\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
61 |     rx_plain = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
   |                                                                                                     ^^^
62 |     return rx_plain.sub('', rx_bases.sub('', text))
   |

E702 Multiple statements on one line (semicolon)
  --> tools/ci/sweep_tests_tools.py:78:26
   |
76 |         txt = strip_mock_classes(txt)
77 |         if txt != txt0:
78 |             write(p, txt); changed += 1
   |                          ^
79 |
80 | print(f"Files changed: {changed}")
   |

E501 Line too long (110 > 100)
  --> tools/ci/tighten_settings_types.py:30:101
   |
29 |         # Floats
30 |         (r'    ml_confidence_threshold: str \| None = Field\(default=None, env=\'ML_CONFIDENCE_THRESHOLD\'\)',
   |                                                                                                     ^^^^^^^^^^
31 |          '    ml_confidence_threshold: float = Field(0.6, env=\'ML_CONFIDENCE_THRESHOLD\')'),
32 |         (r'    portfolio_drift_threshold: str \| None = Field\(default=None, env=\'PORTFOLIO_DRIFT_THRESHOLD\'\)',
   |

E501 Line too long (114 > 100)
  --> tools/ci/tighten_settings_types.py:32:101
   |
30 |         (r'    ml_confidence_threshold: str \| None = Field\(default=None, env=\'ML_CONFIDENCE_THRESHOLD\'\)',
31 |          '    ml_confidence_threshold: float = Field(0.6, env=\'ML_CONFIDENCE_THRESHOLD\')'),
32 |         (r'    portfolio_drift_threshold: str \| None = Field\(default=None, env=\'PORTFOLIO_DRIFT_THRESHOLD\'\)',
   |                                                                                                     ^^^^^^^^^^^^^^
33 |          '    portfolio_drift_threshold: float = Field(0.05, env=\'PORTFOLIO_DRIFT_THRESHOLD\')'),
34 |         (r'    max_drawdown_threshold: str \| None = Field\(default=None, env=\'MAX_DRAWDOWN_THRESHOLD\'\)',
   |

E501 Line too long (108 > 100)
  --> tools/ci/tighten_settings_types.py:34:101
   |
32 |         (r'    portfolio_drift_threshold: str \| None = Field\(default=None, env=\'PORTFOLIO_DRIFT_THRESHOLD\'\)',
33 |          '    portfolio_drift_threshold: float = Field(0.05, env=\'PORTFOLIO_DRIFT_THRESHOLD\')'),
34 |         (r'    max_drawdown_threshold: str \| None = Field\(default=None, env=\'MAX_DRAWDOWN_THRESHOLD\'\)',
   |                                                                                                     ^^^^^^^^
35 |          '    max_drawdown_threshold: float = Field(0.15, env=\'MAX_DRAWDOWN_THRESHOLD\')'),
36 |         (r'    volume_spike_threshold: str \| None = Field\(default=None, env=\'VOLUME_SPIKE_THRESHOLD\'\)',
   |

E501 Line too long (108 > 100)
  --> tools/ci/tighten_settings_types.py:36:101
   |
34 |         (r'    max_drawdown_threshold: str \| None = Field\(default=None, env=\'MAX_DRAWDOWN_THRESHOLD\'\)',
35 |          '    max_drawdown_threshold: float = Field(0.15, env=\'MAX_DRAWDOWN_THRESHOLD\')'),
36 |         (r'    volume_spike_threshold: str \| None = Field\(default=None, env=\'VOLUME_SPIKE_THRESHOLD\'\)',
   |                                                                                                     ^^^^^^^^
37 |          '    volume_spike_threshold: float = Field(1.5, env=\'VOLUME_SPIKE_THRESHOLD\')'),
   |

E501 Line too long (102 > 100)
   --> tools/ci/unwrap_import_guards.py:118:101
    |
116 |                     print(f"Successfully unwrapped imports in: {p.relative_to(ROOT)}")
117 |                 except SyntaxError as e:
118 |                     print(f"Syntax error would be introduced in {p.relative_to(ROOT)}, skipping: {e}")
    |                                                                                                     ^^
119 |                     continue
120 |             files += 1
    |

E501 Line too long (105 > 100)
 --> tools/codemods/codemod_io_safety_yaml.py:2:101
  |
1 | #!/usr/bin/env python3
2 | """Codemod script for IO safety, YAML hardening, async sleep fixes, import cleanup, and path literals."""
  |                                                                                                     ^^^^^
3 |
4 | import re
  |

E501 Line too long (109 > 100)
  --> tools/codemods/codemod_io_safety_yaml.py:11:101
   |
 9 | def replace_yaml_load(content: str) -> str:
10 |     """Replace unsafe YAML loading with yaml.safe_load()."""
11 |     # AI-AGENT-REF: Fixed unsafe yaml.load pattern - replace with yaml.safe_load when no Loader= is specified
   |                                                                                                     ^^^^^^^^^
12 |     content = re.sub(
13 |         r"yaml\.load\s*\(\s*([^)]+)\s*\)",
   |

E501 Line too long (102 > 100)
  --> tools/codemods/codemod_io_safety_yaml.py:51:101
   |
49 |                         line,
50 |                     )
51 |                 # Handle case where call spans multiple lines - add to the line with the opening paren
   |                                                                                                     ^^
52 |                 else:
53 |                     line = re.sub(
   |

E501 Line too long (123 > 100)
  --> tools/codemods/remove_import_guards.py:10:101
   |
 9 | class StripImportGuards(cst.CSTTransformer):
10 |     def leave_Try(self, original: cst.Try, updated: cst.Try) -> cst.BaseStatement | cst.FlattenSentinel[cst.BaseStatement]:
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^
11 |         # If the try-body is ONLY import statements and except ImportError exists,
12 |         # replace the whole try/except with just the import statements.
   |

E501 Line too long (103 > 100)
  --> tools/codemods/rename_unused_locals.py:27:101
   |
25 |         unused = {n for n in assigned if n not in reads and not n.startswith("_")}
26 |         for inner in ast.walk(node):
27 |             if isinstance(inner, ast.Name) and isinstance(inner.ctx, ast.Store) and inner.id in unused:
   |                                                                                                     ^^^
28 |                 inner.id = f"_unused_{inner.id}"
29 |         return node
   |

E701 Multiple statements on one line (colon)
  --> tools/fix_import_time.py:31:19
   |
30 | def ensure_getter_imports(lines, getters):
31 |     if not getters: return False
   |                   ^
32 |     imp_line = IMPORT_GETTERS_TMPL.format(", ".join(sorted(getters)))
33 |     joined = "".join(lines)
   |

E701 Multiple statements on one line (colon)
  --> tools/fix_import_time.py:34:26
   |
32 |     imp_line = IMPORT_GETTERS_TMPL.format(", ".join(sorted(getters)))
33 |     joined = "".join(lines)
34 |     if imp_line in joined: return False
   |                          ^
35 |     idx = 0
36 |     while idx < len(lines) and lines[idx].startswith(("#!", "# -*-", "from __future__")):
   |

E701 Multiple statements on one line (colon)
  --> tools/fix_import_time.py:50:17
   |
48 |     while True:
49 |         m = func.search(j, pos)
50 |         if not m: break
   |                 ^
51 |         start = m.end()
52 |         head_line = j[:m.start()].count("\n")
   |

E501 Line too long (101 > 100)
  --> tools/fix_import_time.py:70:101
   |
68 |         indent, const, field = m.groups()
69 |         repl = KNOWN_GETTERS.get(field, None)
70 |         const_map[const] = f"{KNOWN_GETTERS[field]}()" if repl else f"get_runtime_settings().{field}"
   |                                                                                                     ^
71 |         return indent + f"# REMOVED: module-scope {const} = get_settings().{field}\n"
72 |     text = RE_MODULE_CONST.sub(_const_sub, text)
   |

E501 Line too long (107 > 100)
  --> tools/fix_import_time.py:81:101
   |
79 |     def _attr_sub(m):
80 |         field = m.group(1)
81 |         return f"{KNOWN_GETTERS[field]}()" if field in KNOWN_GETTERS else f"get_runtime_settings().{field}"
   |                                                                                                     ^^^^^^^
82 |     text = RE_DIRECT_ATTR.sub(_attr_sub, text)
   |

E701 Multiple statements on one line (colon)
   --> tools/fix_import_time.py:105:53
    |
103 |     changed = 0
104 |     for py in ROOT.rglob("*.py"):
105 |         if any(part in EXCLUDE for part in py.parts): continue
    |                                                     ^
106 |         if py.parts[0] not in {"ai_trading", "tests"}: continue
107 |         if py.name == "settings.py" and py.parts[-2] == "ai_trading": continue
    |

E701 Multiple statements on one line (colon)
   --> tools/fix_import_time.py:106:54
    |
104 |     for py in ROOT.rglob("*.py"):
105 |         if any(part in EXCLUDE for part in py.parts): continue
106 |         if py.parts[0] not in {"ai_trading", "tests"}: continue
    |                                                      ^
107 |         if py.name == "settings.py" and py.parts[-2] == "ai_trading": continue
108 |         try:
    |

E701 Multiple statements on one line (colon)
   --> tools/fix_import_time.py:107:69
    |
105 |         if any(part in EXCLUDE for part in py.parts): continue
106 |         if py.parts[0] not in {"ai_trading", "tests"}: continue
107 |         if py.name == "settings.py" and py.parts[-2] == "ai_trading": continue
    |                                                                     ^
108 |         try:
109 |             if patch_file(py): changed += 1
    |

E701 Multiple statements on one line (colon)
   --> tools/fix_import_time.py:109:30
    |
107 |         if py.name == "settings.py" and py.parts[-2] == "ai_trading": continue
108 |         try:
109 |             if patch_file(py): changed += 1
    |                              ^
110 |         except Exception as e:
111 |             print(f"PATCH_FAIL {py}: {e}")
    |

E501 Line too long (115 > 100)
  --> tools/import_contract.py:48:101
   |
46 | def main(argv: List[str] | None = None) -> int:
47 |     p = argparse.ArgumentParser()
48 |     p.add_argument("--modules", default="ai_trading,trade_execution", help="Comma-separated module list to import")
   |                                                                                                     ^^^^^^^^^^^^^^^
49 |     p.add_argument("--timeout", type=float, default=20.0, help="Per-module timeout in seconds")
50 |     p.add_argument("--ci", action="store_true", help="CI mode: concise logs, non-zero exit on failures")
   |

E501 Line too long (104 > 100)
  --> tools/import_contract.py:50:101
   |
48 |     p.add_argument("--modules", default="ai_trading,trade_execution", help="Comma-separated module list to import")
49 |     p.add_argument("--timeout", type=float, default=20.0, help="Per-module timeout in seconds")
50 |     p.add_argument("--ci", action="store_true", help="CI mode: concise logs, non-zero exit on failures")
   |                                                                                                     ^^^^
51 |     args = p.parse_args(argv)
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:20:40
   |
18 |     txt = p.read_text(encoding="utf-8", errors="ignore")
19 |     hits = []
20 |     if PATS["MODULE_CONST"].search(txt): hits.append("MODULE_CONST_FROM_SETTINGS")
   |                                        ^
21 |     if PATS["MODULE_CFG"].search(txt):   hits.append("MODULE_CFG_FROM_SETTINGS")
22 |     if PATS["DIRECT_ATTR"].search(txt):  hits.append("DIRECT_SETTINGS_ATTR")
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:21:38
   |
19 |     hits = []
20 |     if PATS["MODULE_CONST"].search(txt): hits.append("MODULE_CONST_FROM_SETTINGS")
21 |     if PATS["MODULE_CFG"].search(txt):   hits.append("MODULE_CFG_FROM_SETTINGS")
   |                                      ^
22 |     if PATS["DIRECT_ATTR"].search(txt):  hits.append("DIRECT_SETTINGS_ATTR")
23 |     if PATS["BARE_CALL"].search(txt):    hits.append("BARE_GET_SETTINGS")
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:22:39
   |
20 |     if PATS["MODULE_CONST"].search(txt): hits.append("MODULE_CONST_FROM_SETTINGS")
21 |     if PATS["MODULE_CFG"].search(txt):   hits.append("MODULE_CFG_FROM_SETTINGS")
22 |     if PATS["DIRECT_ATTR"].search(txt):  hits.append("DIRECT_SETTINGS_ATTR")
   |                                       ^
23 |     if PATS["BARE_CALL"].search(txt):    hits.append("BARE_GET_SETTINGS")
24 |     return hits
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:23:37
   |
21 |     if PATS["MODULE_CFG"].search(txt):   hits.append("MODULE_CFG_FROM_SETTINGS")
22 |     if PATS["DIRECT_ATTR"].search(txt):  hits.append("DIRECT_SETTINGS_ATTR")
23 |     if PATS["BARE_CALL"].search(txt):    hits.append("BARE_GET_SETTINGS")
   |                                     ^
24 |     return hits
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:29:53
   |
27 |     any_hits = False
28 |     for py in ROOT.rglob("*.py"):
29 |         if any(part in EXCLUDE for part in py.parts): continue
   |                                                     ^
30 |         if py.parts[0] not in INCLUDE: continue
31 |         hits = scan_file(py)
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:30:38
   |
28 |     for py in ROOT.rglob("*.py"):
29 |         if any(part in EXCLUDE for part in py.parts): continue
30 |         if py.parts[0] not in INCLUDE: continue
   |                                      ^
31 |         hits = scan_file(py)
32 |         if hits:
   |

Found 1046 errors (3 fixed, 1043 remaining).
No fixes available (197 hidden fixes can be enabled with the `--unsafe-fixes` option).
