RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/__main__.py:30:29
   |
28 |         logger.info("Trade interrupted")
29 |         sys.exit(0)
30 |     except Exception as e:  # noqa: BLE001
   |                             ^^^^^^^^^^^^^^
31 |         logger.error("Trade failed: %s", e, exc_info=True)
32 |         sys.exit(1)
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/__main__.py:53:29
   |
51 |         logger.info("Backtest interrupted")
52 |         sys.exit(0)
53 |     except Exception as e:  # noqa: BLE001
   |                             ^^^^^^^^^^^^^^
54 |         logger.error("Backtest failed: %s", e, exc_info=True)
55 |         sys.exit(1)
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/__main__.py:75:29
   |
73 |         logger.info("Health check interrupted")
74 |         sys.exit(0)
75 |     except Exception as e:  # noqa: BLE001
   |                             ^^^^^^^^^^^^^^
76 |         logger.error("Health check failed: %s", e, exc_info=True)
77 |         sys.exit(1)
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/__main__.py:98:29
    |
 96 |         logger.info("Main interrupted")
 97 |         sys.exit(0)
 98 |     except Exception as e:  # noqa: BLE001
    |                             ^^^^^^^^^^^^^^
 99 |         logger.error("Main failed: %s", e, exc_info=True)
100 |         sys.exit(1)
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/__main__.py:108:29
    |
106 |     except SystemExit:
107 |         raise
108 |     except Exception as e:  # noqa: BLE001
    |                             ^^^^^^^^^^^^^^
109 |         if "--dry-run" in sys.argv:
110 |             logger.warning("dry-run: ignoring startup exception: %s", e)
    |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/artifacts.py:1:1
  |
1 | import os
  | ^^^^^^^^^
2 |
3 | def get_model_registry_dir(base: str) -> str:
  |
help: Organize imports

E501 Line too long (113 > 100)
   --> ai_trading/broker/alpaca.py:200:101
    |
198 |     # ---------- Positions & Account ----------
199 |     def list_open_positions(self) -> list[Any]:
200 |         """Return open positions as objects with symbol/qty/avg_entry_price."""  # AI-AGENT-REF: attribute access
    |                                                                                                     ^^^^^^^^^^^^^
201 |         try:
202 |             if self._is_new:
    |

E501 Line too long (106 > 100)
   --> ai_trading/broker/alpaca.py:222:101
    |
220 |                 )
221 |                 positions.append(SimpleNamespace(symbol=sym, qty=qty, avg_entry_price=aep))
222 |             except (KeyError, AttributeError, TypeError, ValueError):  # AI-AGENT-REF: narrow parse errors
    |                                                                                                     ^^^^^^
223 |                 continue
224 |         return positions
    |

E501 Line too long (111 > 100)
  --> ai_trading/broker/alpaca_credentials.py:20:101
   |
20 | def resolve_alpaca_credentials(env: Mapping[str, str] | None = None, *, prefer: str = "ALPACA") -> Credentials:
   |                                                                                                     ^^^^^^^^^^^
21 |     env = dict(env or os.environ)
22 |     prefer = prefer.upper()
   |

E501 Line too long (127 > 100)
  --> ai_trading/broker/alpaca_credentials.py:27:101
   |
25 |         b = env.get(key_b)
26 |         if a and b and a != b:
27 |             log.warning("Conflicting credentials for %s vs %s; using %s", key_a, key_b, key_a if prefer == "ALPACA" else key_b)
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
28 |         return (a if prefer == "ALPACA" else b) or (b if prefer == "ALPACA" else a)
29 |     api_key = _pick("ALPACA_API_KEY", "APCA_API_KEY_ID")
   |

RUF100 [*] Unused `noqa` directive (non-enabled: `F401`)
 --> ai_trading/config/__init__.py:6:54
  |
4 | from typing import Any
5 |
6 | from .alpaca import AlpacaConfig, get_alpaca_config  # noqa: F401
  |                                                      ^^^^^^^^^^^^
7 | from .locks import LockWithTimeout
8 | from .settings import Settings, broker_keys, get_settings  # noqa: F401
  |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `F401`)
  --> ai_trading/config/__init__.py:8:60
   |
 6 | from .alpaca import AlpacaConfig, get_alpaca_config  # noqa: F401
 7 | from .locks import LockWithTimeout
 8 | from .settings import Settings, broker_keys, get_settings  # noqa: F401
   |                                                            ^^^^^^^^^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/config/alpaca.py:1:1
  |
1 | / from __future__ import annotations
2 | |
3 | | from dataclasses import dataclass
4 | | from typing import Any, Mapping
5 | |
6 | | from .settings import get_settings, broker_keys
  | |_______________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/config/settings.py:1:1
   |
 1 | / import os
 2 | | from functools import lru_cache
 3 | |
 4 | | from ai_trading.settings import (
 5 | |     Settings,
 6 | |     _secret_to_str,
 7 | |     get_settings as _base_get_settings,
 8 | | )  # AI-AGENT-REF: canonical settings
   | |_^
 9 |
10 |   TICKERS_FILE = os.getenv("AI_TRADER_TICKERS_FILE", "tickers.csv")
   |
help: Organize imports

E501 Line too long (109 > 100)
  --> ai_trading/core/constants.py:21:101
   |
19 | # Risk management parameters - Optimized for higher profit potential
20 | RISK_PARAMETERS = {
21 |     "MAX_PORTFOLIO_RISK": 0.025,  # 2.5% max portfolio risk per trade (increased for higher profit potential)
   |                                                                                                     ^^^^^^^^^
22 |     "MAX_CORRELATION_EXPOSURE": 0.15,  # 15% max exposure to correlated assets (reduced for better diversification)
23 |     "MAX_SECTOR_CONCENTRATION": 0.15,  # 15% max exposure to single sector
   |

E501 Line too long (115 > 100)
  --> ai_trading/core/constants.py:22:101
   |
20 | RISK_PARAMETERS = {
21 |     "MAX_PORTFOLIO_RISK": 0.025,  # 2.5% max portfolio risk per trade (increased for higher profit potential)
22 |     "MAX_CORRELATION_EXPOSURE": 0.15,  # 15% max exposure to correlated assets (reduced for better diversification)
   |                                                                                                     ^^^^^^^^^^^^^^^
23 |     "MAX_SECTOR_CONCENTRATION": 0.15,  # 15% max exposure to single sector
24 |     "MIN_LIQUIDITY_THRESHOLD": 1000000,  # $1M minimum daily volume
   |

E501 Line too long (104 > 100)
  --> ai_trading/core/constants.py:27:101
   |
25 |     "MAX_POSITION_SIZE": 0.25,  # 25% max position size
26 |     "STOP_LOSS_MULTIPLIER": 1.8,  # 1.8x ATR for stop loss (tightened for capital preservation)
27 |     "TAKE_PROFIT_MULTIPLIER": 2.5,  # 2.5x ATR for take profit (reduced for more frequent profit taking)
   |                                                                                                     ^^^^
28 | }
   |

E501 Line too long (125 > 100)
  --> ai_trading/core/constants.py:33:101
   |
31 | KELLY_PARAMETERS = {
32 |     "MIN_SAMPLE_SIZE": 20,  # Minimum trades for Kelly calculation (reduced for faster adaptation)
33 |     "MAX_KELLY_FRACTION": 0.30,  # Maximum Kelly fraction (30% - must be >= MAX_POSITION_SIZE for institutional requirements)
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
34 |     "CONFIDENCE_LEVEL": 0.90,  # Statistical confidence level (reduced for less conservative sizing)
35 |     "LOOKBACK_PERIODS": 252,  # Trading days for analysis
   |

E501 Line too long (105 > 100)
  --> ai_trading/core/constants.py:70:101
   |
68 | # Performance thresholds - Optimized for higher quality strategies
69 | PERFORMANCE_THRESHOLDS = {
70 |     "MIN_SHARPE_RATIO": 1.2,  # Minimum acceptable Sharpe ratio (increased for higher quality strategies)
   |                                                                                                     ^^^^^
71 |     "MAX_DRAWDOWN": 0.15,  # Maximum acceptable drawdown (15% for conservative risk management)
72 |     "MIN_WIN_RATE": 0.48,  # Minimum win rate threshold (increased for quality trade filtering)
   |

E501 Line too long (108 > 100)
   --> ai_trading/core/parameter_validator.py:162:101
    |
160 |                     result["status"] = "FAIL"
161 |                     result["violations"].append(
162 |                         f"{parameter_name} value {new_value} outside safe bounds [{min_bound}, {max_bound}]"
    |                                                                                                     ^^^^^^^^
163 |                     )
    |

E501 Line too long (111 > 100)
   --> ai_trading/core/parameter_validator.py:345:101
    |
343 |     logger.info("Kelly Criterion optimizations:")
344 |     logger.info(
345 |         f"  MAX_KELLY_FRACTION: 0.25 → {KELLY_PARAMETERS['MAX_KELLY_FRACTION']} (better risk-adjusted returns)"
    |                                                                                                     ^^^^^^^^^^^
346 |     )
347 |     logger.info(
    |

E501 Line too long (103 > 100)
   --> ai_trading/core/parameter_validator.py:351:101
    |
349 |     )
350 |     logger.info(
351 |         f"  CONFIDENCE_LEVEL: 0.95 → {KELLY_PARAMETERS['CONFIDENCE_LEVEL']} (less conservative sizing)"
    |                                                                                                     ^^^
352 |     )
    |

E501 Line too long (105 > 100)
   --> ai_trading/core/parameter_validator.py:356:101
    |
354 |     logger.info("Risk management optimizations:")
355 |     logger.info(
356 |         f"  MAX_PORTFOLIO_RISK: 0.02 → {RISK_PARAMETERS['MAX_PORTFOLIO_RISK']} (higher profit potential)"
    |                                                                                                     ^^^^^
357 |     )
358 |     logger.info(
    |

E501 Line too long (110 > 100)
   --> ai_trading/core/parameter_validator.py:359:101
    |
357 |     )
358 |     logger.info(
359 |         f"  MAX_POSITION_SIZE: 0.10 → {RISK_PARAMETERS['MAX_POSITION_SIZE']} (increased for larger positions)"
    |                                                                                                     ^^^^^^^^^^
360 |     )
361 |     logger.info(
    |

E501 Line too long (105 > 100)
   --> ai_trading/core/parameter_validator.py:362:101
    |
360 |     )
361 |     logger.info(
362 |         f"  STOP_LOSS_MULTIPLIER: 2.0 → {RISK_PARAMETERS['STOP_LOSS_MULTIPLIER']} (capital preservation)"
    |                                                                                                     ^^^^^
363 |     )
364 |     logger.info(
    |

E501 Line too long (111 > 100)
   --> ai_trading/core/parameter_validator.py:365:101
    |
363 |     )
364 |     logger.info(
365 |         f"  TAKE_PROFIT_MULTIPLIER: 3.0 → {RISK_PARAMETERS['TAKE_PROFIT_MULTIPLIER']} (frequent profit taking)"
    |                                                                                                     ^^^^^^^^^^^
366 |     )
367 |     logger.info(
    |

E501 Line too long (116 > 100)
   --> ai_trading/core/parameter_validator.py:368:101
    |
366 |     )
367 |     logger.info(
368 |         f"  MAX_CORRELATION_EXPOSURE: 0.20 → {RISK_PARAMETERS['MAX_CORRELATION_EXPOSURE']} (better diversification)"
    |                                                                                                     ^^^^^^^^^^^^^^^^
369 |     )
    |

E501 Line too long (105 > 100)
   --> ai_trading/core/parameter_validator.py:376:101
    |
374 |     )
375 |     logger.info(
376 |         f"  MAX_SLIPPAGE_BPS: 20 → {EXECUTION_PARAMETERS['MAX_SLIPPAGE_BPS']} (better execution quality)"
    |                                                                                                     ^^^^^
377 |     )
378 |     logger.info(
    |

E501 Line too long (109 > 100)
   --> ai_trading/core/parameter_validator.py:379:101
    |
377 |     )
378 |     logger.info(
379 |         f"  ORDER_TIMEOUT_SECONDS: 300 → {EXECUTION_PARAMETERS['ORDER_TIMEOUT_SECONDS']} (faster adaptation)"
    |                                                                                                     ^^^^^^^^^
380 |     )
    |

E501 Line too long (109 > 100)
   --> ai_trading/core/parameter_validator.py:384:101
    |
382 |     logger.info("Performance threshold optimizations:")
383 |     logger.info(
384 |         f"  MIN_SHARPE_RATIO: 1.0 → {PERFORMANCE_THRESHOLDS['MIN_SHARPE_RATIO']} (higher quality strategies)"
    |                                                                                                     ^^^^^^^^^
385 |     )
386 |     logger.info(
    |

E501 Line too long (104 > 100)
   --> ai_trading/core/parameter_validator.py:387:101
    |
385 |     )
386 |     logger.info(
387 |         f"  MAX_DRAWDOWN: 0.20 → {PERFORMANCE_THRESHOLDS['MAX_DRAWDOWN']} (better capital preservation)"
    |                                                                                                     ^^^^
388 |     )
389 |     logger.info(
    |

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/core/protocols.py:1:1
  |
1 | / from __future__ import annotations
2 | | from typing import Protocol, Sequence, Mapping, Any
  | |___________________________________________________^
  |
help: Organize imports

E501 Line too long (109 > 100)
 --> ai_trading/core/protocols.py:6:101
  |
5 | class AllocatorProtocol(Protocol):
6 |     def allocate(self, signals: Sequence[Mapping[str, Any]], runtime: "BotRuntime") -> Mapping[str, Any]: ...
  |                                                                                                     ^^^^^^^^^
  |

W293 Blank line contains whitespace
  --> ai_trading/core/runtime.py:55:1
   |
53 |     """
54 |     Standardized runtime context for the trading bot.
55 |     
   | ^^^^
56 |     Provides consistent access to configuration and runtime parameters
57 |     required by the trading loop and related components.
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/core/runtime.py:62:1
   |
60 |     params: dict[str, Any] = field(default_factory=dict)
61 |     tickers: list[str] = field(default_factory=list)  # AI-AGENT-REF: runtime-selected tickers
62 |     
   | ^^^^
63 |     # Additional runtime attributes will be set by _ensure_initialized
64 |     # These are forwarded from the underlying LazyBotContext
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/core/runtime.py:80:1
   |
78 |     """
79 |     Build a runtime context from trading configuration.
80 |     
   | ^^^^
81 |     Ensures all required parameters are populated from TradingConfig with 
82 |     explicit defaults as specified in the problem statement.
   |
help: Remove whitespace from blank line

W291 Trailing whitespace
  --> ai_trading/core/runtime.py:81:74
   |
79 |     Build a runtime context from trading configuration.
80 |     
81 |     Ensures all required parameters are populated from TradingConfig with 
   |                                                                          ^
82 |     explicit defaults as specified in the problem statement.
   |
help: Remove trailing whitespace

W293 Blank line contains whitespace
  --> ai_trading/core/runtime.py:83:1
   |
81 |     Ensures all required parameters are populated from TradingConfig with 
82 |     explicit defaults as specified in the problem statement.
83 |     
   | ^^^^
84 |     Args:
85 |         cfg: Trading configuration object
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/core/runtime.py:86:1
   |
84 |     Args:
85 |         cfg: Trading configuration object
86 |         
   | ^^^^^^^^
87 |     Returns:
88 |         BotRuntime with fully populated params dict
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/core/runtime.py:93:1
   |
91 |     for k, dflt in REQUIRED_PARAM_DEFAULTS.items():
92 |         params[k] = float(_cfg_coalesce(cfg, k, dflt))
93 |     
   | ^^^^
94 |     # Add any additional keys the loop expects if needed
95 |     runtime = BotRuntime(cfg=cfg, params=params, allocator=kwargs.get("allocator"))
   |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> ai_trading/core/runtime.py:100:101
    |
100 | def enhance_runtime_with_context(runtime: BotRuntime, lazy_context: Any, **kwargs: Any) -> BotRuntime:
    |                                                                                                     ^^
101 |     """
102 |     Enhance runtime with attributes from LazyBotContext after initialization.
    |

W293 Blank line contains whitespace
   --> ai_trading/core/runtime.py:103:1
    |
101 |     """
102 |     Enhance runtime with attributes from LazyBotContext after initialization.
103 |     
    | ^^^^
104 |     Args:
105 |         runtime: BotRuntime to enhance
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/core/runtime.py:107:1
    |
105 |         runtime: BotRuntime to enhance
106 |         lazy_context: Initialized LazyBotContext
107 |         
    | ^^^^^^^^
108 |     Returns:
109 |         Enhanced runtime with context attributes
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> ai_trading/core/runtime.py:113:69
    |
111 |     # Forward key attributes from the lazy context
112 |     runtime.api = getattr(lazy_context, 'api', None)
113 |     runtime.data_client = getattr(lazy_context, 'data_client', None) 
    |                                                                     ^
114 |     runtime.data_fetcher = getattr(lazy_context, 'data_fetcher', None)
115 |     runtime.signal_manager = getattr(lazy_context, 'signal_manager', None)
    |
help: Remove trailing whitespace

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/data/bars.py:1:1
   |
 1 | / from __future__ import annotations
 2 | |
 3 | | from datetime import UTC, date, datetime, timedelta
 4 | | from typing import Any
 5 | | from zoneinfo import ZoneInfo
 6 | |
 7 | | import pandas as pd
 8 | |
 9 | | from ai_trading.data.market_calendar import previous_trading_session, rth_session_utc
10 | | from ai_trading.data_fetcher import get_bars, get_minute_df
11 | | from ai_trading.data_fetcher import get_bars as http_get_bars  # AI-AGENT-REF: fallback helpers
12 | | from ai_trading.config import get_settings
13 | | from ai_trading.logging import get_logger
14 | | from ai_trading.logging.empty_policy import (
15 | |     classify as _empty_classify,
16 | | )
17 | | from ai_trading.logging.empty_policy import (
18 | |     record as _empty_record,
19 | | )
20 | | from ai_trading.logging.empty_policy import (
21 | |     should_emit as _empty_should_emit,
22 | | )
23 | | from ai_trading.logging.normalize import (  # AI-AGENT-REF: central canonicalizers
24 | |     canon_feed as _canon_feed,
25 | | )
26 | | from ai_trading.logging.normalize import (
27 | |     canon_timeframe as _canon_tf,
28 | | )
29 | | from ai_trading.utils.time import now_utc
30 | |
31 | | from .timeutils import ensure_utc_datetime, expected_regular_minutes
   | |____________________________________________________________________^
32 |
33 |   _log = get_logger(__name__)
   |
help: Organize imports

E501 Line too long (110 > 100)
  --> ai_trading/data/bars.py:37:101
   |
35 | """AI-AGENT-REF: canonicalizers moved to ai_trading.logging.normalize"""
36 | # AI-AGENT-REF: canonical fallback payload builder
37 | def _format_fallback_payload(tf_str: str, feed_str: str, start_utc: datetime, end_utc: datetime) -> list[str]:
   |                                                                                                     ^^^^^^^^^^
38 |     s = start_utc.astimezone(UTC).isoformat()
39 |     e = end_utc.astimezone(UTC).isoformat()
   |

E501 Line too long (101 > 100)
  --> ai_trading/data/bars.py:44:101
   |
43 | # AI-AGENT-REF: debug helper mapping ET window to UTC
44 | def _log_fallback_window_debug(logger, day_et: date, start_utc: datetime, end_utc: datetime) -> None:
   |                                                                                                     ^
45 |     try:
46 |         logger.debug(
   |

E501 Line too long (109 > 100)
  --> ai_trading/data/bars.py:51:101
   |
49 |                 "et_day": day_et.isoformat(),
50 |                 "rth_et": "09:30-16:00",
51 |                 "rth_utc": f"{start_utc.astimezone(UTC).isoformat()}..{end_utc.astimezone(UTC).isoformat()}",
   |                                                                                                     ^^^^^^^^^
52 |             },
53 |         )
   |

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/data/bars.py:54:24
   |
52 |             },
53 |         )
54 |     except Exception:  # noqa: BLE001
   |                        ^^^^^^^^^^^^^^
55 |         pass
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/data/bars.py:60:40
   |
58 | try:
59 |     from alpaca.data.requests import StockBarsRequest  # type: ignore
60 | except Exception:  # pragma: no cover  # noqa: BLE001
   |                                        ^^^^^^^^^^^^^^
61 |
62 |     class StockBarsRequest:  # type: ignore
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/data/bars.py:68:40
   |
66 | try:
67 |     from alpaca.data.timeframe import TimeFrame, TimeFrameUnit  # type: ignore
68 | except Exception:  # pragma: no cover  # noqa: BLE001
   |                                        ^^^^^^^^^^^^^^
69 |
70 |     class TimeFrame:  # type: ignore
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/data/bars.py:105:24
    |
103 |             return df if isinstance(df, pd.DataFrame) else pd.DataFrame()
104 |         return pd.DataFrame(obj) if obj is not None else pd.DataFrame()
105 |     except Exception:  # noqa: BLE001
    |                        ^^^^^^^^^^^^^^
106 |         return pd.DataFrame()
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/data/bars.py:121:24
    |
119 |     try:
120 |         return str(tf).lower() in ("1min", "1m", "minute", "1 minute")
121 |     except Exception:  # noqa: BLE001
    |                        ^^^^^^^^^^^^^^
122 |         return False  # AI-AGENT-REF: broad but safe
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/data/bars.py:150:33
    |
148 |         try:
149 |             response = client.get_stock_bars(request)
150 |         except Exception as e:  # noqa: BLE001
    |                                 ^^^^^^^^^^^^^^
151 |             status = getattr(e, "status_code", None)
152 |             if status in (401, 403):
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/data/bars.py:195:45
    |
193 |                             if last.date() == start_dt.date():
194 |                                 df = df2.loc[[last]]
195 |                     except Exception as e:  # noqa: BLE001
    |                                             ^^^^^^^^^^^^^^
196 |                         status = getattr(e, "status_code", None)
197 |                         if status in (401, 403):
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/data/bars.py:278:29
    |
276 |     try:
277 |         return get_bars_fn(symbol, timeframe="1Day", start=start, end=end, **kwargs)
278 |     except Exception as e:  # noqa: BLE001
    |                             ^^^^^^^^^^^^^^
279 |         _log.exception("ALPACA_DAILY_FAILED", extra={"symbol": symbol, "error": str(e)})
280 |         raise
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/data/bars.py:286:24
    |
284 |     try:
285 |         df = get_bars(symbol=symbol, timeframe="1Min", start=start_dt, end=end_dt, feed=feed)
286 |     except Exception:  # noqa: BLE001
    |                        ^^^^^^^^^^^^^^
287 |         df = None
288 |     if df is None or not hasattr(df, "empty") or getattr(df, "empty", True):
    |
help: Remove unused `noqa` directive

E741 Ambiguous variable name: `l`
   --> ai_trading/data/bars.py:303:9
    |
301 |         o = mkt["open"].resample("1D").first()
302 |         h = mkt["high"].resample("1D").max()
303 |         l = mkt["low"].resample("1D").min()
    |         ^
304 |         c = mkt["close"].resample("1D").last()
305 |         v = mkt.get("volume")
    |

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/data/bars.py:312:29
    |
310 |         out = out.dropna(how="all").tz_convert("UTC")
311 |         return out
312 |     except Exception as e:  # noqa: BLE001
    |                             ^^^^^^^^^^^^^^
313 |         _log.warning("RESAMPLE_DAILY_FAILED", extra={"error": str(e)})
314 |         return df
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/data/bars.py:349:29
    |
347 |                 )
348 |                 return rdf
349 |     except Exception as e:  # noqa: BLE001
    |                             ^^^^^^^^^^^^^^
350 |         _log.warning(
351 |             "DAILY_MINUTE_RESAMPLE_FAILED", extra={"symbol": symbol, "error": str(e)}
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/data/bars.py:407:28
    |
405 |         try:
406 |             return _ensure_df(pd.DataFrame(bars))
407 |         except Exception:  # noqa: BLE001
    |                            ^^^^^^^^^^^^^^
408 |             return empty_bars_dataframe()
409 |     if isinstance(payload, pd.DataFrame):
    |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/data/corp_actions.py:8:1
   |
 6 |   """
 7 |
 8 | / import logging
 9 | | import json
10 | | from datetime import date
11 | | from typing import Dict, List, Optional, Tuple, Union
12 | | from dataclasses import dataclass, asdict
13 | | from pathlib import Path
14 | | import pandas as pd
   | |___________________^
15 |
16 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> ai_trading/data/corp_actions.py:30:1
   |
28 |     description: str = ""
29 |     source: str = ""  # Data source
30 |     
   | ^^^^
31 |     @property
32 |     def price_adjustment_factor(self) -> float:
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/corp_actions.py:35:1
   |
33 |         """
34 |         Calculate price adjustment factor for historical data.
35 |         
   | ^^^^^^^^
36 |         Returns:
37 |             Factor to multiply historical prices by
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/corp_actions.py:50:1
   |
48 |         else:
49 |             return 1.0
50 |     
   | ^^^^
51 |     @property
52 |     def volume_adjustment_factor(self) -> float:
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/corp_actions.py:55:1
   |
53 |         """
54 |         Calculate volume adjustment factor for historical data.
55 |         
   | ^^^^^^^^
56 |         Returns:
57 |             Factor to multiply historical volumes by
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/corp_actions.py:69:1
   |
67 |     Registry for corporate actions with loading and adjustment capabilities.
68 |     """
69 |     
   | ^^^^
70 |     def __init__(self, data_path: str = "artifacts/corp_actions"):
71 |         """
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/corp_actions.py:73:1
   |
71 |         """
72 |         Initialize corporate action registry.
73 |         
   | ^^^^^^^^
74 |         Args:
75 |             data_path: Path to store corporate action data
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/corp_actions.py:79:1
   |
77 |         self.data_path = Path(data_path)
78 |         self.data_path.mkdir(parents=True, exist_ok=True)
79 |         
   | ^^^^^^^^
80 |         self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/corp_actions.py:81:1
   |
80 |         self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
81 |         
   | ^^^^^^^^
82 |         # Registry of actions by symbol
83 |         self._actions: Dict[str, List[CorporateAction]] = {}
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/corp_actions.py:84:1
   |
82 |         # Registry of actions by symbol
83 |         self._actions: Dict[str, List[CorporateAction]] = {}
84 |         
   | ^^^^^^^^
85 |         # Load existing action data
86 |         self._load_actions()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/corp_actions.py:87:1
   |
85 |         # Load existing action data
86 |         self._load_actions()
87 |     
   | ^^^^
88 |     def _load_actions(self) -> None:
89 |         """Load corporate actions from disk."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/corp_actions.py:91:1
   |
89 |         """Load corporate actions from disk."""
90 |         actions_file = self.data_path / "corp_actions.json"
91 |         
   | ^^^^^^^^
92 |         if actions_file.exists():
93 |             try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/corp_actions.py:96:1
   |
94 |                 with open(actions_file, 'r') as f:
95 |                     data = json.load(f)
96 |                 
   | ^^^^^^^^^^^^^^^^
97 |                 for symbol, action_list in data.items():
98 |                     self._actions[symbol] = []
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:103:1
    |
101 |                         if isinstance(action_data['ex_date'], str):
102 |                             action_data['ex_date'] = date.fromisoformat(action_data['ex_date'])
103 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
104 |                         self._actions[symbol].append(CorporateAction(**action_data))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:105:1
    |
104 |                         self._actions[symbol].append(CorporateAction(**action_data))
105 |                 
    | ^^^^^^^^^^^^^^^^
106 |                 self.logger.info(f"Loaded {len(self._actions)} symbols with corporate actions")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:107:1
    |
106 |                 self.logger.info(f"Loaded {len(self._actions)} symbols with corporate actions")
107 |                 
    | ^^^^^^^^^^^^^^^^
108 |             except Exception as e:
109 |                 self.logger.error(f"Error loading corporate actions: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:111:1
    |
109 |                 self.logger.error(f"Error loading corporate actions: {e}")
110 |                 self._actions = {}
111 |     
    | ^^^^
112 |     def _save_actions(self) -> None:
113 |         """Save corporate actions to disk."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:115:1
    |
113 |         """Save corporate actions to disk."""
114 |         actions_file = self.data_path / "corp_actions.json"
115 |         
    | ^^^^^^^^
116 |         try:
117 |             # Convert to serializable format
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:126:1
    |
124 |                     action_dict['ex_date'] = action.ex_date.isoformat()
125 |                     data[symbol].append(action_dict)
126 |             
    | ^^^^^^^^^^^^
127 |             with open(actions_file, 'w') as f:
128 |                 json.dump(data, f, indent=2, default=str)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:129:1
    |
127 |             with open(actions_file, 'w') as f:
128 |                 json.dump(data, f, indent=2, default=str)
129 |                 
    | ^^^^^^^^^^^^^^^^
130 |             self.logger.debug(f"Saved corporate actions to {actions_file}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:131:1
    |
130 |             self.logger.debug(f"Saved corporate actions to {actions_file}")
131 |             
    | ^^^^^^^^^^^^
132 |         except Exception as e:
133 |             self.logger.error(f"Error saving corporate actions: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:134:1
    |
132 |         except Exception as e:
133 |             self.logger.error(f"Error saving corporate actions: {e}")
134 |     
    | ^^^^
135 |     def add_action(
136 |         self,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:147:1
    |
145 |         """
146 |         Add corporate action to registry.
147 |         
    | ^^^^^^^^
148 |         Args:
149 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:158:1
    |
156 |         """
157 |         symbol = symbol.upper()
158 |         
    | ^^^^^^^^
159 |         if isinstance(ex_date, str):
160 |             ex_date = date.fromisoformat(ex_date)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:161:1
    |
159 |         if isinstance(ex_date, str):
160 |             ex_date = date.fromisoformat(ex_date)
161 |         
    | ^^^^^^^^
162 |         action = CorporateAction(
163 |             symbol=symbol,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:171:1
    |
169 |             source=source
170 |         )
171 |         
    | ^^^^^^^^
172 |         if symbol not in self._actions:
173 |             self._actions[symbol] = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:174:1
    |
172 |         if symbol not in self._actions:
173 |             self._actions[symbol] = []
174 |         
    | ^^^^^^^^
175 |         # Insert in chronological order
176 |         self._actions[symbol].append(action)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:178:1
    |
176 |         self._actions[symbol].append(action)
177 |         self._actions[symbol].sort(key=lambda x: x.ex_date)
178 |         
    | ^^^^^^^^
179 |         self.logger.info(f"Added {action_type} action for {symbol} on {ex_date}: {description}")
180 |         self._save_actions()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:181:1
    |
179 |         self.logger.info(f"Added {action_type} action for {symbol} on {ex_date}: {description}")
180 |         self._save_actions()
181 |     
    | ^^^^
182 |     def get_actions(
183 |         self,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:190:1
    |
188 |         """
189 |         Get corporate actions for symbol within date range.
190 |         
    | ^^^^^^^^
191 |         Args:
192 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:195:1
    |
193 |             start_date: Start date (inclusive)
194 |             end_date: End date (inclusive)
195 |             
    | ^^^^^^^^^^^^
196 |         Returns:
197 |             List of CorporateAction objects
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:200:1
    |
198 |         """
199 |         symbol = symbol.upper()
200 |         
    | ^^^^^^^^
201 |         if symbol not in self._actions:
202 |             return []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:203:1
    |
201 |         if symbol not in self._actions:
202 |             return []
203 |         
    | ^^^^^^^^
204 |         actions = self._actions[symbol]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:205:1
    |
204 |         actions = self._actions[symbol]
205 |         
    | ^^^^^^^^
206 |         if start_date is not None:
207 |             actions = [a for a in actions if a.ex_date >= start_date]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:208:1
    |
206 |         if start_date is not None:
207 |             actions = [a for a in actions if a.ex_date >= start_date]
208 |         
    | ^^^^^^^^
209 |         if end_date is not None:
210 |             actions = [a for a in actions if a.ex_date <= end_date]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:211:1
    |
209 |         if end_date is not None:
210 |             actions = [a for a in actions if a.ex_date <= end_date]
211 |         
    | ^^^^^^^^
212 |         return actions
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:213:1
    |
212 |         return actions
213 |     
    | ^^^^
214 |     def get_adjustment_factors(
215 |         self,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:222:1
    |
220 |         """
221 |         Get cumulative adjustment factors between two dates.
222 |         
    | ^^^^^^^^
223 |         Args:
224 |             symbol: Trading symbol  
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> ai_trading/data/corp_actions.py:224:35
    |
223 |         Args:
224 |             symbol: Trading symbol  
    |                                   ^^
225 |             reference_date: Reference date (usually more recent)
226 |             target_date: Target date to adjust to
    |
help: Remove trailing whitespace

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:227:1
    |
225 |             reference_date: Reference date (usually more recent)
226 |             target_date: Target date to adjust to
227 |             
    | ^^^^^^^^^^^^
228 |         Returns:
229 |             Tuple of (price_factor, volume_factor)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:233:1
    |
231 |         if reference_date == target_date:
232 |             return 1.0, 1.0
233 |         
    | ^^^^^^^^
234 |         # Get actions between the dates
235 |         start_date = min(reference_date, target_date)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:237:1
    |
235 |         start_date = min(reference_date, target_date)
236 |         end_date = max(reference_date, target_date)
237 |         
    | ^^^^^^^^
238 |         actions = self.get_actions(symbol, start_date, end_date)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:239:1
    |
238 |         actions = self.get_actions(symbol, start_date, end_date)
239 |         
    | ^^^^^^^^
240 |         # Filter to actions that occurred between dates (exclusive of end points)
241 |         if reference_date > target_date:
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> ai_trading/data/corp_actions.py:245:90
    |
243 |             relevant_actions = [a for a in actions if target_date < a.ex_date <= reference_date]
244 |         else:
245 |             # Adjusting forwards - include actions after reference_date up to target_date  
    |                                                                                          ^^
246 |             relevant_actions = [a for a in actions if reference_date < a.ex_date <= target_date]
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:247:1
    |
245 |             # Adjusting forwards - include actions after reference_date up to target_date  
246 |             relevant_actions = [a for a in actions if reference_date < a.ex_date <= target_date]
247 |         
    | ^^^^^^^^
248 |         price_factor = 1.0
249 |         volume_factor = 1.0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:250:1
    |
248 |         price_factor = 1.0
249 |         volume_factor = 1.0
250 |         
    | ^^^^^^^^
251 |         for action in relevant_actions:
252 |             price_factor *= action.price_adjustment_factor
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:254:1
    |
252 |             price_factor *= action.price_adjustment_factor
253 |             volume_factor *= action.volume_adjustment_factor
254 |         
    | ^^^^^^^^
255 |         # If adjusting backwards, invert the factors
256 |         if reference_date > target_date:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:259:1
    |
257 |             price_factor = 1.0 / price_factor if price_factor != 0 else 1.0
258 |             volume_factor = 1.0 / volume_factor if volume_factor != 0 else 1.0
259 |         
    | ^^^^^^^^
260 |         return price_factor, volume_factor
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:282:1
    |
280 |     """
281 |     Adjust OHLCV bars for corporate actions.
282 |     
    | ^^^^
283 |     Args:
284 |         bars: DataFrame with OHLCV data and datetime index
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:287:1
    |
285 |         symbol: Trading symbol
286 |         reference_date: Reference date for adjustments (defaults to most recent)
287 |         
    | ^^^^^^^^
288 |     Returns:
289 |         DataFrame with adjusted OHLCV data
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:293:1
    |
291 |     if bars.empty:
292 |         return bars
293 |     
    | ^^^^
294 |     registry = get_corp_action_registry()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:295:1
    |
294 |     registry = get_corp_action_registry()
295 |     
    | ^^^^
296 |     # Use most recent date as reference if not specified
297 |     if reference_date is None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:302:1
    |
300 |         else:
301 |             reference_date = pd.to_datetime(bars.index).date.max()
302 |     
    | ^^^^
303 |     # Create copy to avoid modifying original
304 |     adjusted_bars = bars.copy()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:305:1
    |
303 |     # Create copy to avoid modifying original
304 |     adjusted_bars = bars.copy()
305 |     
    | ^^^^
306 |     # Get price columns (flexible column naming)
307 |     price_cols = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:309:1
    |
307 |     price_cols = []
308 |     volume_cols = []
309 |     
    | ^^^^
310 |     for col in bars.columns:
311 |         col_lower = col.lower()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:316:1
    |
314 |         elif any(v in col_lower for v in ['volume', 'vol']):
315 |             volume_cols.append(col)
316 |     
    | ^^^^
317 |     # Apply adjustments row by row
318 |     for idx, row in bars.iterrows():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:323:1
    |
321 |         else:
322 |             bar_date = pd.to_datetime(idx).date()
323 |         
    | ^^^^^^^^
324 |         # Get adjustment factors for this bar
325 |         price_factor, volume_factor = registry.get_adjustment_factors(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:328:1
    |
326 |             symbol, reference_date, bar_date
327 |         )
328 |         
    | ^^^^^^^^
329 |         # Apply price adjustments
330 |         for col in price_cols:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:333:1
    |
331 |             if not pd.isna(adjusted_bars.loc[idx, col]):
332 |                 adjusted_bars.loc[idx, col] *= price_factor
333 |         
    | ^^^^^^^^
334 |         # Apply volume adjustments
335 |         for col in volume_cols:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:338:1
    |
336 |             if not pd.isna(adjusted_bars.loc[idx, col]):
337 |                 adjusted_bars.loc[idx, col] *= volume_factor
338 |     
    | ^^^^
339 |     return adjusted_bars
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:345:1
    |
343 |     """
344 |     Apply adjustment factor to a price.
345 |     
    | ^^^^
346 |     Args:
347 |         price: Original price
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:349:1
    |
347 |         price: Original price
348 |         factor: Adjustment factor
349 |         
    | ^^^^^^^^
350 |     Returns:
351 |         Adjusted price
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:360:1
    |
358 |     """Add some well-known historical stock splits for testing."""
359 |     registry = get_corp_action_registry()
360 |     
    | ^^^^
361 |     # Tesla 3:1 split in August 2022
362 |     registry.add_action(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:370:1
    |
368 |         source="manual"
369 |     )
370 |     
    | ^^^^
371 |     # Apple 4:1 split in August 2020
372 |     registry.add_action(
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> ai_trading/data/corp_actions.py:373:23
    |
371 |     # Apple 4:1 split in August 2020
372 |     registry.add_action(
373 |         symbol="AAPL", 
    |                       ^
374 |         ex_date="2020-08-31",
375 |         action_type="split",
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> ai_trading/data/corp_actions.py:380:1
    |
378 |         source="manual"
379 |     )
380 |     
    | ^^^^
381 |     # NVIDIA 4:1 split in July 2021
382 |     registry.add_action(
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> ai_trading/data/corp_actions.py:384:30
    |
382 |     registry.add_action(
383 |         symbol="NVDA",
384 |         ex_date="2021-07-20", 
    |                              ^
385 |         action_type="split",
386 |         ratio=4.0,
    |
help: Remove trailing whitespace

W292 [*] No newline at end of file
   --> ai_trading/data/corp_actions.py:389:6
    |
387 |         description="4-for-1 stock split",
388 |         source="manual"
389 |     )
    |      ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/data/labels.py:8:1
   |
 6 |   """
 7 |
 8 | / import numpy as np
 9 | | import pandas as pd
10 | | from typing import Union, Optional
11 | |
12 | | # Use the centralized logger as per AGENTS.md
13 | | from ai_trading.logging import logger
   | |_____________________________________^
   |
help: Organize imports

W293 Blank line contains whitespace
  --> ai_trading/data/labels.py:23:1
   |
21 |     """
22 |     Calculate fixed horizon future returns net of fees.
23 |     
   | ^^^^
24 |     Args:
25 |         prices: Price series or DataFrame with price column
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/labels.py:28:1
   |
26 |         horizon_bars: Number of bars to look ahead
27 |         fee_bps: Transaction fee in basis points (e.g., 5.0 for 5 bps)
28 |         
   | ^^^^^^^^
29 |     Returns:
30 |         Series of future log returns net of fees
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/labels.py:41:1
   |
39 |             else:
40 |                 prices = prices.iloc[:, 0]  # Use first column
41 |         
   | ^^^^^^^^
42 |         # Calculate future prices
43 |         future_prices = prices.shift(-horizon_bars)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/labels.py:44:1
   |
42 |         # Calculate future prices
43 |         future_prices = prices.shift(-horizon_bars)
44 |         
   | ^^^^^^^^
45 |         # Calculate log returns
46 |         log_returns = np.log(future_prices / prices)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/labels.py:47:1
   |
45 |         # Calculate log returns
46 |         log_returns = np.log(future_prices / prices)
47 |         
   | ^^^^^^^^
48 |         # Subtract transaction fees (convert bps to decimal)
49 |         fee_rate = fee_bps / 10000.0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/labels.py:51:1
   |
49 |         fee_rate = fee_bps / 10000.0
50 |         net_returns = log_returns - (2 * fee_rate)  # Round-trip cost
51 |         
   | ^^^^^^^^
52 |         # Set name for the series
53 |         net_returns.name = f'future_return_h{horizon_bars}_fee{fee_bps}bps'
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/labels.py:54:1
   |
52 |         # Set name for the series
53 |         net_returns.name = f'future_return_h{horizon_bars}_fee{fee_bps}bps'
54 |         
   | ^^^^^^^^
55 |         logger.debug(f"Generated {len(net_returns.dropna())} labels for horizon {horizon_bars}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/labels.py:56:1
   |
55 |         logger.debug(f"Generated {len(net_returns.dropna())} labels for horizon {horizon_bars}")
56 |         
   | ^^^^^^^^
57 |         return net_returns
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/labels.py:58:1
   |
57 |         return net_returns
58 |         
   | ^^^^^^^^
59 |     except Exception as e:
60 |         logger.error(f"Error calculating fixed horizon returns: {e}")
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/labels.py:75:1
   |
73 |     """
74 |     Triple barrier labeling method.
75 |     
   | ^^^^
76 |     This is a stub implementation with proper API structure.
77 |     Full implementation would require advanced barrier calibration.
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/labels.py:78:1
   |
76 |     This is a stub implementation with proper API structure.
77 |     Full implementation would require advanced barrier calibration.
78 |     
   | ^^^^
79 |     Args:
80 |         prices: Price series or DataFrame
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/labels.py:87:1
   |
85 |         num_threads: Number of threads for parallel processing
86 |         vertical_barrier_times: Optional vertical barrier timestamps
87 |         
   | ^^^^^^^^
88 |     Returns:
89 |         DataFrame with labels: t1 (end time), ret (return), bin (label)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:100:1
    |
 98 |             else:
 99 |                 prices = prices.iloc[:, 0]
100 |         
    | ^^^^^^^^
101 |         # Create events if not provided
102 |         if events is None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:104:1
    |
102 |         if events is None:
103 |             events = pd.DataFrame(index=prices.index)
104 |         
    | ^^^^^^^^
105 |         # Set default profit-taking and stop-loss
106 |         if pt_sl is None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:108:1
    |
106 |         if pt_sl is None:
107 |             pt_sl = (0.02, -0.02)  # 2% profit taking, 2% stop loss
108 |         
    | ^^^^^^^^
109 |         # Create vertical barriers if not provided
110 |         if t1 is None and vertical_barrier_times is None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:123:1
    |
121 |         elif vertical_barrier_times is not None:
122 |             t1 = vertical_barrier_times
123 |         
    | ^^^^^^^^
124 |         # TODO: Implement full triple barrier logic
125 |         # For now, create a simplified version
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:127:1
    |
125 |         # For now, create a simplified version
126 |         labels = []
127 |         
    | ^^^^^^^^
128 |         for event_time in events.index:
129 |             if event_time not in prices.index:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:131:1
    |
129 |             if event_time not in prices.index:
130 |                 continue
131 |                 
    | ^^^^^^^^^^^^^^^^
132 |             start_price = prices.loc[event_time]
133 |             end_time = t1.loc[event_time] if event_time in t1.index else event_time
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:134:1
    |
132 |             start_price = prices.loc[event_time]
133 |             end_time = t1.loc[event_time] if event_time in t1.index else event_time
134 |             
    | ^^^^^^^^^^^^
135 |             # Find prices between event and barrier
136 |             price_slice = prices.loc[event_time:end_time]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:137:1
    |
135 |             # Find prices between event and barrier
136 |             price_slice = prices.loc[event_time:end_time]
137 |             
    | ^^^^^^^^^^^^
138 |             if len(price_slice) <= 1:
139 |                 continue
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:140:1
    |
138 |             if len(price_slice) <= 1:
139 |                 continue
140 |             
    | ^^^^^^^^^^^^
141 |             # Calculate returns from start
142 |             returns = (price_slice / start_price) - 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:143:1
    |
141 |             # Calculate returns from start
142 |             returns = (price_slice / start_price) - 1
143 |             
    | ^^^^^^^^^^^^
144 |             # Check barriers
145 |             profit_hit = returns >= pt_sl[0]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:147:1
    |
145 |             profit_hit = returns >= pt_sl[0]
146 |             loss_hit = returns <= pt_sl[1]
147 |             
    | ^^^^^^^^^^^^
148 |             # Determine first barrier hit
149 |             if profit_hit.any():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:153:1
    |
151 |             else:
152 |                 first_profit = None
153 |                 
    | ^^^^^^^^^^^^^^^^
154 |             if loss_hit.any():
155 |                 first_loss = loss_hit.idxmax() if loss_hit.any() else None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:158:1
    |
156 |             else:
157 |                 first_loss = None
158 |             
    | ^^^^^^^^^^^^
159 |             # Determine label
160 |             if first_profit and first_loss:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:183:1
    |
181 |                 label_t1 = end_time
182 |                 label_ret = returns.iloc[-1]
183 |             
    | ^^^^^^^^^^^^
184 |             # Only include if return meets minimum threshold
185 |             if abs(label_ret) >= min_ret:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:191:1
    |
189 |                     'bin': label_bin
190 |                 })
191 |         
    | ^^^^^^^^
192 |         # Convert to DataFrame
193 |         result_df = pd.DataFrame(labels, index=events.index[:len(labels)])
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:194:1
    |
192 |         # Convert to DataFrame
193 |         result_df = pd.DataFrame(labels, index=events.index[:len(labels)])
194 |         
    | ^^^^^^^^
195 |         logger.info(f"Generated triple barrier labels: {len(result_df)} events, "
196 |                    f"{(result_df['bin'] == 1).sum()} profits, "
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:199:1
    |
197 |                    f"{(result_df['bin'] == -1).sum()} losses, "
198 |                    f"{(result_df['bin'] == 0).sum()} timeouts")
199 |         
    | ^^^^^^^^
200 |         return result_df
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:201:1
    |
200 |         return result_df
201 |         
    | ^^^^^^^^
202 |     except Exception as e:
203 |         logger.error(f"Error in triple barrier labeling: {e}")
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/labels.py:210:1
    |
208 |     """
209 |     Calculate daily volatility for barrier calibration.
210 |     
    | ^^^^
211 |     Args:
212 |         prices: Price series
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/labels.py:214:1
    |
212 |         prices: Price series
213 |         span0: Span for EWMA calculation
214 |         
    | ^^^^^^^^
215 |     Returns:
216 |         Daily volatility series
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:221:1
    |
219 |         # Calculate daily returns
220 |         daily_ret = prices.resample('1D').last().pct_change().dropna()
221 |         
    | ^^^^^^^^
222 |         # Calculate EWMA volatility
223 |         vol = daily_ret.ewm(span=span0).std()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:224:1
    |
222 |         # Calculate EWMA volatility
223 |         vol = daily_ret.ewm(span=span0).std()
224 |         
    | ^^^^^^^^
225 |         return vol
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/labels.py:226:1
    |
225 |         return vol
226 |         
    | ^^^^^^^^
227 |     except Exception as e:
228 |         logger.error(f"Error calculating daily volatility: {e}")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> ai_trading/data/labels.py:229:38
    |
227 |     except Exception as e:
228 |         logger.error(f"Error calculating daily volatility: {e}")
229 |         return pd.Series(dtype=float)
    |                                      ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/data/sanitize.py:8:1
   |
 6 |   """
 7 |
 8 | / import logging
 9 | | import numpy as np
10 | | import pandas as pd
11 | | from typing import Dict, List, Optional, Tuple, Union, Any
12 | | from dataclasses import dataclass
   | |_________________________________^
13 |
14 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> ai_trading/data/sanitize.py:24:1
   |
22 |     zscore_threshold: float = 4.0  # Z-score threshold for outlier detection
23 |     winsorize_limits: Tuple[float, float] = (0.01, 0.01)  # (lower, upper) percentiles
24 |     
   | ^^^^
25 |     # Volume filtering
26 |     min_volume_percentile: float = 5.0  # Minimum volume percentile
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/sanitize.py:28:1
   |
26 |     min_volume_percentile: float = 5.0  # Minimum volume percentile
27 |     min_absolute_volume: int = 1000  # Minimum absolute volume
28 |     
   | ^^^^
29 |     # Stale data detection
30 |     max_gap_hours: float = 24.0  # Maximum gap in hours before considering stale
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/sanitize.py:32:1
   |
30 |     max_gap_hours: float = 24.0  # Maximum gap in hours before considering stale
31 |     max_price_staleness: int = 5  # Maximum consecutive bars with same price
32 |     
   | ^^^^
33 |     # Price validation
34 |     min_price: float = 0.01  # Minimum valid price
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/sanitize.py:36:1
   |
34 |     min_price: float = 0.01  # Minimum valid price
35 |     max_price_change: float = 0.5  # Maximum single-bar price change (50%)
36 |     
   | ^^^^
37 |     # Enable/disable features
38 |     enable_outlier_detection: bool = True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/sanitize.py:42:1
   |
40 |     enable_stale_detection: bool = True
41 |     enable_price_validation: bool = True
42 |     
   | ^^^^
43 |     # Logging
44 |     log_rejections: bool = True
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/sanitize.py:50:1
   |
48 |     """
49 |     Data sanitization pipeline for market data quality control.
50 |     
   | ^^^^
51 |     Provides comprehensive data cleaning including outlier detection,
52 |     volume filtering, stale data detection, and price validation.
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/sanitize.py:54:1
   |
52 |     volume filtering, stale data detection, and price validation.
53 |     """
54 |     
   | ^^^^
55 |     def __init__(self, config: Optional[SanitizationConfig] = None):
56 |         """
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/sanitize.py:58:1
   |
56 |         """
57 |         Initialize data sanitizer.
58 |         
   | ^^^^^^^^
59 |         Args:
60 |             config: Sanitization configuration
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/sanitize.py:64:1
   |
62 |         self.config = config or SanitizationConfig()
63 |         self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
64 |         
   | ^^^^^^^^
65 |         # Rejection statistics
66 |         self._rejection_stats = {
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/sanitize.py:75:1
   |
73 |             'total_processed': 0
74 |         }
75 |     
   | ^^^^
76 |     def sanitize_bars(
77 |         self,
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/sanitize.py:83:1
   |
81 |         """
82 |         Sanitize OHLCV bar data.
83 |         
   | ^^^^^^^^
84 |         Args:
85 |             bars: DataFrame with OHLCV data
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/sanitize.py:87:1
   |
85 |             bars: DataFrame with OHLCV data
86 |             symbol: Symbol for logging
87 |             
   | ^^^^^^^^^^^^
88 |         Returns:
89 |             Tuple of (cleaned_bars, sanitization_report)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/sanitize.py:93:1
   |
91 |         if bars.empty:
92 |             return bars, {'status': 'empty', 'rejections': {}}
93 |         
   | ^^^^^^^^
94 |         original_count = len(bars)
95 |         self._rejection_stats['total_processed'] += original_count
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/sanitize.py:96:1
   |
94 |         original_count = len(bars)
95 |         self._rejection_stats['total_processed'] += original_count
96 |         
   | ^^^^^^^^
97 |         # Create copy to avoid modifying original
98 |         clean_bars = bars.copy()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:99:1
    |
 97 |         # Create copy to avoid modifying original
 98 |         clean_bars = bars.copy()
 99 |         
    | ^^^^^^^^
100 |         # Track rejections
101 |         rejection_mask = pd.Series(False, index=clean_bars.index)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:103:1
    |
101 |         rejection_mask = pd.Series(False, index=clean_bars.index)
102 |         rejection_reasons = pd.Series('', index=clean_bars.index)
103 |         
    | ^^^^^^^^
104 |         # Apply sanitization steps
105 |         if self.config.enable_price_validation:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:109:1
    |
107 |             rejection_mask |= price_mask
108 |             rejection_reasons = self._update_reasons(rejection_reasons, price_reasons)
109 |         
    | ^^^^^^^^
110 |         if self.config.enable_outlier_detection:
111 |             outlier_mask, outlier_reasons = self._detect_outliers(clean_bars)
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> ai_trading/data/sanitize.py:112:43
    |
110 |         if self.config.enable_outlier_detection:
111 |             outlier_mask, outlier_reasons = self._detect_outliers(clean_bars)
112 |             rejection_mask |= outlier_mask  
    |                                           ^^
113 |             rejection_reasons = self._update_reasons(rejection_reasons, outlier_reasons)
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:114:1
    |
112 |             rejection_mask |= outlier_mask  
113 |             rejection_reasons = self._update_reasons(rejection_reasons, outlier_reasons)
114 |         
    | ^^^^^^^^
115 |         if self.config.enable_volume_filtering:
116 |             volume_mask, volume_reasons = self._filter_low_volume(clean_bars)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:119:1
    |
117 |             rejection_mask |= volume_mask
118 |             rejection_reasons = self._update_reasons(rejection_reasons, volume_reasons)
119 |         
    | ^^^^^^^^
120 |         if self.config.enable_stale_detection:
121 |             stale_mask, stale_reasons = self._detect_stale_data(clean_bars)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:124:1
    |
122 |             rejection_mask |= stale_mask
123 |             rejection_reasons = self._update_reasons(rejection_reasons, stale_reasons)
124 |         
    | ^^^^^^^^
125 |         # Remove rejected bars
126 |         rejected_bars = clean_bars[rejection_mask]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:128:1
    |
126 |         rejected_bars = clean_bars[rejection_mask]
127 |         clean_bars = clean_bars[~rejection_mask]
128 |         
    | ^^^^^^^^
129 |         # Log rejections if enabled
130 |         if self.config.log_rejections and len(rejected_bars) > 0:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:132:1
    |
130 |         if self.config.log_rejections and len(rejected_bars) > 0:
131 |             self._log_rejections(symbol, rejected_bars, rejection_reasons[rejection_mask])
132 |         
    | ^^^^^^^^
133 |         # Create sanitization report
134 |         report = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:143:1
    |
141 |             'time_range': self._get_time_range(bars) if not bars.empty else None
142 |         }
143 |         
    | ^^^^^^^^
144 |         return clean_bars, report
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:145:1
    |
144 |         return clean_bars, report
145 |     
    | ^^^^
146 |     def _validate_prices(self, bars: pd.DataFrame) -> Tuple[pd.Series, pd.Series]:
147 |         """Validate price data for basic sanity checks."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:150:1
    |
148 |         rejection_mask = pd.Series(False, index=bars.index)
149 |         rejection_reasons = pd.Series('', index=bars.index)
150 |         
    | ^^^^^^^^
151 |         # Get price columns
152 |         price_cols = self._get_price_columns(bars)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:153:1
    |
151 |         # Get price columns
152 |         price_cols = self._get_price_columns(bars)
153 |         
    | ^^^^^^^^
154 |         for col in price_cols:
155 |             if col not in bars.columns:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:157:1
    |
155 |             if col not in bars.columns:
156 |                 continue
157 |             
    | ^^^^^^^^^^^^
158 |             prices = bars[col]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:159:1
    |
158 |             prices = bars[col]
159 |             
    | ^^^^^^^^^^^^
160 |             # Check minimum price
161 |             min_price_mask = prices < self.config.min_price
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:165:1
    |
163 |             rejection_reasons.loc[min_price_mask] = f'price_too_low_{col}'
164 |             self._rejection_stats['invalid_prices'] += min_price_mask.sum()
165 |             
    | ^^^^^^^^^^^^
166 |             # Check for NaN/infinite prices
167 |             invalid_mask = ~np.isfinite(prices)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:171:1
    |
169 |             rejection_reasons.loc[invalid_mask] = f'invalid_price_{col}'
170 |             self._rejection_stats['invalid_prices'] += invalid_mask.sum()
171 |         
    | ^^^^^^^^
172 |         # Check for excessive price moves
173 |         if 'close' in bars.columns:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:180:1
    |
178 |             rejection_reasons.loc[excessive_move_mask] = 'excessive_price_move'
179 |             self._rejection_stats['excessive_moves'] += excessive_move_mask.sum()
180 |         
    | ^^^^^^^^
181 |         return rejection_mask, rejection_reasons
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:182:1
    |
181 |         return rejection_mask, rejection_reasons
182 |     
    | ^^^^
183 |     def _detect_outliers(self, bars: pd.DataFrame) -> Tuple[pd.Series, pd.Series]:
184 |         """Detect outliers using MAD and Z-score methods."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:187:1
    |
185 |         rejection_mask = pd.Series(False, index=bars.index)
186 |         rejection_reasons = pd.Series('', index=bars.index)
187 |         
    | ^^^^^^^^
188 |         price_cols = self._get_price_columns(bars)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:189:1
    |
188 |         price_cols = self._get_price_columns(bars)
189 |         
    | ^^^^^^^^
190 |         for col in price_cols:
191 |             if col not in bars.columns:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:193:1
    |
191 |             if col not in bars.columns:
192 |                 continue
193 |             
    | ^^^^^^^^^^^^
194 |             prices = bars[col].dropna()
195 |             if len(prices) < 10:  # Need minimum data for outlier detection
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:197:1
    |
195 |             if len(prices) < 10:  # Need minimum data for outlier detection
196 |                 continue
197 |             
    | ^^^^^^^^^^^^
198 |             # MAD-based outlier detection
199 |             median_price = prices.median()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:201:1
    |
199 |             median_price = prices.median()
200 |             mad = np.median(np.abs(prices - median_price))
201 |             
    | ^^^^^^^^^^^^
202 |             if mad > 0:  # Avoid division by zero
203 |                 mad_scores = np.abs(prices - median_price) / mad
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:205:1
    |
203 |                 mad_scores = np.abs(prices - median_price) / mad
204 |                 mad_outliers = mad_scores > self.config.mad_threshold
205 |                 
    | ^^^^^^^^^^^^^^^^
206 |                 outlier_mask = mad_outliers.reindex(bars.index, fill_value=False)
207 |                 rejection_mask |= outlier_mask
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:210:1
    |
208 |                 rejection_reasons.loc[outlier_mask] = f'mad_outlier_{col}'
209 |                 self._rejection_stats['outliers'] += outlier_mask.sum()
210 |             
    | ^^^^^^^^^^^^
211 |             # Z-score based outlier detection
212 |             if len(prices) > 2:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:215:1
    |
213 |                 z_scores = np.abs((prices - prices.mean()) / prices.std())
214 |                 z_outliers = z_scores > self.config.zscore_threshold
215 |                 
    | ^^^^^^^^^^^^^^^^
216 |                 outlier_mask = z_outliers.reindex(bars.index, fill_value=False)
217 |                 rejection_mask |= outlier_mask
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:220:1
    |
218 |                 rejection_reasons.loc[outlier_mask] = f'zscore_outlier_{col}'
219 |                 self._rejection_stats['outliers'] += outlier_mask.sum()
220 |         
    | ^^^^^^^^
221 |         return rejection_mask, rejection_reasons
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:222:1
    |
221 |         return rejection_mask, rejection_reasons
222 |     
    | ^^^^
223 |     def _filter_low_volume(self, bars: pd.DataFrame) -> Tuple[pd.Series, pd.Series]:
224 |         """Filter bars with low volume."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:227:1
    |
225 |         rejection_mask = pd.Series(False, index=bars.index)
226 |         rejection_reasons = pd.Series('', index=bars.index)
227 |         
    | ^^^^^^^^
228 |         volume_cols = self._get_volume_columns(bars)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:229:1
    |
228 |         volume_cols = self._get_volume_columns(bars)
229 |         
    | ^^^^^^^^
230 |         for col in volume_cols:
231 |             if col not in bars.columns:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:233:1
    |
231 |             if col not in bars.columns:
232 |                 continue
233 |             
    | ^^^^^^^^^^^^
234 |             volumes = bars[col].dropna()
235 |             if len(volumes) == 0:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:237:1
    |
235 |             if len(volumes) == 0:
236 |                 continue
237 |             
    | ^^^^^^^^^^^^
238 |             # Absolute minimum volume
239 |             low_absolute_mask = volumes < self.config.min_absolute_volume
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:244:1
    |
242 |             rejection_reasons.loc[abs_mask] = f'low_absolute_volume_{col}'
243 |             self._rejection_stats['low_volume'] += abs_mask.sum()
244 |             
    | ^^^^^^^^^^^^
245 |             # Percentile-based volume filter
246 |             if len(volumes) >= 20:  # Need sufficient data for percentile
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:249:1
    |
247 |                 volume_threshold = np.percentile(volumes, self.config.min_volume_percentile)
248 |                 low_percentile_mask = volumes < volume_threshold
249 |                 
    | ^^^^^^^^^^^^^^^^
250 |                 perc_mask = low_percentile_mask.reindex(bars.index, fill_value=False)
251 |                 rejection_mask |= perc_mask
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:254:1
    |
252 |                 rejection_reasons.loc[perc_mask] = f'low_percentile_volume_{col}'
253 |                 self._rejection_stats['low_volume'] += perc_mask.sum()
254 |         
    | ^^^^^^^^
255 |         return rejection_mask, rejection_reasons
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:256:1
    |
255 |         return rejection_mask, rejection_reasons
256 |     
    | ^^^^
257 |     def _detect_stale_data(self, bars: pd.DataFrame) -> Tuple[pd.Series, pd.Series]:
258 |         """Detect stale or suspicious data patterns."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:261:1
    |
259 |         rejection_mask = pd.Series(False, index=bars.index)
260 |         rejection_reasons = pd.Series('', index=bars.index)
261 |         
    | ^^^^^^^^
262 |         # Time gap detection
263 |         if isinstance(bars.index, pd.DatetimeIndex):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:266:1
    |
264 |             time_diffs = bars.index.to_series().diff()
265 |             max_gap = pd.Timedelta(hours=self.config.max_gap_hours)
266 |             
    | ^^^^^^^^^^^^
267 |             gap_mask = time_diffs > max_gap
268 |             rejection_mask |= gap_mask
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:271:1
    |
269 |             rejection_reasons.loc[gap_mask] = 'time_gap'
270 |             self._rejection_stats['stale_gaps'] += gap_mask.sum()
271 |         
    | ^^^^^^^^
272 |         # Price staleness detection (consecutive bars with same price)
273 |         if 'close' in bars.columns:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:275:1
    |
273 |         if 'close' in bars.columns:
274 |             close_prices = bars['close']
275 |             
    | ^^^^^^^^^^^^
276 |             # Find runs of identical prices
277 |             price_changes = close_prices.diff() == 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:279:1
    |
277 |             price_changes = close_prices.diff() == 0
278 |             consecutive_counts = price_changes.groupby((~price_changes).cumsum()).cumsum()
279 |             
    | ^^^^^^^^^^^^
280 |             stale_price_mask = consecutive_counts >= self.config.max_price_staleness
281 |             rejection_mask |= stale_price_mask
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:284:1
    |
282 |             rejection_reasons.loc[stale_price_mask] = 'stale_prices'
283 |             self._rejection_stats['stale_prices'] += stale_price_mask.sum()
284 |         
    | ^^^^^^^^
285 |         return rejection_mask, rejection_reasons
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:286:1
    |
285 |         return rejection_mask, rejection_reasons
286 |     
    | ^^^^
287 |     def _get_price_columns(self, bars: pd.DataFrame) -> List[str]:
288 |         """Get price columns from DataFrame."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:291:1
    |
289 |         price_patterns = ['open', 'high', 'low', 'close', 'price', 'adj_close', 'vwap']
290 |         price_cols = []
291 |         
    | ^^^^^^^^
292 |         for col in bars.columns:
293 |             col_lower = col.lower()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:296:1
    |
294 |             if any(pattern in col_lower for pattern in price_patterns):
295 |                 price_cols.append(col)
296 |         
    | ^^^^^^^^
297 |         return price_cols
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:298:1
    |
297 |         return price_cols
298 |     
    | ^^^^
299 |     def _get_volume_columns(self, bars: pd.DataFrame) -> List[str]:
300 |         """Get volume columns from DataFrame."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:303:1
    |
301 |         volume_patterns = ['volume', 'vol', 'shares']
302 |         volume_cols = []
303 |         
    | ^^^^^^^^
304 |         for col in bars.columns:
305 |             col_lower = col.lower()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:308:1
    |
306 |             if any(pattern in col_lower for pattern in volume_patterns):
307 |                 volume_cols.append(col)
308 |         
    | ^^^^^^^^
309 |         return volume_cols
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:310:1
    |
309 |         return volume_cols
310 |     
    | ^^^^
311 |     def _update_reasons(self, existing: pd.Series, new: pd.Series) -> pd.Series:
312 |         """Update rejection reasons, combining multiple reasons."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:314:1
    |
312 |         """Update rejection reasons, combining multiple reasons."""
313 |         combined = existing.copy()
314 |         
    | ^^^^^^^^
315 |         for idx in new.index:
316 |             if new.loc[idx]:  # If there's a new reason
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:321:1
    |
319 |                 else:
320 |                     combined.loc[idx] = new.loc[idx]
321 |         
    | ^^^^^^^^
322 |         return combined
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:323:1
    |
322 |         return combined
323 |     
    | ^^^^
324 |     def _log_rejections(
325 |         self,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:333:1
    |
331 |         if len(rejected_bars) == 0:
332 |             return
333 |         
    | ^^^^^^^^
334 |         self.logger.warning(
335 |             f"Rejected {len(rejected_bars)} bars for {symbol}. "
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:338:1
    |
336 |             f"Reasons: {reasons.value_counts().to_dict()}"
337 |         )
338 |         
    | ^^^^^^^^
339 |         # Log first few rejected bars for debugging
340 |         if self.logger.isEnabledFor(logging.DEBUG):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:344:1
    |
342 |                 bar_data = rejected_bars.loc[idx].to_dict()
343 |                 self.logger.debug(f"Rejected bar {idx} for {symbol}: {reason} - {bar_data}")
344 |     
    | ^^^^
345 |     def _count_rejection_reasons(self, reasons: pd.Series) -> Dict[str, int]:
346 |         """Count rejection reasons for reporting."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:348:1
    |
346 |         """Count rejection reasons for reporting."""
347 |         reason_counts = {}
348 |         
    | ^^^^^^^^
349 |         for reason_str in reasons:
350 |             if not reason_str:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:352:1
    |
350 |             if not reason_str:
351 |                 continue
352 |             
    | ^^^^^^^^^^^^
353 |             # Handle multiple reasons separated by commas
354 |             individual_reasons = reason_str.split(',')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:359:1
    |
357 |                 if reason:
358 |                     reason_counts[reason] = reason_counts.get(reason, 0) + 1
359 |         
    | ^^^^^^^^
360 |         return reason_counts
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:361:1
    |
360 |         return reason_counts
361 |     
    | ^^^^
362 |     def _get_time_range(self, bars: pd.DataFrame) -> Optional[Dict[str, str]]:
363 |         """Get time range of bars for reporting."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:366:1
    |
364 |         if bars.empty or not isinstance(bars.index, pd.DatetimeIndex):
365 |             return None
366 |         
    | ^^^^^^^^
367 |         return {
368 |             'start': bars.index.min().isoformat(),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:371:1
    |
369 |             'end': bars.index.max().isoformat()
370 |         }
371 |     
    | ^^^^
372 |     def winsorize_series(
373 |         self,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/sanitize.py:379:1
    |
377 |         """
378 |         Winsorize a series by capping extreme values.
379 |         
    | ^^^^^^^^
380 |         Args:
381 |             series: Series to winsorize
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/sanitize.py:383:1
    |
381 |             series: Series to winsorize
382 |             limits: (lower_percentile, upper_percentile) as decimals
383 |             
    | ^^^^^^^^^^^^
384 |         Returns:
385 |             Winsorized series
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:389:1
    |
387 |         if limits is None:
388 |             limits = self.config.winsorize_limits
389 |         
    | ^^^^^^^^
390 |         if len(series.dropna()) < 10:  # Need minimum data
391 |             return series
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:392:1
    |
390 |         if len(series.dropna()) < 10:  # Need minimum data
391 |             return series
392 |         
    | ^^^^^^^^
393 |         lower_percentile, upper_percentile = limits
394 |         lower_bound = series.quantile(lower_percentile)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:396:1
    |
394 |         lower_bound = series.quantile(lower_percentile)
395 |         upper_bound = series.quantile(1 - upper_percentile)
396 |         
    | ^^^^^^^^
397 |         return series.clip(lower=lower_bound, upper=upper_bound)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:398:1
    |
397 |         return series.clip(lower=lower_bound, upper=upper_bound)
398 |     
    | ^^^^
399 |     def get_rejection_stats(self) -> Dict[str, Union[int, float]]:
400 |         """Get sanitization statistics."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:402:1
    |
400 |         """Get sanitization statistics."""
401 |         stats = self._rejection_stats.copy()
402 |         
    | ^^^^^^^^
403 |         if stats['total_processed'] > 0:
404 |             stats['rejection_rate'] = (
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:410:1
    |
408 |         else:
409 |             stats['rejection_rate'] = 0.0
410 |         
    | ^^^^^^^^
411 |         return stats
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:412:1
    |
411 |         return stats
412 |     
    | ^^^^
413 |     def reset_stats(self) -> None:
414 |         """Reset rejection statistics."""
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/sanitize.py:438:1
    |
436 |     """
437 |     Convenience function to sanitize bars.
438 |     
    | ^^^^
439 |     Args:
440 |         bars: DataFrame with OHLCV data
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/sanitize.py:443:1
    |
441 |         symbol: Symbol for logging
442 |         config: Optional sanitization configuration
443 |         
    | ^^^^^^^^
444 |     Returns:
445 |         Tuple of (cleaned_bars, sanitization_report)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/sanitize.py:458:1
    |
456 |     """
457 |     Winsorize specified columns of a DataFrame.
458 |     
    | ^^^^
459 |     Args:
460 |         df: DataFrame to winsorize
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/sanitize.py:463:1
    |
461 |         columns: Columns to winsorize (None for all numeric columns)
462 |         limits: (lower_percentile, upper_percentile) as decimals
463 |         
    | ^^^^^^^^
464 |     Returns:
465 |         DataFrame with winsorized columns
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:469:1
    |
467 |     if df.empty:
468 |         return df
469 |     
    | ^^^^
470 |     result = df.copy()
471 |     sanitizer = get_data_sanitizer()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:472:1
    |
470 |     result = df.copy()
471 |     sanitizer = get_data_sanitizer()
472 |     
    | ^^^^
473 |     if columns is None:
474 |         columns = df.select_dtypes(include=[np.number]).columns.tolist()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:475:1
    |
473 |     if columns is None:
474 |         columns = df.select_dtypes(include=[np.number]).columns.tolist()
475 |     
    | ^^^^
476 |     for col in columns:
477 |         if col in df.columns:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/sanitize.py:479:1
    |
477 |         if col in df.columns:
478 |             result[col] = sanitizer.winsorize_series(df[col], limits)
479 |     
    | ^^^^
480 |     return result
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> ai_trading/data/sanitize.py:480:18
    |
478 |             result[col] = sanitizer.winsorize_series(df[col], limits)
479 |     
480 |     return result
    |                  ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/data/splits.py:8:1
   |
 6 |   """
 7 |
 8 | / import numpy as np
 9 | | import pandas as pd
10 | | from typing import Iterator, Tuple, Optional, Union, List, Dict
11 | | from datetime import datetime, timedelta
12 | |
13 | | # Use the centralized logger as per AGENTS.md
14 | | from ai_trading.logging import logger
15 | |
16 | | # sklearn is a hard dependency
17 | | from sklearn.model_selection import BaseCrossValidator
   | |______________________________________________________^
   |
help: Organize imports

W293 Blank line contains whitespace
  --> ai_trading/data/splits.py:23:1
   |
21 |     """
22 |     Time series cross-validation with purging and embargo.
23 |     
   | ^^^^
24 |     Ensures no data leakage by purging observations that overlap
25 |     with the test set timeline and applying embargo periods.
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/splits.py:27:1
   |
25 |     with the test set timeline and applying embargo periods.
26 |     """
27 |     
   | ^^^^
28 |     def __init__(
29 |         self,
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/splits.py:37:1
   |
35 |         """
36 |         Initialize purged group time series split.
37 |         
   | ^^^^^^^^
38 |         Args:
39 |             n_splits: Number of splits
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/splits.py:48:1
   |
46 |         self.embargo_pct = embargo_pct
47 |         self.purge_pct = purge_pct
48 |         
   | ^^^^^^^^
49 |     def split(
50 |         self,
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/splits.py:58:1
   |
56 |         """
57 |         Generate indices for train/test splits.
58 |         
   | ^^^^^^^^
59 |         Args:
60 |             X: Feature matrix
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/data/splits.py:64:1
   |
62 |             groups: Group labels (optional, uses index if not provided)
63 |             t1: End times for each observation (for proper purging)
64 |             
   | ^^^^^^^^^^^^
65 |         Yields:
66 |             Tuple of (train_indices, test_indices)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/splits.py:84:1
   |
82 |                     from ai_trading.logging import logger
83 |                     logger.debug("Datetime index cast failed; using positional indices: %s", e)
84 |             
   | ^^^^^^^^^^^^
85 |             # Calculate test size
86 |             if self.test_size is None:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/splits.py:92:1
   |
90 |             else:
91 |                 test_size = self.test_size
92 |             
   | ^^^^^^^^^^^^
93 |             # Calculate embargo and purge sizes
94 |             embargo_size = int(n_samples * self.embargo_pct)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/data/splits.py:96:1
   |
94 |             embargo_size = int(n_samples * self.embargo_pct)
95 |             purge_size = int(n_samples * self.purge_pct)
96 |             
   | ^^^^^^^^^^^^
97 |             logger.debug(f"Split parameters: n_samples={n_samples}, test_size={test_size}, "
98 |                         f"embargo_size={embargo_size}, purge_size={purge_size}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:99:1
    |
 97 |             logger.debug(f"Split parameters: n_samples={n_samples}, test_size={test_size}, "
 98 |                         f"embargo_size={embargo_size}, purge_size={purge_size}")
 99 |             
    | ^^^^^^^^^^^^
100 |             # Generate splits
101 |             for i in range(self.n_splits):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:105:1
    |
103 |                 test_start = int(n_samples * (i + 1) / (self.n_splits + 1))
104 |                 test_end = min(test_start + test_size, n_samples)
105 |                 
    | ^^^^^^^^^^^^^^^^
106 |                 # Test indices
107 |                 test_indices = np.arange(test_start, test_end)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:108:1
    |
106 |                 # Test indices
107 |                 test_indices = np.arange(test_start, test_end)
108 |                 
    | ^^^^^^^^^^^^^^^^
109 |                 # Training indices (before test set, with purging and embargo)
110 |                 train_end = test_start - purge_size
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:112:1
    |
110 |                 train_end = test_start - purge_size
111 |                 train_indices = np.arange(0, max(0, train_end))
112 |                 
    | ^^^^^^^^^^^^^^^^
113 |                 # Apply embargo (remove observations too close to test start)
114 |                 if embargo_size > 0:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:117:1
    |
115 |                     embargo_cutoff = test_start - embargo_size
116 |                     train_indices = train_indices[train_indices < embargo_cutoff]
117 |                 
    | ^^^^^^^^^^^^^^^^
118 |                 # Purge overlapping observations if t1 is provided
119 |                 if t1 is not None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:123:1
    |
121 |                         train_indices, test_indices, t1, indices
122 |                     )
123 |                 
    | ^^^^^^^^^^^^^^^^
124 |                 # Ensure indices are valid
125 |                 train_indices = train_indices[
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:131:1
    |
129 |                     (test_indices >= 0) & (test_indices < n_samples)
130 |                 ]
131 |                 
    | ^^^^^^^^^^^^^^^^
132 |                 if len(train_indices) > 0 and len(test_indices) > 0:
133 |                     logger.debug(f"Split {i}: train_size={len(train_indices)}, "
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:138:1
    |
136 |                 else:
137 |                     logger.warning(f"Split {i}: insufficient data after purging")
138 |                     
    | ^^^^^^^^^^^^^^^^^^^^
139 |         except (ValueError, TypeError, IndexError) as e:
140 |             logger.error(f"Error in split generation: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:142:1
    |
140 |             logger.error(f"Error in split generation: {e}")
141 |             return
142 |     
    | ^^^^
143 |     def _purge_overlapping(
144 |         self,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/splits.py:152:1
    |
150 |         """
151 |         Purge training observations that overlap with test period.
152 |         
    | ^^^^^^^^
153 |         Args:
154 |             train_indices: Training indices
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> ai_trading/data/splits.py:155:39
    |
153 |         Args:
154 |             train_indices: Training indices
155 |             test_indices: Test indices  
    |                                       ^^
156 |             t1: End times for each observation
157 |             full_index: Full index of the dataset
    |
help: Remove trailing whitespace

W293 Blank line contains whitespace
   --> ai_trading/data/splits.py:158:1
    |
156 |             t1: End times for each observation
157 |             full_index: Full index of the dataset
158 |             
    | ^^^^^^^^^^^^
159 |         Returns:
160 |             Purged training indices
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:165:1
    |
163 |             if len(test_indices) == 0:
164 |                 return train_indices
165 |             
    | ^^^^^^^^^^^^
166 |             # Get test period start and end
167 |             test_start_idx = test_indices[0]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:169:1
    |
167 |             test_start_idx = test_indices[0]
168 |             test_end_idx = test_indices[-1]
169 |             
    | ^^^^^^^^^^^^
170 |             if hasattr(full_index, 'to_series'):
171 |                 test_start_time = full_index[test_start_idx]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:177:1
    |
175 |                 test_start_time = test_start_idx
176 |                 test_end_time = test_end_idx
177 |             
    | ^^^^^^^^^^^^
178 |             # Find training observations that don't overlap
179 |             purged_train = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:184:1
    |
182 |                     if idx < len(t1.index):
183 |                         obs_end_time = t1.iloc[idx]
184 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
185 |                         # Check if observation ends before test period starts
186 |                         if pd.isna(obs_end_time) or obs_end_time < test_start_time:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:197:1
    |
195 |                     # err on the side of caution and exclude
196 |                     continue
197 |             
    | ^^^^^^^^^^^^
198 |             return np.array(purged_train)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:199:1
    |
198 |             return np.array(purged_train)
199 |             
    | ^^^^^^^^^^^^
200 |         except (KeyError, ValueError, IndexError, TypeError) as e:
201 |             logger.error(f"Error in purging overlapping observations: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:203:1
    |
201 |             logger.error(f"Error in purging overlapping observations: {e}")
202 |             return train_indices
203 |     
    | ^^^^
204 |     def get_n_splits(
205 |         self,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/splits.py:223:1
    |
221 |     """
222 |     Generate walk-forward analysis splits.
223 |     
    | ^^^^
224 |     Args:
225 |         dates: Timeline of dates for analysis
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> ai_trading/data/splits.py:228:58
    |
226 |         mode: 'rolling' or 'anchored' walk-forward
227 |         train_span: Training period length (days or timedelta)
228 |         test_span: Test period length (days or timedelta)  
    |                                                          ^^
229 |         embargo_pct: Embargo period as fraction of training period
    |
help: Remove trailing whitespace

W293 Blank line contains whitespace
   --> ai_trading/data/splits.py:230:1
    |
228 |         test_span: Test period length (days or timedelta)  
229 |         embargo_pct: Embargo period as fraction of training period
230 |         
    | ^^^^^^^^
231 |     Returns:
232 |         List of split dictionaries with train/test periods
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:238:1
    |
236 |         if not isinstance(dates, pd.DatetimeIndex):
237 |             dates = pd.DatetimeIndex(dates)
238 |         
    | ^^^^^^^^
239 |         # Convert spans to timedelta if needed
240 |         if isinstance(train_span, int):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:244:1
    |
242 |         if isinstance(test_span, int):
243 |             test_span = timedelta(days=test_span)
244 |         
    | ^^^^^^^^
245 |         # Calculate embargo period
246 |         embargo_period = timedelta(days=int(train_span.days * embargo_pct))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:247:1
    |
245 |         # Calculate embargo period
246 |         embargo_period = timedelta(days=int(train_span.days * embargo_pct))
247 |         
    | ^^^^^^^^
248 |         splits = []
249 |         start_date = dates.min()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:251:1
    |
249 |         start_date = dates.min()
250 |         end_date = dates.max()
251 |         
    | ^^^^^^^^
252 |         # Initial training end
253 |         current_train_end = start_date + train_span
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:254:1
    |
252 |         # Initial training end
253 |         current_train_end = start_date + train_span
254 |         
    | ^^^^^^^^
255 |         while current_train_end + test_span <= end_date:
256 |             # Training period
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:261:1
    |
259 |             else:  # anchored
260 |                 train_start = start_date
261 |             
    | ^^^^^^^^^^^^
262 |             # Apply embargo
263 |             test_start = current_train_end + embargo_period
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:265:1
    |
263 |             test_start = current_train_end + embargo_period
264 |             test_end = test_start + test_span
265 |             
    | ^^^^^^^^^^^^
266 |             # Ensure test end doesn't exceed available data
267 |             if test_end > end_date:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:269:1
    |
267 |             if test_end > end_date:
268 |                 test_end = end_date
269 |             
    | ^^^^^^^^^^^^
270 |             # Get actual dates in the periods
271 |             train_dates = dates[(dates >= train_start) & (dates < current_train_end)]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:273:1
    |
271 |             train_dates = dates[(dates >= train_start) & (dates < current_train_end)]
272 |             test_dates = dates[(dates >= test_start) & (dates < test_end)]
273 |             
    | ^^^^^^^^^^^^
274 |             if len(train_dates) > 0 and len(test_dates) > 0:
275 |                 split_info = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:286:1
    |
284 |                 }
285 |                 splits.append(split_info)
286 |                 
    | ^^^^^^^^^^^^^^^^
287 |                 logger.debug(f"Walk-forward split: train {train_start.date()} to "
288 |                            f"{current_train_end.date()}, test {test_start.date()} to "
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:290:1
    |
288 |                            f"{current_train_end.date()}, test {test_start.date()} to "
289 |                            f"{test_end.date()}")
290 |             
    | ^^^^^^^^^^^^
291 |             # Move to next period
292 |             current_train_end += test_span
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:293:1
    |
291 |             # Move to next period
292 |             current_train_end += test_span
293 |         
    | ^^^^^^^^
294 |         logger.info(f"Generated {len(splits)} walk-forward splits using {mode} mode")
295 |         return splits
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:296:1
    |
294 |         logger.info(f"Generated {len(splits)} walk-forward splits using {mode} mode")
295 |         return splits
296 |         
    | ^^^^^^^^
297 |     except (ValueError, TypeError) as e:
298 |         logger.error(f"Error generating walk-forward splits: {e}")
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/splits.py:310:1
    |
308 |     """
309 |     Validate that there's no data leakage between train and test sets.
310 |     
    | ^^^^
311 |     Args:
312 |         train_indices: Training set indices
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/data/splits.py:316:1
    |
314 |         timeline: Timeline of observations
315 |         t1: End times for each observation
316 |         
    | ^^^^^^^^
317 |     Returns:
318 |         True if no leakage detected, False otherwise
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:326:1
    |
324 |             logger.error(f"Direct index overlap detected: {len(overlap)} indices")
325 |             return False
326 |         
    | ^^^^^^^^
327 |         # Check temporal ordering
328 |         if hasattr(timeline, '__getitem__'):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:332:1
    |
330 |                 max_train_time = timeline[train_indices].max()
331 |                 min_test_time = timeline[test_indices].min()
332 |                 
    | ^^^^^^^^^^^^^^^^
333 |                 if max_train_time >= min_test_time:
334 |                     logger.warning("Potential temporal leakage: training data overlaps test period")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:335:1
    |
333 |                 if max_train_time >= min_test_time:
334 |                     logger.warning("Potential temporal leakage: training data overlaps test period")
335 |                     
    | ^^^^^^^^^^^^^^^^^^^^
336 |                     # If t1 is provided, check for observation overlap
337 |                     if t1 is not None:
    |
help: Remove whitespace from blank line

E501 Line too long (105 > 100)
   --> ai_trading/data/splits.py:342:101
    |
340 | …                     obs_end = t1.iloc[train_idx]
341 | …                     if pd.notna(obs_end) and obs_end >= min_test_time:
342 | …                         logger.error(f"Training observation {train_idx} ends in test period")
    |                                                                                           ^^^^^
343 | …                         return False
    |

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:344:1
    |
342 |                                     logger.error(f"Training observation {train_idx} ends in test period")
343 |                                     return False
344 |         
    | ^^^^^^^^
345 |         logger.debug("No data leakage detected")
346 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/data/splits.py:347:1
    |
345 |         logger.debug("No data leakage detected")
346 |         return True
347 |         
    | ^^^^^^^^
348 |     except (ValueError, TypeError) as e:
349 |         logger.error(f"Error validating leakage: {e}")
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/data/timeutils.py:1:1
  |
1 | / from __future__ import annotations
2 | |
3 | | from datetime import datetime, date, time, timedelta, timezone
4 | | from typing import Any
5 | | from zoneinfo import ZoneInfo
  | |_____________________________^
6 |
7 |   # AI-AGENT-REF: centralized time helpers
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/data/universe.py:1:1
  |
1 | / import os
2 | | from importlib.resources import files as pkg_files
3 | | import pandas as pd
4 | | from typing import List, Optional
5 | |
6 | | from ai_trading.logging import logger  # AI-AGENT-REF: structured logging
  | |_____________________________________^
  |
help: Organize imports

E501 Line too long (111 > 100)
  --> ai_trading/data/universe.py:25:101
   |
23 |     path = locate_tickers_csv()
24 |     if not path:
25 |         logger.error("TICKERS_FILE_MISSING", extra={"path": "ai_trading/data/tickers.csv", "fallback": "none"})
   |                                                                                                     ^^^^^^^^^^^
26 |         return []
27 |     df = pd.read_csv(path)
   |

E501 Line too long (110 > 100)
   --> ai_trading/data_fetcher.py:118:101
    |
117 | def age_cached_minute_timestamps(max_age_seconds: int) -> int:
118 |     """Drop cache entries older than max_age_seconds (based on inserted time)."""  # AI-AGENT-REF: cache prune
    |                                                                                                     ^^^^^^^^^^
119 |     now_s = int(_dt.datetime.now(tz=UTC).timestamp())
120 |     to_del = [sym for sym, (_, ins) in _MINUTE_CACHE.items() if now_s - ins > max_age_seconds]
    |

E501 Line too long (109 > 100)
   --> ai_trading/data_fetcher.py:127:101
    |
126 | def last_minute_bar_age_seconds(symbol: str) -> int | None:
127 |     """Age in seconds of last cached minute bar for symbol, or None if absent."""  # AI-AGENT-REF: age helper
    |                                                                                                     ^^^^^^^^^
128 |     ts = get_cached_minute_timestamp(symbol)
129 |     if ts is None:
    |

E501 Line too long (101 > 100)
   --> ai_trading/data_fetcher.py:241:101
    |
239 |                 df.columns = df.columns.get_level_values(0)
240 |             else:
241 |                 df.columns = ["_".join([str(x) for x in tup if x is not None]) for tup in df.columns]
    |                                                                                                     ^
242 |         except (AttributeError, IndexError, TypeError):  # AI-AGENT-REF: narrow flatten errors
243 |             df.columns = ["_".join([str(x) for x in tup if x is not None]) for tup in df.columns]
    |

E501 Line too long (114 > 100)
   --> ai_trading/data_fetcher.py:448:101
    |
446 |                         )
447 |                         rdf = _resample_to_daily(mdf)
448 |                     except (ImportError, ValueError, TypeError, KeyError):  # AI-AGENT-REF: narrow resample errors
    |                                                                                                     ^^^^^^^^^^^^^^
449 |                         mdf = pd.DataFrame()
450 |                     else:
    |

E501 Line too long (101 > 100)
   --> ai_trading/data_fetcher.py:566:101
    |
564 |             if last_ts is not None:
565 |                 set_cached_minute_timestamp(symbol, last_ts)
566 |     except (ValueError, TypeError, KeyError, AttributeError):  # pragma: no cover - cache best effort
    |                                                                                                     ^
567 |         pass
    |

E501 Line too long (101 > 100)
   --> ai_trading/data_fetcher.py:640:101
    |
640 | def fetch_minute_yfinance(symbol: str, start_dt: _dt.datetime, end_dt: _dt.datetime) -> pd.DataFrame:
    |                                                                                                     ^
641 |     """Explicit helper for tests and optional direct Yahoo minute fetch."""  # AI-AGENT-REF
642 |     df = _yahoo_get_bars(symbol, start_dt, end_dt, interval="1m")
    |

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/data_providers/__init__.py:3:1
  |
1 | """Optional data provider helpers."""
2 |
3 | from ai_trading.util.optional_imports import get_yfinance, has_yfinance  # AI-AGENT-REF: re-export yfinance helpers
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4 |
5 | __all__ = ["get_yfinance", "has_yfinance"]
  |
help: Organize imports

E501 Line too long (115 > 100)
 --> ai_trading/data_providers/__init__.py:3:101
  |
1 | """Optional data provider helpers."""
2 |
3 | from ai_trading.util.optional_imports import get_yfinance, has_yfinance  # AI-AGENT-REF: re-export yfinance helpers
  |                                                                                                     ^^^^^^^^^^^^^^^
4 |
5 | __all__ = ["get_yfinance", "has_yfinance"]
  |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/data_validation.py:1:1
   |
 1 | / from __future__ import annotations
 2 | |
 3 | | from collections.abc import Callable, Mapping, Sequence
 4 | | from datetime import UTC, datetime, timedelta
 5 | |
 6 | | import pandas as pd
 7 | | from dataclasses import dataclass
 8 | | from enum import Enum
 9 | | from pathlib import Path
10 | | from typing import Any
11 | |
12 | | from ai_trading.data_fetcher import get_bars
   | |____________________________________________^
13 |
14 |   __all__ = [
   |
help: Organize imports

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/data_validation.py:58:24
   |
56 |             "minutes_stale": minutes,
57 |         }
58 |     except Exception:  # noqa: BLE001
   |                        ^^^^^^^^^^^^^^
59 |         return {"symbol": symbol, "is_fresh": False, "minutes_stale": float("inf")}
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/data_validation.py:129:28
    |
127 |             if df is not None and not df.empty:
128 |                 return True
129 |         except Exception:  # noqa: BLE001
    |                            ^^^^^^^^^^^^^^
130 |             continue
131 |     return False
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/data_validation.py:196:24
    |
194 |         df = pd.read_csv(p)
195 |         report["file_readable"] = True
196 |     except Exception:  # noqa: BLE001
    |                        ^^^^^^^^^^^^^^
197 |         return report
198 |     required = {"timestamp", "symbol", "side", "entry_price", "exit_price", "quantity", "pnl"}
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/data_validation.py:211:28
    |
209 |             int(row["quantity"])
210 |             float(row["pnl"])
211 |         except Exception:  # noqa: BLE001
    |                            ^^^^^^^^^^^^^^
212 |             corrupted.append(idx)
213 |     report["corrupted_rows"] = corrupted
    |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/evaluation/walkforward.py:41:1
   |
39 |           logger.debug("Matplotlib plotting disabled by configuration")
40 |
41 | / from ..data.splits import walkforward_splits
42 | | from ..features.pipeline import create_feature_pipeline
   | |_______________________________________________________^
43 |   # Lazy import to avoid heavy dependencies at module import time
44 |   def _get_ml_trainer():
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/execution/__init__.py:24:1
   |
23 |   # Import execution components
24 | / from .engine import ExecutionAlgorithm, ExecutionEngine, Order  # AI-AGENT-REF: expose ExecutionEngine
25 | | from .transaction_costs import estimate_cost
26 | |
27 | |
28 | | # Import enhanced debugging and tracking modules
29 | | from .debug_tracker import (
30 | |     ExecutionPhase,
31 | |     OrderStatus,
32 | |     enable_debug_mode,
33 | |     get_debug_tracker,
34 | |     get_execution_statistics,
35 | |     log_execution_phase,
36 | |     log_order_outcome,
37 | |     log_position_change,
38 | |     log_signal_to_execution,
39 | | )
40 | | from .liquidity import LiquidityAnalyzer, LiquidityLevel, LiquidityManager, MarketHours
41 | | from .pnl_attributor import (
42 | |     PnLEvent,
43 | |     PnLSource,
44 | |     explain_recent_pnl_changes,
45 | |     get_pnl_attribution_stats,
46 | |     get_pnl_attributor,
47 | |     get_portfolio_pnl_summary,
48 | |     get_symbol_pnl_breakdown,
49 | |     record_dividend_income,
50 | |     record_trade_pnl,
51 | |     update_position_for_pnl,
52 | | )
53 | | from .position_reconciler import (
54 | |     PositionDiscrepancy,
55 | |     adjust_bot_position,
56 | |     force_position_reconciliation,
57 | |     get_position_discrepancies,
58 | |     get_position_reconciler,
59 | |     get_reconciliation_statistics,
60 | |     start_position_monitoring,
61 | |     stop_position_monitoring,
62 | |     update_bot_position,
63 | | )
   | |_^
64 |   try:  # AI-AGENT-REF: optional production engine when Alpaca deps missing
65 |       from .production_engine import (
   |
help: Organize imports

E501 Line too long (102 > 100)
  --> ai_trading/execution/__init__.py:24:101
   |
23 | # Import execution components
24 | from .engine import ExecutionAlgorithm, ExecutionEngine, Order  # AI-AGENT-REF: expose ExecutionEngine
   |                                                                                                     ^^
25 | from .transaction_costs import estimate_cost
   |

E501 Line too long (105 > 100)
   --> ai_trading/execution/debug_tracker.py:161:101
    |
159 |                         "correlation_id": correlation_id,
160 |                         "phase": phase.value,
161 |                         "message": "Failed to acquire lock within timeout, logging without state update",
    |                                                                                                     ^^^^^
162 |                     },
163 |                 )
    |

RUF100 [*] Unused `noqa` directive (unused: `F401`)
  --> ai_trading/execution/live_trading.py:24:70
   |
22 | try:  # AI-AGENT-REF: resilient Alpaca import
23 |     from alpaca.common.exceptions import APIError  # type: ignore
24 |     from alpaca.trading.client import TradingClient  # type: ignore  # noqa: F401
   |                                                                      ^^^^^^^^^^^^
25 | except Exception:  # AI-AGENT-REF: local fallback when SDK missing
26 |     TradingClient = None  # type: ignore
   |
help: Remove unused `noqa` directive

E501 Line too long (112 > 100)
   --> ai_trading/execution/pnl_attributor.py:187:101
    |
185 |                     pnl_amount=position_change_pnl,
186 |                     source=PnLSource.POSITION_CHANGE,
187 |                     description=f"Realized PnL from selling {abs(qty_change)} shares at ~${avg_exit_price:.2f}",
    |                                                                                                     ^^^^^^^^^^^^
188 |                     position_qty=qty_change,
189 |                     price=avg_exit_price,
    |

E501 Line too long (111 > 100)
   --> ai_trading/execution/pnl_attributor.py:206:101
    |
204 |                 pnl_amount=market_movement_pnl,
205 |                 source=PnLSource.MARKET_MOVEMENT,
206 |                 description=f"Market movement PnL: ${price_change:.2f} price change on {base_quantity} shares",
    |                                                                                                     ^^^^^^^^^^^
207 |                 position_qty=base_quantity,
208 |                 price=price_change,
    |

E501 Line too long (115 > 100)
   --> ai_trading/execution/pnl_attributor.py:232:101
    |
230 |                 pnl_amount=realized_pnl,
231 |                 source=PnLSource.POSITION_CHANGE,
232 |                 description=f"Trade PnL: {trade_qty} shares @ ${execution_price:.2f} (cost basis ${avg_cost:.2f})",
    |                                                                                                     ^^^^^^^^^^^^^^^
233 |                 position_qty=trade_qty,
234 |                 price=execution_price,
    |

RUF100 [*] Unused `noqa` directive (unused: `F401`)
  --> ai_trading/execution/production_engine.py:18:70
   |
16 | try:  # AI-AGENT-REF: resilient Alpaca import
17 |     from alpaca.common.exceptions import APIError  # type: ignore
18 |     from alpaca.trading.client import TradingClient  # type: ignore  # noqa: F401
   |                                                                      ^^^^^^^^^^^^
19 | except Exception:  # AI-AGENT-REF: local fallback when SDK missing
20 |     TradingClient = None  # type: ignore
   |
help: Remove unused `noqa` directive

E501 Line too long (105 > 100)
   --> ai_trading/execution/production_engine.py:335:101
    |
333 |     def __str__(self) -> str:
334 |         """String representation of order request."""
335 |         return f"OrderRequest({self.side.value} {self.quantity} {self.symbol} @ {self.order_type.value})"
    |                                                                                                     ^^^^^
336 |
337 |     def __repr__(self) -> str:
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/execution/transaction_costs.py:17:1
   |
15 | _log = logging.getLogger(__name__)  # AI-AGENT-REF: module logger
16 |
17 | from ai_trading.core.constants import EXECUTION_PARAMETERS, RISK_PARAMETERS  # AI-AGENT-REF: direct import without shim
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Organize imports

E501 Line too long (119 > 100)
  --> ai_trading/execution/transaction_costs.py:17:101
   |
15 | _log = logging.getLogger(__name__)  # AI-AGENT-REF: module logger
16 |
17 | from ai_trading.core.constants import EXECUTION_PARAMETERS, RISK_PARAMETERS  # AI-AGENT-REF: direct import without shim
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^
   |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:100:1
    |
 98 |     """
 99 |     Sophisticated transaction cost calculator with market impact modeling.
100 |     
    | ^^^^
101 |     Provides detailed cost analysis including spread, commission, market impact,
102 |     and opportunity costs. Validates trade profitability with safety margins.
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:112:1
    |
110 |         """
111 |         Initialize transaction cost calculator.
112 |         
    | ^^^^^^^^
113 |         Args:
114 |             commission_rate: Commission rate as decimal (e.g., 0.0001 = 1bp)
    |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
   --> ai_trading/execution/transaction_costs.py:119:101
    |
117 |             safety_margin_multiplier: Required safety margin over costs
118 |         """
119 |         self.commission_rate = _bounded_rate("commission_rate", commission_rate)  # AI-AGENT-REF: validate rate
    |                                                                                                     ^^^^^^^^^^^
120 |         self.min_commission = _finite_nonneg("min_commission", min_commission)  # AI-AGENT-REF: validate min
121 |         self.max_commission = _finite_nonneg("max_commission", max_commission)  # AI-AGENT-REF: validate max
    |

E501 Line too long (108 > 100)
   --> ai_trading/execution/transaction_costs.py:120:101
    |
118 | …     """
119 | …     self.commission_rate = _bounded_rate("commission_rate", commission_rate)  # AI-AGENT-REF: validate rate
120 | …     self.min_commission = _finite_nonneg("min_commission", min_commission)  # AI-AGENT-REF: validate min
    |                                                                                                   ^^^^^^^^
121 | …     self.max_commission = _finite_nonneg("max_commission", max_commission)  # AI-AGENT-REF: validate max
122 | …     self.safety_margin_multiplier = _finite_pos("safety_margin_multiplier", safety_margin_multiplier)  # AI-AGENT-REF: validate saf…
    |

E501 Line too long (108 > 100)
   --> ai_trading/execution/transaction_costs.py:121:101
    |
119 | …     self.commission_rate = _bounded_rate("commission_rate", commission_rate)  # AI-AGENT-REF: validate rate
120 | …     self.min_commission = _finite_nonneg("min_commission", min_commission)  # AI-AGENT-REF: validate min
121 | …     self.max_commission = _finite_nonneg("max_commission", max_commission)  # AI-AGENT-REF: validate max
    |                                                                                                   ^^^^^^^^
122 | …     self.safety_margin_multiplier = _finite_pos("safety_margin_multiplier", safety_margin_multiplier)  # AI-AGENT-REF: validate saf…
    |

E501 Line too long (145 > 100)
   --> ai_trading/execution/transaction_costs.py:122:101
    |
120 | …ion", min_commission)  # AI-AGENT-REF: validate min
121 | …ion", max_commission)  # AI-AGENT-REF: validate max
122 | …ty_margin_multiplier", safety_margin_multiplier)  # AI-AGENT-REF: validate safety margin
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
123 | …
124 | …
    |

E501 Line too long (103 > 100)
   --> ai_trading/execution/transaction_costs.py:137:101
    |
135 |         }
136 |
137 |         _log.info(f"TransactionCostCalculator initialized with commission_rate={commission_rate:.4f}, "
    |                                                                                                     ^^^
138 |                    f"safety_margin={safety_margin_multiplier}x")
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:146:1
    |
144 |         """
145 |         Calculate bid-ask spread cost for a trade.
146 |         
    | ^^^^^^^^
147 |         Args:
148 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:151:1
    |
149 |             trade_size: Number of shares to trade (positive for buy, negative for sell)
150 |             market_data: Market data including bid/ask prices
151 |             
    | ^^^^^^^^^^^^
152 |         Returns:
153 |             Spread cost in dollars
    |
help: Remove whitespace from blank line

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:184:101
    |
182 |             return spread_cost
183 |
184 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
185 |             _log.error(
186 |                 "SPREAD_COST_FAILED",
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:199:1
    |
197 |         """
198 |         Calculate broker commission for a trade.
199 |         
    | ^^^^^^^^
200 |         Args:
201 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:204:1
    |
202 |             trade_size: Number of shares to trade
203 |             trade_value: Dollar value of trade
204 |             
    | ^^^^^^^^^^^^
205 |         Returns:
206 |             Commission cost in dollars
    |
help: Remove whitespace from blank line

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:220:101
    |
218 |             return commission
219 |
220 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
221 |             _log.error(
222 |                 "COMMISSION_CALC_FAILED",
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:233:1
    |
231 |         """
232 |         Calculate market impact cost using sophisticated modeling.
233 |         
    | ^^^^^^^^
234 |         Args:
235 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:238:1
    |
236 |             trade_size: Number of shares to trade
237 |             market_data: Market data including volume, volatility
238 |             
    | ^^^^^^^^^^^^
239 |         Returns:
240 |             Tuple of (temporary_impact, permanent_impact) in dollars
    |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> ai_trading/execution/transaction_costs.py:258:101
    |
256 |             # Market impact model: combination of linear and square root terms
257 |             linear_impact = self.impact_model_params['linear_coefficient'] * participation_rate
258 |             sqrt_impact = self.impact_model_params['sqrt_coefficient'] * math.sqrt(participation_rate)
    |                                                                                                     ^^
259 |
260 |             # Volatility adjustment
    |

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:280:101
    |
278 |             return temporary_impact, permanent_impact
279 |
280 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
281 |             _log.error(
282 |                 "MARKET_IMPACT_FAILED",
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:297:1
    |
295 |         """
296 |         Calculate opportunity cost from execution delay.
297 |         
    | ^^^^^^^^
298 |         Args:
299 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:303:1
    |
301 |             expected_return: Expected return rate per day
302 |             trade_value: Dollar value of trade
303 |             
    | ^^^^^^^^^^^^
304 |         Returns:
305 |             Opportunity cost in dollars
    |
help: Remove whitespace from blank line

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:322:101
    |
320 |             return opportunity_cost
321 |
322 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
323 |             _log.error(
324 |                 "OPPORTUNITY_COST_FAILED",
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:336:1
    |
334 |         """
335 |         Calculate borrowing cost for short selling.
336 |         
    | ^^^^^^^^
337 |         Args:
338 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:342:1
    |
340 |             trade_value: Dollar value of trade
341 |             holding_period_days: Expected holding period
342 |             
    | ^^^^^^^^^^^^
343 |         Returns:
344 |             Borrowing cost in dollars
    |
help: Remove whitespace from blank line

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:363:101
    |
361 |             return borrowing_cost
362 |
363 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
364 |             _log.error(
365 |                 "BORROWING_COST_FAILED",
    |

E501 Line too long (101 > 100)
   --> ai_trading/execution/transaction_costs.py:377:101
    |
375 |                                        expected_delay: float = 1.0,
376 |                                        expected_return: float = 0.0,
377 |                                        holding_period_days: float = 1.0) -> TransactionCostBreakdown:
    |                                                                                                     ^
378 |         """
379 |         Calculate comprehensive transaction cost breakdown.
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:380:1
    |
378 |         """
379 |         Calculate comprehensive transaction cost breakdown.
380 |         
    | ^^^^^^^^
381 |         Args:
382 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:389:1
    |
387 |             expected_return: Expected return rate
388 |             holding_period_days: Expected holding period for short sales
389 |             
    | ^^^^^^^^^^^^
390 |         Returns:
391 |             Detailed transaction cost breakdown
    |
help: Remove whitespace from blank line

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:395:101
    |
393 |         try:
394 |             trade_size_abs = _finite_pos("qty", abs(trade_size))  # AI-AGENT-REF: validate quantity
395 |             price = _finite_pos("price", market_data.get('prices', {}).get(symbol, 100.0))  # AI-AGENT-REF: validate price
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
396 |             trade_value = trade_size_abs * price
    |

E501 Line too long (116 > 100)
   --> ai_trading/execution/transaction_costs.py:405:101
    |
403 |             market_impact = temp_impact + perm_impact
404 |
405 |             opportunity_cost = self.calculate_opportunity_cost(symbol, expected_delay, expected_return, trade_value)
    |                                                                                                     ^^^^^^^^^^^^^^^^
406 |             borrowing_cost = self.calculate_borrowing_cost(symbol, trade_size, trade_value, holding_period_days)
    |

E501 Line too long (112 > 100)
   --> ai_trading/execution/transaction_costs.py:406:101
    |
405 |             opportunity_cost = self.calculate_opportunity_cost(symbol, expected_delay, expected_return, trade_value)
406 |             borrowing_cost = self.calculate_borrowing_cost(symbol, trade_size, trade_value, holding_period_days)
    |                                                                                                     ^^^^^^^^^^^^
407 |
408 |             # Adjust costs based on trade type
    |

E501 Line too long (101 > 100)
   --> ai_trading/execution/transaction_costs.py:417:101
    |
415 |                 opportunity_cost *= 0.5
416 |
417 |             total_cost = spread_cost + commission + market_impact + opportunity_cost + borrowing_cost
    |                                                                                                     ^
418 |             cost_per_share = total_cost / trade_size_abs
419 |             cost_percentage = total_cost / max(trade_value, 1)
    |

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:452:101
    |
450 |             return result
451 |
452 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
453 |             _log.error(
454 |                 "TX_COST_FAILED",
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:468:1
    |
466 |         """
467 |         Validate that trade meets profitability requirements with safety margins.
468 |         
    | ^^^^^^^^
469 |         Args:
470 |             symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:476:1
    |
474 |             trade_type: Type of trade
475 |             confidence_level: Confidence in profit estimate
476 |             
    | ^^^^^^^^^^^^
477 |         Returns:
478 |             Comprehensive profitability analysis
    |
help: Remove whitespace from blank line

E501 Line too long (113 > 100)
   --> ai_trading/execution/transaction_costs.py:490:101
    |
488 |             # Calculate net profit and margins
489 |             net_expected_profit = expected_profit - transaction_cost
490 |             profit_margin = net_expected_profit / max(abs(expected_profit), 0.01) if expected_profit != 0 else -1
    |                                                                                                     ^^^^^^^^^^^^^
491 |             cost_ratio = transaction_cost / max(abs(expected_profit), 0.01) if expected_profit != 0 else float('inf')
    |

E501 Line too long (117 > 100)
   --> ai_trading/execution/transaction_costs.py:491:101
    |
489 |             net_expected_profit = expected_profit - transaction_cost
490 |             profit_margin = net_expected_profit / max(abs(expected_profit), 0.01) if expected_profit != 0 else -1
491 |             cost_ratio = transaction_cost / max(abs(expected_profit), 0.01) if expected_profit != 0 else float('inf')
    |                                                                                                     ^^^^^^^^^^^^^^^^^
492 |
493 |             # Calculate required safety margin
    |

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:532:101
    |
530 |             )  # AI-AGENT-REF: structured logging
531 |             raise KeyError(f"Required market data missing: {str(e)}")
532 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
533 |             _log.error(
534 |                 "PROFITABILITY_VALIDATION_FAILED",
    |

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:564:101
    |
562 |             return spread_estimates.get(liquidity_tier, 0.005)
563 |
564 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
565 |             _log.warning(
566 |                 "SPREAD_PERCENT_ESTIMATE_FAILED",
    |

E501 Line too long (122 > 100)
   --> ai_trading/execution/transaction_costs.py:587:101
    |
585 |                 return LiquidityTier.ILLIQUID
586 |
587 |         except (ValueError, TypeError, ZeroDivisionError, OverflowError, KeyError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
588 |             _log.warning(
589 |                 "LIQUIDITY_CLASSIFICATION_FAILED",
    |

E501 Line too long (106 > 100)
   --> ai_trading/execution/transaction_costs.py:596:101
    |
595 | # AI-AGENT-REF: Transaction cost analysis for portfolio optimization
596 | def create_transaction_cost_calculator(config: dict[str, Any] | None = None) -> TransactionCostCalculator:
    |                                                                                                     ^^^^^^
597 |     """
598 |     Factory function to create transaction cost calculator with configuration.
    |

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:599:1
    |
597 |     """
598 |     Factory function to create transaction cost calculator with configuration.
599 |     
    | ^^^^
600 |     Args:
601 |         config: Optional configuration dictionary
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/execution/transaction_costs.py:602:1
    |
600 |     Args:
601 |         config: Optional configuration dictionary
602 |         
    | ^^^^^^^^
603 |     Returns:
604 |         Configured TransactionCostCalculator instance
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/features/__init__.py:4:1
   |
 2 |   Feature engineering public API.
 3 |   """
 4 | / from .indicators import (
 5 | |     compute_macd,
 6 | |     compute_macds,
 7 | |     compute_atr,
 8 | |     compute_vwap,
 9 | |     ensure_columns,
10 | | )
   | |_^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/features/indicators.py:11:1
   |
10 |   # AI-AGENT-REF: pandas and numpy are hard dependencies
11 | / import pandas as pd
12 | |
13 | | import logging
14 | |
15 | | from ai_trading.indicators import ema, atr  # type: ignore
   | |__________________________________________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/features/pipeline.py:8:1
   |
 6 |   """
 7 |
 8 | / from typing import Any
 9 | |
10 | | import numpy as np
11 | | import pandas as pd
12 | |
13 | | # Use the centralized logger as per AGENTS.md
14 | | from ai_trading.logging import logger
15 | |
16 | | # sklearn is a hard dependency
17 | | from sklearn.base import BaseEstimator, TransformerMixin
18 | | from sklearn.pipeline import Pipeline
19 | | from sklearn.preprocessing import RobustScaler, StandardScaler
   | |______________________________________________________________^
   |
help: Organize imports

E501 Line too long (101 > 100)
   --> ai_trading/governance/promotion.py:106:101
    |
104 |             if shadow_models:
105 |                 self.logger.warning(
106 |                     f"Strategy {strategy} already has shadow models: {[m[0] for m in shadow_models]}"
    |                                                                                                     ^
107 |                 )
    |

E501 Line too long (109 > 100)
   --> ai_trading/governance/promotion.py:200:101
    |
199 |             self.logger.debug(
200 |                 f"Updated shadow metrics for model {model_id}: {current_metrics.sessions_completed} sessions"
    |                                                                                                     ^^^^^^^^^
201 |             )
    |

E501 Line too long (101 > 100)
   --> ai_trading/health_monitor.py:476:101
    |
474 |             ):
475 |                 self._send_alert(
476 |                     f"CRITICAL: {component} has {checker.consecutive_failures} consecutive failures",
    |                                                                                                     ^
477 |                     latest_result,
478 |                 )
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/indicators.py:3:1
   |
 1 |   """Technical indicator helpers used across the bot."""
 2 |
 3 | / from __future__ import annotations
 4 | |
 5 | | # AI-AGENT-REF: numpy is a hard dependency
 6 | | import numpy as np
 7 | |
 8 | | # pandas is a hard dependency
 9 | | import pandas as pd
10 | |
11 | | import logging
12 | | from functools import lru_cache
13 | | from typing import Any
14 | | from collections.abc import Iterable
   | |____________________________________^
15 |
16 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/integrations/rate_limit.py:8:1
   |
 6 |   """
 7 |
 8 | / import asyncio
 9 | | import logging
10 | | import random
11 | | import threading
12 | | import time
13 | | from ai_trading.utils import sleep as psleep
14 | | from collections import defaultdict
15 | | from contextlib import asynccontextmanager
16 | | from dataclasses import dataclass, field
17 | | from typing import Any
   | |______________________^
18 |
19 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> ai_trading/integrations/rate_limit.py:117:1
    |
115 |         """
116 |         self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
117 |         
    | ^^^^^^^^
118 |         # Use config values if provided, otherwise use defaults
119 |         if config is not None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/logging/__init__.py:250:1
    |
248 |             "msg": record.getMessage(),
249 |         }
250 |         
    | ^^^^^^^^
251 |         # In compact mode, only include essential extra fields
252 |         essential_fields = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/logging/__init__.py:257:1
    |
255 |             "timestamp",  # For trading events
256 |         }
257 |         
    | ^^^^^^^^
258 |         for k, v in record.__dict__.items():
259 |             if k in essential_fields and k not in {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/logging/__init__.py:269:1
    |
267 |                     v = _mask_secret(v)
268 |                 payload[k] = v
269 |         
    | ^^^^^^^^
270 |         if record.exc_info:
271 |             exc_type, exc_value, _exc_tb = record.exc_info
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/logging/__init__.py:275:1
    |
273 |                 traceback.format_exception_only(exc_type, exc_value)
274 |             ).strip()
275 |         
    | ^^^^^^^^
276 |         return json.dumps(payload, default=self._json_default, ensure_ascii=False, separators=(',', ':'))
    |
help: Remove whitespace from blank line

E501 Line too long (105 > 100)
   --> ai_trading/logging/__init__.py:276:101
    |
274 |             ).strip()
275 |         
276 |         return json.dumps(payload, default=self._json_default, ensure_ascii=False, separators=(',', ':'))
    |                                                                                                     ^^^^^
    |

W293 [*] Blank line contains whitespace
   --> ai_trading/logging/__init__.py:281:1
    |
279 | class EmitOnceLogger:
280 |     """Logger wrapper that tracks emitted messages to prevent duplicates."""
281 |     
    | ^^^^
282 |     def __init__(self, base_logger: logging.Logger):
283 |         self._logger = base_logger
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/logging/__init__.py:286:1
    |
284 |         self._emitted_keys: set[str] = set()
285 |         self._lock = threading.Lock()
286 |     
    | ^^^^
287 |     def _emit_if_new(self, level: str, key: str, msg: str, *args, **kwargs) -> None:
288 |         """Emit log message only if key hasn't been seen before."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/logging/__init__.py:294:1
    |
292 |                 log_method = getattr(self._logger, level.lower())
293 |                 log_method(msg, *args, **kwargs)
294 |     
    | ^^^^
295 |     def info(self, msg: str, key: str | None = None, *args, **kwargs) -> None:
296 |         """Log info message once per key (defaults to message text as key)."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/logging/__init__.py:299:1
    |
297 |         emit_key = key or msg
298 |         self._emit_if_new("info", emit_key, msg, *args, **kwargs)
299 |     
    | ^^^^
300 |     def debug(self, msg: str, key: str | None = None, *args, **kwargs) -> None:
301 |         """Log debug message once per key (defaults to message text as key)."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/logging/__init__.py:304:1
    |
302 |         emit_key = key or msg
303 |         self._emit_if_new("debug", emit_key, msg, *args, **kwargs)
304 |     
    | ^^^^
305 |     def warning(self, msg: str, key: str | None = None, *args, **kwargs) -> None:
306 |         """Log warning message once per key (defaults to message text as key)."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/logging/__init__.py:309:1
    |
307 |         emit_key = key or msg
308 |         self._emit_if_new("warning", emit_key, msg, *args, **kwargs)
309 |     
    | ^^^^
310 |     def error(self, msg: str, key: str | None = None, *args, **kwargs) -> None:
311 |         """Log error message once per key (defaults to message text as key)."""
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> ai_trading/logging/__init__.py:502:77
    |
500 | logger = get_logger(__name__)  # AI-AGENT-REF: use sanitizing adapter
501 |
502 | # Create emit-once logger instance for preventing duplicate startup messages  
    |                                                                             ^^
503 | logger_once = EmitOnceLogger(logger)
    |
help: Remove trailing whitespace

W292 [*] No newline at end of file
   --> ai_trading/logging/__init__.py:993:2
    |
991 |     "error_kv",
992 |     "SanitizingLoggerAdapter",
993 | ]
    |  ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/logging/emit_once.py:3:1
  |
1 |   """Helper to emit a log record only once per process."""
2 |
3 | / from __future__ import annotations
4 | |
5 | | from logging import Logger
6 | | import threading
  | |________________^
7 |
8 |   _emitted: set[str] = set()
  |
help: Organize imports

E501 Line too long (109 > 100)
 --> ai_trading/logging/normalize.py:1:101
  |
1 | """Central helpers to canonicalize logging payload fields."""  # AI-AGENT-REF: shared normalization utilities
  |                                                                                                     ^^^^^^^^^
2 |
3 | from __future__ import annotations
  |

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/logging/normalize.py:12:24
   |
10 |     try:
11 |         return str(value).strip().lower()
12 |     except Exception:  # noqa: BLE001
   |                        ^^^^^^^^^^^^^^
13 |         return ""
   |
help: Remove unused `noqa` directive

E501 Line too long (122 > 100)
  --> ai_trading/logging/normalize.py:35:101
   |
34 | def canon_feed(value: Any) -> str:
35 |     """Return canonical feed: "iex" or "sip". Defaults to "sip" on ambiguity."""  # AI-AGENT-REF: unify feed normalization
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
36 |
37 |     s = _as_lower_str(value)
   |

E501 Line too long (136 > 100)
  --> ai_trading/logging/normalize.py:46:101
   |
45 | … -> dict:
46 | …timeframe if present."""  # AI-AGENT-REF: ensure logging extras use canonical values
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
47 | …
48 | …
   |

RUF100 [*] Unused `noqa` directive (non-enabled: `E402`, `BLE001`)
 --> ai_trading/main.py:1:1
  |
1 | # ruff: noqa: E402, I001, BLE001
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2 | from __future__ import annotations
  |
help: Remove unused `noqa` directive

E501 Line too long (112 > 100)
   --> ai_trading/main.py:109:101
    |
108 | def _get_int_env(var: str, default: int | None = None) -> int | None:
109 |     """Parse integer from environment. Return default on missing/invalid."""  # AI-AGENT-REF: env parsing helper
    |                                                                                                     ^^^^^^^^^^^^
110 |     val = os.getenv(var)
111 |     if val is None or val == "":
    |

RUF100 [*] Unused `noqa` directive (non-enabled: `ARG001`)
   --> ai_trading/main.py:128:35
    |
126 |     """Install SIGINT/SIGTERM handlers."""  # AI-AGENT-REF
127 |
128 |     def _handler(signum, frame):  # noqa: ARG001
    |                                   ^^^^^^^^^^^^^^
129 |         logger.info(
130 |             "SERVICE_SIGNAL",
    |
help: Remove unused `noqa` directive

E501 Line too long (122 > 100)
   --> ai_trading/main.py:393:101
    |
391 |         "capital_cap": float(getattr(S, "capital_cap", 0.0)),
392 |         "dollar_risk_limit": float(getattr(S, "dollar_risk_limit", 0.0)),
393 |         "max_position_mode": str(getattr(S, "max_position_mode", getattr(config, "max_position_mode", "STATIC"))).upper(),
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
394 |         "max_position_size": float(getattr(S, "max_position_size", 0.0)),
395 |     }
    |

E501 Line too long (104 > 100)
   --> ai_trading/main.py:501:101
    |
499 |                     if gc_result.get("objects_collected", 0) > 100:
500 |                         logger.info(
501 |                             f"Cycle {count}: Garbage collected {gc_result['objects_collected']} objects"
    |                                                                                                     ^^^^
502 |                         )
    |

E501 Line too long (119 > 100)
   --> ai_trading/main.py:538:101
    |
536 |             # AI-AGENT-REF: periodic AUTO sizing refresh
537 |             try:
538 |                 mode_now = str(getattr(S, "max_position_mode", getattr(config, "max_position_mode", "STATIC"))).upper()
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^
539 |                 if mode_now == "AUTO":
540 |                     resolved_size, meta = resolve_max_position_size(config, S, force_refresh=False)
    |

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/metrics/__init__.py:44:20
   |
42 |     Summary = _Summary
43 |     start_http_server = _start_http_server
44 | except Exception:  # noqa: BLE001
   |                    ^^^^^^^^^^^^^^
45 |     # Minimal no-op fallbacks so imports & tests never crash if the pkg is missing
46 |     class _NoopRegistry:
   |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/metrics/__init__.py:83:1
   |
82 | # AI-AGENT-REF: expose basic metrics helpers under canonical package
83 | from ai_trading.monitoring.metrics import safe_divide, calculate_atr  # noqa: E402
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Organize imports

RUF100 [*] Unused `noqa` directive (non-enabled: `E402`)
  --> ai_trading/metrics/__init__.py:83:71
   |
82 | # AI-AGENT-REF: expose basic metrics helpers under canonical package
83 | from ai_trading.monitoring.metrics import safe_divide, calculate_atr  # noqa: E402
   |                                                                       ^^^^^^^^^^^^
   |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/ml_model.py:1:1
  |
1 | / from __future__ import annotations
2 | |
3 | | import joblib
4 | | import pandas as pd
5 | | import numpy as np
6 | | import joblib
7 | | from dataclasses import dataclass
8 | | from pathlib import Path
9 | | from typing import Any, Iterable, Sequence
  | |__________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/model_registry.py:5:1
   |
 3 |   """
 4 |
 5 | / from __future__ import annotations
 6 | |
 7 | | import hashlib
 8 | | import json
 9 | | import pickle
10 | | from datetime import UTC, datetime
11 | | from pathlib import Path
12 | | from typing import Any
13 | | import os
   | |_________^
14 |
15 |   try:
   |
help: Organize imports

E501 Line too long (103 > 100)
   --> ai_trading/model_registry.py:116:101
    |
114 |             if got != expected_dataset_fingerprint:
115 |                 raise ValueError(
116 |                     f"Dataset fingerprint mismatch: expected {expected_dataset_fingerprint}, got {got}"
    |                                                                                                     ^^^
117 |                 )
118 |         return model, meta
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/monitoring/__init__.py:20:1
   |
19 |   # Core monitoring components
20 | / from .alerting import (
21 | |     Alert,
22 | |     AlertChannel,
23 | |     AlertManager,
24 | |     AlertSeverity,
25 | |     EmailAlerter,
26 | |     SlackAlerter,
27 | | )
28 | | from .performance_dashboard import (
29 | |     AnomalyDetector,
30 | |     PerformanceDashboard,
31 | |     PerformanceMetrics,
32 | |     RealTimePnLTracker,
33 | | )
34 | |
35 | | # Import internal monitoring components
36 | | from .metrics import MetricsCollector, PerformanceMonitor
37 | | from .alerts import AlertType
38 | | from .dashboard import RealtimeMetrics
39 | | # AI-AGENT-REF: expose order health monitor package
40 | | from .order_health_monitor import (
41 | |     OrderHealthMonitor,
42 | |     OrderInfo,
43 | |     get_order_health_monitor,
44 | |     _active_orders,
45 | |     _order_tracking_lock,
46 | |     _order_health_monitor,
47 | | )
48 | | from .system_health_checker import collect_system_health
   | |________________________________________________________^
   |
help: Organize imports

E501 Line too long (107 > 100)
   --> ai_trading/monitoring/alerting.py:173:101
    |
171 |                 <p><strong>Source:</strong> {alert.source}</p>
172 |                 <p><strong>Time:</strong> {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')}</p>
173 |                 <div style="background-color: #f8f9fa; padding: 10px; border-radius: 4px; margin: 10px 0;">
    |                                                                                                     ^^^^^^^
174 |                     <pre style="margin: 0; white-space: pre-wrap;">{alert.message}</pre>
175 |                 </div>
    |

E501 Line too long (103 > 100)
   --> ai_trading/monitoring/alerting.py:186:101
    |
184 |                 html_body += f"""
185 |                     <tr>
186 |                         <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">{key}</td>
    |                                                                                                     ^^^
187 |                         <td style="border: 1px solid #ddd; padding: 8px;">{value}</td>
188 |                     </tr>
    |

E501 Line too long (101 > 100)
   --> ai_trading/monitoring/alerting.py:585:101
    |
583 |                     logger.error(f"Error processing alert: {e}")
584 |
585 |         except (RuntimeError, OSError, ValueError, TypeError) as e:  # AI-AGENT-REF: narrow exception
    |                                                                                                     ^
586 |             logger.error(f"Error in alert processing loop: {e}")
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/monitoring/alerts.py:8:1
   |
 6 |   """
 7 |
 8 | / import threading
 9 | | import time
10 | | from ai_trading.utils.timing import sleep as psleep  # AI-AGENT-REF: avoid circular import
11 | | from collections.abc import Callable
12 | | from datetime import UTC, datetime, timedelta
13 | | from enum import Enum
14 | |
15 | | # Use the centralized logger as per AGENTS.md
16 | | from ai_trading.logging import logger
17 | |
18 | | from ..core.constants import PERFORMANCE_THRESHOLDS, RISK_PARAMETERS
   | |____________________________________________________________________^
   |
help: Organize imports

E501 Line too long (115 > 100)
   --> ai_trading/monitoring/alerts.py:324:101
    |
322 |                     "max_drawdown",
323 |                     AlertSeverity.CRITICAL,
324 |                     f"Maximum drawdown {max_drawdown:.2%} exceeds threshold {self.thresholds['MAX_DRAWDOWN']:.2%}",
    |                                                                                                     ^^^^^^^^^^^^^^^
325 |                     value=max_drawdown,
326 |                     threshold=self.thresholds["MAX_DRAWDOWN"],
    |

E501 Line too long (111 > 100)
   --> ai_trading/monitoring/alerts.py:335:101
    |
333 |                     "sharpe_ratio",
334 |                     AlertSeverity.WARNING,
335 |                     f"Sharpe ratio {sharpe_ratio:.2f} below minimum {self.thresholds['MIN_SHARPE_RATIO']:.2f}",
    |                                                                                                     ^^^^^^^^^^^
336 |                     value=sharpe_ratio,
337 |                     threshold=self.thresholds["MIN_SHARPE_RATIO"],
    |

E501 Line too long (125 > 100)
   --> ai_trading/monitoring/alerts.py:369:101
    |
367 |                     f"position_concentration_{symbol}",
368 |                     AlertSeverity.WARNING,
369 |                     f"Position in {symbol} ({position_pct:.2%}) exceeds maximum {self.risk_params['MAX_POSITION_SIZE']:.2%}",
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
370 |                     symbol=symbol,
371 |                     value=position_pct,
    |

E501 Line too long (106 > 100)
   --> ai_trading/monitoring/alerts.py:416:101
    |
414 |                     "high_slippage",
415 |                     AlertSeverity.WARNING,
416 |                     f"Average slippage {avg_slippage_bps:.1f} bps exceeds maximum {max_slippage_bps} bps",
    |                                                                                                     ^^^^^^
417 |                     value=avg_slippage_bps,
418 |                     threshold=max_slippage_bps,
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/monitoring/metrics.py:3:1
   |
 1 |   """Performance metrics for trading results with numerical stability."""
 2 |
 3 | / from __future__ import annotations
 4 | |
 5 | | import time
 6 | | from collections import defaultdict
 7 | | from datetime import datetime, UTC
 8 | | from typing import Any, Dict, Optional
 9 | |
10 | | import numpy as np
11 | | import pandas as pd
12 | |
13 | | # Use the centralized logger as per AGENTS.md
14 | | from ai_trading.logging import logger
   | |_____________________________________^
15 |
16 |   HAS_PANDAS = True
   |
help: Organize imports

W293 Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:137:1
    |
135 |     """
136 |     Comprehensive metrics collection for trading operations.
137 |     
    | ^^^^
138 |     Collects and tracks various performance metrics, system metrics,
139 |     and trading-related measurements for monitoring and analysis.
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:141:1
    |
139 |     and trading-related measurements for monitoring and analysis.
140 |     """
141 |     
    | ^^^^
142 |     def __init__(self):
143 |         """Initialize metrics collector."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:148:1
    |
146 |         self.gauges: Dict[str, float] = {}
147 |         self.start_time = time.time()
148 |         
    | ^^^^^^^^
149 |         logger.info("MetricsCollector initialized")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:150:1
    |
149 |         logger.info("MetricsCollector initialized")
150 |     
    | ^^^^
151 |     def inc_counter(self, name: str, value: int = 1, labels: Optional[Dict[str, str]] = None):
152 |         """Increment a counter metric."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:155:1
    |
153 |         key = f"{name}_{hash(str(labels) if labels else '')}"
154 |         self.counters[key] += value
155 |         
    | ^^^^^^^^
156 |     def observe_latency(self, name: str, latency_ms: float, labels: Optional[Dict[str, str]] = None):
157 |         """Record a latency observation."""
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> ai_trading/monitoring/metrics.py:156:101
    |
154 |         self.counters[key] += value
155 |         
156 |     def observe_latency(self, name: str, latency_ms: float, labels: Optional[Dict[str, str]] = None):
    |                                                                                                     ^
157 |         """Record a latency observation."""
158 |         key = f"{name}_{hash(str(labels) if labels else '')}"
    |

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:160:1
    |
158 |         key = f"{name}_{hash(str(labels) if labels else '')}"
159 |         self.histograms[key].append(latency_ms)
160 |         
    | ^^^^^^^^
161 |         # Keep only recent observations to prevent memory growth
162 |         if len(self.histograms[key]) > 1000:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:164:1
    |
162 |         if len(self.histograms[key]) > 1000:
163 |             self.histograms[key] = self.histograms[key][-500:]
164 |     
    | ^^^^
165 |     def gauge_set(self, name: str, value: float, labels: Optional[Dict[str, str]] = None):
166 |         """Set a gauge metric value."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:169:1
    |
167 |         key = f"{name}_{hash(str(labels) if labels else '')}"
168 |         self.gauges[key] = value
169 |     
    | ^^^^
170 |     def record_trade_metrics(self, symbol: str, side: str, quantity: float, price: float, 
171 |                            latency_ms: float, success: bool):
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> ai_trading/monitoring/metrics.py:170:90
    |
168 |         self.gauges[key] = value
169 |     
170 |     def record_trade_metrics(self, symbol: str, side: str, quantity: float, price: float, 
    |                                                                                          ^
171 |                            latency_ms: float, success: bool):
172 |         """Record comprehensive trade execution metrics."""
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:174:1
    |
172 |         """Record comprehensive trade execution metrics."""
173 |         labels = {"symbol": symbol, "side": side}
174 |         
    | ^^^^^^^^
175 |         if success:
176 |             self.inc_counter("trades_executed", labels=labels)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:182:1
    |
180 |         else:
181 |             self.inc_counter("trades_failed", labels=labels)
182 |             
    | ^^^^^^^^^^^^
183 |         self.gauge_set("last_trade_timestamp", time.time(), labels)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:184:1
    |
183 |         self.gauge_set("last_trade_timestamp", time.time(), labels)
184 |     
    | ^^^^
185 |     def get_metrics_summary(self) -> Dict[str, Any]:
186 |         """Get a summary of all collected metrics."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:193:1
    |
191 |             "uptime_seconds": time.time() - self.start_time
192 |         }
193 |         
    | ^^^^^^^^
194 |         # Calculate histogram statistics
195 |         for name, values in self.histograms.items():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:206:1
    |
204 |                     "p99": np.percentile(values, 99)
205 |                 }
206 |         
    | ^^^^^^^^
207 |         return summary
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:213:1
    |
211 |     """
212 |     Unified performance monitoring for trading operations.
213 |     
    | ^^^^
214 |     Combines metrics collection with performance analysis and alerting.
215 |     This is the primary monitoring interface for the trading system.
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:217:1
    |
215 |     This is the primary monitoring interface for the trading system.
216 |     """
217 |     
    | ^^^^
218 |     def __init__(self):
219 |         """Initialize performance monitor."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:225:1
    |
223 |         self.last_cache_update = 0
224 |         self.cache_ttl = 60  # seconds
225 |         
    | ^^^^^^^^
226 |         logger.info("PerformanceMonitor initialized")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:227:1
    |
226 |         logger.info("PerformanceMonitor initialized")
227 |     
    | ^^^^
228 |     def inc_counter(self, name: str, value: int = 1, labels: Optional[Dict[str, str]] = None):
229 |         """Increment a counter metric."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:231:1
    |
229 |         """Increment a counter metric."""
230 |         self.metrics_collector.inc_counter(name, value, labels)
231 |     
    | ^^^^
232 |     def observe_latency(self, name: str, latency_ms: float, labels: Optional[Dict[str, str]] = None):
233 |         """Record a latency observation."""
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> ai_trading/monitoring/metrics.py:232:101
    |
230 |         self.metrics_collector.inc_counter(name, value, labels)
231 |     
232 |     def observe_latency(self, name: str, latency_ms: float, labels: Optional[Dict[str, str]] = None):
    |                                                                                                     ^
233 |         """Record a latency observation."""
234 |         self.metrics_collector.observe_latency(name, latency_ms, labels)
    |

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:235:1
    |
233 |         """Record a latency observation."""
234 |         self.metrics_collector.observe_latency(name, latency_ms, labels)
235 |     
    | ^^^^
236 |     def gauge_set(self, name: str, value: float, labels: Optional[Dict[str, str]] = None):
237 |         """Set a gauge metric value."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:239:1
    |
237 |         """Set a gauge metric value."""
238 |         self.metrics_collector.gauge_set(name, value, labels)
239 |     
    | ^^^^
240 |     def record_trade(self, trade_data: Dict[str, Any]):
241 |         """Record a trade for performance analysis."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:244:1
    |
242 |         trade_data["timestamp"] = trade_data.get("timestamp", datetime.now(UTC))
243 |         self.trade_history.append(trade_data)
244 |         
    | ^^^^^^^^
245 |         # Keep only recent trades to prevent memory growth
246 |         if len(self.trade_history) > 10000:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:248:1
    |
246 |         if len(self.trade_history) > 10000:
247 |             self.trade_history = self.trade_history[-5000:]
248 |         
    | ^^^^^^^^
249 |         # Record metrics
250 |         self.metrics_collector.record_trade_metrics(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:258:1
    |
256 |             success=trade_data.get("success", False)
257 |         )
258 |     
    | ^^^^
259 |     def get_performance_metrics(self, force_refresh: bool = False) -> Dict[str, Any]:
260 |         """Get comprehensive performance metrics."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:262:1
    |
260 |         """Get comprehensive performance metrics."""
261 |         current_time = time.time()
262 |         
    | ^^^^^^^^
263 |         # Check cache validity
264 |         if not force_refresh and (current_time - self.last_cache_update) < self.cache_ttl:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:266:1
    |
264 |         if not force_refresh and (current_time - self.last_cache_update) < self.cache_ttl:
265 |             return self.performance_cache
266 |         
    | ^^^^^^^^
267 |         # Convert trade history to DataFrame for analysis
268 |         if self.trade_history:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:270:1
    |
268 |         if self.trade_history:
269 |             df = pd.DataFrame(self.trade_history)
270 |             
    | ^^^^^^^^^^^^
271 |             # Calculate basic metrics if return column exists
272 |             if "return" in df.columns:
    |
help: Remove whitespace from blank line

E501 Line too long (105 > 100)
   --> ai_trading/monitoring/metrics.py:277:101
    |
275 |             else:
276 |                 basic_metrics = {"sharpe": 0.0, "max_drawdown": 0.0}
277 |                 advanced_metrics = {"sortino": 0.0, "calmar": 0.0, "win_rate": 0.0, "profit_factor": 0.0}
    |                                                                                                     ^^^^^
278 |         else:
279 |             basic_metrics = {"sharpe": 0.0, "max_drawdown": 0.0}
    |

E501 Line too long (101 > 100)
   --> ai_trading/monitoring/metrics.py:280:101
    |
278 |         else:
279 |             basic_metrics = {"sharpe": 0.0, "max_drawdown": 0.0}
280 |             advanced_metrics = {"sortino": 0.0, "calmar": 0.0, "win_rate": 0.0, "profit_factor": 0.0}
    |                                                                                                     ^
281 |         
282 |         # Combine with system metrics
    |

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:281:1
    |
279 |             basic_metrics = {"sharpe": 0.0, "max_drawdown": 0.0}
280 |             advanced_metrics = {"sortino": 0.0, "calmar": 0.0, "win_rate": 0.0, "profit_factor": 0.0}
281 |         
    | ^^^^^^^^
282 |         # Combine with system metrics
283 |         system_metrics = self.metrics_collector.get_metrics_summary()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:284:1
    |
282 |         # Combine with system metrics
283 |         system_metrics = self.metrics_collector.get_metrics_summary()
284 |         
    | ^^^^^^^^
285 |         self.performance_cache = {
286 |             **basic_metrics,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/monitoring/metrics.py:292:1
    |
290 |             "cache_timestamp": current_time
291 |         }
292 |         
    | ^^^^^^^^
293 |         self.last_cache_update = current_time
294 |         return self.performance_cache
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/monitoring/system_health_checker.py:1:1
  |
1 | / from __future__ import annotations
2 | | from dataclasses import dataclass, field
3 | | from datetime import UTC, datetime
4 | | from typing import Any, Dict
5 | |
6 | | # AI-AGENT-REF: lightweight facade for system health tests
7 | | from ai_trading.config import management as config
8 | | from ai_trading.monitoring.order_health_monitor import get_order_health_monitor
  | |_______________________________________________________________________________^
  |
help: Organize imports

E501 Line too long (149 > 100)
  --> ai_trading/net/http.py:44:101
   |
42 | …
43 | …
44 | …DELETE", "HEAD", "OPTIONS", "PATCH"}),  # AI-AGENT-REF: frozenset for urllib3 compatibility
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 | …
46 | …
   |

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/pipeline.py:2:1
  |
1 |   # Core dependencies
2 | / import logging
3 | | import numpy as np
  | |__________________^
4 |
5 |   logger = logging.getLogger(__name__)
  |
help: Organize imports

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/portfolio/core.py:64:24
   |
62 |                 )
63 |             )
64 |     except Exception:  # noqa: BLE001
   |                        ^^^^^^^^^^^^^^
65 |         df_min = pd.DataFrame()
66 |     return _last_close_from(df_min)
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/portfolio/core.py:171:73
    |
169 |             extra={"component": "portfolio_summary", "error_type": "data"},
170 |         )
171 |     except Exception as exc:  # Final safety net for unexpected errors  # noqa: BLE001
    |                                                                         ^^^^^^^^^^^^^^
172 |         logger.warning(
173 |             "Portfolio summary failed - unexpected error: %s",
    |
help: Remove unused `noqa` directive

W293 Blank line contains whitespace
  --> ai_trading/portfolio/optimizer.py:76:1
   |
74 |     """
75 |     Portfolio-Level Decision Engine for Churn Reduction.
76 |     
   | ^^^^
77 |     Implements sophisticated portfolio optimization that evaluates trades based on
78 |     their impact on overall portfolio performance rather than individual signals.
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> ai_trading/portfolio/optimizer.py:87:1
   |
85 |         """
86 |         Initialize portfolio optimizer.
87 |         
   | ^^^^^^^^
88 |         Args:
89 |             improvement_threshold: Minimum portfolio improvement required (2%+)
   |
help: Remove whitespace from blank line

E501 Line too long (109 > 100)
   --> ai_trading/portfolio/optimizer.py:108:101
    |
106 |         self.last_rebalance: datetime | None = None
107 |
108 |         logger.info(f"PortfolioOptimizer initialized with improvement_threshold={improvement_threshold:.1%}")
    |                                                                                                     ^^^^^^^^^
109 |
110 |     def calculate_portfolio_kelly_efficiency(self,
    |

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:116:1
    |
114 |         """
115 |         Calculate portfolio-level Kelly efficiency score.
116 |         
    | ^^^^^^^^
117 |         Args:
118 |             positions: Current position sizes {symbol: size}
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:121:1
    |
119 |             returns_data: Historical returns {symbol: [returns]}
120 |             current_prices: Current market prices {symbol: price}
121 |             
    | ^^^^^^^^^^^^
122 |         Returns:
123 |             Kelly efficiency score (0-1), higher is better
    |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
   --> ai_trading/portfolio/optimizer.py:130:101
    |
129 |             # Calculate portfolio returns
130 |             portfolio_returns = self._calculate_portfolio_returns(positions, returns_data, current_prices)
    |                                                                                                     ^^^^^^
131 |
132 |             if len(portfolio_returns) < 20:  # Minimum sample size
    |

E501 Line too long (106 > 100)
   --> ai_trading/portfolio/optimizer.py:147:101
    |
145 |             avg_loss = statistics.mean(negative_returns)
146 |
147 |             optimal_fraction = self.kelly_calculator.calculate_kelly_fraction(win_rate, avg_win, avg_loss)
    |                                                                                                     ^^^^^^
148 |
149 |             # Calculate current leverage vs optimal
    |

E501 Line too long (115 > 100)
   --> ai_trading/portfolio/optimizer.py:153:101
    |
151 |             efficiency = min(1.0, optimal_fraction / max(0.01, current_leverage))
152 |
153 |             logger.debug(f"Portfolio Kelly efficiency: {efficiency:.3f} (optimal_fraction={optimal_fraction:.3f})")
    |                                                                                                     ^^^^^^^^^^^^^^^
154 |             return efficiency
    |

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:199:1
    |
197 |         """
198 |         Calculate impact of adding/modifying position on portfolio correlations.
199 |         
    | ^^^^^^^^
200 |         Args:
201 |             new_symbol: Symbol being considered
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:204:1
    |
202 |             current_positions: Current portfolio positions
203 |             correlation_matrix: Correlation matrix between symbols
204 |             
    | ^^^^^^^^^^^^
205 |         Returns:
206 |             Correlation penalty (0-1), higher means more correlated
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:248:1
    |
246 |         """
247 |         Evaluate the impact of a proposed trade on portfolio performance.
248 |         
    | ^^^^^^^^
249 |         Args:
250 |             symbol: Symbol to trade
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:254:1
    |
252 |             current_positions: Current portfolio positions
253 |             market_data: Market data including prices, returns, correlations
254 |             
    | ^^^^^^^^^^^^
255 |         Returns:
256 |             Comprehensive trade impact analysis
    |
help: Remove whitespace from blank line

E501 Line too long (108 > 100)
   --> ai_trading/portfolio/optimizer.py:268:101
    |
267 |             # Calculate transaction cost
268 |             transaction_cost = self._estimate_transaction_cost(symbol, abs(position_change), current_prices)
    |                                                                                                     ^^^^^^^^
269 |
270 |             # Calculate correlation impact
    |

E501 Line too long (113 > 100)
   --> ai_trading/portfolio/optimizer.py:271:101
    |
270 |             # Calculate correlation impact
271 |             correlation_impact = self.calculate_correlation_impact(symbol, current_positions, correlation_matrix)
    |                                                                                                     ^^^^^^^^^^^^^
272 |
273 |             # Simulate new portfolio
    |

E501 Line too long (123 > 100)
   --> ai_trading/portfolio/optimizer.py:278:101
    |
277 |             # Calculate Kelly efficiency change
278 |             current_efficiency = self.calculate_portfolio_kelly_efficiency(current_positions, returns_data, current_prices)
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^
279 |             new_efficiency = self.calculate_portfolio_kelly_efficiency(new_positions, returns_data, current_prices)
280 |             kelly_efficiency_change = new_efficiency - current_efficiency
    |

E501 Line too long (115 > 100)
   --> ai_trading/portfolio/optimizer.py:279:101
    |
277 |             # Calculate Kelly efficiency change
278 |             current_efficiency = self.calculate_portfolio_kelly_efficiency(current_positions, returns_data, current_prices)
279 |             new_efficiency = self.calculate_portfolio_kelly_efficiency(new_positions, returns_data, current_prices)
    |                                                                                                     ^^^^^^^^^^^^^^^
280 |             kelly_efficiency_change = new_efficiency - current_efficiency
    |

E501 Line too long (103 > 100)
   --> ai_trading/portfolio/optimizer.py:283:101
    |
282 |             # Estimate expected return change (simplified)
283 |             expected_return_change = self._estimate_return_change(symbol, position_change, market_data)
    |                                                                                                     ^^^
284 |
285 |             # Estimate risk change
    |

E501 Line too long (109 > 100)
   --> ai_trading/portfolio/optimizer.py:286:101
    |
285 |             # Estimate risk change
286 |             risk_change = self._estimate_risk_change(symbol, position_change, current_positions, market_data)
    |                                                                                                     ^^^^^^^^^
287 |
288 |             # Calculate tax impact
    |

E501 Line too long (134 > 100)
   --> ai_trading/portfolio/optimizer.py:292:101
    |
291 |             # Calculate net benefit
292 |             net_benefit = expected_return_change - transaction_cost - (correlation_impact * self.max_correlation_penalty) + tax_impact
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
293 |
294 |             # Calculate confidence based on data quality
    |

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:319:1
    |
317 |         """
318 |         Make portfolio-level decision about whether to execute a trade.
319 |         
    | ^^^^^^^^
320 |         Args:
321 |             symbol: Symbol to trade
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:325:1
    |
323 |             current_positions: Current portfolio positions
324 |             market_data: Market data for analysis
325 |             
    | ^^^^^^^^^^^^
326 |         Returns:
327 |             Tuple of (decision, reasoning)
    |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
   --> ai_trading/portfolio/optimizer.py:331:101
    |
329 |         try:
330 |             # Analyze trade impact
331 |             impact = self.evaluate_trade_impact(symbol, proposed_position, current_positions, market_data)
    |                                                                                                     ^^^^^^
332 |
333 |             # Apply decision logic with multiple criteria
    |

E501 Line too long (137 > 100)
   --> ai_trading/portfolio/optimizer.py:337:101
    |
335 | …nt threshold
336 | …threshold:
337 | …t benefit {impact.net_benefit:.3f} below threshold {self.improvement_threshold:.3f}"
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
338 | …
339 | …eturn
    |

E501 Line too long (162 > 100)
   --> ai_trading/portfolio/optimizer.py:341:101
    |
339 | …
340 | …rn_change) * 0.5:
341 | …st {impact.transaction_cost:.3f} too high vs expected return {impact.expected_return_change:.3f}"
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
342 | …
343 | …
    |

E501 Line too long (152 > 100)
   --> ai_trading/portfolio/optimizer.py:345:101
    |
343 | …
344 | …ion_penalty:
345 | …n impact {impact.correlation_impact:.3f} exceeds maximum {self.max_correlation_penalty:.3f}"
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
346 | …
347 | …
    |

E501 Line too long (128 > 100)
   --> ai_trading/portfolio/optimizer.py:349:101
    |
347 |             # 4. Check Kelly efficiency improvement
348 |             if impact.kelly_efficiency_change < -0.05:  # Don't reduce efficiency by more than 5%
349 |                 return PortfolioDecision.REJECT, f"Kelly efficiency would decrease by {abs(impact.kelly_efficiency_change):.3f}"
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
350 |
351 |             # 5. Check confidence level
    |

E501 Line too long (101 > 100)
   --> ai_trading/portfolio/optimizer.py:353:101
    |
351 |             # 5. Check confidence level
352 |             if impact.confidence < 0.6:
353 |                 return PortfolioDecision.DEFER, f"Low confidence {impact.confidence:.3f} in analysis"
    |                                                                                                     ^
354 |
355 |             # 6. Consider batching for small improvements
    |

E501 Line too long (115 > 100)
   --> ai_trading/portfolio/optimizer.py:357:101
    |
355 |             # 6. Consider batching for small improvements
356 |             if 0.005 <= impact.net_benefit < self.improvement_threshold:
357 |                 return PortfolioDecision.BATCH, f"Small improvement {impact.net_benefit:.3f} suitable for batching"
    |                                                                                                     ^^^^^^^^^^^^^^^
358 |
359 |             # Approve trade
    |

E501 Line too long (148 > 100)
   --> ai_trading/portfolio/optimizer.py:360:101
    |
359 | …
360 | …improvement: {impact.net_benefit:.3f}, Kelly change: {impact.kelly_efficiency_change:.3f}"
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
361 | …
362 | …
    |

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:375:1
    |
373 |         """
374 |         Determine if portfolio should be rebalanced based on drift and tax considerations.
375 |         
    | ^^^^^^^^
376 |         Args:
377 |             current_positions: Current position sizes
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:380:1
    |
378 |             target_weights: Target portfolio weights
379 |             current_prices: Current market prices
380 |             
    | ^^^^^^^^^^^^
381 |         Returns:
382 |             Tuple of (should_rebalance, reasoning)
    |
help: Remove whitespace from blank line

E501 Line too long (116 > 100)
   --> ai_trading/portfolio/optimizer.py:410:101
    |
408 |             # Check drift thresholds
409 |             if max_drift > self.rebalance_drift_threshold:
410 |                 return True, f"Maximum drift {max_drift:.3f} exceeds threshold {self.rebalance_drift_threshold:.3f}"
    |                                                                                                     ^^^^^^^^^^^^^^^^
411 |
412 |             # Check time-based rebalancing (quarterly for tax efficiency)
    |

E501 Line too long (116 > 100)
   --> ai_trading/portfolio/optimizer.py:424:101
    |
422 |             return False, f"Error: {str(e)}"
423 |
424 |     def _estimate_transaction_cost(self, symbol: str, trade_size: float, current_prices: dict[str, float]) -> float:
    |                                                                                                     ^^^^^^^^^^^^^^^^
425 |         """Estimate transaction cost for a trade."""
426 |         try:
    |

E501 Line too long (113 > 100)
   --> ai_trading/portfolio/optimizer.py:441:101
    |
439 |             return 0.01  # Default small cost
440 |
441 |     def _estimate_return_change(self, symbol: str, position_change: float, market_data: dict[str, Any]) -> float:
    |                                                                                                     ^^^^^^^^^^^^^
442 |         """Estimate expected return change from position modification."""
443 |         try:
    |

E501 Line too long (103 > 100)
   --> ai_trading/portfolio/optimizer.py:460:101
    |
459 |     def _estimate_risk_change(self, symbol: str, position_change: float,
460 |                             current_positions: dict[str, float], market_data: dict[str, Any]) -> float:
    |                                                                                                     ^^^
461 |         """Estimate portfolio risk change from position modification."""
462 |         try:
    |

E501 Line too long (115 > 100)
   --> ai_trading/portfolio/optimizer.py:481:101
    |
479 |             return 0.0
480 |
481 |     def _estimate_tax_impact(self, symbol: str, position_change: float, current_prices: dict[str, float]) -> float:
    |                                                                                                     ^^^^^^^^^^^^^^^
482 |         """Estimate tax impact of trade."""
483 |         try:
    |

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:521:1
    |
519 |     """
520 |     Factory function to create portfolio optimizer with configuration.
521 |     
    | ^^^^
522 |     Args:
523 |         config: Optional configuration dictionary
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/portfolio/optimizer.py:524:1
    |
522 |     Args:
523 |         config: Optional configuration dictionary
524 |         
    | ^^^^^^^^
525 |     Returns:
526 |         Configured PortfolioOptimizer instance
    |
help: Remove whitespace from blank line

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
 --> ai_trading/position/__init__.py:7:20
  |
5 | try:
6 |     from .core import MarketRegime  # AI-AGENT-REF: real enum if available
7 | except Exception:  # noqa: BLE001
  |                    ^^^^^^^^^^^^^^
8 |     from enum import Enum
  |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/position/correlation_analyzer.py:13:1
   |
11 |   """
12 |
13 | / import logging
14 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
15 | | from collections import defaultdict
16 | | from dataclasses import dataclass
17 | | from datetime import UTC, datetime
18 | | from enum import Enum
19 | | from typing import Any
20 | |
21 | | # AI-AGENT-REF: graceful imports with fallbacks
22 | | # Use hard imports since numpy and pandas are dependencies
23 | | import numpy as np
24 | | import pandas as pd
   | |___________________^
25 |
26 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

W292 [*] No newline at end of file
   --> ai_trading/position/correlation_analyzer.py:766:10
    |
764 |             reduce_exposure_symbols=[],
765 |             rebalance_recommendations=[],
766 |         )
    |          ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/position/intelligent_manager.py:14:1
   |
12 |   """
13 |
14 | / import logging
15 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
16 | | from dataclasses import dataclass
17 | | from datetime import UTC, datetime
18 | | from enum import Enum
19 | | from typing import Any
20 | |
21 | | from .correlation_analyzer import PortfolioAnalysis, PortfolioCorrelationAnalyzer
22 | | from .market_regime import MarketRegime, MarketRegimeDetector, RegimeMetrics
23 | | from .profit_taking import ProfitTakingEngine
24 | | from .technical_analyzer import DivergenceType, SignalStrength, TechnicalSignalAnalyzer
25 | | from .trailing_stops import TrailingStopManager
   | |_______________________________________________^
26 |
27 |   # AI-AGENT-REF: graceful imports with fallbacks
   |
help: Organize imports

E501 Line too long (107 > 100)
   --> ai_trading/position/intelligent_manager.py:695:101
    |
694 |         if correlation_analysis.get("should_reduce", False):
695 |             return f"Portfolio risk management: {correlation_analysis.get('reduce_reason', 'correlation')}"
    |                                                                                                     ^^^^^^^
696 |
697 |         regime = regime_analysis.get("regime", MarketRegime.RANGE_BOUND)
    |

W292 [*] No newline at end of file
   --> ai_trading/position/intelligent_manager.py:736:10
    |
734 |             contributing_factors=[],
735 |             timestamp=datetime.now(UTC),
736 |         )
    |          ^
    |
help: Add trailing newline

W292 [*] No newline at end of file
   --> ai_trading/position/legacy_manager.py:464:19
    |
463 |     except COMMON_EXC:  # AI-AGENT-REF: narrow
464 |         return 0.0
    |                   ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/position/profit_taking.py:13:1
   |
11 |   """
12 |
13 | / import logging
14 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
15 | | from dataclasses import dataclass
16 | | from datetime import UTC, datetime
17 | | from enum import Enum
18 | | from typing import Any
19 | |
20 | | # AI-AGENT-REF: graceful imports with fallbacks
21 | | # Use hard imports since numpy and pandas are dependencies 
22 | | import pandas as pd
   | |___________________^
23 |
24 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

W291 [*] Trailing whitespace
  --> ai_trading/position/profit_taking.py:21:59
   |
20 | # AI-AGENT-REF: graceful imports with fallbacks
21 | # Use hard imports since numpy and pandas are dependencies 
   |                                                           ^
22 | import pandas as pd
   |
help: Remove trailing whitespace

W292 [*] No newline at end of file
   --> ai_trading/position/profit_taking.py:627:24
    |
626 |         except COMMON_EXC:  # AI-AGENT-REF: narrow
627 |             return 50.0
    |                        ^
    |
help: Add trailing newline

E501 Line too long (101 > 100)
   --> ai_trading/position/technical_analyzer.py:370:101
    |
368 |                 rs_normalized = max(0.0, min(1.0, (symbol_return + 10.0) / 20.0))
369 |
370 |             # Calculate percentile rank (simplified - would need sector data for full implementation)
    |                                                                                                     ^
371 |             # For now, use relative strength as proxy
372 |             rank = rs_normalized
    |

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/position_sizing.py:36:24
   |
34 |     try:
35 |         return float(val)
36 |     except Exception:  # noqa: BLE001
   |                        ^^^^^^^^^^^^^^
37 |         return default
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/position_sizing.py:110:24
    |
108 |         eq = _coerce_float(data.get("equity"), 0.0)
109 |         return eq
110 |     except Exception:  # noqa: BLE001
    |                        ^^^^^^^^^^^^^^
111 |         return 0.0
    |
help: Remove unused `noqa` directive

E501 Line too long (105 > 100)
   --> ai_trading/position_sizing.py:114:101
    |
114 | def resolve_max_position_size(cfg, tcfg, *, force_refresh: bool = False) -> tuple[float, dict[str, Any]]:
    |                                                                                                     ^^^^^
115 |     """Resolve max_position_size according to mode and settings."""  # AI-AGENT-REF: AUTO sizing resolver
116 |     mode = str(getattr(tcfg, "max_position_mode", getattr(cfg, "max_position_mode", "STATIC"))).upper()
    |

E501 Line too long (105 > 100)
   --> ai_trading/position_sizing.py:115:101
    |
114 | def resolve_max_position_size(cfg, tcfg, *, force_refresh: bool = False) -> tuple[float, dict[str, Any]]:
115 |     """Resolve max_position_size according to mode and settings."""  # AI-AGENT-REF: AUTO sizing resolver
    |                                                                                                     ^^^^^
116 |     mode = str(getattr(tcfg, "max_position_mode", getattr(cfg, "max_position_mode", "STATIC"))).upper()
117 |     ttl = float(getattr(tcfg, "dynamic_size_refresh_secs", getattr(cfg, "dynamic_size_refresh_secs", 3600.0)))
    |

E501 Line too long (103 > 100)
   --> ai_trading/position_sizing.py:116:101
    |
114 | def resolve_max_position_size(cfg, tcfg, *, force_refresh: bool = False) -> tuple[float, dict[str, Any]]:
115 |     """Resolve max_position_size according to mode and settings."""  # AI-AGENT-REF: AUTO sizing resolver
116 |     mode = str(getattr(tcfg, "max_position_mode", getattr(cfg, "max_position_mode", "STATIC"))).upper()
    |                                                                                                     ^^^
117 |     ttl = float(getattr(tcfg, "dynamic_size_refresh_secs", getattr(cfg, "dynamic_size_refresh_secs", 3600.0)))
118 |     cap = _coerce_float(getattr(tcfg, "capital_cap", 0.0), 0.0)
    |

E501 Line too long (110 > 100)
   --> ai_trading/position_sizing.py:117:101
    |
115 |     """Resolve max_position_size according to mode and settings."""  # AI-AGENT-REF: AUTO sizing resolver
116 |     mode = str(getattr(tcfg, "max_position_mode", getattr(cfg, "max_position_mode", "STATIC"))).upper()
117 |     ttl = float(getattr(tcfg, "dynamic_size_refresh_secs", getattr(cfg, "dynamic_size_refresh_secs", 3600.0)))
    |                                                                                                     ^^^^^^^^^^
118 |     cap = _coerce_float(getattr(tcfg, "capital_cap", 0.0), 0.0)
119 |     vmin = getattr(tcfg, "max_position_size_min", None)
    |

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/predict.py:10:20
   |
 8 |     _CACHETOOLS_AVAILABLE = True
 9 |     _sentiment_cache = TTLCache(maxsize=1000, ttl=3600)
10 | except Exception:  # noqa: BLE001
   |                    ^^^^^^^^^^^^^^
11 |     _CACHETOOLS_AVAILABLE = False
12 |     _sentiment_cache: dict[str, float] = {}
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/predict.py:49:24
   |
47 |         data = resp.json()
48 |         score = float(data.get("score", 0.0))
49 |     except Exception:  # noqa: BLE001
   |                        ^^^^^^^^^^^^^^
50 |         score = 0.0
   |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/process_manager.py:1:1
  |
1 | from __future__ import annotations
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2 |
3 | # AI-AGENT-REF: test facade for legacy process manager imports
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/production_system.py:8:1
   |
 6 |   """
 7 |
 8 | / from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
 9 | | from datetime import UTC, datetime
10 | | from typing import Any
11 | |
12 | | # Use the centralized logger as per AGENTS.md
13 | | from ai_trading.logging import logger
14 | |
15 | | from ai_trading.core.enums import OrderSide, OrderType, RiskLevel
16 | | from ai_trading.execution.liquidity import LiquidityManager
17 | | from ai_trading.execution.production_engine import ProductionExecutionCoordinator
18 | | from ai_trading.monitoring import (
19 | |     AlertManager,
20 | |     AlertSeverity,
21 | |     PerformanceDashboard,
22 | | )
23 | | from ai_trading.risk import (
24 | |     DynamicPositionSizer,
25 | |     RiskManager,
26 | |     TradingHaltManager,
27 | | )
28 | | from ai_trading.strategies.multi_timeframe import MultiTimeframeAnalyzer
29 | | from ai_trading.strategies.regime_detector import RegimeDetector
   | |________________________________________________________________^
   |
help: Organize imports

E501 Line too long (106 > 100)
   --> ai_trading/production_system.py:114:101
    |
112 |                 "Trading System",
113 |                 "System Started",
114 |                 f"Production trading system started successfully with ${self.account_equity:,.2f} equity",
    |                                                                                                     ^^^^^^
115 |                 AlertSeverity.INFO,
116 |             )
    |

W292 [*] No newline at end of file
   --> ai_trading/production_system.py:619:25
    |
617 |         except COMMON_EXC:  # AI-AGENT-REF: narrow
618 |             # Any error in health check should return unhealthy status
619 |             return False
    |                         ^
    |
help: Add trailing newline

RUF100 [*] Unused `noqa` directive (unused: `F401`)
  --> ai_trading/rebalancer.py:15:70
   |
13 | try:  # AI-AGENT-REF: resilient Alpaca import
14 |     from alpaca.common.exceptions import APIError  # type: ignore
15 |     from alpaca.trading.client import TradingClient  # type: ignore  # noqa: F401
   |                                                                      ^^^^^^^^^^^^
16 | except ImportError:  # AI-AGENT-REF: optional Alpaca dependency
17 |     TradingClient = None  # type: ignore
   |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/rebalancer.py:23:1
   |
23 | / from ai_trading.portfolio import compute_portfolio_weights
24 | | from ai_trading.settings import get_rebalance_interval_min
25 | | from ai_trading.config import get_settings
   | |__________________________________________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/risk/__init__.py:21:1
   |
20 |   # Core risk management components
21 | / from .circuit_breakers import (
22 | |     CircuitBreakerState,
23 | |     DeadMansSwitch,
24 | |     DrawdownCircuitBreaker,
25 | |     SafetyLevel,
26 | |     TradingHaltManager,
27 | |     VolatilityCircuitBreaker,
28 | | )
29 | | from .engine import RiskEngine
30 | | from .kelly import (
31 | |     KellyCalculator,
32 | |     KellyCriterion,
33 | |     KellyParams,
34 | |     InstitutionalKelly,
35 | |     institutional_kelly,
36 | | )
37 | | from . import kelly as _kelly
38 | | from ai_trading.settings import (
39 | |     _DEFAULT_CONFIG as SETTINGS_DEFAULT_CONFIG,
40 | |     ensure_default_config,
41 | | )
42 | | from .manager import PortfolioRiskAssessor, RiskManager
43 | |
44 | | # Import risk metrics
45 | | from .metrics import DrawdownAnalyzer, RiskMetricsCalculator
46 | | from .position_sizing import (
47 | |     ATRPositionSizer,
48 | |     DynamicPositionSizer,
49 | |     PortfolioPositionManager,
50 | |     VolatilityPositionSizer,
51 | | )
   | |_^
52 |
53 |   ensure_default_config()
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/risk/adaptive_sizing.py:8:1
   |
 6 |   """
 7 |
 8 | / from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
 9 | | import math
10 | | import statistics
11 | | from datetime import UTC, datetime
12 | | from enum import Enum
13 | | from typing import Any
14 | |
15 | | # Use the centralized logger as per AGENTS.md
16 | | from ai_trading.logging import logger
17 | |
18 | | from ..core.constants import RISK_PARAMETERS
19 | | from ..core.enums import RiskLevel
20 | | from .kelly import KellyCalculator
21 | | from .position_sizing import DynamicPositionSizer
   | |_________________________________________________^
   |
help: Organize imports

E501 Line too long (108 > 100)
   --> ai_trading/risk/adaptive_sizing.py:362:101
    |
360 |         self.regime_multipliers = {
361 |             MarketRegime.BULL_TRENDING: 1.3,  # Increased from 1.2 for more aggressive positioning
362 |             MarketRegime.BEAR_TRENDING: 0.5,  # Reduced from 0.6 for more conservative defensive positioning
    |                                                                                                     ^^^^^^^^
363 |             MarketRegime.SIDEWAYS_RANGE: 0.9,
364 |             MarketRegime.HIGH_VOLATILITY: 0.4,  # Reduced from 0.5 for better risk management
    |

E501 Line too long (117 > 100)
   --> ai_trading/risk/adaptive_sizing.py:365:101
    |
363 |             MarketRegime.SIDEWAYS_RANGE: 0.9,
364 |             MarketRegime.HIGH_VOLATILITY: 0.4,  # Reduced from 0.5 for better risk management
365 |             MarketRegime.LOW_VOLATILITY: 1.2,  # Increased from 1.1 for more aggressive positioning in stable markets
    |                                                                                                     ^^^^^^^^^^^^^^^^^
366 |             MarketRegime.CRISIS: 0.15,  # Reduced from 0.2 for maximum capital preservation
367 |             MarketRegime.NORMAL: 1.0,
    |

E501 Line too long (113 > 100)
   --> ai_trading/risk/adaptive_sizing.py:372:101
    |
370 |         # Volatility regime adjustments - optimized for better risk-adjusted returns
371 |         self.volatility_adjustments = {
372 |             VolatilityRegime.EXTREMELY_LOW: 1.4,  # Increased from 1.3 for more aggressive positioning in low vol
    |                                                                                                     ^^^^^^^^^^^^^
373 |             VolatilityRegime.LOW: 1.15,  # Slightly increased from 1.1
374 |             VolatilityRegime.NORMAL: 1.0,
    |

E501 Line too long (101 > 100)
   --> ai_trading/risk/adaptive_sizing.py:376:101
    |
374 |             VolatilityRegime.NORMAL: 1.0,
375 |             VolatilityRegime.HIGH: 0.65,  # Slightly reduced from 0.7 for better risk management
376 |             VolatilityRegime.EXTREMELY_HIGH: 0.3,  # Reduced from 0.4 for better capital preservation
    |                                                                                                     ^
377 |         }
    |

W292 [*] No newline at end of file
   --> ai_trading/risk/adaptive_sizing.py:672:54
    |
670 |             return f"Position adjusted for: {', '.join(factors)}"
671 |         else:
672 |             return "Standard position sizing applied"
    |                                                      ^
    |
help: Add trailing newline

RUF100 [*] Unused `noqa` directive (unused: `F401`)
  --> ai_trading/risk/engine.py:35:70
   |
33 | try:  # AI-AGENT-REF: resilient Alpaca import
34 |     from alpaca.common.exceptions import APIError  # type: ignore
35 |     from alpaca.trading.client import TradingClient  # type: ignore  # noqa: F401
   |                                                                      ^^^^^^^^^^^^
36 | except ImportError:  # AI-AGENT-REF: optional Alpaca dependency
37 |     TradingClient = None  # type: ignore
   |
help: Remove unused `noqa` directive

E501 Line too long (104 > 100)
   --> ai_trading/risk/engine.py:129:101
    |
127 |         self._volatility_cache: dict[str, tuple] = {}
128 |         # Optional, lazily available data client for historical fetches.
129 |         # Priority: runtime ctx.data_client > self.data_client (constructed here) > ctx.api as fallback.
    |                                                                                                     ^^^^
130 |         self.data_client = None
131 |         try:
    |

E501 Line too long (105 > 100)
   --> ai_trading/risk/engine.py:837:101
    |
835 |         max_allowed = min(available_asset_capacity, available_strategy_capacity)
836 |
837 |         # AI-AGENT-REF: Use signal weight directly (confidence already factored into weight by allocator)
    |                                                                                                     ^^^^^
838 |         # The strategy allocator already assigns weights based on confidence and portfolio constraints
839 |         # Ensure weight is numeric to prevent type errors in arithmetic operations
    |

E501 Line too long (102 > 100)
   --> ai_trading/risk/engine.py:838:101
    |
837 |         # AI-AGENT-REF: Use signal weight directly (confidence already factored into weight by allocator)
838 |         # The strategy allocator already assigns weights based on confidence and portfolio constraints
    |                                                                                                     ^^
839 |         # Ensure weight is numeric to prevent type errors in arithmetic operations
840 |         try:
    |

E501 Line too long (105 > 100)
   --> ai_trading/risk/engine.py:844:101
    |
842 |         except (ValueError, TypeError) as e:
843 |             logger.warning(
844 |                 "Invalid signal.weight value '%s' for %s in _apply_weight_limits, defaulting to 0.0: %s",
    |                                                                                                     ^^^^^
845 |                 sig.weight,
846 |                 sig.symbol,
    |

E501 Line too long (104 > 100)
    --> ai_trading/risk/engine.py:1250:101
     |
1249 |     raise TypeError(
1250 |         "Invalid arguments for calculate_position_size. Expected (cash, price) or (signal, cash, price)"
     |                                                                                                     ^^^^
1251 |     )
     |

E501 Line too long (122 > 100)
  --> ai_trading/risk/kelly.py:80:101
   |
78 |             max_fraction if max_fraction is not None else self.config.kelly_fraction_max
79 |         )
80 |         # For backward compatibility, if no confidence_level in kwargs but we have explicit params, use 0.95 (old default)
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
81 |         if "confidence_level" in kwargs:
82 |             self.confidence_level = kwargs["confidence_level"]
   |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/risk/manager.py:8:1
   |
 6 |   """
 7 |
 8 | / from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
 9 | | import math
10 | | import statistics
11 | | from datetime import UTC, datetime, timedelta
12 | |
13 | | # Use the centralized logger as per AGENTS.md
14 | | from ai_trading.logging import logger
15 | |
16 | | from ..core.constants import RISK_PARAMETERS
17 | | from ..core.enums import RiskLevel
18 | | from .kelly import KellyCalculator
   | |__________________________________^
   |
help: Organize imports

E501 Line too long (105 > 100)
  --> ai_trading/risk/manager.py:94:101
   |
92 |             if position_size_pct > self.max_position_size:
93 |                 assessment["warnings"].append(
94 |                     f"Position size {position_size_pct:.2%} exceeds maximum {self.max_position_size:.2%}"
   |                                                                                                     ^^^^^
95 |                 )
96 |                 # Recommend reduced size
   |

E501 Line too long (124 > 100)
   --> ai_trading/risk/manager.py:108:101
    |
106 |             if estimated_portfolio_risk > self.max_portfolio_risk:
107 |                 assessment["warnings"].append(
108 |                     f"Estimated portfolio risk {estimated_portfolio_risk:.2%} exceeds maximum {self.max_portfolio_risk:.2%}"
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
109 |                 )
    |

E501 Line too long (111 > 100)
   --> ai_trading/risk/manager.py:221:101
    |
219 |             if self.current_drawdown > self.max_drawdown_threshold:
220 |                 assessment["alerts"].append(
221 |                     f"Drawdown {self.current_drawdown:.2%} exceeds threshold {self.max_drawdown_threshold:.2%}"
    |                                                                                                     ^^^^^^^^^^^
222 |                 )
223 |                 assessment["recommendations"].append("Reduce position sizes")
    |

W292 [*] No newline at end of file
   --> ai_trading/risk/manager.py:529:37
    |
527 |         except COMMON_EXC as e:  # AI-AGENT-REF: narrow
528 |             logger.error(f"Error applying stress scenario: {e}")
529 |             return {"error": str(e)}
    |                                     ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/risk/position_sizing.py:9:1
   |
 7 |   """
 8 |
 9 | / from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
10 | | import math
11 | | import statistics
12 | | from datetime import UTC, datetime
13 | | from typing import Any
14 | |
15 | | # Use the centralized logger as per AGENTS.md
16 | | from ai_trading.logging import logger
17 | |
18 | | from ..core.constants import RISK_PARAMETERS
19 | | from ..core.enums import RiskLevel
20 | | from .kelly import KellyCriterion
   | |_________________________________^
   |
help: Organize imports

E501 Line too long (101 > 100)
   --> ai_trading/risk/position_sizing.py:463:101
    |
462 |         logger.info(
463 |             f"PortfolioPositionManager initialized with max_portfolio_risk={self.max_portfolio_risk}"
    |                                                                                                     ^
464 |         )
    |

W292 [*] No newline at end of file
   --> ai_trading/risk/position_sizing.py:599:43
    |
597 |         except COMMON_EXC as e:  # AI-AGENT-REF: narrow
598 |             logger.error(f"Error recalculating risk exposure: {e}")
599 |             self.total_risk_exposure = 0.0
    |                                           ^
    |
help: Add trailing newline

E501 Line too long (106 > 100)
   --> ai_trading/risk/pre_trade_validation.py:208:101
    |
206 |                     category=ValidationCategory.LIQUIDITY,
207 |                     status=ValidationStatus.REJECTED,
208 |                     message=f"Insufficient liquidity: avg volume {avg_volume:,} < {self.min_liquidity:,}",
    |                                                                                                     ^^^^^^
209 |                     details=details,
210 |                     score=0.0,
    |

E501 Line too long (112 > 100)
   --> ai_trading/risk/pre_trade_validation.py:226:101
    |
224 |                     category=ValidationCategory.LIQUIDITY,
225 |                     status=ValidationStatus.WARNING,
226 |                     message=f"High participation rate: {participation_rate:.1%} > {self.max_participation:.1%}",
    |                                                                                                     ^^^^^^^^^^^^
227 |                     details=details,
228 |                     score=0.5,
    |

E501 Line too long (107 > 100)
   --> ai_trading/risk/pre_trade_validation.py:414:101
    |
412 |                     category=ValidationCategory.POSITION_LIMITS,
413 |                     status=ValidationStatus.REJECTED,
414 |                     message=f"Position size {position_pct:.1%} exceeds limit {self.max_position_size:.1%}",
    |                                                                                                     ^^^^^^^
415 |                     details=details,
416 |                     score=0.0,
    |

E501 Line too long (104 > 100)
   --> ai_trading/risk/pre_trade_validation.py:418:101
    |
416 |                     score=0.0,
417 |                     recommendations=[
418 |                         f"Reduce quantity to max {int(account_equity * self.max_position_size / price)}"
    |                                                                                                     ^^^^
419 |                     ],
420 |                 )
    |

E501 Line too long (101 > 100)
  --> ai_trading/rl_trading/inference.py:94:101
   |
92 |                 if model_action_space.shape[0] != 1:
93 |                     self.logger.error(
94 |                         f"Continuous action space mismatch: model shape {model_action_space.shape}, "
   |                                                                                                     ^
95 |                         f"expected (1,)"
96 |                     )
   |

E501 Line too long (106 > 100)
  --> ai_trading/rl_trading/tests/smoke_parity.py:82:101
   |
80 |             obs_cont, reward, terminated, truncated, info = env_cont.step(action)
81 |             logger.info(
82 |                 f"    Step {i}: action={action:.2f}, reward={reward:.4f}, position={info['position']:.2f}"
   |                                                                                                     ^^^^^^
83 |             )
   |

E501 Line too long (107 > 100)
   --> ai_trading/rl_trading/tests/smoke_parity.py:109:101
    |
107 |             )
108 |             logger.info(
109 |                 f"    Inference config discrete actions: {inference_config.action_config.discrete_actions}"
    |                                                                                                     ^^^^^^^
110 |             )
    |

E501 Line too long (124 > 100)
   --> ai_trading/rl_trading/tests/smoke_parity.py:127:101
    |
125 |                 )
126 |                 logger.info(
127 |                     f"    Postprocessed action: {action_details['action']} (confidence: {action_details['confidence']:.2f})"
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
128 |                 )
    |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/rl_trading/train.py:3:1
   |
 1 |   """Enhanced RL training with reward shaping and evaluation callbacks."""
 2 |
 3 | / import json
 4 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
 5 | | import os
 6 | | from datetime import UTC, datetime
 7 | | from typing import Any
 8 | |
 9 | | import numpy as np
10 | |
11 | | # Use the centralized logger as per AGENTS.md
12 | | from ai_trading.logging import logger
   | |_____________________________________^
13 |
14 |   try:
   |
help: Organize imports

E501 Line too long (107 > 100)
   --> ai_trading/rl_trading/train.py:117:101
    |
115 | …                     if self.verbose > 0:
116 | …                         logger.info(
117 | …                             f"Early stopping after {self.patience} evaluations without improvement"
    |                                                                                               ^^^^^^^
118 | …                         )
119 | …                     return False
    |

E501 Line too long (104 > 100)
   --> ai_trading/rl_trading/train.py:200:101
    |
198 |                 if self.verbose > 0:
199 |                     logger.info(
200 |                         f"Eval at step {self.n_calls}: mean_reward={mean_reward:.4f} ± {std_reward:.4f}"
    |                                                                                                     ^^^^
201 |                     )
    |

E501 Line too long (108 > 100)
   --> ai_trading/rl_trading/train.py:691:101
    |
690 |         logger.info(
691 |             f"Training completed with final reward: {results['final_evaluation'].get('mean_reward', 'N/A')}"
    |                                                                                                     ^^^^^^^^
692 |         )
    |

W292 [*] No newline at end of file
   --> ai_trading/rl_trading/train.py:700:25
    |
699 | if __name__ == "__main__":
700 |     train_rl_model_cli()
    |                         ^
    |
help: Add trailing newline

E501 Line too long (101 > 100)
  --> ai_trading/runtime/http_wrapped.py:14:101
   |
12 |     fetch: Callable[[], Any], retries: int = 3, backoff: float = 0.05
13 | ) -> Any:
14 |     """Return JSON-decoded payload with basic retry logic."""  # AI-AGENT-REF: add HTTP retry wrapper
   |                                                                                                     ^
15 |     attempts = max(1, int(retries))
16 |     last_exc: Exception | None = None
   |

E501 Line too long (112 > 100)
   --> ai_trading/safety/monitoring.py:245:101
    |
243 |                     "type": "order_rate_limit",
244 |                     "severity": AlertSeverity.WARNING,
245 |                     "message": f"Order rate limit exceeded: {self.metrics['orders_this_minute']} orders/minute",
    |                                                                                                     ^^^^^^^^^^^^
246 |                     "action": "pause_trading",
247 |                 }
    |

E741 Ambiguous variable name: `l`
   --> ai_trading/safety/monitoring.py:484:42
    |
483 |         # Calculate statistics
484 |         latencies = [l["latency_ms"] for l in self.metrics["order_latency"]]
    |                                          ^
485 |         avg_latency = sum(latencies) / len(latencies) if latencies else 0
486 |         max_latency = max(latencies) if latencies else 0
    |

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/scripts/self_check.py:25:31
   |
23 |         }
24 |         print(json.dumps(payload))
25 |     except Exception as exc:  # noqa: BLE001
   |                               ^^^^^^^^^^^^^^
26 |         print(json.dumps({"msg": "SELF_CHECK_FAIL", "error": str(exc)}))
27 |         raise SystemExit(1)
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/security.py:29:40
   |
27 |     from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
28 |     _CRYPTOGRAPHY_AVAILABLE = True
29 | except Exception:  # pragma: no cover  # noqa: BLE001
   |                                        ^^^^^^^^^^^^^^
30 |     _CRYPTOGRAPHY_AVAILABLE = False
31 |     class Fernet:  # type: ignore[override]
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `D401`)
  --> ai_trading/security.py:35:51
   |
33 |             pass
34 |
35 |         def encrypt(self, data: bytes) -> bytes:  # noqa: D401 - dummy passthrough
   |                                                   ^^^^^^^^^^^^
36 |             return data
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `D401`)
  --> ai_trading/security.py:38:52
   |
36 |             return data
37 |
38 |         def decrypt(self, token: bytes) -> bytes:  # noqa: D401 - dummy passthrough
   |                                                    ^^^^^^^^^^^^
39 |             return token
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `F821`, `F841`)
 --> ai_trading/settings.py:3:1
  |
1 | """Runtime settings with env aliases and safe defaults."""
2 |
3 | # ruff: noqa: F821,F841,I001
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4 | from __future__ import annotations
  |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/settings.py:18:20
   |
16 | try:  # AI-AGENT-REF: tolerate pydantic internals missing
17 |     from pydantic.fields import FieldInfo
18 | except Exception:  # noqa: BLE001  pragma: no cover
   |                    ^^^^^^^^^^^^^^
19 |     FieldInfo = object
   |
help: Remove unused `noqa` directive

E501 Line too long (107 > 100)
  --> ai_trading/settings.py:76:101
   |
74 |     # General runtime configuration
75 |     env: str = Field(default="test", alias="APP_ENV")  # AI-AGENT-REF: environment name
76 |     market_calendar: str = Field(default="XNYS", alias="MARKET_CALENDAR")  # AI-AGENT-REF: trading calendar
   |                                                                                                     ^^^^^^^
77 |     data_provider: str = Field(default="mock", alias="DATA_PROVIDER")  # AI-AGENT-REF: data provider source
78 |     log_level: str = Field(default="INFO", alias="LOG_LEVEL")  # AI-AGENT-REF: log level
   |

E501 Line too long (107 > 100)
  --> ai_trading/settings.py:77:101
   |
75 |     env: str = Field(default="test", alias="APP_ENV")  # AI-AGENT-REF: environment name
76 |     market_calendar: str = Field(default="XNYS", alias="MARKET_CALENDAR")  # AI-AGENT-REF: trading calendar
77 |     data_provider: str = Field(default="mock", alias="DATA_PROVIDER")  # AI-AGENT-REF: data provider source
   |                                                                                                     ^^^^^^^
78 |     log_level: str = Field(default="INFO", alias="LOG_LEVEL")  # AI-AGENT-REF: log level
79 |     enable_memory_optimization: bool = Field(default=True)  # AI-AGENT-REF: memory tweaks
   |

E501 Line too long (103 > 100)
  --> ai_trading/settings.py:80:101
   |
78 |     log_level: str = Field(default="INFO", alias="LOG_LEVEL")  # AI-AGENT-REF: log level
79 |     enable_memory_optimization: bool = Field(default=True)  # AI-AGENT-REF: memory tweaks
80 |     log_compact_json: bool = Field(False, alias="LOG_COMPACT_JSON")  # AI-AGENT-REF: compact log format
   |                                                                                                     ^^^
81 |     alpaca_api_key: str | None = Field(default=None, alias="ALPACA_API_KEY")  # AI-AGENT-REF: Alpaca key
82 |     alpaca_secret_key: SecretStr | None = Field(
   |

E501 Line too long (104 > 100)
  --> ai_trading/settings.py:81:101
   |
79 |     enable_memory_optimization: bool = Field(default=True)  # AI-AGENT-REF: memory tweaks
80 |     log_compact_json: bool = Field(False, alias="LOG_COMPACT_JSON")  # AI-AGENT-REF: compact log format
81 |     alpaca_api_key: str | None = Field(default=None, alias="ALPACA_API_KEY")  # AI-AGENT-REF: Alpaca key
   |                                                                                                     ^^^^
82 |     alpaca_secret_key: SecretStr | None = Field(
83 |         default=None, alias="ALPACA_SECRET_KEY"
   |

E501 Line too long (101 > 100)
  --> ai_trading/settings.py:89:101
   |
87 |         default="https://paper-api.alpaca.markets", alias="ALPACA_BASE_URL"
88 |     )  # AI-AGENT-REF: Alpaca base URL
89 |     trading_mode: str = Field(default="balanced", alias="TRADING_MODE")  # AI-AGENT-REF: trading mode
   |                                                                                                     ^
90 |     webhook_secret: str | None = Field(default=None, alias="WEBHOOK_SECRET")  # AI-AGENT-REF: webhook secret
91 |     testing: bool = Field(False, alias="TESTING")  # AI-AGENT-REF: test mode toggle
   |

E501 Line too long (108 > 100)
  --> ai_trading/settings.py:90:101
   |
88 |     )  # AI-AGENT-REF: Alpaca base URL
89 |     trading_mode: str = Field(default="balanced", alias="TRADING_MODE")  # AI-AGENT-REF: trading mode
90 |     webhook_secret: str | None = Field(default=None, alias="WEBHOOK_SECRET")  # AI-AGENT-REF: webhook secret
   |                                                                                                     ^^^^^^^^
91 |     testing: bool = Field(False, alias="TESTING")  # AI-AGENT-REF: test mode toggle
92 |     shadow_mode: bool = Field(False, alias="SHADOW_MODE")  # AI-AGENT-REF: shadow trades
   |

E501 Line too long (101 > 100)
  --> ai_trading/settings.py:94:101
   |
92 |     shadow_mode: bool = Field(False, alias="SHADOW_MODE")  # AI-AGENT-REF: shadow trades
93 |     log_market_fetch: bool = Field(True, alias="LOG_MARKET_FETCH")  # AI-AGENT-REF: fetch logging
94 |     healthcheck_port: int = Field(9001, alias="HEALTHCHECK_PORT")  # AI-AGENT-REF: health server port
   |                                                                                                     ^
95 |     min_health_rows: int = Field(120, alias="MIN_HEALTH_ROWS")  # AI-AGENT-REF: health rows threshold
   |

E501 Line too long (101 > 100)
  --> ai_trading/settings.py:95:101
   |
93 |     log_market_fetch: bool = Field(True, alias="LOG_MARKET_FETCH")  # AI-AGENT-REF: fetch logging
94 |     healthcheck_port: int = Field(9001, alias="HEALTHCHECK_PORT")  # AI-AGENT-REF: health server port
95 |     min_health_rows: int = Field(120, alias="MIN_HEALTH_ROWS")  # AI-AGENT-REF: health rows threshold
   |                                                                                                     ^
96 |
97 |     # --- API server configuration ---
   |

E501 Line too long (109 > 100)
   --> ai_trading/settings.py:157:101
    |
155 |         True, env="AI_TRADER_DATA_CACHE_DISK_ENABLE"
156 |     )  # AI-AGENT-REF: disk cache toggle
157 |     pretrade_lookback_days: int = Field(120, alias="PRETRADE_LOOKBACK_DAYS")  # AI-AGENT-REF: safety lookback
    |                                                                                                     ^^^^^^^^^
158 |     verbose_logging: bool = Field(default=False, env="AI_TRADER_VERBOSE_LOGGING")
159 |     # Plotting (matplotlib) allowed in environments that support it
    |

RUF100 [*] Unused `noqa` directive (non-enabled: `F841`)
   --> ai_trading/settings.py:260:41
    |
258 |         return timedelta(minutes=_to_int(getattr(self, "trade_cooldown_min", 15), 15))
259 |
260 |     model_config = SettingsConfigDict(  # noqa: F841
    |                                         ^^^^^^^^^^^^
261 |         env_prefix="AI_TRADER_",
262 |         extra="ignore",
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/settings.py:285:81
    |
283 |     try:
284 |         return int(val)
285 |     except Exception:  # AI-AGENT-REF: tolerate FieldInfo during early imports  # noqa: BLE001
    |                                                                                 ^^^^^^^^^^^^^^
286 |         return 60
    |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/strategies/__init__.py:4:1
  |
2 |   Canonical strategies public API.
3 |   """
4 | / from .momentum import MomentumStrategy
5 | | from .mean_reversion import MeanReversionStrategy
  | |_________________________________________________^
6 |   try:  # AI-AGENT-REF: lazy meta-learning import
7 |       from .meta_learning import MetaLearning
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/backtester.py:1:1
   |
 1 | / from __future__ import annotations
 2 | |
 3 | | import glob
 4 | | import os
 5 | | import sys
 6 | | from abc import ABC, abstractmethod
 7 | | from dataclasses import dataclass
 8 | | from datetime import UTC, datetime
 9 | | from typing import Any
10 | |
11 | | import pandas as pd
12 | |
13 | | # AI-AGENT-REF: Removed legacy trade_execution import as part of shim cleanup
14 | | # from ai_trading import trade_execution as execution_api  # type: ignore
15 | | from ai_trading.core.bot_engine import get_risk_engine
   | |______________________________________________________^
16 |   # Instantiate if needed:
17 |   risk_engine_instance = get_risk_engine()
   |
help: Organize imports

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/strategies/base.py:204:33
    |
202 |             return True
203 |
204 |         except Exception as e:  # noqa: BLE001
    |                                 ^^^^^^^^^^^^^^
205 |             logger.error(f"Error validating signal: {e}")
206 |             return False
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/strategies/base.py:213:33
    |
211 |             self.parameters.update(new_parameters)
212 |             logger.info(f"Strategy {self.name} parameters updated: {new_parameters}")
213 |         except Exception as e:  # noqa: BLE001
    |                                 ^^^^^^^^^^^^^^
214 |             logger.error(f"Error updating strategy parameters: {e}")
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/strategies/base.py:256:33
    |
254 |                 self.max_drawdown = min(self.max_drawdown, return_pct)
255 |
256 |         except Exception as e:  # noqa: BLE001
    |                                 ^^^^^^^^^^^^^^
257 |             logger.error(f"Error updating performance: {e}")
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/strategies/base.py:329:33
    |
327 |             return True
328 |
329 |         except Exception as e:  # noqa: BLE001
    |                                 ^^^^^^^^^^^^^^
330 |             logger.error(f"Error registering strategy: {e}")
331 |             return False
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/strategies/base.py:356:33
    |
354 |             return True
355 |
356 |         except Exception as e:  # noqa: BLE001
    |                                 ^^^^^^^^^^^^^^
357 |             logger.error(f"Error unregistering strategy: {e}")
358 |             return False
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/strategies/base.py:382:33
    |
380 |             return True
381 |
382 |         except Exception as e:  # noqa: BLE001
    |                                 ^^^^^^^^^^^^^^
383 |             logger.error(f"Error activating strategy {strategy_id}: {e}")
384 |             return False
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/strategies/base.py:406:33
    |
404 |                 return False
405 |
406 |         except Exception as e:  # noqa: BLE001
    |                                 ^^^^^^^^^^^^^^
407 |             logger.error(f"Error deactivating strategy {strategy_id}: {e}")
408 |             return False
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/strategies/base.py:443:37
    |
441 |                         strategy.signals_generated += 1
442 |
443 |             except Exception as e:  # noqa: BLE001
    |                                     ^^^^^^^^^^^^^^
444 |                 logger.error(f"Error generating signals from strategy {strategy.name}: {e}")
    |
help: Remove unused `noqa` directive

E501 Line too long (104 > 100)
   --> ai_trading/strategies/base.py:447:101
    |
446 |         logger.debug(
447 |             f"Generated {len(all_signals)} signals from {len(self.active_strategies)} active strategies"
    |                                                                                                     ^^^^
448 |         )
449 |         return all_signals
    |

RUF100 [*] Unused `noqa` directive (non-enabled: `N816`)
   --> ai_trading/strategies/base.py:470:26
    |
469 | # AI-AGENT-REF: legacy base class alias
470 | Strategy = BaseStrategy  # noqa: N816
    |                          ^^^^^^^^^^^^
    |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/imports.py:25:1
   |
24 | # TA library for optimized technical analysis - hard dependency
25 | import ta
   | ^^^^^^^^^
26 | TA_AVAILABLE = True
27 | logger.info("TA library loaded successfully for enhanced technical analysis")
   |
help: Organize imports

W291 [*] Trailing whitespace
  --> ai_trading/strategies/imports.py:33:10
   |
31 | __all__ = [
32 |     "np",
33 |     "pd", 
   |          ^
34 |     "metrics",
35 |     "RandomForestClassifier",
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> ai_trading/strategies/imports.py:39:24
   |
37 |     "ta",
38 |     "NUMPY_AVAILABLE",
39 |     "PANDAS_AVAILABLE", 
   |                        ^
40 |     "SKLEARN_AVAILABLE",
41 |     "TA_AVAILABLE",
   |
help: Remove trailing whitespace

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/strategies/mean_reversion.py:1:1
  |
1 | / from __future__ import annotations
2 | | import pandas as pd
3 | | from .base import StrategySignal
4 | | from ai_trading.logging import logger as log
  | |____________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/metalearning.py:8:1
   |
 6 |   """
 7 |
 8 | / import warnings
 9 | | from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
10 | | from datetime import UTC, datetime, timedelta
11 | | from typing import Any
   | |______________________^
12 |
13 |   warnings.filterwarnings("ignore")
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/metalearning.py:16:1
   |
15 |   # AI-AGENT-REF: Use centralized logger as per AGENTS.md
16 | / from ai_trading.logging import logger
17 | |
18 | | # AI-AGENT-REF: Import dependencies - sklearn is a hard dependency
19 | | import numpy as np
   | |__________________^
20 |
21 |   NUMPY_AVAILABLE = True
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/metalearning.py:27:1
   |
26 |   # AI-AGENT-REF: Import data fetcher for historical data
27 | / from ai_trading.data_fetcher import get_minute_df  # type: ignore
28 | |
29 | |
30 | | # AI-AGENT-REF: Import base strategy framework
31 | | from ..core.enums import OrderSide, RiskLevel
32 | | from .base import BaseStrategy, StrategySignal
33 | |
34 | | # Machine learning imports - sklearn is a hard dependency
35 | | from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
36 | | from sklearn.metrics import accuracy_score
37 | | from sklearn.model_selection import train_test_split
38 | | from sklearn.preprocessing import StandardScaler
   | |________________________________________________^
39 |
40 |   ML_AVAILABLE = True
   |
help: Organize imports

E501 Line too long (150 > 100)
   --> ai_trading/strategies/metalearning.py:303:101
    |
301 | …
302 | …
303 | …len(features_df) if features_df is not None else 0} < {self.parameters['min_data_points']}"
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
304 | …
305 | …
    |

E501 Line too long (105 > 100)
   --> ai_trading/strategies/metalearning.py:328:101
    |
326 |             if len(unique_classes) < 2:
327 |                 logger.error(
328 |                     f"Insufficient class diversity for ML training: only {len(unique_classes)} class(es)"
    |                                                                                                     ^^^^^
329 |                 )
330 |                 return False
    |

E501 Line too long (109 > 100)
   --> ai_trading/strategies/metalearning.py:338:101
    |
336 |             ):  # Need at least 3 samples per class for train/test split
337 |                 logger.warning(
338 |                     f"Small class size detected: {min_class_size} samples. This may affect training quality."
    |                                                                                                     ^^^^^^^^^
339 |                 )
340 |                 # Continue with training but log the warning
    |

W292 [*] No newline at end of file
    --> ai_trading/strategies/metalearning.py:1073:24
     |
1071 |         except COMMON_EXC as e:  # AI-AGENT-REF: narrow
1072 |             logger.error(f"Error in simple fallback prediction: {e}")
1073 |             return None
     |                        ^
     |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/strategies/moving_average_crossover.py:1:1
  |
1 | / from __future__ import annotations
2 | |
3 | | from dataclasses import dataclass
4 | | import logging
5 | | import pandas as pd
6 | |
7 | | from .base import StrategySignal
  | |________________________________^
8 |
9 |   log = logging.getLogger(__name__)
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/multi_timeframe.py:10:1
   |
 9 |   # AI-AGENT-REF: use standard imports for hard dependencies
10 | / from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
11 | | from datetime import UTC, datetime
12 | | from enum import Enum
13 | | from typing import Any
14 | |
15 | | import pandas as pd
16 | |
17 | | # Use the centralized logger as per AGENTS.md
18 | | from ai_trading.logging import logger
19 | |
20 | | from ..core.enums import TimeFrame
   | |__________________________________^
   |
help: Organize imports

E501 Line too long (113 > 100)
   --> ai_trading/strategies/multi_timeframe.py:187:101
    |
186 |         logger.info(
187 |             f"MultiTimeframeAnalyzer initialized with timeframes: {[tf.value for tf in self.primary_timeframes]}"
    |                                                                                                     ^^^^^^^^^^^^^
188 |         )
    |

W292 [*] No newline at end of file
   --> ai_trading/strategies/multi_timeframe.py:957:52
    |
955 |     ) -> dict[TimeFrame, list[MultiTimeframeSignal]]:
956 |         """Get current signals for a symbol."""
957 |         return self.current_signals.get(symbol, {})
    |                                                    ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/performance_allocator.py:9:1
   |
 7 |   """
 8 |
 9 | / from collections import defaultdict, deque
10 | | from dataclasses import dataclass
11 | | from datetime import datetime, timedelta, UTC
12 | | from typing import Any, Dict, List
13 | |
14 | | import numpy as np
15 | | import pandas as pd  # noqa: F401  # AI-AGENT-REF: retained for downstream usage
16 | |
17 | | # Use centralized logger as per AGENTS.md
18 | | from ai_trading.logging import logger
19 | | from ai_trading.config.settings import get_settings  # AI-AGENT-REF: env-backed settings
20 | | from ai_trading.config.management import TradingConfig  # AI-AGENT-REF: config type
   | |______________________________________________________^
   |
help: Organize imports

W293 Blank line contains whitespace
  --> ai_trading/strategies/performance_allocator.py:77:1
   |
75 |     """
76 |     Dynamic strategy allocator based on rolling performance metrics.
77 |     
   | ^^^^
78 |     Tracks strategy performance over a rolling window and adjusts capital
79 |     allocation to favor better-performing strategies while maintaining
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/strategies/performance_allocator.py:82:1
   |
80 |     diversification and risk bounds.
81 |     """
82 |     
   | ^^^^
83 |     def __init__(self, config: AllocatorConfig | Dict | None = None):
84 |         """Initialize performance-based allocator."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> ai_trading/strategies/performance_allocator.py:92:1
   |
90 |             self.config = config.__dict__
91 |         self._logged_conf_gate_once = False  # AI-AGENT-REF: confidence gate log guard
92 |         
   | ^^^^^^^^
93 |         # Performance tracking configuration
94 |         self.window_days = self.config.get("performance_window_days", 20)  # 20 trading days
   |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
  --> ai_trading/strategies/performance_allocator.py:95:101
   |
93 |         # Performance tracking configuration
94 |         self.window_days = self.config.get("performance_window_days", 20)  # 20 trading days
95 |         self.min_trades_threshold = self.config.get("min_trades_threshold", 5)  # Minimum trades for evaluation
   |                                                                                                     ^^^^^^^^^^^
96 |         self.decay_factor = self.config.get("decay_factor", 0.95)  # Exponential decay for older performance
   |

E501 Line too long (108 > 100)
  --> ai_trading/strategies/performance_allocator.py:96:101
   |
94 |         self.window_days = self.config.get("performance_window_days", 20)  # 20 trading days
95 |         self.min_trades_threshold = self.config.get("min_trades_threshold", 5)  # Minimum trades for evaluation
96 |         self.decay_factor = self.config.get("decay_factor", 0.95)  # Exponential decay for older performance
   |                                                                                                     ^^^^^^^^
97 |         
98 |         # Allocation bounds
   |

W293 [*] Blank line contains whitespace
  --> ai_trading/strategies/performance_allocator.py:97:1
   |
95 |         self.min_trades_threshold = self.config.get("min_trades_threshold", 5)  # Minimum trades for evaluation
96 |         self.decay_factor = self.config.get("decay_factor", 0.95)  # Exponential decay for older performance
97 |         
   | ^^^^^^^^
98 |         # Allocation bounds
99 |         self.min_allocation = self.config.get("min_allocation_pct", 0.05)  # 5% minimum per strategy
   |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> ai_trading/strategies/performance_allocator.py:100:101
    |
 98 |         # Allocation bounds
 99 |         self.min_allocation = self.config.get("min_allocation_pct", 0.05)  # 5% minimum per strategy
100 |         self.max_allocation = self.config.get("max_allocation_pct", 0.40)  # 40% maximum per strategy
    |                                                                                                     ^
101 |         self.default_allocation = self.config.get("default_allocation_pct", 0.20)  # 20% default
    |

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:102:1
    |
100 |         self.max_allocation = self.config.get("max_allocation_pct", 0.40)  # 40% maximum per strategy
101 |         self.default_allocation = self.config.get("default_allocation_pct", 0.20)  # 20% default
102 |         
    | ^^^^^^^^
103 |         # Performance metrics weights
104 |         self.sharpe_weight = self.config.get("sharpe_weight", 0.4)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:108:1
    |
106 |         self.hit_rate_weight = self.config.get("hit_rate_weight", 0.2)
107 |         self.drawdown_weight = self.config.get("drawdown_weight", 0.1)
108 |         
    | ^^^^^^^^
109 |         # Track strategy performance history
110 |         self.strategy_trades: Dict[str, deque] = defaultdict(lambda: deque(maxlen=1000))
    |
help: Remove whitespace from blank line

E501 Line too long (104 > 100)
   --> ai_trading/strategies/performance_allocator.py:136:101
    |
134 |         return max(0.0, min(1.0, s))
135 |
136 |     def allocate(self, strategies: Dict[str, List[Any]], config: TradingConfig) -> Dict[str, List[Any]]:
    |                                                                                                     ^^^^
137 |         """Filter low-confidence signals and bias weights by confidence."""  # AI-AGENT-REF
138 |         th = _resolve_conf_threshold(config)
    |

E501 Line too long (101 > 100)
   --> ai_trading/strategies/performance_allocator.py:169:101
    |
167 |                 logger.info(
168 |                     "CONFIDENCE_DROP",
169 |                     extra={"strategy": name, "threshold": th, "dropped": dropped, "kept": len(kept)},
    |                                                                                                     ^
170 |                 )
171 |             if kept:
    |

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:189:1
    |
187 |                 )
188 |         return gated
189 |     
    | ^^^^
190 |     def record_trade_result(self, strategy_name: str, trade_result: Dict):
191 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:193:1
    |
191 |         """
192 |         Record a trade result for a strategy.
193 |         
    | ^^^^^^^^
194 |         Args:
195 |             strategy_name: Name of the strategy
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> ai_trading/strategies/performance_allocator.py:210:93
    |
208 |             for field in required_fields:
209 |                 if field not in trade_result:
210 |                     logger.warning("Trade result missing required field %s for strategy %s", 
    |                                                                                             ^
211 |                                  field, strategy_name)
212 |                     return
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:213:1
    |
211 |                                  field, strategy_name)
212 |                     return
213 |             
    | ^^^^^^^^^^^^
214 |             # Add to strategy's trade history
215 |             trade_record = {
    |
help: Remove whitespace from blank line

E501 Line too long (118 > 100)
   --> ai_trading/strategies/performance_allocator.py:218:101
    |
216 |                 **trade_result,
217 |                 'recorded_at': datetime.now(UTC),
218 |                 'return_pct': trade_result['pnl'] / abs(trade_result['entry_price'] * trade_result.get('quantity', 1))
    |                                                                                                     ^^^^^^^^^^^^^^^^^^
219 |             }
    |

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:220:1
    |
218 |                 'return_pct': trade_result['pnl'] / abs(trade_result['entry_price'] * trade_result.get('quantity', 1))
219 |             }
220 |             
    | ^^^^^^^^^^^^
221 |             self.strategy_trades[strategy_name].append(trade_record)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:222:1
    |
221 |             self.strategy_trades[strategy_name].append(trade_record)
222 |             
    | ^^^^^^^^^^^^
223 |             logger.debug("Recorded trade for strategy %s: PnL=%.2f, Return=%.4f", 
224 |                         strategy_name, trade_result['pnl'], trade_record['return_pct'])
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> ai_trading/strategies/performance_allocator.py:223:82
    |
221 |             self.strategy_trades[strategy_name].append(trade_record)
222 |             
223 |             logger.debug("Recorded trade for strategy %s: PnL=%.2f, Return=%.4f", 
    |                                                                                  ^
224 |                         strategy_name, trade_result['pnl'], trade_record['return_pct'])
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:225:1
    |
223 |             logger.debug("Recorded trade for strategy %s: PnL=%.2f, Return=%.4f", 
224 |                         strategy_name, trade_result['pnl'], trade_record['return_pct'])
225 |             
    | ^^^^^^^^^^^^
226 |         except (KeyError, ValueError, TypeError) as e:
227 |             logger.warning("Failed to record trade result for strategy %s: %s", strategy_name, e,
    |
help: Remove whitespace from blank line

E501 Line too long (128 > 100)
   --> ai_trading/strategies/performance_allocator.py:228:101
    |
226 |         except (KeyError, ValueError, TypeError) as e:
227 |             logger.warning("Failed to record trade result for strategy %s: %s", strategy_name, e,
228 |                           extra={"component": "performance_allocator", "strategy": strategy_name, "error_type": "trade_record"})
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
229 |         except Exception as e:
230 |             logger.error("Unexpected error recording trade for strategy %s: %s", strategy_name, e,
    |

E501 Line too long (124 > 100)
   --> ai_trading/strategies/performance_allocator.py:231:101
    |
229 |         except Exception as e:
230 |             logger.error("Unexpected error recording trade for strategy %s: %s", strategy_name, e,
231 |                         extra={"component": "performance_allocator", "strategy": strategy_name, "error_type": "unexpected"})
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
232 |     
233 |     def calculate_strategy_allocations(self, strategies: List[str], 
    |

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:232:1
    |
230 |             logger.error("Unexpected error recording trade for strategy %s: %s", strategy_name, e,
231 |                         extra={"component": "performance_allocator", "strategy": strategy_name, "error_type": "unexpected"})
232 |     
    | ^^^^
233 |     def calculate_strategy_allocations(self, strategies: List[str], 
234 |                                      total_capital: float) -> Dict[str, float]:
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> ai_trading/strategies/performance_allocator.py:233:68
    |
231 |                         extra={"component": "performance_allocator", "strategy": strategy_name, "error_type": "unexpected"})
232 |     
233 |     def calculate_strategy_allocations(self, strategies: List[str], 
    |                                                                    ^
234 |                                      total_capital: float) -> Dict[str, float]:
235 |         """
    |
help: Remove trailing whitespace

W293 Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:237:1
    |
235 |         """
236 |         Calculate optimal capital allocation across strategies based on performance.
237 |         
    | ^^^^^^^^
238 |         Args:
239 |             strategies: List of strategy names
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:241:1
    |
239 |             strategies: List of strategy names
240 |             total_capital: Total capital to allocate
241 |             
    | ^^^^^^^^^^^^
242 |         Returns:
243 |             Dictionary mapping strategy name to allocated capital amount
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:249:1
    |
247 |                 logger.warning("No strategies provided for allocation")
248 |                 return {}
249 |             
    | ^^^^^^^^^^^^
250 |             # Calculate performance scores for each strategy
251 |             performance_scores = {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:255:1
    |
253 |                 score = self._calculate_performance_score(strategy)
254 |                 performance_scores[strategy] = score
255 |                 
    | ^^^^^^^^^^^^^^^^
256 |                 logger.debug("Strategy %s performance score: %.4f", strategy, score)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:257:1
    |
256 |                 logger.debug("Strategy %s performance score: %.4f", strategy, score)
257 |             
    | ^^^^^^^^^^^^
258 |             # Convert scores to allocation weights
259 |             allocation_weights = self._scores_to_weights(performance_scores)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:260:1
    |
258 |             # Convert scores to allocation weights
259 |             allocation_weights = self._scores_to_weights(performance_scores)
260 |             
    | ^^^^^^^^^^^^
261 |             # Apply bounds and constraints
262 |             bounded_weights = self._apply_allocation_bounds(allocation_weights)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:263:1
    |
261 |             # Apply bounds and constraints
262 |             bounded_weights = self._apply_allocation_bounds(allocation_weights)
263 |             
    | ^^^^^^^^^^^^
264 |             # Convert weights to capital amounts
265 |             allocations = {
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> ai_trading/strategies/performance_allocator.py:266:49
    |
264 |             # Convert weights to capital amounts
265 |             allocations = {
266 |                 strategy: weight * total_capital 
    |                                                 ^
267 |                 for strategy, weight in bounded_weights.items()
268 |             }
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:269:1
    |
267 |                 for strategy, weight in bounded_weights.items()
268 |             }
269 |             
    | ^^^^^^^^^^^^
270 |             # Update internal tracking
271 |             self.strategy_allocations = bounded_weights.copy()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:273:1
    |
271 |             self.strategy_allocations = bounded_weights.copy()
272 |             self.last_update = datetime.now(UTC)
273 |             
    | ^^^^^^^^^^^^
274 |             # Log allocation summary
275 |             logger.info("Strategy allocations updated: %s", 
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> ai_trading/strategies/performance_allocator.py:275:60
    |
274 |             # Log allocation summary
275 |             logger.info("Strategy allocations updated: %s", 
    |                                                            ^
276 |                        {s: f"{w:.1%}" for s, w in bounded_weights.items()})
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:277:1
    |
275 |             logger.info("Strategy allocations updated: %s", 
276 |                        {s: f"{w:.1%}" for s, w in bounded_weights.items()})
277 |             
    | ^^^^^^^^^^^^
278 |             return allocations
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:279:1
    |
278 |             return allocations
279 |             
    | ^^^^^^^^^^^^
280 |         except Exception as e:
281 |             logger.error("Strategy allocation calculation failed: %s", e,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:283:1
    |
281 |             logger.error("Strategy allocation calculation failed: %s", e,
282 |                         extra={"component": "performance_allocator", "error_type": "allocation"})
283 |             
    | ^^^^^^^^^^^^
284 |             # Return equal allocation as fallback
285 |             equal_weight = 1.0 / len(strategies)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:287:1
    |
285 |             equal_weight = 1.0 / len(strategies)
286 |             return {strategy: equal_weight * total_capital for strategy in strategies}
287 |     
    | ^^^^
288 |     def _calculate_performance_score(self, strategy_name: str) -> float:
289 |         """Calculate composite performance score for a strategy."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:292:1
    |
290 |         try:
291 |             trades = list(self.strategy_trades[strategy_name])
292 |             
    | ^^^^^^^^^^^^
293 |             if len(trades) < self.min_trades_threshold:
294 |                 # Insufficient data - return default score
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> ai_trading/strategies/performance_allocator.py:295:100
    |
293 |             if len(trades) < self.min_trades_threshold:
294 |                 # Insufficient data - return default score
295 |                 logger.debug("Insufficient trades for strategy %s (%d < %d) - using default score", 
    |                                                                                                    ^
296 |                            strategy_name, len(trades), self.min_trades_threshold)
297 |                 return 0.5  # Neutral score
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:298:1
    |
296 |                            strategy_name, len(trades), self.min_trades_threshold)
297 |                 return 0.5  # Neutral score
298 |             
    | ^^^^^^^^^^^^
299 |             # Filter to recent trades within window
300 |             cutoff_date = datetime.now(UTC) - timedelta(days=self.window_days)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:302:1
    |
300 |             cutoff_date = datetime.now(UTC) - timedelta(days=self.window_days)
301 |             recent_trades = [t for t in trades if t['timestamp'] >= cutoff_date]
302 |             
    | ^^^^^^^^^^^^
303 |             if len(recent_trades) < 3:  # Need minimum recent activity
304 |                 return 0.3  # Below average for inactive strategies
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:305:1
    |
303 |             if len(recent_trades) < 3:  # Need minimum recent activity
304 |                 return 0.3  # Below average for inactive strategies
305 |             
    | ^^^^^^^^^^^^
306 |             # Calculate performance metrics
307 |             returns = np.array([t['return_pct'] for t in recent_trades])
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:308:1
    |
306 |             # Calculate performance metrics
307 |             returns = np.array([t['return_pct'] for t in recent_trades])
308 |             
    | ^^^^^^^^^^^^
309 |             # Apply exponential decay to older trades
310 |             weights = np.array([
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:314:1
    |
312 |             ])
313 |             weights = weights / weights.sum()  # Normalize
314 |             
    | ^^^^^^^^^^^^
315 |             # Weighted performance metrics
316 |             avg_return = np.average(returns, weights=weights)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:318:1
    |
316 |             avg_return = np.average(returns, weights=weights)
317 |             volatility = np.sqrt(np.average((returns - avg_return) ** 2, weights=weights))
318 |             
    | ^^^^^^^^^^^^
319 |             # Sharpe ratio (annualized)
320 |             sharpe_ratio = (avg_return / max(volatility, 1e-6)) * np.sqrt(252)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:321:1
    |
319 |             # Sharpe ratio (annualized)
320 |             sharpe_ratio = (avg_return / max(volatility, 1e-6)) * np.sqrt(252)
321 |             
    | ^^^^^^^^^^^^
322 |             # Hit rate
323 |             winning_trades = np.sum(returns > 0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:325:1
    |
323 |             winning_trades = np.sum(returns > 0)
324 |             hit_rate = winning_trades / len(returns)
325 |             
    | ^^^^^^^^^^^^
326 |             # Maximum drawdown
327 |             cumulative_returns = np.cumprod(1 + returns)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:331:1
    |
329 |             drawdowns = (cumulative_returns - running_max) / running_max
330 |             max_drawdown = abs(np.min(drawdowns)) if len(drawdowns) > 0 else 0
331 |             
    | ^^^^^^^^^^^^
332 |             # Composite score calculation
333 |             sharpe_component = self._normalize_metric(sharpe_ratio, -2, 3) * self.sharpe_weight
    |
help: Remove whitespace from blank line

E501 Line too long (117 > 100)
   --> ai_trading/strategies/performance_allocator.py:334:101
    |
332 |             # Composite score calculation
333 |             sharpe_component = self._normalize_metric(sharpe_ratio, -2, 3) * self.sharpe_weight
334 |             return_component = self._normalize_metric(avg_return * 252, -0.5, 0.5) * self.return_weight  # Annualized
    |                                                                                                     ^^^^^^^^^^^^^^^^^
335 |             hit_rate_component = self._normalize_metric(hit_rate, 0.3, 0.7) * self.hit_rate_weight
336 |             drawdown_component = self._normalize_metric(-max_drawdown, -0.3, 0) * self.drawdown_weight
    |

E501 Line too long (102 > 100)
   --> ai_trading/strategies/performance_allocator.py:336:101
    |
334 |             return_component = self._normalize_metric(avg_return * 252, -0.5, 0.5) * self.return_weight  # Annualized
335 |             hit_rate_component = self._normalize_metric(hit_rate, 0.3, 0.7) * self.hit_rate_weight
336 |             drawdown_component = self._normalize_metric(-max_drawdown, -0.3, 0) * self.drawdown_weight
    |                                                                                                     ^^
337 |             
338 |             composite_score = (sharpe_component + return_component + 
    |

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:337:1
    |
335 |             hit_rate_component = self._normalize_metric(hit_rate, 0.3, 0.7) * self.hit_rate_weight
336 |             drawdown_component = self._normalize_metric(-max_drawdown, -0.3, 0) * self.drawdown_weight
337 |             
    | ^^^^^^^^^^^^
338 |             composite_score = (sharpe_component + return_component + 
339 |                              hit_rate_component + drawdown_component)
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> ai_trading/strategies/performance_allocator.py:338:69
    |
336 |             drawdown_component = self._normalize_metric(-max_drawdown, -0.3, 0) * self.drawdown_weight
337 |             
338 |             composite_score = (sharpe_component + return_component + 
    |                                                                     ^
339 |                              hit_rate_component + drawdown_component)
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:340:1
    |
338 |             composite_score = (sharpe_component + return_component + 
339 |                              hit_rate_component + drawdown_component)
340 |             
    | ^^^^^^^^^^^^
341 |             # Bound the score between 0 and 1
342 |             composite_score = max(0.0, min(1.0, composite_score))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:343:1
    |
341 |             # Bound the score between 0 and 1
342 |             composite_score = max(0.0, min(1.0, composite_score))
343 |             
    | ^^^^^^^^^^^^
344 |             logger.debug("Strategy %s metrics: Sharpe=%.2f, Return=%.3f, HitRate=%.1f%%, DD=%.2f%%, Score=%.3f",
345 |                         strategy_name, sharpe_ratio, avg_return * 252, hit_rate * 100, 
    |
help: Remove whitespace from blank line

E501 Line too long (112 > 100)
   --> ai_trading/strategies/performance_allocator.py:344:101
    |
342 |             composite_score = max(0.0, min(1.0, composite_score))
343 |             
344 |             logger.debug("Strategy %s metrics: Sharpe=%.2f, Return=%.3f, HitRate=%.1f%%, DD=%.2f%%, Score=%.3f",
    |                                                                                                     ^^^^^^^^^^^^
345 |                         strategy_name, sharpe_ratio, avg_return * 252, hit_rate * 100, 
346 |                         max_drawdown * 100, composite_score)
    |

W291 [*] Trailing whitespace
   --> ai_trading/strategies/performance_allocator.py:345:87
    |
344 |             logger.debug("Strategy %s metrics: Sharpe=%.2f, Return=%.3f, HitRate=%.1f%%, DD=%.2f%%, Score=%.3f",
345 |                         strategy_name, sharpe_ratio, avg_return * 252, hit_rate * 100, 
    |                                                                                       ^
346 |                         max_drawdown * 100, composite_score)
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:347:1
    |
345 |                         strategy_name, sharpe_ratio, avg_return * 252, hit_rate * 100, 
346 |                         max_drawdown * 100, composite_score)
347 |             
    | ^^^^^^^^^^^^
348 |             return composite_score
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:349:1
    |
348 |             return composite_score
349 |             
    | ^^^^^^^^^^^^
350 |         except (ValueError, TypeError) as e:
351 |             logger.warning("Performance calculation failed for strategy %s: %s", strategy_name, e)
    |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
   --> ai_trading/strategies/performance_allocator.py:354:101
    |
352 |             return 0.3  # Below average for calculation errors
353 |         except Exception as e:
354 |             logger.error("Unexpected error calculating performance for strategy %s: %s", strategy_name, e)
    |                                                                                                     ^^^^^^
355 |             return 0.3
    |

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:356:1
    |
354 |             logger.error("Unexpected error calculating performance for strategy %s: %s", strategy_name, e)
355 |             return 0.3
356 |     
    | ^^^^
357 |     def _normalize_metric(self, value: float, min_val: float, max_val: float) -> float:
358 |         """Normalize a metric to 0-1 range."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:362:1
    |
360 |             return 0.5
361 |         return max(0.0, min(1.0, (value - min_val) / (max_val - min_val)))
362 |     
    | ^^^^
363 |     def _scores_to_weights(self, scores: Dict[str, float]) -> Dict[str, float]:
364 |         """Convert performance scores to allocation weights."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:367:1
    |
365 |         if not scores:
366 |             return {}
367 |         
    | ^^^^^^^^
368 |         # Apply softmax transformation to convert scores to weights
369 |         score_values = np.array(list(scores.values()))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:370:1
    |
368 |         # Apply softmax transformation to convert scores to weights
369 |         score_values = np.array(list(scores.values()))
370 |         
    | ^^^^^^^^
371 |         # Add small bias to prevent zero allocations
372 |         score_values = score_values + 0.1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:373:1
    |
371 |         # Add small bias to prevent zero allocations
372 |         score_values = score_values + 0.1
373 |         
    | ^^^^^^^^
374 |         # Softmax with temperature parameter for smoothing
375 |         temperature = self.config.get("allocation_temperature", 2.0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:378:1
    |
376 |         exp_scores = np.exp(score_values / temperature)
377 |         weights = exp_scores / exp_scores.sum()
378 |         
    | ^^^^^^^^
379 |         return dict(zip(scores.keys(), weights))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:380:1
    |
379 |         return dict(zip(scores.keys(), weights))
380 |     
    | ^^^^
381 |     def _apply_allocation_bounds(self, weights: Dict[str, float]) -> Dict[str, float]:
382 |         """Apply minimum and maximum allocation bounds."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:385:1
    |
383 |         if not weights:
384 |             return {}
385 |         
    | ^^^^^^^^
386 |         bounded_weights = weights.copy()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:387:1
    |
386 |         bounded_weights = weights.copy()
387 |         
    | ^^^^^^^^
388 |         # Apply minimum allocation
389 |         for strategy in bounded_weights:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:392:1
    |
390 |             if bounded_weights[strategy] < self.min_allocation:
391 |                 bounded_weights[strategy] = self.min_allocation
392 |         
    | ^^^^^^^^
393 |         # Renormalize after applying minimums
394 |         total_weight = sum(bounded_weights.values())
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:398:1
    |
396 |             for strategy in bounded_weights:
397 |                 bounded_weights[strategy] /= total_weight
398 |         
    | ^^^^^^^^
399 |         # Apply maximum allocation
400 |         excess_total = 0.0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:402:1
    |
400 |         excess_total = 0.0
401 |         capped_strategies = []
402 |         
    | ^^^^^^^^
403 |         for strategy in bounded_weights:
404 |             if bounded_weights[strategy] > self.max_allocation:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:409:1
    |
407 |                 excess_total += excess
408 |                 capped_strategies.append(strategy)
409 |         
    | ^^^^^^^^
410 |         # Redistribute excess to non-capped strategies
411 |         if excess_total > 0:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:419:1
    |
417 |                     # Ensure we don't exceed max for redistribution
418 |                     bounded_weights[strategy] = min(bounded_weights[strategy], self.max_allocation)
419 |         
    | ^^^^^^^^
420 |         # Final normalization
421 |         total_weight = sum(bounded_weights.values())
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:425:1
    |
423 |             for strategy in bounded_weights:
424 |                 bounded_weights[strategy] /= total_weight
425 |         
    | ^^^^^^^^
426 |         return bounded_weights
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:427:1
    |
426 |         return bounded_weights
427 |     
    | ^^^^
428 |     def get_strategy_performance_report(self, strategy_name: str) -> Dict:
429 |         """Generate detailed performance report for a strategy."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:432:1
    |
430 |         try:
431 |             trades = list(self.strategy_trades[strategy_name])
432 |             
    | ^^^^^^^^^^^^
433 |             if not trades:
434 |                 return {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:438:1
    |
436 |                     "error": "No trade history available"
437 |                 }
438 |             
    | ^^^^^^^^^^^^
439 |             # Calculate metrics over different time windows
440 |             windows = [5, 10, 20, 60]  # days
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:448:1
    |
446 |                 "windows": {}
447 |             }
448 |             
    | ^^^^^^^^^^^^
449 |             for window_days in windows:
450 |                 cutoff_date = datetime.now(UTC) - timedelta(days=window_days)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:452:1
    |
450 |                 cutoff_date = datetime.now(UTC) - timedelta(days=window_days)
451 |                 window_trades = [t for t in trades if t['timestamp'] >= cutoff_date]
452 |                 
    | ^^^^^^^^^^^^^^^^
453 |                 if window_trades:
454 |                     returns = [t['return_pct'] for t in window_trades]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:456:1
    |
454 |                     returns = [t['return_pct'] for t in window_trades]
455 |                     pnls = [t['pnl'] for t in window_trades]
456 |                     
    | ^^^^^^^^^^^^^^^^^^^^
457 |                     report["windows"][f"{window_days}d"] = {
458 |                         "trades": len(window_trades),
    |
help: Remove whitespace from blank line

E501 Line too long (115 > 100)
   --> ai_trading/strategies/performance_allocator.py:462:101
    |
460 |                         "avg_return": np.mean(returns),
461 |                         "hit_rate": sum(1 for r in returns if r > 0) / len(returns),
462 |                         "sharpe": (np.mean(returns) / np.std(returns) * np.sqrt(252)) if np.std(returns) > 0 else 0
    |                                                                                                     ^^^^^^^^^^^^^^^
463 |                     }
    |

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:464:1
    |
462 |                         "sharpe": (np.mean(returns) / np.std(returns) * np.sqrt(252)) if np.std(returns) > 0 else 0
463 |                     }
464 |             
    | ^^^^^^^^^^^^
465 |             return report
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:466:1
    |
465 |             return report
466 |             
    | ^^^^^^^^^^^^
467 |         except Exception as e:
468 |             logger.error("Performance report generation failed for strategy %s: %s", strategy_name, e)
    |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> ai_trading/strategies/performance_allocator.py:468:101
    |
467 |         except Exception as e:
468 |             logger.error("Performance report generation failed for strategy %s: %s", strategy_name, e)
    |                                                                                                     ^^
469 |             return {
470 |                 "strategy": strategy_name,
    |

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:473:1
    |
471 |                 "error": f"Report generation failed: {e}"
472 |             }
473 |     
    | ^^^^
474 |     def should_rebalance_allocations(self) -> bool:
475 |         """Determine if allocations should be rebalanced based on recent performance."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:479:1
    |
477 |             # Rebalance daily or if significant performance divergence
478 |             hours_since_update = (datetime.now(UTC) - self.last_update).total_seconds() / 3600
479 |             
    | ^^^^^^^^^^^^
480 |             if hours_since_update >= 24:  # Daily rebalancing
481 |                 return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:482:1
    |
480 |             if hours_since_update >= 24:  # Daily rebalancing
481 |                 return True
482 |             
    | ^^^^^^^^^^^^
483 |             # Check for significant performance divergence
484 |             if len(self.strategy_allocations) < 2:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:486:1
    |
484 |             if len(self.strategy_allocations) < 2:
485 |                 return False
486 |             
    | ^^^^^^^^^^^^
487 |             current_scores = {}
488 |             for strategy in self.strategy_allocations:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:490:1
    |
488 |             for strategy in self.strategy_allocations:
489 |                 current_scores[strategy] = self._calculate_performance_score(strategy)
490 |             
    | ^^^^^^^^^^^^
491 |             # Check if performance ordering has changed significantly
492 |             old_ranking = sorted(self.strategy_allocations.items(), key=lambda x: x[1], reverse=True)
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> ai_trading/strategies/performance_allocator.py:492:101
    |
491 |             # Check if performance ordering has changed significantly
492 |             old_ranking = sorted(self.strategy_allocations.items(), key=lambda x: x[1], reverse=True)
    |                                                                                                     ^
493 |             new_ranking = sorted(current_scores.items(), key=lambda x: x[1], reverse=True)
    |

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:494:1
    |
492 |             old_ranking = sorted(self.strategy_allocations.items(), key=lambda x: x[1], reverse=True)
493 |             new_ranking = sorted(current_scores.items(), key=lambda x: x[1], reverse=True)
494 |             
    | ^^^^^^^^^^^^
495 |             # Simple ranking change detection
496 |             rank_changes = sum(1 for i, (old_s, _) in enumerate(old_ranking) 
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> ai_trading/strategies/performance_allocator.py:496:77
    |
495 |             # Simple ranking change detection
496 |             rank_changes = sum(1 for i, (old_s, _) in enumerate(old_ranking) 
    |                                                                             ^
497 |                              if i < len(new_ranking) and new_ranking[i][0] != old_s)
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:498:1
    |
496 |             rank_changes = sum(1 for i, (old_s, _) in enumerate(old_ranking) 
497 |                              if i < len(new_ranking) and new_ranking[i][0] != old_s)
498 |             
    | ^^^^^^^^^^^^
499 |             significant_change_threshold = len(self.strategy_allocations) // 2
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:500:1
    |
499 |             significant_change_threshold = len(self.strategy_allocations) // 2
500 |             
    | ^^^^^^^^^^^^
501 |             return rank_changes >= significant_change_threshold
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> ai_trading/strategies/performance_allocator.py:502:1
    |
501 |             return rank_changes >= significant_change_threshold
502 |             
    | ^^^^^^^^^^^^
503 |         except Exception as e:
504 |             logger.warning("Rebalance decision failed: %s", e)
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> ai_trading/strategies/performance_allocator.py:505:69
    |
503 |         except Exception as e:
504 |             logger.warning("Rebalance decision failed: %s", e)
505 |             return False  # Conservative - don't rebalance on errors
    |                                                                     ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/regime_detection.py:9:1
   |
 8 |   # AI-AGENT-REF: use standard imports for hard dependencies
 9 | / from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
10 | | from datetime import UTC, datetime
11 | | from enum import Enum
12 | | from typing import Any
13 | |
14 | | import numpy as np
15 | | import pandas as pd
16 | |
17 | | # Use the centralized logger as per AGENTS.md
18 | | from ai_trading.logging import logger
   | |_____________________________________^
   |
help: Organize imports

W292 [*] No newline at end of file
   --> ai_trading/strategies/regime_detection.py:991:37
    |
989 |         except COMMON_EXC as e:  # AI-AGENT-REF: narrow
990 |             logger.error(f"Error getting regime recommendations: {e}")
991 |             return {"error": str(e)}
    |                                     ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/regime_detector.py:8:1
   |
 6 |   """
 7 |
 8 | / import math
 9 | | import statistics
10 | | from dataclasses import dataclass
11 | | from enum import Enum
12 | | from typing import Any
13 | |
14 | | # Use the centralized logger as per AGENTS.md
15 | | from ai_trading.logging import logger
16 | |
17 | | # Import enhanced features if available
18 | | import numpy as np
   | |__________________^
19 |
20 |   NUMPY_AVAILABLE = True
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/strategies/signals.py:9:1
   |
 7 |   """
 8 |
 9 | / from ai_trading.exc import COMMON_EXC  # AI-AGENT-REF: narrow handler
10 | | import statistics
11 | | from datetime import UTC, datetime
12 | | from typing import Any
13 | |
14 | | import numpy as np
15 | |
16 | | # Use the centralized logger as per AGENTS.md
17 | | from ai_trading.logging import logger
18 | |
19 | | from sklearn.linear_model import Ridge
   | |______________________________________^
20 |
21 |   sklearn_available = True
   |
help: Organize imports

W292 [*] No newline at end of file
   --> ai_trading/strategies/signals.py:809:22
    |
807 |         # In a real implementation, this could add technical indicators,
808 |         # risk adjustments, or other enhancements
809 |         return signal
    |                      ^
    |
help: Add trailing newline

E501 Line too long (114 > 100)
  --> ai_trading/strategy_allocator.py:15:101
   |
14 | class StrategyAllocator:
15 |     """Minimal allocator with confidence normalization hook for tests."""  # AI-AGENT-REF: test strategy allocator
   |                                                                                                     ^^^^^^^^^^^^^^
16 |
17 |     # AI-AGENT-REF: resolve threshold via config chain
   |

E501 Line too long (103 > 100)
 --> ai_trading/tools/__init__.py:2:101
  |
1 | raise ImportError(
2 |     "The legacy 'ai_trading.tools' package is removed. Use 'ai_trading.tools.env_validate' explicitly."
  |                                                                                                     ^^^
3 | )
  |

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/tools/env_validate.py:2:1
   |
 2 | / from __future__ import annotations
 3 | |
 4 | | from typing import Iterable, Mapping
 5 | |
 6 | | import os
 7 | | import sys
 8 | |
 9 | | from ai_trading.logging import get_logger
   | |_________________________________________^
10 |
11 |   logger = get_logger(__name__)
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/tools/fetch_sample_universe.py:1:1
   |
 1 | / from __future__ import annotations
 2 | |
 3 | | import argparse
 4 | | import os
 5 | | from datetime import UTC, datetime, timedelta
 6 | |
 7 | | from ai_trading.logging import get_logger
 8 | | from ai_trading.utils import http
 9 | | from ai_trading.utils.timing import HTTP_TIMEOUT
10 | | from ai_trading.utils.prof import StageTimer
   | |____________________________________________^
11 |
12 |   logger = get_logger(__name__)
   |
help: Organize imports

RUF100 [*] Unused `noqa` directive (non-enabled: `F401`)
 --> ai_trading/utils/__init__.py:3:12
  |
1 | from __future__ import annotations
2 |
3 | import os  # noqa: F401  # AI-AGENT-REF: env overrides
  |            ^^^^^^^^^^^^
4 |
5 | # AI-AGENT-REF: alias stdlib time to avoid shadowing by our `time` submodule
  |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/utils/__init__.py:43:40
   |
41 | try:  # pragma: no cover
42 |     from . import time as utils_time  # type: ignore
43 | except Exception:  # pragma: no cover  # noqa: BLE001
   |                                        ^^^^^^^^^^^^^^
44 |     utils_time = None  # type: ignore
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> ai_trading/utils/__init__.py:53:40
   |
51 | try:  # pragma: no cover
52 |     from . import process_manager  # type: ignore
53 | except Exception:  # pragma: no cover  # noqa: BLE001
   |                                        ^^^^^^^^^^^^^^
54 |     process_manager = None  # type: ignore
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/utils/__init__.py:119:24
    |
117 |     try:
118 |         val = float(df["close"].dropna().iloc[-1])
119 |     except Exception:  # noqa: BLE001
    |                        ^^^^^^^^^^^^^^
120 |         return 0.0
121 |     return val
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `A002`)
   --> ai_trading/utils/__init__.py:132:38
    |
130 |     *,
131 |     # legacy names
132 |     min: float | int | None = None,  # noqa: A002 - back-compat
    |                                      ^^^^^^^^^^^^
133 |     max: float | int | None = None,  # noqa: A002 - back-compat
134 |     default: float | int | None = None,
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `A002`)
   --> ai_trading/utils/__init__.py:133:38
    |
131 |     # legacy names
132 |     min: float | int | None = None,  # noqa: A002 - back-compat
133 |     max: float | int | None = None,  # noqa: A002 - back-compat
    |                                      ^^^^^^^^^^^^
134 |     default: float | int | None = None,
135 |     # new names
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `S311`)
   --> ai_trading/utils/base.py:187:71
    |
185 |     delay = min(exp, cap)
186 |     if jitter > 0:
187 |         jitter_amt = random.uniform(-jitter * delay, jitter * delay)  # noqa: S311
    |                                                                       ^^^^^^^^^^^^
188 |         delay = max(0.0, delay + jitter_amt)
189 |     return delay
    |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `F811`)
   --> ai_trading/utils/base.py:843:29
    |
843 | def get_ohlcv_columns(df):  # noqa: F811  # AI-AGENT-REF: coexist with typed variant
    |                             ^^^^^^^^^^^^
844 |     """Return the names of the OHLCV columns if present."""
    |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/utils/determinism.py:19:1
   |
17 | logger = logging.getLogger(__name__)
18 |
19 | import numpy as np
   | ^^^^^^^^^^^^^^^^^^
20 | logger = logging.getLogger(__name__)
   |
help: Organize imports

RUF100 [*] Unused `noqa` directive (unused: `F401`)
  --> ai_trading/utils/determinism.py:43:52
   |
41 |     try:
42 |         import importlib
43 |         lgb = importlib.import_module("lightgbm")  # noqa: F401
   |                                                    ^^^^^^^^^^^^
44 |     except Exception:  # pragma: no cover - optional dep
45 |         from ai_trading.thirdparty import lightgbm_compat as lgb  # noqa: F401
   |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
  --> ai_trading/utils/http.py:1:1
   |
 1 | / from __future__ import annotations
 2 | |
 3 | | import os
 4 | | import threading
 5 | | from concurrent.futures import ThreadPoolExecutor, as_completed
 6 | |
 7 | | import requests
 8 | | from requests.adapters import HTTPAdapter
 9 | | from requests.exceptions import (
10 | |     RequestException as RequestsRequestException,  # AI-AGENT-REF: catch raw requests errors
11 | | )
12 | | from urllib3.util.retry import Retry
13 | |
14 | | from ai_trading.exc import (
15 | |     TRANSIENT_HTTP_EXC,
16 | |     JSONDecodeError,
17 | |     RequestException,
18 | | )
19 | | from ai_trading.logging import get_logger  # AI-AGENT-REF: centralized logging
20 | | from ai_trading.utils.retry import retry_call  # AI-AGENT-REF: retry helper
21 | | from ai_trading.utils.timing import HTTP_TIMEOUT, clamp_timeout, sleep  # AI-AGENT-REF: timeout clamp
   | |______________________________________________________________________^
22 |
23 |   _log = get_logger(__name__)
   |
help: Organize imports

E501 Line too long (101 > 100)
  --> ai_trading/utils/http.py:21:101
   |
19 | from ai_trading.logging import get_logger  # AI-AGENT-REF: centralized logging
20 | from ai_trading.utils.retry import retry_call  # AI-AGENT-REF: retry helper
21 | from ai_trading.utils.timing import HTTP_TIMEOUT, clamp_timeout, sleep  # AI-AGENT-REF: timeout clamp
   |                                                                                                     ^
22 |
23 | _log = get_logger(__name__)
   |

E501 Line too long (103 > 100)
   --> ai_trading/utils/http.py:101:101
    |
 99 |     kwargs = _with_timeout(kwargs)
100 |     retries, backoff, max_backoff, jitter = _retry_config()
101 |     # Some call-sites intentionally raise ValueError during request/parse pipeline; treat it transient.
    |                                                                                                     ^^^
102 |     excs = (
103 |         RequestException,
    |

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
   --> ai_trading/utils/http.py:180:35
    |
178 |                 text = resp.text.strip()
179 |                 return {"text": text}
180 |         except Exception as exc:  # noqa: BLE001
    |                                   ^^^^^^^^^^^^^^
181 |             key = f"{method}:{url}:{getattr(exc, 'args', '')}"
182 |             log_fn = _log.warning if key not in _ERROR_LOGGED else _log.debug
    |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/utils/prof.py:1:1
  |
1 | / from __future__ import annotations
2 | | import time
3 | | from contextlib import contextmanager
  | |_____________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/utils/universe.py:1:1
  |
1 | / from __future__ import annotations
2 | | from pathlib import Path
3 | | from typing import List, Set
  | |____________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/utils/workers.py:1:1
  |
1 | / from concurrent.futures import ThreadPoolExecutor, Future
2 | | import atexit
3 | | import os
4 | | import threading
  | |________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> ai_trading/validation/validate_env.py:1:1
  |
1 | / from __future__ import annotations
2 | |
3 | | import os
4 | | from typing import Optional
5 | |
6 | | from pydantic import BaseModel, Field, field_validator
  | |______________________________________________________^
  |
help: Organize imports

RUF100 [*] Unused `noqa` directive (non-enabled: `F401`, `F403`)
 --> risk_engine/__init__.py:3:39
  |
1 | """Public entrypoint exposing ai_trading.risk.engine."""
2 |
3 | from ai_trading.risk.engine import *  # noqa: F401,F403
  |                                       ^^^^^^^^^^^^^^^^^
4 |
5 | __all__ = [name for name in dir() if not name.startswith("_")]
  |
help: Remove unused `noqa` directive

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:13:1
   |
11 |     """Enable enhanced debugging during bot startup."""
12 |     from ai_trading.execution import enable_debug_mode
13 |     
   | ^^^^
14 |     # Enable verbose debugging (set to False for production)
15 |     enable_debug_mode(verbose=True, trace=False)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:16:1
   |
14 |     # Enable verbose debugging (set to False for production)
15 |     enable_debug_mode(verbose=True, trace=False)
16 |     
   | ^^^^
17 |     # Start position monitoring every 5 minutes
18 |     # start_position_monitoring(api_client=your_api_client, interval=300)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:19:1
   |
17 |     # Start position monitoring every 5 minutes
18 |     # start_position_monitoring(api_client=your_api_client, interval=300)
19 |     
   | ^^^^
20 |     logging.info("✓ Enhanced execution debugging enabled")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:26:1
   |
24 | def enhance_existing_execution_engine():
25 |     """Example of how to add debugging to existing ExecutionEngine calls."""
26 |     
   | ^^^^
27 |     # BEFORE (existing code):
28 |     # engine = ExecutionEngine(ctx)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:30:1
   |
28 |     # engine = ExecutionEngine(ctx)
29 |     # result = engine.execute_order("AAPL", 100, "buy")
30 |     
   | ^^^^
31 |     # AFTER (with debugging):
32 |     from ai_trading.execution import log_signal_to_execution, log_execution_phase, ExecutionPhase
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/INTEGRATION_GUIDE.py:32:5
   |
31 |     # AFTER (with debugging):
32 |     from ai_trading.execution import log_signal_to_execution, log_execution_phase, ExecutionPhase
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
33 |     
34 |     def execute_order_with_debugging(engine, symbol, qty, side, signal_data=None):
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:33:1
   |
31 |     # AFTER (with debugging):
32 |     from ai_trading.execution import log_signal_to_execution, log_execution_phase, ExecutionPhase
33 |     
   | ^^^^
34 |     def execute_order_with_debugging(engine, symbol, qty, side, signal_data=None):
35 |         # Start tracking
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:37:1
   |
35 |         # Start tracking
36 |         correlation_id = log_signal_to_execution(symbol, side, qty, signal_data)
37 |         
   | ^^^^^^^^
38 |         # Log pre-execution phase
39 |         log_execution_phase(correlation_id, ExecutionPhase.RISK_CHECK, {
   |
help: Remove whitespace from blank line

E501 Line too long (112 > 100)
  --> scripts/INTEGRATION_GUIDE.py:41:101
   |
39 |         log_execution_phase(correlation_id, ExecutionPhase.RISK_CHECK, {
40 |             'requested_qty': qty,
41 |             'available_cash': engine.ctx.get_account().cash if hasattr(engine.ctx, 'get_account') else 'unknown'
   |                                                                                                     ^^^^^^^^^^^^
42 |         })
   |

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:43:1
   |
41 |             'available_cash': engine.ctx.get_account().cash if hasattr(engine.ctx, 'get_account') else 'unknown'
42 |         })
43 |         
   | ^^^^^^^^
44 |         # Execute the order (existing code)
45 |         try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:47:1
   |
45 |         try:
46 |             result = engine.execute_order(symbol, qty, side)
47 |             
   | ^^^^^^^^^^^^
48 |             if result:
49 |                 # Log success
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:54:1
   |
52 |                     'status': getattr(result, 'status', 'unknown')
53 |                 })
54 |                 
   | ^^^^^^^^^^^^^^^^
55 |                 # Update position tracking
56 |                 from ai_trading.execution import update_bot_position
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:59:1
   |
57 |                 current_qty = engine._available_qty(engine.api, symbol)
58 |                 update_bot_position(symbol, current_qty, f"execution_{correlation_id}")
59 |                 
   | ^^^^^^^^^^^^^^^^
60 |             else:
61 |                 # Log failure
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:65:1
   |
63 |                     'reason': 'execute_order returned None'
64 |                 })
65 |                 
   | ^^^^^^^^^^^^^^^^
66 |         except Exception as e:
67 |             # Log error
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:72:1
   |
70 |             })
71 |             raise
72 |         
   | ^^^^^^^^
73 |         return result
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:74:1
   |
73 |         return result
74 |     
   | ^^^^
75 |     return execute_order_with_debugging
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:81:1
   |
79 | def add_debugging_to_signals():
80 |     """Example of adding debugging to signal generation."""
81 |     
   | ^^^^
82 |     def generate_trading_signals_with_debugging(data, strategy_name):
83 |         """Generate signals with execution tracking."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:85:1
   |
83 |         """Generate signals with execution tracking."""
84 |         from ai_trading.execution import log_signal_to_execution
85 |         
   | ^^^^^^^^
86 |         # Existing signal generation logic
87 |         signals = []  # Your existing signal generation
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/INTEGRATION_GUIDE.py:88:1
   |
86 |         # Existing signal generation logic
87 |         signals = []  # Your existing signal generation
88 |         
   | ^^^^^^^^
89 |         # Add debugging to each signal
90 |         for signal in signals:
   |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
   --> scripts/INTEGRATION_GUIDE.py:99:101
    |
 97 |                     'confidence': signal.confidence,
 98 |                     'trigger_price': getattr(signal, 'price', None),
 99 |                     'timestamp': signal.timestamp.isoformat() if hasattr(signal, 'timestamp') else None
    |                                                                                                     ^^^
100 |                 }
101 |             )
    |

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:102:1
    |
100 |                 }
101 |             )
102 |         
    | ^^^^^^^^
103 |         return signals
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:109:1
    |
107 | def add_pnl_tracking_to_fills():
108 |     """Example of adding PnL tracking when orders are filled."""
109 |     
    | ^^^^
110 |     def handle_order_fill_with_pnl_tracking(order, fill_price, fill_qty):
111 |         """Handle order fill with PnL attribution."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:113:1
    |
111 |         """Handle order fill with PnL attribution."""
112 |         from ai_trading.execution import record_trade_pnl, update_position_for_pnl
113 |         
    | ^^^^^^^^
114 |         symbol = order.symbol
115 |         side = order.side
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:117:1
    |
115 |         side = order.side
116 |         correlation_id = getattr(order, 'correlation_id', None)
117 |         
    | ^^^^^^^^
118 |         # Calculate fees and slippage
119 |         fees = getattr(order, 'fees', 0)
    |
help: Remove whitespace from blank line

E501 Line too long (122 > 100)
   --> scripts/INTEGRATION_GUIDE.py:121:101
    |
119 |         fees = getattr(order, 'fees', 0)
120 |         expected_price = getattr(order, 'limit_price', fill_price)
121 |         slippage = (fill_price - expected_price) * fill_qty if side == 'buy' else (expected_price - fill_price) * fill_qty
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
122 |         
123 |         # Get average cost basis (you'll need to track this)
    |

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:122:1
    |
120 |         expected_price = getattr(order, 'limit_price', fill_price)
121 |         slippage = (fill_price - expected_price) * fill_qty if side == 'buy' else (expected_price - fill_price) * fill_qty
122 |         
    | ^^^^^^^^
123 |         # Get average cost basis (you'll need to track this)
124 |         avg_cost = fill_price  # Simplified - in reality you'd calculate this properly
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:125:1
    |
123 |         # Get average cost basis (you'll need to track this)
124 |         avg_cost = fill_price  # Simplified - in reality you'd calculate this properly
125 |         
    | ^^^^^^^^
126 |         # Record the trade PnL
127 |         record_trade_pnl(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:136:1
    |
134 |             correlation_id=correlation_id
135 |         )
136 |         
    | ^^^^^^^^
137 |         # Update position snapshot for unrealized PnL tracking
138 |         current_qty = get_current_position(symbol)  # Your existing position tracking
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:140:1
    |
138 |         current_qty = get_current_position(symbol)  # Your existing position tracking
139 |         current_market_price = get_current_market_price(symbol)  # Your price feed
140 |         
    | ^^^^^^^^
141 |         update_position_for_pnl(
142 |             symbol=symbol,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:153:1
    |
151 | def setup_periodic_checks():
152 |     """Setup periodic reconciliation and health checks."""
153 |     
    | ^^^^
154 |     def periodic_health_check():
155 |         """Run periodic health checks on execution system."""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/INTEGRATION_GUIDE.py:156:9
    |
154 |       def periodic_health_check():
155 |           """Run periodic health checks on execution system."""
156 | /         from ai_trading.execution import (
157 | |             force_position_reconciliation, get_execution_statistics,
158 | |             get_portfolio_pnl_summary
159 | |         )
    | |_________^
160 |           
161 |           # Check for position discrepancies
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:160:1
    |
158 |             get_portfolio_pnl_summary
159 |         )
160 |         
    | ^^^^^^^^
161 |         # Check for position discrepancies
162 |         discrepancies = force_position_reconciliation()
    |
help: Remove whitespace from blank line

E501 Line too long (116 > 100)
   --> scripts/INTEGRATION_GUIDE.py:167:101
    |
165 |             for disc in discrepancies:
166 |                 if disc.severity in ['high', 'medium']:
167 |                     logging.info(f"  {disc.symbol}: Bot={disc.bot_qty}, Broker={disc.broker_qty} ({disc.severity})")
    |                                                                                                     ^^^^^^^^^^^^^^^^
168 |         
169 |         # Check execution statistics
    |

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:168:1
    |
166 |                 if disc.severity in ['high', 'medium']:
167 |                     logging.info(f"  {disc.symbol}: Bot={disc.bot_qty}, Broker={disc.broker_qty} ({disc.severity})")
168 |         
    | ^^^^^^^^
169 |         # Check execution statistics
170 |         exec_stats = get_execution_statistics()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:174:1
    |
172 |         if success_rate < 0.95:  # Alert if success rate drops below 95%
173 |             logging.info(f"⚠️ Low execution success rate: {success_rate:.1%}")
174 |         
    | ^^^^^^^^
175 |         # Check for unusual PnL patterns
176 |         pnl_summary = get_portfolio_pnl_summary()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:179:1
    |
177 |         if abs(pnl_summary['total_pnl']) > 1000:  # Alert for large PnL changes
178 |             logging.info(str(f"📊 Large PnL movement: ${pnl_summary['total_pnl']:+.2f}"))
179 |     
    | ^^^^
180 |     # Schedule periodic checks (you'd integrate this with your existing scheduler)
181 |     # schedule.every(5).minutes.do(periodic_health_check)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:187:1
    |
185 | def setup_error_alerting():
186 |     """Setup error alerting for debugging events."""
187 |     
    | ^^^^
188 |     def check_for_execution_issues():
189 |         """Check for and alert on execution issues."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:191:1
    |
189 |         """Check for and alert on execution issues."""
190 |         from ai_trading.execution import get_debug_tracker
191 |         
    | ^^^^^^^^
192 |         tracker = get_debug_tracker()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:193:1
    |
192 |         tracker = get_debug_tracker()
193 |         
    | ^^^^^^^^
194 |         # Check for failed executions
195 |         failed_executions = tracker.get_failed_executions(limit=10)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:197:1
    |
195 |         failed_executions = tracker.get_failed_executions(limit=10)
196 |         recent_failures = [e for e in failed_executions if was_recent(e.get('timestamp'))]
197 |         
    | ^^^^^^^^
198 |         if len(recent_failures) > 3:  # Alert if more than 3 failures recently
199 |             logging.info(f"🚨 ALERT: {len(recent_failures)} failed executions recently")
    |
help: Remove whitespace from blank line

E501 Line too long (113 > 100)
   --> scripts/INTEGRATION_GUIDE.py:201:101
    |
199 |             logging.info(f"🚨 ALERT: {len(recent_failures)} failed executions recently")
200 |             for failure in recent_failures:
201 |                 logging.info(f"  {failure['symbol']} {failure['side']}: {failure.get('error', 'Unknown error')}")
    |                                                                                                     ^^^^^^^^^^^^^
202 |         
203 |         # Check for stuck orders
    |

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:202:1
    |
200 |             for failure in recent_failures:
201 |                 logging.info(f"  {failure['symbol']} {failure['side']}: {failure.get('error', 'Unknown error')}")
202 |         
    | ^^^^^^^^
203 |         # Check for stuck orders
204 |         active_orders = tracker.get_active_orders()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:206:1
    |
204 |         active_orders = tracker.get_active_orders()
205 |         stuck_orders = [o for o in active_orders.values() if was_old(o.get('start_time'))]
206 |         
    | ^^^^^^^^
207 |         if stuck_orders:
208 |             logging.info(f"🚨 ALERT: {len(stuck_orders)} orders appear stuck")
    |
help: Remove whitespace from blank line

E501 Line too long (105 > 100)
   --> scripts/INTEGRATION_GUIDE.py:210:101
    |
208 |             logging.info(f"🚨 ALERT: {len(stuck_orders)} orders appear stuck")
209 |             for order in stuck_orders:
210 |                 logging.info(str(f"  {order['symbol']} {order['side']} - started {order['start_time']}"))
    |                                                                                                     ^^^^^
211 |     
212 |     def was_recent(timestamp_str, minutes=30):
    |

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:211:1
    |
209 |             for order in stuck_orders:
210 |                 logging.info(str(f"  {order['symbol']} {order['side']} - started {order['start_time']}"))
211 |     
    | ^^^^
212 |     def was_recent(timestamp_str, minutes=30):
213 |         """Check if timestamp was within last N minutes."""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/INTEGRATION_GUIDE.py:216:9
    |
214 |         if not timestamp_str:
215 |             return False
216 |         from datetime import datetime, timezone, timedelta
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
217 |         timestamp = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
218 |         cutoff = datetime.now(timezone.utc) - timedelta(minutes=minutes)
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:220:1
    |
218 |         cutoff = datetime.now(timezone.utc) - timedelta(minutes=minutes)
219 |         return timestamp > cutoff
220 |     
    | ^^^^
221 |     def was_old(timestamp_str, minutes=60):
222 |         """Check if timestamp is older than N minutes."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:229:1
    |
227 | def complete_integration_example():
228 |     """Complete example of integrating debugging into existing bot."""
229 |     
    | ^^^^
230 |     class EnhancedTradingBot:
231 |         """Example of enhanced trading bot with debugging."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:232:1
    |
230 |     class EnhancedTradingBot:
231 |         """Example of enhanced trading bot with debugging."""
232 |         
    | ^^^^^^^^
233 |         def __init__(self):
234 |             # Initialize debugging
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:236:1
    |
234 |             # Initialize debugging
235 |             enable_enhanced_debugging()
236 |             
    | ^^^^^^^^^^^^
237 |             # Your existing initialization
238 |             self.execution_engine = None  # Your ExecutionEngine
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:240:1
    |
238 |             self.execution_engine = None  # Your ExecutionEngine
239 |             self.strategy = None  # Your strategy
240 |             
    | ^^^^^^^^^^^^
241 |         def run_trading_cycle(self):
242 |             """Enhanced trading cycle with debugging."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:246:1
    |
244 |                 # Generate signals with debugging
245 |                 signals = self.generate_signals_with_debugging()
246 |                 
    | ^^^^^^^^^^^^^^^^
247 |                 # Execute signals with debugging
248 |                 for signal in signals:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:250:1
    |
248 |                 for signal in signals:
249 |                     self.execute_signal_with_debugging(signal)
250 |                 
    | ^^^^^^^^^^^^^^^^
251 |                 # Run health checks
252 |                 self.run_health_checks()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:253:1
    |
251 |                 # Run health checks
252 |                 self.run_health_checks()
253 |                 
    | ^^^^^^^^^^^^^^^^
254 |             except Exception as e:
255 |                 logging.info(f"Trading cycle error: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:257:1
    |
255 |                 logging.info(f"Trading cycle error: {e}")
256 |                 # Your existing error handling
257 |         
    | ^^^^^^^^
258 |         def generate_signals_with_debugging(self):
259 |             """Generate signals with debugging integration."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:262:1
    |
260 |             # Your existing signal generation
261 |             signals = []  # self.strategy.generate_signals()
262 |             
    | ^^^^^^^^^^^^
263 |             # Add debugging correlation IDs
264 |             from ai_trading.execution import log_signal_to_execution
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:275:1
    |
273 |                     }
274 |                 )
275 |             
    | ^^^^^^^^^^^^
276 |             return signals
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:277:1
    |
276 |             return signals
277 |         
    | ^^^^^^^^
278 |         def execute_signal_with_debugging(self, signal):
279 |             """Execute signal with debugging."""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/INTEGRATION_GUIDE.py:280:13
    |
278 |         def execute_signal_with_debugging(self, signal):
279 |             """Execute signal with debugging."""
280 |             from ai_trading.execution import log_execution_phase, ExecutionPhase
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
281 |             
282 |             correlation_id = signal.correlation_id
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:281:1
    |
279 |             """Execute signal with debugging."""
280 |             from ai_trading.execution import log_execution_phase, ExecutionPhase
281 |             
    | ^^^^^^^^^^^^
282 |             correlation_id = signal.correlation_id
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:283:1
    |
282 |             correlation_id = signal.correlation_id
283 |             
    | ^^^^^^^^^^^^
284 |             # Log pre-execution
285 |             log_execution_phase(correlation_id, ExecutionPhase.RISK_CHECK)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:286:1
    |
284 |             # Log pre-execution
285 |             log_execution_phase(correlation_id, ExecutionPhase.RISK_CHECK)
286 |             
    | ^^^^^^^^^^^^
287 |             # Execute (your existing code)
288 |             result = self.execution_engine.execute_order(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:291:1
    |
289 |                 signal.symbol, signal.quantity, signal.side
290 |             )
291 |             
    | ^^^^^^^^^^^^
292 |             # Log result
293 |             if result:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:297:1
    |
295 |             else:
296 |                 log_execution_phase(correlation_id, ExecutionPhase.ORDER_REJECTED)
297 |         
    | ^^^^^^^^
298 |         def run_health_checks(self):
299 |             """Run periodic health checks."""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/INTEGRATION_GUIDE.py:300:13
    |
298 |           def run_health_checks(self):
299 |               """Run periodic health checks."""
300 | /             from ai_trading.execution import (
301 | |                 force_position_reconciliation, get_execution_statistics
302 | |             )
    | |_____________^
303 |               
304 |               # Check positions
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:303:1
    |
301 |                 force_position_reconciliation, get_execution_statistics
302 |             )
303 |             
    | ^^^^^^^^^^^^
304 |             # Check positions
305 |             discrepancies = force_position_reconciliation()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/INTEGRATION_GUIDE.py:308:1
    |
306 |             if discrepancies:
307 |                 logging.info(f"Position discrepancies found: {len(discrepancies)}")
308 |             
    | ^^^^^^^^^^^^
309 |             # Check execution health
310 |             stats = get_execution_statistics()
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/INTEGRATION_GUIDE.py:329:80
    |
327 |     logging.info("6. Add error alerting for execution issues")
328 |     print()
329 |     logging.info("See the function examples above for implementation details.")
    |                                                                                ^
    |
help: Add trailing newline

E501 Line too long (107 > 100)
   --> scripts/algorithm_optimizer.py:455:101
    |
453 |                                       volatility: float,
454 |                                       market_conditions: MarketConditions) -> float:
455 |         """Calculate optimal position size using Kelly criterion and risk management with thread safety."""
    |                                                                                                     ^^^^^^^
456 |         with self._lock:  # AI-AGENT-REF: Thread-safe position size calculation
457 |             try:
    |

E501 Line too long (104 > 100)
   --> scripts/algorithm_optimizer.py:460:101
    |
458 |                 # AI-AGENT-REF: Division by zero protection
459 |                 if price <= 0 or account_value <= 0:
460 |                     self.logger.warning(f"Invalid inputs: price={price}, account_value={account_value}")
    |                                                                                                     ^^^^
461 |                     return 0
    |

E501 Line too long (107 > 100)
   --> scripts/algorithm_optimizer.py:470:101
    |
469 |                 # Apply Kelly criterion with safety caps
470 |                 kelly_adjusted_pct = min(kelly_fraction, 0.25) if kelly_fraction > 0 else base_position_pct
    |                                                                                                     ^^^^^^^
471 |
472 |                 # Adjust for market conditions
    |

E501 Line too long (115 > 100)
   --> scripts/algorithm_optimizer.py:508:101
    |
506 |                 self.logger.debug(
507 |                     f"Position size calculated for {symbol}: {final_shares} shares "
508 |                     f"(${final_shares * price:.2f}, {final_shares * price / account_value * 100:.2f}% of account) "
    |                                                                                                     ^^^^^^^^^^^^^^^
509 |                     f"Kelly fraction: {kelly_fraction:.4f}"
510 |                 )
    |

E501 Line too long (102 > 100)
   --> scripts/algorithm_optimizer.py:546:101
    |
544 |             avg_loss = sum(losses) / max(len(losses), 1) if losses else epsilon
545 |
546 |             # Kelly formula: f = (bp - q) / b where b = avg_win/avg_loss, p = win_rate, q = 1-win_rate
    |                                                                                                     ^^
547 |             if avg_loss <= epsilon:  # Avoid division by zero
548 |                 return min(0.25, win_rate * 0.5)  # Conservative fallback
    |

E501 Line too long (108 > 100)
   --> scripts/algorithm_optimizer.py:663:101
    |
661 |             test_size = self.calculate_optimal_position_size(
662 |                 'TEST', 100.0, 10000.0, 0.2,
663 |                 MarketConditions(MarketRegime.SIDEWAYS, 0.2, 0.5, 1.0, 0.5, 0.0, 20.0, TradingPhase.MID_DAY)
    |                                                                                                     ^^^^^^^^
664 |             )
665 |             assert test_size > 0, "Position size must be positive"
    |

E501 Line too long (108 > 100)
   --> scripts/algorithm_optimizer.py:699:101
    |
697 |             )
698 |             optimized = self.optimize_parameters(conditions, [0.01, -0.02, 0.03], True)
699 |             assert hasattr(optimized, 'position_size_multiplier'), "Optimized parameters missing attributes"
    |                                                                                                     ^^^^^^^^
700 |             validation_results['tests_passed'] += 1
701 |             validation_results['tests_run'].append('parameter_optimization')
    |

E501 Line too long (104 > 100)
   --> scripts/algorithm_optimizer.py:713:101
    |
711 |             'timestamp': datetime.now(UTC).isoformat(),
712 |             'optimization_enabled': self.optimization_enabled,
713 |             'last_optimization': self.last_optimization.isoformat() if self.last_optimization else None,
    |                                                                                                     ^^^^
714 |             'current_parameters': self.current_parameters.__dict__,
715 |             'base_parameters': self.base_parameters.__dict__,
    |

E501 Line too long (120 > 100)
   --> scripts/algorithm_optimizer.py:722:101
    |
720 |                     'count': len(performances),
721 |                     'avg_performance': statistics.mean(performances) if performances else 0.0,
722 |                     'win_rate': sum(1 for p in performances if p > 0) / len(performances) * 100 if performances else 0.0
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
723 |                 }
724 |                 for regime, performances in self.regime_performance.items()
    |

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> scripts/audit.py:9:20
   |
 7 |     from ai_trading.validation.validate_env import Settings
 8 |     settings = Settings()
 9 | except Exception:  # noqa: BLE001
   |                    ^^^^^^^^^^^^^^
10 |     settings = None
   |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/audit.py:12:1
   |
10 |       settings = None
11 |
12 | / import json
13 | |
14 | | from ai_trading.config import management as config
15 | | from ai_trading.config.management import TradingConfig
   | |______________________________________________________^
16 |   CONFIG = TradingConfig()
   |
help: Organize imports

E501 Line too long (114 > 100)
  --> scripts/audit.py:81:101
   |
80 |     # Determine if we should use simple audit format (for tests or specific modes)
81 |     use_simple_format = (extra_info and ("TEST" in str(extra_info).upper() or "AUDIT" in str(extra_info).upper()))
   |                                                                                                     ^^^^^^^^^^^^^^
82 |
83 |     # AI-AGENT-REF: record exposure and intent
   |

E501 Line too long (105 > 100)
  --> scripts/backtest_framework.py:30:101
   |
28 |             # Validate signal doesn't use future data
29 |             if hasattr(signal, 'timestamp'):
30 |                 latest_data_time = available_data.index[-1] if hasattr(available_data, 'index') else None
   |                                                                                                     ^^^^^
31 |                 if latest_data_time and signal.timestamp > latest_data_time:
32 |                     raise ValueError(f"Signal timestamp {signal.timestamp} is after latest data {latest_data_time}")
   |

E501 Line too long (116 > 100)
  --> scripts/backtest_framework.py:32:101
   |
30 |                 latest_data_time = available_data.index[-1] if hasattr(available_data, 'index') else None
31 |                 if latest_data_time and signal.timestamp > latest_data_time:
32 |                     raise ValueError(f"Signal timestamp {signal.timestamp} is after latest data {latest_data_time}")
   |                                                                                                     ^^^^^^^^^^^^^^^^
33 |
34 |             assert signal.confidence == pytest.approx(future_signal.confidence)
   |

RUF100 [*] Unused `noqa` directive (unused: `F401`)
 --> scripts/check_feed.py:5:22
  |
3 | from types import SimpleNamespace
4 |
5 | import pandas as pd  # noqa: F401
  |                      ^^^^^^^^^^^^
6 | import pytz  # noqa: F401
  |
help: Remove unused `noqa` directive

W293 Blank line contains whitespace
  --> scripts/circuit_breaker.py:36:1
   |
34 |     """
35 |     Circuit breaker implementation for external service calls.
36 |     
   | ^^^^
37 |     Prevents cascading failures by failing fast when a service is down,
38 |     and periodically checking if the service has recovered.
   |
help: Remove whitespace from blank line

E501 Line too long (129 > 100)
  --> scripts/circuit_breaker.py:75:101
   |
73 |             self._open_circuit()
74 |
75 |         logger.warning(f"Circuit breaker {self.name}: Failure recorded (count: {self.failure_count}, state: {self.state.value})")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
76 |
77 |     def _open_circuit(self):
   |

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:108:1
    |
106 |         """
107 |         Execute function with circuit breaker protection.
108 |         
    | ^^^^^^^^
109 |         Args:
110 |             func: Function to execute
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:113:1
    |
111 |             *args: Arguments for the function
112 |             **kwargs: Keyword arguments for the function
113 |             
    | ^^^^^^^^^^^^
114 |         Returns:
115 |             Function result if successful
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:116:1
    |
114 |         Returns:
115 |             Function result if successful
116 |             
    | ^^^^^^^^^^^^
117 |         Raises:
118 |             CircuitBreakerOpenError: If circuit is open
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:159:1
    |
157 |     """
158 |     Decorator for applying circuit breaker pattern to functions.
159 |     
    | ^^^^
160 |     Args:
161 |         name: Circuit breaker name
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:163:1
    |
161 |         name: Circuit breaker name
162 |         config: Circuit breaker configuration
163 |         
    | ^^^^^^^^
164 |     Usage:
165 |         @circuit_breaker("external_api")
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:219:1
    |
217 |     """
218 |     Enhanced retry decorator with exponential backoff and jitter.
219 |     
    | ^^^^
220 |     Args:
221 |         max_attempts: Maximum number of retry attempts
    |
help: Remove whitespace from blank line

E501 Line too long (124 > 100)
   --> scripts/circuit_breaker.py:252:101
    |
250 |                         delay = delay * (0.5 + random.random() * 0.5)
251 |
252 |                     logger.debug(f"Retry attempt {attempt + 1}/{max_attempts} for {func.__name__} after {delay:.2f}s delay")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
253 |                     time.sleep(delay)
    |

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:267:1
    |
265 |     """
266 |     Perform a health check on an external service.
267 |     
    | ^^^^
268 |     Args:
269 |         name: Service name for logging
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/circuit_breaker.py:272:1
    |
270 |         check_func: Function that returns True if service is healthy
271 |         timeout: Timeout for the health check
272 |         
    | ^^^^^^^^
273 |     Returns:
274 |         True if service is healthy, False otherwise
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
  --> scripts/codemods/phase3_canonical_imports.py:43:101
   |
41 |             new = self._rewrite_name(updated.name.value)
42 |             if new != updated.name.value:
43 |                 return updated.with_changes(name=cst.parse_module(new).body[0].body[0].names[0].name)
   |                                                                                                     ^
44 |         elif isinstance(updated.name, cst.Attribute):
45 |             # import bot_engine.something -> ai_trading.bot_engine.something
   |

E501 Line too long (102 > 100)
  --> scripts/codemods/phase3_canonical_imports.py:85:101
   |
83 |                 return updated
84 |
85 |             # For files outside ai_trading/, convert relative imports if they reference legacy modules
   |                                                                                                     ^^
86 |             if updated.module.module is not None:
87 |                 module_name = cst.Module([]).code_for_node(updated.module.module)
   |

E501 Line too long (104 > 100)
   --> scripts/codemods/phase3_canonical_imports.py:108:101
    |
106 |     rel = str(path)
107 |     # Visit production code and tests; skip venv, build, .git, artifacts
108 |     skip_dirs = (".git/", "venv/", ".venv/", "build/", "dist/", "artifacts/", "models/", "__pycache__/")
    |                                                                                                     ^^^^
109 |     return not any(s in rel for s in skip_dirs)
    |

I001 [*] Import block is un-sorted or un-formatted
 --> scripts/config_server.py:1:1
  |
1 | / import logging
2 | |
3 | | from ai_trading.config import management as config
4 | | from ai_trading.config.management import TradingConfig
  | |______________________________________________________^
5 |   CONFIG = TradingConfig()
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/critical_fixes_validation.py:32:9
   |
30 |           logging.info("\n🔧 Testing P0 Fix: Quantity Calculation Bug")
31 |
32 | /         from trade_execution import ExecutionEngine
33 | |         # (mocks removed; see tests/mocks/critical_fixes_validation_mocks.py)
34 | |         from tests.mocks.critical_fixes_validation_mocks import MockOrder, MockContext
   | |______________________________________________________________________________________^
35 |
36 |           # Test the fixed _reconcile_partial_fills method
   |
help: Organize imports

E501 Line too long (104 > 100)
  --> scripts/critical_fixes_validation.py:66:101
   |
64 |                         "Recovery timeout should be increased from 1800s to 3600s")
65 |
66 |         logging.info(f"  ✓ Failure threshold increased to {self.sentiment.SENTIMENT_FAILURE_THRESHOLD}")
   |                                                                                                     ^^^^
67 |         logging.info(f"  ✓ Recovery timeout increased to {self.sentiment.SENTIMENT_RECOVERY_TIMEOUT}s (1 hour)")
68 |         logging.info("  ✓ Circuit breaker now more tolerant of API rate limiting")
   |

E501 Line too long (112 > 100)
  --> scripts/critical_fixes_validation.py:67:101
   |
66 |         logging.info(f"  ✓ Failure threshold increased to {self.sentiment.SENTIMENT_FAILURE_THRESHOLD}")
67 |         logging.info(f"  ✓ Recovery timeout increased to {self.sentiment.SENTIMENT_RECOVERY_TIMEOUT}s (1 hour)")
   |                                                                                                     ^^^^^^^^^^^^
68 |         logging.info("  ✓ Circuit breaker now more tolerant of API rate limiting")
   |

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/critical_fixes_validation.py:120:9
    |
118 |           logging.info("\n🔧 Testing P2 Fix: Short Selling Validation (Foundation)")
119 |
120 | /         from trade_execution import ExecutionEngine
121 | |         # (mocks removed; see tests/mocks/critical_fixes_validation_mocks.py)
122 | |         from tests.mocks.critical_fixes_validation_mocks import MockContextShortSelling
    | |_______________________________________________________________________________________^
123 |
124 |           ctx = MockContextShortSelling()
    |
help: Organize imports

W291 Trailing whitespace
  --> scripts/debug_cli.py:12:81
   |
10 |     python debug_cli.py status                    # Show overall status
11 |     python debug_cli.py executions [--limit 10]  # Show recent executions
12 |     python debug_cli.py positions                 # Check position discrepancies  
   |                                                                                 ^^
13 |     python debug_cli.py pnl [symbol]             # Show PnL breakdown
14 |     python debug_cli.py trace [correlation_id]   # Trace execution timeline
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> scripts/debug_cli.py:35:1
   |
33 |     logging.info("📊 EXECUTION SYSTEM STATUS")
34 |     logging.info(str("=" * 40))
35 |     
   | ^^^^
36 |     try:
37 |         from ai_trading.execution import get_execution_statistics, get_reconciliation_statistics
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/debug_cli.py:38:1
   |
36 |     try:
37 |         from ai_trading.execution import get_execution_statistics, get_reconciliation_statistics
38 |         
   | ^^^^^^^^
39 |         # Execution statistics
40 |         exec_stats = get_execution_statistics()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/debug_cli.py:45:1
   |
43 |         logging.info(str(f"Recent Failures: {exec_stats['recent_failures']}"))
44 |         logging.info(str(f"Success Rate: {exec_stats['success_rate']:.1%}"))
45 |         
   | ^^^^^^^^
46 |         # Position reconciliation
47 |         recon_stats = get_reconciliation_statistics()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/debug_cli.py:50:1
   |
48 |         logging.info(str(f"Position Discrepancies: {recon_stats['current_discrepancies']}"))
49 |         logging.info(str(f"Bot Positions: {recon_stats['bot_positions_count']}"))
50 |         
   | ^^^^^^^^
51 |         # Overall health indicator
52 |         if exec_stats['success_rate'] > 0.95 and recon_stats['current_discrepancies'] == 0:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/debug_cli.py:58:1
   |
56 |         else:
57 |             logging.info("🔴 System Status: ISSUES DETECTED")
58 |             
   | ^^^^^^^^^^^^
59 |     except Exception as e:
60 |         logging.info(f"❌ Error getting status: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/debug_cli.py:67:1
   |
65 |     logging.info(f"📋 RECENT EXECUTIONS (last {limit})")
66 |     logging.info(str("=" * 40))
67 |     
   | ^^^^
68 |     try:
69 |         from ai_trading.execution import get_debug_tracker
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/debug_cli.py:70:1
   |
68 |     try:
69 |         from ai_trading.execution import get_debug_tracker
70 |         
   | ^^^^^^^^
71 |         tracker = get_debug_tracker()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/debug_cli.py:72:1
   |
71 |         tracker = get_debug_tracker()
72 |         
   | ^^^^^^^^
73 |         # Show recent successful executions
74 |         successes = tracker.get_recent_executions(limit=limit)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/debug_cli.py:83:1
   |
81 |                 start_time = exec_data.get('start_time', 'Unknown')
82 |                 logging.info(f"  {symbol} {side} {qty} shares at {start_time}")
83 |         
   | ^^^^^^^^
84 |         # Show recent failures
85 |         failures = tracker.get_failed_executions(limit=limit)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/debug_cli.py:94:1
   |
92 |                 error = exec_data.get('error', 'Unknown error')
93 |                 logging.info(f"  {symbol} {side} {qty} shares - {error}")
94 |         
   | ^^^^^^^^
95 |         # Show active orders
96 |         active = tracker.get_active_orders()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:104:1
    |
102 |                 status = order_data.get('status', 'Unknown')
103 |                 logging.info(f"  {symbol} {side} - {status} (ID: {correlation_id[:8]}...)")
104 |         
    | ^^^^^^^^
105 |         if not successes and not failures and not active:
106 |             logging.info("No recent executions found.")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:107:1
    |
105 |         if not successes and not failures and not active:
106 |             logging.info("No recent executions found.")
107 |             
    | ^^^^^^^^^^^^
108 |     except Exception as e:
109 |         logging.info(f"❌ Error getting executions: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:116:1
    |
114 |     logging.info("🏦 POSITION RECONCILIATION")
115 |     logging.info(str("=" * 40))
116 |     
    | ^^^^
117 |     try:
118 |         from ai_trading.execution import (
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/debug_cli.py:118:9
    |
117 |       try:
118 | /         from ai_trading.execution import (
119 | |             get_position_reconciler, force_position_reconciliation
120 | |         )
    | |_________^
121 |           
122 |           reconciler = get_position_reconciler()
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:121:1
    |
119 |             get_position_reconciler, force_position_reconciliation
120 |         )
121 |         
    | ^^^^^^^^
122 |         reconciler = get_position_reconciler()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:123:1
    |
122 |         reconciler = get_position_reconciler()
123 |         
    | ^^^^^^^^
124 |         # Show current bot positions
125 |         bot_positions = reconciler.get_bot_positions()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:132:1
    |
130 |         else:
131 |             logging.info("  No positions tracked by bot")
132 |         
    | ^^^^^^^^
133 |         # Force reconciliation check
134 |         logging.info("\n🔄 Running reconciliation check...")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:136:1
    |
134 |         logging.info("\n🔄 Running reconciliation check...")
135 |         discrepancies = force_position_reconciliation()
136 |         
    | ^^^^^^^^
137 |         if discrepancies:
138 |             logging.info(f"\n⚠️  DISCREPANCIES FOUND ({len(discrepancies)}):")
    |
help: Remove whitespace from blank line

E501 Line too long (112 > 100)
   --> scripts/debug_cli.py:140:99
    |
138 |             logging.info(f"\n⚠️  DISCREPANCIES FOUND ({len(discrepancies)}):")
139 |             for disc in discrepancies:
140 |                 severity_icon = "🔴" if disc.severity == "high" else "🟡" if disc.severity == "medium" else "🟢"
    |                                                                                                     ^^^^^^^^^^^^
141 |                 logging.info(f"  {severity_icon} {disc.symbol}:")
142 |                 logging.info(f"    Bot: {disc.bot_qty} shares")
    |

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:149:1
    |
147 |         else:
148 |             logging.info("\n✅ No discrepancies found - positions are in sync")
149 |             
    | ^^^^^^^^^^^^
150 |     except Exception as e:
151 |         logging.info(f"❌ Error checking positions: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:161:1
    |
159 |         logging.info("💰 PORTFOLIO PnL SUMMARY")
160 |     logging.info(str("=" * 40))
161 |     
    | ^^^^
162 |     try:
163 |         from ai_trading.execution import (
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/debug_cli.py:163:9
    |
162 |       try:
163 | /         from ai_trading.execution import (
164 | |             get_pnl_attributor, get_symbol_pnl_breakdown, 
165 | |             get_portfolio_pnl_summary, explain_recent_pnl_changes
166 | |         )
    | |_________^
167 |           
168 |           attributor = get_pnl_attributor()
    |
help: Organize imports

W291 [*] Trailing whitespace
   --> scripts/debug_cli.py:164:58
    |
162 |     try:
163 |         from ai_trading.execution import (
164 |             get_pnl_attributor, get_symbol_pnl_breakdown, 
    |                                                          ^
165 |             get_portfolio_pnl_summary, explain_recent_pnl_changes
166 |         )
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:167:1
    |
165 |             get_portfolio_pnl_summary, explain_recent_pnl_changes
166 |         )
167 |         
    | ^^^^^^^^
168 |         attributor = get_pnl_attributor()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:169:1
    |
168 |         attributor = get_pnl_attributor()
169 |         
    | ^^^^^^^^
170 |         if symbol:
171 |             # Show specific symbol breakdown
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:173:1
    |
171 |             # Show specific symbol breakdown
172 |             breakdown = get_symbol_pnl_breakdown(symbol)
173 |             
    | ^^^^^^^^^^^^
174 |             if breakdown:
175 |                 total_realized = 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:183:1
    |
181 |                         if source != 'unrealized':
182 |                             total_realized += amount
183 |                 
    | ^^^^^^^^^^^^^^^^
184 |                 logging.info("\n📊 SUMMARY:")
185 |                 logging.info(f"  Total Realized: ${total_realized:+.2f}")
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> scripts/debug_cli.py:188:101
    |
186 |                 if 'unrealized' in breakdown:
187 |                     logging.info(str(f"  Unrealized: ${breakdown['unrealized']:+.2f}"))
188 |                     logging.info(str(f"  Net PnL: ${total_realized + breakdown['unrealized']:+.2f}"))
    |                                                                                                     ^
189 |                 
190 |                 # Explain recent changes
    |

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:189:1
    |
187 |                     logging.info(str(f"  Unrealized: ${breakdown['unrealized']:+.2f}"))
188 |                     logging.info(str(f"  Net PnL: ${total_realized + breakdown['unrealized']:+.2f}"))
189 |                 
    | ^^^^^^^^^^^^^^^^
190 |                 # Explain recent changes
191 |                 explanation = explain_recent_pnl_changes(symbol, minutes=60)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:201:1
    |
199 |             # Show portfolio summary
200 |             summary = get_portfolio_pnl_summary()
201 |             
    | ^^^^^^^^^^^^
202 |             logging.info("📊 PORTFOLIO SUMMARY:")
203 |             logging.info(str(f"  Total Realized PnL: ${summary['total_realized_pnl']:+.2f}"))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:206:1
    |
204 |             logging.info(str(f"  Total Unrealized PnL: ${summary['total_unrealized_pnl']:+.2f}"))
205 |             logging.info(str(f"  Net PnL: ${summary['total_pnl']:+.2f}"))
206 |             
    | ^^^^^^^^^^^^
207 |             if summary['pnl_by_source']:
208 |                 logging.info("\n💰 PnL BY SOURCE:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:213:1
    |
211 |                         icon = "💚" if amount > 0 else "💸"
212 |                         logging.info(f"  {icon} {source}: ${amount:+.2f}")
213 |             
    | ^^^^^^^^^^^^
214 |             if summary['today_pnl']:
215 |                 logging.info(str("\n📅 TODAY'S PnL:"))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:219:1
    |
217 |                     if amount != 0:
218 |                         logging.info(f"  {source}: ${amount:+.2f}")
219 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
220 |     except Exception as e:
221 |         logging.info(f"❌ Error getting PnL data: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:228:1
    |
226 |     logging.info(f"🔍 EXECUTION TRACE: {correlation_id}")
227 |     logging.info(str("=" * 40))
228 |     
    | ^^^^
229 |     try:
230 |         from ai_trading.execution import get_debug_tracker
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:231:1
    |
229 |     try:
230 |         from ai_trading.execution import get_debug_tracker
231 |         
    | ^^^^^^^^
232 |         tracker = get_debug_tracker()
233 |         timeline = tracker.get_execution_timeline(correlation_id)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:234:1
    |
232 |         tracker = get_debug_tracker()
233 |         timeline = tracker.get_execution_timeline(correlation_id)
234 |         
    | ^^^^^^^^
235 |         if timeline:
236 |             logging.info(f"📅 TIMELINE ({len(timeline)} events):")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:241:1
    |
239 |                 phase = event['phase']
240 |                 data = event.get('data', {})
241 |                 
    | ^^^^^^^^^^^^^^^^
242 |                 # Format timestamp
243 |                 try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:248:1
    |
246 |                 except (ValueError, TypeError):
247 |                     time_str = timestamp
248 |                 
    | ^^^^^^^^^^^^^^^^
249 |                 logging.info(f"\n  {i:2d}. {time_str} - {phase.upper()}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:250:1
    |
249 |                 logging.info(f"\n  {i:2d}. {time_str} - {phase.upper()}")
250 |                 
    | ^^^^^^^^^^^^^^^^
251 |                 # Show relevant data
252 |                 if data:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:259:1
    |
257 |             logging.info(f"❌ No timeline found for correlation ID: {correlation_id}")
258 |             logging.info("Available correlation IDs:")
259 |             
    | ^^^^^^^^^^^^
260 |             # Show available correlation IDs
261 |             active_orders = tracker.get_active_orders()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:263:1
    |
261 |             active_orders = tracker.get_active_orders()
262 |             recent_executions = tracker.get_recent_executions(limit=5)
263 |             
    | ^^^^^^^^^^^^
264 |             all_ids = set()
265 |             all_ids.update(active_orders.keys())
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:269:1
    |
267 |                 if 'correlation_id' in exec_data:
268 |                     all_ids.add(exec_data['correlation_id'])
269 |             
    | ^^^^^^^^^^^^
270 |             for correlation_id in sorted(all_ids):
271 |                 logging.info(f"  {correlation_id}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:272:1
    |
270 |             for correlation_id in sorted(all_ids):
271 |                 logging.info(f"  {correlation_id}")
272 |                 
    | ^^^^^^^^^^^^^^^^
273 |     except Exception as e:
274 |         logging.info(f"❌ Error tracing execution: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:281:1
    |
279 |     logging.info("🏥 SYSTEM HEALTH CHECK")
280 |     logging.info(str("=" * 40))
281 |     
    | ^^^^
282 |     try:
283 |         from ai_trading.execution import (
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/debug_cli.py:283:9
    |
282 |       try:
283 | /         from ai_trading.execution import (
284 | |             get_execution_statistics, get_pnl_attribution_stats, force_position_reconciliation
285 | |         )
    | |_________^
286 |           
287 |           issues = []
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:286:1
    |
284 |             get_execution_statistics, get_pnl_attribution_stats, force_position_reconciliation
285 |         )
286 |         
    | ^^^^^^^^
287 |         issues = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:288:1
    |
287 |         issues = []
288 |         
    | ^^^^^^^^
289 |         # Check execution health
290 |         logging.info("🔄 Checking execution system...")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:292:1
    |
290 |         logging.info("🔄 Checking execution system...")
291 |         exec_stats = get_execution_statistics()
292 |         
    | ^^^^^^^^
293 |         if exec_stats['success_rate'] < 0.9:
294 |             issues.append(f"Low execution success rate: {exec_stats['success_rate']:.1%}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:295:1
    |
293 |         if exec_stats['success_rate'] < 0.9:
294 |             issues.append(f"Low execution success rate: {exec_stats['success_rate']:.1%}")
295 |         
    | ^^^^^^^^
296 |         if exec_stats['active_orders'] > 10:
297 |             issues.append(f"High number of active orders: {exec_stats['active_orders']}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:298:1
    |
296 |         if exec_stats['active_orders'] > 10:
297 |             issues.append(f"High number of active orders: {exec_stats['active_orders']}")
298 |         
    | ^^^^^^^^
299 |         # Check position reconciliation
300 |         logging.info("🏦 Checking position reconciliation...")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:302:1
    |
300 |         logging.info("🏦 Checking position reconciliation...")
301 |         discrepancies = force_position_reconciliation()
302 |         
    | ^^^^^^^^
303 |         high_severity_discrepancies = [d for d in discrepancies if d.severity == 'high']
304 |         if high_severity_discrepancies:
    |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> scripts/debug_cli.py:305:101
    |
303 |         high_severity_discrepancies = [d for d in discrepancies if d.severity == 'high']
304 |         if high_severity_discrepancies:
305 |             issues.append(f"High severity position discrepancies: {len(high_severity_discrepancies)}")
    |                                                                                                     ^^
306 |         
307 |         # Check PnL attribution
    |

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:306:1
    |
304 |         if high_severity_discrepancies:
305 |             issues.append(f"High severity position discrepancies: {len(high_severity_discrepancies)}")
306 |         
    | ^^^^^^^^
307 |         # Check PnL attribution
308 |         logging.info("💰 Checking PnL attribution...")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:310:1
    |
308 |         logging.info("💰 Checking PnL attribution...")
309 |         pnl_stats = get_pnl_attribution_stats()
310 |         
    | ^^^^^^^^
311 |         if pnl_stats.get('total_events', 0) == 0:
312 |             issues.append("No PnL events recorded - may indicate tracking issues")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:313:1
    |
311 |         if pnl_stats.get('total_events', 0) == 0:
312 |             issues.append("No PnL events recorded - may indicate tracking issues")
313 |         
    | ^^^^^^^^
314 |         # Report results
315 |         logging.info("\n📋 HEALTH CHECK RESULTS:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:322:1
    |
320 |         else:
321 |             logging.info("✅ No issues detected - system appears healthy")
322 |         
    | ^^^^^^^^
323 |         # Show summary stats
324 |         logging.info("\n📊 SYSTEM METRICS:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:329:1
    |
327 |         logging.info(f"  Position discrepancies: {len(discrepancies)}")
328 |         logging.info(f"  PnL events tracked: {pnl_stats.get('total_events', 0)}")
329 |         
    | ^^^^^^^^
330 |     except Exception as e:
331 |         logging.info(f"❌ Error running health check: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:340:1
    |
338 |         formatter_class=argparse.RawDescriptionHelpFormatter
339 |     )
340 |     
    | ^^^^
341 |     subparsers = parser.add_subparsers(dest='command', help='Available commands')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:342:1
    |
341 |     subparsers = parser.add_subparsers(dest='command', help='Available commands')
342 |     
    | ^^^^
343 |     # Status command
344 |     subparsers.add_parser('status', help='Show overall execution system status')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:345:1
    |
343 |     # Status command
344 |     subparsers.add_parser('status', help='Show overall execution system status')
345 |     
    | ^^^^
346 |     # Executions command
347 |     exec_parser = subparsers.add_parser('executions', help='Show recent executions')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:349:1
    |
347 |     exec_parser = subparsers.add_parser('executions', help='Show recent executions')
348 |     exec_parser.add_argument('--limit', type=int, default=10, help='Limit number of results')
349 |     
    | ^^^^
350 |     # Positions command
351 |     subparsers.add_parser('positions', help='Check position discrepancies')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:352:1
    |
350 |     # Positions command
351 |     subparsers.add_parser('positions', help='Check position discrepancies')
352 |     
    | ^^^^
353 |     # PnL command
354 |     pnl_parser = subparsers.add_parser('pnl', help='Show PnL breakdown')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:356:1
    |
354 |     pnl_parser = subparsers.add_parser('pnl', help='Show PnL breakdown')
355 |     pnl_parser.add_argument('symbol', nargs='?', help='Symbol to analyze (optional)')
356 |     
    | ^^^^
357 |     # Trace command
358 |     trace_parser = subparsers.add_parser('trace', help='Trace execution timeline')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:360:1
    |
358 |     trace_parser = subparsers.add_parser('trace', help='Trace execution timeline')
359 |     trace_parser.add_argument('correlation_id', help='Correlation ID to trace')
360 |     
    | ^^^^
361 |     # Health command
362 |     subparsers.add_parser('health', help='Run comprehensive health check')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:363:1
    |
361 |     # Health command
362 |     subparsers.add_parser('health', help='Run comprehensive health check')
363 |     
    | ^^^^
364 |     args = parser.parse_args()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:365:1
    |
364 |     args = parser.parse_args()
365 |     
    | ^^^^
366 |     if not args.command:
367 |         parser.print_help()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:369:1
    |
367 |         parser.print_help()
368 |         return
369 |     
    | ^^^^
370 |     try:
371 |         if args.command == 'status':
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/debug_cli.py:386:1
    |
384 |             logging.info(f"Unknown command: {args.command}")
385 |             parser.print_help()
386 |             
    | ^^^^^^^^^^^^
387 |     except KeyboardInterrupt:
388 |         logging.info("\n👋 Goodbye!")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/debug_cli.py:395:11
    |
394 | if __name__ == '__main__':
395 |     main()
    |           ^
    |
help: Add trailing newline

E501 Line too long (114 > 100)
  --> scripts/debug_drawdown.py:72:101
   |
70 |                 result = breaker.update_equity(equity)
71 |                 status = breaker.get_status()
72 |                 logging.info(str(f"Update {i+1}: equity=${equity:.2f}, result={result}, state={status['state']}"))
   |                                                                                                     ^^^^^^^^^^^^^^
73 |             except Exception as e:
74 |                 logging.info(f"❌ Error on update {i+1}: {e}")
   |

W291 Trailing whitespace
 --> scripts/demo_centralized_imports.py:7:70
  |
5 | Demonstration of the centralized import management system.
6 |
7 | This script shows how the ai_trading.imports module provides graceful 
  |                                                                      ^
8 | fallbacks for dependencies that may not be available.
  |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> scripts/demo_centralized_imports.py:24:1
   |
22 |     logging.info("AI Trading Bot - Centralized Import Management Demo")
23 |     logging.info(str("=" * 60))
24 |     
   | ^^^^
25 |     # Import our centralized imports module directly
26 |     import importlib.util
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_centralized_imports.py:30:1
   |
28 |     imports_module = importlib.util.module_from_spec(spec)
29 |     spec.loader.exec_module(imports_module)
30 |     
   | ^^^^
31 |     # Extract the components we need
32 |     np = imports_module.np
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_centralized_imports.py:43:1
   |
41 |     LinearRegression = imports_module.LinearRegression
42 |     StandardScaler = imports_module.StandardScaler
43 |     
   | ^^^^
44 |     logging.info("\n📊 Dependency Availability Status:")
45 |     logging.info(str(f"   NumPy:       {'✅ Available' if NUMPY_AVAILABLE else '❌ Using Mock'}"))
   |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
  --> scripts/demo_centralized_imports.py:49:99
   |
47 |     logging.info(str(f"   Scikit-learn:{'✅ Available' if SKLEARN_AVAILABLE else '❌ Using Mock'}"))
48 |     logging.info(str(f"   TA-Lib:      {'✅ Available' if TALIB_AVAILABLE else '❌ Using Mock'}"))
49 |     logging.info(str(f"   pandas-ta:   {'✅ Available' if PANDAS_TA_AVAILABLE else '❌ Using Mock'}"))
   |                                                                                                     ^^
50 |     
51 |     logging.info("\n🔬 Testing NumPy Operations:")
   |

W293 [*] Blank line contains whitespace
  --> scripts/demo_centralized_imports.py:50:1
   |
48 |     logging.info(str(f"   TA-Lib:      {'✅ Available' if TALIB_AVAILABLE else '❌ Using Mock'}"))
49 |     logging.info(str(f"   pandas-ta:   {'✅ Available' if PANDAS_TA_AVAILABLE else '❌ Using Mock'}"))
50 |     
   | ^^^^
51 |     logging.info("\n🔬 Testing NumPy Operations:")
52 |     data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_centralized_imports.py:60:1
   |
58 |     logging.info(f"   Standard deviation: {std_val}")
59 |     logging.info(f"   Mathematical constants: π = {np.pi}, e = {np.e}")
60 |     
   | ^^^^
61 |     logging.info("\n📈 Testing Pandas Operations:")
62 |     df = pd.DataFrame({
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_centralized_imports.py:68:1
   |
66 |     logging.info(f"   DataFrame shape: {df.shape}")
67 |     logging.info(f"   DataFrame empty: {df.empty}")
68 |     
   | ^^^^
69 |     # Test Series operations
70 |     price_series = df['price'] if hasattr(df, '__getitem__') else pd.Series([100, 102, 101, 105])
   |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
  --> scripts/demo_centralized_imports.py:71:101
   |
69 |     # Test Series operations
70 |     price_series = df['price'] if hasattr(df, '__getitem__') else pd.Series([100, 102, 101, 105])
71 |     rolling_mean = price_series.rolling(3).mean() if hasattr(price_series, 'rolling') else price_series
   |                                                                                                     ^^^
72 |     logging.info(f"   Price series mean: {price_series.mean()}")
73 |     logging.info(f"   Rolling mean calculated: {hasattr(rolling_mean, 'data') or hasattr(rolling_mean, '__len__')}")
   |

E501 Line too long (116 > 100)
  --> scripts/demo_centralized_imports.py:73:101
   |
71 |     rolling_mean = price_series.rolling(3).mean() if hasattr(price_series, 'rolling') else price_series
72 |     logging.info(f"   Price series mean: {price_series.mean()}")
73 |     logging.info(f"   Rolling mean calculated: {hasattr(rolling_mean, 'data') or hasattr(rolling_mean, '__len__')}")
   |                                                                                                     ^^^^^^^^^^^^^^^^
74 |     
75 |     logging.info("\n🤖 Testing Machine Learning:")
   |

W293 [*] Blank line contains whitespace
  --> scripts/demo_centralized_imports.py:74:1
   |
72 |     logging.info(f"   Price series mean: {price_series.mean()}")
73 |     logging.info(f"   Rolling mean calculated: {hasattr(rolling_mean, 'data') or hasattr(rolling_mean, '__len__')}")
74 |     
   | ^^^^
75 |     logging.info("\n🤖 Testing Machine Learning:")
76 |     # Prepare sample data
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_centralized_imports.py:79:1
   |
77 |     X = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]
78 |     y = [10, 20, 30, 40, 50]
79 |     
   | ^^^^
80 |     # Test LinearRegression
81 |     lr = LinearRegression()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_centralized_imports.py:86:1
   |
84 |     logging.info("   Linear regression trained successfully")
85 |     logging.info(f"   Prediction for [6, 7]: {predictions}")
86 |     
   | ^^^^
87 |     # Test StandardScaler
88 |     scaler = StandardScaler()
   |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
  --> scripts/demo_centralized_imports.py:91:101
   |
89 |     X_scaled = scaler.fit_transform(X)
90 |     logging.info("   Standard scaling completed")
91 |     logging.info(str(f"   Scaled data shape: {len(X_scaled) if hasattr(X_scaled, '__len__') else 'N/A'}"))
   |                                                                                                     ^^^^^^
92 |     
93 |     logging.info("\n📊 Testing Technical Analysis:")
   |

W293 [*] Blank line contains whitespace
  --> scripts/demo_centralized_imports.py:92:1
   |
90 |     logging.info("   Standard scaling completed")
91 |     logging.info(str(f"   Scaled data shape: {len(X_scaled) if hasattr(X_scaled, '__len__') else 'N/A'}"))
92 |     
   | ^^^^
93 |     logging.info("\n📊 Testing Technical Analysis:")
94 |     # Prepare price data
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_centralized_imports.py:98:1
   |
96 |     high_data = [x + 2 for x in price_data]
97 |     low_data = [x - 2 for x in price_data]
98 |     
   | ^^^^
99 |     ta_lib = get_ta_lib()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_centralized_imports.py:100:1
    |
 99 |     ta_lib = get_ta_lib()
100 |     
    | ^^^^
101 |     # Test SMA
102 |     sma_5 = ta_lib.SMA(price_data, timeperiod=5)
    |
help: Remove whitespace from blank line

E501 Line too long (115 > 100)
   --> scripts/demo_centralized_imports.py:104:101
    |
102 |     sma_5 = ta_lib.SMA(price_data, timeperiod=5)
103 |     logging.info(f"   SMA(5) calculated: {len(sma_5)} values")
104 |     logging.info(str(f"   SMA(5) last 3 values: {sma_5[-3:] if hasattr(sma_5, '__getitem__') else 'Mock result'}"))
    |                                                                                                     ^^^^^^^^^^^^^^^
105 |     
106 |     # Test EMA
    |

W293 [*] Blank line contains whitespace
   --> scripts/demo_centralized_imports.py:105:1
    |
103 |     logging.info(f"   SMA(5) calculated: {len(sma_5)} values")
104 |     logging.info(str(f"   SMA(5) last 3 values: {sma_5[-3:] if hasattr(sma_5, '__getitem__') else 'Mock result'}"))
105 |     
    | ^^^^
106 |     # Test EMA
107 |     ema_5 = ta_lib.EMA(price_data, timeperiod=5)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_centralized_imports.py:109:1
    |
107 |     ema_5 = ta_lib.EMA(price_data, timeperiod=5)
108 |     logging.info(f"   EMA(5) calculated: {len(ema_5)} values")
109 |     
    | ^^^^
110 |     # Test RSI
111 |     rsi = ta_lib.RSI(price_data, timeperiod=10)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_centralized_imports.py:113:1
    |
111 |     rsi = ta_lib.RSI(price_data, timeperiod=10)
112 |     logging.info(f"   RSI(10) calculated: {len(rsi)} values")
113 |     
    | ^^^^
114 |     # Test MACD
115 |     macd, signal, histogram = ta_lib.MACD(price_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_centralized_imports.py:118:1
    |
116 |     logging.info(f"   MACD calculated: {len(macd)} values")
117 |     logging.info("   MACD components: MACD line, Signal line, Histogram")
118 |     
    | ^^^^
119 |     # Test Bollinger Bands
120 |     upper, middle, lower = ta_lib.BBANDS(price_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_centralized_imports.py:123:1
    |
121 |     logging.info(f"   Bollinger Bands calculated: {len(upper)} values")
122 |     logging.info("   BB components: Upper band, Middle band (SMA), Lower band")
123 |     
    | ^^^^
124 |     # Test ATR
125 |     atr = ta_lib.ATR(high_data, low_data, price_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_centralized_imports.py:127:1
    |
125 |     atr = ta_lib.ATR(high_data, low_data, price_data)
126 |     logging.info(f"   ATR calculated: {len(atr)} values")
127 |     
    | ^^^^
128 |     logging.info("\n✅ Summary:")
129 |     logging.info("   All core functionality working correctly!")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_centralized_imports.py:136:1
    |
134 |     logging.info("   • Machine learning functionality")
135 |     logging.info("   • Mathematical and statistical operations")
136 |     
    | ^^^^
137 |     logging.info("\n🎯 Benefits:")
138 |     logging.info("   • Trading bot can run in minimal environments")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_centralized_imports.py:142:1
    |
140 |     logging.info("   • Development environments are more flexible")
141 |     logging.info("   • Production deployments are more robust")
142 |     
    | ^^^^
143 |     logging.info(str("\n" + "=" * 60))
144 |     logging.info("Centralized Import Management System: SUCCESS! ✨")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/demo_centralized_imports.py:149:11
    |
148 | if __name__ == "__main__":
149 |     main()
    |           ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/demo_drawdown_protection.py:12:1
   |
10 | """
11 |
12 | import os
   | ^^^^^^^^^
13 | os.environ["TESTING"] = "1"
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/demo_drawdown_protection.py:15:1
   |
13 |   os.environ["TESTING"] = "1"
14 |
15 | / from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker
16 | | from ai_trading.config import management as config
17 | | from ai_trading.config.management import TradingConfig
   | |______________________________________________________^
18 |   CONFIG = TradingConfig()
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/demo_drawdown_protection.py:22:1
   |
20 | def simulate_trading_session():
21 |     """Simulate a volatile trading session with drawdown protection."""
22 |     
   | ^^^^
23 |     logging.info("🤖 AI Trading Bot - Centralized Configuration Demo")
24 |     logging.info(str("=" * 60))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_drawdown_protection.py:25:1
   |
23 |     logging.info("🤖 AI Trading Bot - Centralized Configuration Demo")
24 |     logging.info(str("=" * 60))
25 |     
   | ^^^^
26 |     # Get configuration for different modes
27 |     conservative_config = config.TradingConfig.from_env("conservative")
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> scripts/demo_drawdown_protection.py:28:64
   |
26 |     # Get configuration for different modes
27 |     conservative_config = config.TradingConfig.from_env("conservative")
28 |     balanced_config = config.TradingConfig.from_env("balanced") 
   |                                                                ^
29 |     aggressive_config = config.TradingConfig.from_env("aggressive")
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> scripts/demo_drawdown_protection.py:30:1
   |
28 |     balanced_config = config.TradingConfig.from_env("balanced") 
29 |     aggressive_config = config.TradingConfig.from_env("aggressive")
30 |     
   | ^^^^
31 |     logging.info("📊 Configuration Comparison:")
32 |     logging.info(str("-" * 60))
   |
help: Remove whitespace from blank line

E501 Line too long (155 > 100)
  --> scripts/demo_drawdown_protection.py:33:101
   |
31 | …
32 | …
33 | …_config.max_drawdown_threshold:.1%}, Daily Loss = {conservative_config.daily_loss_limit:.1%}")
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 | …fig.max_drawdown_threshold:.1%}, Daily Loss = {balanced_config.daily_loss_limit:.1%}")
35 | …onfig.max_drawdown_threshold:.1%}, Daily Loss = {aggressive_config.daily_loss_limit:.1%}")
   |

E501 Line too long (147 > 100)
  --> scripts/demo_drawdown_protection.py:34:101
   |
32 | …
33 | …tive_config.max_drawdown_threshold:.1%}, Daily Loss = {conservative_config.daily_loss_limit:.1%}")
34 | …_config.max_drawdown_threshold:.1%}, Daily Loss = {balanced_config.daily_loss_limit:.1%}")
   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
35 | …ve_config.max_drawdown_threshold:.1%}, Daily Loss = {aggressive_config.daily_loss_limit:.1%}")
36 | …
   |

E501 Line too long (151 > 100)
  --> scripts/demo_drawdown_protection.py:35:101
   |
33 | …ve_config.max_drawdown_threshold:.1%}, Daily Loss = {conservative_config.daily_loss_limit:.1%}")
34 | …onfig.max_drawdown_threshold:.1%}, Daily Loss = {balanced_config.daily_loss_limit:.1%}")
35 | …_config.max_drawdown_threshold:.1%}, Daily Loss = {aggressive_config.daily_loss_limit:.1%}")
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
36 | …
   |

W293 [*] Blank line contains whitespace
  --> scripts/demo_drawdown_protection.py:37:1
   |
35 |     logging.info(f"Aggressive:   Max Drawdown = {aggressive_config.max_drawdown_threshold:.1%}, Daily Loss = {aggressive_config.daily_…
36 |     print()
37 |     
   | ^^^^
38 |     # Use balanced mode for the simulation
39 |     current_config = balanced_config
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_drawdown_protection.py:46:1
   |
44 |     logging.info(f"  • Confidence Threshold: {current_config.conf_threshold}")
45 |     print()
46 |     
   | ^^^^
47 |     # Initialize circuit breaker with centralized config
48 |     breaker = DrawdownCircuitBreaker(max_drawdown=current_config.max_drawdown_threshold)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_drawdown_protection.py:49:1
   |
47 |     # Initialize circuit breaker with centralized config
48 |     breaker = DrawdownCircuitBreaker(max_drawdown=current_config.max_drawdown_threshold)
49 |     
   | ^^^^
50 |     # Simulate trading session with equity updates
51 |     trading_session = [
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_drawdown_protection.py:64:1
   |
62 |         ("16:00", 95000.0, "Strong recovery - should resume trading"),
63 |     ]
64 |     
   | ^^^^
65 |     logging.info("📊 Trading Session Simulation:")
66 |     logging.info(str("-" * 60))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_drawdown_protection.py:67:1
   |
65 |     logging.info("📊 Trading Session Simulation:")
66 |     logging.info(str("-" * 60))
67 |     
   | ^^^^
68 |     for time, equity, description in trading_session:
69 |         # This simulates the equity update that happens in run_all_trades_worker
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_drawdown_protection.py:72:1
   |
70 |         trading_allowed = breaker.update_equity(equity)
71 |         status = breaker.get_status()
72 |         
   | ^^^^^^^^
73 |         # Format output
74 |         change = ""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_drawdown_protection.py:78:1
   |
76 |             pct_change = ((equity - status["peak_equity"]) / status["peak_equity"]) * 100
77 |             change = f"({pct_change:+.1f}% from peak)"
78 |         
   | ^^^^^^^^
79 |         trading_status = "🟢 TRADING" if trading_allowed else "🔴 HALTED"
80 |         drawdown_pct = status["current_drawdown"] * 100
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_drawdown_protection.py:81:1
   |
79 |         trading_status = "🟢 TRADING" if trading_allowed else "🔴 HALTED"
80 |         drawdown_pct = status["current_drawdown"] * 100
81 |         
   | ^^^^^^^^
82 |         logging.info(f"{time}: ${equity:>8,.0f} {change:<15} | {trading_status:<12} | Drawdown: {drawdown_pct:>4.1f}% | {description}")
   |
help: Remove whitespace from blank line

E501 Line too long (135 > 100)
  --> scripts/demo_drawdown_protection.py:82:101
   |
80 |         drawdown_pct = status["current_drawdown"] * 100
81 |         
82 |         logging.info(f"{time}: ${equity:>8,.0f} {change:<15} | {trading_status:<12} | Drawdown: {drawdown_pct:>4.1f}% | {description}")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
83 |         
84 |         # Additional logging for important events
   |

W293 [*] Blank line contains whitespace
  --> scripts/demo_drawdown_protection.py:83:1
   |
82 |         logging.info(f"{time}: ${equity:>8,.0f} {change:<15} | {trading_status:<12} | Drawdown: {drawdown_pct:>4.1f}% | {description}")
83 |         
   | ^^^^^^^^
84 |         # Additional logging for important events
85 |         if not trading_allowed and status["current_drawdown"] > config.MAX_DRAWDOWN_THRESHOLD:
   |
help: Remove whitespace from blank line

E501 Line too long (140 > 100)
  --> scripts/demo_drawdown_protection.py:86:100
   |
84 | …
85 | …wdown"] > config.MAX_DRAWDOWN_THRESHOLD:
86 | … TRIGGERED: {status['current_drawdown']:.1%} > {config.MAX_DRAWDOWN_THRESHOLD:.1%}"))
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
87 | …own"] > 0:
88 | …ity"] if status["peak_equity"] > 0 else 0
   |

E501 Line too long (106 > 100)
  --> scripts/demo_drawdown_protection.py:90:100
   |
88 |             recovery_ratio = equity / status["peak_equity"] if status["peak_equity"] > 0 else 0
89 |             if recovery_ratio >= breaker.recovery_threshold:
90 |                 logging.info(f"      🔄 TRADING RESUMED: Recovery to {recovery_ratio:.1%} of peak equity")
   |                                                                                                     ^^^^^^
91 |     
92 |     logging.info(str("\n" + "=" * 60))
   |

W293 [*] Blank line contains whitespace
  --> scripts/demo_drawdown_protection.py:91:1
   |
89 |             if recovery_ratio >= breaker.recovery_threshold:
90 |                 logging.info(f"      🔄 TRADING RESUMED: Recovery to {recovery_ratio:.1%} of peak equity")
91 |     
   | ^^^^
92 |     logging.info(str("\n" + "=" * 60))
93 |     logging.info("📈 Session Summary:")
   |
help: Remove whitespace from blank line

E501 Line too long (149 > 100)
  --> scripts/demo_drawdown_protection.py:97:101
   |
95 | …quity']:,.0f}"))
96 | …
97 | …current_drawdown'] for _, e, _ in trading_session for s in [breaker.get_status()]]):.1%}"))
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
98 | …if final_status['trading_allowed'] else '🔴 Trading Halted'}"))
   |

E501 Line too long (122 > 100)
   --> scripts/demo_drawdown_protection.py:98:100
    |
 96 |     logging.info(f"Final Equity: ${equity:,.0f}")
 97 |     logging.info(str(f"Max Drawdown Experienced: {max([s['current_drawdown'] for _, e, _ in trading_session for s in [breaker.get_sta…
 98 |     logging.info(str(f"Final Status: {'🟢 Trading Allowed' if final_status['trading_allowed'] else '🔴 Trading Halted'}"))
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
 99 |     
100 |     logging.info("\n🛡️  Protection Summary:")
    |

W293 [*] Blank line contains whitespace
   --> scripts/demo_drawdown_protection.py:99:1
    |
 97 |     logging.info(str(f"Max Drawdown Experienced: {max([s['current_drawdown'] for _, e, _ in trading_session for s in [breaker.get_sta…
 98 |     logging.info(str(f"Final Status: {'🟢 Trading Allowed' if final_status['trading_allowed'] else '🔴 Trading Halted'}"))
 99 |     
    | ^^^^
100 |     logging.info("\n🛡️  Protection Summary:")
101 |     logging.info("✅ Circuit breaker successfully protected portfolio during volatile session")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/demo_drawdown_protection.py:107:31
    |
106 | if __name__ == "__main__":
107 |     simulate_trading_session()
    |                               ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/demo_grid_search.py:9:1
   |
 7 |   """
 8 |
 9 | / import tempfile
10 | | from ai_trading.backtesting.grid_runner import grid_search, persist_artifacts
   | |_____________________________________________________________________________^
   |
help: Organize imports

W293 Blank line contains whitespace
  --> scripts/demo_grid_search.py:17:1
   |
15 |     Example evaluator function for backtesting.
16 |     In a real implementation, this would run your backtest here and return metrics dict.
17 |     
   | ^^^^
18 |     Args:
19 |         params: Dictionary of parameters to test
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> scripts/demo_grid_search.py:20:1
   |
18 |     Args:
19 |         params: Dictionary of parameters to test
20 |         
   | ^^^^^^^^
21 |     Returns:
22 |         Dictionary of performance metrics
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_grid_search.py:28:1
   |
26 |     atr_mult = params.get('atr_mult', 2.0)
27 |     lookback = params.get('lookback', 100)
28 |     
   | ^^^^
29 |     # Simulate different performance based on parameters
30 |     base_sharpe = 1.2
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_grid_search.py:34:1
   |
32 |     atr_impact = (2.0 - atr_mult) * 0.2  # ATR multiplier closer to 2.0 is better
33 |     lookback_impact = (100 - lookback) * 0.001  # Lookback closer to 100 is better
34 |     
   | ^^^^
35 |     sharpe = base_sharpe + kelly_impact + atr_impact + lookback_impact
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_grid_search.py:36:1
   |
35 |     sharpe = base_sharpe + kelly_impact + atr_impact + lookback_impact
36 |     
   | ^^^^
37 |     return {
38 |         "sharpe": round(sharpe, 3),
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_grid_search.py:49:1
   |
47 |     """Run example grid search for parameter optimization."""
48 |     logging.info("=== AI Trading Bot - Grid Search Example ===\n")
49 |     
   | ^^^^
50 |     # Define parameter grid for optimization
51 |     grid = {
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_grid_search.py:56:1
   |
54 |         "lookback": [50, 100, 150],
55 |     }
56 |     
   | ^^^^
57 |     logging.info(f"Testing {len(grid['kelly']) * len(grid['atr_mult']) * len(grid['lookback'])} parameter combinations...")
58 |     logging.info(f"Grid: {grid}\n")
   |
help: Remove whitespace from blank line

E501 Line too long (123 > 100)
  --> scripts/demo_grid_search.py:57:101
   |
55 |     }
56 |     
57 |     logging.info(f"Testing {len(grid['kelly']) * len(grid['atr_mult']) * len(grid['lookback'])} parameter combinations...")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^
58 |     logging.info(f"Grid: {grid}\n")
   |

W293 [*] Blank line contains whitespace
  --> scripts/demo_grid_search.py:59:1
   |
57 |     logging.info(f"Testing {len(grid['kelly']) * len(grid['atr_mult']) * len(grid['lookback'])} parameter combinations...")
58 |     logging.info(f"Grid: {grid}\n")
59 |     
   | ^^^^
60 |     # Run parallel grid search
61 |     logging.info("Running grid search with parallel processing...")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_grid_search.py:64:1
   |
62 |     run = grid_search(evaluator, grid, n_jobs=-1)
63 |     logging.info(str(f"Completed {run['count']} backtests\n"))
64 |     
   | ^^^^
65 |     # Find best parameters
66 |     results = run['results']
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_grid_search.py:69:1
   |
67 |     best_result = max(results, key=lambda x: x['metrics']['sharpe'])
68 |     worst_result = min(results, key=lambda x: x['metrics']['sharpe'])
69 |     
   | ^^^^
70 |     logging.info("=== Results Summary ===")
71 |     logging.info(str(f"Best Parameters: {best_result['params']}"))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_grid_search.py:78:1
   |
76 |     logging.info(str(f"Worst Sharpe: {worst_result['metrics']['sharpe']}"))
77 |     print()
78 |     
   | ^^^^
79 |     # Show parameter impact analysis
80 |     logging.info("=== Parameter Impact Analysis ===")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_grid_search.py:87:1
   |
85 |             kelly_impact[kelly] = []
86 |         kelly_impact[kelly].append(result['metrics']['sharpe'])
87 |     
   | ^^^^
88 |     for kelly, sharpes in kelly_impact.items():
89 |         avg_sharpe = sum(sharpes) / len(sharpes)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_grid_search.py:91:1
   |
89 |         avg_sharpe = sum(sharpes) / len(sharpes)
90 |         logging.info(f"Kelly {kelly}: Average Sharpe = {avg_sharpe:.3f}")
91 |     
   | ^^^^
92 |     # Persist artifacts
93 |     with tempfile.TemporaryDirectory() as tmp_dir:
   |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
  --> scripts/demo_grid_search.py:96:101
   |
94 |         out_dir = persist_artifacts(run, tmp_dir)
95 |         logging.info(f"\nArtifacts saved to: {out_dir}")
96 |         logging.info("(Note: Using temporary directory for demo - in production, use persistent storage)")
   |                                                                                                     ^^^^^^
97 |     
98 |     logging.info("\n=== Grid Search Complete ===")
   |

W293 [*] Blank line contains whitespace
  --> scripts/demo_grid_search.py:97:1
   |
95 |         logging.info(f"\nArtifacts saved to: {out_dir}")
96 |         logging.info("(Note: Using temporary directory for demo - in production, use persistent storage)")
97 |     
   | ^^^^
98 |     logging.info("\n=== Grid Search Complete ===")
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/demo_grid_search.py:102:11
    |
101 | if __name__ == "__main__":
102 |     main()
    |           ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/demo_intelligent_position_management.py:18:1
   |
16 |   """
17 |
18 | / import sys
19 | | import os
20 | | import logging
21 | | from datetime import datetime
22 | | from dataclasses import dataclass
   | |_________________________________^
23 |
24 |   # Set up logging
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/demo_intelligent_position_management.py:48:1
   |
46 |     logging.info("🌟 DEMO 1: Market Regime Detection & Adaptation")
47 |     logging.info(str("=" * 60))
48 |     
   | ^^^^
49 |     from market_regime import MarketRegimeDetector, MarketRegime
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/demo_intelligent_position_management.py:49:5
   |
47 |     logging.info(str("=" * 60))
48 |     
49 |     from market_regime import MarketRegimeDetector, MarketRegime
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
50 |     
51 |     detector = MarketRegimeDetector()
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/demo_intelligent_position_management.py:50:1
   |
49 |     from market_regime import MarketRegimeDetector, MarketRegime
50 |     
   | ^^^^
51 |     detector = MarketRegimeDetector()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_intelligent_position_management.py:52:1
   |
51 |     detector = MarketRegimeDetector()
52 |     
   | ^^^^
53 |     # Show different regime parameters
54 |     regimes = [
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_intelligent_position_management.py:61:1
   |
59 |         MarketRegime.LOW_VOLATILITY
60 |     ]
61 |     
   | ^^^^
62 |     logging.info("📊 Position Management Parameters by Market Regime:")
63 |     print()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_intelligent_position_management.py:64:1
   |
62 |     logging.info("📊 Position Management Parameters by Market Regime:")
63 |     print()
64 |     
   | ^^^^
65 |     for regime in regimes:
66 |         params = detector.get_regime_parameters(regime)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_intelligent_position_management.py:73:1
   |
71 |         logging.info(str(f"   • Trail Aggression: {params['trail_aggressiveness']:.1f}"))
72 |         print()
73 |     
   | ^^^^
74 |     logging.info("💡 Key Insight: System automatically adapts holding strategy to market conditions!")
75 |     logging.info("   • Bull trends → Wider stops, more patient profit taking")
   |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
  --> scripts/demo_intelligent_position_management.py:74:100
   |
72 |         print()
73 |     
74 |     logging.info("💡 Key Insight: System automatically adapts holding strategy to market conditions!")
   |                                                                                                     ^^
75 |     logging.info("   • Bull trends → Wider stops, more patient profit taking")
76 |     logging.info("   • High volatility → Tighter stops, quick profits, smaller sizes")
   |

W293 [*] Blank line contains whitespace
  --> scripts/demo_intelligent_position_management.py:83:1
   |
81 |     logging.info("\n🌟 DEMO 2: Technical Signal Analysis for Exit Timing")
82 |     logging.info(str("=" * 60))
83 |     
   | ^^^^
84 |     from technical_analyzer import TechnicalSignalAnalyzer
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_intelligent_position_management.py:85:1
   |
84 |     from technical_analyzer import TechnicalSignalAnalyzer
85 |     
   | ^^^^
86 |     analyzer = TechnicalSignalAnalyzer()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_intelligent_position_management.py:87:1
   |
86 |     analyzer = TechnicalSignalAnalyzer()
87 |     
   | ^^^^
88 |     logging.info("📈 Technical Analysis Components:")
89 |     print()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_intelligent_position_management.py:90:1
   |
88 |     logging.info("📈 Technical Analysis Components:")
89 |     print()
90 |     
   | ^^^^
91 |     # Demo momentum analysis
92 |     logging.info("🔹 MOMENTUM ANALYSIS:")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demo_intelligent_position_management.py:97:1
   |
95 |     logging.info("   • Price rate of change for velocity")
96 |     logging.info("   • Combined into 0-1 momentum score")
97 |     
   | ^^^^
98 |     # Demo volume analysis  
99 |     logging.info("\n🔹 VOLUME ANALYSIS:")
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> scripts/demo_intelligent_position_management.py:98:27
    |
 96 |     logging.info("   • Combined into 0-1 momentum score")
 97 |     
 98 |     # Demo volume analysis  
    |                           ^^
 99 |     logging.info("\n🔹 VOLUME ANALYSIS:")
100 |     logging.info("   • Volume vs 20-day average for strength")
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:103:1
    |
101 |     logging.info("   • Volume trend (increasing/decreasing)")
102 |     logging.info("   • Price-volume relationship confirmation")
103 |     
    | ^^^^
104 |     # Demo relative strength
105 |     logging.info("\n🔹 RELATIVE STRENGTH:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:109:1
    |
107 |     logging.info("   • Sector rotation signals")
108 |     logging.info("   • Outperformance percentile ranking")
109 |     
    | ^^^^
110 |     # Demo support/resistance
111 |     logging.info("\n🔹 SUPPORT/RESISTANCE LEVELS:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:115:1
    |
113 |     logging.info("   • Distance calculations for exit timing")
114 |     logging.info("   • Confidence scoring based on validation")
115 |     
    | ^^^^
116 |     logging.info("\n💡 Key Insight: Multi-factor analysis replaces simple momentum!")
117 |     logging.info("   • Bearish divergence → Exit signal even if price rising")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:125:1
    |
123 |     logging.info("\n🌟 DEMO 3: Dynamic Trailing Stop Management")
124 |     logging.info(str("=" * 60))
125 |     
    | ^^^^
126 |     from trailing_stops import TrailingStopManager
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:127:1
    |
126 |     from trailing_stops import TrailingStopManager
127 |     
    | ^^^^
128 |     stop_manager = TrailingStopManager()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:129:1
    |
128 |     stop_manager = TrailingStopManager()
129 |     
    | ^^^^
130 |     logging.info("🛡️ Adaptive Trailing Stop Algorithms:")
131 |     print()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:132:1
    |
130 |     logging.info("🛡️ Adaptive Trailing Stop Algorithms:")
131 |     print()
132 |     
    | ^^^^
133 |     # Demo different stop types
134 |     logging.info("🔹 VOLATILITY-ADJUSTED (ATR-based):")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:138:1
    |
136 |     logging.info(f"   • ATR multiplier: {stop_manager.atr_multiplier}x")
137 |     logging.info("   • Automatically widens stops in volatile markets")
138 |     
    | ^^^^
139 |     logging.info("\n🔹 MOMENTUM-BASED ADJUSTMENT:")
140 |     logging.info(f"   • Strong momentum (>{stop_manager.strong_momentum_threshold}): 1.3x wider stops")
    |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
   --> scripts/demo_intelligent_position_management.py:140:101
    |
139 |     logging.info("\n🔹 MOMENTUM-BASED ADJUSTMENT:")
140 |     logging.info(f"   • Strong momentum (>{stop_manager.strong_momentum_threshold}): 1.3x wider stops")
    |                                                                                                     ^^^
141 |     logging.info(f"   • Weak momentum (<{stop_manager.weak_momentum_threshold}): 0.7x tighter stops")
142 |     logging.info("   • Adapts to trend strength changes")
    |

E501 Line too long (101 > 100)
   --> scripts/demo_intelligent_position_management.py:141:101
    |
139 |     logging.info("\n🔹 MOMENTUM-BASED ADJUSTMENT:")
140 |     logging.info(f"   • Strong momentum (>{stop_manager.strong_momentum_threshold}): 1.3x wider stops")
141 |     logging.info(f"   • Weak momentum (<{stop_manager.weak_momentum_threshold}): 0.7x tighter stops")
    |                                                                                                     ^
142 |     logging.info("   • Adapts to trend strength changes")
    |

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:143:1
    |
141 |     logging.info(f"   • Weak momentum (<{stop_manager.weak_momentum_threshold}): 0.7x tighter stops")
142 |     logging.info("   • Adapts to trend strength changes")
143 |     
    | ^^^^
144 |     logging.info("\n🔹 TIME-DECAY MECHANISM:")
145 |     logging.info(f"   • Starts after {stop_manager.time_decay_start_days} days")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:148:1
    |
146 |     logging.info(f"   • Maximum tightening: {stop_manager.max_time_decay*100}%")
147 |     logging.info("   • Gradual tightening over 30 days")
148 |     
    | ^^^^
149 |     logging.info("\n🔹 BREAKEVEN PROTECTION:")
150 |     logging.info(f"   • Triggered at {stop_manager.breakeven_trigger}% gain")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:153:1
    |
151 |     logging.info(f"   • Buffer: {stop_manager.breakeven_buffer}%")
152 |     logging.info("   • Locks in profits automatically")
153 |     
    | ^^^^
154 |     logging.info("\n💡 Key Insight: Stops adapt to market conditions and position age!")
155 |     logging.info("   • Volatile markets → Wider stops (avoid whipsaws)")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:163:1
    |
161 |     logging.info("\n🌟 DEMO 4: Multi-Tiered Profit Taking System")
162 |     logging.info(str("=" * 60))
163 |     
    | ^^^^
164 |     from profit_taking import ProfitTakingEngine
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:165:1
    |
164 |     from profit_taking import ProfitTakingEngine
165 |     
    | ^^^^
166 |     profit_engine = ProfitTakingEngine()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:167:1
    |
166 |     profit_engine = ProfitTakingEngine()
167 |     
    | ^^^^
168 |     logging.info("💰 Intelligent Profit Taking Strategies:")
169 |     print()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:170:1
    |
168 |     logging.info("💰 Intelligent Profit Taking Strategies:")
169 |     print()
170 |     
    | ^^^^
171 |     # Demo risk-multiple targets
172 |     logging.info("🔹 RISK-MULTIPLE TARGETS:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:179:1
    |
177 |         logging.info(f"   • {level}R: Sell {pct}% ({strategy})")
178 |     logging.info("   • Remaining 25%: Managed by trailing stops")
179 |     
    | ^^^^
180 |     logging.info("\n🔹 TECHNICAL LEVEL TARGETS:")
181 |     logging.info("   • Resistance levels: 15% partial exits")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:184:1
    |
182 |     logging.info(f"   • RSI overbought (>{profit_engine.overbought_threshold}): 10% reduction")
183 |     logging.info("   • Support/resistance proximity alerts")
184 |     
    | ^^^^
185 |     logging.info("\n🔹 TIME-BASED OPTIMIZATION:")
186 |     logging.info(f"   • High velocity (>{profit_engine.velocity_threshold}%/day): Faster exits")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:189:1
    |
187 |     logging.info(f"   • Time decay after {profit_engine.time_decay_days} days")
188 |     logging.info("   • Opportunity cost considerations")
189 |     
    | ^^^^
190 |     logging.info("\n🔹 CORRELATION-BASED ADJUSTMENTS:")
191 |     logging.info(f"   • Portfolio correlation >{profit_engine.correlation_threshold}: Reduce exposure")
    |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
   --> scripts/demo_intelligent_position_management.py:191:101
    |
190 |     logging.info("\n🔹 CORRELATION-BASED ADJUSTMENTS:")
191 |     logging.info(f"   • Portfolio correlation >{profit_engine.correlation_threshold}: Reduce exposure")
    |                                                                                                     ^^^
192 |     logging.info("   • Sector concentration monitoring")
193 |     logging.info("   • Risk budget reallocation")
    |

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:194:1
    |
192 |     logging.info("   • Sector concentration monitoring")
193 |     logging.info("   • Risk budget reallocation")
194 |     
    | ^^^^
195 |     logging.info("\n💡 Key Insight: Systematic profit optimization vs all-or-nothing!")
196 |     logging.info("   • Scale out of winners systematically")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:204:1
    |
202 |     logging.info("\n🌟 DEMO 5: Portfolio Correlation Intelligence")
203 |     logging.info(str("=" * 60))
204 |     
    | ^^^^
205 |     from correlation_analyzer import PortfolioCorrelationAnalyzer
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:206:1
    |
205 |     from correlation_analyzer import PortfolioCorrelationAnalyzer
206 |     
    | ^^^^
207 |     corr_analyzer = PortfolioCorrelationAnalyzer()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:208:1
    |
207 |     corr_analyzer = PortfolioCorrelationAnalyzer()
208 |     
    | ^^^^
209 |     logging.info("🔗 Portfolio-Level Risk Management:")
210 |     print()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:211:1
    |
209 |     logging.info("🔗 Portfolio-Level Risk Management:")
210 |     print()
211 |     
    | ^^^^
212 |     # Demo concentration monitoring
213 |     logging.info("🔹 CONCENTRATION MONITORING:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:219:1
    |
217 |     logging.info("   • High: 35-50% (triggers alerts)")
218 |     logging.info("   • Extreme: >50% (forced reduction)")
219 |     
    | ^^^^
220 |     logging.info("\n🔹 CORRELATION ANALYSIS:")
221 |     logging.info("   • Real-time correlation calculation")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:227:1
    |
225 |     logging.info("     - High: 0.7-0.85 (risk concentration)")
226 |     logging.info("     - Very high: >0.85 (forced reduction)")
227 |     
    | ^^^^
228 |     logging.info("\n🔹 SECTOR EXPOSURE MANAGEMENT:")
229 |     sectors = ['Technology', 'Financials', 'Healthcare']
    |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> scripts/demo_intelligent_position_management.py:231:101
    |
229 |     sectors = ['Technology', 'Financials', 'Healthcare']
230 |     for sector in sectors:
231 |         classification = corr_analyzer._get_symbol_sector('AAPL' if sector == 'Technology' else 'JPM')
    |                                                                                                     ^^
232 |         logging.info(f"   • {sector}: Auto-classification and monitoring")
    |

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:233:1
    |
231 |         classification = corr_analyzer._get_symbol_sector('AAPL' if sector == 'Technology' else 'JPM')
232 |         logging.info(f"   • {sector}: Auto-classification and monitoring")
233 |     
    | ^^^^
234 |     logging.info("\n🔹 DYNAMIC REBALANCING:")
235 |     logging.info("   • Correlation adjustment factors: 0.5x - 1.5x")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:238:1
    |
236 |     logging.info("   • Automatic exposure reduction signals")
237 |     logging.info("   • Portfolio optimization recommendations")
238 |     
    | ^^^^
239 |     logging.info("\n💡 Key Insight: Portfolio-level intelligence prevents concentration!")
240 |     logging.info("   • High correlation → Reduce position aggressiveness")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:248:1
    |
246 |     logging.info("\n🌟 DEMO 6: Complete Intelligent Integration")
247 |     logging.info(str("=" * 60))
248 |     
    | ^^^^
249 |     from intelligent_manager import IntelligentPositionManager
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:250:1
    |
249 |     from intelligent_manager import IntelligentPositionManager
250 |     
    | ^^^^
251 |     manager = IntelligentPositionManager()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:252:1
    |
251 |     manager = IntelligentPositionManager()
252 |     
    | ^^^^
253 |     logging.info("🧠 Intelligent Position Decision Making:")
254 |     print()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:255:1
    |
253 |     logging.info("🧠 Intelligent Position Decision Making:")
254 |     print()
255 |     
    | ^^^^
256 |     # Demo decision weights
257 |     logging.info("🔹 ANALYSIS COMPONENT WEIGHTS:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:260:1
    |
258 |     for component, weight in manager.analysis_weights.items():
259 |         logging.info(f"   • {component.title()}: {weight*100:.0f}%")
260 |     
    | ^^^^
261 |     logging.info("\n🔹 DECISION PROCESS:")
262 |     logging.info("   1. Market regime detection → Strategy adaptation")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:268:1
    |
266 |     logging.info("   5. Portfolio correlation → Exposure management")
267 |     logging.info("   6. Integrated recommendation → Final action")
268 |     
    | ^^^^
269 |     logging.info("\n🔹 POSSIBLE ACTIONS:")
270 |     actions = [
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:278:1
    |
276 |         ("NO_ACTION", "No changes needed")
277 |     ]
278 |     
    | ^^^^
279 |     for action, description in actions:
280 |         logging.info(f"   • {action}: {description}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:281:1
    |
279 |     for action, description in actions:
280 |         logging.info(f"   • {action}: {description}")
281 |     
    | ^^^^
282 |     logging.info("\n🔹 RECOMMENDATION COMPONENTS:")
283 |     logging.info("   • Confidence score (0-1)")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:288:1
    |
286 |     logging.info("   • Primary reasoning")
287 |     logging.info("   • Contributing factors list")
288 |     
    | ^^^^
289 |     logging.info("\n💡 Key Insight: Holistic decision making vs simple thresholds!")
290 |     logging.info("   • Multi-factor analysis with confidence scoring")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:298:1
    |
296 |     logging.info("\n🌟 DEMO 7: Before vs After Comparison")
297 |     logging.info(str("=" * 60))
298 |     
    | ^^^^
299 |     logging.info("📊 BEFORE (Simple Static Logic):")
300 |     logging.info("   ❌ Hold if profit > 5% (static threshold)")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:308:1
    |
306 |     logging.info("   ❌ No partial profit taking")
307 |     logging.info("   ❌ No adaptive risk management")
308 |     
    | ^^^^
309 |     logging.info("\n🚀 AFTER (Intelligent Adaptive System):")
310 |     logging.info("   ✅ Dynamic thresholds based on market regime")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:318:1
    |
316 |     logging.info("   ✅ ATR-based volatility adjustment")
317 |     logging.info("   ✅ Time-decay and breakeven protection")
318 |     
    | ^^^^
319 |     logging.info("\n📈 EXPECTED PERFORMANCE IMPROVEMENTS:")
320 |     logging.info("   • 20-30% better profit capture")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:333:1
    |
331 |     logging.info("🎯 Transforming from simple thresholds to intelligent strategies")
332 |     logging.info(str("=" * 80))
333 |     
    | ^^^^
334 |     # Run all demos
335 |     demo_market_regime_adaptation()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:342:1
    |
340 |     demo_intelligent_integration()
341 |     demo_before_vs_after()
342 |     
    | ^^^^
343 |     logging.info(str("\n" + "=" * 80))
344 |     logging.info("🎉 DEMO COMPLETE!")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demo_intelligent_position_management.py:348:1
    |
346 |     logging.info("🚀 Ready to maximize profits while minimizing risks!")
347 |     logging.info(str("=" * 80))
348 |     
    | ^^^^
349 |     logging.info("\n📋 NEXT STEPS:")
350 |     logging.info("1. Monitor the enhanced position manager in live trading")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/demo_intelligent_position_management.py:357:11
    |
356 | if __name__ == "__main__":
357 |     main()
    |           ^
    |
help: Add trailing newline

E501 Line too long (109 > 100)
  --> scripts/demo_no_trade_bands.py:89:101
   |
87 |         logging.info(f"  Trades needed: {trades_needed}/7 positions")
88 |         logging.info(f"  Total turnover: {total_turnover:.4f} ({total_turnover*100:.2f}%)")
89 |         logging.info(f"  Transaction cost savings: ~{(7-trades_needed)*0.0005*100:.2f}bps per avoided trade")
   |                                                                                                     ^^^^^^^^^
90 |
91 |     # Demonstrate with larger moves that should trigger trades
   |

E501 Line too long (126 > 100)
   --> scripts/demo_position_holding.py:112:101
    |
110 |     logging.info(f"• Enhanced signals: {len(enhanced_signals)}")
111 |     logging.info(f"• Filtered out: {len(original_signals) - len(enhanced_signals)}")
112 |     logging.info(f"• Churn reduction: {((len(original_signals) - len(enhanced_signals)) / len(original_signals) * 100):.1f}%")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

E501 Line too long (121 > 100)
   --> scripts/demo_position_holding.py:133:100
    |
132 |     for trade in trade_executions:
133 |         logging.info(str(f"📈 TRADE_EXECUTED: {trade['symbol']} {trade['side']} {trade['qty']} @ ${trade['price']:.2f}"))
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
134 |
135 |         # Simulate meta-learning trigger
    |

E501 Line too long (120 > 100)
  --> scripts/demo_short_selling_implementation.py:60:101
   |
58 |             with patch.object(engine, '_select_api', return_value=mock_api):
59 |                 with patch.object(engine, '_validate_short_selling', return_value=True):
60 |                     with patch.object(engine, '_assess_liquidity', side_effect=Exception("Stopped at liquidity check")):
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
61 |                         try:
62 |                             result = engine.execute_order("AAPL", 10, "sell_short")
   |

E501 Line too long (106 > 100)
  --> scripts/demo_short_selling_implementation.py:65:101
   |
63 |                         except Exception:
64 |                             pass  # Expected to stop at liquidity check
65 |                         logging.info("✓ sell_short order bypassed position checks and reached validation")
   |                                                                                                     ^^^^^^
66 |
67 |         # Test 3: Demonstrate order tracking
   |

E501 Line too long (105 > 100)
   --> scripts/demo_short_selling_implementation.py:119:101
    |
117 |         with _order_tracking_lock:
118 |             if "monitor_test_456" in _active_orders:
119 |                 _active_orders["monitor_test_456"].submitted_time = current_time - 700  # 700 seconds ago
    |                                                                                                     ^^^^^
120 |
121 |         # Test stale order cleanup
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/demonstrate_optimization.py:11:1
   |
 9 |   """
10 |
11 | / import sys
12 | | import os
13 | | from datetime import datetime
   | |_____________________________^
14 |
15 |   # Add the project root to Python path for imports
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/demonstrate_optimization.py:19:1
   |
18 |   # Use the centralized logger as per AGENTS.md
19 | / from ai_trading.logging import logger
20 | | from ai_trading.config.management import TradingConfig
   | |______________________________________________________^
21 |   CONFIG = TradingConfig()
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/demonstrate_optimization.py:32:1
   |
30 |     logging.info("\nObjective: Optimize parameters for maximum profit potential while")
31 |     logging.info("maintaining institutional-grade safety standards.")
32 |     
   | ^^^^
33 |     try:
34 |         # Get configurations for all three modes
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demonstrate_optimization.py:38:1
   |
36 |         balanced_config = TradingConfig.from_env("balanced")
37 |         aggressive_config = TradingConfig.from_env("aggressive")
38 |         
   | ^^^^^^^^
39 |         logging.info(str("\n" + "-"*60))
40 |         logging.info("1. MODE-SPECIFIC PARAMETER OPTIMIZATIONS")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/demonstrate_optimization.py:43:1
   |
41 |         logging.info(str("-"*60))
42 |         logging.info("Three distinct trading modes with optimized risk profiles:")
43 |         
   | ^^^^^^^^
44 |         logging.info("\n  CONSERVATIVE MODE (Lower Risk):")
45 |         logging.info(f"  • KELLY_FRACTION: {conservative_config.kelly_fraction} (25% lower risk)")
   |
help: Remove whitespace from blank line

E501 Line too long (110 > 100)
  --> scripts/demonstrate_optimization.py:46:101
   |
44 |         logging.info("\n  CONSERVATIVE MODE (Lower Risk):")
45 |         logging.info(f"  • KELLY_FRACTION: {conservative_config.kelly_fraction} (25% lower risk)")
46 |         logging.info(f"  • CONF_THRESHOLD: {conservative_config.conf_threshold} (85% confidence requirement)")
   |                                                                                                     ^^^^^^^^^^
47 |         logging.info(f"  • DAILY_LOSS_LIMIT: {conservative_config.daily_loss_limit} (3% daily loss limit)")
48 |         logging.info(f"  • CAPITAL_CAP: {conservative_config.capital_cap} (20% capital allocation)")
   |

E501 Line too long (107 > 100)
  --> scripts/demonstrate_optimization.py:47:101
   |
45 |         logging.info(f"  • KELLY_FRACTION: {conservative_config.kelly_fraction} (25% lower risk)")
46 |         logging.info(f"  • CONF_THRESHOLD: {conservative_config.conf_threshold} (85% confidence requirement)")
47 |         logging.info(f"  • DAILY_LOSS_LIMIT: {conservative_config.daily_loss_limit} (3% daily loss limit)")
   |                                                                                                     ^^^^^^^
48 |         logging.info(f"  • CAPITAL_CAP: {conservative_config.capital_cap} (20% capital allocation)")
49 |         logging.info(f"  • CONFIRMATION_COUNT: {conservative_config.confirmation_count} (Triple confirmation)")
   |

E501 Line too long (111 > 100)
  --> scripts/demonstrate_optimization.py:49:101
   |
47 |         logging.info(f"  • DAILY_LOSS_LIMIT: {conservative_config.daily_loss_limit} (3% daily loss limit)")
48 |         logging.info(f"  • CAPITAL_CAP: {conservative_config.capital_cap} (20% capital allocation)")
49 |         logging.info(f"  • CONFIRMATION_COUNT: {conservative_config.confirmation_count} (Triple confirmation)")
   |                                                                                                     ^^^^^^^^^^^
50 |         
51 |         logging.info("\n  BALANCED MODE (Default):")
   |

W293 [*] Blank line contains whitespace
  --> scripts/demonstrate_optimization.py:50:1
   |
48 |         logging.info(f"  • CAPITAL_CAP: {conservative_config.capital_cap} (20% capital allocation)")
49 |         logging.info(f"  • CONFIRMATION_COUNT: {conservative_config.confirmation_count} (Triple confirmation)")
50 |         
   | ^^^^^^^^
51 |         logging.info("\n  BALANCED MODE (Default):")
52 |         logging.info(f"  • KELLY_FRACTION: {balanced_config.kelly_fraction} (Balanced risk)")
   |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
  --> scripts/demonstrate_optimization.py:53:101
   |
51 |         logging.info("\n  BALANCED MODE (Default):")
52 |         logging.info(f"  • KELLY_FRACTION: {balanced_config.kelly_fraction} (Balanced risk)")
53 |         logging.info(f"  • CONF_THRESHOLD: {balanced_config.conf_threshold} (75% confidence requirement)")
   |                                                                                                     ^^^^^^
54 |         logging.info(f"  • DAILY_LOSS_LIMIT: {balanced_config.daily_loss_limit} (7% daily loss limit)")
55 |         logging.info(f"  • CAPITAL_CAP: {balanced_config.capital_cap} (25% capital allocation)")
   |

E501 Line too long (103 > 100)
  --> scripts/demonstrate_optimization.py:54:101
   |
52 |         logging.info(f"  • KELLY_FRACTION: {balanced_config.kelly_fraction} (Balanced risk)")
53 |         logging.info(f"  • CONF_THRESHOLD: {balanced_config.conf_threshold} (75% confidence requirement)")
54 |         logging.info(f"  • DAILY_LOSS_LIMIT: {balanced_config.daily_loss_limit} (7% daily loss limit)")
   |                                                                                                     ^^^
55 |         logging.info(f"  • CAPITAL_CAP: {balanced_config.capital_cap} (25% capital allocation)")
56 |         logging.info(f"  • CONFIRMATION_COUNT: {balanced_config.confirmation_count} (Double confirmation)")
   |

E501 Line too long (107 > 100)
  --> scripts/demonstrate_optimization.py:56:101
   |
54 |         logging.info(f"  • DAILY_LOSS_LIMIT: {balanced_config.daily_loss_limit} (7% daily loss limit)")
55 |         logging.info(f"  • CAPITAL_CAP: {balanced_config.capital_cap} (25% capital allocation)")
56 |         logging.info(f"  • CONFIRMATION_COUNT: {balanced_config.confirmation_count} (Double confirmation)")
   |                                                                                                     ^^^^^^^
57 |         
58 |         logging.info("\n  AGGRESSIVE MODE (Higher Risk):")
   |

W293 [*] Blank line contains whitespace
  --> scripts/demonstrate_optimization.py:57:1
   |
55 |         logging.info(f"  • CAPITAL_CAP: {balanced_config.capital_cap} (25% capital allocation)")
56 |         logging.info(f"  • CONFIRMATION_COUNT: {balanced_config.confirmation_count} (Double confirmation)")
57 |         
   | ^^^^^^^^
58 |         logging.info("\n  AGGRESSIVE MODE (Higher Risk):")
59 |         logging.info(f"  • KELLY_FRACTION: {aggressive_config.kelly_fraction} (75% higher risk tolerance)")
   |
help: Remove whitespace from blank line

E501 Line too long (107 > 100)
  --> scripts/demonstrate_optimization.py:59:101
   |
58 |         logging.info("\n  AGGRESSIVE MODE (Higher Risk):")
59 |         logging.info(f"  • KELLY_FRACTION: {aggressive_config.kelly_fraction} (75% higher risk tolerance)")
   |                                                                                                     ^^^^^^^
60 |         logging.info(f"  • CONF_THRESHOLD: {aggressive_config.conf_threshold} (65% confidence requirement)")
61 |         logging.info(f"  • DAILY_LOSS_LIMIT: {aggressive_config.daily_loss_limit} (8% daily loss limit)")
   |

E501 Line too long (108 > 100)
  --> scripts/demonstrate_optimization.py:60:101
   |
58 |         logging.info("\n  AGGRESSIVE MODE (Higher Risk):")
59 |         logging.info(f"  • KELLY_FRACTION: {aggressive_config.kelly_fraction} (75% higher risk tolerance)")
60 |         logging.info(f"  • CONF_THRESHOLD: {aggressive_config.conf_threshold} (65% confidence requirement)")
   |                                                                                                     ^^^^^^^^
61 |         logging.info(f"  • DAILY_LOSS_LIMIT: {aggressive_config.daily_loss_limit} (8% daily loss limit)")
62 |         logging.info(f"  • CAPITAL_CAP: {aggressive_config.capital_cap} (30% capital allocation)")
   |

E501 Line too long (105 > 100)
  --> scripts/demonstrate_optimization.py:61:101
   |
59 |         logging.info(f"  • KELLY_FRACTION: {aggressive_config.kelly_fraction} (75% higher risk tolerance)")
60 |         logging.info(f"  • CONF_THRESHOLD: {aggressive_config.conf_threshold} (65% confidence requirement)")
61 |         logging.info(f"  • DAILY_LOSS_LIMIT: {aggressive_config.daily_loss_limit} (8% daily loss limit)")
   |                                                                                                     ^^^^^
62 |         logging.info(f"  • CAPITAL_CAP: {aggressive_config.capital_cap} (30% capital allocation)")
63 |         logging.info(f"  • CONFIRMATION_COUNT: {aggressive_config.confirmation_count} (Single confirmation)")
   |

E501 Line too long (109 > 100)
  --> scripts/demonstrate_optimization.py:63:101
   |
61 |         logging.info(f"  • DAILY_LOSS_LIMIT: {aggressive_config.daily_loss_limit} (8% daily loss limit)")
62 |         logging.info(f"  • CAPITAL_CAP: {aggressive_config.capital_cap} (30% capital allocation)")
63 |         logging.info(f"  • CONFIRMATION_COUNT: {aggressive_config.confirmation_count} (Single confirmation)")
   |                                                                                                     ^^^^^^^^^
64 |         
65 |         logging.info(str("\n" + "-"*60))
   |

W293 [*] Blank line contains whitespace
  --> scripts/demonstrate_optimization.py:64:1
   |
62 |         logging.info(f"  • CAPITAL_CAP: {aggressive_config.capital_cap} (30% capital allocation)")
63 |         logging.info(f"  • CONFIRMATION_COUNT: {aggressive_config.confirmation_count} (Single confirmation)")
64 |         
   | ^^^^^^^^
65 |         logging.info(str("\n" + "-"*60))
66 |         logging.info("2. RISK MANAGEMENT OPTIMIZATIONS")
   |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
  --> scripts/demonstrate_optimization.py:69:101
   |
67 |         logging.info(str("-"*60))
68 |         logging.info("Centralized risk parameters with institutional-grade safety:")
69 |         logging.info(f"  • MAX_POSITION_SIZE: {balanced_config.max_position_size} USD (Single position limit)")
   |                                                                                                     ^^^^^^^^^^^
70 |         logging.info(f"  • MAX_POSITION_SIZE_PCT: {balanced_config.max_position_size_pct*100:.1f}% (Portfolio percentage limit)")
71 |         logging.info(f"  • MAX_PORTFOLIO_RISK: {balanced_config.max_portfolio_risk*100:.1f}% (Total portfolio risk)")
   |

E501 Line too long (129 > 100)
  --> scripts/demonstrate_optimization.py:70:101
   |
68 | …     logging.info("Centralized risk parameters with institutional-grade safety:")
69 | …     logging.info(f"  • MAX_POSITION_SIZE: {balanced_config.max_position_size} USD (Single position limit)")
70 | …     logging.info(f"  • MAX_POSITION_SIZE_PCT: {balanced_config.max_position_size_pct*100:.1f}% (Portfolio percentage limit)")
   |                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
71 | …     logging.info(f"  • MAX_PORTFOLIO_RISK: {balanced_config.max_portfolio_risk*100:.1f}% (Total portfolio risk)")
72 | …     logging.info(f"  • MAX_CORRELATION_EXPOSURE: {balanced_config.max_correlation_exposure*100:.0f}% (Diversification requirement)")
   |

E501 Line too long (117 > 100)
  --> scripts/demonstrate_optimization.py:71:101
   |
69 | …     logging.info(f"  • MAX_POSITION_SIZE: {balanced_config.max_position_size} USD (Single position limit)")
70 | …     logging.info(f"  • MAX_POSITION_SIZE_PCT: {balanced_config.max_position_size_pct*100:.1f}% (Portfolio percentage limit)")
71 | …     logging.info(f"  • MAX_PORTFOLIO_RISK: {balanced_config.max_portfolio_risk*100:.1f}% (Total portfolio risk)")
   |                                                                                                   ^^^^^^^^^^^^^^^^^
72 | …     logging.info(f"  • MAX_CORRELATION_EXPOSURE: {balanced_config.max_correlation_exposure*100:.0f}% (Diversification requirement)")
73 | …     logging.info(f"  • STOP_LOSS_MULTIPLIER: {balanced_config.stop_loss_multiplier}x (Capital preservation)")
   |

E501 Line too long (136 > 100)
  --> scripts/demonstrate_optimization.py:72:101
   |
70 | …alanced_config.max_position_size_pct*100:.1f}% (Portfolio percentage limit)")
71 | …nced_config.max_portfolio_risk*100:.1f}% (Total portfolio risk)")
72 | … {balanced_config.max_correlation_exposure*100:.0f}% (Diversification requirement)")
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
73 | …lanced_config.stop_loss_multiplier}x (Capital preservation)")
74 | …balanced_config.take_profit_multiplier}x (Profit taking)")
   |

E501 Line too long (113 > 100)
  --> scripts/demonstrate_optimization.py:73:101
   |
71 | …     logging.info(f"  • MAX_PORTFOLIO_RISK: {balanced_config.max_portfolio_risk*100:.1f}% (Total portfolio risk)")
72 | …     logging.info(f"  • MAX_CORRELATION_EXPOSURE: {balanced_config.max_correlation_exposure*100:.0f}% (Diversification requirement)")
73 | …     logging.info(f"  • STOP_LOSS_MULTIPLIER: {balanced_config.stop_loss_multiplier}x (Capital preservation)")
   |                                                                                                   ^^^^^^^^^^^^^
74 | …     logging.info(f"  • TAKE_PROFIT_MULTIPLIER: {balanced_config.take_profit_multiplier}x (Profit taking)")
   |

E501 Line too long (110 > 100)
  --> scripts/demonstrate_optimization.py:74:101
   |
72 | …     logging.info(f"  • MAX_CORRELATION_EXPOSURE: {balanced_config.max_correlation_exposure*100:.0f}% (Diversification requirement)")
73 | …     logging.info(f"  • STOP_LOSS_MULTIPLIER: {balanced_config.stop_loss_multiplier}x (Capital preservation)")
74 | …     logging.info(f"  • TAKE_PROFIT_MULTIPLIER: {balanced_config.take_profit_multiplier}x (Profit taking)")
   |                                                                                                   ^^^^^^^^^^
75 | …     
76 | …     logging.info(str("\n" + "-"*60))
   |

W293 [*] Blank line contains whitespace
  --> scripts/demonstrate_optimization.py:75:1
   |
73 |         logging.info(f"  • STOP_LOSS_MULTIPLIER: {balanced_config.stop_loss_multiplier}x (Capital preservation)")
74 |         logging.info(f"  • TAKE_PROFIT_MULTIPLIER: {balanced_config.take_profit_multiplier}x (Profit taking)")
75 |         
   | ^^^^^^^^
76 |         logging.info(str("\n" + "-"*60))
77 |         logging.info("3. EXECUTION OPTIMIZATIONS")
   |
help: Remove whitespace from blank line

E501 Line too long (117 > 100)
  --> scripts/demonstrate_optimization.py:80:101
   |
78 |         logging.info(str("-"*60))
79 |         logging.info("Enhanced execution with better fills and quality control:")
80 |         logging.info(f"  • PARTICIPATION_RATE: {balanced_config.participation_rate*100:.0f}% (Market participation)")
   |                                                                                                     ^^^^^^^^^^^^^^^^^
81 |         logging.info(f"  • MAX_SLIPPAGE_BPS: {balanced_config.max_slippage_bps} bps (Slippage control)")
82 |         logging.info(f"  • ORDER_TIMEOUT: {balanced_config.order_timeout_seconds}s (Order management)")
   |

E501 Line too long (104 > 100)
  --> scripts/demonstrate_optimization.py:81:101
   |
79 |         logging.info("Enhanced execution with better fills and quality control:")
80 |         logging.info(f"  • PARTICIPATION_RATE: {balanced_config.participation_rate*100:.0f}% (Market participation)")
81 |         logging.info(f"  • MAX_SLIPPAGE_BPS: {balanced_config.max_slippage_bps} bps (Slippage control)")
   |                                                                                                     ^^^^
82 |         logging.info(f"  • ORDER_TIMEOUT: {balanced_config.order_timeout_seconds}s (Order management)")
83 |         logging.info(f"  • LIMIT_ORDER_SLIPPAGE: {balanced_config.limit_order_slippage} (Price improvement)")
   |

E501 Line too long (103 > 100)
  --> scripts/demonstrate_optimization.py:82:101
   |
80 |         logging.info(f"  • PARTICIPATION_RATE: {balanced_config.participation_rate*100:.0f}% (Market participation)")
81 |         logging.info(f"  • MAX_SLIPPAGE_BPS: {balanced_config.max_slippage_bps} bps (Slippage control)")
82 |         logging.info(f"  • ORDER_TIMEOUT: {balanced_config.order_timeout_seconds}s (Order management)")
   |                                                                                                     ^^^
83 |         logging.info(f"  • LIMIT_ORDER_SLIPPAGE: {balanced_config.limit_order_slippage} (Price improvement)")
84 |         logging.info(f"  • POV_SLICE_PCT: {balanced_config.pov_slice_pct} (Volume participation)")
   |

E501 Line too long (109 > 100)
  --> scripts/demonstrate_optimization.py:83:101
   |
81 |         logging.info(f"  • MAX_SLIPPAGE_BPS: {balanced_config.max_slippage_bps} bps (Slippage control)")
82 |         logging.info(f"  • ORDER_TIMEOUT: {balanced_config.order_timeout_seconds}s (Order management)")
83 |         logging.info(f"  • LIMIT_ORDER_SLIPPAGE: {balanced_config.limit_order_slippage} (Price improvement)")
   |                                                                                                     ^^^^^^^^^
84 |         logging.info(f"  • POV_SLICE_PCT: {balanced_config.pov_slice_pct} (Volume participation)")
   |

W293 [*] Blank line contains whitespace
  --> scripts/demonstrate_optimization.py:85:1
   |
83 |         logging.info(f"  • LIMIT_ORDER_SLIPPAGE: {balanced_config.limit_order_slippage} (Price improvement)")
84 |         logging.info(f"  • POV_SLICE_PCT: {balanced_config.pov_slice_pct} (Volume participation)")
85 |         
   | ^^^^^^^^
86 |         logging.info(str("\n" + "-"*60))
87 |         logging.info("4. SIGNAL PROCESSING OPTIMIZATIONS")
   |
help: Remove whitespace from blank line

E501 Line too long (119 > 100)
  --> scripts/demonstrate_optimization.py:90:101
   |
88 |         logging.info(str("-"*60))
89 |         logging.info("Advanced signal processing with adaptive parameters:")
90 |         logging.info(f"  • SIGNAL_CONFIRMATION_BARS: {balanced_config.signal_confirmation_bars} (Confirmation period)")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^
91 |         logging.info(f"  • SIGNAL_PERIOD: {balanced_config.signal_period} (Technical indicator period)")
92 |         logging.info(f"  • FAST_PERIOD: {balanced_config.fast_period} (Fast moving average)")
   |

E501 Line too long (104 > 100)
  --> scripts/demonstrate_optimization.py:91:101
   |
89 |         logging.info("Advanced signal processing with adaptive parameters:")
90 |         logging.info(f"  • SIGNAL_CONFIRMATION_BARS: {balanced_config.signal_confirmation_bars} (Confirmation period)")
91 |         logging.info(f"  • SIGNAL_PERIOD: {balanced_config.signal_period} (Technical indicator period)")
   |                                                                                                     ^^^^
92 |         logging.info(f"  • FAST_PERIOD: {balanced_config.fast_period} (Fast moving average)")
93 |         logging.info(f"  • SLOW_PERIOD: {balanced_config.slow_period} (Slow moving average)")
   |

E501 Line too long (108 > 100)
  --> scripts/demonstrate_optimization.py:94:101
   |
92 |         logging.info(f"  • FAST_PERIOD: {balanced_config.fast_period} (Fast moving average)")
93 |         logging.info(f"  • SLOW_PERIOD: {balanced_config.slow_period} (Slow moving average)")
94 |         logging.info(f"  • ENTRY_START_OFFSET: {balanced_config.entry_start_offset_min} min (Entry timing)")
   |                                                                                                     ^^^^^^^^
95 |         logging.info(f"  • ENTRY_END_OFFSET: {balanced_config.entry_end_offset_min} min (Exit timing)")
   |

E501 Line too long (103 > 100)
  --> scripts/demonstrate_optimization.py:95:101
   |
93 |         logging.info(f"  • SLOW_PERIOD: {balanced_config.slow_period} (Slow moving average)")
94 |         logging.info(f"  • ENTRY_START_OFFSET: {balanced_config.entry_start_offset_min} min (Entry timing)")
95 |         logging.info(f"  • ENTRY_END_OFFSET: {balanced_config.entry_end_offset_min} min (Exit timing)")
   |                                                                                                     ^^^
96 |         
97 |         logging.info(str("\n" + "-"*60))
   |

W293 [*] Blank line contains whitespace
  --> scripts/demonstrate_optimization.py:96:1
   |
94 |         logging.info(f"  • ENTRY_START_OFFSET: {balanced_config.entry_start_offset_min} min (Entry timing)")
95 |         logging.info(f"  • ENTRY_END_OFFSET: {balanced_config.entry_end_offset_min} min (Exit timing)")
96 |         
   | ^^^^^^^^
97 |         logging.info(str("\n" + "-"*60))
98 |         logging.info("5. PERFORMANCE THRESHOLD OPTIMIZATIONS")
   |
help: Remove whitespace from blank line

E501 Line too long (105 > 100)
   --> scripts/demonstrate_optimization.py:101:101
    |
 99 |         logging.info(str("-"*60))
100 |         logging.info("Higher standards for strategy quality:")
101 |         logging.info(f"  • MIN_SHARPE_RATIO: {balanced_config.min_sharpe_ratio} (Risk-adjusted returns)")
    |                                                                                                     ^^^^^
102 |         logging.info(f"  • MAX_DRAWDOWN: {balanced_config.max_drawdown*100:.0f}% (Capital preservation)")
103 |         logging.info(f"  • MIN_WIN_RATE: {balanced_config.min_win_rate*100:.0f}% (Strategy quality)")
    |

E501 Line too long (105 > 100)
   --> scripts/demonstrate_optimization.py:102:101
    |
100 |         logging.info("Higher standards for strategy quality:")
101 |         logging.info(f"  • MIN_SHARPE_RATIO: {balanced_config.min_sharpe_ratio} (Risk-adjusted returns)")
102 |         logging.info(f"  • MAX_DRAWDOWN: {balanced_config.max_drawdown*100:.0f}% (Capital preservation)")
    |                                                                                                     ^^^^^
103 |         logging.info(f"  • MIN_WIN_RATE: {balanced_config.min_win_rate*100:.0f}% (Strategy quality)")
104 |         logging.info(f"  • MIN_PROFIT_FACTOR: {balanced_config.min_profit_factor} (Profitability threshold)")
    |

E501 Line too long (101 > 100)
   --> scripts/demonstrate_optimization.py:103:101
    |
101 |         logging.info(f"  • MIN_SHARPE_RATIO: {balanced_config.min_sharpe_ratio} (Risk-adjusted returns)")
102 |         logging.info(f"  • MAX_DRAWDOWN: {balanced_config.max_drawdown*100:.0f}% (Capital preservation)")
103 |         logging.info(f"  • MIN_WIN_RATE: {balanced_config.min_win_rate*100:.0f}% (Strategy quality)")
    |                                                                                                     ^
104 |         logging.info(f"  • MIN_PROFIT_FACTOR: {balanced_config.min_profit_factor} (Profitability threshold)")
105 |         logging.info(f"  • MAX_VAR_95: {balanced_config.max_var_95*100:.0f}% (Value at Risk)")
    |

E501 Line too long (109 > 100)
   --> scripts/demonstrate_optimization.py:104:101
    |
102 |         logging.info(f"  • MAX_DRAWDOWN: {balanced_config.max_drawdown*100:.0f}% (Capital preservation)")
103 |         logging.info(f"  • MIN_WIN_RATE: {balanced_config.min_win_rate*100:.0f}% (Strategy quality)")
104 |         logging.info(f"  • MIN_PROFIT_FACTOR: {balanced_config.min_profit_factor} (Profitability threshold)")
    |                                                                                                     ^^^^^^^^^
105 |         logging.info(f"  • MAX_VAR_95: {balanced_config.max_var_95*100:.0f}% (Value at Risk)")
    |

W293 [*] Blank line contains whitespace
   --> scripts/demonstrate_optimization.py:106:1
    |
104 |         logging.info(f"  • MIN_PROFIT_FACTOR: {balanced_config.min_profit_factor} (Profitability threshold)")
105 |         logging.info(f"  • MAX_VAR_95: {balanced_config.max_var_95*100:.0f}% (Value at Risk)")
106 |         
    | ^^^^^^^^
107 |         logging.info(str("\n" + "-"*60))
108 |         logging.info("6. CENTRALIZED CONFIGURATION BENEFITS")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demonstrate_optimization.py:117:1
    |
115 |         logging.info("  ✓ Easy single-file updates affect entire system")
116 |         logging.info("  ✓ Consistent parameter access across all modules")
117 |         
    | ^^^^^^^^
118 |         logging.info(str("\n" + "-"*60))
119 |         logging.info("7. ENVIRONMENT VARIABLE SUPPORT")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demonstrate_optimization.py:127:1
    |
125 |         logging.info("  • Example: export BOT_MODE=aggressive")
126 |         logging.info("  • Runtime configuration changes without code modification")
127 |         
    | ^^^^^^^^
128 |         logging.info(str("\n" + "-"*60))
129 |         logging.info("8. PARAMETER VALIDATION")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demonstrate_optimization.py:132:1
    |
130 |         logging.info(str("-"*60))
131 |         logging.info("Built-in parameter validation and safety checks:")
132 |         
    | ^^^^^^^^
133 |         # Test parameter validation with the centralized config
134 |         try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demonstrate_optimization.py:137:1
    |
135 |             from ai_trading.core.parameter_validator import validate_trading_parameters
136 |             validation_result = validate_trading_parameters()
137 |             
    | ^^^^^^^^^^^^
138 |             logging.info(str(f"  Overall Status: {validation_result['overall_status']}"))
139 |             logging.info(f"  Violations: {len(validation_result['violations'])}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demonstrate_optimization.py:141:1
    |
139 |             logging.info(f"  Violations: {len(validation_result['violations'])}")
140 |             logging.info(str(f"  Warnings: {len(validation_result['warnings'])}"))
141 |             
    | ^^^^^^^^^^^^
142 |             if validation_result['violations']:
143 |                 logging.info("  ⚠️  VIOLATIONS FOUND:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demonstrate_optimization.py:148:1
    |
146 |             else:
147 |                 logging.info("  ✅ All parameters within institutional safety bounds")
148 |             
    | ^^^^^^^^^^^^
149 |             if validation_result['warnings']:
150 |                 logging.info("  ⚠️  WARNINGS:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demonstrate_optimization.py:159:1
    |
157 |         logging.info(str("-"*60))
158 |         logging.info("Summary of centralized parameter configuration:")
159 |         
    | ^^^^^^^^
160 |         # Display configuration summary for all modes
161 |         logging.info("\n  📊 Configuration Summary:")
    |
help: Remove whitespace from blank line

E501 Line too long (137 > 100)
   --> scripts/demonstrate_optimization.py:162:101
    |
160 | …
161 | …
162 | …n([k for k in conservative_config.__dict__ if not k.startswith('_')])} parameters"))
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
163 | …n([k for k in balanced_config.__dict__ if not k.startswith('_')])} parameters"))
164 | …n([k for k in aggressive_config.__dict__ if not k.startswith('_')])} parameters"))
    |

E501 Line too long (133 > 100)
   --> scripts/demonstrate_optimization.py:163:101
    |
161 | …)
162 | …len([k for k in conservative_config.__dict__ if not k.startswith('_')])} parameters"))
163 | …len([k for k in balanced_config.__dict__ if not k.startswith('_')])} parameters"))
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
164 | …len([k for k in aggressive_config.__dict__ if not k.startswith('_')])} parameters"))
    |

E501 Line too long (135 > 100)
   --> scripts/demonstrate_optimization.py:164:101
    |
162 | …en([k for k in conservative_config.__dict__ if not k.startswith('_')])} parameters"))
163 | …en([k for k in balanced_config.__dict__ if not k.startswith('_')])} parameters"))
164 | …en([k for k in aggressive_config.__dict__ if not k.startswith('_')])} parameters"))
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
165 | …
166 | …
    |

W293 [*] Blank line contains whitespace
   --> scripts/demonstrate_optimization.py:165:1
    |
163 | …     logging.info(str(f"    BALANCED Mode:     {len([k for k in balanced_config.__dict__ if not k.startswith('_')])} parameters"))
164 | …     logging.info(str(f"    AGGRESSIVE Mode:   {len([k for k in aggressive_config.__dict__ if not k.startswith('_')])} parameters"))
165 | …     
    ^^^^^^^^
166 | …     logging.info("\n  ✅ Features Implemented:")
167 | …     logging.info("    • Single source of truth for all trading parameters")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demonstrate_optimization.py:173:1
    |
171 |         logging.info("    • Parameter validation and bounds checking")
172 |         logging.info("    • Easy single-file updates affect entire system")
173 |         
    | ^^^^^^^^
174 |         logging.info(str("\n" + "="*80))
175 |         logging.info("CENTRALIZED CONFIGURATION SUMMARY")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demonstrate_optimization.py:183:1
    |
181 |         logging.info("✅ Parameter validation available")
182 |         logging.info("✅ Single-file parameter updates now possible")
183 |         
    | ^^^^^^^^
184 |         logging.info("\n🎯 Benefits of Centralized Configuration:")
185 |         logging.info("   1. Single-file parameter updates affect entire system")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demonstrate_optimization.py:191:1
    |
189 |         logging.info("   5. Built-in parameter validation and safety checks")
190 |         logging.info("   6. Consistent parameter access across all modules")
191 |         
    | ^^^^^^^^
192 |         logging.info(str("\n" + "="*80))
193 |         logging.info("CENTRALIZED CONFIGURATION DEMONSTRATION COMPLETE")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demonstrate_optimization.py:195:1
    |
193 |         logging.info("CENTRALIZED CONFIGURATION DEMONSTRATION COMPLETE")
194 |         logging.info(str("="*80))
195 |         
    | ^^^^^^^^
196 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demonstrate_optimization.py:197:1
    |
196 |         return True
197 |         
    | ^^^^^^^^
198 |     except ImportError as e:
199 |         logging.info(f"\n❌ Error: Could not import required modules: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/demonstrate_optimization.py:202:1
    |
200 |         logging.info("Please ensure all dependencies are properly installed.")
201 |         return False
202 |     
    | ^^^^
203 |     except Exception as e:
204 |         logging.info(f"\n❌ Error during demonstration: {e}")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/demonstrate_optimization.py:211:34
    |
209 | if __name__ == "__main__":
210 |     success = demonstrate_parameter_optimizations()
211 |     sys.exit(0 if success else 1)
    |                                  ^
    |
help: Add trailing newline

E501 Line too long (109 > 100)
   --> scripts/demonstrate_optimization_simple.py:119:101
    |
117 |         logging.info("Projected improvements from parameter optimizations:")
118 |         logging.info("\n  🎯 Profit Potential:")
119 |         logging.info("    • Higher portfolio risk allocation (2.5% vs 2.0%) = +25% position sizing capacity")
    |                                                                                                     ^^^^^^^^^
120 |         logging.info("    • More aggressive bull market positioning = Enhanced upside capture")
121 |         logging.info("    • Faster execution (15% vs 10% participation) = Reduced market impact")
    |

E501 Line too long (104 > 100)
   --> scripts/demonstrate_optimization_simple.py:124:101
    |
123 |         logging.info("\n  📊 Risk-Adjusted Returns:")
124 |         logging.info("    • Reduced Kelly fraction (15% vs 25%) = Better risk-adjusted position sizing")
    |                                                                                                     ^^^^
125 |         logging.info("    • Tighter stops (1.8x vs 2.0x ATR) = Improved capital preservation")
126 |         logging.info("    • Lower correlation limits (15% vs 20%) = Enhanced diversification")
    |

E501 Line too long (106 > 100)
   --> scripts/demonstrate_optimization_simple.py:129:101
    |
128 |         logging.info("\n  ⚡ Execution Quality:")
129 |         logging.info("    • Tighter slippage control (15 vs 20 bps) = +25% execution quality improvement")
    |                                                                                                     ^^^^^^
130 |         logging.info("    • Faster timeouts (180s vs 300s) = +40% faster market adaptation")
131 |         logging.info("    • Optimized slice intervals = More efficient order execution")
    |

E501 Line too long (102 > 100)
   --> scripts/demonstrate_optimization_simple.py:134:101
    |
133 |         logging.info("\n  🛡️ Risk Management:")
134 |         logging.info("    • Lower drawdown tolerance (15% vs 20%) = +25% better capital preservation")
    |                                                                                                     ^^
135 |         logging.info("    • Higher quality thresholds (1.2 vs 1.0 Sharpe) = Better strategy selection")
136 |         logging.info("    • Enhanced regime detection = More responsive to market conditions")
    |

E501 Line too long (103 > 100)
   --> scripts/demonstrate_optimization_simple.py:135:101
    |
133 |         logging.info("\n  🛡️ Risk Management:")
134 |         logging.info("    • Lower drawdown tolerance (15% vs 20%) = +25% better capital preservation")
135 |         logging.info("    • Higher quality thresholds (1.2 vs 1.0 Sharpe) = Better strategy selection")
    |                                                                                                     ^^^
136 |         logging.info("    • Enhanced regime detection = More responsive to market conditions")
    |

E501 Line too long (105 > 100)
   --> scripts/demonstrate_optimization_simple.py:152:101
    |
150 |         logging.info("    • All risk parameters within [0.01-0.05, 0.05-0.15, 1.0-3.0] bounds ✅")
151 |         logging.info("    • All execution parameters within [0.05-0.25, 5-50, 60-600] bounds ✅")
152 |         logging.info("    • All performance parameters within [0.5-2.0, 0.05-0.30, 0.30-0.70] bounds ✅")
    |                                                                                                     ^^^^^
153 |
154 |         logging.info(str("\n" + "="*80))
    |

E501 Line too long (101 > 100)
   --> scripts/demonstrate_optimization_simple.py:178:101
    |
176 |         logging.info("   • Average Slippage: Should decrease below 15 bps")
177 |         logging.info("   • Order Fill Rate: Should improve with faster participation")
178 |         logging.info("   • Portfolio Volatility: Should be better managed with tighter correlations")
    |                                                                                                     ^
179 |
180 |         logging.info("\n⚠️  Risk Mitigation Measures:")
    |

E501 Line too long (114 > 100)
   --> scripts/demonstrate_optimization_simple.py:190:101
    |
188 |         logging.info("PARAMETER OPTIMIZATION COMPLETE")
189 |         logging.info(str("="*80))
190 |         logging.info("All optimizations successfully implemented with institutional safety standards maintained.")
    |                                                                                                     ^^^^^^^^^^^^^^
191 |
192 |         return True
    |

E501 Line too long (117 > 100)
   --> scripts/demonstrate_portfolio_optimization.py:133:101
    |
131 |             current_pos = current_positions.get(symbol, 0.0)
132 |             position_change = abs(proposed_position - current_pos)
133 |             expected_profit = position_change * market_data['prices'].get(symbol, 100.0) * 0.02  # 2% expected return
    |                                                                                                     ^^^^^^^^^^^^^^^^^
134 |
135 |             profitability = transaction_calculator.validate_trade_profitability(
    |

E501 Line too long (143 > 100)
   --> scripts/demonstrate_portfolio_optimization.py:150:100
    |
148 | …
149 | …
150 | …Expected profit ${expected_profit:.2f} vs cost ${profitability.transaction_cost:.2f}")
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
151 | …
152 | …
    |

E501 Line too long (101 > 100)
   --> scripts/demonstrate_portfolio_optimization.py:198:100
    |
196 |     logging.info("   ✅ Comprehensive transaction cost analysis with safety margins")
197 |     logging.info("   ✅ Correlation impact assessment and penalty application")
198 |     logging.info(f"   ✅ Achieved {reduction_percentage:.1f}% churn reduction in this demonstration")
    |                                                                                                     ^
199 |     logging.info("   ✅ Tax-aware quarterly rebalancing prioritization")
200 |     logging.info("   ✅ Crisis and volatility regime protective measures")
    |

W293 Blank line contains whitespace
  --> scripts/error_handling.py:35:1
   |
33 |     """
34 |     Decorator for robust error handling in trading operations.
35 |     
   | ^^^^
36 |     Args:
37 |         error_type: Type of exception to catch
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> scripts/error_handling.py:74:1
   |
72 |     """
73 |     Safely execute API calls with retry logic.
74 |     
   | ^^^^
75 |     Args:
76 |         func: Function to execute
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> scripts/error_handling.py:79:1
   |
77 |         retries: Number of retry attempts
78 |         delay: Delay between retries in seconds
79 |         
   | ^^^^^^^^
80 |     Returns:
81 |         Function result or None on failure
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/error_handling.py:102:1
    |
100 |     """
101 |     Validate trade data before execution.
102 |     
    | ^^^^
103 |     Args:
104 |         symbol: Trading symbol
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/error_handling.py:108:1
    |
106 |         side: 'buy' or 'sell'
107 |         price: Optional price for validation
108 |         
    | ^^^^^^^^
109 |     Returns:
110 |         True if data is valid, False otherwise
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/error_handling.py:139:1
    |
137 |     """
138 |     Perform graceful shutdown of trading operations.
139 |     
    | ^^^^
140 |     Args:
141 |         reason: Reason for shutdown
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
 --> scripts/features.py:2:1
  |
1 |   # AI-AGENT-REF: guard pandas/numpy imports for test environments
2 | / import pandas as pd
3 | |
4 | |
5 | | import logging
6 | |
7 | | from ai_trading.indicators import ema
8 | |
9 | | from ai_trading.indicators import atr
  | |_____________________________________^
  |
help: Organize imports

E501 Line too long (109 > 100)
  --> scripts/final_validation_report.py:16:101
   |
14 |     """Validate Issue 1: Meta-Learning System Not Functioning"""
15 |     logging.info("🔍 Issue 1: Meta-Learning System Not Functioning")
16 |     logging.info("   Problem: 'METALEARN_EMPTY_TRADE_LOG - No valid trades found' despite successful trades")
   |                                                                                                     ^^^^^^^^^
17 |     logging.info("   Root Cause: Audit-to-meta conversion not triggered automatically")
   |

E501 Line too long (102 > 100)
  --> scripts/final_validation_report.py:70:100
   |
68 |         fixes_found = 0
69 |         if '"requested_qty": requested_qty' in content:
70 |             logging.info("   ✅ Fix: FULL_FILL_SUCCESS now logs both requested and filled quantities")
   |                                                                                                     ^^
71 |             fixes_found += 1
   |

F401 `production_monitoring.HealthCheckResult` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/health_check.py:34:60
   |
32 |         get_production_monitor,
33 |     )
34 |     from production_monitoring import HealthCheckResult as ProdHealthCheckResult
   |                                                            ^^^^^^^^^^^^^^^^^^^^^
35 |     from production_monitoring import HealthStatus as ProdHealthStatus
36 |     PRODUCTION_MONITORING_AVAILABLE = True
   |
help: Remove unused import: `production_monitoring.HealthCheckResult`

F401 `production_monitoring.HealthStatus` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/health_check.py:35:55
   |
33 |     )
34 |     from production_monitoring import HealthCheckResult as ProdHealthCheckResult
35 |     from production_monitoring import HealthStatus as ProdHealthStatus
   |                                                       ^^^^^^^^^^^^^^^^
36 |     PRODUCTION_MONITORING_AVAILABLE = True
37 | except ImportError:
   |
help: Remove unused import: `production_monitoring.HealthStatus`

F401 `ai_trading.core.bot_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/health_check.py:469:41
    |
467 |         # Check if trading modules are importable
468 |         try:
469 |             from ai_trading.core import bot_engine
    |                                         ^^^^^^^^^^
470 |             details["bot_engine"] = "OK"
471 |         except ImportError as e:
    |
help: Remove unused import: `ai_trading.core.bot_engine`

F401 `trade_execution` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/health_check.py:476:20
    |
475 |         try:
476 |             import trade_execution
    |                    ^^^^^^^^^^^^^^^
477 |             details["trade_execution"] = "OK"
478 |         except ImportError as e:
    |
help: Remove unused import: `trade_execution`

E501 Line too long (128 > 100)
   --> scripts/integration_test.py:180:101
    |
178 | …     # Look for the specific import patterns we implemented
179 | …     if filename == "profile_indicators.py":
180 | …         assert "import ai_trading.signals as signals" in content, f"Missing ai_trading signals import in {filename}"
    |                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
181 | …         assert "import ai_trading.indicators as indicators" in content, f"Missing ai_trading indicators import in {filename}"
182 | …     else:
    |

E501 Line too long (137 > 100)
   --> scripts/integration_test.py:181:101
    |
179 | …     if filename == "profile_indicators.py":
180 | …         assert "import ai_trading.signals as signals" in content, f"Missing ai_trading signals import in {filename}"
181 | …         assert "import ai_trading.indicators as indicators" in content, f"Missing ai_trading indicators import in {filename}"
    |                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
182 | …     else:
183 | …         assert "from ai_trading." in content, f"Missing ai_trading imports in {filename}"
    |

E501 Line too long (101 > 100)
   --> scripts/integration_test.py:183:101
    |
181 | …         assert "import ai_trading.indicators as indicators" in content, f"Missing ai_trading indicators import in {filename}"
182 | …     else:
183 | …         assert "from ai_trading." in content, f"Missing ai_trading imports in {filename}"
    |                                                                                           ^
184 | …     assert "except Exception:" in content, f"Missing fallback imports in {filename}"
    |

E501 Line too long (146 > 100)
   --> scripts/memory_optimizer.py:124:101
    |
123 | …
124 | …{result['objects_collected']} objects collected in {result['collection_time_ms']:.2f}ms")
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
125 | …
126 | …
    |

E501 Line too long (107 > 100)
   --> scripts/memory_optimizer.py:295:101
    |
294 |         final_memory = self.get_memory_usage()
295 |         self.logger.warning(f"Emergency cleanup completed. Current memory: {final_memory['rss_mb']:.2f}MB")
    |                                                                                                     ^^^^^^^
296 |
297 |         return final_memory
    |

W293 [*] Blank line contains whitespace
  --> scripts/ml_model.py:32:1
   |
30 |     def mean_squared_error(y_true, y_pred):
31 |         return 0.0
32 |     
   | ^^^^
33 |     logger.warning("scikit-learn not available; using fallback implementations")
   |
help: Remove whitespace from blank line

E501 Line too long (116 > 100)
  --> scripts/ml_model.py:43:101
   |
42 | # Prefer spec check over ImportError guards
43 | if importlib.util.find_spec("sklearn") is not None and importlib.util.find_spec("sklearn.linear_model") is not None:
   |                                                                                                     ^^^^^^^^^^^^^^^^
44 |     from sklearn.linear_model import LinearRegression
45 | else:
   |

W293 [*] Blank line contains whitespace
  --> scripts/ml_model.py:52:1
   |
50 |         def predict(self, X):
51 |             return [0] * len(X)
52 |     
   | ^^^^
53 |     logger.warning("sklearn.linear_model not available; using fallback LinearRegression")
   |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> scripts/monitoring_dashboard.py:249:101
    |
247 |             win_rate = len(winning_trades) / len(recent_trades) * 100 if recent_trades else 0
248 |             avg_win = statistics.mean([t['pnl'] for t in winning_trades]) if winning_trades else 0
249 |             avg_loss = statistics.mean([abs(t['pnl']) for t in losing_trades]) if losing_trades else 0
    |                                                                                                     ^^
250 |             profit_factor = abs(avg_win / avg_loss) if avg_loss > 0 else 0
    |

E501 Line too long (110 > 100)
   --> scripts/monitoring_dashboard.py:343:101
    |
341 |                 var_95=abs(var_95),
342 |                 var_99=abs(var_99),
343 |                 expected_shortfall=abs(statistics.mean(sorted_pnl[:var_95_index])) if var_95_index > 0 else 0,
    |                                                                                                     ^^^^^^^^^^
344 |                 beta=1.0,  # Would calculate vs benchmark
345 |                 volatility=volatility,
    |

E501 Line too long (114 > 100)
   --> scripts/monitoring_dashboard.py:382:101
    |
381 |             # Check risk thresholds
382 |             if latest_risk and latest_risk.get('current_drawdown', 0) > self.alert_thresholds['drawdown_percent']:
    |                                                                                                     ^^^^^^^^^^^^^^
383 |                 self.add_alert(
384 |                     'CRITICAL',
    |

E501 Line too long (110 > 100)
   --> scripts/monitoring_dashboard.py:551:101
    |
549 |         body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
550 |         .container { max-width: 1200px; margin: 0 auto; }
551 |         .header { background: #2c3e50; color: white; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
    |                                                                                                     ^^^^^^^^^^
552 |         .metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
553 |         .metric-card { background: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
    |

E501 Line too long (112 > 100)
   --> scripts/monitoring_dashboard.py:552:101
    |
550 |         .container { max-width: 1200px; margin: 0 auto; }
551 |         .header { background: #2c3e50; color: white; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
552 |         .metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
    |                                                                                                     ^^^^^^^^^^^^
553 |         .metric-card { background: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
554 |         .metric-title { font-size: 18px; font-weight: bold; margin-bottom: 10px; color: #2c3e50; }
    |

E501 Line too long (117 > 100)
   --> scripts/monitoring_dashboard.py:553:101
    |
551 |         .header { background: #2c3e50; color: white; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
552 |         .metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
553 |         .metric-card { background: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
    |                                                                                                     ^^^^^^^^^^^^^^^^^
554 |         .metric-title { font-size: 18px; font-weight: bold; margin-bottom: 10px; color: #2c3e50; }
555 |         .metric-value { font-size: 24px; font-weight: bold; color: #27ae60; }
    |

E501 Line too long (130 > 100)
   --> scripts/monitoring_dashboard.py:563:101
    |
561 |         .alert-critical { background: #e74c3c; color: white; }
562 |         .alert-info { background: #3498db; color: white; }
563 |         .refresh-btn { background: #3498db; color: white; border: none; padding: 10px 20px; border-radius: 3px; cursor: pointer; }
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
564 |         .status-indicator { display: inline-block; width: 10px; height: 10px; border-radius: 50%; margin-right: 5px; }
565 |         .status-healthy { background: #27ae60; }
    |

E501 Line too long (118 > 100)
   --> scripts/monitoring_dashboard.py:564:101
    |
562 |         .alert-info { background: #3498db; color: white; }
563 |         .refresh-btn { background: #3498db; color: white; border: none; padding: 10px 20px; border-radius: 3px; cursor: pointer; }
564 |         .status-indicator { display: inline-block; width: 10px; height: 10px; border-radius: 50%; margin-right: 5px; }
    |                                                                                                     ^^^^^^^^^^^^^^^^^^
565 |         .status-healthy { background: #27ae60; }
566 |         .status-warning { background: #f39c12; }
    |

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:577:1
    |
575 |             <button class="refresh-btn" onclick="refreshData()">Refresh Data</button>
576 |         </div>
577 |         
    | ^^^^^^^^
578 |         <div id="alerts-section">
579 |             <!-- Alerts will be loaded here -->
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:581:1
    |
579 |             <!-- Alerts will be loaded here -->
580 |         </div>
581 |         
    | ^^^^^^^^
582 |         <div class="metrics-grid">
583 |             <div class="metric-card">
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:590:1
    |
588 |                 </div>
589 |             </div>
590 |             
    | ^^^^^^^^^^^^
591 |             <div class="metric-card">
592 |                 <div class="metric-title">Total P&L</div>
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:596:1
    |
594 |                 <div class="metric-change" id="pnl-change">No change</div>
595 |             </div>
596 |             
    | ^^^^^^^^^^^^
597 |             <div class="metric-card">
598 |                 <div class="metric-title">Win Rate</div>
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:602:1
    |
600 |                 <div class="metric-change" id="win-rate-change">--</div>
601 |             </div>
602 |             
    | ^^^^^^^^^^^^
603 |             <div class="metric-card">
604 |                 <div class="metric-title">Active Positions</div>
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:608:1
    |
606 |                 <div class="metric-change" id="positions-change">--</div>
607 |             </div>
608 |             
    | ^^^^^^^^^^^^
609 |             <div class="metric-card">
610 |                 <div class="metric-title">CPU Usage</div>
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:614:1
    |
612 |                 <div class="metric-change" id="cpu-change">--</div>
613 |             </div>
614 |             
    | ^^^^^^^^^^^^
615 |             <div class="metric-card">
616 |                 <div class="metric-title">Memory Usage</div>
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:621:1
    |
619 |             </div>
620 |         </div>
621 |         
    | ^^^^^^^^
622 |         <div class="metrics-grid" style="margin-top: 20px;">
623 |             <div class="metric-card">
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:631:1
    |
629 |                 </div>
630 |             </div>
631 |             
    | ^^^^^^^^^^^^
632 |             <div class="metric-card">
633 |                 <div class="metric-title">Recent Trades</div>
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:640:1
    |
638 |         </div>
639 |     </div>
640 |     
    | ^^^^
641 |     <script>
642 |         function refreshData() {
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:656:1
    |
654 |             .catch(error => console.error('Error fetching data:', error));
655 |         }
656 |         
    | ^^^^^^^^
657 |         function updateMetrics(data) {
658 |             if (data.trading_metrics) {
    |
help: Remove whitespace from blank line

E501 Line too long (122 > 100)
   --> scripts/monitoring_dashboard.py:659:101
    |
657 |         function updateMetrics(data) {
658 |             if (data.trading_metrics) {
659 |                 document.getElementById('total-pnl').textContent = '$' + (data.trading_metrics.total_pnl || 0).toFixed(2);
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
660 |                 document.getElementById('win-rate').textContent = (data.trading_metrics.win_rate || 0).toFixed(1) + '%';
661 |             }
    |

E501 Line too long (120 > 100)
   --> scripts/monitoring_dashboard.py:660:101
    |
658 |             if (data.trading_metrics) {
659 |                 document.getElementById('total-pnl').textContent = '$' + (data.trading_metrics.total_pnl || 0).toFixed(2);
660 |                 document.getElementById('win-rate').textContent = (data.trading_metrics.win_rate || 0).toFixed(1) + '%';
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
661 |             }
    |

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:662:1
    |
660 |                 document.getElementById('win-rate').textContent = (data.trading_metrics.win_rate || 0).toFixed(1) + '%';
661 |             }
662 |             
    | ^^^^^^^^^^^^
663 |             if (data.performance_kpis) {
664 |                 document.getElementById('cpu-usage').textContent = (data.performance_kpis.cpu_utilization || 0).toFixed(1) + '%';
    |
help: Remove whitespace from blank line

E501 Line too long (129 > 100)
   --> scripts/monitoring_dashboard.py:664:101
    |
663 | …     if (data.performance_kpis) {
664 | …         document.getElementById('cpu-usage').textContent = (data.performance_kpis.cpu_utilization || 0).toFixed(1) + '%';
    |                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
665 | …         document.getElementById('memory-usage').textContent = (data.performance_kpis.memory_utilization || 0).toFixed(1) + '%';
666 | …         document.getElementById('active-positions').textContent = data.performance_kpis.active_positions || 0;
    |

E501 Line too long (135 > 100)
   --> scripts/monitoring_dashboard.py:665:101
    |
663 | …
664 | ….textContent = (data.performance_kpis.cpu_utilization || 0).toFixed(1) + '%';
665 | …e').textContent = (data.performance_kpis.memory_utilization || 0).toFixed(1) + '%';
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
666 | …tions').textContent = data.performance_kpis.active_positions || 0;
667 | …
    |

E501 Line too long (118 > 100)
   --> scripts/monitoring_dashboard.py:666:101
    |
664 | …         document.getElementById('cpu-usage').textContent = (data.performance_kpis.cpu_utilization || 0).toFixed(1) + '%';
665 | …         document.getElementById('memory-usage').textContent = (data.performance_kpis.memory_utilization || 0).toFixed(1) + '%';
666 | …         document.getElementById('active-positions').textContent = data.performance_kpis.active_positions || 0;
    |                                                                                               ^^^^^^^^^^^^^^^^^^
667 | …     }
    |

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:668:1
    |
666 |                 document.getElementById('active-positions').textContent = data.performance_kpis.active_positions || 0;
667 |             }
668 |             
    | ^^^^^^^^^^^^
669 |             if (data.risk_metrics) {
670 |                 document.getElementById('var-95').textContent = '$' + (data.risk_metrics.var_95 || 0).toFixed(2);
    |
help: Remove whitespace from blank line

E501 Line too long (113 > 100)
   --> scripts/monitoring_dashboard.py:670:101
    |
669 |             if (data.risk_metrics) {
670 |                 document.getElementById('var-95').textContent = '$' + (data.risk_metrics.var_95 || 0).toFixed(2);
    |                                                                                                     ^^^^^^^^^^^^^
671 |                 document.getElementById('max-drawdown').textContent = (data.risk_metrics.max_drawdown || 0).toFixed(1) + '%';
672 |                 document.getElementById('volatility').textContent = ((data.risk_metrics.volatility || 0) * 100).toFixed(2) + '%';
    |

E501 Line too long (125 > 100)
   --> scripts/monitoring_dashboard.py:671:101
    |
669 |             if (data.risk_metrics) {
670 |                 document.getElementById('var-95').textContent = '$' + (data.risk_metrics.var_95 || 0).toFixed(2);
671 |                 document.getElementById('max-drawdown').textContent = (data.risk_metrics.max_drawdown || 0).toFixed(1) + '%';
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
672 |                 document.getElementById('volatility').textContent = ((data.risk_metrics.volatility || 0) * 100).toFixed(2) + '%';
673 |             }
    |

E501 Line too long (129 > 100)
   --> scripts/monitoring_dashboard.py:672:101
    |
670 |                 document.getElementById('var-95').textContent = '$' + (data.risk_metrics.var_95 || 0).toFixed(2);
671 |                 document.getElementById('max-drawdown').textContent = (data.risk_metrics.max_drawdown || 0).toFixed(1) + '%';
672 |                 document.getElementById('volatility').textContent = ((data.risk_metrics.volatility || 0) * 100).toFixed(2) + '%';
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
673 |             }
    |

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:674:1
    |
672 |                 document.getElementById('volatility').textContent = ((data.risk_metrics.volatility || 0) * 100).toFixed(2) + '%';
673 |             }
674 |             
    | ^^^^^^^^^^^^
675 |             if (data.alerts && data.alerts.length > 0) {
676 |                 updateAlerts(data.alerts);
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:679:1
    |
677 |             }
678 |         }
679 |         
    | ^^^^^^^^
680 |         function updateTrades(trades) {
681 |             const tradesDiv = document.getElementById('recent-trades');
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> scripts/monitoring_dashboard.py:684:64
    |
682 |             if (trades && trades.length > 0) {
683 |                 const recentTrades = trades.slice(-5);
684 |                 tradesDiv.innerHTML = recentTrades.map(trade => 
    |                                                                ^
685 |                     `<p>${trade.symbol} ${trade.side} ${trade.quantity} @ $${trade.price}</p>`
686 |                 ).join('');
    |
help: Remove trailing whitespace

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:691:1
    |
689 |             }
690 |         }
691 |         
    | ^^^^^^^^
692 |         function updateHealth(health) {
693 |             const statusDiv = document.getElementById('system-status');
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:698:1
    |
696 |                 let statusClass = 'status-healthy';
697 |                 let statusText = 'All Systems Operational';
698 |                 
    | ^^^^^^^^^^^^^^^^
699 |                 if (status === 'warning') {
700 |                     statusClass = 'status-warning';
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:706:1
    |
704 |                     statusText = 'Critical Issues Detected';
705 |                 }
706 |                 
    | ^^^^^^^^^^^^^^^^
707 |                 statusDiv.innerHTML = `<span class="status-indicator ${statusClass}"></span><span>${statusText}</span>`;
708 |             }
    |
help: Remove whitespace from blank line

E501 Line too long (120 > 100)
   --> scripts/monitoring_dashboard.py:707:101
    |
705 |                 }
706 |                 
707 |                 statusDiv.innerHTML = `<span class="status-indicator ${statusClass}"></span><span>${statusText}</span>`;
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
708 |             }
709 |         }
    |

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:710:1
    |
708 |             }
709 |         }
710 |         
    | ^^^^^^^^
711 |         function updateAlerts(alerts) {
712 |             const alertsSection = document.getElementById('alerts-section');
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> scripts/monitoring_dashboard.py:714:69
    |
712 |             const alertsSection = document.getElementById('alerts-section');
713 |             if (alerts && alerts.length > 0) {
714 |                 alertsSection.innerHTML = '<h3>Recent Alerts</h3>' + 
    |                                                                     ^
715 |                     alerts.map(alert => {
716 |                         const alertClass = `alert-${alert.level.toLowerCase()}`;
    |
help: Remove trailing whitespace

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:721:1
    |
719 |             }
720 |         }
721 |         
    | ^^^^^^^^
722 |         // Auto-refresh every 30 seconds
723 |         setInterval(refreshData, 30000);
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/monitoring_dashboard.py:724:1
    |
722 |         // Auto-refresh every 30 seconds
723 |         setInterval(refreshData, 30000);
724 |         
    | ^^^^^^^^
725 |         // Initial load
726 |         refreshData();
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/optimized_startup.py:7:1
   |
 5 |   """
 6 |
 7 | / import os
 8 | | import sys
 9 | | import logging
10 | | import signal
11 | | import atexit
12 | | from datetime import datetime, timezone
13 | | from ai_trading.core import bot_engine  # AI-AGENT-REF: use packaged bot_engine
   | |______________________________________^
14 |
15 |   # AI-AGENT-REF: Optimized startup script with performance monitoring
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:19:1
   |
17 | def setup_optimized_environment():
18 |     """Setup environment for optimal performance."""
19 |     
   | ^^^^
20 |     # Set environment variables for memory optimization
21 |     os.environ['PYTHONHASHSEED'] = '0'  # Consistent hash seed
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:23:1
   |
21 |     os.environ['PYTHONHASHSEED'] = '0'  # Consistent hash seed
22 |     os.environ['PYTHONUNBUFFERED'] = '1'  # Unbuffered output
23 |     
   | ^^^^
24 |     # Memory optimization settings
25 |     os.environ['MALLOC_TRIM_THRESHOLD_'] = '131072'  # 128KB
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:27:1
   |
25 |     os.environ['MALLOC_TRIM_THRESHOLD_'] = '131072'  # 128KB
26 |     os.environ['MALLOC_MMAP_THRESHOLD_'] = '131072'  # 128KB
27 |     
   | ^^^^
28 |     # Enable garbage collection optimization
29 |     import gc
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:32:1
   |
30 |     gc.enable()
31 |     gc.set_threshold(500, 8, 8)  # More aggressive GC
32 |     
   | ^^^^
33 |     logging.info("Environment optimized for performance")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:38:1
   |
36 | def setup_signal_handlers():
37 |     """Setup signal handlers for graceful shutdown."""
38 |     
   | ^^^^
39 |     def signal_handler(signum, frame):
40 |         logging.info(f"\nReceived signal {signum}, shutting down gracefully...")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:41:1
   |
39 |     def signal_handler(signum, frame):
40 |         logging.info(f"\nReceived signal {signum}, shutting down gracefully...")
41 |         
   | ^^^^^^^^
42 |         # Stop performance monitoring
43 |         try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:48:1
   |
46 |         except ImportError:
47 |             pass
48 |         
   | ^^^^^^^^
49 |         # Stop memory monitoring
50 |         try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:57:1
   |
55 |         except ImportError:
56 |             pass
57 |         
   | ^^^^^^^^
58 |         # Emergency memory cleanup
59 |         try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:64:1
   |
62 |         except ImportError:
63 |             pass
64 |         
   | ^^^^^^^^
65 |         logging.info("Graceful shutdown complete")
66 |         sys.exit(0)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:67:1
   |
65 |         logging.info("Graceful shutdown complete")
66 |         sys.exit(0)
67 |     
   | ^^^^
68 |     signal.signal(signal.SIGINT, signal_handler)
69 |     signal.signal(signal.SIGTERM, signal_handler)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:75:1
   |
73 |     """Perform system health check before startup."""
74 |     logging.info("Performing system health check...")
75 |     
   | ^^^^
76 |     try:
77 |         from system_diagnostic import SystemDiagnostic
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:80:1
   |
78 |         diagnostic = SystemDiagnostic()
79 |         results = diagnostic.run_full_diagnostic()
80 |         
   | ^^^^^^^^
81 |         # Check for critical issues
82 |         recommendations = diagnostic.generate_recommendations(results)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:84:1
   |
82 |         recommendations = diagnostic.generate_recommendations(results)
83 |         critical_issues = [r for r in recommendations if 'HIGH PRIORITY' in r or 'CRITICAL' in r]
84 |         
   | ^^^^^^^^
85 |         if critical_issues:
86 |             logging.info("CRITICAL ISSUES DETECTED:")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:89:1
   |
87 |             for issue in critical_issues:
88 |                 logging.info(f"  - {issue}")
89 |             
   | ^^^^^^^^^^^^
90 |             response = input("Continue startup despite critical issues? (y/N): ")
91 |             if response.lower() != 'y':
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:94:1
   |
92 |                 logging.info("Startup aborted due to critical issues")
93 |                 return False
94 |         
   | ^^^^^^^^
95 |         logging.info(f"Health check complete: {len(recommendations)} recommendations")
96 |         return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/optimized_startup.py:97:1
   |
95 |         logging.info(f"Health check complete: {len(recommendations)} recommendations")
96 |         return True
97 |         
   | ^^^^^^^^
98 |     except ImportError:
99 |         logging.info("System diagnostic not available, skipping health check")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:109:1
    |
107 |     """Clean up any duplicate processes."""
108 |     logging.info("Checking for duplicate processes...")
109 |     
    | ^^^^
110 |     try:
111 |         from process_manager import ProcessManager
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:113:1
    |
111 |         from process_manager import ProcessManager
112 |         manager = ProcessManager()
113 |         
    | ^^^^^^^^
114 |         duplicates = manager.find_duplicate_processes()
115 |         if duplicates:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:121:1
    |
119 |         else:
120 |             logging.info("No duplicate processes found")
121 |             
    | ^^^^^^^^^^^^
122 |     except ImportError:
123 |         logging.info("Process manager not available, skipping duplicate cleanup")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:131:1
    |
129 |     """Start performance and memory monitoring."""
130 |     logging.info("Starting performance monitoring...")
131 |     
    | ^^^^
132 |     try:
133 |         from performance_monitor import start_performance_monitoring
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/optimized_startup.py:133:9
    |
132 |       try:
133 | /         from performance_monitor import start_performance_monitoring
134 | |         from memory_optimizer import get_memory_optimizer
    | |_________________________________________________________^
135 |           
136 |           # Start performance monitoring
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:135:1
    |
133 |         from performance_monitor import start_performance_monitoring
134 |         from memory_optimizer import get_memory_optimizer
135 |         
    | ^^^^^^^^
136 |         # Start performance monitoring
137 |         start_performance_monitoring()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:138:1
    |
136 |         # Start performance monitoring
137 |         start_performance_monitoring()
138 |         
    | ^^^^^^^^
139 |         # Initialize memory optimizer
140 |         optimizer = get_memory_optimizer()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:143:1
    |
141 |         if optimizer:
142 |             logging.info("Memory optimization enabled")
143 |         
    | ^^^^^^^^
144 |         logging.info("Monitoring systems active")
145 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:146:1
    |
144 |         logging.info("Monitoring systems active")
145 |         return True
146 |         
    | ^^^^^^^^
147 |     except ImportError:
148 |         logging.info("Monitoring systems not available")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:158:1
    |
156 |     """Cleanup function called on exit."""
157 |     logging.info("Performing cleanup on exit...")
158 |     
    | ^^^^
159 |     try:
160 |         from memory_optimizer import emergency_memory_cleanup
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:174:1
    |
172 |     logging.info(str("=" * 40))
173 |     logging.info(f"Startup time: {datetime.now(timezone.utc).isoformat()}")
174 |     
    | ^^^^
175 |     # Register cleanup function
176 |     atexit.register(cleanup_on_exit)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:177:1
    |
175 |     # Register cleanup function
176 |     atexit.register(cleanup_on_exit)
177 |     
    | ^^^^
178 |     # Setup signal handlers
179 |     setup_signal_handlers()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:180:1
    |
178 |     # Setup signal handlers
179 |     setup_signal_handlers()
180 |     
    | ^^^^
181 |     # Optimize environment
182 |     setup_optimized_environment()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:183:1
    |
181 |     # Optimize environment
182 |     setup_optimized_environment()
183 |     
    | ^^^^
184 |     # System health check
185 |     if not check_system_health():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:187:1
    |
185 |     if not check_system_health():
186 |         return 1
187 |     
    | ^^^^
188 |     # Clean up duplicate processes
189 |     cleanup_duplicate_processes()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:190:1
    |
188 |     # Clean up duplicate processes
189 |     cleanup_duplicate_processes()
190 |     
    | ^^^^
191 |     # Start monitoring
192 |     monitoring_started = start_monitoring()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:193:1
    |
191 |     # Start monitoring
192 |     monitoring_started = start_monitoring()
193 |     
    | ^^^^
194 |     # Import and start the main trading application
195 |     try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:197:1
    |
195 |     try:
196 |         logging.info("Starting main trading application...")
197 |         
    | ^^^^^^^^
198 |         # Choose startup method based on available modules
199 |         if os.path.exists('ai_trading/main.py'):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:206:1
    |
204 |             logging.info("Using ai_trading.core.bot_engine module")
205 |             bot_engine.main()
206 |             
    | ^^^^^^^^^^^^
207 |     except KeyboardInterrupt:
208 |         logging.info("\nShutdown requested by user")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/optimized_startup.py:214:1
    |
212 |         logging.exception("Trading application error")
213 |         return 1
214 |     
    | ^^^^
215 |     return 0
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/optimized_startup.py:219:21
    |
218 | if __name__ == "__main__":
219 |     sys.exit(main())
    |                     ^
    |
help: Add trailing newline

E501 Line too long (112 > 100)
  --> scripts/patch_short_selling.py:21:101
   |
19 |         if i == 1799 and 'if side.lower() == "sell" and existing == 0:' in line:
20 |             # Replace the simple logic with enhanced short selling logic
21 |             lines[i+1] = '            # No existing position - check if this is a valid short selling request\n'
   |                                                                                                     ^^^^^^^^^^^^
22 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
23 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
   |

E501 Line too long (120 > 100)
  --> scripts/patch_short_selling.py:22:101
   |
20 |             # Replace the simple logic with enhanced short selling logic
21 |             lines[i+1] = '            # No existing position - check if this is a valid short selling request\n'
22 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
23 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
24 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
   |

E501 Line too long (101 > 100)
  --> scripts/patch_short_selling.py:23:101
   |
21 |             lines[i+1] = '            # No existing position - check if this is a valid short selling request\n'
22 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
23 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
   |                                                                                                     ^
24 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
25 |             lines[i+5] = '                else:\n'
   |

E501 Line too long (130 > 100)
  --> scripts/patch_short_selling.py:24:101
   |
22 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
23 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
24 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
25 |             lines[i+5] = '                else:\n'
26 |             lines[i+6] = '                    self.logger.info("SHORT_SELLING_REJECTED | symbol=%s qty=%d", symbol, remaining)\n'
   |

E501 Line too long (129 > 100)
  --> scripts/patch_short_selling.py:26:101
   |
24 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
25 |             lines[i+5] = '                else:\n'
26 |             lines[i+6] = '                    self.logger.info("SHORT_SELLING_REJECTED | symbol=%s qty=%d", symbol, remaining)\n'
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
27 |             lines[i+7] = '                    return None\n'
28 |             lines[i+8] = '            else:\n'
   |

E501 Line too long (111 > 100)
  --> scripts/patch_short_selling.py:29:101
   |
27 |             lines[i+7] = '                    return None\n'
28 |             lines[i+8] = '            else:\n'
29 |             lines[i+9] = '                self.logger.info("SKIP_NO_POSITION | no shares to sell, skipping")\n'
   |                                                                                                     ^^^^^^^^^^^
30 |             lines[i+10] = '                return None\n'
31 |             logging.info(f"Updated sync execute_order at line {i+1}")
   |

E501 Line too long (112 > 100)
  --> scripts/patch_short_selling.py:38:101
   |
36 |         if i == 2087 and 'if side.lower() == "sell" and existing == 0:' in line:
37 |             # Replace the simple logic with enhanced short selling logic
38 |             lines[i+1] = '            # No existing position - check if this is a valid short selling request\n'
   |                                                                                                     ^^^^^^^^^^^^
39 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
40 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
   |

E501 Line too long (120 > 100)
  --> scripts/patch_short_selling.py:39:101
   |
37 |             # Replace the simple logic with enhanced short selling logic
38 |             lines[i+1] = '            # No existing position - check if this is a valid short selling request\n'
39 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
40 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
41 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
   |

E501 Line too long (101 > 100)
  --> scripts/patch_short_selling.py:40:101
   |
38 |             lines[i+1] = '            # No existing position - check if this is a valid short selling request\n'
39 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
40 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
   |                                                                                                     ^
41 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
42 |             lines[i+5] = '                else:\n'
   |

E501 Line too long (130 > 100)
  --> scripts/patch_short_selling.py:41:101
   |
39 |             lines[i+2] = '            if hasattr(self.ctx, \'allow_short_selling\') and self.ctx.allow_short_selling:\n'
40 |             lines[i+3] = '                if self._validate_short_selling(api, symbol, remaining):\n'
41 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
42 |             lines[i+5] = '                else:\n'
43 |             lines[i+6] = '                    self.logger.info("SHORT_SELLING_REJECTED | symbol=%s qty=%d", symbol, remaining)\n'
   |

E501 Line too long (129 > 100)
  --> scripts/patch_short_selling.py:43:101
   |
41 |             lines[i+4] = '                    self.logger.info("SHORT_SELLING_INITIATED | symbol=%s qty=%d", symbol, remaining)\n'
42 |             lines[i+5] = '                else:\n'
43 |             lines[i+6] = '                    self.logger.info("SHORT_SELLING_REJECTED | symbol=%s qty=%d", symbol, remaining)\n'
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 |             lines[i+7] = '                    return None\n'
45 |             lines[i+8] = '            else:\n'
   |

E501 Line too long (111 > 100)
  --> scripts/patch_short_selling.py:46:101
   |
44 |             lines[i+7] = '                    return None\n'
45 |             lines[i+8] = '            else:\n'
46 |             lines[i+9] = '                self.logger.info("SKIP_NO_POSITION | no shares to sell, skipping")\n'
   |                                                                                                     ^^^^^^^^^^^
47 |             lines[i+10] = '                return None\n'
48 |             logging.info(f"Updated async execute_order_async at line {i+1}")
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/performance_demo.py:9:1
   |
 7 |   """
 8 |
 9 | / import os
10 | | import sys
11 | | from datetime import datetime, timezone
   | |_______________________________________^
12 |
13 |   def print_header(title):
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/performance_demo.py:28:1
   |
26 |     """Demonstrate system diagnostic capabilities."""
27 |     print_section("System Diagnostic")
28 |     
   | ^^^^
29 |     try:
30 |         from system_diagnostic import SystemDiagnostic
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_demo.py:31:1
   |
29 |     try:
30 |         from system_diagnostic import SystemDiagnostic
31 |         
   | ^^^^^^^^
32 |         diagnostic = SystemDiagnostic()
33 |         results = diagnostic.run_full_diagnostic()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_demo.py:34:1
   |
32 |         diagnostic = SystemDiagnostic()
33 |         results = diagnostic.run_full_diagnostic()
34 |         
   | ^^^^^^^^
35 |         logging.info(str(f"✓ System diagnostic completed in {results['diagnostic_runtime_seconds']:.2f}s"))
36 |         logging.info(str(f"  - Memory usage: {results['memory_analysis']['system_memory']['usage_percent']:.1f}%"))
   |
help: Remove whitespace from blank line

E501 Line too long (107 > 100)
  --> scripts/performance_demo.py:35:101
   |
33 |         results = diagnostic.run_full_diagnostic()
34 |         
35 |         logging.info(str(f"✓ System diagnostic completed in {results['diagnostic_runtime_seconds']:.2f}s"))
   |                                                                                                     ^^^^^^^
36 |         logging.info(str(f"  - Memory usage: {results['memory_analysis']['system_memory']['usage_percent']:.1f}%"))
37 |         logging.info(str(f"  - Swap usage: {results['memory_analysis']['system_memory']['swap_used_mb']:.1f}MB"))
   |

E501 Line too long (115 > 100)
  --> scripts/performance_demo.py:36:101
   |
35 |         logging.info(str(f"✓ System diagnostic completed in {results['diagnostic_runtime_seconds']:.2f}s"))
36 |         logging.info(str(f"  - Memory usage: {results['memory_analysis']['system_memory']['usage_percent']:.1f}%"))
   |                                                                                                     ^^^^^^^^^^^^^^^
37 |         logging.info(str(f"  - Swap usage: {results['memory_analysis']['system_memory']['swap_used_mb']:.1f}MB"))
38 |         logging.info(str(f"  - Total objects: {results['garbage_collection']['object_counts']['total_objects']:,}"))
   |

E501 Line too long (113 > 100)
  --> scripts/performance_demo.py:37:101
   |
35 |         logging.info(str(f"✓ System diagnostic completed in {results['diagnostic_runtime_seconds']:.2f}s"))
36 |         logging.info(str(f"  - Memory usage: {results['memory_analysis']['system_memory']['usage_percent']:.1f}%"))
37 |         logging.info(str(f"  - Swap usage: {results['memory_analysis']['system_memory']['swap_used_mb']:.1f}MB"))
   |                                                                                                     ^^^^^^^^^^^^^
38 |         logging.info(str(f"  - Total objects: {results['garbage_collection']['object_counts']['total_objects']:,}"))
39 |         logging.info(str(f"  - Open file descriptors: {results['file_handles']['open_file_descriptors']}"))
   |

E501 Line too long (116 > 100)
  --> scripts/performance_demo.py:38:101
   |
36 |         logging.info(str(f"  - Memory usage: {results['memory_analysis']['system_memory']['usage_percent']:.1f}%"))
37 |         logging.info(str(f"  - Swap usage: {results['memory_analysis']['system_memory']['swap_used_mb']:.1f}MB"))
38 |         logging.info(str(f"  - Total objects: {results['garbage_collection']['object_counts']['total_objects']:,}"))
   |                                                                                                     ^^^^^^^^^^^^^^^^
39 |         logging.info(str(f"  - Open file descriptors: {results['file_handles']['open_file_descriptors']}"))
40 |         logging.info(str(f"  - Active threads: {results['thread_analysis']['active_threads']}"))
   |

E501 Line too long (107 > 100)
  --> scripts/performance_demo.py:39:101
   |
37 |         logging.info(str(f"  - Swap usage: {results['memory_analysis']['system_memory']['swap_used_mb']:.1f}MB"))
38 |         logging.info(str(f"  - Total objects: {results['garbage_collection']['object_counts']['total_objects']:,}"))
39 |         logging.info(str(f"  - Open file descriptors: {results['file_handles']['open_file_descriptors']}"))
   |                                                                                                     ^^^^^^^
40 |         logging.info(str(f"  - Active threads: {results['thread_analysis']['active_threads']}"))
   |

W293 [*] Blank line contains whitespace
  --> scripts/performance_demo.py:41:1
   |
39 |         logging.info(str(f"  - Open file descriptors: {results['file_handles']['open_file_descriptors']}"))
40 |         logging.info(str(f"  - Active threads: {results['thread_analysis']['active_threads']}"))
41 |         
   | ^^^^^^^^
42 |         # Generate recommendations
43 |         recommendations = diagnostic.generate_recommendations(results)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_demo.py:50:1
   |
48 |         else:
49 |             logging.info("  - No performance recommendations needed ✓")
50 |             
   | ^^^^^^^^^^^^
51 |     except Exception as e:
52 |         logging.info(f"✗ System diagnostic error: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_demo.py:57:1
   |
55 |     """Demonstrate memory optimization capabilities."""
56 |     print_section("Memory Optimizer")
57 |     
   | ^^^^
58 |     try:
59 |         from memory_optimizer import MemoryOptimizer
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_demo.py:60:1
   |
58 |     try:
59 |         from memory_optimizer import MemoryOptimizer
60 |         
   | ^^^^^^^^
61 |         # Create optimizer instance
62 |         optimizer = MemoryOptimizer(enable_monitoring=False)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_demo.py:63:1
   |
61 |         # Create optimizer instance
62 |         optimizer = MemoryOptimizer(enable_monitoring=False)
63 |         
   | ^^^^^^^^
64 |         # Get initial memory stats
65 |         initial_memory = optimizer.get_memory_usage()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_demo.py:69:1
   |
67 |         logging.info(str(f"  - Total objects: {initial_memory['total_objects']:,}"))
68 |         logging.info(str(f"  - GC thresholds: {initial_memory['gc_threshold']}"))
69 |         
   | ^^^^^^^^
70 |         # Force garbage collection
71 |         gc_result = optimizer.force_garbage_collection()
   |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
  --> scripts/performance_demo.py:72:101
   |
70 |         # Force garbage collection
71 |         gc_result = optimizer.force_garbage_collection()
72 |         logging.info(str(f"✓ Garbage collection: {gc_result['objects_collected']} objects collected"))
   |                                                                                                     ^^
73 |         logging.info(str(f"  - Collection time: {gc_result['collection_time_ms']:.2f}ms"))
   |

W293 [*] Blank line contains whitespace
  --> scripts/performance_demo.py:74:1
   |
72 |         logging.info(str(f"✓ Garbage collection: {gc_result['objects_collected']} objects collected"))
73 |         logging.info(str(f"  - Collection time: {gc_result['collection_time_ms']:.2f}ms"))
74 |         
   | ^^^^^^^^
75 |         # Show memory after GC
76 |         final_memory = optimizer.get_memory_usage()
   |
help: Remove whitespace from blank line

E501 Line too long (121 > 100)
  --> scripts/performance_demo.py:78:101
   |
76 |         final_memory = optimizer.get_memory_usage()
77 |         logging.info(str(f"✓ Final memory: {final_memory['rss_mb']:.2f}MB"))
78 |         logging.info(str(f"  - Objects reduced by: {initial_memory['total_objects'] - final_memory['total_objects']:,}"))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
79 |         
80 |         # Show top object types
   |

W293 [*] Blank line contains whitespace
  --> scripts/performance_demo.py:79:1
   |
77 |         logging.info(str(f"✓ Final memory: {final_memory['rss_mb']:.2f}MB"))
78 |         logging.info(str(f"  - Objects reduced by: {initial_memory['total_objects'] - final_memory['total_objects']:,}"))
79 |         
   | ^^^^^^^^
80 |         # Show top object types
81 |         top_objects = final_memory['top_object_types']
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_demo.py:85:1
   |
83 |         for obj_type, count in list(top_objects.items())[:3]:
84 |             logging.info(f"    • {obj_type}: {count:,}")
85 |             
   | ^^^^^^^^^^^^
86 |     except Exception as e:
87 |         logging.info(f"✗ Memory optimizer error: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_demo.py:92:1
   |
90 |     """Demonstrate performance monitoring capabilities."""
91 |     print_section("Performance Monitor")
92 |     
   | ^^^^
93 |     try:
94 |         from performance_monitor import ResourceMonitor
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_demo.py:95:1
   |
93 |     try:
94 |         from performance_monitor import ResourceMonitor
95 |         
   | ^^^^^^^^
96 |         monitor = ResourceMonitor(monitoring_interval=5)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_demo.py:97:1
   |
96 |         monitor = ResourceMonitor(monitoring_interval=5)
97 |         
   | ^^^^^^^^
98 |         # Collect system metrics
99 |         metrics = monitor.get_system_metrics()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:101:1
    |
 99 |         metrics = monitor.get_system_metrics()
100 |         logging.info(str(f"✓ Metrics collection time: {metrics['collection_time_ms']:.1f}ms"))
101 |         
    | ^^^^^^^^
102 |         # Show memory metrics
103 |         if 'memory' in metrics:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:108:1
    |
106 |             logging.info(f"  - Available memory: {mem.get('available_mb', 0):.1f}MB")
107 |             logging.info(f"  - Swap usage: {mem.get('swap_used_mb', 0):.1f}MB")
108 |         
    | ^^^^^^^^
109 |         # Show CPU metrics
110 |         if 'cpu' in metrics:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:114:1
    |
112 |             logging.info(f"  - CPU usage: {cpu.get('usage_percent', 0):.1f}%")
113 |             logging.info(f"  - Load average: {cpu.get('load_1min', 0):.2f}")
114 |         
    | ^^^^^^^^
115 |         # Show process metrics
116 |         if 'process' in metrics:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:122:1
    |
120 |             logging.info(f"  - Thread count: {proc.get('thread_count', 0)}")
121 |             logging.info(f"  - Python processes: {proc.get('python_processes', 0)}")
122 |         
    | ^^^^^^^^
123 |         # Check for alerts
124 |         alerts = monitor.check_alert_conditions(metrics)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:131:1
    |
129 |         else:
130 |             logging.info("  - No alerts (system healthy) ✓")
131 |             
    | ^^^^^^^^^^^^
132 |     except Exception as e:
133 |         logging.info(f"✗ Performance monitor error: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:138:1
    |
136 |     """Demonstrate process management capabilities."""
137 |     print_section("Process Manager")
138 |     
    | ^^^^
139 |     try:
140 |         from process_manager import ProcessManager
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:141:1
    |
139 |     try:
140 |         from process_manager import ProcessManager
141 |         
    | ^^^^^^^^
142 |         manager = ProcessManager()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:143:1
    |
142 |         manager = ProcessManager()
143 |         
    | ^^^^^^^^
144 |         # Find Python processes
145 |         processes = manager.find_python_processes()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:147:1
    |
145 |         processes = manager.find_python_processes()
146 |         logging.info(f"✓ Found {len(processes)} trading-related Python processes")
147 |         
    | ^^^^^^^^
148 |         if processes:
149 |             total_memory = sum(p['memory_mb'] for p in processes)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:151:1
    |
149 |             total_memory = sum(p['memory_mb'] for p in processes)
150 |             logging.info(f"  - Total memory usage: {total_memory:.1f}MB")
151 |             
    | ^^^^^^^^^^^^
152 |             max_memory_proc = max(processes, key=lambda p: p['memory_mb'])
153 |             logging.info(str(f"  - Highest memory process: {max_memory_proc['memory_mb']:.1f}MB"))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:155:1
    |
153 |             logging.info(str(f"  - Highest memory process: {max_memory_proc['memory_mb']:.1f}MB"))
154 |             logging.info(str(f"    Command: {max_memory_proc['command'][:60]}..."))
155 |         
    | ^^^^^^^^
156 |         # Check for duplicates
157 |         duplicates = manager.find_duplicate_processes()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:163:1
    |
161 |         else:
162 |             logging.info("  - No duplicate processes ✓")
163 |         
    | ^^^^^^^^
164 |         # Check service status
165 |         service_status = manager.check_service_status()
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> scripts/performance_demo.py:166:73
    |
164 |         # Check service status
165 |         service_status = manager.check_service_status()
166 |         failed_services = [name for name, info in service_status.items() 
    |                                                                         ^
167 |                           if not info.get('active', False)]
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:168:1
    |
166 |         failed_services = [name for name, info in service_status.items() 
167 |                           if not info.get('active', False)]
168 |         
    | ^^^^^^^^
169 |         if failed_services:
170 |             logging.info(f"  - Failed services: {len(failed_services)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:175:1
    |
173 |         else:
174 |             logging.info("  - All services healthy ✓")
175 |             
    | ^^^^^^^^^^^^
176 |     except Exception as e:
177 |         logging.info(f"✗ Process manager error: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:182:1
    |
180 |     """Demonstrate integration with trading code."""
181 |     print_section("Trading Code Integration")
182 |     
    | ^^^^
183 |     try:
184 |         # Test memory optimization integration in bot_engine
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:188:1
    |
186 |         with open('bot_engine.py', 'r') as f:
187 |             content = f.read()
188 |             
    | ^^^^^^^^^^^^
189 |         if 'MEMORY_OPTIMIZATION_AVAILABLE' in content:
190 |             logging.info("  ✓ Memory optimization integrated")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:195:1
    |
193 |         if 'optimize_memory()' in content:
194 |             logging.info("  ✓ Periodic memory cleanup added")
195 |         
    | ^^^^^^^^
196 |         # Test performance monitoring integration in ai_trading/main.py
197 |         logging.info("Checking ai_trading/main.py integration:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:200:1
    |
198 |         with open('ai_trading/main.py', 'r') as f:
199 |             content = f.read()
200 |             
    | ^^^^^^^^^^^^
201 |         if 'PERFORMANCE_MONITORING_AVAILABLE' in content:
202 |             logging.info("  ✓ Performance monitoring integrated")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:207:1
    |
205 |         if 'memory_check_interval' in content:
206 |             logging.info("  ✓ Periodic memory checks added")
207 |             
    | ^^^^^^^^^^^^
208 |     except Exception as e:
209 |         logging.info(f"✗ Integration check error: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:214:1
    |
212 |     """Demonstrate startup optimization."""
213 |     print_section("Startup Optimization")
214 |     
    | ^^^^
215 |     try:
216 |         logging.info("Optimized startup script features:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:224:1
    |
222 |         logging.info("  ✓ Automatic monitoring activation")
223 |         logging.info("  ✓ Emergency cleanup on exit")
224 |         
    | ^^^^^^^^
225 |         # Check if startup script exists
226 |         if os.path.exists('optimized_startup.py'):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:230:1
    |
228 |         else:
229 |             logging.info("  ✗ Startup script not found")
230 |             
    | ^^^^^^^^^^^^
231 |     except Exception as e:
232 |         logging.info(f"✗ Startup optimization error: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:239:1
    |
237 |     logging.info(f"Demo time: {datetime.now(timezone.utc).isoformat()}")
238 |     logging.info(f"Python version: {sys.version}")
239 |     
    | ^^^^
240 |     # Run all demonstrations
241 |     demo_system_diagnostic()
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> scripts/performance_demo.py:242:28
    |
240 |     # Run all demonstrations
241 |     demo_system_diagnostic()
242 |     demo_memory_optimizer() 
    |                            ^
243 |     demo_performance_monitor()
244 |     demo_process_manager()
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:247:1
    |
245 |     demo_integration()
246 |     demo_startup_optimization()
247 |     
    | ^^^^
248 |     print_header("Summary of Performance Improvements")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:249:1
    |
248 |     print_header("Summary of Performance Improvements")
249 |     
    | ^^^^
250 |     improvements = [
251 |         "System diagnostic tool for comprehensive health monitoring",
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> scripts/performance_demo.py:252:66
    |
250 |     improvements = [
251 |         "System diagnostic tool for comprehensive health monitoring",
252 |         "Memory optimizer with aggressive GC and leak detection", 
    |                                                                  ^
253 |         "Real-time performance monitoring with alerts",
254 |         "Process manager for duplicate cleanup and service monitoring",
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:262:1
    |
260 |         "Environment optimization for maximum performance"
261 |     ]
262 |     
    | ^^^^
263 |     logging.info("Implemented optimizations:")
264 |     for i, improvement in enumerate(improvements, 1):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:266:1
    |
264 |     for i, improvement in enumerate(improvements, 1):
265 |         logging.info(f"  {i:2d}. {improvement}")
266 |     
    | ^^^^
267 |     logging.info("\nRecommended usage:")
268 |     logging.info(str("  • Use 'python optimized_startup.py' for production"))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_demo.py:272:1
    |
270 |     logging.info(str("  • Use 'python process_manager.py' for process cleanup"))
271 |     logging.info("  • Monitor performance with built-in monitoring system")
272 |     
    | ^^^^
273 |     logging.info(str(f"\n{'='*60}"))
274 |     logging.info("  Performance optimization implementation complete!")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/performance_demo.py:278:11
    |
277 | if __name__ == "__main__":
278 |     main()
    |           ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/performance_monitor.py:8:1
   |
 6 |   """
 7 |
 8 | / import os
 9 | | import sys
10 | | import time
11 | | import threading
12 | | import subprocess
13 | | from datetime import datetime, timezone
14 | | from typing import Dict, List, Callable
15 | | import logging
16 | | from collections import deque
   | |_____________________________^
17 |
18 |   # AI-AGENT-REF: Performance monitoring and alerting system
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:22:1
   |
20 | class ResourceMonitor:
21 |     """Monitor system resources and performance metrics."""
22 |     
   | ^^^^
23 |     def __init__(self, monitoring_interval: int = 30):
24 |         self.monitoring_interval = monitoring_interval
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:32:1
   |
30 |         self.alert_thresholds = self._default_thresholds()
31 |         self.alert_callbacks = []
32 |         
   | ^^^^^^^^
33 |     def _setup_logger(self) -> logging.Logger:
34 |         """Setup performance monitor logger."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:37:1
   |
35 |         logger = logging.getLogger('performance_monitor')
36 |         logger.setLevel(logging.INFO)
37 |         
   | ^^^^^^^^
38 |         if not logger.handlers:
39 |             handler = logging.StreamHandler()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:45:1
   |
43 |             handler.setFormatter(formatter)
44 |             logger.addHandler(handler)
45 |         
   | ^^^^^^^^
46 |         return logger
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:47:1
   |
46 |         return logger
47 |     
   | ^^^^
48 |     def _default_thresholds(self) -> Dict:
49 |         """Default alert thresholds."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:59:1
   |
57 |             'response_time_ms': 5000
58 |         }
59 |     
   | ^^^^
60 |     def get_system_metrics(self) -> Dict:
61 |         """Collect comprehensive system metrics."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:66:1
   |
64 |             'collection_time_ms': 0
65 |         }
66 |         
   | ^^^^^^^^
67 |         start_time = time.time()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:68:1
   |
67 |         start_time = time.time()
68 |         
   | ^^^^^^^^
69 |         try:
70 |             # Memory metrics
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:72:1
   |
70 |             # Memory metrics
71 |             metrics['memory'] = self._get_memory_metrics()
72 |             
   | ^^^^^^^^^^^^
73 |             # CPU metrics  
74 |             metrics['cpu'] = self._get_cpu_metrics()
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> scripts/performance_monitor.py:73:26
   |
71 |             metrics['memory'] = self._get_memory_metrics()
72 |             
73 |             # CPU metrics  
   |                          ^^
74 |             metrics['cpu'] = self._get_cpu_metrics()
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:75:1
   |
73 |             # CPU metrics  
74 |             metrics['cpu'] = self._get_cpu_metrics()
75 |             
   | ^^^^^^^^^^^^
76 |             # Disk metrics
77 |             metrics['disk'] = self._get_disk_metrics()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:78:1
   |
76 |             # Disk metrics
77 |             metrics['disk'] = self._get_disk_metrics()
78 |             
   | ^^^^^^^^^^^^
79 |             # Process metrics
80 |             metrics['process'] = self._get_process_metrics()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:81:1
   |
79 |             # Process metrics
80 |             metrics['process'] = self._get_process_metrics()
81 |             
   | ^^^^^^^^^^^^
82 |             # Network metrics (basic)
83 |             metrics['network'] = self._get_network_metrics()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:84:1
   |
82 |             # Network metrics (basic)
83 |             metrics['network'] = self._get_network_metrics()
84 |             
   | ^^^^^^^^^^^^
85 |             # Python-specific metrics
86 |             metrics['python'] = self._get_python_metrics()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:87:1
   |
85 |             # Python-specific metrics
86 |             metrics['python'] = self._get_python_metrics()
87 |             
   | ^^^^^^^^^^^^
88 |         except Exception as e:
89 |             self.logger.error(f"Error collecting system metrics: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:91:1
   |
89 |             self.logger.error(f"Error collecting system metrics: {e}")
90 |             metrics['error'] = str(e)
91 |         
   | ^^^^^^^^
92 |         metrics['collection_time_ms'] = (time.time() - start_time) * 1000
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:93:1
   |
92 |         metrics['collection_time_ms'] = (time.time() - start_time) * 1000
93 |         
   | ^^^^^^^^
94 |         return metrics
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/performance_monitor.py:95:1
   |
94 |         return metrics
95 |     
   | ^^^^
96 |     def _get_memory_metrics(self) -> Dict:
97 |         """Get memory-related metrics."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:99:1
    |
 97 |         """Get memory-related metrics."""
 98 |         memory_metrics = {}
 99 |         
    | ^^^^^^^^
100 |         try:
101 |             # Read /proc/meminfo
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:107:1
    |
105 |                     key, value = line.split(':', 1)
106 |                     meminfo[key.strip()] = int(value.strip().split()[0])
107 |                 
    | ^^^^^^^^^^^^^^^^
108 |                 total_mb = meminfo['MemTotal'] / 1024
109 |                 available_mb = meminfo['MemAvailable'] / 1024
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:113:1
    |
111 |                 cached_mb = meminfo['Cached'] / 1024
112 |                 buffers_mb = meminfo['Buffers'] / 1024
113 |                 
    | ^^^^^^^^^^^^^^^^
114 |                 swap_total_mb = meminfo['SwapTotal'] / 1024
115 |                 swap_free_mb = meminfo['SwapFree'] / 1024
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:117:1
    |
115 |                 swap_free_mb = meminfo['SwapFree'] / 1024
116 |                 swap_used_mb = swap_total_mb - swap_free_mb
117 |                 
    | ^^^^^^^^^^^^^^^^
118 |                 memory_metrics = {
119 |                     'total_mb': total_mb,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:130:1
    |
128 |                     'swap_usage_percent': (swap_used_mb / max(swap_total_mb, 1)) * 100
129 |                 }
130 |                 
    | ^^^^^^^^^^^^^^^^
131 |         except Exception as e:
132 |             memory_metrics['error'] = str(e)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:133:1
    |
131 |         except Exception as e:
132 |             memory_metrics['error'] = str(e)
133 |         
    | ^^^^^^^^
134 |         return memory_metrics
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:135:1
    |
134 |         return memory_metrics
135 |     
    | ^^^^
136 |     def _get_cpu_metrics(self) -> Dict:
137 |         """Get CPU-related metrics."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:139:1
    |
137 |         """Get CPU-related metrics."""
138 |         cpu_metrics = {}
139 |         
    | ^^^^^^^^
140 |         try:
141 |             # Read /proc/loadavg
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:147:1
    |
145 |                 cpu_metrics['load_5min'] = float(loadavg[1])
146 |                 cpu_metrics['load_15min'] = float(loadavg[2])
147 |             
    | ^^^^^^^^^^^^
148 |             # Get CPU count
149 |             cpu_metrics['cpu_count'] = os.cpu_count() or 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:150:1
    |
148 |             # Get CPU count
149 |             cpu_metrics['cpu_count'] = os.cpu_count() or 1
150 |             
    | ^^^^^^^^^^^^
151 |             # Calculate CPU usage percentage (simplified)
152 |             cpu_metrics['usage_percent'] = min(cpu_metrics['load_1min'] / cpu_metrics['cpu_count'] * 100, 100)
    |
help: Remove whitespace from blank line

E501 Line too long (110 > 100)
   --> scripts/performance_monitor.py:152:101
    |
151 |             # Calculate CPU usage percentage (simplified)
152 |             cpu_metrics['usage_percent'] = min(cpu_metrics['load_1min'] / cpu_metrics['cpu_count'] * 100, 100)
    |                                                                                                     ^^^^^^^^^^
153 |             
154 |         except Exception as e:
    |

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:153:1
    |
151 |             # Calculate CPU usage percentage (simplified)
152 |             cpu_metrics['usage_percent'] = min(cpu_metrics['load_1min'] / cpu_metrics['cpu_count'] * 100, 100)
153 |             
    | ^^^^^^^^^^^^
154 |         except Exception as e:
155 |             cpu_metrics['error'] = str(e)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:156:1
    |
154 |         except Exception as e:
155 |             cpu_metrics['error'] = str(e)
156 |         
    | ^^^^^^^^
157 |         return cpu_metrics
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:158:1
    |
157 |         return cpu_metrics
158 |     
    | ^^^^
159 |     def _get_disk_metrics(self) -> Dict:
160 |         """Get disk usage metrics."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:162:1
    |
160 |         """Get disk usage metrics."""
161 |         disk_metrics = {}
162 |         
    | ^^^^^^^^
163 |         try:
164 |             import shutil
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:165:1
    |
163 |         try:
164 |             import shutil
165 |             
    | ^^^^^^^^^^^^
166 |             # Get disk usage for current directory
167 |             total, used, free = shutil.disk_usage('.')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:168:1
    |
166 |             # Get disk usage for current directory
167 |             total, used, free = shutil.disk_usage('.')
168 |             
    | ^^^^^^^^^^^^
169 |             disk_metrics = {
170 |                 'total_gb': total / (1024**3),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:175:1
    |
173 |                 'usage_percent': (used / total) * 100
174 |             }
175 |             
    | ^^^^^^^^^^^^
176 |             # Check for large files that might indicate issues
177 |             large_files = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:181:1
    |
179 |                 # Skip version control directories
180 |                 dirs[:] = [d for d in dirs if not d.startswith('.git')]
181 |                 
    | ^^^^^^^^^^^^^^^^
182 |                 for file in files[:20]:  # Limit to prevent long scans
183 |                     try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:193:1
    |
191 |                     except OSError:
192 |                         continue
193 |             
    | ^^^^^^^^^^^^
194 |             disk_metrics['large_files_count'] = len(large_files)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:195:1
    |
194 |             disk_metrics['large_files_count'] = len(large_files)
195 |             
    | ^^^^^^^^^^^^
196 |         except Exception as e:
197 |             disk_metrics['error'] = str(e)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:198:1
    |
196 |         except Exception as e:
197 |             disk_metrics['error'] = str(e)
198 |         
    | ^^^^^^^^
199 |         return disk_metrics
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:200:1
    |
199 |         return disk_metrics
200 |     
    | ^^^^
201 |     def _get_process_metrics(self) -> Dict:
202 |         """Get process-related metrics."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:204:1
    |
202 |         """Get process-related metrics."""
203 |         process_metrics = {}
204 |         
    | ^^^^^^^^
205 |         try:
206 |             # Get current process info
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:208:1
    |
206 |             # Get current process info
207 |             pid = os.getpid()
208 |             
    | ^^^^^^^^^^^^
209 |             # Process memory info
210 |             try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:220:1
    |
218 |             except ImportError:
219 |                 process_metrics['memory_mb'] = 0
220 |             
    | ^^^^^^^^^^^^
221 |             # File descriptor count
222 |             proc_fd = f'/proc/{pid}/fd'
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:225:1
    |
223 |             if os.path.exists(proc_fd):
224 |                 process_metrics['file_descriptors'] = len(os.listdir(proc_fd))
225 |             
    | ^^^^^^^^^^^^
226 |             # Thread count
227 |             import threading
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:229:1
    |
227 |             import threading
228 |             process_metrics['thread_count'] = threading.active_count()
229 |             
    | ^^^^^^^^^^^^
230 |             # Trading-bot specific process count (improved logic)
231 |             try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:236:1
    |
234 |                 logger.warning(f"Error counting trading bot processes: {e}")
235 |                 process_metrics['python_processes'] = 1
236 |             
    | ^^^^^^^^^^^^
237 |         except Exception as e:
238 |             process_metrics['error'] = str(e)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:239:1
    |
237 |         except Exception as e:
238 |             process_metrics['error'] = str(e)
239 |         
    | ^^^^^^^^
240 |         return process_metrics
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:241:1
    |
240 |         return process_metrics
241 |     
    | ^^^^
242 |     def _count_trading_bot_processes(self) -> int:
243 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/performance_monitor.py:245:1
    |
243 |         """
244 |         Count trading-bot specific processes, filtering out temporary/diagnostic processes.
245 |         
    | ^^^^^^^^
246 |         This method addresses false positive alerts from temporary Python processes
247 |         by focusing on long-running trading-related processes only.
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:250:1
    |
248 |         """
249 |         trading_bot_count = 0
250 |         
    | ^^^^^^^^
251 |         try:
252 |             # Get all Python processes with full command line details
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> scripts/performance_monitor.py:254:31
    |
252 |             # Get all Python processes with full command line details
253 |             result = subprocess.run(
254 |                 ['ps', 'aux'], 
    |                               ^
255 |                 capture_output=True, 
256 |                 text=True, 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> scripts/performance_monitor.py:255:37
    |
253 |             result = subprocess.run(
254 |                 ['ps', 'aux'], 
255 |                 capture_output=True, 
    |                                     ^
256 |                 text=True, 
257 |                 timeout=10,
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> scripts/performance_monitor.py:256:27
    |
254 |                 ['ps', 'aux'], 
255 |                 capture_output=True, 
256 |                 text=True, 
    |                           ^
257 |                 timeout=10,
258 |                 check=True
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:260:1
    |
258 |                 check=True
259 |             )
260 |             
    | ^^^^^^^^^^^^
261 |             if result.returncode != 0:
262 |                 # Fallback to simpler approach if ps fails
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:264:1
    |
262 |                 # Fallback to simpler approach if ps fails
263 |                 return self._count_python_processes_fallback()
264 |             
    | ^^^^^^^^^^^^
265 |             lines = result.stdout.strip().split('\n')[1:]  # Skip header
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:266:1
    |
265 |             lines = result.stdout.strip().split('\n')[1:]  # Skip header
266 |             
    | ^^^^^^^^^^^^
267 |             for line in lines:
268 |                 if not line.strip():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:270:1
    |
268 |                 if not line.strip():
269 |                     continue
270 |                     
    | ^^^^^^^^^^^^^^^^^^^^
271 |                 parts = line.split(None, 10)  # Split into at most 11 parts
272 |                 if len(parts) < 11:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:274:1
    |
272 |                 if len(parts) < 11:
273 |                     continue
274 |                     
    | ^^^^^^^^^^^^^^^^^^^^
275 |                 # Extract process info
276 |                 user, pid, cpu, mem, vsz, rss, tty, stat, start, time, command = parts
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:277:1
    |
275 |                 # Extract process info
276 |                 user, pid, cpu, mem, vsz, rss, tty, stat, start, time, command = parts
277 |                 
    | ^^^^^^^^^^^^^^^^
278 |                 # Only count Python processes
279 |                 if 'python' not in command.lower():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:281:1
    |
279 |                 if 'python' not in command.lower():
280 |                     continue
281 |                 
    | ^^^^^^^^^^^^^^^^
282 |                 # Filter criteria for trading bot processes
283 |                 is_trading_bot = False
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:284:1
    |
282 |                 # Filter criteria for trading bot processes
283 |                 is_trading_bot = False
284 |                 
    | ^^^^^^^^^^^^^^^^
285 |                 # Check for trading bot specific indicators
286 |                 trading_indicators = [
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:291:1
    |
289 |                     'performance_monitor.py', 'retrain.py'
290 |                 ]
291 |                 
    | ^^^^^^^^^^^^^^^^
292 |                 for indicator in trading_indicators:
293 |                     if indicator in command:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:296:1
    |
294 |                         is_trading_bot = True
295 |                         break
296 |                 
    | ^^^^^^^^^^^^^^^^
297 |                 # Skip temporary/diagnostic processes
298 |                 temp_indicators = [
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:302:1
    |
300 |                     'test_', 'pytest', 'coverage', 'pip install'
301 |                 ]
302 |                 
    | ^^^^^^^^^^^^^^^^
303 |                 is_temporary = any(temp in command for temp in temp_indicators)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:304:1
    |
303 |                 is_temporary = any(temp in command for temp in temp_indicators)
304 |                 
    | ^^^^^^^^^^^^^^^^
305 |                 if is_trading_bot and not is_temporary:
306 |                     # Additional check: process should be running for some time
    |
help: Remove whitespace from blank line

E501 Line too long (124 > 100)
   --> scripts/performance_monitor.py:319:101
    |
317 |                                     # For now, just count it as valid if we can read the stat
318 |                                     trading_bot_count += 1
319 |                                     self.logger.debug(f"Counted trading bot process: PID {pid}, command: {command[:80]}...")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
320 |                         else:
321 |                             # If we can't check /proc, but other criteria match, count it
    |

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:323:1
    |
321 |                             # If we can't check /proc, but other criteria match, count it
322 |                             trading_bot_count += 1
323 |                             
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
324 |                     except (ValueError, OSError, IOError):
325 |                         # If we can't validate the process, but it matches criteria, count it
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:328:1
    |
326 |                         if is_trading_bot and not is_temporary:
327 |                             trading_bot_count += 1
328 |                             
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
329 |         except (subprocess.SubprocessError, subprocess.TimeoutExpired, subprocess.CalledProcessError) as e:
330 |             self.logger.warning(f"Error getting process list: {e}")
    |
help: Remove whitespace from blank line

E501 Line too long (107 > 100)
   --> scripts/performance_monitor.py:329:101
    |
327 |                             trading_bot_count += 1
328 |                             
329 |         except (subprocess.SubprocessError, subprocess.TimeoutExpired, subprocess.CalledProcessError) as e:
    |                                                                                                     ^^^^^^^
330 |             self.logger.warning(f"Error getting process list: {e}")
331 |             return self._count_python_processes_fallback()
    |

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:335:1
    |
333 |             self.logger.error(f"Unexpected error counting trading bot processes: {e}")
334 |             return self._count_python_processes_fallback()
335 |         
    | ^^^^^^^^
336 |         # Ensure we return at least 1 if we're running (this process)
337 |         return max(trading_bot_count, 1)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:338:1
    |
336 |         # Ensure we return at least 1 if we're running (this process)
337 |         return max(trading_bot_count, 1)
338 |     
    | ^^^^
339 |     def _count_python_processes_fallback(self) -> int:
340 |         """Fallback method for counting Python processes using simple pgrep."""
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> scripts/performance_monitor.py:342:63
    |
340 |         """Fallback method for counting Python processes using simple pgrep."""
341 |         try:
342 |             result = subprocess.run(['pgrep', '-f', 'python'], 
    |                                                               ^
343 |                                   capture_output=True, text=True, timeout=5, check=True)
344 |             python_pids = result.stdout.strip().split('\n') if result.stdout.strip() else []
    |
help: Remove trailing whitespace

E501 Line too long (102 > 100)
   --> scripts/performance_monitor.py:346:101
    |
344 |             python_pids = result.stdout.strip().split('\n') if result.stdout.strip() else []
345 |             return len([p for p in python_pids if p])
346 |         except (subprocess.SubprocessError, subprocess.TimeoutExpired, subprocess.CalledProcessError):
    |                                                                                                     ^^
347 |             return 1  # Assume at least this process is running
    |

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:348:1
    |
346 |         except (subprocess.SubprocessError, subprocess.TimeoutExpired, subprocess.CalledProcessError):
347 |             return 1  # Assume at least this process is running
348 |     
    | ^^^^
349 |     def _get_network_metrics(self) -> Dict:
350 |         """Get basic network metrics."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:352:1
    |
350 |         """Get basic network metrics."""
351 |         network_metrics = {}
352 |         
    | ^^^^^^^^
353 |         try:
354 |             # Check for established connections
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:361:1
    |
359 |                 established = sum(1 for line in lines if 'ESTABLISHED' in line)
360 |                 network_metrics['established_connections'] = established
361 |             
    | ^^^^^^^^^^^^
362 |         except (subprocess.SubprocessError, subprocess.CalledProcessError):
363 |             network_metrics['established_connections'] = 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:366:1
    |
364 |         except Exception as e:
365 |             network_metrics['error'] = str(e)
366 |         
    | ^^^^^^^^
367 |         return network_metrics
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:368:1
    |
367 |         return network_metrics
368 |     
    | ^^^^
369 |     def _get_python_metrics(self) -> Dict:
370 |         """Get Python-specific metrics."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:372:1
    |
370 |         """Get Python-specific metrics."""
371 |         python_metrics = {}
372 |         
    | ^^^^^^^^
373 |         try:
374 |             import gc
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:375:1
    |
373 |         try:
374 |             import gc
375 |             
    | ^^^^^^^^^^^^
376 |             python_metrics['loaded_modules'] = len(sys.modules)
377 |             python_metrics['gc_counts'] = gc.get_count()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:380:1
    |
378 |             python_metrics['gc_thresholds'] = gc.get_threshold()
379 |             python_metrics['total_objects'] = len(gc.get_objects())
380 |             
    | ^^^^^^^^^^^^
381 |             # Check for AI trading specific modules
382 |             trading_modules = [name for name in sys.modules.keys() 
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> scripts/performance_monitor.py:382:67
    |
381 |             # Check for AI trading specific modules
382 |             trading_modules = [name for name in sys.modules.keys() 
    |                                                                   ^
383 |                              if any(keyword in name.lower() for keyword in 
384 |                                   ['trading', 'alpaca', 'ai_trading'])]
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> scripts/performance_monitor.py:383:75
    |
381 |             # Check for AI trading specific modules
382 |             trading_modules = [name for name in sys.modules.keys() 
383 |                              if any(keyword in name.lower() for keyword in 
    |                                                                           ^
384 |                                   ['trading', 'alpaca', 'ai_trading'])]
385 |             python_metrics['trading_modules_loaded'] = len(trading_modules)
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:386:1
    |
384 |                                   ['trading', 'alpaca', 'ai_trading'])]
385 |             python_metrics['trading_modules_loaded'] = len(trading_modules)
386 |             
    | ^^^^^^^^^^^^
387 |         except Exception as e:
388 |             python_metrics['error'] = str(e)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:389:1
    |
387 |         except Exception as e:
388 |             python_metrics['error'] = str(e)
389 |         
    | ^^^^^^^^
390 |         return python_metrics
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:391:1
    |
390 |         return python_metrics
391 |     
    | ^^^^
392 |     def check_alert_conditions(self, metrics: Dict) -> List[Dict]:
393 |         """Check metrics against alert thresholds."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:395:1
    |
393 |         """Check metrics against alert thresholds."""
394 |         alerts = []
395 |         
    | ^^^^^^^^
396 |         # Memory alerts
397 |         if 'memory' in metrics and isinstance(metrics['memory'], dict):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:399:1
    |
397 |         if 'memory' in metrics and isinstance(metrics['memory'], dict):
398 |             mem = metrics['memory']
399 |             
    | ^^^^^^^^^^^^
400 |             if 'usage_percent' in mem and mem['usage_percent'] > self.alert_thresholds['memory_usage_percent']:
401 |                 alerts.append({
    |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
   --> scripts/performance_monitor.py:400:101
    |
398 |             mem = metrics['memory']
399 |             
400 |             if 'usage_percent' in mem and mem['usage_percent'] > self.alert_thresholds['memory_usage_percent']:
    |                                                                                                     ^^^^^^^^^^^
401 |                 alerts.append({
402 |                     'type': 'memory_high',
    |

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:408:1
    |
406 |                     'threshold': self.alert_thresholds['memory_usage_percent']
407 |                 })
408 |             
    | ^^^^^^^^^^^^
409 |             if 'swap_used_mb' in mem and mem['swap_used_mb'] > self.alert_thresholds['swap_usage_mb']:
410 |                 alerts.append({
    |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> scripts/performance_monitor.py:409:101
    |
407 |                 })
408 |             
409 |             if 'swap_used_mb' in mem and mem['swap_used_mb'] > self.alert_thresholds['swap_usage_mb']:
    |                                                                                                     ^^
410 |                 alerts.append({
411 |                     'type': 'swap_high',
    |

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:417:1
    |
415 |                     'threshold': self.alert_thresholds['swap_usage_mb']
416 |                 })
417 |         
    | ^^^^^^^^
418 |         # CPU alerts
419 |         if 'cpu' in metrics and isinstance(metrics['cpu'], dict):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:421:1
    |
419 |         if 'cpu' in metrics and isinstance(metrics['cpu'], dict):
420 |             cpu = metrics['cpu']
421 |             
    | ^^^^^^^^^^^^
422 |             if 'usage_percent' in cpu and cpu['usage_percent'] > self.alert_thresholds['cpu_usage_percent']:
423 |                 alerts.append({
    |
help: Remove whitespace from blank line

E501 Line too long (108 > 100)
   --> scripts/performance_monitor.py:422:101
    |
420 |             cpu = metrics['cpu']
421 |             
422 |             if 'usage_percent' in cpu and cpu['usage_percent'] > self.alert_thresholds['cpu_usage_percent']:
    |                                                                                                     ^^^^^^^^
423 |                 alerts.append({
424 |                     'type': 'cpu_high',
    |

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:430:1
    |
428 |                     'threshold': self.alert_thresholds['cpu_usage_percent']
429 |                 })
430 |         
    | ^^^^^^^^
431 |         # Process alerts
432 |         if 'process' in metrics and isinstance(metrics['process'], dict):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:434:1
    |
432 |         if 'process' in metrics and isinstance(metrics['process'], dict):
433 |             proc = metrics['process']
434 |             
    | ^^^^^^^^^^^^
435 |             if 'file_descriptors' in proc and proc['file_descriptors'] > self.alert_thresholds['file_descriptors']:
436 |                 alerts.append({
    |
help: Remove whitespace from blank line

E501 Line too long (115 > 100)
   --> scripts/performance_monitor.py:435:101
    |
433 |             proc = metrics['process']
434 |             
435 |             if 'file_descriptors' in proc and proc['file_descriptors'] > self.alert_thresholds['file_descriptors']:
    |                                                                                                     ^^^^^^^^^^^^^^^
436 |                 alerts.append({
437 |                     'type': 'file_descriptors_high',
    |

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:443:1
    |
441 |                     'threshold': self.alert_thresholds['file_descriptors']
442 |                 })
443 |             
    | ^^^^^^^^^^^^
444 |             if 'thread_count' in proc and proc['thread_count'] > self.alert_thresholds['thread_count']:
445 |                 alerts.append({
    |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
   --> scripts/performance_monitor.py:444:101
    |
442 |                 })
443 |             
444 |             if 'thread_count' in proc and proc['thread_count'] > self.alert_thresholds['thread_count']:
    |                                                                                                     ^^^
445 |                 alerts.append({
446 |                     'type': 'thread_count_high',
    |

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:452:1
    |
450 |                     'threshold': self.alert_thresholds['thread_count']
451 |                 })
452 |             
    | ^^^^^^^^^^^^
453 |             # Alert only if we have significantly more trading bot processes than expected
454 |             # Allow for up to 2 legitimate trading bot processes (main + potential backup/monitor)
    |
help: Remove whitespace from blank line

E501 Line too long (149 > 100)
   --> scripts/performance_monitor.py:459:101
    |
457 | …',
458 | …
459 | …sses detected: {proc['python_processes']} (filtered for trading-specific processes only)",
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
460 | …
461 | …
    |

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:463:1
    |
461 |                     'threshold': 2
462 |                 })
463 |         
    | ^^^^^^^^
464 |         # Add timestamp to alerts
465 |         for alert in alerts:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:467:1
    |
465 |         for alert in alerts:
466 |             alert['timestamp'] = metrics.get('timestamp', datetime.now(timezone.utc).isoformat())
467 |         
    | ^^^^^^^^
468 |         return alerts
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:469:1
    |
468 |         return alerts
469 |     
    | ^^^^
470 |     def monitoring_loop(self):
471 |         """Main monitoring loop."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:477:1
    |
475 |                 metrics = self.get_system_metrics()
476 |                 self.metrics_history.append(metrics)
477 |                 
    | ^^^^^^^^^^^^^^^^
478 |                 # Check for alerts
479 |                 alerts = self.check_alert_conditions(metrics)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:480:1
    |
478 |                 # Check for alerts
479 |                 alerts = self.check_alert_conditions(metrics)
480 |                 
    | ^^^^^^^^^^^^^^^^
481 |                 if alerts:
482 |                     for alert in alerts:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:485:1
    |
483 |                         self.alerts_history.append(alert)
484 |                         self.logger.warning(f"ALERT: {alert['message']}")
485 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
486 |                         # Call alert callbacks
487 |                         for callback in self.alert_callbacks:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:492:1
    |
490 |                             except Exception as e:
491 |                                 self.logger.error(f"Error in alert callback: {e}")
492 |                 
    | ^^^^^^^^^^^^^^^^
493 |                 # Log summary periodically
494 |                 if len(self.metrics_history) % 10 == 0:  # Every 10 cycles
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:496:1
    |
494 |                 if len(self.metrics_history) % 10 == 0:  # Every 10 cycles
495 |                     self._log_summary(metrics)
496 |                 
    | ^^^^^^^^^^^^^^^^
497 |                 # Wait for next cycle
498 |                 self.stop_monitoring.wait(self.monitoring_interval)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:499:1
    |
497 |                 # Wait for next cycle
498 |                 self.stop_monitoring.wait(self.monitoring_interval)
499 |                 
    | ^^^^^^^^^^^^^^^^
500 |             except Exception as e:
501 |                 self.logger.error(f"Error in monitoring loop: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:503:1
    |
501 |                 self.logger.error(f"Error in monitoring loop: {e}")
502 |                 self.stop_monitoring.wait(60)  # Wait longer on error
503 |     
    | ^^^^
504 |     def _log_summary(self, metrics: Dict):
505 |         """Log periodic summary of system state."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:507:1
    |
505 |         """Log periodic summary of system state."""
506 |         summary_parts = []
507 |         
    | ^^^^^^^^
508 |         if 'memory' in metrics and 'usage_percent' in metrics['memory']:
509 |             summary_parts.append(f"MEM: {metrics['memory']['usage_percent']:.1f}%")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:510:1
    |
508 |         if 'memory' in metrics and 'usage_percent' in metrics['memory']:
509 |             summary_parts.append(f"MEM: {metrics['memory']['usage_percent']:.1f}%")
510 |         
    | ^^^^^^^^
511 |         if 'cpu' in metrics and 'usage_percent' in metrics['cpu']:
512 |             summary_parts.append(f"CPU: {metrics['cpu']['usage_percent']:.1f}%")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:513:1
    |
511 |         if 'cpu' in metrics and 'usage_percent' in metrics['cpu']:
512 |             summary_parts.append(f"CPU: {metrics['cpu']['usage_percent']:.1f}%")
513 |         
    | ^^^^^^^^
514 |         if 'process' in metrics and 'thread_count' in metrics['process']:
515 |             summary_parts.append(f"Threads: {metrics['process']['thread_count']}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:516:1
    |
514 |         if 'process' in metrics and 'thread_count' in metrics['process']:
515 |             summary_parts.append(f"Threads: {metrics['process']['thread_count']}")
516 |         
    | ^^^^^^^^
517 |         if summary_parts:
518 |             self.logger.info(f"System Summary: {' | '.join(summary_parts)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:519:1
    |
517 |         if summary_parts:
518 |             self.logger.info(f"System Summary: {' | '.join(summary_parts)}")
519 |     
    | ^^^^
520 |     def start_monitoring(self):
521 |         """Start resource monitoring."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:531:1
    |
529 |             self.monitoring_thread.start()
530 |             self.logger.info("Resource monitoring started")
531 |     
    | ^^^^
532 |     def stop_monitoring_gracefully(self):
533 |         """Stop resource monitoring."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:538:1
    |
536 |             self.monitoring_thread.join(timeout=10)
537 |             self.logger.info("Resource monitoring stopped")
538 |     
    | ^^^^
539 |     def add_alert_callback(self, callback: Callable[[Dict], None]):
540 |         """Add callback function for alert notifications."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:542:1
    |
540 |         """Add callback function for alert notifications."""
541 |         self.alert_callbacks.append(callback)
542 |     
    | ^^^^
543 |     def get_performance_report(self) -> Dict:
544 |         """Generate comprehensive performance report."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:547:1
    |
545 |         if not self.metrics_history:
546 |             return {'status': 'no_data', 'message': 'No metrics collected yet'}
547 |         
    | ^^^^^^^^
548 |         recent_metrics = list(self.metrics_history)[-10:]  # Last 10 measurements
549 |         current_metrics = recent_metrics[-1]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:550:1
    |
548 |         recent_metrics = list(self.metrics_history)[-10:]  # Last 10 measurements
549 |         current_metrics = recent_metrics[-1]
550 |         
    | ^^^^^^^^
551 |         # Calculate trends
552 |         trends = {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:556:1
    |
554 |             first = recent_metrics[0]
555 |             last = recent_metrics[-1]
556 |             
    | ^^^^^^^^^^^^
557 |             if 'memory' in first and 'memory' in last:
558 |                 if 'usage_percent' in first['memory'] and 'usage_percent' in last['memory']:
    |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
   --> scripts/performance_monitor.py:559:101
    |
557 |             if 'memory' in first and 'memory' in last:
558 |                 if 'usage_percent' in first['memory'] and 'usage_percent' in last['memory']:
559 |                     trends['memory_trend'] = last['memory']['usage_percent'] - first['memory']['usage_percent']
    |                                                                                                     ^^^^^^^^^^^
560 |         
561 |         report = {
    |

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:560:1
    |
558 |                 if 'usage_percent' in first['memory'] and 'usage_percent' in last['memory']:
559 |                     trends['memory_trend'] = last['memory']['usage_percent'] - first['memory']['usage_percent']
560 |         
    | ^^^^^^^^
561 |         report = {
562 |             'timestamp': datetime.now(timezone.utc).isoformat(),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:573:1
    |
571 |             'alert_thresholds': self.alert_thresholds
572 |         }
573 |         
    | ^^^^^^^^
574 |         return report
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:579:1
    |
577 | class TradingPerformanceMonitor:
578 |     """Monitor trading-specific performance metrics."""
579 |     
    | ^^^^
580 |     def __init__(self):
581 |         self.logger = logging.getLogger('trading_performance')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:584:1
    |
582 |         self.trade_metrics = deque(maxlen=1000)
583 |         self.api_response_times = deque(maxlen=100)
584 |         
    | ^^^^^^^^
585 |     def record_trade_execution_time(self, execution_time_ms: float, trade_type: str):
586 |         """Record trade execution time."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:592:1
    |
590 |             'trade_type': trade_type
591 |         })
592 |     
    | ^^^^
593 |     def record_api_response_time(self, endpoint: str, response_time_ms: float):
594 |         """Record API response time."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:600:1
    |
598 |             'response_time_ms': response_time_ms
599 |         })
600 |     
    | ^^^^
601 |     def get_trading_performance_report(self) -> Dict:
602 |         """Get trading performance report."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:615:1
    |
613 |             }
614 |         }
615 |         
    | ^^^^^^^^
616 |         if self.trade_metrics:
617 |             execution_times = [m['execution_time_ms'] for m in self.trade_metrics]
    |
help: Remove whitespace from blank line

E501 Line too long (112 > 100)
   --> scripts/performance_monitor.py:618:101
    |
616 |         if self.trade_metrics:
617 |             execution_times = [m['execution_time_ms'] for m in self.trade_metrics]
618 |             report['trade_execution']['average_execution_time_ms'] = sum(execution_times) / len(execution_times)
    |                                                                                                     ^^^^^^^^^^^^
619 |             report['trade_execution']['max_execution_time_ms'] = max(execution_times)
    |

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:620:1
    |
618 |             report['trade_execution']['average_execution_time_ms'] = sum(execution_times) / len(execution_times)
619 |             report['trade_execution']['max_execution_time_ms'] = max(execution_times)
620 |         
    | ^^^^^^^^
621 |         if self.api_response_times:
622 |             response_times = [m['response_time_ms'] for m in self.api_response_times]
    |
help: Remove whitespace from blank line

E501 Line too long (109 > 100)
   --> scripts/performance_monitor.py:623:101
    |
621 |         if self.api_response_times:
622 |             response_times = [m['response_time_ms'] for m in self.api_response_times]
623 |             report['api_performance']['average_response_time_ms'] = sum(response_times) / len(response_times)
    |                                                                                                     ^^^^^^^^^
624 |             report['api_performance']['max_response_time_ms'] = max(response_times)
    |

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:625:1
    |
623 |             report['api_performance']['average_response_time_ms'] = sum(response_times) / len(response_times)
624 |             report['api_performance']['max_response_time_ms'] = max(response_times)
625 |         
    | ^^^^^^^^
626 |         return report
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:653:1
    |
651 |     # Test the performance monitor
652 |     monitor = ResourceMonitor(monitoring_interval=5)
653 |     
    | ^^^^
654 |     logging.info("Performance Monitor Test")
655 |     logging.info(str("=" * 30))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:656:1
    |
654 |     logging.info("Performance Monitor Test")
655 |     logging.info(str("=" * 30))
656 |     
    | ^^^^
657 |     # Get system metrics
658 |     metrics = monitor.get_system_metrics()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:660:1
    |
658 |     metrics = monitor.get_system_metrics()
659 |     logging.info(str(f"Collected metrics in {metrics['collection_time_ms']:.2f}ms"))
660 |     
    | ^^^^
661 |     # Check for alerts
662 |     alerts = monitor.check_alert_conditions(metrics)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:664:1
    |
662 |     alerts = monitor.check_alert_conditions(metrics)
663 |     logging.info(f"Generated {len(alerts)} alerts")
664 |     
    | ^^^^
665 |     # Print summary
666 |     if 'memory' in metrics:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/performance_monitor.py:670:1
    |
668 |     if 'cpu' in metrics:
669 |         logging.info(f"CPU usage: {metrics['cpu'].get('usage_percent', 0):.1f}%")
670 |     
    | ^^^^
671 |     # Generate report
672 |     report = monitor.get_performance_report()
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/performance_monitor.py:673:92
    |
671 |     # Generate report
672 |     report = monitor.get_performance_report()
673 |     logging.info(f"Performance report generated with status: {report.get('status', 'ok')}")
    |                                                                                            ^
    |
help: Add trailing newline

W291 Trailing whitespace
 --> scripts/performance_optimizer.py:6:47
  |
4 | This module provides comprehensive performance optimization capabilities:
5 | - Real-time performance profiling and bottleneck identification
6 | - Memory usage optimization and leak detection  
  |                                               ^^
7 | - Latency optimization for order execution and data processing
8 | - Database query optimization and caching strategies
  |
help: Remove trailing whitespace

E501 Line too long (105 > 100)
   --> scripts/performance_optimizer.py:114:101
    |
112 |         return decorator
113 |
114 |     def _profile_execution(self, func: Callable, args: tuple, kwargs: dict, include_memory: bool) -> Any:
    |                                                                                                     ^^^^^
115 |         """Execute function with performance profiling."""
116 |         func_name = f"{func.__module__}.{func.__name__}"
    |

E501 Line too long (107 > 100)
   --> scripts/performance_optimizer.py:266:101
    |
264 |         """Check memory usage against thresholds."""
265 |         if snapshot.rss_mb > self.memory_thresholds['critical']:
266 |             self.logger.error(f"CRITICAL: Memory usage {snapshot.rss_mb:.1f}MB exceeds critical threshold")
    |                                                                                                     ^^^^^^^
267 |             self._trigger_memory_optimization()
268 |         elif snapshot.rss_mb > self.memory_thresholds['warning']:
    |

E501 Line too long (107 > 100)
   --> scripts/performance_optimizer.py:269:101
    |
267 |             self._trigger_memory_optimization()
268 |         elif snapshot.rss_mb > self.memory_thresholds['warning']:
269 |             self.logger.warning(f"WARNING: Memory usage {snapshot.rss_mb:.1f}MB exceeds warning threshold")
    |                                                                                                     ^^^^^^^
270 |         elif snapshot.rss_mb > self.memory_thresholds['gc_trigger']:
271 |             self._trigger_garbage_collection()
    |

E501 Line too long (103 > 100)
   --> scripts/performance_optimizer.py:379:101
    |
377 |         memory_trend = {
378 |             'current_mb': recent_snapshots[-1].rss_mb if recent_snapshots else 0,
379 |             'avg_mb': statistics.mean([s.rss_mb for s in recent_snapshots]) if recent_snapshots else 0,
    |                                                                                                     ^^^
380 |             'max_mb': max([s.rss_mb for s in recent_snapshots]) if recent_snapshots else 0,
381 |             'snapshots_count': len(recent_snapshots)
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/portfolio_optimizer.py:10:1
   |
 8 |   """
 9 |
10 | / from ai_trading.portfolio.optimizer import (
11 | |     PortfolioDecision,
12 | |     PortfolioOptimizer,
13 | |     PortfolioMetrics,
14 | |     TradeImpactAnalysis,
15 | |     create_portfolio_optimizer
16 | | )
   | |_^
17 |
18 |   # Re-export all classes for backward compatibility
   |
help: Organize imports

W291 [*] Trailing whitespace
  --> scripts/portfolio_optimizer.py:21:26
   |
19 | __all__ = [
20 |     "PortfolioDecision",
21 |     "PortfolioOptimizer", 
   |                          ^
22 |     "PortfolioMetrics",
23 |     "TradeImpactAnalysis",
   |
help: Remove trailing whitespace

E501 Line too long (120 > 100)
  --> scripts/problem_statement_validation.py:32:101
   |
30 |         content = config_path.read_text()
31 |         # Check for correct implementation
32 |         assert 'DISABLE_DAILY_RETRAIN = os.getenv("DISABLE_DAILY_RETRAIN", "false").lower() in ("true", "1")' in content
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
33 |         logging.info("  - DISABLE_DAILY_RETRAIN read from correct key with safe default ✓")
   |

E501 Line too long (106 > 100)
   --> scripts/problem_statement_validation.py:121:101
    |
119 |         assert "def _ensure_data_fresh(symbols, max_age_seconds: int)" in content
120 |         assert (
121 |             "from ai_trading.data_fetcher import get_cached_minute_timestamp, last_minute_bar_age_seconds"
    |                                                                                                     ^^^^^^
122 |             in content
123 |         )
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/process_manager.py:7:1
   |
 5 |   """
 6 |
 7 | / import os
 8 | | import subprocess
 9 | | import time
10 | | import signal
11 | | import logging
12 | | from typing import List, Dict
13 | | from datetime import datetime, timezone
   | |_______________________________________^
14 |
15 |   # AI-AGENT-REF: Process management and service cleanup script
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/process_manager.py:19:1
   |
17 | class ProcessManager:
18 |     """Manage trading bot processes and services."""
19 |     
   | ^^^^
20 |     def __init__(self):
21 |         self.logger = self._setup_logger()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/process_manager.py:23:1
   |
21 |         self.logger = self._setup_logger()
22 |         self.processes_info = []
23 |         
   | ^^^^^^^^
24 |     def _setup_logger(self) -> logging.Logger:
25 |         """Setup process manager logger."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/process_manager.py:28:1
   |
26 |         logger = logging.getLogger('process_manager')
27 |         logger.setLevel(logging.INFO)
28 |         
   | ^^^^^^^^
29 |         if not logger.handlers:
30 |             handler = logging.StreamHandler()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/process_manager.py:36:1
   |
34 |             handler.setFormatter(formatter)
35 |             logger.addHandler(handler)
36 |         
   | ^^^^^^^^
37 |         return logger
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/process_manager.py:38:1
   |
37 |         return logger
38 |     
   | ^^^^
39 |     def find_python_processes(self) -> List[Dict]:
40 |         """Find all Python processes related to trading bot."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/process_manager.py:42:1
   |
40 |         """Find all Python processes related to trading bot."""
41 |         processes = []
42 |         
   | ^^^^^^^^
43 |         try:
44 |             # Use ps to find all Python processes
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/process_manager.py:50:1
   |
48 |                 capture_output=True, text=True, check=True
49 |             )
50 |             
   | ^^^^^^^^^^^^
51 |             if result.returncode == 0:
52 |                 lines = result.stdout.strip().split('\n')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/process_manager.py:53:1
   |
51 |             if result.returncode == 0:
52 |                 lines = result.stdout.strip().split('\n')
53 |                 
   | ^^^^^^^^^^^^^^^^
54 |                 for line in lines[1:]:  # Skip header
55 |                     if 'python' in line.lower() and line.strip():
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/process_manager.py:72:1
   |
70 | …                         'command': ' '.join(parts[10:])
71 | …                     }
72 | …                     
^^^^^^^^^^^^^^^^^^^^^^^^^^^
73 | …                     # Check if it's trading-related
74 | …                     if self._is_trading_process(process_info['command']):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/process_manager.py:76:1
   |
74 |                             if self._is_trading_process(process_info['command']):
75 |                                 processes.append(process_info)
76 |                 
   | ^^^^^^^^^^^^^^^^
77 |         except (subprocess.SubprocessError, subprocess.CalledProcessError) as e:
78 |             self.logger.error(f"Failed to get process list: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/process_manager.py:81:1
   |
79 |         except ValueError as e:
80 |             self.logger.error(f"Failed to parse process information: {e}")
81 |         
   | ^^^^^^^^
82 |         self.processes_info = processes
83 |         return processes
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/process_manager.py:84:1
   |
82 |         self.processes_info = processes
83 |         return processes
84 |     
   | ^^^^
85 |     def _is_trading_process(self, command: str) -> bool:
86 |         """Check if a command is related to trading bot."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/process_manager.py:95:1
   |
93 |             'runner.py'
94 |         ]
95 |         
   | ^^^^^^^^
96 |         command_lower = command.lower()
97 |         return any(keyword.lower() in command_lower for keyword in trading_keywords)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:98:1
    |
 96 |         command_lower = command.lower()
 97 |         return any(keyword.lower() in command_lower for keyword in trading_keywords)
 98 |     
    | ^^^^
 99 |     def find_duplicate_processes(self) -> List[Dict]:
100 |         """Find duplicate trading processes."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:103:1
    |
101 |         if not self.processes_info:
102 |             self.find_python_processes()
103 |         
    | ^^^^^^^^
104 |         duplicates = []
105 |         seen_commands = {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:106:1
    |
104 |         duplicates = []
105 |         seen_commands = {}
106 |         
    | ^^^^^^^^
107 |         for process in self.processes_info:
108 |             cmd_key = self._normalize_command(process['command'])
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:109:1
    |
107 |         for process in self.processes_info:
108 |             cmd_key = self._normalize_command(process['command'])
109 |             
    | ^^^^^^^^^^^^
110 |             if cmd_key in seen_commands:
111 |                 # This is a duplicate
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:119:1
    |
117 |             else:
118 |                 seen_commands[cmd_key] = process
119 |         
    | ^^^^^^^^
120 |         return duplicates
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:121:1
    |
120 |         return duplicates
121 |     
    | ^^^^
122 |     def _normalize_command(self, command: str) -> str:
123 |         """Normalize command for duplicate detection."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:126:1
    |
124 |         # Remove common variations
125 |         normalized = command.lower()
126 |         
    | ^^^^^^^^
127 |         # Remove absolute paths
128 |         if 'ai_trading.main' in normalized or 'bot_engine.py' in normalized:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:133:1
    |
131 |             elif 'bot_engine.py' in normalized:
132 |                 return 'bot_engine'
133 |         
    | ^^^^^^^^
134 |         return normalized
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:135:1
    |
134 |         return normalized
135 |     
    | ^^^^
136 |     def kill_process(self, pid: int, force: bool = False) -> bool:
137 |         """Kill a process by PID."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:141:1
    |
139 |             signal_to_send = signal.SIGKILL if force else signal.SIGTERM
140 |             os.kill(pid, signal_to_send)
141 |             
    | ^^^^^^^^^^^^
142 |             # Wait a moment and check if process is gone
143 |             time.sleep(1)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:149:1
    |
147 |             except OSError:
148 |                 return True  # Process is gone
149 |                 
    | ^^^^^^^^^^^^^^^^
150 |         except OSError as e:
151 |             if e.errno == 3:  # No such process
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:155:1
    |
153 |             self.logger.error(f"Failed to kill process {pid}: {e}")
154 |             return False
155 |     
    | ^^^^
156 |     def cleanup_duplicate_processes(self, dry_run: bool = True) -> Dict:
157 |         """Clean up duplicate trading processes."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:159:1
    |
157 |         """Clean up duplicate trading processes."""
158 |         duplicates = self.find_duplicate_processes()
159 |         
    | ^^^^^^^^
160 |         cleanup_report = {
161 |             'duplicates_found': len(duplicates),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:166:1
    |
164 |             'dry_run': dry_run
165 |         }
166 |         
    | ^^^^^^^^
167 |         if not duplicates:
168 |             self.logger.info("No duplicate processes found")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:170:1
    |
168 |             self.logger.info("No duplicate processes found")
169 |             return cleanup_report
170 |         
    | ^^^^^^^^
171 |         for duplicate_info in duplicates:
172 |             duplicate_proc = duplicate_info['duplicate_process']
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:174:1
    |
172 |             duplicate_proc = duplicate_info['duplicate_process']
173 |             original_proc = duplicate_info['original_process']
174 |             
    | ^^^^^^^^^^^^
175 |             # Choose which process to keep (prefer lower memory usage or earlier start)
176 |             if duplicate_proc['memory_mb'] > original_proc['memory_mb']:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:184:1
    |
182 |                 target_pid = original_proc['pid']
183 |                 target_proc = original_proc
184 |             
    | ^^^^^^^^^^^^
185 |             self.logger.info(
186 |                 f"Target for termination: PID {target_pid} "
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:189:1
    |
187 |                 f"({target_proc['memory_mb']:.1f}MB) - {target_proc['command'][:80]}..."
188 |             )
189 |             
    | ^^^^^^^^^^^^
190 |             if not dry_run:
191 |                 if self.kill_process(target_pid):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:197:1
    |
195 |                     cleanup_report['failed_kills'].append(target_proc)
196 |                     self.logger.error(f"Failed to terminate process {target_pid}")
197 |         
    | ^^^^^^^^
198 |         return cleanup_report
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:199:1
    |
198 |         return cleanup_report
199 |     
    | ^^^^
200 |     def ensure_single_instance(self, pidfile_path: str = "/tmp/ai_trading_bot.pid") -> bool:
201 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/process_manager.py:203:1
    |
201 |         """
202 |         Ensure only one instance of the trading bot is running.
203 |         
    | ^^^^^^^^
204 |         Args:
205 |             pidfile_path: Path to the PID file for instance tracking
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/process_manager.py:206:1
    |
204 |         Args:
205 |             pidfile_path: Path to the PID file for instance tracking
206 |             
    | ^^^^^^^^^^^^
207 |         Returns:
208 |             True if this instance can proceed, False if another instance is running
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/process_manager.py:210:9
    |
208 |               True if this instance can proceed, False if another instance is running
209 |           """
210 | /         import fcntl
211 | |         import atexit
    | |_____________________^
212 |           
213 |           try:
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:212:1
    |
210 |         import fcntl
211 |         import atexit
212 |         
    | ^^^^^^^^
213 |         try:
214 |             # Try to open the PID file exclusively
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:216:1
    |
214 |             # Try to open the PID file exclusively
215 |             self.pidfile = open(pidfile_path, 'w')
216 |             
    | ^^^^^^^^^^^^
217 |             # Try to acquire an exclusive lock
218 |             fcntl.flock(self.pidfile.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:219:1
    |
217 |             # Try to acquire an exclusive lock
218 |             fcntl.flock(self.pidfile.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
219 |             
    | ^^^^^^^^^^^^
220 |             # Write our PID to the file
221 |             self.pidfile.write(str(os.getpid()))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:223:1
    |
221 |             self.pidfile.write(str(os.getpid()))
222 |             self.pidfile.flush()
223 |             
    | ^^^^^^^^^^^^
224 |             # Register cleanup function
225 |             atexit.register(self._cleanup_pidfile)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:226:1
    |
224 |             # Register cleanup function
225 |             atexit.register(self._cleanup_pidfile)
226 |             
    | ^^^^^^^^^^^^
227 |             self.logger.info(f"Successfully acquired single instance lock (PID: {os.getpid()})")
228 |             return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:229:1
    |
227 |             self.logger.info(f"Successfully acquired single instance lock (PID: {os.getpid()})")
228 |             return True
229 |             
    | ^^^^^^^^^^^^
230 |         except (IOError, OSError) as e:
231 |             if hasattr(self, 'pidfile'):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:233:1
    |
231 |             if hasattr(self, 'pidfile'):
232 |                 self.pidfile.close()
233 |             
    | ^^^^^^^^^^^^
234 |             # Check if there's actually a running process
235 |             if os.path.exists(pidfile_path):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:239:1
    |
237 |                     with open(pidfile_path, 'r') as f:
238 |                         existing_pid = int(f.read().strip())
239 |                     
    | ^^^^^^^^^^^^^^^^^^^^
240 |                     # Check if the process is still running
241 |                     try:
    |
help: Remove whitespace from blank line

E501 Line too long (115 > 100)
   --> scripts/process_manager.py:243:101
    |
241 |                     try:
242 |                         os.kill(existing_pid, 0)  # Signal 0 just checks if process exists
243 |                         self.logger.error(f"Another trading bot instance is already running (PID: {existing_pid})")
    |                                                                                                     ^^^^^^^^^^^^^^^
244 |                         return False
245 |                     except OSError:
    |

E501 Line too long (108 > 100)
   --> scripts/process_manager.py:247:101
    |
245 |                     except OSError:
246 |                         # Process doesn't exist, remove stale PID file
247 |                         self.logger.info(f"Removing stale PID file for non-existent process {existing_pid}")
    |                                                                                                     ^^^^^^^^
248 |                         os.unlink(pidfile_path)
249 |                         # Try again
    |

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:251:1
    |
249 |                         # Try again
250 |                         return self.ensure_single_instance(pidfile_path)
251 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
252 |                 except (ValueError, IOError):
253 |                     # Corrupted PID file, remove it and try again
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:260:1
    |
258 |                         pass
259 |                     return self.ensure_single_instance(pidfile_path)
260 |             
    | ^^^^^^^^^^^^
261 |             self.logger.error(f"Failed to acquire single instance lock: {e}")
262 |             return False
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:263:1
    |
261 |             self.logger.error(f"Failed to acquire single instance lock: {e}")
262 |             return False
263 |     
    | ^^^^
264 |     def _cleanup_pidfile(self):
265 |         """Clean up PID file on exit."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:273:1
    |
271 |         except Exception as e:
272 |             self.logger.debug(f"Error cleaning up PID file: {e}")
273 |     
    | ^^^^
274 |     def check_service_status(self) -> Dict:
275 |         """Check status of trading-related systemd services."""
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> scripts/process_manager.py:278:44
    |
276 |         services = [
277 |             'ai-trading-bot.service',
278 |             'ai-trading-scheduler.service', 
    |                                            ^
279 |             'ai-trading-server.service',
280 |             'dashboard.service'
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:282:1
    |
280 |             'dashboard.service'
281 |         ]
282 |         
    | ^^^^^^^^
283 |         service_status = {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:284:1
    |
283 |         service_status = {}
284 |         
    | ^^^^^^^^
285 |         for service in services:
286 |             try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:292:1
    |
290 |                     capture_output=True, text=True, check=True
291 |                 )
292 |                 
    | ^^^^^^^^^^^^^^^^
293 |                 status = result.stdout.strip()
294 |                 service_status[service] = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:299:1
    |
297 |                     'return_code': result.returncode
298 |                 }
299 |                 
    | ^^^^^^^^^^^^^^^^
300 |                 # Get more detailed info for failed services
301 |                 if status != 'active':
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:308:1
    |
306 |                     )
307 |                     service_status[service]['details'] = detail_result.stdout
308 |                 
    | ^^^^^^^^^^^^^^^^
309 |             except (subprocess.SubprocessError, subprocess.CalledProcessError) as e:
310 |                 service_status[service] = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:315:1
    |
313 |                     'active': False
314 |                 }
315 |         
    | ^^^^^^^^
316 |         return service_status
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:317:1
    |
316 |         return service_status
317 |     
    | ^^^^
318 |     def fix_file_permissions(self, paths: List[str], target_user: str = 'aiuser') -> Dict:
319 |         """Fix file ownership and permissions."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:325:1
    |
323 |             'failed_fixes': []
324 |         }
325 |         
    | ^^^^^^^^
326 |         for path in paths:
327 |             try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:333:1
    |
331 |                     current_uid = stat_info.st_uid
332 |                     current_gid = stat_info.st_gid
333 |                     
    | ^^^^^^^^^^^^^^^^^^^^
334 |                     # Get target user info
335 |                     try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:340:1
    |
338 |                         target_uid = target_pwd.pw_uid
339 |                         target_gid = target_pwd.pw_gid
340 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
341 |                         if current_uid != target_uid or current_gid != target_gid:
342 |                             # Need to change ownership
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:352:1
    |
350 |                             permission_report['paths_fixed'].append(path)
351 |                             self.logger.info(f"Fixed ownership of {path}")
352 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
353 |                     except (KeyError, subprocess.SubprocessError) as e:
354 |                         permission_report['failed_fixes'].append({
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:359:1
    |
357 |                         })
358 |                         self.logger.error(f"Failed to fix permissions for {path}: {e}")
359 |                 
    | ^^^^^^^^^^^^^^^^
360 |             except OSError as e:
361 |                 permission_report['failed_fixes'].append({
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:365:1
    |
363 |                     'error': str(e)
364 |                 })
365 |         
    | ^^^^^^^^
366 |         return permission_report
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:367:1
    |
366 |         return permission_report
367 |     
    | ^^^^
368 |     def generate_process_report(self) -> Dict:
369 |         """Generate comprehensive process management report."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:373:1
    |
371 |         duplicates = self.find_duplicate_processes()
372 |         service_status = self.check_service_status()
373 |         
    | ^^^^^^^^
374 |         # Calculate memory usage summary
375 |         total_memory_mb = sum(p['memory_mb'] for p in processes)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:377:1
    |
375 |         total_memory_mb = sum(p['memory_mb'] for p in processes)
376 |         max_memory_process = max(processes, key=lambda p: p['memory_mb']) if processes else None
377 |         
    | ^^^^^^^^
378 |         report = {
379 |             'timestamp': datetime.now(timezone.utc).isoformat(),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:392:1
    |
390 |             'recommendations': self._generate_recommendations(processes, duplicates, service_status)
391 |         }
392 |         
    | ^^^^^^^^
393 |         return report
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:394:1
    |
393 |         return report
394 |     
    | ^^^^
395 |     def _generate_recommendations(self, processes: List[Dict], duplicates: List[Dict], 
396 |                                  service_status: Dict) -> List[str]:
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> scripts/process_manager.py:395:87
    |
393 |         return report
394 |     
395 |     def _generate_recommendations(self, processes: List[Dict], duplicates: List[Dict], 
    |                                                                                       ^
396 |                                  service_status: Dict) -> List[str]:
397 |         """Generate recommendations based on process analysis."""
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:399:1
    |
397 |         """Generate recommendations based on process analysis."""
398 |         recommendations = []
399 |         
    | ^^^^^^^^
400 |         # Memory recommendations
401 |         high_memory_processes = [p for p in processes if p['memory_mb'] > 500]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:407:1
    |
405 |                 "Consider memory optimization or process restart."
406 |             )
407 |         
    | ^^^^^^^^
408 |         # Duplicate process recommendations
409 |         if duplicates:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:414:1
    |
412 |                 "Run cleanup to eliminate conflicts."
413 |             )
414 |         
    | ^^^^^^^^
415 |         # Service recommendations
416 |         failed_services = [name for name, info in service_status.items() 
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> scripts/process_manager.py:416:73
    |
415 |         # Service recommendations
416 |         failed_services = [name for name, info in service_status.items() 
    |                                                                         ^
417 |                           if not info.get('active', False)]
418 |         if failed_services:
    |
help: Remove trailing whitespace

E501 Line too long (106 > 100)
   --> scripts/process_manager.py:420:101
    |
418 |         if failed_services:
419 |             recommendations.append(
420 |                 f"MEDIUM PRIORITY: {len(failed_services)} failed services: {', '.join(failed_services)}. "
    |                                                                                                     ^^^^^^
421 |                 "Check service configuration and restart."
422 |             )
    |

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:423:1
    |
421 |                 "Check service configuration and restart."
422 |             )
423 |         
    | ^^^^^^^^
424 |         # Performance recommendations
425 |         total_memory = sum(p['memory_mb'] for p in processes)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:431:1
    |
429 |                 "Monitor for memory leaks."
430 |             )
431 |         
    | ^^^^^^^^
432 |         return recommendations
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/process_manager.py:438:1
    |
436 |         """
437 |         Acquire a process lock to prevent multiple instances.
438 |         
    | ^^^^^^^^
439 |         Parameters
440 |         ----------
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/process_manager.py:443:1
    |
441 |         lock_file : str
442 |             Path to the lock file
443 |             
    | ^^^^^^^^^^^^
444 |         Returns
445 |         -------
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:451:1
    |
449 |         try:
450 |             import atexit
451 |             
    | ^^^^^^^^^^^^
452 |             # Check if lock file exists and contains a valid PID
453 |             if os.path.exists(lock_file):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:457:1
    |
455 |                     with open(lock_file, 'r') as f:
456 |                         existing_pid = int(f.read().strip())
457 |                     
    | ^^^^^^^^^^^^^^^^^^^^
458 |                     # Check if process with this PID is still running
459 |                     try:
    |
help: Remove whitespace from blank line

E501 Line too long (109 > 100)
   --> scripts/process_manager.py:462:101
    |
460 |                         os.kill(existing_pid, 0)
461 |                         # Process is still running
462 |                         self.logger.warning(f"Another trading bot instance is running (PID: {existing_pid})")
    |                                                                                                     ^^^^^^^^^
463 |                         return False
464 |                     except OSError:
    |

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:475:1
    |
473 |                     except OSError:
474 |                         pass
475 |             
    | ^^^^^^^^^^^^
476 |             # Create new lock file
477 |             with open(lock_file, 'w') as f:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:479:1
    |
477 |             with open(lock_file, 'w') as f:
478 |                 f.write(str(os.getpid()))
479 |             
    | ^^^^^^^^^^^^
480 |             # Register cleanup function
481 |             def cleanup_lock():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:490:1
    |
488 |                 except (OSError, ValueError):
489 |                     pass
490 |             
    | ^^^^^^^^^^^^
491 |             atexit.register(cleanup_lock)
492 |             self.logger.info(f"Process lock acquired (PID: {os.getpid()})")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:494:1
    |
492 |             self.logger.info(f"Process lock acquired (PID: {os.getpid()})")
493 |             return True
494 |             
    | ^^^^^^^^^^^^
495 |         except Exception as e:
496 |             self.logger.error(f"Failed to acquire process lock: {e}")
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> scripts/process_manager.py:502:1
    |
500 |         """
501 |         Check for multiple trading bot instances and provide recommendations.
502 |         
    | ^^^^^^^^
503 |         Returns
504 |         -------
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:510:1
    |
508 |         processes = self.find_python_processes()
509 |         trading_processes = [p for p in processes if self._is_trading_process(p['command'])]
510 |         
    | ^^^^^^^^
511 |         report = {
512 |             'total_instances': len(trading_processes),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:517:1
    |
515 |             'recommendations': []
516 |         }
517 |         
    | ^^^^^^^^
518 |         if len(trading_processes) > 1:
519 |             report['recommendations'].append(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:534:1
    |
532 |                 "Single trading bot instance detected. Normal operation."
533 |             )
534 |         
    | ^^^^^^^^
535 |         return report
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:542:1
    |
540 |     logging.info("AI Trading Bot - Process Management Tool")
541 |     logging.info(str("=" * 50))
542 |     
    | ^^^^
543 |     manager = ProcessManager()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:544:1
    |
543 |     manager = ProcessManager()
544 |     
    | ^^^^
545 |     # Generate comprehensive report
546 |     report = manager.generate_process_report()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:547:1
    |
545 |     # Generate comprehensive report
546 |     report = manager.generate_process_report()
547 |     
    | ^^^^
548 |     logging.info("\nPROCESS SUMMARY:")
549 |     logging.info(str(f"- Total Python processes: {report['process_summary']['total_python_processes']}"))
    |
help: Remove whitespace from blank line

E501 Line too long (105 > 100)
   --> scripts/process_manager.py:549:101
    |
548 |     logging.info("\nPROCESS SUMMARY:")
549 |     logging.info(str(f"- Total Python processes: {report['process_summary']['total_python_processes']}"))
    |                                                                                                     ^^^^^
550 |     logging.info(str(f"- Total memory usage: {report['process_summary']['total_memory_mb']:.1f}MB"))
551 |     logging.info(str(f"- Duplicate processes: {report['process_summary']['duplicate_processes']}"))
    |

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:552:1
    |
550 |     logging.info(str(f"- Total memory usage: {report['process_summary']['total_memory_mb']:.1f}MB"))
551 |     logging.info(str(f"- Duplicate processes: {report['process_summary']['duplicate_processes']}"))
552 |     
    | ^^^^
553 |     if report['processes']:
554 |         logging.info("\nACTIVE TRADING PROCESSES:")
    |
help: Remove whitespace from blank line

E501 Line too long (108 > 100)
   --> scripts/process_manager.py:556:101
    |
554 |         logging.info("\nACTIVE TRADING PROCESSES:")
555 |         for proc in report['processes']:
556 |             logging.info(str(f"- PID {proc['pid']}: {proc['memory_mb']:.1f}MB - {proc['command'][:80]}..."))
    |                                                                                                     ^^^^^^^^
557 |     
558 |     if report['duplicates']:
    |

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:557:1
    |
555 |         for proc in report['processes']:
556 |             logging.info(str(f"- PID {proc['pid']}: {proc['memory_mb']:.1f}MB - {proc['command'][:80]}..."))
557 |     
    | ^^^^
558 |     if report['duplicates']:
559 |         logging.info("\nDUPLICATE PROCESSES DETECTED:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:565:1
    |
563 |             logging.info(f"- Original: PID {orig['pid']} ({orig['memory_mb']:.1f}MB)")
564 |             logging.info(f"- Duplicate: PID {dupl['pid']} ({dupl['memory_mb']:.1f}MB)")
565 |     
    | ^^^^
566 |     logging.info("\nSERVICE STATUS:")
567 |     for service, status in report['service_status'].items():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:570:1
    |
568 |         status_str = "✓ ACTIVE" if status['active'] else "✗ FAILED"
569 |         logging.info(f"- {service}: {status_str}")
570 |     
    | ^^^^
571 |     logging.info("\nRECOMMENDATIONS:")
572 |     for i, rec in enumerate(report['recommendations'], 1):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:574:1
    |
572 |     for i, rec in enumerate(report['recommendations'], 1):
573 |         logging.info(f"{i}. {rec}")
574 |     
    | ^^^^
575 |     # Save report
576 |     timestamp = datetime.now(datetime.timezone.utc).strftime("%Y%m%d_%H%M%S")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:578:1
    |
576 |     timestamp = datetime.now(datetime.timezone.utc).strftime("%Y%m%d_%H%M%S")
577 |     report_file = f"process_report_{timestamp}.json"
578 |     
    | ^^^^
579 |     import json
580 |     with open(report_file, 'w') as f:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:582:1
    |
580 |     with open(report_file, 'w') as f:
581 |         json.dump(report, f, indent=2)
582 |     
    | ^^^^
583 |     logging.info(f"\nReport saved to: {report_file}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:584:1
    |
583 |     logging.info(f"\nReport saved to: {report_file}")
584 |     
    | ^^^^
585 |     # Interactive cleanup option
586 |     if report['duplicates']:
    |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
   --> scripts/process_manager.py:587:101
    |
585 |     # Interactive cleanup option
586 |     if report['duplicates']:
587 |         response = input(f"\nFound {len(report['duplicates'])} duplicate processes. Clean up? (y/N): ")
    |                                                                                                     ^^^
588 |         if response.lower() == 'y':
589 |             logging.info("Performing cleanup (dry run first)...")
    |

E501 Line too long (105 > 100)
   --> scripts/process_manager.py:591:101
    |
589 |             logging.info("Performing cleanup (dry run first)...")
590 |             dry_run_result = manager.cleanup_duplicate_processes(dry_run=True)
591 |             logging.info(f"Dry run: Would terminate {len(dry_run_result['processes_killed'])} processes")
    |                                                                                                     ^^^^^
592 |             
593 |             confirm = input("Proceed with actual cleanup? (y/N): ")
    |

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:592:1
    |
590 |             dry_run_result = manager.cleanup_duplicate_processes(dry_run=True)
591 |             logging.info(f"Dry run: Would terminate {len(dry_run_result['processes_killed'])} processes")
592 |             
    | ^^^^^^^^^^^^
593 |             confirm = input("Proceed with actual cleanup? (y/N): ")
594 |             if confirm.lower() == 'y':
    |
help: Remove whitespace from blank line

E501 Line too long (113 > 100)
   --> scripts/process_manager.py:596:101
    |
594 |             if confirm.lower() == 'y':
595 |                 cleanup_result = manager.cleanup_duplicate_processes(dry_run=False)
596 |                 logging.info(f"Cleanup complete: {len(cleanup_result['processes_killed'])} processes terminated")
    |                                                                                                     ^^^^^^^^^^^^^
597 |     
598 |     return report
    |

W293 [*] Blank line contains whitespace
   --> scripts/process_manager.py:597:1
    |
595 |                 cleanup_result = manager.cleanup_duplicate_processes(dry_run=False)
596 |                 logging.info(f"Cleanup complete: {len(cleanup_result['processes_killed'])} processes terminated")
597 |     
    | ^^^^
598 |     return report
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/process_manager.py:602:11
    |
601 | if __name__ == "__main__":
602 |     main()
    |           ^
    |
help: Add trailing newline

F401 `production_monitoring.get_production_monitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:28:9
   |
26 |         CircuitBreaker,
27 |         ProductionMonitor,
28 |         get_production_monitor,
   |         ^^^^^^^^^^^^^^^^^^^^^^
29 |         initialize_production_monitoring,
30 |     )
   |
help: Remove unused import: `production_monitoring.get_production_monitor`

F401 `performance_optimizer.cached` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:37:9
   |
35 | try:
36 |     from performance_optimizer import (
37 |         cached,
   |         ^^^^^^
38 |         get_performance_optimizer,
39 |         initialize_performance_optimizer,
   |
help: Remove unused import

F401 `performance_optimizer.get_performance_optimizer` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:38:9
   |
36 |     from performance_optimizer import (
37 |         cached,
38 |         get_performance_optimizer,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
39 |         initialize_performance_optimizer,
40 |         profile_performance,
   |
help: Remove unused import

F401 `performance_optimizer.profile_performance` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:40:9
   |
38 |         get_performance_optimizer,
39 |         initialize_performance_optimizer,
40 |         profile_performance,
   |         ^^^^^^^^^^^^^^^^^^^
41 |     )
42 |     PERFORMANCE_OPTIMIZER_AVAILABLE = True
   |
help: Remove unused import

F401 `security_manager.get_security_manager` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:47:34
   |
46 | try:
47 |     from security_manager import get_security_manager, initialize_security_manager
   |                                  ^^^^^^^^^^^^^^^^^^^^
48 |     SECURITY_MANAGER_AVAILABLE = True
49 | except ImportError:
   |
help: Remove unused import: `security_manager.get_security_manager`

F401 `monitoring_dashboard.get_monitoring_dashboard` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:54:9
   |
52 | try:
53 |     from monitoring_dashboard import (
54 |         get_monitoring_dashboard,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
55 |         initialize_monitoring_dashboard,
56 |     )
   |
help: Remove unused import: `monitoring_dashboard.get_monitoring_dashboard`

F401 `health_check.health_monitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/production_integration.py:62:30
   |
61 | try:
62 |     from health_check import health_monitor
   |                              ^^^^^^^^^^^^^^
63 |     HEALTH_CHECK_AVAILABLE = True
64 | except ImportError:
   |
help: Remove unused import: `health_check.health_monitor`

E501 Line too long (102 > 100)
   --> scripts/production_integration.py:145:101
    |
144 |             if self.systems_initialized:
145 |                 self.logger.info(f"✓ All {total_systems} production systems initialized successfully")
    |                                                                                                     ^^
146 |             else:
147 |                 self.logger.warning(f"⚠ Only {success_count}/{total_systems} production systems initialized")
    |

E501 Line too long (109 > 100)
   --> scripts/production_integration.py:147:101
    |
145 |                 self.logger.info(f"✓ All {total_systems} production systems initialized successfully")
146 |             else:
147 |                 self.logger.warning(f"⚠ Only {success_count}/{total_systems} production systems initialized")
    |                                                                                                     ^^^^^^^^^
148 |
149 |             return self.systems_initialized
    |

E501 Line too long (101 > 100)
   --> scripts/production_integration.py:292:101
    |
290 |                 # AI-AGENT-REF: Add defensive null checks for production systems
291 |                 if self.production_monitor is not None:
292 |                     self.production_monitor.track_latency(f"{operation_name}_failed", execution_time)
    |                                                                                                     ^
293 |
294 |                 # Security logging for failures
    |

E501 Line too long (102 > 100)
   --> scripts/production_monitoring.py:284:101
    |
282 |             anomalies.append(f"High order latency: {metrics.order_latency_ms:.1f}ms")
283 |
284 |         if metrics.data_processing_latency_ms > self.anomaly_thresholds['data_processing_latency_ms']:
    |                                                                                                     ^^
285 |             anomalies.append(f"High data processing latency: {metrics.data_processing_latency_ms:.1f}ms")
    |

E501 Line too long (105 > 100)
   --> scripts/production_monitoring.py:285:101
    |
284 |         if metrics.data_processing_latency_ms > self.anomaly_thresholds['data_processing_latency_ms']:
285 |             anomalies.append(f"High data processing latency: {metrics.data_processing_latency_ms:.1f}ms")
    |                                                                                                     ^^^^^
286 |
287 |         # Alert on anomalies
    |

E501 Line too long (101 > 100)
   --> scripts/production_monitoring.py:352:101
    |
350 |         cpu_values = [m.cpu_percent for m in recent_metrics]
351 |         memory_values = [m.memory_percent for m in recent_metrics]
352 |         order_latency_values = [m.order_latency_ms for m in recent_metrics if m.order_latency_ms > 0]
    |                                                                                                     ^
353 |
354 |         report = {
    |

E501 Line too long (121 > 100)
   --> scripts/production_monitoring.py:373:101
    |
371 |                     'current': order_latency_values[-1] if order_latency_values else 0,
372 |                     'average': statistics.mean(order_latency_values) if order_latency_values else 0,
373 |                     'p95': statistics.quantiles(order_latency_values, n=20)[18] if len(order_latency_values) > 20 else 0,
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
374 |                     'target': self.performance_targets['order_execution_latency_ms']
375 |                 }
    |

E501 Line too long (105 > 100)
   --> scripts/production_monitoring.py:377:101
    |
375 |                 }
376 |             },
377 |             'health_checks': {name: asdict(result) for name, result in self.last_health_results.items()},
    |                                                                                                     ^^^^^
378 |             'circuit_breakers': {name: cb.state.value for name, cb in self.circuit_breakers.items()}
379 |         }
    |

E501 Line too long (120 > 100)
   --> scripts/production_validator.py:164:101
    |
162 |         total_requests = successful_requests + failed_requests
163 |         test_duration = end_time - start_time
164 |         requests_per_second = total_requests / test_duration.total_seconds() if test_duration.total_seconds() > 0 else 0
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
165 |
166 |         # Create results
    |

E501 Line too long (104 > 100)
   --> scripts/production_validator.py:292:101
    |
290 |             benchmark_count += 1
291 |
292 |         benchmark_results['overall_score'] = total_score / benchmark_count if benchmark_count > 0 else 0
    |                                                                                                     ^^^^
293 |
294 |         return benchmark_results
    |

E501 Line too long (105 > 100)
   --> scripts/production_validator.py:417:101
    |
415 |                 'cpu_percent': psutil.cpu_percent(interval=0.1),
416 |                 'memory_percent': psutil.virtual_memory().percent,
417 |                 'disk_io_read': psutil.disk_io_counters().read_bytes if psutil.disk_io_counters() else 0,
    |                                                                                                     ^^^^^
418 |                 'disk_io_write': psutil.disk_io_counters().write_bytes if psutil.disk_io_counters() else 0,
419 |                 'network_sent': psutil.net_io_counters().bytes_sent if psutil.net_io_counters() else 0,
    |

E501 Line too long (107 > 100)
   --> scripts/production_validator.py:418:101
    |
416 |                 'memory_percent': psutil.virtual_memory().percent,
417 |                 'disk_io_read': psutil.disk_io_counters().read_bytes if psutil.disk_io_counters() else 0,
418 |                 'disk_io_write': psutil.disk_io_counters().write_bytes if psutil.disk_io_counters() else 0,
    |                                                                                                     ^^^^^^^
419 |                 'network_sent': psutil.net_io_counters().bytes_sent if psutil.net_io_counters() else 0,
420 |                 'network_recv': psutil.net_io_counters().bytes_recv if psutil.net_io_counters() else 0
    |

E501 Line too long (103 > 100)
   --> scripts/production_validator.py:419:101
    |
417 |                 'disk_io_read': psutil.disk_io_counters().read_bytes if psutil.disk_io_counters() else 0,
418 |                 'disk_io_write': psutil.disk_io_counters().write_bytes if psutil.disk_io_counters() else 0,
419 |                 'network_sent': psutil.net_io_counters().bytes_sent if psutil.net_io_counters() else 0,
    |                                                                                                     ^^^
420 |                 'network_recv': psutil.net_io_counters().bytes_recv if psutil.net_io_counters() else 0
421 |             }
    |

E501 Line too long (102 > 100)
   --> scripts/production_validator.py:420:101
    |
418 |                 'disk_io_write': psutil.disk_io_counters().write_bytes if psutil.disk_io_counters() else 0,
419 |                 'network_sent': psutil.net_io_counters().bytes_sent if psutil.net_io_counters() else 0,
420 |                 'network_recv': psutil.net_io_counters().bytes_recv if psutil.net_io_counters() else 0
    |                                                                                                     ^^
421 |             }
422 |         except ImportError:
    |

E501 Line too long (101 > 100)
   --> scripts/production_validator.py:612:101
    |
611 |             if performance_score < self.validation_criteria['performance']['min_score']:
612 |                 critical_failures.append(f"Performance tests failed: {performance_score:.1f}% score")
    |                                                                                                     ^
613 |             elif performance_score < 90:
614 |                 warnings.append(f"Performance could be improved: {performance_score:.1f}% score")
    |

E501 Line too long (101 > 100)
   --> scripts/production_validator.py:632:101
    |
631 |             if reliability_score < self.validation_criteria['reliability']['min_score']:
632 |                 critical_failures.append(f"Reliability tests failed: {reliability_score:.1f}% score")
    |                                                                                                     ^
633 |
634 |         except Exception as e:
    |

E501 Line too long (105 > 100)
   --> scripts/production_validator.py:658:101
    |
657 |             if functionality_score < self.validation_criteria['functionality']['min_score']:
658 |                 critical_failures.append(f"Functionality tests failed: {functionality_score:.1f}% score")
    |                                                                                                     ^^^^^
659 |
660 |         except Exception as e:
    |

E501 Line too long (119 > 100)
   --> scripts/production_validator.py:718:101
    |
716 |         # Evaluate load test results
717 |         for test_name, result in load_results.items():
718 |             success_rate = result.successful_requests / result.total_requests * 100 if result.total_requests > 0 else 0
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^
719 |
720 |             # Score based on success rate and response time
    |

E501 Line too long (102 > 100)
   --> scripts/production_validator.py:746:101
    |
744 |             availability_score = max(0, 100 - result.availability_impact)
745 |
746 |             test_score = (recovery_score * 0.4) + (integrity_score * 0.4) + (availability_score * 0.2)
    |                                                                                                     ^^
747 |             scores.append(test_score)
    |

F401 `cryptography` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:791:20
    |
789 |         # Check if encryption modules are available
790 |         try:
791 |             import cryptography
    |                    ^^^^^^^^^^^^
792 |             return 95
793 |         except ImportError:
    |
help: Remove unused import: `cryptography`

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/production_validator.py:817:13
    |
815 |           try:
816 |               # Test imports
817 | /             from ai_trading.core import bot_engine  # AI-AGENT-REF: canonical import
818 | |             import trade_execution
    | |__________________________________^
819 |               return 95
820 |           except ImportError:
    |
help: Organize imports

F401 `ai_trading.core.bot_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:817:41
    |
815 |         try:
816 |             # Test imports
817 |             from ai_trading.core import bot_engine  # AI-AGENT-REF: canonical import
    |                                         ^^^^^^^^^^
818 |             import trade_execution
819 |             return 95
    |
help: Remove unused import: `ai_trading.core.bot_engine`

F401 `trade_execution` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:818:20
    |
816 |             # Test imports
817 |             from ai_trading.core import bot_engine  # AI-AGENT-REF: canonical import
818 |             import trade_execution
    |                    ^^^^^^^^^^^^^^^
819 |             return 95
820 |         except ImportError:
    |
help: Remove unused import: `trade_execution`

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/production_validator.py:835:13
    |
833 |           """Test data processing functionality."""
834 |           try:
835 | /             from ai_trading import data_fetcher
836 | |             import indicators
    | |_____________________________^
837 |               return 90
838 |           except ImportError:
    |
help: Organize imports

F401 `ai_trading.data_fetcher` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:835:36
    |
833 |         """Test data processing functionality."""
834 |         try:
835 |             from ai_trading import data_fetcher
    |                                    ^^^^^^^^^^^^
836 |             import indicators
837 |             return 90
    |
help: Remove unused import: `ai_trading.data_fetcher`

F401 `indicators` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:836:20
    |
834 |         try:
835 |             from ai_trading import data_fetcher
836 |             import indicators
    |                    ^^^^^^^^^^
837 |             return 90
838 |         except ImportError:
    |
help: Remove unused import: `indicators`

F401 `ai_trading.telemetry.metrics_logger` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> scripts/production_validator.py:844:46
    |
842 |         """Test reporting system functionality."""
843 |         try:
844 |             from ai_trading.telemetry import metrics_logger
    |                                              ^^^^^^^^^^^^^^
845 |             return 85
846 |         except ImportError:
    |
help: Remove unused import: `ai_trading.telemetry.metrics_logger`

E501 Line too long (124 > 100)
   --> scripts/production_validator.py:891:101
    |
889 |         # Performance recommendations
890 |         if test_scores.get('performance', 0) < 85:
891 |             recommendations.append("Optimize performance: Consider caching, connection pooling, and algorithm optimization")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
892 |
893 |         # Reliability recommendations
    |

E501 Line too long (114 > 100)
   --> scripts/production_validator.py:895:101
    |
893 |         # Reliability recommendations
894 |         if test_scores.get('reliability', 0) < 90:
895 |             recommendations.append("Improve reliability: Implement better error handling and recovery mechanisms")
    |                                                                                                     ^^^^^^^^^^^^^^
896 |
897 |         # Security recommendations
    |

E501 Line too long (109 > 100)
   --> scripts/production_validator.py:899:101
    |
897 |         # Security recommendations
898 |         if test_scores.get('security', 0) < 95:
899 |             recommendations.append("Enhance security: Review access controls, encryption, and audit logging")
    |                                                                                                     ^^^^^^^^^
900 |
901 |         # Functionality recommendations
    |

E501 Line too long (115 > 100)
   --> scripts/production_validator.py:903:101
    |
901 |         # Functionality recommendations
902 |         if test_scores.get('functionality', 0) < 95:
903 |             recommendations.append("Fix functionality issues: Address module import errors and core functionality")
    |                                                                                                     ^^^^^^^^^^^^^^^
904 |
905 |         # General recommendations
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/profile_indicators.py:4:1
   |
 3 |   logger = logging.getLogger(__name__)
 4 | / import inspect
 5 | | import time
 6 | |
 7 | | import numpy as np
 8 | | import pandas as pd
 9 | |
10 | | from ai_trading import signals
11 | | from ai_trading import indicators
   | |_________________________________^
12 |
13 |   def profile(func, *args, **kwargs):
   |
help: Organize imports

E501 Line too long (124 > 100)
  --> scripts/profile_indicators.py:46:101
   |
44 |             ]
45 |             if len(required_positional) != 1:
46 |                 logger.info("Skipping %s.%s - requires %s positional args", module.__name__, name, len(required_positional))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
47 |                 continue
48 |             if hasattr(func, "py_func") or name == "jit":
   |

E501 Line too long (102 > 100)
  --> scripts/profile_indicators.py:49:101
   |
47 |                 continue
48 |             if hasattr(func, "py_func") or name == "jit":
49 |                 logger.info("Skipping decorator or jit-wrapped function %s.%s", module.__name__, name)
   |                                                                                                     ^^
50 |                 continue
51 |             _, elapsed = profile(func, df)
   |

E501 Line too long (105 > 100)
  --> scripts/profile_indicators.py:54:101
   |
52 |             timings.append((module.__name__ + "." + name, elapsed))
53 |
54 |     pd.DataFrame(timings, columns=["Function", "Time(sec)"]).to_csv("indicator_timings.csv", index=False)
   |                                                                                                     ^^^^^
55 |
56 | if __name__ == "__main__":
   |

E501 Line too long (112 > 100)
   --> scripts/retrain_model.py:516:101
    |
514 |     if not raw_store:
515 |         logger.critical(
516 |             "No symbols returned valid data for the day. Cannot trade or retrain. Check your data subscription."
    |                                                                                                     ^^^^^^^^^^^^
517 |         )
    |

E501 Line too long (112 > 100)
   --> scripts/retrain_model.py:801:101
    |
799 |     if not raw_store:
800 |         logger.critical(
801 |             "No symbols returned valid data for the day. Cannot trade or retrain. Check your data subscription."
    |                                                                                                     ^^^^^^^^^^^^
802 |         )
803 |         return False
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/run_wfa.py:18:5
   |
17 |   try:
18 | /     from ai_trading.config.management import TradingConfig
19 | |     from ai_trading.evaluation.walkforward import WalkForwardEvaluator
20 | |     from ai_trading.data_fetcher import DataFetcher
21 | |     from ai_trading.signals import generate_cost_aware_signals, SignalDecisionPipeline
22 | |     from ai_trading.logging import logger
   | |_________________________________________^
23 |   except ImportError as e:
24 |       print(f"Import error: {e}")
   |
help: Organize imports

F401 `ai_trading.signals.generate_cost_aware_signals` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/run_wfa.py:21:36
   |
19 |     from ai_trading.evaluation.walkforward import WalkForwardEvaluator
20 |     from ai_trading.data_fetcher import DataFetcher
21 |     from ai_trading.signals import generate_cost_aware_signals, SignalDecisionPipeline
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
22 |     from ai_trading.logging import logger
23 | except ImportError as e:
   |
help: Remove unused import: `ai_trading.signals.generate_cost_aware_signals`

W293 [*] Blank line contains whitespace
  --> scripts/run_wfa.py:31:1
   |
29 | def create_cost_aware_strategy(config: TradingConfig):
30 |     """Create a strategy function that uses the new cost-aware signal logic."""
31 |     
   | ^^^^
32 |     def strategy_func(train_data: dict, test_data: dict) -> list:
33 |         """
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> scripts/run_wfa.py:35:1
   |
33 |         """
34 |         Cost-aware strategy implementation for walk-forward validation.
35 |         
   | ^^^^^^^^
36 |         Args:
37 |             train_data: Dictionary of {symbol: pd.DataFrame} for training period
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> scripts/run_wfa.py:39:1
   |
37 |             train_data: Dictionary of {symbol: pd.DataFrame} for training period
38 |             test_data: Dictionary of {symbol: pd.DataFrame} for testing period
39 |             
   | ^^^^^^^^^^^^
40 |         Returns:
41 |             List of prediction dictionaries
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/run_wfa.py:44:1
   |
42 |         """
43 |         predictions = []
44 |         
   | ^^^^^^^^
45 |         # Initialize signal decision pipeline
46 |         pipeline_config = {
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/run_wfa.py:55:1
   |
53 |             "regime_volatility_threshold": 0.025  # 2.5% volatility threshold
54 |         }
55 |         
   | ^^^^^^^^
56 |         decision_pipeline = SignalDecisionPipeline(pipeline_config)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/run_wfa.py:57:1
   |
56 |         decision_pipeline = SignalDecisionPipeline(pipeline_config)
57 |         
   | ^^^^^^^^
58 |         for symbol, test_df in test_data.items():
59 |             if symbol not in train_data:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/run_wfa.py:61:1
   |
59 |             if symbol not in train_data:
60 |                 continue
61 |                 
   | ^^^^^^^^^^^^^^^^
62 |             train_df = train_data[symbol]
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/run_wfa.py:63:1
   |
62 |             train_df = train_data[symbol]
63 |             
   | ^^^^^^^^^^^^
64 |             # For each day in test period, generate signal
65 |             for i in range(1, len(test_df)):  # Start from 1 to have history
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/run_wfa.py:72:1
   |
70 |                         test_df.iloc[:i]     # Test data up to current point
71 |                     ])
72 |                     
   | ^^^^^^^^^^^^^^^^^^^^
73 |                     if len(historical_data) < 50:  # Need sufficient history
74 |                         continue
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/run_wfa.py:75:1
   |
73 |                     if len(historical_data) < 50:  # Need sufficient history
74 |                         continue
75 |                     
   | ^^^^^^^^^^^^^^^^^^^^
76 |                     # Simple model prediction (could be enhanced with ML model)
77 |                     # For now, use technical indicators to estimate edge
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/run_wfa.py:83:1
   |
81 |                         momentum = returns.tail(5).mean()  # 5-day momentum
82 |                         volatility = returns.tail(20).std()  # 20-day volatility
83 |                         
   | ^^^^^^^^^^^^^^^^^^^^^^^^
84 |                         # Combine signals for predicted edge
85 |                         predicted_edge = momentum * 0.5  # Scale momentum
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/run_wfa.py:88:1
   |
86 |                         if volatility > 0:
87 |                             predicted_edge = predicted_edge / volatility  # Risk-adjust
88 |                         
   | ^^^^^^^^^^^^^^^^^^^^^^^^
89 |                         # Cap the predicted edge
90 |                         predicted_edge = max(-0.05, min(0.05, predicted_edge))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/run_wfa.py:91:1
   |
89 |                         # Cap the predicted edge
90 |                         predicted_edge = max(-0.05, min(0.05, predicted_edge))
91 |                         
   | ^^^^^^^^^^^^^^^^^^^^^^^^
92 |                     except Exception:
93 |                         predicted_edge = 0.0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/run_wfa.py:94:1
   |
92 |                     except Exception:
93 |                         predicted_edge = 0.0
94 |                     
   | ^^^^^^^^^^^^^^^^^^^^
95 |                     # Evaluate signal with cost-awareness
96 |                     decision = decision_pipeline.evaluate_signal_with_costs(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:99:1
    |
 97 |                         symbol, historical_data, predicted_edge, quantity=1000
 98 |                     )
 99 |                     
    | ^^^^^^^^^^^^^^^^^^^^
100 |                     if decision.get("decision") == "ACCEPT":
101 |                         # Simulate trade execution
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:103:1
    |
101 |                         # Simulate trade execution
102 |                         entry_price = test_df['close'].iloc[i]
103 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
104 |                         # Find exit point (next 5 days or stop/target)
105 |                         exit_idx = min(i + 5, len(test_df) - 1)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:107:1
    |
105 |                         exit_idx = min(i + 5, len(test_df) - 1)
106 |                         exit_price = test_df['close'].iloc[exit_idx]
107 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
108 |                         # Check if stop loss or take profit would have been hit
109 |                         stop_loss = decision.get("stop_loss", entry_price * 0.98)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:111:1
    |
109 |                         stop_loss = decision.get("stop_loss", entry_price * 0.98)
110 |                         take_profit = decision.get("take_profit", entry_price * 1.02)
111 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
112 |                         # Simple exit logic (could be enhanced)
113 |                         for j in range(i + 1, exit_idx + 1):
    |
help: Remove whitespace from blank line

E501 Line too long (118 > 100)
   --> scripts/run_wfa.py:114:101
    |
112 |                         # Simple exit logic (could be enhanced)
113 |                         for j in range(i + 1, exit_idx + 1):
114 |                             day_low = test_df['low'].iloc[j] if 'low' in test_df.columns else test_df['close'].iloc[j]
    |                                                                                                     ^^^^^^^^^^^^^^^^^^
115 |                             day_high = test_df['high'].iloc[j] if 'high' in test_df.columns else test_df['close'].iloc[j]
    |

E501 Line too long (121 > 100)
   --> scripts/run_wfa.py:115:101
    |
113 |                         for j in range(i + 1, exit_idx + 1):
114 |                             day_low = test_df['low'].iloc[j] if 'low' in test_df.columns else test_df['close'].iloc[j]
115 |                             day_high = test_df['high'].iloc[j] if 'high' in test_df.columns else test_df['close'].iloc[j]
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
116 |                             
117 |                             if day_low <= stop_loss:
    |

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:116:1
    |
114 | …                     day_low = test_df['low'].iloc[j] if 'low' in test_df.columns else test_df['close'].iloc[j]
115 | …                     day_high = test_df['high'].iloc[j] if 'high' in test_df.columns else test_df['close'].iloc[j]
116 | …                     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
117 | …                     if day_low <= stop_loss:
118 | …                         exit_price = stop_loss
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:123:1
    |
121 |                                 exit_price = take_profit
122 |                                 break
123 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
124 |                         signal = 1 if predicted_edge > 0 else -1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:125:1
    |
124 |                         signal = 1 if predicted_edge > 0 else -1
125 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
126 |                         predictions.append({
127 |                             "symbol": symbol,
    |
help: Remove whitespace from blank line

E501 Line too long (125 > 100)
   --> scripts/run_wfa.py:133:101
    |
131 |                             "predicted_edge": predicted_edge,
132 |                             "decision_reason": decision.get("reason", "UNKNOWN"),
133 |                             "timestamp": test_df.index[i] if hasattr(test_df.index[i], 'strftime') else str(test_df.index[i])
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
134 |                         })
    |

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:135:1
    |
133 |                             "timestamp": test_df.index[i] if hasattr(test_df.index[i], 'strftime') else str(test_df.index[i])
134 |                         })
135 |                 
    | ^^^^^^^^^^^^^^^^
136 |                 except Exception as e:
137 |                     logger.debug("Signal generation failed for %s at %d: %s", symbol, i, e)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:139:1
    |
137 |                     logger.debug("Signal generation failed for %s at %d: %s", symbol, i, e)
138 |                     continue
139 |         
    | ^^^^^^^^
140 |         return predictions
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:141:1
    |
140 |         return predictions
141 |     
    | ^^^^
142 |     return strategy_func
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:149:1
    |
147 |     try:
148 |         logger.info("Starting walk-forward validation for %d symbols", len(symbols))
149 |         
    | ^^^^^^^^
150 |         # Initialize components
151 |         data_fetcher = DataFetcher()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:152:1
    |
150 |         # Initialize components
151 |         data_fetcher = DataFetcher()
152 |         
    | ^^^^^^^^
153 |         # Create data provider function
154 |         def data_provider(symbol: str, start_date: datetime, end_date: datetime):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:160:1
    |
158 |                 logger.warning("Failed to get data for %s: %s", symbol, e)
159 |                 return None
160 |         
    | ^^^^^^^^
161 |         # Create strategy function
162 |         strategy_func = create_cost_aware_strategy(config)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:163:1
    |
161 |         # Create strategy function
162 |         strategy_func = create_cost_aware_strategy(config)
163 |         
    | ^^^^^^^^
164 |         # Initialize walk-forward evaluator
165 |         wf_config = {
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> scripts/run_wfa.py:168:51
    |
166 |             "mode": "rolling",
167 |             "train_span": 252,  # 1 year training
168 |             "test_span": 63,    # 3 months testing  
    |                                                   ^^
169 |             "step_size": 21,    # 1 month steps
170 |             "embargo_pct": 0.01,
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:174:1
    |
172 |             "enable_plots": False
173 |         }
174 |         
    | ^^^^^^^^
175 |         evaluator = WalkForwardEvaluator(**wf_config)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:176:1
    |
175 |         evaluator = WalkForwardEvaluator(**wf_config)
176 |         
    | ^^^^^^^^
177 |         # Run validation
178 |         results = evaluator.run_walkforward(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:183:1
    |
181 |             data_provider=data_provider
182 |         )
183 |         
    | ^^^^^^^^
184 |         return results
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:185:1
    |
184 |         return results
185 |         
    | ^^^^^^^^
186 |     except Exception as e:
187 |         logger.error("Walk-forward validation failed: %s", e)
    |
help: Remove whitespace from blank line

E501 Line too long (109 > 100)
   --> scripts/run_wfa.py:194:101
    |
192 |     """Main entry point for WFA runner."""
193 |     parser = argparse.ArgumentParser(description="Run walk-forward validation")
194 |     parser.add_argument("--symbols", type=str, help="Comma-separated list of symbols (default: from config)")
    |                                                                                                     ^^^^^^^^^
195 |     parser.add_argument("--universe-file", type=str, help="Path to file containing symbols list")
196 |     parser.add_argument("--dry-run", action="store_true", help="Validate setup without running")
    |

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:197:1
    |
195 |     parser.add_argument("--universe-file", type=str, help="Path to file containing symbols list")
196 |     parser.add_argument("--dry-run", action="store_true", help="Validate setup without running")
197 |     
    | ^^^^
198 |     args = parser.parse_args()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:199:1
    |
198 |     args = parser.parse_args()
199 |     
    | ^^^^
200 |     try:
201 |         # Load configuration
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:203:1
    |
201 |         # Load configuration
202 |         config = TradingConfig.from_env()
203 |         
    | ^^^^^^^^
204 |         # Determine symbols to validate
205 |         if args.symbols:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:212:1
    |
210 |                 logger.error("Universe file not found: %s", universe_file)
211 |                 sys.exit(1)
212 |             
    | ^^^^^^^^^^^^
213 |             with open(universe_file, 'r') as f:
214 |                 symbols = [line.strip() for line in f if line.strip() and not line.startswith('#')]
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> scripts/run_wfa.py:218:57
    |
216 |             # Use default universe from config or common stocks
217 |             symbols = getattr(config, 'default_universe', [
218 |                 'AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 
    |                                                         ^
219 |                 'META', 'NVDA', 'AMD', 'NFLX', 'DIS'
220 |             ])
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:221:1
    |
219 |                 'META', 'NVDA', 'AMD', 'NFLX', 'DIS'
220 |             ])
221 |         
    | ^^^^^^^^
222 |         if not symbols:
223 |             logger.error("No symbols specified for validation")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:225:1
    |
223 |             logger.error("No symbols specified for validation")
224 |             sys.exit(1)
225 |         
    | ^^^^^^^^
226 |         logger.info("Walk-forward validation universe: %s", symbols)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:227:1
    |
226 |         logger.info("Walk-forward validation universe: %s", symbols)
227 |         
    | ^^^^^^^^
228 |         if args.dry_run:
229 |             logger.info("Dry run mode - validation setup looks good")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:234:1
    |
232 |             print("✓ Ready to run walk-forward validation")
233 |             return
234 |         
    | ^^^^^^^^
235 |         # Run validation
236 |         results = run_walkforward_validation(symbols, config)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:237:1
    |
235 |         # Run validation
236 |         results = run_walkforward_validation(symbols, config)
237 |         
    | ^^^^^^^^
238 |         # Print summary
239 |         if results and "performance_summary" in results:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:244:1
    |
242 |             print("WALK-FORWARD VALIDATION RESULTS")
243 |             print("="*50)
244 |             
    | ^^^^^^^^^^^^
245 |             if "sharpe_ratio" in perf:
246 |                 print(f"Average Sharpe Ratio: {perf['sharpe_ratio'].get('mean', 0):.3f}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:251:1
    |
249 |             if "max_drawdown" in perf:
250 |                 print(f"Average Max Drawdown: {perf['max_drawdown'].get('mean', 0):.3f}")
251 |             
    | ^^^^^^^^^^^^
252 |             grade = results.get("performance_grade", "N/A")
253 |             print(f"Performance Grade: {grade}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:254:1
    |
252 |             grade = results.get("performance_grade", "N/A")
253 |             print(f"Performance Grade: {grade}")
254 |             
    | ^^^^^^^^^^^^
255 |             validation_summary = results.get("validation_summary", {})
256 |             print(f"Valid Windows: {validation_summary.get('valid_windows', 0)}/{validation_summary.get('total_windows', 0)}")
    |
help: Remove whitespace from blank line

E501 Line too long (126 > 100)
   --> scripts/run_wfa.py:256:101
    |
255 |             validation_summary = results.get("validation_summary", {})
256 |             print(f"Valid Windows: {validation_summary.get('valid_windows', 0)}/{validation_summary.get('total_windows', 0)}")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
257 |             
258 |             print("\nArtifacts saved to: artifacts/wfa/")
    |

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:257:1
    |
255 |             validation_summary = results.get("validation_summary", {})
256 |             print(f"Valid Windows: {validation_summary.get('valid_windows', 0)}/{validation_summary.get('total_windows', 0)}")
257 |             
    | ^^^^^^^^^^^^
258 |             print("\nArtifacts saved to: artifacts/wfa/")
259 |         else:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/run_wfa.py:262:1
    |
260 |             print("❌ Walk-forward validation failed - check logs for details")
261 |             sys.exit(1)
262 |         
    | ^^^^^^^^
263 |     except KeyboardInterrupt:
264 |         logger.info("Walk-forward validation interrupted by user")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/run_wfa.py:272:11
    |
271 | if __name__ == "__main__":
272 |     main()
    |           ^
    |
help: Add trailing newline

E501 Line too long (107 > 100)
   --> scripts/scalability_manager.py:98:101
    |
 96 |         self.logger.info(f"Load balancer initialized with {self.max_workers} workers")
 97 |
 98 |     def submit_task(self, func: Callable, *args, priority: int = 0, **kwargs) -> concurrent.futures.Future:
    |                                                                                                     ^^^^^^^
 99 |         """Submit task with load balancing and priority."""
100 |         try:
    |

E501 Line too long (102 > 100)
   --> scripts/scalability_manager.py:244:101
    |
242 |             new_workers = max(self.min_workers, self.max_workers - 1)
243 |             self._resize_worker_pool(new_workers)
244 |             self.logger.info(f"Scaled down to {new_workers} workers (utilization: {utilization:.1%})")
    |                                                                                                     ^^
245 |
246 |     def _resize_worker_pool(self, new_size: int):
    |

E501 Line too long (111 > 100)
   --> scripts/scalability_manager.py:288:101
    |
286 |         self.backup_dir.mkdir(parents=True, exist_ok=True)
287 |
288 |         self.logger.info(f"Data replication manager initialized: {self.primary_data_dir} -> {self.backup_dir}")
    |                                                                                                     ^^^^^^^^^^^
289 |
290 |     def create_backup(self, backup_name: str | None = None) -> dict[str, Any]:
    |

E501 Line too long (129 > 100)
   --> scripts/scalability_manager.py:673:101
    |
671 |             current_downtime += current_time - self.downtime_start
672 |
673 |         uptime_percentage = ((total_uptime - current_downtime) / total_uptime * 100) if total_uptime.total_seconds() > 0 else 100
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
674 |
675 |         return {
    |

E501 Line too long (103 > 100)
   --> scripts/scalability_manager.py:688:101
    |
686 |             'load_balancer': self.load_balancer.get_performance_metrics(),
687 |             'backup_system': self.data_replication.get_backup_status(),
688 |             'last_health_check': self.last_health_check.isoformat() if self.last_health_check else None
    |                                                                                                     ^^^
689 |         }
    |

E501 Line too long (101 > 100)
   --> scripts/security_manager.py:501:101
    |
500 |             # Check if client should be locked
501 |             if len(self.failed_attempts[client_ip]) >= self.security_settings['max_failed_attempts']:
    |                                                                                                     ^
502 |                 self.locked_clients[client_ip] = current_time + self.security_settings['lockout_duration']
503 |                 self._log_security_event(
    |

E501 Line too long (106 > 100)
   --> scripts/security_manager.py:502:101
    |
500 |             # Check if client should be locked
501 |             if len(self.failed_attempts[client_ip]) >= self.security_settings['max_failed_attempts']:
502 |                 self.locked_clients[client_ip] = current_time + self.security_settings['lockout_duration']
    |                                                                                                     ^^^^^^
503 |                 self._log_security_event(
504 |                     "CLIENT_LOCKED",
    |

E501 Line too long (104 > 100)
   --> scripts/security_manager.py:614:101
    |
612 |                 'active_rate_limits': self.rate_limiter.get_stats(),
613 |                 'locked_clients': len(self.locked_clients),
614 |                 'failed_auth_attempts': sum(len(attempts) for attempts in self.failed_attempts.values())
    |                                                                                                     ^^^^
615 |             },
616 |             'event_breakdown': dict(event_summary),
    |

E501 Line too long (103 > 100)
   --> scripts/security_manager.py:650:101
    |
648 |         else:
649 |             audit_results['audit_checks']['data_encryption'] = 'FAIL'
650 |             audit_results['recommendations'].append("Enable data encryption for sensitive information")
    |                                                                                                     ^^^
651 |             score -= 15
    |

E501 Line too long (103 > 100)
   --> scripts/security_manager.py:679:101
    |
677 |             audit_results['audit_checks']['recent_incidents'] = 'FAIL'
678 |             audit_results['recommendations'].append(
679 |                 f"Address {len(recent_critical_events)} critical security incidents from last 24 hours"
    |                                                                                                     ^^^
680 |             )
681 |             score -= 25
    |

I001 [*] Import block is un-sorted or un-formatted
 --> scripts/slippage.py:1:1
  |
1 | import logging
  | ^^^^^^^^^^^^^^
2 | try:  # AI-AGENT-REF: canonical env validation
3 |     from ai_trading.validation.validate_env import Settings
  |
help: Organize imports

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
 --> scripts/slippage.py:5:20
  |
3 |     from ai_trading.validation.validate_env import Settings
4 |     settings = Settings()
5 | except Exception:  # noqa: BLE001
  |                    ^^^^^^^^^^^^^^
6 |     settings = None
  |
help: Remove unused `noqa` directive

E501 Line too long (131 > 100)
  --> scripts/smoke_imports.py:22:101
   |
22 | def test_class_instantiation(module_name: str, class_name: str, args=None, kwargs=None, description: str = "") -> Tuple[bool, str]:
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
23 |     """Test importing and instantiating a class."""
24 |     args = args or []
   |

W293 [*] Blank line contains whitespace
  --> scripts/smoke_imports.py:38:1
   |
36 |     """Run smoke tests for critical imports."""
37 |     tests = []
38 |     
   | ^^^^
39 |     # Core package imports
40 |     tests.append(test_import("ai_trading", "- core package"))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/smoke_imports.py:51:1
   |
49 |     tests.append(test_import("ai_trading.utils.base", "- utils"))
50 |     tests.append(test_import("ai_trading.integrations.rate_limit", "- rate limiter"))
51 |     
   | ^^^^
52 |     # Monitoring classes - critical for startup
53 |     try:
   |
help: Remove whitespace from blank line

F401 `ai_trading.monitoring.MetricsCollector` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/smoke_imports.py:54:43
   |
52 |     # Monitoring classes - critical for startup
53 |     try:
54 |         from ai_trading.monitoring import MetricsCollector, PerformanceMonitor
   |                                           ^^^^^^^^^^^^^^^^
55 |         tests.append((True, "✅ MetricsCollector and PerformanceMonitor imported successfully"))
56 |     except ImportError as e:
   |
help: Remove unused import

F401 `ai_trading.monitoring.PerformanceMonitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/smoke_imports.py:54:61
   |
52 |     # Monitoring classes - critical for startup
53 |     try:
54 |         from ai_trading.monitoring import MetricsCollector, PerformanceMonitor
   |                                                             ^^^^^^^^^^^^^^^^^^
55 |         tests.append((True, "✅ MetricsCollector and PerformanceMonitor imported successfully"))
56 |     except ImportError as e:
   |
help: Remove unused import

W293 [*] Blank line contains whitespace
  --> scripts/smoke_imports.py:58:1
   |
56 |     except ImportError as e:
57 |         tests.append((False, f"❌ Failed to import monitoring classes: {e}"))
58 |     
   | ^^^^
59 |     # Test monitoring class instantiation
60 |     tests.append(test_class_instantiation(
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> scripts/smoke_imports.py:65:55
   |
63 |     ))
64 |     tests.append(test_class_instantiation(
65 |         "ai_trading.monitoring", "PerformanceMonitor", 
   |                                                       ^
66 |         description="- performance monitor instantiation"
67 |     ))
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> scripts/smoke_imports.py:68:1
   |
66 |         description="- performance monitor instantiation"
67 |     ))
68 |     
   | ^^^^
69 |     # Previously optional dependencies now required
70 |     tests.append(test_import("pandas_market_calendars", "- market calendars"))
   |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
  --> scripts/smoke_imports.py:77:101
   |
75 |     tests.append(test_import("ai_trading.portfolio.optimizer", "- portfolio optimizer"))
76 |     tests.append(test_import("ai_trading.execution.transaction_costs", "- transaction costs"))
77 |     tests.append(test_import("scripts.transaction_cost_calculator", "- transaction cost calculator shim"))
   |                                                                                                     ^^^^^^
78 |     tests.append(test_import("scripts.portfolio_optimizer", "- portfolio optimizer shim"))
79 |     tests.append(test_import("scripts.strategy_allocator", "- strategy allocator"))
   |

W293 [*] Blank line contains whitespace
  --> scripts/smoke_imports.py:80:1
   |
78 |     tests.append(test_import("scripts.portfolio_optimizer", "- portfolio optimizer shim"))
79 |     tests.append(test_import("scripts.strategy_allocator", "- strategy allocator"))
80 |     
   | ^^^^
81 |     # Key class instantiations
82 |     tests.append(test_class_instantiation(
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> scripts/smoke_imports.py:83:57
   |
81 |     # Key class instantiations
82 |     tests.append(test_class_instantiation(
83 |         "ai_trading.config.management", "TradingConfig", 
   |                                                         ^
84 |         description="- config with all new attributes"
85 |     ))
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> scripts/smoke_imports.py:86:1
   |
84 |         description="- config with all new attributes"
85 |     ))
86 |     
   | ^^^^
87 |     tests.append(test_class_instantiation(
88 |         "ai_trading.integrations.rate_limit", "RateLimiter",
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/smoke_imports.py:91:1
   |
89 |         description="- rate limiter with config support"
90 |     ))
91 |     
   | ^^^^
92 |     # Test TradingConfig.from_env
93 |     try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/smoke_imports.py:96:1
   |
94 |         from ai_trading.config.management import TradingConfig
95 |         cfg = TradingConfig.from_env()
96 |         
   | ^^^^^^^^
97 |         # Check that new attributes are present
98 |         required_attrs = [
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> scripts/smoke_imports.py:101:73
    |
 99 |             'trading_mode', 'alpaca_base_url', 'sleep_interval', 'max_retries',
100 |             'backoff_factor', 'max_backoff_interval', 'pct', 'MODEL_PATH',
101 |             'scheduler_iterations', 'scheduler_sleep_seconds', 'window', 
    |                                                                         ^
102 |             'enabled', 'capacity', 'refill_rate', 'queue_timeout'
103 |         ]
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> scripts/smoke_imports.py:104:1
    |
102 |             'enabled', 'capacity', 'refill_rate', 'queue_timeout'
103 |         ]
104 |         
    | ^^^^^^^^
105 |         missing_attrs = []
106 |         for attr in required_attrs:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_imports.py:109:1
    |
107 |             if not hasattr(cfg, attr):
108 |                 missing_attrs.append(attr)
109 |         
    | ^^^^^^^^
110 |         if missing_attrs:
111 |             tests.append((False, f"❌ TradingConfig missing attributes: {missing_attrs}"))
    |
help: Remove whitespace from blank line

F541 [*] f-string without any placeholders
   --> scripts/smoke_imports.py:113:33
    |
111 |             tests.append((False, f"❌ TradingConfig missing attributes: {missing_attrs}"))
112 |         else:
113 |             tests.append((True, f"✅ TradingConfig has all required attributes"))
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
114 |             
115 |         # Test safe dict export
    |
help: Remove extraneous `f` prefix

W293 [*] Blank line contains whitespace
   --> scripts/smoke_imports.py:114:1
    |
112 |         else:
113 |             tests.append((True, f"✅ TradingConfig has all required attributes"))
114 |             
    | ^^^^^^^^^^^^
115 |         # Test safe dict export
116 |         safe_dict = cfg.to_dict(safe=True)
    |
help: Remove whitespace from blank line

E501 Line too long (105 > 100)
   --> scripts/smoke_imports.py:120:100
    |
118 |             tests.append((True, "✅ TradingConfig.to_dict(safe=True) redacts secrets"))
119 |         else:
120 |             tests.append((False, "❌ TradingConfig.to_dict(safe=True) does not redact secrets properly"))
    |                                                                                                     ^^^^^
121 |             
122 |     except Exception as e:
    |

W293 [*] Blank line contains whitespace
   --> scripts/smoke_imports.py:121:1
    |
119 |         else:
120 |             tests.append((False, "❌ TradingConfig.to_dict(safe=True) does not redact secrets properly"))
121 |             
    | ^^^^^^^^^^^^
122 |     except Exception as e:
123 |         tests.append((False, f"❌ TradingConfig.from_env() failed: {e}"))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_imports.py:124:1
    |
122 |     except Exception as e:
123 |         tests.append((False, f"❌ TradingConfig.from_env() failed: {e}"))
124 |         
    | ^^^^^^^^
125 |     # Test StrategyAllocator resolution (should not use _Stub anymore)
126 |     try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_imports.py:135:1
    |
133 |     except Exception as e:
134 |         tests.append((False, f"❌ StrategyAllocator instantiation failed: {e}"))
135 |     
    | ^^^^
136 |     # Print results
137 |     print("Import Smoke Tests")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_imports.py:139:1
    |
137 |     print("Import Smoke Tests")
138 |     print("=" * 50)
139 |     
    | ^^^^
140 |     passed = 0
141 |     failed = 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_imports.py:142:1
    |
140 |     passed = 0
141 |     failed = 0
142 |     
    | ^^^^
143 |     for success, message in tests:
144 |         print(message)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_imports.py:149:1
    |
147 |         else:
148 |             failed += 1
149 |     
    | ^^^^
150 |     print("\n" + "=" * 50)
151 |     print(f"Results: {passed} passed, {failed} failed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_imports.py:152:1
    |
150 |     print("\n" + "=" * 50)
151 |     print(f"Results: {passed} passed, {failed} failed")
152 |     
    | ^^^^
153 |     if failed > 0:
154 |         print(f"\n❌ {failed} tests failed. Check dependencies and import paths.")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/smoke_imports.py:162:11
    |
161 | if __name__ == "__main__":
162 |     main()
    |           ^
    |
help: Add trailing newline

W291 Trailing whitespace
 --> scripts/smoke_runtime.py:6:40
  |
5 | Tests that:
6 | 1. LazyBotContext has .params attribute 
  |                                        ^
7 | 2. pandas MultiIndex is used instead of private _RealMultiIndex
8 | 3. _prepare_run can access runtime.params without AttributeError
  |
help: Remove trailing whitespace

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/smoke_runtime.py:11:1
   |
 9 |   """
10 |
11 | / import sys
12 | | import os
   | |_________^
13 |   sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/smoke_runtime.py:24:1
   |
22 |     try:
23 |         import pandas as pd
24 |         
   | ^^^^^^^^
25 |         # Test that pandas MultiIndex is available and works
26 |         multi_idx = pd.MultiIndex.from_arrays([['A'], [1]], names=['sym', 'field'])
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/smoke_runtime.py:28:1
   |
26 |         multi_idx = pd.MultiIndex.from_arrays([['A'], [1]], names=['sym', 'field'])
27 |         print(f"✓ pandas.MultiIndex works: {type(multi_idx)}")
28 |         
   | ^^^^^^^^
29 |         # Test isinstance check (this is what the fixed code uses)
30 |         is_multiindex = isinstance(multi_idx, pd.MultiIndex)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/smoke_runtime.py:32:1
   |
30 |         is_multiindex = isinstance(multi_idx, pd.MultiIndex)
31 |         print(f"✓ isinstance(columns, pd.MultiIndex) works: {is_multiindex}")
32 |         
   | ^^^^^^^^
33 |         return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/smoke_runtime.py:34:1
   |
33 |         return True
34 |         
   | ^^^^^^^^
35 |     except Exception as e:
36 |         print(f"✗ pandas MultiIndex test failed: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/smoke_runtime.py:44:1
   |
42 |     try:
43 |         from ai_trading.core.bot_engine import LazyBotContext
44 |         
   | ^^^^^^^^
45 |         # Create context (won't initialize fully in test mode)
46 |         runtime = LazyBotContext()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/smoke_runtime.py:47:1
   |
45 |         # Create context (won't initialize fully in test mode)
46 |         runtime = LazyBotContext()
47 |         
   | ^^^^^^^^
48 |         # Test that params property exists and is accessible
49 |         has_params = hasattr(runtime, 'params')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/smoke_runtime.py:51:1
   |
49 |         has_params = hasattr(runtime, 'params')
50 |         print(f"✓ LazyBotContext has params attribute: {has_params}")
51 |         
   | ^^^^^^^^
52 |         if not has_params:
53 |             return False
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/smoke_runtime.py:54:1
   |
52 |         if not has_params:
53 |             return False
54 |             
   | ^^^^^^^^^^^^
55 |         return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/smoke_runtime.py:56:1
   |
55 |         return True
56 |         
   | ^^^^^^^^
57 |     except Exception as e:
58 |         print(f"✗ LazyBotContext params test failed: {e}")
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/smoke_runtime.py:65:9
   |
63 |     """Test that _prepare_run can access runtime.params."""
64 |     try:
65 |         from ai_trading.core.bot_engine import _prepare_run, BotState
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
66 |         
67 |         # Create mock runtime with params attribute 
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/smoke_runtime.py:66:1
   |
64 |     try:
65 |         from ai_trading.core.bot_engine import _prepare_run, BotState
66 |         
   | ^^^^^^^^
67 |         # Create mock runtime with params attribute 
68 |         class MockAPI:
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> scripts/smoke_runtime.py:67:52
   |
65 |         from ai_trading.core.bot_engine import _prepare_run, BotState
66 |         
67 |         # Create mock runtime with params attribute 
   |                                                    ^
68 |         class MockAPI:
69 |             def get_account(self):
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> scripts/smoke_runtime.py:74:1
   |
72 |                         self.equity = "10000"
73 |                 return MockAccount()
74 |         
   | ^^^^^^^^
75 |         class MockCapitalScaler:
76 |             def update(self, runtime, equity):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/smoke_runtime.py:78:1
   |
76 |             def update(self, runtime, equity):
77 |                 pass
78 |         
   | ^^^^^^^^
79 |         class MockRuntime:
80 |             def __init__(self):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/smoke_runtime.py:88:1
   |
86 |                     "MAX_POSITION_SIZE": 1000
87 |                 }
88 |         
   | ^^^^^^^^
89 |         runtime = MockRuntime()
90 |         state = BotState()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/smoke_runtime.py:91:1
   |
89 |         runtime = MockRuntime()
90 |         state = BotState()
91 |         
   | ^^^^^^^^
92 |         # This should not raise AttributeError: 'MockRuntime' object has no attribute 'params'
93 |         # Note: It may raise other errors due to missing dependencies, but not AttributeError on params
   |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
  --> scripts/smoke_runtime.py:93:101
   |
92 |         # This should not raise AttributeError: 'MockRuntime' object has no attribute 'params'
93 |         # Note: It may raise other errors due to missing dependencies, but not AttributeError on params
   |                                                                                                     ^^^
94 |         try:
95 |             _prepare_run(runtime, state)
   |

W293 [*] Blank line contains whitespace
   --> scripts/smoke_runtime.py:106:1
    |
104 |             # Other exceptions are fine, we just want to test params access
105 |             print(f"✓ _prepare_run params access works (other error: {type(e).__name__})")
106 |         
    | ^^^^^^^^
107 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_runtime.py:108:1
    |
107 |         return True
108 |         
    | ^^^^^^^^
109 |     except Exception as e:
110 |         print(f"✗ _prepare_run test failed: {e}")
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/smoke_runtime.py:117:9
    |
115 |       """Test the empty DataFrame helper creates valid indexes."""
116 |       try:
117 | /         from ai_trading.core.bot_engine import _create_empty_bars_dataframe
118 | |         import pandas as pd
    | |___________________________^
119 |           
120 |           # Test the helper function
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> scripts/smoke_runtime.py:119:1
    |
117 |         from ai_trading.core.bot_engine import _create_empty_bars_dataframe
118 |         import pandas as pd
119 |         
    | ^^^^^^^^
120 |         # Test the helper function
121 |         empty_df = _create_empty_bars_dataframe("daily")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_runtime.py:122:1
    |
120 |         # Test the helper function
121 |         empty_df = _create_empty_bars_dataframe("daily")
122 |         
    | ^^^^^^^^
123 |         print(f"✓ Empty DataFrame created: {empty_df.shape}")
124 |         print(f"✓ Index type: {type(empty_df.index)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_runtime.py:125:1
    |
123 |         print(f"✓ Empty DataFrame created: {empty_df.shape}")
124 |         print(f"✓ Index type: {type(empty_df.index)}")
125 |         
    | ^^^^^^^^
126 |         # Verify it's a proper DatetimeIndex with UTC timezone
127 |         assert isinstance(empty_df.index, pd.DatetimeIndex)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_runtime.py:130:1
    |
128 |         assert str(empty_df.index.tz) == "UTC"
129 |         assert empty_df.index.name == "timestamp"
130 |         
    | ^^^^^^^^
131 |         print("✓ Empty DataFrame has valid DatetimeIndex with UTC timezone")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_runtime.py:132:1
    |
131 |         print("✓ Empty DataFrame has valid DatetimeIndex with UTC timezone")
132 |         
    | ^^^^^^^^
133 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_runtime.py:134:1
    |
133 |         return True
134 |         
    | ^^^^^^^^
135 |     except Exception as e:
136 |         print(f"✗ Empty DataFrame helper test failed: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_runtime.py:144:1
    |
142 |     print("Running smoke tests for pandas index and runtime context fixes...")
143 |     print()
144 |     
    | ^^^^
145 |     tests = [
146 |         test_pandas_multiindex_usage,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_runtime.py:151:1
    |
149 |         test_prepare_run_signature,
150 |     ]
151 |     
    | ^^^^
152 |     passed = 0
153 |     for test in tests:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_runtime.py:164:1
    |
162 |             print(f"✗ FAILED with exception: {e}")
163 |         print()
164 |     
    | ^^^^
165 |     print(f"Smoke test results: {passed}/{len(tests)} tests passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/smoke_runtime.py:166:1
    |
165 |     print(f"Smoke test results: {passed}/{len(tests)} tests passed")
166 |     
    | ^^^^
167 |     if passed == len(tests):
168 |         print("🎉 All tests passed - OK")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/smoke_runtime.py:176:21
    |
175 | if __name__ == "__main__":
176 |     sys.exit(main())
    |                     ^
    |
help: Add trailing newline

E501 Line too long (110 > 100)
  --> scripts/strategy_allocator.py:59:101
   |
58 |         if not isinstance(signals_by_strategy, dict):
59 |             logger.warning("Allocate called with non-dict signals_by_strategy: %s", type(signals_by_strategy))
   |                                                                                                     ^^^^^^^^^^
60 |             return []
   |

E501 Line too long (114 > 100)
  --> scripts/strategy_allocator.py:64:101
   |
62 |         # Count total signals for logging
63 |         total_signals = sum(len(signals) for signals in signals_by_strategy.values())
64 |         logger.debug(f"Allocate called with {len(signals_by_strategy)} strategies, {total_signals} total signals")
   |                                                                                                     ^^^^^^^^^^^^^^
65 |
66 |         # AI-AGENT-REF: Enhanced debugging for signal confirmation troubleshooting
   |

E501 Line too long (105 > 100)
  --> scripts/strategy_allocator.py:67:101
   |
66 |         # AI-AGENT-REF: Enhanced debugging for signal confirmation troubleshooting
67 |         logger.debug(f"Current config: signal_confirmation_bars={self.config.signal_confirmation_bars}, "
   |                                                                                                     ^^^^^
68 |                     f"min_confidence={self.config.min_confidence}, delta_threshold={self.config.delta_threshold}")
69 |         logger.debug(f"Current signal_history state: {dict(self.signal_history)}")
   |

E501 Line too long (114 > 100)
  --> scripts/strategy_allocator.py:68:101
   |
66 |         # AI-AGENT-REF: Enhanced debugging for signal confirmation troubleshooting
67 |         logger.debug(f"Current config: signal_confirmation_bars={self.config.signal_confirmation_bars}, "
68 |                     f"min_confidence={self.config.min_confidence}, delta_threshold={self.config.delta_threshold}")
   |                                                                                                     ^^^^^^^^^^^^^^
69 |         logger.debug(f"Current signal_history state: {dict(self.signal_history)}")
   |

E501 Line too long (124 > 100)
  --> scripts/strategy_allocator.py:75:101
   |
73 |         # AI-AGENT-REF: Log confirmed signals for debugging
74 |         confirmed_count = sum(len(signals) for signals in confirmed_signals.values())
75 |         logger.debug(f"Signal confirmation produced {confirmed_count} confirmed signals from {total_signals} input signals")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
76 |
77 |         # AI-AGENT-REF: confidence gate before risk sizing
   |

E501 Line too long (102 > 100)
   --> scripts/strategy_allocator.py:127:101
    |
125 |             for s in signals:
126 |                 # Validate signal object has required attributes
127 |                 if not hasattr(s, 'symbol') or not hasattr(s, 'side') or not hasattr(s, 'confidence'):
    |                                                                                                     ^^
128 |                     logger.warning(f"Invalid signal object missing required attributes: {s}")
129 |                     continue
    |

E501 Line too long (144 > 100)
   --> scripts/strategy_allocator.py:162:101
    |
161 | …l value
162 | …ZED | symbol={s.symbol} original={original_confidence:.4f} normalized={confidence:.4f}")
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
163 | …
164 | …
    |

E501 Line too long (112 > 100)
   --> scripts/strategy_allocator.py:176:101
    |
174 |                 # AI-AGENT-REF: Ensure signal_confirmation_bars is valid before using it
175 |                 confirmation_bars = getattr(self.config, 'signal_confirmation_bars', 2)
176 |                 if confirmation_bars is None or not isinstance(confirmation_bars, int) or confirmation_bars < 1:
    |                                                                                                     ^^^^^^^^^^^^
177 |                     logger.warning(f"Invalid signal_confirmation_bars: {confirmation_bars}, using default 2")
178 |                     confirmation_bars = 2
    |

E501 Line too long (109 > 100)
   --> scripts/strategy_allocator.py:177:101
    |
175 |                 confirmation_bars = getattr(self.config, 'signal_confirmation_bars', 2)
176 |                 if confirmation_bars is None or not isinstance(confirmation_bars, int) or confirmation_bars < 1:
177 |                     logger.warning(f"Invalid signal_confirmation_bars: {confirmation_bars}, using default 2")
    |                                                                                                     ^^^^^^^^^
178 |                     confirmation_bars = 2
    |

E501 Line too long (109 > 100)
   --> scripts/strategy_allocator.py:193:101
    |
191 |                         avg_conf = sum(history_values) / len(history_values)
192 |                         if not isinstance(avg_conf, int | float) or avg_conf < 0:
193 |                             logger.warning(f"Invalid average confidence {avg_conf} for {s.symbol}, skipping")
    |                                                                                                     ^^^^^^^^^
194 |                             continue
195 |                     except (ZeroDivisionError, TypeError, ValueError) as e:
    |

E501 Line too long (101 > 100)
   --> scripts/strategy_allocator.py:203:101
    |
202 |                     # AI-AGENT-REF: Additional defensive check for None or invalid threshold
203 |                     if min_conf_threshold is None or not isinstance(min_conf_threshold, int | float):
    |                                                                                                     ^
204 |                         logger.warning(f"Invalid min_confidence threshold: {min_conf_threshold}, using default 0.6")
205 |                         min_conf_threshold = 0.6
    |

E501 Line too long (116 > 100)
   --> scripts/strategy_allocator.py:204:101
    |
202 |                     # AI-AGENT-REF: Additional defensive check for None or invalid threshold
203 |                     if min_conf_threshold is None or not isinstance(min_conf_threshold, int | float):
204 |                         logger.warning(f"Invalid min_confidence threshold: {min_conf_threshold}, using default 0.6")
    |                                                                                                     ^^^^^^^^^^^^^^^^
205 |                         min_conf_threshold = 0.6
    |

E501 Line too long (101 > 100)
   --> scripts/strategy_allocator.py:208:101
    |
207 |                     # AI-AGENT-REF: Enhanced debugging for confirmation decisions
208 |                     logger.debug(f"Signal confirmation check: {s.symbol}, history={history_values}, "
    |                                                                                                     ^
209 |                                 f"avg_conf={avg_conf:.4f}, threshold={min_conf_threshold:.4f}, "
210 |                                 f"bars_required={confirmation_bars}, bars_available={len(history_values)}")
    |

E501 Line too long (107 > 100)
   --> scripts/strategy_allocator.py:210:101
    |
208 |                     logger.debug(f"Signal confirmation check: {s.symbol}, history={history_values}, "
209 |                                 f"avg_conf={avg_conf:.4f}, threshold={min_conf_threshold:.4f}, "
210 |                                 f"bars_required={confirmation_bars}, bars_available={len(history_values)}")
    |                                                                                                     ^^^^^^^
211 |
212 |                     if avg_conf >= min_conf_threshold:
    |

E501 Line too long (138 > 100)
   --> scripts/strategy_allocator.py:218:101
    |
216 | …         confirmed_signal.confidence = avg_conf
217 | …         confirmed[strategy].append(confirmed_signal)
218 | …         logger.debug(f"Signal CONFIRMED: {s.symbol} with avg_conf: {avg_conf:.4f} >= threshold: {min_conf_threshold:.4f}")
    |                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
219 | …     else:
220 | …         logger.debug(f"Signal REJECTED: {s.symbol}, avg_conf: {avg_conf:.4f} < threshold: {min_conf_threshold:.4f}")
    |

E501 Line too long (132 > 100)
   --> scripts/strategy_allocator.py:220:101
    |
218 | …             logger.debug(f"Signal CONFIRMED: {s.symbol} with avg_conf: {avg_conf:.4f} >= threshold: {min_conf_threshold:.4f}")
219 | …         else:
220 | …             logger.debug(f"Signal REJECTED: {s.symbol}, avg_conf: {avg_conf:.4f} < threshold: {min_conf_threshold:.4f}")
    |                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
221 | …     else:
222 | …         logger.debug(f"Signal NOT READY: {s.symbol}, history length: {len(self.signal_history[key])}/{confirmation_bars} (need {con…
    |

E501 Line too long (198 > 100)
   --> scripts/strategy_allocator.py:222:101
    |
220 | …conf:.4f} < threshold: {min_conf_threshold:.4f}")
221 | …
222 | …en(self.signal_history[key])}/{confirmation_bars} (need {confirmation_bars - len(self.signal_history[key])} more)")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
223 | …
224 | …y[key]}")
    |

E501 Line too long (105 > 100)
   --> scripts/strategy_allocator.py:254:101
    |
252 |                 logger.info(
253 |                     "SIGNAL_SKIPPED_DELTA",
254 |                     extra={"symbol": s.symbol, "delta": delta, "threshold": self.config.delta_threshold},
    |                                                                                                     ^^^^^
255 |                 )
256 |                 continue
    |

E501 Line too long (128 > 100)
   --> scripts/strategy_allocator.py:299:101
    |
297 |                     signal.weight = min(confidence_weight, max_individual_weight)
298 |
299 |                     logger.debug(f"Assigned weight {signal.weight:.3f} to {signal.symbol} (confidence={signal.confidence:.3f})")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
300 |             else:
301 |                 # Fallback: equal weight distribution
    |

E501 Line too long (106 > 100)
   --> scripts/strategy_allocator.py:302:101
    |
300 |             else:
301 |                 # Fallback: equal weight distribution
302 |                 equal_weight = min(max_total_exposure / len(buy_signals), 0.15)  # Cap at 15% per position
    |                                                                                                     ^^^^^^
303 |                 for signal in buy_signals:
304 |                     signal.weight = equal_weight
    |

E501 Line too long (111 > 100)
   --> scripts/strategy_allocator.py:318:101
    |
316 |             # Use a reasonable default that respects exposure caps
317 |             # This should be set based on actual position size, but for safety, cap at max exposure
318 |             max_exit_weight = min(0.25, max_total_exposure / max(len(sell_signals), 1))  # Cap individual exits
    |                                                                                                     ^^^^^^^^^^^
319 |             signal.weight = max_exit_weight
    |

E501 Line too long (112 > 100)
   --> scripts/strategy_allocator.py:321:101
    |
319 |             signal.weight = max_exit_weight
320 |
321 |             logger.debug(f"Assigned exit weight {signal.weight:.3f} to {signal.symbol} (was defaulting to 1.0)")
    |                                                                                                     ^^^^^^^^^^^^
322 |
323 |         # Validate total exposure doesn't exceed cap
    |

E501 Line too long (121 > 100)
   --> scripts/strategy_allocator.py:326:101
    |
324 |         total_buy_weight = sum(s.weight for s in buy_signals)
325 |         if total_buy_weight > max_total_exposure:
326 |             logger.warning(f"Total buy weight {total_buy_weight:.3f} exceeds cap {max_total_exposure:.3f}, scaling down")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
327 |             scale_factor = max_total_exposure / total_buy_weight
328 |             for signal in buy_signals:
    |

E501 Line too long (153 > 100)
   --> scripts/strategy_allocator.py:332:101
    |
330 | …t:.3f} for {signal.symbol}")
331 | …
332 | …} buys (total weight: {sum(s.weight for s in buy_signals):.3f}), {len(sell_signals)} sells")
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
333 | …
334 | …None:
    |

E501 Line too long (106 > 100)
  --> scripts/system_diagnostic.py:93:101
   |
91 |         try:
92 |             # Use ps to find Python processes
93 |             result = subprocess.run(['ps', 'aux'], capture_output=True, text=True, timeout=30, check=True)
   |                                                                                                     ^^^^^^
94 |             if result.returncode == 0:
95 |                 lines = result.stdout.split('\n')
   |

E501 Line too long (109 > 100)
   --> scripts/system_diagnostic.py:350:101
    |
348 |         # Process recommendations
349 |         if 'process_analysis' in results and isinstance(results['process_analysis'], list):
350 |             python_processes = [p for p in results['process_analysis'] if isinstance(p, dict) and 'pid' in p]
    |                                                                                                     ^^^^^^^^^
351 |             if len(python_processes) > 1:
352 |                 recommendations.append(
    |

E501 Line too long (102 > 100)
   --> scripts/system_diagnostic.py:353:101
    |
351 |             if len(python_processes) > 1:
352 |                 recommendations.append(
353 |                     f"MEDIUM PRIORITY: Multiple Python processes detected ({len(python_processes)}). "
    |                                                                                                     ^^
354 |                     "Consider consolidating or implementing proper process management."
355 |                 )
    |

E501 Line too long (105 > 100)
   --> scripts/system_diagnostic.py:382:101
    |
380 |             if 'open_file_descriptors' in fh_data and fh_data['open_file_descriptors'] > 100:
381 |                 recommendations.append(
382 |                     f"MEDIUM PRIORITY: High file descriptor count ({fh_data['open_file_descriptors']}). "
    |                                                                                                     ^^^^^
383 |                     "Check for file handle leaks."
384 |                 )
    |

W291 Trailing whitespace
 --> scripts/system_health_checker.py:6:30
  |
4 | Provides centralized health monitoring for:
5 | - Sentiment analysis success rates
6 | - Meta-learning system status  
  |                              ^^
7 | - Order execution performance
8 | - Liquidity management effectiveness
  |
help: Remove trailing whitespace

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/system_health_checker.py:12:1
   |
10 |   """
11 |
12 | / import json
13 | | import logging
14 | | import threading
15 | | import time
16 | | from collections import defaultdict, deque
17 | | from dataclasses import dataclass, field
18 | | from datetime import UTC, datetime
19 | | from typing import Any
20 | |
21 | | from ai_trading.config import management as config
22 | | from ai_trading.config.management import TradingConfig
   | |______________________________________________________^
23 |   CONFIG = TradingConfig()
   |
help: Organize imports

W293 Blank line contains whitespace
  --> scripts/system_health_checker.py:53:1
   |
51 |     """
52 |     Comprehensive system health monitoring for the trading bot.
53 |     
   | ^^^^
54 |     Monitors all critical components and provides centralized health reporting
55 |     with automated alerting for degraded performance.
   |
help: Remove whitespace from blank line

E501 Line too long (117 > 100)
   --> scripts/system_health_checker.py:175:101
    |
173 |         for comp_name, comp_health in components.items():
174 |             if comp_health.status == "critical":
175 |                 alerts.append(f"{comp_name.title()}: CRITICAL - {comp_health.details.get('issue', 'Unknown issue')}")
    |                                                                                                     ^^^^^^^^^^^^^^^^^
176 |             elif comp_health.status == "warning":
177 |                 alerts.append(f"{comp_name.title()}: WARNING - {comp_health.details.get('issue', 'Performance degraded')}")
    |

E501 Line too long (123 > 100)
   --> scripts/system_health_checker.py:177:101
    |
175 |                 alerts.append(f"{comp_name.title()}: CRITICAL - {comp_health.details.get('issue', 'Unknown issue')}")
176 |             elif comp_health.status == "warning":
177 |                 alerts.append(f"{comp_name.title()}: WARNING - {comp_health.details.get('issue', 'Performance degraded')}")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^
178 |
179 |         return SystemHealthStatus(
    |

E501 Line too long (101 > 100)
   --> scripts/system_health_checker.py:282:101
    |
280 |                         'min_required': min_trades,
281 |                         'data_quality_score': quality_report.get('data_quality_score', 0),
282 |                         'bootstrap_enabled': getattr(config, 'META_LEARNING_BOOTSTRAP_ENABLED', True)
    |                                                                                                     ^
283 |                     }
284 |                 )
    |

E501 Line too long (105 > 100)
   --> scripts/system_health_checker.py:322:101
    |
321 |                 # Determine status
322 |                 if (success_rate >= self.health_thresholds['order_execution']['success_rate_warning'] and
    |                                                                                                     ^^^^^
323 |                     avg_fill_time <= self.health_thresholds['order_execution']['avg_fill_time_warning']):
324 |                     status = "healthy"
    |

E501 Line too long (105 > 100)
   --> scripts/system_health_checker.py:323:101
    |
321 |                 # Determine status
322 |                 if (success_rate >= self.health_thresholds['order_execution']['success_rate_warning'] and
323 |                     avg_fill_time <= self.health_thresholds['order_execution']['avg_fill_time_warning']):
    |                                                                                                     ^^^^^
324 |                     status = "healthy"
325 |                     issue = "Operating normally"
    |

E501 Line too long (108 > 100)
   --> scripts/system_health_checker.py:326:101
    |
324 |                     status = "healthy"
325 |                     issue = "Operating normally"
326 |                 elif (success_rate >= self.health_thresholds['order_execution']['success_rate_critical'] and
    |                                                                                                     ^^^^^^^^
327 |                       avg_fill_time <= self.health_thresholds['order_execution']['avg_fill_time_critical']):
328 |                     status = "warning"
    |

E501 Line too long (108 > 100)
   --> scripts/system_health_checker.py:327:101
    |
325 |                     issue = "Operating normally"
326 |                 elif (success_rate >= self.health_thresholds['order_execution']['success_rate_critical'] and
327 |                       avg_fill_time <= self.health_thresholds['order_execution']['avg_fill_time_critical']):
    |                                                                                                     ^^^^^^^^
328 |                     status = "warning"
329 |                     issue = f"Performance degraded: {success_rate:.1%} success, {avg_fill_time:.1f}s avg fill"
    |

E501 Line too long (110 > 100)
   --> scripts/system_health_checker.py:329:101
    |
327 |                       avg_fill_time <= self.health_thresholds['order_execution']['avg_fill_time_critical']):
328 |                     status = "warning"
329 |                     issue = f"Performance degraded: {success_rate:.1%} success, {avg_fill_time:.1f}s avg fill"
    |                                                                                                     ^^^^^^^^^^
330 |                 else:
331 |                     status = "critical"
    |

E501 Line too long (106 > 100)
   --> scripts/system_health_checker.py:332:101
    |
330 |                 else:
331 |                     status = "critical"
332 |                     issue = f"Poor performance: {success_rate:.1%} success, {avg_fill_time:.1f}s avg fill"
    |                                                                                                     ^^^^^^
333 |
334 |                 return ComponentHealth(
    |

E501 Line too long (109 > 100)
   --> scripts/system_health_checker.py:464:101
    |
462 |             "overall_status": health_status.overall_status,
463 |             "component_count": len(health_status.components),
464 |             "healthy_components": sum(1 for c in health_status.components.values() if c.status == "healthy"),
    |                                                                                                     ^^^^^^^^^
465 |             "warning_components": sum(1 for c in health_status.components.values() if c.status == "warning"),
466 |             "critical_components": sum(1 for c in health_status.components.values() if c.status == "critical"),
    |

E501 Line too long (109 > 100)
   --> scripts/system_health_checker.py:465:101
    |
463 |             "component_count": len(health_status.components),
464 |             "healthy_components": sum(1 for c in health_status.components.values() if c.status == "healthy"),
465 |             "warning_components": sum(1 for c in health_status.components.values() if c.status == "warning"),
    |                                                                                                     ^^^^^^^^^
466 |             "critical_components": sum(1 for c in health_status.components.values() if c.status == "critical"),
467 |             "alert_count": len(health_status.alerts)
    |

E501 Line too long (111 > 100)
   --> scripts/system_health_checker.py:466:101
    |
464 |             "healthy_components": sum(1 for c in health_status.components.values() if c.status == "healthy"),
465 |             "warning_components": sum(1 for c in health_status.components.values() if c.status == "warning"),
466 |             "critical_components": sum(1 for c in health_status.components.values() if c.status == "critical"),
    |                                                                                                     ^^^^^^^^^^^
467 |             "alert_count": len(health_status.alerts)
468 |         }
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/transaction_cost_calculator.py:10:1
   |
 8 |   """
 9 |
10 | / from ai_trading.execution.transaction_costs import (
11 | |     TradeType,
12 | |     LiquidityTier,
13 | |     TransactionCostBreakdown,
14 | |     ProfitabilityAnalysis,
15 | |     TransactionCostCalculator,
16 | |     create_transaction_cost_calculator
17 | | )
   | |_^
18 |
19 |   # Re-export all classes for backward compatibility
   |
help: Organize imports

W291 [*] Trailing whitespace
  --> scripts/transaction_cost_calculator.py:22:21
   |
20 | __all__ = [
21 |     "TradeType",
22 |     "LiquidityTier", 
   |                     ^
23 |     "TransactionCostBreakdown",
24 |     "ProfitabilityAnalysis",
   |
help: Remove trailing whitespace

E501 Line too long (132 > 100)
  --> scripts/validate_critical_features.py:18:101
   |
16 |     logging.info(f"Running: {description}")
17 |     try:
18 |         result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=30, cwd=Path(__file__).parent, check=False)
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
19 |         if result.returncode == 0:
20 |             logging.info(f"✓ {description} passed")
   |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/validate_critical_fix.py:32:1
   |
31 |   # (mocks removed; see tests/mocks/validate_critical_fix_mocks.py)
32 | / from tests.mocks.validate_critical_fix_mocks import MockOrder, MockContext
33 | |
34 | | from ai_trading.trade_execution import ExecutionEngine
   | |______________________________________________________^
35 |
36 |   def test_production_scenarios():
   |
help: Organize imports

W291 Trailing whitespace
  --> scripts/validate_critical_fixes.py:11:62
   |
10 | 1. Missing Sentiment Module (CRITICAL)
11 | 2. MetaLearning Strategy Method Signature Mismatch (CRITICAL) 
   |                                                              ^
12 | 3. Alpaca API Endpoint Issues (HIGH PRIORITY)
13 | 4. Module Import Path Problems (MEDIUM)
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> scripts/validate_enhancements.py:21:1
   |
19 |     """Test monitoring API unification."""
20 |     print("Testing Monitoring API...")
21 |     
   | ^^^^
22 |     try:
23 |         # Test imports
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_enhancements.py:26:1
   |
24 |         from ai_trading.monitoring import MetricsCollector, PerformanceMonitor
25 |         print("  ✓ MetricsCollector and PerformanceMonitor imported successfully")
26 |         
   | ^^^^^^^^
27 |         # Test instantiation
28 |         metrics_collector = MetricsCollector()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_enhancements.py:31:1
   |
29 |         performance_monitor = PerformanceMonitor()
30 |         print("  ✓ Monitoring classes instantiated")
31 |         
   | ^^^^^^^^
32 |         # Test functionality
33 |         metrics_collector.inc_counter("test_trades", 1, {"symbol": "AAPL"})
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_enhancements.py:36:1
   |
34 |         metrics_collector.observe_latency("execution_time", 45.2)
35 |         metrics_collector.gauge_set("portfolio_value", 100000.0)
36 |         
   | ^^^^^^^^
37 |         performance_monitor.record_trade({
38 |             "symbol": "AAPL",
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_enhancements.py:47:1
   |
45 |             "timestamp": "2024-01-01T10:00:00Z"
46 |         })
47 |         
   | ^^^^^^^^
48 |         summary = metrics_collector.get_metrics_summary()
49 |         perf_metrics = performance_monitor.get_performance_metrics()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_enhancements.py:50:1
   |
48 |         summary = metrics_collector.get_metrics_summary()
49 |         perf_metrics = performance_monitor.get_performance_metrics()
50 |         
   | ^^^^^^^^
51 |         print(f"  ✓ Metrics collected: {len(summary['counters'])} counters, {len(summary['gauges'])} gauges")
52 |         print(f"  ✓ Performance tracking: {perf_metrics['total_trades']} trades recorded")
   |
help: Remove whitespace from blank line

E501 Line too long (109 > 100)
  --> scripts/validate_enhancements.py:51:101
   |
49 |         perf_metrics = performance_monitor.get_performance_metrics()
50 |         
51 |         print(f"  ✓ Metrics collected: {len(summary['counters'])} counters, {len(summary['gauges'])} gauges")
   |                                                                                                     ^^^^^^^^^
52 |         print(f"  ✓ Performance tracking: {perf_metrics['total_trades']} trades recorded")
   |

W293 [*] Blank line contains whitespace
  --> scripts/validate_enhancements.py:53:1
   |
51 |         print(f"  ✓ Metrics collected: {len(summary['counters'])} counters, {len(summary['gauges'])} gauges")
52 |         print(f"  ✓ Performance tracking: {perf_metrics['total_trades']} trades recorded")
53 |         
   | ^^^^^^^^
54 |         return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_enhancements.py:55:1
   |
54 |         return True
55 |         
   | ^^^^^^^^
56 |     except Exception as e:
57 |         print(f"  ✗ Monitoring API test failed: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_enhancements.py:63:1
   |
61 |     """Test cost-aware signal decision pipeline."""
62 |     print("\nTesting Cost-Aware Signal Pipeline...")
63 |     
   | ^^^^
64 |     try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_enhancements.py:65:1
   |
64 |     try:
65 |         
   | ^^^^^^^^
66 |         # Create minimal signal pipeline - import locally to avoid dependency issues
67 |         class TestSignalPipeline:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_enhancements.py:71:1
   |
69 |                 self.min_edge_threshold = 0.001
70 |                 self.transaction_cost_buffer = 0.0005
71 |                 
   | ^^^^^^^^^^^^^^^^
72 |             def evaluate_signal_basic(self, symbol, predicted_edge):
73 |                 """Simplified evaluation for testing."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_enhancements.py:76:1
   |
74 |                 estimated_cost = 0.0005  # 0.05% estimated cost
75 |                 signal_score = predicted_edge - estimated_cost - self.transaction_cost_buffer
76 |                 
   | ^^^^^^^^^^^^^^^^
77 |                 if signal_score <= 0:
78 |                     return {"decision": "REJECT", "reason": "REJECT_COST_UNPROFITABLE", "score": signal_score}
   |
help: Remove whitespace from blank line

E501 Line too long (110 > 100)
  --> scripts/validate_enhancements.py:78:101
   |
77 |                 if signal_score <= 0:
78 |                     return {"decision": "REJECT", "reason": "REJECT_COST_UNPROFITABLE", "score": signal_score}
   |                                                                                                     ^^^^^^^^^^
79 |                 elif signal_score < self.min_edge_threshold:
80 |                     return {"decision": "REJECT", "reason": "REJECT_EDGE_TOO_LOW", "score": signal_score}
   |

E501 Line too long (105 > 100)
  --> scripts/validate_enhancements.py:80:101
   |
78 |                     return {"decision": "REJECT", "reason": "REJECT_COST_UNPROFITABLE", "score": signal_score}
79 |                 elif signal_score < self.min_edge_threshold:
80 |                     return {"decision": "REJECT", "reason": "REJECT_EDGE_TOO_LOW", "score": signal_score}
   |                                                                                                     ^^^^^
81 |                 else:
82 |                     return {"decision": "ACCEPT", "reason": "ACCEPT_OK", "score": signal_score}
   |

W293 [*] Blank line contains whitespace
  --> scripts/validate_enhancements.py:83:1
   |
81 |                 else:
82 |                     return {"decision": "ACCEPT", "reason": "ACCEPT_OK", "score": signal_score}
83 |         
   | ^^^^^^^^
84 |         pipeline = TestSignalPipeline()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_enhancements.py:85:1
   |
84 |         pipeline = TestSignalPipeline()
85 |         
   | ^^^^^^^^
86 |         # Test various scenarios
87 |         test_cases = [
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_enhancements.py:93:1
   |
91 |             ("TSLA", 0.002, "ACCEPT"),      # Marginal but acceptable
92 |         ]
93 |         
   | ^^^^^^^^
94 |         results = []
95 |         for symbol, edge, expected in test_cases:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:100:1
    |
 98 |             status = "✓" if actual == expected else "✗"
 99 |             results.append((status, symbol, edge, expected, actual, result["reason"]))
100 |             
    | ^^^^^^^^^^^^
101 |         for status, symbol, edge, expected, actual, reason in results:
102 |             print(f"  {status} {symbol}: edge={edge:.4f}, expected={expected}, actual={actual} ({reason})")
    |
help: Remove whitespace from blank line

E501 Line too long (107 > 100)
   --> scripts/validate_enhancements.py:102:101
    |
101 |         for status, symbol, edge, expected, actual, reason in results:
102 |             print(f"  {status} {symbol}: edge={edge:.4f}, expected={expected}, actual={actual} ({reason})")
    |                                                                                                     ^^^^^^^
103 |         
104 |         passed = sum(1 for r in results if r[0] == "✓")
    |

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:103:1
    |
101 |         for status, symbol, edge, expected, actual, reason in results:
102 |             print(f"  {status} {symbol}: edge={edge:.4f}, expected={expected}, actual={actual} ({reason})")
103 |         
    | ^^^^^^^^
104 |         passed = sum(1 for r in results if r[0] == "✓")
105 |         print(f"  ✓ Cost-aware signal tests: {passed}/{len(results)} passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:106:1
    |
104 |         passed = sum(1 for r in results if r[0] == "✓")
105 |         print(f"  ✓ Cost-aware signal tests: {passed}/{len(results)} passed")
106 |         
    | ^^^^^^^^
107 |         return passed == len(results)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:108:1
    |
107 |         return passed == len(results)
108 |         
    | ^^^^^^^^
109 |     except Exception as e:
110 |         print(f"  ✗ Cost-aware signal test failed: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:116:1
    |
114 |     """Test performance-based allocation system."""
115 |     print("\nTesting Performance-Based Allocation...")
116 |     
    | ^^^^
117 |     try:
118 |         from ai_trading.strategies.performance_allocator import PerformanceBasedAllocator
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/validate_enhancements.py:118:9
    |
117 |       try:
118 | /         from ai_trading.strategies.performance_allocator import PerformanceBasedAllocator
119 | |         from datetime import datetime, UTC
    | |__________________________________________^
120 |           
121 |           # Initialize allocator
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:120:1
    |
118 |         from ai_trading.strategies.performance_allocator import PerformanceBasedAllocator
119 |         from datetime import datetime, UTC
120 |         
    | ^^^^^^^^
121 |         # Initialize allocator
122 |         allocator = PerformanceBasedAllocator({
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:128:1
    |
126 |             "min_trades_threshold": 3
127 |         })
128 |         
    | ^^^^^^^^
129 |         # Simulate some trade results for different strategies
130 |         strategies = ["momentum", "mean_reversion", "breakout"]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:131:1
    |
129 |         # Simulate some trade results for different strategies
130 |         strategies = ["momentum", "mean_reversion", "breakout"]
131 |         
    | ^^^^^^^^
132 |         # Add trades with different performance characteristics
133 |         trade_data = [
    |
help: Remove whitespace from blank line

E501 Line too long (145 > 100)
   --> scripts/validate_enhancements.py:135:101
    |
133 | …
134 | …
135 | …: 100, "exit_price": 105, "pnl": 500, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
136 | …: 200, "exit_price": 208, "pnl": 800, "quantity": 100, "timestamp": datetime.now(UTC)}),
137 | …": 150, "exit_price": 155, "pnl": 500, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |

E501 Line too long (145 > 100)
   --> scripts/validate_enhancements.py:136:101
    |
134 | …
135 | …: 100, "exit_price": 105, "pnl": 500, "quantity": 100, "timestamp": datetime.now(UTC)}),
136 | …: 200, "exit_price": 208, "pnl": 800, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
137 | …": 150, "exit_price": 155, "pnl": 500, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |

E501 Line too long (146 > 100)
   --> scripts/validate_enhancements.py:137:101
    |
135 | …: 100, "exit_price": 105, "pnl": 500, "quantity": 100, "timestamp": datetime.now(UTC)}),
136 | …: 200, "exit_price": 208, "pnl": 800, "quantity": 100, "timestamp": datetime.now(UTC)}),
137 | …": 150, "exit_price": 155, "pnl": 500, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
138 | …
139 | …
    |

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:138:1
    |
136 | …     ("momentum", {"symbol": "MSFT", "entry_price": 200, "exit_price": 208, "pnl": 800, "quantity": 100, "timestamp": datetime.now(U…
137 | …     ("momentum", {"symbol": "GOOGL", "entry_price": 150, "exit_price": 155, "pnl": 500, "quantity": 100, "timestamp": datetime.now(…
138 | …     
^^^^^^^^^^^^
139 | …     # Mean reversion - mixed performance  
140 | …     ("mean_reversion", {"symbol": "AAPL", "entry_price": 100, "exit_price": 98, "pnl": -200, "quantity": 100, "timestamp": datetime…
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> scripts/validate_enhancements.py:139:49
    |
137 | …     ("momentum", {"symbol": "GOOGL", "entry_price": 150, "exit_price": 155, "pnl": 500, "quantity": 100, "timestamp": datetime.now(…
138 | …     
139 | …     # Mean reversion - mixed performance  
    |                                           ^^
140 | …     ("mean_reversion", {"symbol": "AAPL", "entry_price": 100, "exit_price": 98, "pnl": -200, "quantity": 100, "timestamp": datetime…
141 | …     ("mean_reversion", {"symbol": "TSLA", "entry_price": 300, "exit_price": 310, "pnl": 1000, "quantity": 100, "timestamp": datetim…
    |
help: Remove trailing whitespace

E501 Line too long (151 > 100)
   --> scripts/validate_enhancements.py:140:101
    |
139 | …
140 | …ce": 100, "exit_price": 98, "pnl": -200, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
141 | …ce": 300, "exit_price": 310, "pnl": 1000, "quantity": 100, "timestamp": datetime.now(UTC)}),
142 | …e": 80, "exit_price": 82, "pnl": 200, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |

E501 Line too long (152 > 100)
   --> scripts/validate_enhancements.py:141:101
    |
139 | …
140 | …ce": 100, "exit_price": 98, "pnl": -200, "quantity": 100, "timestamp": datetime.now(UTC)}),
141 | …ce": 300, "exit_price": 310, "pnl": 1000, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
142 | …e": 80, "exit_price": 82, "pnl": 200, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |

E501 Line too long (148 > 100)
   --> scripts/validate_enhancements.py:142:101
    |
140 | …rice": 100, "exit_price": 98, "pnl": -200, "quantity": 100, "timestamp": datetime.now(UTC)}),
141 | …rice": 300, "exit_price": 310, "pnl": 1000, "quantity": 100, "timestamp": datetime.now(UTC)}),
142 | …ice": 80, "exit_price": 82, "pnl": 200, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
143 | …
144 | …
    |

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:143:1
    |
141 | …     ("mean_reversion", {"symbol": "TSLA", "entry_price": 300, "exit_price": 310, "pnl": 1000, "quantity": 100, "timestamp": datetim…
142 | …     ("mean_reversion", {"symbol": "AMD", "entry_price": 80, "exit_price": 82, "pnl": 200, "quantity": 100, "timestamp": datetime.no…
143 | …     
^^^^^^^^^^^^
144 | …     # Breakout - poor performance
145 | …     ("breakout", {"symbol": "NVDA", "entry_price": 400, "exit_price": 390, "pnl": -1000, "quantity": 100, "timestamp": datetime.now…
    |
help: Remove whitespace from blank line

E501 Line too long (147 > 100)
   --> scripts/validate_enhancements.py:145:101
    |
144 | …
145 | … 400, "exit_price": 390, "pnl": -1000, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
146 | … 250, "exit_price": 245, "pnl": -500, "quantity": 100, "timestamp": datetime.now(UTC)}),
147 | … 350, "exit_price": 348, "pnl": -200, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |

E501 Line too long (146 > 100)
   --> scripts/validate_enhancements.py:146:101
    |
144 | …
145 | …: 400, "exit_price": 390, "pnl": -1000, "quantity": 100, "timestamp": datetime.now(UTC)}),
146 | …: 250, "exit_price": 245, "pnl": -500, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
147 | …: 350, "exit_price": 348, "pnl": -200, "quantity": 100, "timestamp": datetime.now(UTC)}),
148 | …
    |

E501 Line too long (146 > 100)
   --> scripts/validate_enhancements.py:147:101
    |
145 | …: 400, "exit_price": 390, "pnl": -1000, "quantity": 100, "timestamp": datetime.now(UTC)}),
146 | …: 250, "exit_price": 245, "pnl": -500, "quantity": 100, "timestamp": datetime.now(UTC)}),
147 | …: 350, "exit_price": 348, "pnl": -200, "quantity": 100, "timestamp": datetime.now(UTC)}),
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
148 | …
    |

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:149:1
    |
147 | …         ("breakout", {"symbol": "NFLX", "entry_price": 350, "exit_price": 348, "pnl": -200, "quantity": 100, "timestamp": datetime.…
148 | …     ]
149 | …     
    ^^^^^^^^
150 | …     # Record all trades
151 | …     for strategy, trade in trade_data:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:153:1
    |
151 |         for strategy, trade in trade_data:
152 |             allocator.record_trade_result(strategy, trade)
153 |         
    | ^^^^^^^^
154 |         # Calculate allocations
155 |         total_capital = 100000  # $100k
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:157:1
    |
155 |         total_capital = 100000  # $100k
156 |         allocations = allocator.calculate_strategy_allocations(strategies, total_capital)
157 |         
    | ^^^^^^^^
158 |         print(f"  ✓ Allocation calculated for {len(allocations)} strategies")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:159:1
    |
158 |         print(f"  ✓ Allocation calculated for {len(allocations)} strategies")
159 |         
    | ^^^^^^^^
160 |         # Verify allocations
161 |         total_allocated = sum(allocations.values())
    |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> scripts/validate_enhancements.py:162:101
    |
160 |         # Verify allocations
161 |         total_allocated = sum(allocations.values())
162 |         print(f"  ✓ Total capital allocated: ${total_allocated:,.0f} (target: ${total_capital:,.0f})")
    |                                                                                                     ^^
163 |         
164 |         for strategy, allocation in allocations.items():
    |

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:163:1
    |
161 |         total_allocated = sum(allocations.values())
162 |         print(f"  ✓ Total capital allocated: ${total_allocated:,.0f} (target: ${total_capital:,.0f})")
163 |         
    | ^^^^^^^^
164 |         for strategy, allocation in allocations.items():
165 |             pct = allocation / total_capital * 100
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:167:1
    |
165 |             pct = allocation / total_capital * 100
166 |             print(f"    {strategy}: ${allocation:,.0f} ({pct:.1f}%)")
167 |         
    | ^^^^^^^^
168 |         # Check that momentum (best performer) gets highest allocation
169 |         allocations_by_value = sorted(allocations.items(), key=lambda x: x[1], reverse=True)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:171:1
    |
169 |         allocations_by_value = sorted(allocations.items(), key=lambda x: x[1], reverse=True)
170 |         best_strategy = allocations_by_value[0][0]
171 |         
    | ^^^^^^^^
172 |         print(f"  ✓ Highest allocation to: {best_strategy} (expected momentum based on simulated performance)")
    |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
   --> scripts/validate_enhancements.py:172:101
    |
170 |         best_strategy = allocations_by_value[0][0]
171 |         
172 |         print(f"  ✓ Highest allocation to: {best_strategy} (expected momentum based on simulated performance)")
    |                                                                                                     ^^^^^^^^^^^
173 |         
174 |         # Test rebalancing decision
    |

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:173:1
    |
172 |         print(f"  ✓ Highest allocation to: {best_strategy} (expected momentum based on simulated performance)")
173 |         
    | ^^^^^^^^
174 |         # Test rebalancing decision
175 |         should_rebalance = allocator.should_rebalance_allocations()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:177:1
    |
175 |         should_rebalance = allocator.should_rebalance_allocations()
176 |         print(f"  ✓ Rebalancing decision: {should_rebalance}")
177 |         
    | ^^^^^^^^
178 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:179:1
    |
178 |         return True
179 |         
    | ^^^^^^^^
180 |     except Exception as e:
181 |         print(f"  ✗ Performance allocator test failed: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:189:1
    |
187 |     """Test improved exception handling."""
188 |     print("\nTesting Exception Handling Improvements...")
189 |     
    | ^^^^
190 |     try:
191 |         # Test the improved portfolio.py exception handling
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:198:1
    |
196 |             ("TypeError", "Type conversion test")
197 |         ]
198 |         
    | ^^^^^^^^
199 |         print("  ✓ Exception types identified for specific handling:")
200 |         for exc_type, description in test_cases:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:202:1
    |
200 |         for exc_type, description in test_cases:
201 |             print(f"    - {exc_type}: {description}")
202 |         
    | ^^^^^^^^
203 |         # Test that we're not using broad Exception catches inappropriately
204 |         print("  ✓ Broad exception patterns replaced with specific types")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:206:1
    |
204 |         print("  ✓ Broad exception patterns replaced with specific types")
205 |         print("  ✓ Structured logging with component and error_type context added")
206 |         
    | ^^^^^^^^
207 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:208:1
    |
207 |         return True
208 |         
    | ^^^^^^^^
209 |     except Exception as e:
210 |         print(f"  ✗ Exception handling test failed: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:218:1
    |
216 |     print("COMPREHENSIVE VALIDATION - AI TRADING BOT ENHANCEMENTS")
217 |     print("=" * 60)
218 |     
    | ^^^^
219 |     tests = [
220 |         ("Monitoring API Unification", test_monitoring_api),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:225:1
    |
223 |         ("Exception Handling", test_exception_handling),
224 |     ]
225 |     
    | ^^^^
226 |     results = []
227 |     for test_name, test_func in tests:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:234:1
    |
232 |             print(f"  ✗ {test_name} failed with error: {e}")
233 |             results.append((test_name, False))
234 |     
    | ^^^^
235 |     print("\n" + "=" * 60)
236 |     print("VALIDATION SUMMARY")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:238:1
    |
236 |     print("VALIDATION SUMMARY")
237 |     print("=" * 60)
238 |     
    | ^^^^
239 |     passed = 0
240 |     for test_name, result in results:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:245:1
    |
243 |         if result:
244 |             passed += 1
245 |     
    | ^^^^
246 |     print(f"\nOverall: {passed}/{len(results)} tests passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:247:1
    |
246 |     print(f"\nOverall: {passed}/{len(results)} tests passed")
247 |     
    | ^^^^
248 |     if passed == len(results):
249 |         print("\n🎉 ALL VALIDATIONS PASSED!")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_enhancements.py:256:1
    |
254 |         print(f"\n⚠️  {len(results) - passed} validation(s) failed")
255 |         print("Review the failed tests before deployment.")
256 |     
    | ^^^^
257 |     return passed == len(results)
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/validate_enhancements.py:261:34
    |
259 | if __name__ == "__main__":
260 |     success = main()
261 |     sys.exit(0 if success else 1)
    |                                  ^
    |
help: Add trailing newline

E501 Line too long (103 > 100)
  --> scripts/validate_final_polish.py:21:101
   |
19 |         content = f.read()
20 |
21 |     if len(content.strip().split('\n')) <= 5 and 'from ai_trading.core.bot_engine import *' in content:
   |                                                                                                     ^^^
22 |         logging.info("✓ Bot engine shim is correctly minimal")
23 |     else:
   |

E501 Line too long (121 > 100)
  --> scripts/validate_final_polish.py:30:101
   |
28 |         ci_content = f.read()
29 |
30 |     if 'matrix:' in ci_content and 'python-version:' in ci_content and '3.12.3' in ci_content and "'3.12'" in ci_content:
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
31 |         logging.info("✓ CI matrix configured correctly")
32 |     else:
   |

E501 Line too long (150 > 100)
  --> scripts/validate_fixes.py:28:101
   |
27 | …
28 | …d UnboundLocalError in else block\s*status = ctx\.drawdown_circuit_breaker\.get_status\(\)"
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
29 | …
30 | …
   |

E501 Line too long (112 > 100)
   --> scripts/validate_fixes.py:145:101
    |
143 |     logging.info("4. Validating circuit breaker error handling fix...")
144 |
145 |     circuit_breaker_path = "/home/runner/work/ai-trading-bot/ai-trading-bot/ai_trading/risk/circuit_breakers.py"
    |                                                                                                     ^^^^^^^^^^^^
146 |
147 |     if not os.path.exists(circuit_breaker_path):
    |

I001 [*] Import block is un-sorted or un-formatted
 --> scripts/validate_fixes_root.py:4:1
  |
2 |   """Validation script for the ellipsis and risk exposure fixes."""
3 |
4 | / import json
5 | | import sys
6 | | import logging
  | |______________^
7 |
8 |   # Add the project root to the path
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/validate_fixes_root.py:18:1
   |
16 |         "note": "Unicode ellipsis: …"
17 |     }
18 |     
   | ^^^^
19 |     # Test with ensure_ascii=True (old behavior)
20 |     ascii_json = json.dumps(test_data, ensure_ascii=True)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_fixes_root.py:24:1
   |
22 |     print(ascii_json)
23 |     print()
24 |     
   | ^^^^
25 |     # Test with ensure_ascii=False (new behavior)
26 |     unicode_json = json.dumps(test_data, ensure_ascii=False)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_fixes_root.py:30:1
   |
28 |     print(unicode_json)
29 |     print()
30 |     
   | ^^^^
31 |     # Verify differences
32 |     assert "\\u2014" in ascii_json, "Expected escaped Unicode in ensure_ascii=True"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_fixes_root.py:36:1
   |
34 |     assert "\\u2026" in ascii_json, "Expected escaped ellipsis in ensure_ascii=True"
35 |     assert "…" in unicode_json, "Expected actual ellipsis character in ensure_ascii=False"
36 |     
   | ^^^^
37 |     print("✓ JSON Unicode handling test passed")
38 |     return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_fixes_root.py:43:1
   |
41 |     """Test that the modified files compile correctly."""
42 |     import compileall
43 |     
   | ^^^^
44 |     files_to_check = [
45 |         '/home/runner/work/ai-trading-bot/ai-trading-bot/ai_trading/logging.py',
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_fixes_root.py:48:1
   |
46 |         '/home/runner/work/ai-trading-bot/ai-trading-bot/ai_trading/core/bot_engine.py'
47 |     ]
48 |     
   | ^^^^
49 |     for file_path in files_to_check:
50 |         if not compileall.compile_file(file_path, quiet=True):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_fixes_root.py:55:1
   |
53 |         else:
54 |             print(f"✓ Compilation succeeded for {file_path}")
55 |     
   | ^^^^
56 |     return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_fixes_root.py:63:1
   |
61 |         # Test basic import
62 |         import ai_trading.logging as logger_module
63 |         
   | ^^^^^^^^
64 |         # Test that JSONFormatter exists
65 |         formatter = logger_module.JSONFormatter("%(asctime)sZ")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_fixes_root.py:66:1
   |
64 |         # Test that JSONFormatter exists
65 |         formatter = logger_module.JSONFormatter("%(asctime)sZ")
66 |         
   | ^^^^^^^^
67 |         # Create a test log record
68 |         rec = logging.LogRecord(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_fixes_root.py:77:1
   |
75 |             exc_info=None,
76 |         )
77 |         
   | ^^^^^^^^
78 |         # Test formatting
79 |         output = formatter.format(rec)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_fixes_root.py:81:1
   |
79 |         output = formatter.format(rec)
80 |         data = json.loads(output)
81 |         
   | ^^^^^^^^
82 |         # Verify the message is preserved
83 |         assert "msg" in data
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_fixes_root.py:85:1
   |
83 |         assert "msg" in data
84 |         assert "Unicode — characters" in data["msg"]
85 |         
   | ^^^^^^^^
86 |         print("✓ Logging formatter test passed")
87 |         return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_fixes_root.py:88:1
   |
86 |         print("✓ Logging formatter test passed")
87 |         return True
88 |         
   | ^^^^^^^^
89 |     except Exception as e:
90 |         print(f"✗ Logging formatter test failed: {e}")
   |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
  --> scripts/validate_fixes_root.py:95:101
   |
93 | def validate_bot_engine_functions():
94 |     """Validate that the new functions exist in bot_engine without importing."""
95 |     bot_engine_path = '/home/runner/work/ai-trading-bot/ai-trading-bot/ai_trading/core/bot_engine.py'
   |                                                                                                     ^
96 |     
97 |     with open(bot_engine_path, 'r') as f:
   |

W293 [*] Blank line contains whitespace
  --> scripts/validate_fixes_root.py:96:1
   |
94 |     """Validate that the new functions exist in bot_engine without importing."""
95 |     bot_engine_path = '/home/runner/work/ai-trading-bot/ai-trading-bot/ai_trading/core/bot_engine.py'
96 |     
   | ^^^^
97 |     with open(bot_engine_path, 'r') as f:
98 |         content = f.read()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_fixes_root.py:99:1
    |
 97 |     with open(bot_engine_path, 'r') as f:
 98 |         content = f.read()
 99 |     
    | ^^^^
100 |     # Check for the new functions
101 |     required_functions = [
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_fixes_root.py:105:1
    |
103 |         '_update_risk_engine_exposure'
104 |     ]
105 |     
    | ^^^^
106 |     for func_name in required_functions:
107 |         if f"def {func_name}(" in content:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_fixes_root.py:112:1
    |
110 |             print(f"✗ Function {func_name} not found in bot_engine.py")
111 |             return False
112 |     
    | ^^^^
113 |     # Check for the scheduled task
114 |     if 'target=_update_risk_engine_exposure' in content:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_fixes_root.py:119:1
    |
117 |         print("✗ Risk exposure update task not scheduled")
118 |         return False
119 |     
    | ^^^^
120 |     return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_fixes_root.py:125:1
    |
123 |     """Validate that logging.py has the ensure_ascii=False changes."""
124 |     logging_path = '/home/runner/work/ai-trading-bot/ai-trading-bot/ai_trading/logging.py'
125 |     
    | ^^^^
126 |     with open(logging_path, 'r') as f:
127 |         content = f.read()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_fixes_root.py:128:1
    |
126 |     with open(logging_path, 'r') as f:
127 |         content = f.read()
128 |     
    | ^^^^
129 |     # Check for ensure_ascii=False in json.dumps calls
130 |     ensure_ascii_false_count = content.count('ensure_ascii=False')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_fixes_root.py:131:1
    |
129 |     # Check for ensure_ascii=False in json.dumps calls
130 |     ensure_ascii_false_count = content.count('ensure_ascii=False')
131 |     
    | ^^^^
132 |     if ensure_ascii_false_count >= 2:
133 |         print(f"✓ Found {ensure_ascii_false_count} instances of ensure_ascii=False in logging.py")
    |
help: Remove whitespace from blank line

E501 Line too long (105 > 100)
   --> scripts/validate_fixes_root.py:136:101
    |
134 |         return True
135 |     else:
136 |         print(f"✗ Expected at least 2 instances of ensure_ascii=False, found {ensure_ascii_false_count}")
    |                                                                                                     ^^^^^
137 |         return False
    |

W293 [*] Blank line contains whitespace
   --> scripts/validate_fixes_root.py:143:1
    |
141 |     print("=== Validation Script for Ellipsis and Risk Exposure Fixes ===")
142 |     print()
143 |     
    | ^^^^
144 |     tests = [
145 |         ("JSON Unicode handling", test_json_dumps_ensure_ascii),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_fixes_root.py:151:1
    |
149 |         ("Logging formatter", test_logging_formatter_imports),
150 |     ]
151 |     
    | ^^^^
152 |     passed = 0
153 |     total = len(tests)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_fixes_root.py:154:1
    |
152 |     passed = 0
153 |     total = len(tests)
154 |     
    | ^^^^
155 |     for test_name, test_func in tests:
156 |         print(f"Running: {test_name}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_fixes_root.py:164:1
    |
162 |             print(f"✗ {test_name} failed with exception: {e}")
163 |             print()
164 |     
    | ^^^^
165 |     print(f"=== Results: {passed}/{total} tests passed ===")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_fixes_root.py:166:1
    |
165 |     print(f"=== Results: {passed}/{total} tests passed ===")
166 |     
    | ^^^^
167 |     if passed == total:
168 |         print("🎉 All validation tests passed!")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/validate_fixes_root.py:175:21
    |
174 | if __name__ == '__main__':
175 |     sys.exit(main())
    |                     ^
    |
help: Add trailing newline

E501 Line too long (103 > 100)
   --> scripts/validate_improvements.py:132:101
    |
130 | def main():
131 |     """Run all validation tests."""
132 |     logging.info("Running validation tests for package-safe imports and reliability improvements...\n")
    |                                                                                                     ^^^
133 |
134 |     # Set testing mode to avoid environment validation errors
    |

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/validate_migration.py:7:1
   |
 5 |   """
 6 |
 7 | / import os
 8 | | import sys
 9 | | import ast
   | |__________^
10 |
11 |   def check_file_exists(filepath):
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/validate_migration.py:32:1
   |
30 |         with open(filepath, 'r') as f:
31 |             tree = ast.parse(f.read())
32 |         
   | ^^^^^^^^
33 |         imports = []
34 |         for node in ast.walk(tree):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_migration.py:47:1
   |
45 |     print("Portfolio Optimizer & Transaction Costs Migration Validation")
46 |     print("=" * 60)
47 |     
   | ^^^^
48 |     # Files that should exist
49 |     required_files = [
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> scripts/validate_migration.py:51:53
   |
49 |     required_files = [
50 |         "ai_trading/portfolio/optimizer.py",
51 |         "ai_trading/execution/transaction_costs.py", 
   |                                                     ^
52 |         "ai_trading/portfolio/__init__.py",
53 |         "scripts/portfolio_optimizer.py",
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> scripts/validate_migration.py:56:1
   |
54 |         "scripts/transaction_cost_calculator.py"
55 |     ]
56 |     
   | ^^^^
57 |     # Check file existence
58 |     print("\n1. Checking file existence...")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_migration.py:66:1
   |
64 |             print(f"❌ {filepath} - Missing!")
65 |             all_files_exist = False
66 |     
   | ^^^^
67 |     if not all_files_exist:
68 |         print("\n❌ Some required files are missing!")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_migration.py:70:1
   |
68 |         print("\n❌ Some required files are missing!")
69 |         return 1
70 |     
   | ^^^^
71 |     # Check syntax
72 |     print("\n2. Checking syntax...")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_migration.py:81:1
   |
79 |             print(f"❌ {filepath} - {error}")
80 |             all_syntax_ok = False
81 |     
   | ^^^^
82 |     if not all_syntax_ok:
83 |         print("\n❌ Some files have syntax errors!")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_migration.py:85:1
   |
83 |         print("\n❌ Some files have syntax errors!")
84 |         return 1
85 |         
   | ^^^^^^^^
86 |     # Check import structure
87 |     print("\n3. Checking import structure...")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_migration.py:88:1
   |
86 |     # Check import structure
87 |     print("\n3. Checking import structure...")
88 |     
   | ^^^^
89 |     # Check signals.py imports transaction costs correctly
90 |     signals_imports = extract_imports("ai_trading/signals.py")
   |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
  --> scripts/validate_migration.py:91:101
   |
89 |     # Check signals.py imports transaction costs correctly
90 |     signals_imports = extract_imports("ai_trading/signals.py")
91 |     correct_tc_import = any("ai_trading.execution.transaction_costs" in imp for imp in signals_imports)
   |                                                                                                     ^^^
92 |     incorrect_tc_import = any("scripts.transaction_cost" in imp for imp in signals_imports)
   |

W293 [*] Blank line contains whitespace
  --> scripts/validate_migration.py:93:1
   |
91 |     correct_tc_import = any("ai_trading.execution.transaction_costs" in imp for imp in signals_imports)
92 |     incorrect_tc_import = any("scripts.transaction_cost" in imp for imp in signals_imports)
93 |     
   | ^^^^
94 |     if correct_tc_import and not incorrect_tc_import:
95 |         print("✓ ai_trading/signals.py imports transaction costs from correct location")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_migration.py:99:1
    |
 97 |         print("❌ ai_trading/signals.py has incorrect transaction cost imports")
 98 |         return 1
 99 |     
    | ^^^^
100 |     # Check portfolio __init__.py exports optimizer classes
101 |     portfolio_imports = extract_imports("ai_trading/portfolio/__init__.py")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_migration.py:103:1
    |
101 |     portfolio_imports = extract_imports("ai_trading/portfolio/__init__.py")
102 |     has_optimizer_imports = any("optimizer" in imp for imp in portfolio_imports)
103 |     
    | ^^^^
104 |     if has_optimizer_imports:
105 |         print("✓ ai_trading/portfolio/__init__.py imports from optimizer module")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_migration.py:109:1
    |
107 |         print("❌ ai_trading/portfolio/__init__.py missing optimizer imports")
108 |         return 1
109 |     
    | ^^^^
110 |     # Check shims import from ai_trading
111 |     for shim_file in ["scripts/portfolio_optimizer.py", "scripts/transaction_cost_calculator.py"]:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_migration.py:114:1
    |
112 |         shim_imports = extract_imports(shim_file)
113 |         has_ai_trading_imports = any("ai_trading" in imp for imp in shim_imports)
114 |         
    | ^^^^^^^^
115 |         if has_ai_trading_imports:
116 |             print(f"✓ {shim_file} imports from ai_trading package")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_migration.py:120:1
    |
118 |             print(f"❌ {shim_file} missing ai_trading imports")
119 |             return 1
120 |     
    | ^^^^
121 |     # Check no scripts imports in ai_trading
122 |     print("\n4. Checking for scripts imports in production code...")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_migration.py:128:1
    |
126 |         "ai_trading/portfolio/__init__.py"
127 |     ]
128 |     
    | ^^^^
129 |     scripts_imports_found = False
130 |     for filepath in ai_trading_files:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_migration.py:139:1
    |
137 |                     print(f"   {imp}")
138 |                 scripts_imports_found = True
139 |     
    | ^^^^
140 |     if not scripts_imports_found:
141 |         print("✓ No scripts imports found in production code")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_migration.py:144:1
    |
142 |     else:
143 |         return 1
144 |     
    | ^^^^
145 |     print("\n" + "=" * 60)
146 |     print("✅ All validation checks passed!")
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> scripts/validate_migration.py:150:81
    |
148 |     print("\nKey improvements:")
149 |     print("• Portfolio optimizer moved to ai_trading.portfolio.optimizer")
150 |     print("• Transaction costs moved to ai_trading.execution.transaction_costs") 
    |                                                                                 ^
151 |     print("• Production code no longer imports from scripts/")
152 |     print("• Backward compatibility maintained via shims")
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> scripts/validate_migration.py:154:1
    |
152 |     print("• Backward compatibility maintained via shims")
153 |     print("• Exception handling improved in signals.py")
154 |     
    | ^^^^
155 |     return 0
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/validate_migration.py:158:21
    |
157 | if __name__ == "__main__":
158 |     sys.exit(main())
    |                     ^
    |
help: Add trailing newline

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:24:1
   |
22 |     logging.info("Fix 2: Sentiment Circuit Breaker Thresholds")
23 |     logging.info(str("="*50))
24 |     
   | ^^^^
25 |     try:
26 |         import ai_trading.analysis.sentiment as sentiment
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:27:1
   |
25 |     try:
26 |         import ai_trading.analysis.sentiment as sentiment
27 |         
   | ^^^^^^^^
28 |         # Expected values from problem statement:
29 |         # - Increase failure threshold from current to 15 (more tolerant)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:31:1
   |
29 |         # - Increase failure threshold from current to 15 (more tolerant)
30 |         # - Extend recovery timeout from 300s to 1800s (30 minutes)
31 |         
   | ^^^^^^^^
32 |         expected_failures = 15
33 |         expected_recovery = 1800
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:34:1
   |
32 |         expected_failures = 15
33 |         expected_recovery = 1800
34 |         
   | ^^^^^^^^
35 |         actual_failures = sentiment.SENTIMENT_FAILURE_THRESHOLD
36 |         actual_recovery = sentiment.SENTIMENT_RECOVERY_TIMEOUT
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:37:1
   |
35 | …     actual_failures = sentiment.SENTIMENT_FAILURE_THRESHOLD
36 | …     actual_recovery = sentiment.SENTIMENT_RECOVERY_TIMEOUT
37 | …     
   ^^^^^^^^
38 | …     logging.info(f"Failure threshold: {actual_failures} (expected: {expected_failures}) - {'✓' if actual_failures == expected_failur…
39 | …     logging.info(f"Recovery timeout: {actual_recovery}s (expected: {expected_recovery}s) - {'✓' if actual_recovery == expected_recov…
   |
help: Remove whitespace from blank line

E501 Line too long (150 > 100)
  --> scripts/validate_problem_statement_fixes.py:38:101
   |
36 | …OUT
37 | …
38 | … (expected: {expected_failures}) - {'✓' if actual_failures == expected_failures else '✗'}")
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
39 | … (expected: {expected_recovery}s) - {'✓' if actual_recovery == expected_recovery else '✗'}")
   |

E501 Line too long (151 > 100)
  --> scripts/validate_problem_statement_fixes.py:39:101
   |
38 | … (expected: {expected_failures}) - {'✓' if actual_failures == expected_failures else '✗'}")
39 | … (expected: {expected_recovery}s) - {'✓' if actual_recovery == expected_recovery else '✗'}")
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
40 | …
41 | …
   |

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:40:1
   |
38 | …     logging.info(f"Failure threshold: {actual_failures} (expected: {expected_failures}) - {'✓' if actual_failures == expected_failur…
39 | …     logging.info(f"Recovery timeout: {actual_recovery}s (expected: {expected_recovery}s) - {'✓' if actual_recovery == expected_recov…
40 | …     
   ^^^^^^^^
41 | …     # Also check bot_engine.py for consistency
42 | …     with open('bot_engine.py', 'r') as f:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:44:1
   |
42 |         with open('bot_engine.py', 'r') as f:
43 |             content = f.read()
44 |         
   | ^^^^^^^^
45 |         bot_failures = re.search(r'SENTIMENT_FAILURE_THRESHOLD = (\d+)', content)
46 |         bot_recovery = re.search(r'SENTIMENT_RECOVERY_TIMEOUT = (\d+)', content)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:47:1
   |
45 |         bot_failures = re.search(r'SENTIMENT_FAILURE_THRESHOLD = (\d+)', content)
46 |         bot_recovery = re.search(r'SENTIMENT_RECOVERY_TIMEOUT = (\d+)', content)
47 |         
   | ^^^^^^^^
48 |         if bot_failures and bot_recovery:
49 |             bot_failures_val = int(bot_failures.group(1))
   |
help: Remove whitespace from blank line

E501 Line too long (217 > 100)
  --> scripts/validate_problem_statement_fixes.py:51:101
   |
49 | …
50 | …
51 | …ery={bot_recovery_val} - {'✓' if bot_failures_val == expected_failures and bot_recovery_val == expected_recovery else '✗'}"))
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
52 | …
53 | …
   |

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:52:1
   |
50 | …         bot_recovery_val = int(bot_recovery.group(1))
51 | …         logging.info(str(f"bot_engine.py consistency: failures={bot_failures_val}, recovery={bot_recovery_val} - {'✓' if bot_failure…
52 | …     
   ^^^^^^^^
53 | …     return actual_failures == expected_failures and actual_recovery == expected_recovery
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:54:1
   |
53 |         return actual_failures == expected_failures and actual_recovery == expected_recovery
54 |         
   | ^^^^^^^^
55 |     except Exception as e:
56 |         logging.info(f"Error validating sentiment circuit breaker: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:63:1
   |
61 |     logging.info("\nFix 3: Meta-Learning Minimum Trade Requirement")
62 |     logging.info(str("="*50))
63 |     
   | ^^^^
64 |     try:
65 |         with open('bot_engine.py', 'r') as f:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:67:1
   |
65 |         with open('bot_engine.py', 'r') as f:
66 |             content = f.read()
67 |         
   | ^^^^^^^^
68 |         # Expected: Reduce minimum trade requirement from 10 to 3
69 |         pattern = r'def load_global_signal_performance\(\s*min_trades: int = (\d+)'
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:71:1
   |
69 |         pattern = r'def load_global_signal_performance\(\s*min_trades: int = (\d+)'
70 |         match = re.search(pattern, content)
71 |         
   | ^^^^^^^^
72 |         if match:
73 |             current_value = int(match.group(1))
   |
help: Remove whitespace from blank line

E501 Line too long (145 > 100)
  --> scripts/validate_problem_statement_fixes.py:75:101
   |
73 | …
74 | …
75 | …value} (expected: {expected_value}) - {'✓' if current_value == expected_value else '✗'}")
   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
76 | …
77 | …
   |

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:80:1
   |
78 |             logging.info("✗ Could not find min_trades parameter")
79 |             return False
80 |             
   | ^^^^^^^^^^^^
81 |     except Exception as e:
82 |         logging.info(f"Error validating meta-learning: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:89:1
   |
87 |     logging.info("\nFix 5: PLTR Sector Classification")
88 |     logging.info(str("="*50))
89 |     
   | ^^^^
90 |     try:
91 |         with open('bot_engine.py', 'r') as f:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_problem_statement_fixes.py:93:1
   |
91 |         with open('bot_engine.py', 'r') as f:
92 |             content = f.read()
93 |         
   | ^^^^^^^^
94 |         # Expected: Add PLTR to Technology sector mapping
95 |         if '"PLTR": "Technology"' in content:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:101:1
    |
 99 |             logging.info("✗ PLTR not found in Technology sector mapping")
100 |             return False
101 |             
    | ^^^^^^^^^^^^
102 |     except Exception as e:
103 |         logging.info(f"Error validating PLTR sector: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:110:1
    |
108 |     logging.info("\nFix 4: Order Execution Optimizations")
109 |     logging.info(str("="*50))
110 |     
    | ^^^^
111 |     try:
112 |         with open('trade_execution.py', 'r') as f:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:114:1
    |
112 |         with open('trade_execution.py', 'r') as f:
113 |             content = f.read()
114 |         
    | ^^^^^^^^
115 |         optimizations = {
116 |             'Pre-validation function': '_pre_validate_order' in content,
    |
help: Remove whitespace from blank line

E501 Line too long (119 > 100)
   --> scripts/validate_problem_statement_fixes.py:121:101
    |
119 |             'Market status caching': '_MARKET_STATUS_CACHE' in content,
120 |             'Order validation integration': 'ORDER_VALIDATION_FAILED' in content,
121 |             'Async validation integration': 'Pre-validate order to reduce execution latency (async version)' in content
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^
122 |         }
    |

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:123:1
    |
121 |             'Async validation integration': 'Pre-validate order to reduce execution latency (async version)' in content
122 |         }
123 |         
    | ^^^^^^^^
124 |         all_implemented = True
125 |         for feature, implemented in optimizations.items():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:129:1
    |
127 |             if not implemented:
128 |                 all_implemented = False
129 |         
    | ^^^^^^^^
130 |         return all_implemented
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:131:1
    |
130 |         return all_implemented
131 |         
    | ^^^^^^^^
132 |     except Exception as e:
133 |         logging.info(f"Error validating execution optimizations: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:140:1
    |
138 |     logging.info("\nFix 1: Order Quantity Tracking")
139 |     logging.info(str("="*50))
140 |     
    | ^^^^
141 |     try:
142 |         with open('trade_execution.py', 'r') as f:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:144:1
    |
142 |         with open('trade_execution.py', 'r') as f:
143 |             content = f.read()
144 |         
    | ^^^^^^^^
145 |         # Check for clear field names in logging
146 |         tracking_features = {
    |
help: Remove whitespace from blank line

E501 Line too long (105 > 100)
   --> scripts/validate_problem_statement_fixes.py:149:101
    |
147 |             'FULL_FILL_SUCCESS includes requested_qty': '"requested_qty": requested_qty' in content,
148 |             'FULL_FILL_SUCCESS includes filled_qty': '"filled_qty": filled_qty' in content,
149 |             'ORDER_FILL_CONSOLIDATED uses total_filled_qty': '"total_filled_qty": buf["qty"]' in content,
    |                                                                                                     ^^^^^
150 |             'Clear field name documentation': 'AI-AGENT-REF: Clarify this is the total filled quantity' in content
151 |         }
    |

E501 Line too long (114 > 100)
   --> scripts/validate_problem_statement_fixes.py:150:101
    |
148 |             'FULL_FILL_SUCCESS includes filled_qty': '"filled_qty": filled_qty' in content,
149 |             'ORDER_FILL_CONSOLIDATED uses total_filled_qty': '"total_filled_qty": buf["qty"]' in content,
150 |             'Clear field name documentation': 'AI-AGENT-REF: Clarify this is the total filled quantity' in content
    |                                                                                                     ^^^^^^^^^^^^^^
151 |         }
    |

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:152:1
    |
150 |             'Clear field name documentation': 'AI-AGENT-REF: Clarify this is the total filled quantity' in content
151 |         }
152 |         
    | ^^^^^^^^
153 |         all_implemented = True
154 |         for feature, implemented in tracking_features.items():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:158:1
    |
156 |             if not implemented:
157 |                 all_implemented = False
158 |         
    | ^^^^^^^^
159 |         return all_implemented
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:160:1
    |
159 |         return all_implemented
160 |         
    | ^^^^^^^^
161 |     except Exception as e:
162 |         logging.info(f"Error validating quantity tracking: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:171:1
    |
169 |     logging.info("Validating implementation of fixes from problem statement...")
170 |     print()
171 |     
    | ^^^^
172 |     results = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:173:1
    |
172 |     results = []
173 |     
    | ^^^^
174 |     # Run all validations
175 |     results.append(('Sentiment Circuit Breaker', validate_sentiment_circuit_breaker()))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:180:1
    |
178 |     results.append(('Execution Optimizations', validate_execution_optimizations()))
179 |     results.append(('Quantity Tracking', validate_quantity_tracking()))
180 |     
    | ^^^^
181 |     # Summary
182 |     logging.info(str("\n" + "="*60))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:185:1
    |
183 |     logging.info("VALIDATION SUMMARY")
184 |     logging.info(str("="*60))
185 |     
    | ^^^^
186 |     all_passed = True
187 |     for fix_name, passed in results:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:192:1
    |
190 |         if not passed:
191 |             all_passed = False
192 |     
    | ^^^^
193 |     print()
194 |     if all_passed:
    |
help: Remove whitespace from blank line

E501 Line too long (110 > 100)
   --> scripts/validate_problem_statement_fixes.py:196:101
    |
194 |     if all_passed:
195 |         logging.info("🎉 ALL FIXES VALIDATED SUCCESSFULLY!")
196 |         logging.info("The trading bot critical issues have been resolved according to the problem statement.")
    |                                                                                                     ^^^^^^^^^^
197 |     else:
198 |         logging.info("❌ SOME FIXES FAILED VALIDATION")
    |

W293 [*] Blank line contains whitespace
   --> scripts/validate_problem_statement_fixes.py:200:1
    |
198 |         logging.info("❌ SOME FIXES FAILED VALIDATION")
199 |         logging.info("Please review the failed items above.")
200 |     
    | ^^^^
201 |     return 0 if all_passed else 1
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/validate_problem_statement_fixes.py:205:24
    |
203 | if __name__ == "__main__":
204 |     exit_code = main()
205 |     sys.exit(exit_code)
    |                        ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/validate_production_fixes.py:11:1
   |
 9 |   """
10 |
11 | / import os
12 | | from datetime import datetime
   | |_____________________________^
13 |
14 |   def validate_sentiment_api_config():
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:17:1
   |
15 |     """Validate sentiment API configuration is properly set up."""
16 |     logging.info("🔍 Validating Sentiment API Configuration...")
17 |     
   | ^^^^
18 |     # Check .env file
19 |     env_file_path = '.env'
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:23:1
   |
21 |         logging.info("❌ .env file not found")
22 |         return False
23 |     
   | ^^^^
24 |     with open(env_file_path, 'r') as f:
25 |         env_content = f.read()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:26:1
   |
24 |     with open(env_file_path, 'r') as f:
25 |         env_content = f.read()
26 |     
   | ^^^^
27 |     required_vars = ['SENTIMENT_API_KEY', 'SENTIMENT_API_URL', 'NEWS_API_KEY']
28 |     missing_vars = []
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:29:1
   |
27 |     required_vars = ['SENTIMENT_API_KEY', 'SENTIMENT_API_URL', 'NEWS_API_KEY']
28 |     missing_vars = []
29 |     
   | ^^^^
30 |     for var in required_vars:
31 |         if var not in env_content:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:33:1
   |
31 |         if var not in env_content:
32 |             missing_vars.append(var)
33 |     
   | ^^^^
34 |     if missing_vars:
35 |         logging.info(f"❌ Missing environment variables: {missing_vars}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:37:1
   |
35 |         logging.info(f"❌ Missing environment variables: {missing_vars}")
36 |         return False
37 |     
   | ^^^^
38 |     logging.info("✅ All sentiment API environment variables present in .env")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:39:1
   |
38 |     logging.info("✅ All sentiment API environment variables present in .env")
39 |     
   | ^^^^
40 |     # Check config.py has the new variables
41 |     try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:44:1
   |
42 |         with open('config.py', 'r') as f:
43 |             config_content = f.read()
44 |         
   | ^^^^^^^^
45 |         if 'SENTIMENT_API_KEY' in config_content and 'SENTIMENT_API_URL' in config_content:
46 |             logging.info("✅ Sentiment API variables added to config.py")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:53:1
   |
51 |         logging.info(f"❌ Error checking config.py: {e}")
52 |         return False
53 |     
   | ^^^^
54 |     return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:60:1
   |
58 |     """Validate improved process detection logic."""
59 |     logging.info("\n🔍 Validating Process Detection Improvements...")
60 |     
   | ^^^^
61 |     try:
62 |         from performance_monitor import ResourceMonitor
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:63:1
   |
61 |     try:
62 |         from performance_monitor import ResourceMonitor
63 |         
   | ^^^^^^^^
64 |         monitor = ResourceMonitor()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:65:1
   |
64 |         monitor = ResourceMonitor()
65 |         
   | ^^^^^^^^
66 |         # Check if new method exists
67 |         if not hasattr(monitor, '_count_trading_bot_processes'):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:70:1
   |
68 |             logging.info("❌ New _count_trading_bot_processes method not found")
69 |             return False
70 |         
   | ^^^^^^^^
71 |         logging.info("✅ Enhanced process detection method exists")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:72:1
   |
71 |         logging.info("✅ Enhanced process detection method exists")
72 |         
   | ^^^^^^^^
73 |         # Test the method
74 |         try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:80:1
   |
78 |             logging.info(f"⚠️  Process detection method exists but failed to run: {e}")
79 |             # This is not a failure in test environment
80 |         
   | ^^^^^^^^
81 |         # Check alert logic
82 |         test_metrics = {'process': {'python_processes': 3}}
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:84:1
   |
82 |         test_metrics = {'process': {'python_processes': 3}}
83 |         alerts = monitor.check_alert_conditions(test_metrics)
84 |         
   | ^^^^^^^^
85 |         # Look for multiple process alerts
86 |         process_alerts = [a for a in alerts if 'multiple' in a.get('type', '')]
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:94:1
   |
92 |                 logging.info(f"❌ Alert threshold is {alert.get('threshold')}, should be 2")
93 |                 return False
94 |         
   | ^^^^^^^^
95 |         return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_production_fixes.py:96:1
   |
95 |         return True
96 |         
   | ^^^^^^^^
97 |     except ImportError as e:
98 |         logging.info(f"❌ Could not import performance_monitor: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:105:1
    |
103 |     """Validate market-aware data staleness detection."""
104 |     logging.info("\n🔍 Validating Data Staleness Improvements...")
105 |     
    | ^^^^
106 |     try:
107 |         # Check if functions exist in data_validation.py
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:110:1
    |
108 |         with open('data_validation.py', 'r') as f:
109 |             data_val_content = f.read()
110 |         
    | ^^^^^^^^
111 |         required_functions = ['is_market_hours', 'get_staleness_threshold']
112 |         missing_functions = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:113:1
    |
111 |         required_functions = ['is_market_hours', 'get_staleness_threshold']
112 |         missing_functions = []
113 |         
    | ^^^^^^^^
114 |         for func in required_functions:
115 |             if f'def {func}' not in data_val_content:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:117:1
    |
115 |             if f'def {func}' not in data_val_content:
116 |                 missing_functions.append(func)
117 |         
    | ^^^^^^^^
118 |         if missing_functions:
119 |             logging.info(f"❌ Missing functions: {missing_functions}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:121:1
    |
119 |             logging.info(f"❌ Missing functions: {missing_functions}")
120 |             return False
121 |         
    | ^^^^^^^^
122 |         logging.info("✅ Market hours and staleness threshold functions added")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:123:1
    |
122 |         logging.info("✅ Market hours and staleness threshold functions added")
123 |         
    | ^^^^^^^^
124 |         # Test basic logic without pandas dependency
125 |         logging.info("✅ Data validation enhancements properly implemented")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:126:1
    |
124 |         # Test basic logic without pandas dependency
125 |         logging.info("✅ Data validation enhancements properly implemented")
126 |         
    | ^^^^^^^^
127 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:128:1
    |
127 |         return True
128 |         
    | ^^^^^^^^
129 |     except Exception as e:
130 |         logging.info(f"❌ Error validating data staleness: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:137:1
    |
135 |     """Validate enhanced environment debugging capabilities."""
136 |     logging.info("\n🔍 Validating Environment Debugging Enhancements...")
137 |     
    | ^^^^
138 |     try:
139 |         from ai_trading.validation.validate_env import (
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:143:1
    |
141 |             validate_specific_env_var,
142 |         )
143 |         
    | ^^^^^^^^
144 |         logging.info("✅ Enhanced debugging functions imported successfully")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:145:1
    |
144 |         logging.info("✅ Enhanced debugging functions imported successfully")
145 |         
    | ^^^^^^^^
146 |         # Test debug_environment
147 |         debug_report = debug_environment()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:152:1
    |
150 |             'warnings', 'environment_vars', 'recommendations'
151 |         ]
152 |         
    | ^^^^^^^^
153 |         missing_fields = []
154 |         for field in required_fields:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:157:1
    |
155 |             if field not in debug_report:
156 |                 missing_fields.append(field)
157 |         
    | ^^^^^^^^
158 |         if missing_fields:
159 |             logging.info(f"❌ Debug report missing fields: {missing_fields}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:161:1
    |
159 |             logging.info(f"❌ Debug report missing fields: {missing_fields}")
160 |             return False
161 |         
    | ^^^^^^^^
162 |         logging.info("✅ Debug environment function returns proper structure")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:163:1
    |
162 |         logging.info("✅ Debug environment function returns proper structure")
163 |         
    | ^^^^^^^^
164 |         # Test specific variable validation
165 |         result = validate_specific_env_var('TEST_VAR')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:171:1
    |
169 |             logging.info("❌ Specific environment variable validation failed")
170 |             return False
171 |         
    | ^^^^^^^^
172 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:173:1
    |
172 |         return True
173 |         
    | ^^^^^^^^
174 |     except ImportError as e:
175 |         logging.info(f"❌ Could not import enhanced debugging functions: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:182:1
    |
180 |     """Validate that all changes maintain backwards compatibility."""
181 |     logging.info("\n🔍 Validating Backwards Compatibility...")
182 |     
    | ^^^^
183 |     try:
184 |         # Test that original modules still import
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:186:1
    |
184 |         # Test that original modules still import
185 |         modules_to_test = ['performance_monitor', 'data_validation', 'validate_env']
186 |         
    | ^^^^^^^^
187 |         for module_name in modules_to_test:
188 |             try:
    |
help: Remove whitespace from blank line

E501 Line too long (115 > 100)
   --> scripts/validate_production_fixes.py:194:100
    |
192 |                 # Allow for missing dependencies like pandas
193 |                 if any(dep in str(e).lower() for dep in ['pandas', 'pydantic', 'pytz']):
194 |                     logging.info(f"✅ {module_name} import blocked by missing dependencies (expected in test env)")
    |                                                                                                     ^^^^^^^^^^^^^^^
195 |                 else:
196 |                     logging.info(f"❌ {module_name} import failed: {e}")
    |

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:198:1
    |
196 |                     logging.info(f"❌ {module_name} import failed: {e}")
197 |                     return False
198 |         
    | ^^^^^^^^
199 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:200:1
    |
199 |         return True
200 |         
    | ^^^^^^^^
201 |     except Exception as e:
202 |         logging.info(f"❌ Backwards compatibility check failed: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:212:1
    |
210 |     logging.info(str("=" * 60))
211 |     logging.info(f"Validation Time: {datetime.now(datetime.timezone.utc).isoformat()}")
212 |     
    | ^^^^
213 |     tests = [
214 |         ("Sentiment API Configuration", validate_sentiment_api_config),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:220:1
    |
218 |         ("Backwards Compatibility", validate_backwards_compatibility)
219 |     ]
220 |     
    | ^^^^
221 |     passed_tests = 0
222 |     total_tests = len(tests)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:223:1
    |
221 |     passed_tests = 0
222 |     total_tests = len(tests)
223 |     
    | ^^^^
224 |     for test_name, test_func in tests:
225 |         try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:232:1
    |
230 |         except Exception as e:
231 |             logging.info(f"❌ {test_name} validation error: {e}")
232 |     
    | ^^^^
233 |     logging.info(str("\n" + "=" * 60))
234 |     logging.info(f"VALIDATION SUMMARY: {passed_tests}/{total_tests} tests passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_production_fixes.py:235:1
    |
233 |     logging.info(str("\n" + "=" * 60))
234 |     logging.info(f"VALIDATION SUMMARY: {passed_tests}/{total_tests} tests passed")
235 |     
    | ^^^^
236 |     if passed_tests == total_tests:
237 |         logging.info("🎉 ALL PRODUCTION FIXES VALIDATED SUCCESSFULLY!")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/validate_production_fixes.py:246:17
    |
245 | if __name__ == "__main__":
246 |     exit(main())
    |                 ^
    |
help: Add trailing newline

W293 [*] Blank line contains whitespace
  --> scripts/validate_profit_critical.py:19:1
   |
17 |     """Test Money math determinism."""
18 |     logging.info("Testing Money math determinism...")
19 |     
   | ^^^^
20 |     # Import directly from file to avoid package initialization
21 |     sys.path.insert(0, str(repo_root / "ai_trading" / "math"))
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/validate_profit_critical.py:22:5
   |
20 |       # Import directly from file to avoid package initialization
21 |       sys.path.insert(0, str(repo_root / "ai_trading" / "math"))
22 | /     from money import Money
23 | |     from decimal import Decimal
   | |_______________________________^
24 |       
25 |       # Test as specified in problem statement
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/validate_profit_critical.py:24:1
   |
22 |     from money import Money
23 |     from decimal import Decimal
24 |     
   | ^^^^
25 |     # Test as specified in problem statement
26 |     m = Money('1.005')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_profit_critical.py:29:1
   |
27 |     result = m.quantize(Decimal('0.01'))
28 |     result_str = str(result)
29 |     
   | ^^^^
30 |     logging.info(f"Money('1.005').quantize(Decimal('0.01')) = {result_str}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_profit_critical.py:31:1
   |
30 |     logging.info(f"Money('1.005').quantize(Decimal('0.01')) = {result_str}")
31 |     
   | ^^^^
32 |     # Should be either 1.00 or 1.01 due to banker's rounding
33 |     assert result_str in ('1.00', '1.01'), f"Expected 1.00 or 1.01, got {result_str}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_profit_critical.py:34:1
   |
32 |     # Should be either 1.00 or 1.01 due to banker's rounding
33 |     assert result_str in ('1.00', '1.01'), f"Expected 1.00 or 1.01, got {result_str}"
34 |     
   | ^^^^
35 |     # Test basic arithmetic
36 |     m1 = Money('10.50')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_profit_critical.py:40:1
   |
38 |     assert str(m1 + m2) == '15.75'
39 |     assert str(m1 - m2) == '5.25'
40 |     
   | ^^^^
41 |     logging.info("✓ Money math determinism test passed")
42 |     return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_profit_critical.py:47:1
   |
45 |     """Test symbol specifications."""
46 |     logging.info("Testing symbol specifications...")
47 |     
   | ^^^^
48 |     sys.path.insert(0, str(repo_root / "ai_trading" / "market"))
49 |     from symbol_specs import get_symbol_spec, get_tick_size, get_lot_size
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/validate_profit_critical.py:49:5
   |
48 |       sys.path.insert(0, str(repo_root / "ai_trading" / "market"))
49 | /     from symbol_specs import get_symbol_spec, get_tick_size, get_lot_size
50 | |     from decimal import Decimal
   | |_______________________________^
51 |       
52 |       # Test default symbols
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/validate_profit_critical.py:51:1
   |
49 |     from symbol_specs import get_symbol_spec, get_tick_size, get_lot_size
50 |     from decimal import Decimal
51 |     
   | ^^^^
52 |     # Test default symbols
53 |     spec = get_symbol_spec('AAPL')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_profit_critical.py:56:1
   |
54 |     assert spec.tick == Decimal('0.01')
55 |     assert spec.lot == 1
56 |     
   | ^^^^
57 |     tick = get_tick_size('SPY')
58 |     assert tick == Decimal('0.01')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_profit_critical.py:59:1
   |
57 |     tick = get_tick_size('SPY')
58 |     assert tick == Decimal('0.01')
59 |     
   | ^^^^
60 |     lot = get_lot_size('QQQ')
61 |     assert lot == 1
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_profit_critical.py:62:1
   |
60 |     lot = get_lot_size('QQQ')
61 |     assert lot == 1
62 |     
   | ^^^^
63 |     logging.info("✓ Symbol specifications test passed")
64 |     return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_profit_critical.py:69:1
   |
67 |     """Test that all required files exist."""
68 |     logging.info("Testing file structure...")
69 |     
   | ^^^^
70 |     required_files = [
71 |         "ai_trading/math/__init__.py",
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> scripts/validate_profit_critical.py:73:41
   |
71 |         "ai_trading/math/__init__.py",
72 |         "ai_trading/math/money.py",
73 |         "ai_trading/market/__init__.py", 
   |                                         ^
74 |         "ai_trading/market/symbol_specs.py",
75 |         "ai_trading/market/calendars.py",
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> scripts/validate_profit_critical.py:85:1
   |
83 |         "ai_trading/rl_trading/tests/smoke_parity.py"
84 |     ]
85 |     
   | ^^^^
86 |     missing_files = []
87 |     for file_path in required_files:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_profit_critical.py:91:1
   |
89 |         if not full_path.exists():
90 |             missing_files.append(file_path)
91 |     
   | ^^^^
92 |     if missing_files:
93 |         logging.info(f"✗ Missing files: {missing_files}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_profit_critical.py:95:1
   |
93 |         logging.info(f"✗ Missing files: {missing_files}")
94 |         return False
95 |     
   | ^^^^
96 |     logging.info("✓ All required files exist")
97 |     return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_profit_critical.py:102:1
    |
100 |     """Run validation tests."""
101 |     logging.info("=== Profit-Critical Features Validation ===")
102 |     
    | ^^^^
103 |     tests = [
104 |         test_file_structure,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_profit_critical.py:108:1
    |
106 |         test_symbol_specs
107 |     ]
108 |     
    | ^^^^
109 |     results = []
110 |     for test in tests:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_profit_critical.py:118:1
    |
116 |             results.append(False)
117 |         print()
118 |     
    | ^^^^
119 |     success_count = sum(results)
120 |     total_count = len(results)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_profit_critical.py:121:1
    |
119 |     success_count = sum(results)
120 |     total_count = len(results)
121 |     
    | ^^^^
122 |     logging.info(f"=== Results: {success_count}/{total_count} tests passed ===")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_profit_critical.py:123:1
    |
122 |     logging.info(f"=== Results: {success_count}/{total_count} tests passed ===")
123 |     
    | ^^^^
124 |     if all(results):
125 |         logging.info("✓ All validation tests passed!")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/validate_profit_critical.py:132:21
    |
131 | if __name__ == "__main__":
132 |     sys.exit(main())
    |                     ^
    |
help: Add trailing newline

E501 Line too long (101 > 100)
  --> scripts/validate_runtime_hardening.py:30:101
   |
28 |     dt = datetime(2024, 1, 1, 12, 0, 0, tzinfo=UTC)
29 |     formatted = format_datetime_utc(dt)
30 |     assert formatted == "2024-01-01T12:00:00Z", f"Expected '2024-01-01T12:00:00Z', got '{formatted}'"
   |                                                                                                     ^
31 |
32 |     logging.info("✓ UTC timestamp helper working correctly")
   |

E501 Line too long (104 > 100)
   --> scripts/validate_standalone.py:148:101
    |
147 |         def total_execution_cost_bps(self, volume_ratio: float = 1.0) -> float:
148 |             return self.half_spread_bps * 2 + self.commission_bps + self.slippage_cost_bps(volume_ratio)
    |                                                                                                     ^^^^
149 |
150 |     # Test cost calculation
    |

W291 Trailing whitespace
  --> scripts/validate_startup_fixes.py:11:66
   |
10 | 1. Defer Alpaca validation to runtime (no sys.exit during import)
11 | 2. Load .env before constructing settings, lazy-import the engine  
   |                                                                  ^^
12 | 3. Accept both ALPACA_* and APCA_* credentials, with safe redacted logging
13 | 4. Fix UTC timestamp format (no double "Z")
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> scripts/validate_startup_fixes.py:27:1
   |
25 |     """Test that imports don't crash without credentials."""
26 |     logging.info("1. Testing no import-time crashes...")
27 |     
   | ^^^^
28 |     # Clear credentials
29 |     for key in ['ALPACA_API_KEY', 'APCA_API_KEY_ID', 'ALPACA_SECRET_KEY', 'APCA_API_SECRET_KEY']:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_startup_fixes.py:31:1
   |
29 |     for key in ['ALPACA_API_KEY', 'APCA_API_KEY_ID', 'ALPACA_SECRET_KEY', 'APCA_API_SECRET_KEY']:
30 |         os.environ.pop(key, None)
31 |     
   | ^^^^
32 |     try:
33 |         from ai_trading.config.management import _resolve_alpaca_env
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/validate_startup_fixes.py:33:9
   |
32 |       try:
33 | /         from ai_trading.config.management import _resolve_alpaca_env
34 | |         from ai_trading import runner
   | |_____________________________________^
35 |           logging.info("   ✓ Core modules imported without credentials")
36 |           logging.info("   ✓ No sys.exit() calls during import")
   |
help: Organize imports

F401 `ai_trading.config.management._resolve_alpaca_env` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/validate_startup_fixes.py:33:50
   |
32 |     try:
33 |         from ai_trading.config.management import _resolve_alpaca_env
   |                                                  ^^^^^^^^^^^^^^^^^^^
34 |         from ai_trading import runner
35 |         logging.info("   ✓ Core modules imported without credentials")
   |
help: Remove unused import: `ai_trading.config.management._resolve_alpaca_env`

F401 `ai_trading.runner` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> scripts/validate_startup_fixes.py:34:32
   |
32 |     try:
33 |         from ai_trading.config.management import _resolve_alpaca_env
34 |         from ai_trading import runner
   |                                ^^^^^^
35 |         logging.info("   ✓ Core modules imported without credentials")
36 |         logging.info("   ✓ No sys.exit() calls during import")
   |
help: Remove unused import: `ai_trading.runner`

W293 [*] Blank line contains whitespace
  --> scripts/validate_startup_fixes.py:53:1
   |
51 |     """Test both ALPACA_* and APCA_* credential schemas work."""
52 |     logging.info("2. Testing dual credential schema support...")
53 |     
   | ^^^^
54 |     from ai_trading.config.management import _resolve_alpaca_env
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_startup_fixes.py:55:1
   |
54 |     from ai_trading.config.management import _resolve_alpaca_env
55 |     
   | ^^^^
56 |     # Test ALPACA_* schema
57 |     os.environ.clear()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_startup_fixes.py:60:1
   |
58 |     os.environ['ALPACA_API_KEY'] = 'alpaca_test_key'
59 |     os.environ['ALPACA_SECRET_KEY'] = 'alpaca_test_secret'
60 |     
   | ^^^^
61 |     api_key, secret_key, base_url = _resolve_alpaca_env()
62 |     if api_key != 'alpaca_test_key' or secret_key != 'alpaca_test_secret':
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_startup_fixes.py:66:1
   |
64 |         return False
65 |     logging.info("   ✓ ALPACA_* schema works")
66 |     
   | ^^^^
67 |     # Test APCA_* schema
68 |     os.environ.clear()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_startup_fixes.py:71:1
   |
69 |     os.environ['APCA_API_KEY_ID'] = 'apca_test_key'
70 |     os.environ['APCA_API_SECRET_KEY'] = 'apca_test_secret'
71 |     
   | ^^^^
72 |     api_key, secret_key, base_url = _resolve_alpaca_env()
73 |     if api_key != 'apca_test_key' or secret_key != 'apca_test_secret':
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_startup_fixes.py:77:1
   |
75 |         return False
76 |     logging.info("   ✓ APCA_* schema works")
77 |     
   | ^^^^
78 |     # Test precedence (ALPACA takes priority)
79 |     os.environ['ALPACA_API_KEY'] = 'alpaca_priority'
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_startup_fixes.py:81:1
   |
79 |     os.environ['ALPACA_API_KEY'] = 'alpaca_priority'
80 |     os.environ['APCA_API_KEY_ID'] = 'apca_fallback'
81 |     
   | ^^^^
82 |     api_key, secret_key, base_url = _resolve_alpaca_env()
83 |     if api_key != 'alpaca_priority':
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_startup_fixes.py:87:1
   |
85 |         return False
86 |     logging.info("   ✓ ALPACA_* precedence works")
87 |     
   | ^^^^
88 |     return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/validate_startup_fixes.py:94:1
   |
92 |     """Test that .env is loaded before Settings construction."""
93 |     logging.info("3. Testing .env loading order...")
94 |     
   | ^^^^
95 |     # Create a temporary .env file
96 |     env_content = """
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:100:1
    |
 98 | ALPACA_API_KEY=test_key_from_env
 99 | """
100 |     
    | ^^^^
101 |     with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
102 |         f.write(env_content)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:104:1
    |
102 |         f.write(env_content)
103 |         env_path = f.name
104 |     
    | ^^^^
105 |     try:
106 |         # Mock load_dotenv to load our test file
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:113:1
    |
111 |                         key, value = line.strip().split('=', 1)
112 |                         os.environ[key] = value
113 |         
    | ^^^^^^^^
114 |         # Clear and load
115 |         os.environ.pop('TEST_ENV_ORDER', None)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:117:1
    |
115 |         os.environ.pop('TEST_ENV_ORDER', None)
116 |         mock_load_dotenv()
117 |         
    | ^^^^^^^^
118 |         if os.environ.get('TEST_ENV_ORDER') != 'loaded_before_settings':
119 |             logging.info("   ✗ .env loading failed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:121:1
    |
119 |             logging.info("   ✗ .env loading failed")
120 |             return False
121 |         
    | ^^^^^^^^
122 |         logging.info("   ✓ .env loaded before Settings construction")
123 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:124:1
    |
122 |         logging.info("   ✓ .env loaded before Settings construction")
123 |         return True
124 |         
    | ^^^^^^^^
125 |     finally:
126 |         os.unlink(env_path)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:134:1
    |
132 |     """Test UTC timestamp formatting (no double Z)."""
133 |     logging.info("4. Testing UTC timestamp format...")
134 |     
    | ^^^^
135 |     # Load the timefmt module directly
136 |     import sys
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:138:1
    |
136 |     import sys
137 |     sys.path.insert(0, '/home/runner/work/ai-trading-bot/ai-trading-bot')
138 |     
    | ^^^^
139 |     # Load the functions into local scope
140 |     # Import functions from timefmt module instead of using exec
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> scripts/validate_startup_fixes.py:141:5
    |
139 |     # Load the functions into local scope
140 |     # Import functions from timefmt module instead of using exec
141 |     from ai_trading.utils.timefmt import utc_now_iso, format_datetime_utc, ensure_utc_format
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
142 |     
143 |     # Test utc_now_iso
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:142:1
    |
140 |     # Import functions from timefmt module instead of using exec
141 |     from ai_trading.utils.timefmt import utc_now_iso, format_datetime_utc, ensure_utc_format
142 |     
    | ^^^^
143 |     # Test utc_now_iso
144 |     timestamp = utc_now_iso()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:149:1
    |
147 |         return False
148 |     logging.info(f"   ✓ utc_now_iso: {timestamp}")
149 |     
    | ^^^^
150 |     # Test format_datetime_utc
151 |     dt = datetime(2024, 1, 1, 12, 0, 0, tzinfo=timezone.utc)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:157:1
    |
155 |         return False
156 |     logging.info(f"   ✓ format_datetime_utc: {formatted}")
157 |     
    | ^^^^
158 |     # Test ensure_utc_format fixes double Z
159 |     fixed = ensure_utc_format("2024-01-01T12:00:00ZZ")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:164:1
    |
162 |         return False
163 |     logging.info(f"   ✓ ensure_utc_format fixes double Z: {fixed}")
164 |     
    | ^^^^
165 |     return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:171:1
    |
169 |     """Test lazy import mechanism."""
170 |     logging.info("5. Testing lazy imports...")
171 |     
    | ^^^^
172 |     from ai_trading import runner
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:173:1
    |
172 |     from ai_trading import runner
173 |     
    | ^^^^
174 |     # Check that lazy loading mechanism exists
175 |     if not hasattr(runner, '_load_engine'):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:178:1
    |
176 |         logging.info("   ✗ Lazy loading mechanism missing")
177 |         return False
178 |     
    | ^^^^
179 |     # Check initial state is None (not loaded)
180 |     if runner._bot_engine is not None or runner._bot_state_class is not None:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:183:1
    |
181 |         logging.info("   ✗ Components loaded at import time (should be lazy)")
182 |         return False
183 |     
    | ^^^^
184 |     logging.info("   ✓ Lazy import mechanism in place")
185 |     logging.info("   ✓ Components not loaded at import time")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:192:1
    |
190 |     """Test that credential logging is redacted."""
191 |     logging.info("6. Testing redacted credential logging...")
192 |     
    | ^^^^
193 |     try:
194 |         from ai_trading.config.management import _resolve_alpaca_env
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:195:1
    |
193 |     try:
194 |         from ai_trading.config.management import _resolve_alpaca_env
195 |         
    | ^^^^^^^^
196 |         # Set up test credentials
197 |         os.environ['ALPACA_API_KEY'] = 'secret_key_should_be_masked'
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:199:1
    |
197 |         os.environ['ALPACA_API_KEY'] = 'secret_key_should_be_masked'
198 |         os.environ['ALPACA_SECRET_KEY'] = 'secret_value_should_be_masked'
199 |         
    | ^^^^^^^^
200 |         # This should log redacted credentials (we can't easily test the log output here,
201 |         # but we can verify the function works without exposing secrets)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:203:1
    |
201 |         # but we can verify the function works without exposing secrets)
202 |         api_key, secret_key, base_url = _resolve_alpaca_env()
203 |         
    | ^^^^^^^^
204 |         if api_key == 'secret_key_should_be_masked' and secret_key == 'secret_value_should_be_masked':
205 |             logging.info("   ✓ Credential resolution works (logging is redacted in implementation)")
    |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> scripts/validate_startup_fixes.py:204:101
    |
202 |         api_key, secret_key, base_url = _resolve_alpaca_env()
203 |         
204 |         if api_key == 'secret_key_should_be_masked' and secret_key == 'secret_value_should_be_masked':
    |                                                                                                     ^^
205 |             logging.info("   ✓ Credential resolution works (logging is redacted in implementation)")
206 |             return True
    |

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:210:1
    |
208 |             logging.info("   ✗ Credential resolution failed")
209 |             return False
210 |             
    | ^^^^^^^^^^^^
211 |     except Exception as e:
212 |         logging.info(f"   ✗ Redacted logging test failed: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:220:1
    |
218 |     logging.info("Validating startup fixes implementation...")
219 |     logging.info(str("=" * 60))
220 |     
    | ^^^^
221 |     tests = [
222 |         test_no_import_time_crashes,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:229:1
    |
227 |         test_redacted_logging,
228 |     ]
229 |     
    | ^^^^
230 |     results = []
231 |     for test in tests:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:240:1
    |
238 |             results.append(False)
239 |         print()
240 |     
    | ^^^^
241 |     logging.info(str("=" * 60))
242 |     logging.info("VALIDATION SUMMARY:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:244:1
    |
242 |     logging.info("VALIDATION SUMMARY:")
243 |     logging.info(str("=" * 60))
244 |     
    | ^^^^
245 |     passed = sum(results)
246 |     total = len(results)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:247:1
    |
245 |     passed = sum(results)
246 |     total = len(results)
247 |     
    | ^^^^
248 |     test_names = [
249 |         "No import-time crashes",
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:256:1
    |
254 |         "Redacted credential logging"
255 |     ]
256 |     
    | ^^^^
257 |     for i, (name, result) in enumerate(zip(test_names, results)):
258 |         status = "✓ PASS" if result else "✗ FAIL"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:260:1
    |
258 |         status = "✓ PASS" if result else "✗ FAIL"
259 |         logging.info(f"{i+1}. {name}: {status}")
260 |     
    | ^^^^
261 |     logging.info(str("-" * 60))
262 |     logging.info(f"TOTAL: {passed}/{total} tests passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/validate_startup_fixes.py:263:1
    |
261 |     logging.info(str("-" * 60))
262 |     logging.info(f"TOTAL: {passed}/{total} tests passed")
263 |     
    | ^^^^
264 |     if passed == total:
265 |         logging.info("\n🎉 ALL TESTS PASSED!")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/validate_startup_fixes.py:281:21
    |
280 | if __name__ == "__main__":
281 |     sys.exit(main())
    |                     ^
    |
help: Add trailing newline

E712 Avoid equality comparisons to `True`; use `masked['has_credentials']:` for truth checks
  --> scripts/validate_unified_config.py:48:12
   |
46 |     masked = get_masked_config()
47 |     assert "test..._123" in masked['alpaca_api_key'] or "***MASKED***" in masked['alpaca_api_key']
48 |     assert masked['has_credentials'] == True
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |     logging.info("✓ Masked config logging works")
   |
help: Replace with `masked['has_credentials']`

E712 Avoid equality comparisons to `True`; use `acquired:` for truth checks
  --> scripts/validate_unified_config.py:95:12
   |
93 |     # Test basic acquisition
94 |     acquired = limiter.acquire_sync("test_route", tokens=1, timeout=5.0)
95 |     assert acquired == True, "Should acquire tokens successfully"
   |            ^^^^^^^^^^^^^^^^
96 |     logging.info("✓ Basic token acquisition works")
   |
help: Replace with `acquired`

E712 Avoid equality comparisons to `True`; use `status["enabled"]:` for truth checks
   --> scripts/validate_unified_config.py:101:12
    |
 99 |     status = limiter.get_status("orders")
100 |     assert "available_tokens" in status, "Status should include available tokens"
101 |     assert status["enabled"] == True, "Orders route should be enabled"
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^
102 |     logging.info("✓ Rate limiter status works")
    |
help: Replace with `status["enabled"]`

E712 Avoid equality comparisons to `False`; use `not validation_report["file_exists"]:` for false checks
   --> scripts/validate_unified_config.py:150:12
    |
148 |     # Test validation
149 |     validation_report = validate_hyperparams_file("nonexistent_file.json")
150 |     assert validation_report["file_exists"] == False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
151 |     assert len(validation_report["warnings"]) > 0
152 |     logging.info("✓ Validation report works")
    |
help: Replace with `not validation_report["file_exists"]`

I001 [*] Import block is un-sorted or un-formatted
  --> scripts/verify_config.py:11:1
   |
 9 |   """
10 |
11 | / import os
12 | | import sys
13 | | from pathlib import Path
14 | |
15 | | from ai_trading.config import management as config
16 | | from ai_trading.config.management import TradingConfig
   | |______________________________________________________^
17 |   CONFIG = TradingConfig()
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> scripts/verify_config.py:23:1
   |
21 |     """Check if .env file exists and has proper format."""
22 |     env_path = Path('.env')
23 |     
   | ^^^^
24 |     if not env_path.exists():
25 |         return False, "❌ .env file not found. Run: cp .env.example .env"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/verify_config.py:26:1
   |
24 |     if not env_path.exists():
25 |         return False, "❌ .env file not found. Run: cp .env.example .env"
26 |     
   | ^^^^
27 |     try:
28 |         with open(env_path, 'r') as f:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/verify_config.py:30:1
   |
28 |         with open(env_path, 'r') as f:
29 |             content = f.read()
30 |         
   | ^^^^^^^^
31 |         # Check for required variables
32 |         required_vars = ['ALPACA_API_KEY', 'ALPACA_SECRET_KEY', 'ALPACA_BASE_URL']
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/verify_config.py:35:1
   |
33 |         missing_vars = []
34 |         placeholder_vars = []
35 |         
   | ^^^^^^^^
36 |         # Load environment first to check if keys are set via env vars
37 |         from dotenv import load_dotenv
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/verify_config.py:39:1
   |
37 |         from dotenv import load_dotenv
38 |         load_dotenv('.env', override=True)
39 |         
   | ^^^^^^^^
40 |         for var in required_vars:
41 |             env_value = os.getenv(var)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/verify_config.py:46:1
   |
44 |             elif env_value and env_value.startswith('YOUR_'):
45 |                 placeholder_vars.append(var)
46 |         
   | ^^^^^^^^
47 |         if missing_vars:
48 |             return False, f"❌ Missing variables in .env: {', '.join(missing_vars)}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/verify_config.py:49:1
   |
47 |         if missing_vars:
48 |             return False, f"❌ Missing variables in .env: {', '.join(missing_vars)}"
49 |         
   | ^^^^^^^^
50 |         # Only warn about placeholders if not overridden by environment variables
51 |         if placeholder_vars:
   |
help: Remove whitespace from blank line

E501 Line too long (161 > 100)
  --> scripts/verify_config.py:52:102
   |
50 | …ronment variables
51 | …
52 | …env: {', '.join(placeholder_vars)}\n   Please replace YOUR_* placeholders with your real API keys"
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
53 | …
54 | …
   |

W293 [*] Blank line contains whitespace
  --> scripts/verify_config.py:53:1
   |
51 | …     if placeholder_vars:
52 | …         return False, f"⚠️  Placeholder values detected in .env: {', '.join(placeholder_vars)}\n   Please replace YOUR_* placeholder… 
53 | …     
   ^^^^^^^^
54 | …     return True, "✅ .env file format looks good"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/verify_config.py:55:1
   |
54 |         return True, "✅ .env file format looks good"
55 |         
   | ^^^^^^^^
56 |     except ImportError:
57 |         return False, "❌ python-dotenv not installed. Run: pip install python-dotenv"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/verify_config.py:68:1
   |
66 |         from dotenv import load_dotenv
67 |         load_dotenv('.env', override=True)
68 |         
   | ^^^^^^^^
69 |         api_key = os.getenv('ALPACA_API_KEY')
70 |         secret_key = os.getenv('ALPACA_SECRET_KEY')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/verify_config.py:72:1
   |
70 |         secret_key = os.getenv('ALPACA_SECRET_KEY')
71 |         base_url = os.getenv('ALPACA_BASE_URL')
72 |         
   | ^^^^^^^^
73 |         issues = []
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/verify_config.py:74:1
   |
73 |         issues = []
74 |         
   | ^^^^^^^^
75 |         # Check API key
76 |         if not api_key:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/verify_config.py:82:1
   |
80 |         elif len(api_key) < 20:
81 |             issues.append("ALPACA_API_KEY appears too short")
82 |         
   | ^^^^^^^^
83 |         # Check secret key
84 |         if not secret_key:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/verify_config.py:90:1
   |
88 |         elif len(secret_key) < 30:
89 |             issues.append("ALPACA_SECRET_KEY appears too short")
90 |         
   | ^^^^^^^^
91 |         # Check base URL
92 |         if not base_url:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> scripts/verify_config.py:96:1
   |
94 |         elif not base_url.startswith('https://'):
95 |             issues.append("ALPACA_BASE_URL should start with https://")
96 |         
   | ^^^^^^^^
97 |         if issues:
98 |             return False, "❌ API key issues found:\n   " + "\n   ".join(issues)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/verify_config.py:99:1
    |
 97 |         if issues:
 98 |             return False, "❌ API key issues found:\n   " + "\n   ".join(issues)
 99 |         
    | ^^^^^^^^
100 |         # Determine if using paper trading
101 |         is_paper = 'paper' in base_url.lower()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/verify_config.py:103:1
    |
101 |         is_paper = 'paper' in base_url.lower()
102 |         env_type = "Paper Trading (Safe)" if is_paper else "Live Trading (Real Money!)"
103 |         
    | ^^^^^^^^
104 |         return True, f"✅ API keys configured correctly\n   Environment: {env_type}"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/verify_config.py:105:1
    |
104 |         return True, f"✅ API keys configured correctly\n   Environment: {env_type}"
105 |         
    | ^^^^^^^^
106 |     except ImportError:
107 |         return False, "❌ python-dotenv not installed. Run: pip install python-dotenv"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/verify_config.py:117:1
    |
115 |         # Set test environment to avoid validation errors
116 |         os.environ['TESTING'] = '1'
117 |         
    | ^^^^^^^^
118 |         # Check if keys are accessible
119 |         has_api_key = bool(config.ALPACA_API_KEY and config.ALPACA_API_KEY != 'YOUR_ALPACA_API_KEY_HERE')
    |
help: Remove whitespace from blank line

E501 Line too long (105 > 100)
   --> scripts/verify_config.py:119:101
    |
118 |         # Check if keys are accessible
119 |         has_api_key = bool(config.ALPACA_API_KEY and config.ALPACA_API_KEY != 'YOUR_ALPACA_API_KEY_HERE')
    |                                                                                                     ^^^^^
120 |         has_secret = bool(config.ALPACA_SECRET_KEY and config.ALPACA_SECRET_KEY != 'YOUR_ALPACA_SECRET_KEY_HERE')
    |

E501 Line too long (113 > 100)
   --> scripts/verify_config.py:120:101
    |
118 |         # Check if keys are accessible
119 |         has_api_key = bool(config.ALPACA_API_KEY and config.ALPACA_API_KEY != 'YOUR_ALPACA_API_KEY_HERE')
120 |         has_secret = bool(config.ALPACA_SECRET_KEY and config.ALPACA_SECRET_KEY != 'YOUR_ALPACA_SECRET_KEY_HERE')
    |                                                                                                     ^^^^^^^^^^^^^
121 |         
122 |         if has_api_key and has_secret:
    |

W293 [*] Blank line contains whitespace
   --> scripts/verify_config.py:121:1
    |
119 |         has_api_key = bool(config.ALPACA_API_KEY and config.ALPACA_API_KEY != 'YOUR_ALPACA_API_KEY_HERE')
120 |         has_secret = bool(config.ALPACA_SECRET_KEY and config.ALPACA_SECRET_KEY != 'YOUR_ALPACA_SECRET_KEY_HERE')
121 |         
    | ^^^^^^^^
122 |         if has_api_key and has_secret:
123 |             return True, "✅ Configuration module imports successfully with API keys"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/verify_config.py:126:1
    |
124 |         else:
125 |             return False, "⚠️  Configuration imports but API keys not properly set"
126 |         
    | ^^^^^^^^
127 |     except Exception as e:
128 |         return False, f"❌ Error importing config: {e}"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/verify_config.py:154:1
    |
152 |     """Main verification function."""
153 |     logging.info("🔍 AI Trading Bot - API Key Configuration Verification\n")
154 |     
    | ^^^^
155 |     all_good = True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/verify_config.py:156:1
    |
155 |     all_good = True
156 |     
    | ^^^^
157 |     # Check .env file
158 |     env_ok, env_msg = check_env_file()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/verify_config.py:162:1
    |
160 |     if not env_ok:
161 |         all_good = False
162 |     
    | ^^^^
163 |     # Check API keys
164 |     api_ok, api_msg = check_api_keys()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/verify_config.py:168:1
    |
166 |     if not api_ok:
167 |         all_good = False
168 |     
    | ^^^^
169 |     # Check config import
170 |     config_ok, config_msg = check_config_import()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/verify_config.py:174:1
    |
172 |     if not config_ok:
173 |         all_good = False
174 |     
    | ^^^^
175 |     logging.info(str("\n" + "="*60))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/verify_config.py:176:1
    |
175 |     logging.info(str("\n" + "="*60))
176 |     
    | ^^^^
177 |     if all_good:
178 |         logging.info("🎉 SUCCESS: Your API key configuration is ready!")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> scripts/verify_config.py:186:1
    |
184 |         print_setup_instructions()
185 |         return 1
186 |     
    | ^^^^
187 |     return 0
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> scripts/verify_config.py:191:21
    |
190 | if __name__ == '__main__':
191 |     sys.exit(main())
    |                     ^
    |
help: Add trailing newline

E501 Line too long (105 > 100)
  --> scripts/verify_critical_fixes.py:15:101
   |
14 |     # Check that the fix is present
15 |     assert '.replace(\'+00:00\', \'Z\')' in content, "RFC3339 timestamp fix not found in data_fetcher.py"
   |                                                                                                     ^^^^^
16 |
17 |     # Check both start and end parameters are fixed
   |

E501 Line too long (121 > 100)
  --> scripts/verify_critical_fixes.py:53:101
   |
51 |     assert 'pd.to_numeric' in content, "Price conversion logic not found"
52 |     assert 'errors="coerce"' in content, "Error handling for price conversion not found"
53 |     assert 'METALEARN_INVALID_PRICES - No trades with valid prices' in content, "Invalid prices error handling not found"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
54 |
55 |     logging.info("✓ Meta learning price conversion fixes verified in meta_learning.py")
   |

E501 Line too long (101 > 100)
  --> scripts/verify_critical_fixes.py:66:101
   |
64 |     assert 'ALLOW_STALE_DATA_STARTUP' in content, "Stale data bypass environment variable not found"
65 |     assert 'BYPASS_STALE_DATA_STARTUP' in content, "Stale data bypass logic not found"
66 |     assert 'stale_data = summary.get("stale_data", [])' in content, "Stale data extraction not found"
   |                                                                                                     ^
67 |
68 |     logging.info("✓ Stale data bypass fix verified in bot_engine.py")
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/allocators/test_confidence_gate_env.py:1:1
  |
1 | / import logging
2 | |
3 | | from ai_trading.strategies.performance_allocator import (
4 | |     PerformanceBasedAllocator,
5 | |     AllocatorConfig,
6 | | )
  | |_^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/conftest.py:67:1
   |
65 | except Exception:
66 |     import types
67 |     
   | ^^^^
68 |     def given(**strategy_kwargs):
69 |         def decorator(f):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/conftest.py:74:1
   |
72 |             return pytest.mark.skip("hypothesis-based test - skipped in simple test mode")(f)
73 |         return decorator
74 |     
   | ^^^^
75 |     def settings(*args, **kwargs):
76 |         def decorator(f):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/conftest.py:79:1
   |
77 |             return f
78 |         return decorator
79 |     
   | ^^^^
80 |     class HealthCheck:
81 |         too_slow = "too_slow"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/conftest.py:84:1
   |
82 |         filter_too_much = "filter_too_much"
83 |         function_scoped_fixture = "function_scoped_fixture"
84 |     
   | ^^^^
85 |     # Add strategies module
86 |     class Strategies:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/conftest.py:90:1
   |
88 |         def text():
89 |             return "test_string"
90 |         
   | ^^^^^^^^
91 |         @staticmethod
92 |         def integers(min_value=None, max_value=None):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/conftest.py:94:1
   |
92 |         def integers(min_value=None, max_value=None):
93 |             return 42
94 |             
   | ^^^^^^^^^^^^
95 |         @staticmethod
96 |         def floats(min_value=None, max_value=None, allow_nan=True, allow_infinity=True, **kwargs):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:98:1
    |
 96 |         def floats(min_value=None, max_value=None, allow_nan=True, allow_infinity=True, **kwargs):
 97 |             return 1.0
 98 |             
    | ^^^^^^^^^^^^
 99 |         @staticmethod
100 |         def lists(elements, min_size=0, max_size=None, **kwargs):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:106:1
    |
104 |                 return [elements() for _ in range(size)]
105 |             return [1.0] * size
106 |     
    | ^^^^
107 |     hypothesis_mod = types.ModuleType("hypothesis")
108 |     hypothesis_mod.given = given
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:127:1
    |
125 |         def __exit__(self, *args):
126 |             pass
127 |     
    | ^^^^
128 |     portalocker_mod = types.ModuleType("portalocker")
129 |     portalocker_mod.Lock = LockStub
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:147:1
    |
145 |         def __getattr__(self, name):
146 |             return lambda *args, **kwargs: self
147 |     
    | ^^^^
148 |     schedule_mod = types.ModuleType("schedule")
149 |     schedule_mod.every = lambda *a: ScheduleStub()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:159:1
    |
157 | except Exception:
158 |     import types
159 |     
    | ^^^^
160 |     class Space:
161 |         def __init__(self, *args, **kwargs):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:163:1
    |
161 |         def __init__(self, *args, **kwargs):
162 |             pass
163 |     
    | ^^^^
164 |     class Discrete(Space):
165 |         def __init__(self, n):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:167:1
    |
165 |         def __init__(self, n):
166 |             self.n = n
167 |     
    | ^^^^
168 |     class Box(Space):
169 |         def __init__(self, low, high, shape=None, dtype=None):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:174:1
    |
172 |             self.shape = shape
173 |             self.dtype = dtype
174 |     
    | ^^^^
175 |     class Spaces:
176 |         Discrete = Discrete
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:178:1
    |
176 |         Discrete = Discrete
177 |         Box = Box
178 |     
    | ^^^^
179 |     class Env:
180 |         def __init__(self):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:183:1
    |
181 |             self.action_space = None
182 |             self.observation_space = None
183 |         
    | ^^^^^^^^
184 |         def reset(self):
185 |             return None, {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:186:1
    |
184 |         def reset(self):
185 |             return None, {}
186 |         
    | ^^^^^^^^
187 |         def step(self, action):
188 |             return None, 0, False, False, {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:189:1
    |
187 |         def step(self, action):
188 |             return None, 0, False, False, {}
189 |         
    | ^^^^^^^^
190 |         def render(self):
191 |             pass
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:192:1
    |
190 |         def render(self):
191 |             pass
192 |         
    | ^^^^^^^^
193 |         def close(self):
194 |             pass
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:195:1
    |
193 |         def close(self):
194 |             pass
195 |     
    | ^^^^
196 |     gymnasium_mod = types.ModuleType("gymnasium")
197 |     gymnasium_mod.Env = Env
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:209:1
    |
207 |     hmmlearn_mod = types.ModuleType("hmmlearn")
208 |     hmm_mod = types.ModuleType("hmmlearn.hmm")
209 |     
    | ^^^^
210 |     class GaussianHMM:
211 |         def __init__(self, *args, **kwargs):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:217:1
    |
215 |         def predict(self, *args, **kwargs):
216 |             return [0, 1, 0, 1]  # Mock regime predictions
217 |     
    | ^^^^
218 |     hmm_mod.GaussianHMM = GaussianHMM
219 |     hmmlearn_mod.hmm = hmm_mod
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:229:1
    |
227 | except Exception:
228 |     import types
229 |     
    | ^^^^
230 |     class FinnhubAPIException(Exception):
231 |         def __init__(self, *args, status_code=None, **kwargs):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:234:1
    |
232 |             self.status_code = status_code
233 |             super().__init__(*args)
234 |     
    | ^^^^
235 |     class Client:
236 |         def __init__(self, api_key=None):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:238:1
    |
236 |         def __init__(self, api_key=None):
237 |             self.api_key = api_key
238 |         
    | ^^^^^^^^
239 |         def __getattr__(self, name):
240 |             return lambda *args, **kwargs: None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:241:1
    |
239 |         def __getattr__(self, name):
240 |             return lambda *args, **kwargs: None
241 |     
    | ^^^^
242 |     finnhub_mod = types.ModuleType("finnhub")
243 |     finnhub_mod.FinnhubAPIException = FinnhubAPIException
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:253:1
    |
251 | except Exception:
252 |     import types
253 |     
    | ^^^^
254 |     class Parameter:
255 |         def __init__(self, data):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:257:1
    |
255 |         def __init__(self, data):
256 |             self.data = data
257 |     
    | ^^^^
258 |     class Module:
259 |         def __init__(self):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:261:1
    |
259 |         def __init__(self):
260 |             pass
261 |         
    | ^^^^^^^^
262 |         def parameters(self):
263 |             return [Parameter([1.0, 2.0])]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:264:1
    |
262 |         def parameters(self):
263 |             return [Parameter([1.0, 2.0])]
264 |         
    | ^^^^^^^^
265 |         def __call__(self, *args, **kwargs):
266 |             return self.forward(*args, **kwargs)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:267:1
    |
265 |         def __call__(self, *args, **kwargs):
266 |             return self.forward(*args, **kwargs)
267 |         
    | ^^^^^^^^
268 |         def forward(self, x):
269 |             return x
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:270:1
    |
268 |         def forward(self, x):
269 |             return x
270 |     
    | ^^^^
271 |     class Linear(Module):
272 |         def __init__(self, in_features, out_features):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:276:1
    |
274 |             self.in_features = in_features
275 |             self.out_features = out_features
276 |     
    | ^^^^
277 |     class ReLU(Module):
278 |         pass
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:279:1
    |
277 |     class ReLU(Module):
278 |         pass
279 |     
    | ^^^^
280 |     class Tanh(Module):
281 |         pass
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:282:1
    |
280 |     class Tanh(Module):
281 |         pass
282 |     
    | ^^^^
283 |     class Sequential(Module):
284 |         def __init__(self, *layers):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:287:1
    |
285 |             super().__init__()
286 |             self.layers = layers
287 |     
    | ^^^^
288 |     class Tensor:
289 |         def __init__(self, data):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:296:1
    |
294 |             import numpy as np
295 |             return np.array([0.2, 0.2, 0.2, 0.2, 0.2])  # Mock equal weight portfolio
296 |     
    | ^^^^
297 |     class OptimModule:
298 |         class Adam:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:306:1
    |
304 |             def zero_grad(self):
305 |                 pass
306 |     
    | ^^^^
307 |     def tensor(data, dtype=None):
308 |         return Tensor(data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:309:1
    |
307 |     def tensor(data, dtype=None):
308 |         return Tensor(data)
309 |     
    | ^^^^
310 |     def manual_seed(seed):
311 |         pass
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:312:1
    |
310 |     def manual_seed(seed):
311 |         pass
312 |     
    | ^^^^
313 |     class Softmax(Module):
314 |         def __init__(self, dim=-1):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:317:1
    |
315 |             super().__init__()
316 |             self.dim = dim
317 |     
    | ^^^^
318 |     torch_mod = types.ModuleType("torch")
319 |     torch_mod.nn = types.ModuleType("torch.nn")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:348:1
    |
346 | except Exception:
347 |     import types
348 |     
    | ^^^^
349 |     def retry(*args, **kwargs):
350 |         def decorator(f):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:353:1
    |
351 |             return f
352 |         return decorator
353 |     
    | ^^^^
354 |     class WaitStub:
355 |         def __add__(self, other):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:359:1
    |
357 |         def __radd__(self, other):
358 |             return self
359 |     
    | ^^^^
360 |     def wait_exponential(*args, **kwargs):
361 |         return WaitStub()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:362:1
    |
360 |     def wait_exponential(*args, **kwargs):
361 |         return WaitStub()
362 |     
    | ^^^^
363 |     def wait_random(*args, **kwargs):
364 |         return WaitStub()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:365:1
    |
363 |     def wait_random(*args, **kwargs):
364 |         return WaitStub()
365 |     
    | ^^^^
366 |     def stop_after_attempt(*args, **kwargs):
367 |         return None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:368:1
    |
366 |     def stop_after_attempt(*args, **kwargs):
367 |         return None
368 |     
    | ^^^^
369 |     def retry_if_exception_type(*args, **kwargs):
370 |         return None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:371:1
    |
369 |     def retry_if_exception_type(*args, **kwargs):
370 |         return None
371 |     
    | ^^^^
372 |     class RetryError(Exception):
373 |         pass
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:374:1
    |
372 |     class RetryError(Exception):
373 |         pass
374 |     
    | ^^^^
375 |     tenacity_mod = types.ModuleType("tenacity")
376 |     tenacity_mod.retry = retry
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/conftest.py:397:1
    |
396 |   sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
397 | / import types
398 | | from pathlib import Path
399 | |
400 | | import pytest
401 | | from datetime import UTC
    | |________________________^
402 |
403 |   # AI-AGENT-REF: Add numpy stub before any imports that might need it
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:408:1
    |
406 | except Exception:  # pragma: no cover - optional dependency
407 |     import types
408 |     
    | ^^^^
409 |     class ArrayStub(list):
410 |         def __init__(self, data=None, dtype=None):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:413:1
    |
411 |             super().__init__(data or [])
412 |             self.dtype = dtype
413 |             
    | ^^^^^^^^^^^^
414 |         def __array__(self):
415 |             return self
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:416:1
    |
414 |         def __array__(self):
415 |             return self
416 |             
    | ^^^^^^^^^^^^
417 |         def reshape(self, *args):
418 |             return self
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:419:1
    |
417 |         def reshape(self, *args):
418 |             return self
419 |             
    | ^^^^^^^^^^^^
420 |         def __sub__(self, other):
421 |             if isinstance(other, (list, ArrayStub)):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:424:1
    |
422 |                 return ArrayStub([a - b for a, b in zip(self, other, strict=False)])
423 |             return ArrayStub([x - other for x in self])
424 |             
    | ^^^^^^^^^^^^
425 |         def __truediv__(self, other):
426 |             if isinstance(other, (list, ArrayStub)):
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> tests/conftest.py:427:101
    |
425 |         def __truediv__(self, other):
426 |             if isinstance(other, (list, ArrayStub)):
427 |                 return ArrayStub([a / b if b != 0 else 0 for a, b in zip(self, other, strict=False)])
    |                                                                                                     ^
428 |             return ArrayStub([x / other if other != 0 else 0 for x in self])
    |

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:429:1
    |
427 |                 return ArrayStub([a / b if b != 0 else 0 for a, b in zip(self, other, strict=False)])
428 |             return ArrayStub([x / other if other != 0 else 0 for x in self])
429 |             
    | ^^^^^^^^^^^^
430 |         def max(self):
431 |             return max(self) if self else 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:432:1
    |
430 |         def max(self):
431 |             return max(self) if self else 0
432 |             
    | ^^^^^^^^^^^^
433 |         def __getattr__(self, name):
434 |             return lambda *args, **kwargs: self
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:435:1
    |
433 |         def __getattr__(self, name):
434 |             return lambda *args, **kwargs: self
435 |     
    | ^^^^
436 |     numpy_mod = types.ModuleType("numpy")
437 |     numpy_mod.array = ArrayStub
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:450:1
    |
448 |     numpy_mod.exp = lambda x: 2.718281828 ** x
449 |     numpy_mod.log = lambda x: 0.0
450 |     
    | ^^^^
451 |     # Create maximum with accumulate method
452 |     class MaximumStub:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:464:1
    |
462 |                 result.append(max_so_far)
463 |             return ArrayStub(result)
464 |         
    | ^^^^^^^^
465 |         def __call__(self, *args):
466 |             return max(*args) if args else 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:467:1
    |
465 |         def __call__(self, *args):
466 |             return max(*args) if args else 0
467 |     
    | ^^^^
468 |     numpy_mod.maximum = MaximumStub()
469 |     numpy_mod.minimum = min
    |
help: Remove whitespace from blank line

E501 Line too long (121 > 100)
   --> tests/conftest.py:473:101
    |
471 |     numpy_mod.isscalar = lambda x: isinstance(x, (int, float, complex))
472 |     numpy_mod.bool_ = bool
473 |     numpy_mod.linspace = lambda start, stop, num: ArrayStub([start + (stop - start) * i / (num - 1) for i in range(num)])
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
474 |     
475 |     # Add random module stub
    |

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:474:1
    |
472 |     numpy_mod.bool_ = bool
473 |     numpy_mod.linspace = lambda start, stop, num: ArrayStub([start + (stop - start) * i / (num - 1) for i in range(num)])
474 |     
    | ^^^^
475 |     # Add random module stub
476 |     class RandomStub:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:501:1
    |
499 |                 return [0.0] * size
500 |             return 0.0
501 |     
    | ^^^^
502 |     numpy_mod.random = RandomStub()
503 |     numpy_mod.__file__ = "stub"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:520:1
    |
518 | except Exception:  # pragma: no cover - optional dependency
519 |     import types
520 |     
    | ^^^^
521 |     # Create pandas stub module
522 |     pandas_mod = types.ModuleType("pandas")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:523:1
    |
521 |     # Create pandas stub module
522 |     pandas_mod = types.ModuleType("pandas")
523 |     
    | ^^^^
524 |     # Create minimal DataFrame stub
525 |     class DataFrameStub:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:542:1
    |
540 |             # Initialize index attribute for getting/setting
541 |             self._index = None
542 |                 
    | ^^^^^^^^^^^^^^^^
543 |         def __len__(self):
544 |             return self._length
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:545:1
    |
543 |         def __len__(self):
544 |             return self._length
545 |             
    | ^^^^^^^^^^^^
546 |         def __getitem__(self, key):
547 |             # Handle list of column names (multiple column selection)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:561:1
    |
559 |                 return SeriesStub(self.data[key])
560 |             return SeriesStub([1, 2, 3])  # Fallback for missing keys
561 |             
    | ^^^^^^^^^^^^
562 |         def iloc(self):
563 |             return self
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:564:1
    |
562 |         def iloc(self):
563 |             return self
564 |             
    | ^^^^^^^^^^^^
565 |         @property 
566 |         def columns(self):
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/conftest.py:565:18
    |
563 |             return self
564 |             
565 |         @property 
    |                  ^
566 |         def columns(self):
567 |             class ColumnsStub(list):
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:575:1
    |
573 |                 return ColumnsStub(list(self.data.keys()))
574 |             return ColumnsStub(["open", "high", "low", "close", "volume"])  # Default columns
575 |             
    | ^^^^^^^^^^^^
576 |         @property
577 |         def index(self):
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/conftest.py:587:30
    |
585 |                     def tz_localize(self, tz):
586 |                         return self  # Return self for method chaining
587 |                     @property 
    |                              ^
588 |                     def tz(self):
589 |                         return None  # No timezone by default
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:592:1
    |
590 |                 self._index = IndexStub()
591 |             return self._index
592 |             
    | ^^^^^^^^^^^^
593 |         @index.setter 
594 |         def index(self, value):
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/conftest.py:593:22
    |
591 |             return self._index
592 |             
593 |         @index.setter 
    |                      ^
594 |         def index(self, value):
595 |             self._index = value
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:596:1
    |
594 |         def index(self, value):
595 |             self._index = value
596 |             
    | ^^^^^^^^^^^^
597 |         @property
598 |         def empty(self):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:600:1
    |
598 |         def empty(self):
599 |             return self._length == 0
600 |             
    | ^^^^^^^^^^^^
601 |         def isna(self):
602 |             """Return a DataFrame-like object with all False values (no NaN in test data)."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:612:1
    |
610 |                     return AnyResult()
611 |             return IsNaResult()
612 |             
    | ^^^^^^^^^^^^
613 |         def __getattr__(self, name):
614 |             return lambda *args, **kwargs: self
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:615:1
    |
613 |         def __getattr__(self, name):
614 |             return lambda *args, **kwargs: self
615 |     
    | ^^^^
616 |     # Create minimal Series stub
617 |     class SeriesStub(list):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:620:1
    |
618 |         def __init__(self, data=None):
619 |             super().__init__(data or [1, 2, 3])
620 |             
    | ^^^^^^^^^^^^
621 |         @property
622 |         def is_monotonic_increasing(self):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:624:1
    |
622 |         def is_monotonic_increasing(self):
623 |             return True  # Mock for monotonic check
624 |             
    | ^^^^^^^^^^^^
625 |         @property
626 |         def empty(self):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:628:1
    |
626 |         def empty(self):
627 |             return len(self) == 0
628 |             
    | ^^^^^^^^^^^^
629 |         @property
630 |         def iloc(self):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:635:1
    |
633 |                 def __init__(self, series):
634 |                     self.series = series
635 |                 
    | ^^^^^^^^^^^^^^^^
636 |                 def __getitem__(self, idx):
637 |                     if isinstance(idx, int):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:644:1
    |
642 |                     return self.series[idx] if hasattr(self.series, '__getitem__') else 0
643 |             return IlocAccessor(self)
644 |         
    | ^^^^^^^^
645 |         def dropna(self):
646 |             """Return self since we're mocking without actual NaN values."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:648:1
    |
646 |             """Return self since we're mocking without actual NaN values."""
647 |             return SeriesStub([x for x in self if x is not None and str(x) != 'nan'])
648 |         
    | ^^^^^^^^
649 |         def rolling(self, window):
650 |             """Mock rolling window operations."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:655:1
    |
653 |                     self.series = series
654 |                     self.window = window
655 |                 
    | ^^^^^^^^^^^^^^^^
656 |                 def mean(self):
657 |                     # For testing mean reversion, return a series where the last value
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/conftest.py:667:92
    |
665 | …                         result.append(float('nan'))  # Not enough data for window
666 | …                     else:
667 | …                         # Mock rolling mean - for our test case, make it around 1.5 
    |                                                                                      ^
668 | …                         # so that when series value is 5, z-score is high
669 | …                         result.append(1.5)
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:672:1
    |
670 |                         return SeriesStub(result)
671 |                     return SeriesStub([1.5] * len(self.series))
672 |                 
    | ^^^^^^^^^^^^^^^^
673 |                 def std(self, ddof=0):
674 |                     # For z-score calculation, return std that will give us expected result
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:686:1
    |
684 |                         return SeriesStub(result)
685 |                     return SeriesStub([1.5] * len(self.series))
686 |                 
    | ^^^^^^^^^^^^^^^^
687 |             return RollingStub(self, window)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:688:1
    |
687 |             return RollingStub(self, window)
688 |             
    | ^^^^^^^^^^^^
689 |         def accumulate(self, *args, **kwargs):
690 |             return SeriesStub(self)  # Return self for accumulate
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:691:1
    |
689 |         def accumulate(self, *args, **kwargs):
690 |             return SeriesStub(self)  # Return self for accumulate
691 |         
    | ^^^^^^^^
692 |         def __sub__(self, other):
693 |             """Support subtraction for z-score calculation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:703:1
    |
701 |                 return SeriesStub(result)
702 |             return SeriesStub([x - other if str(x) != 'nan' else float('nan') for x in self])
703 |         
    | ^^^^^^^^
704 |         def __truediv__(self, other):
705 |             """Support division for z-score calculation."""
    |
help: Remove whitespace from blank line

E501 Line too long (108 > 100)
   --> tests/conftest.py:714:101
    |
712 |                         result.append(self[i] / other[i])
713 |                 return SeriesStub(result)
714 |             return SeriesStub([x / other if str(x) != 'nan' and other != 0 else float('nan') for x in self])
    |                                                                                                     ^^^^^^^^
715 |             
716 |         def __getattr__(self, name):
    |

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:715:1
    |
713 |                 return SeriesStub(result)
714 |             return SeriesStub([x / other if str(x) != 'nan' and other != 0 else float('nan') for x in self])
715 |             
    | ^^^^^^^^^^^^
716 |         def __getattr__(self, name):
717 |             return lambda *args, **kwargs: self
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:718:1
    |
716 |         def __getattr__(self, name):
717 |             return lambda *args, **kwargs: self
718 |     
    | ^^^^
719 |     # Create minimal Timestamp stub
720 |     class TimestampStub:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:732:1
    |
730 |             else:
731 |                 self.value = datetime.now(dt.UTC).isoformat()
732 |             
    | ^^^^^^^^^^^^
733 |             # Handle timezone parameter
734 |             if 'tz' in kwargs or len(args) > 1:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:751:1
    |
749 |             else:
750 |                 self._dt = datetime.now(UTC)
751 |                 
    | ^^^^^^^^^^^^^^^^
752 |         def __str__(self):
753 |             return self.value
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:754:1
    |
752 |         def __str__(self):
753 |             return self.value
754 |             
    | ^^^^^^^^^^^^
755 |         def __repr__(self):
756 |             return f"TimestampStub('{self.value}')"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:757:1
    |
755 |         def __repr__(self):
756 |             return f"TimestampStub('{self.value}')"
757 |             
    | ^^^^^^^^^^^^
758 |         @staticmethod
759 |         def utcnow():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:762:1
    |
760 |             from datetime import datetime
761 |             return datetime.now(dt.UTC)
762 |             
    | ^^^^^^^^^^^^
763 |         @staticmethod
764 |         def now(tz=None):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:769:1
    |
767 |                 return datetime.now(dt.UTC)
768 |             return datetime.now(dt.UTC)
769 |             
    | ^^^^^^^^^^^^
770 |         def __sub__(self, other):
771 |             # Support timestamp arithmetic for comparisons
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:774:1
    |
772 |             from datetime import datetime, timedelta
773 |             return datetime.now(dt.UTC) - timedelta(days=1)  # Return a reasonable past time
774 |         
    | ^^^^^^^^
775 |         def __add__(self, other):
776 |             # Support timestamp + timedelta operations
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:781:1
    |
779 |                 return TimestampStub(str(self._dt + other.td))
780 |             return TimestampStub(str(self._dt + timedelta(minutes=1)))
781 |         
    | ^^^^^^^^
782 |         def to_pydatetime(self):
783 |             """Return the underlying datetime object."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:785:1
    |
783 |             """Return the underlying datetime object."""
784 |             return self._dt
785 |     
    | ^^^^
786 |     # Add pandas functions
787 |     def read_csv(*args, **kwargs):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:789:1
    |
787 |     def read_csv(*args, **kwargs):
788 |         return DataFrameStub()
789 |     
    | ^^^^
790 |     def read_parquet(*args, **kwargs):
791 |         return DataFrameStub()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:792:1
    |
790 |     def read_parquet(*args, **kwargs):
791 |         return DataFrameStub()
792 |     
    | ^^^^
793 |     def concat(*args, **kwargs):
794 |         return DataFrameStub()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:795:1
    |
793 |     def concat(*args, **kwargs):
794 |         return DataFrameStub()
795 |         
    | ^^^^^^^^
796 |     def to_datetime(*args, **kwargs):
797 |         # Return an index-like object that supports tz_localize
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:812:1
    |
810 |                 return kwargs.get('utc') if 'utc' in kwargs else None
811 |         return DatetimeIndexStub(*args, **kwargs)
812 |         
    | ^^^^^^^^
813 |     def isna(obj):
814 |         """Check for NaN values."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:818:1
    |
816 |             return [str(x) == 'nan' for x in obj]
817 |         return str(obj) == 'nan'
818 |         
    | ^^^^^^^^
819 |     class MultiIndex:
820 |         def __init__(self, *args, **kwargs):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:828:1
    |
826 |             from datetime import timedelta
827 |             self.td = timedelta(days=days, **kwargs)
828 |         
    | ^^^^^^^^
829 |         def __rmul__(self, other):
830 |             return self
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:831:1
    |
829 |         def __rmul__(self, other):
830 |             return self
831 |         
    | ^^^^^^^^
832 |         def __sub__(self, other):
833 |             return self.td
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:834:1
    |
832 |         def __sub__(self, other):
833 |             return self.td
834 |             
    | ^^^^^^^^^^^^
835 |         def __rsub__(self, other):
836 |             from datetime import datetime
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:852:1
    |
850 |     pandas_mod.isna = isna
851 |     pandas_mod.NaT = None  # Not a Time - represents missing timestamp
852 |     
    | ^^^^
853 |     # Add testing module
854 |     class TestingStub:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:859:1
    |
857 |             """Mock assert_frame_equal - just pass for testing."""
858 |             pass
859 |     
    | ^^^^
860 |     pandas_mod.testing = TestingStub()
861 |     pandas_mod.__file__ = "stub"
    |
help: Remove whitespace from blank line

E501 Line too long (131 > 100)
   --> tests/conftest.py:885:101
    |
883 |     ta_mod.atr = lambda *a, **k: [1.0] * 14  # Return dummy ATR values
884 |     # AI-AGENT-REF: Add missing TA-Lib compatible methods for test compatibility
885 |     ta_mod.SMA = lambda data, timeperiod=20: [sum(data[max(0, i-timeperiod+1):i+1])/min(timeperiod, i+1) for i in range(len(data))]
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
886 |     ta_mod.EMA = lambda data, timeperiod=20: data  # Simplified for testing
887 |     ta_mod.RSI = lambda data, timeperiod=14: [50.0] * len(data)  # Simplified for testing
    |

E501 Line too long (134 > 100)
   --> tests/conftest.py:888:101
    |
886 |     ta_mod.EMA = lambda data, timeperiod=20: data  # Simplified for testing
887 |     ta_mod.RSI = lambda data, timeperiod=14: [50.0] * len(data)  # Simplified for testing
888 |     ta_mod.MACD = lambda data, fastperiod=12, slowperiod=26, signalperiod=9: ([0.0] * len(data), [0.0] * len(data), [0.0] * len(data))
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
889 |     ta_mod.BBANDS = lambda data, timeperiod=20, nbdevup=2, nbdevdn=2: ([x+2 for x in data], data, [x-2 for x in data])
890 |     ta_mod.ATR = lambda high, low, close, timeperiod=14: [1.0] * len(close)
    |

E501 Line too long (118 > 100)
   --> tests/conftest.py:889:101
    |
887 |     ta_mod.RSI = lambda data, timeperiod=14: [50.0] * len(data)  # Simplified for testing
888 |     ta_mod.MACD = lambda data, fastperiod=12, slowperiod=26, signalperiod=9: ([0.0] * len(data), [0.0] * len(data), [0.0] * len(data))
889 |     ta_mod.BBANDS = lambda data, timeperiod=20, nbdevup=2, nbdevdn=2: ([x+2 for x in data], data, [x-2 for x in data])
    |                                                                                                     ^^^^^^^^^^^^^^^^^^
890 |     ta_mod.ATR = lambda high, low, close, timeperiod=14: [1.0] * len(close)
891 |     ta_mod.STOCH = lambda high, low, close, fastk_period=14, slowk_period=3, slowd_period=3: ([50.0] * len(close), [50.0] * len(close…
    |

E501 Line too long (135 > 100)
   --> tests/conftest.py:891:101
    |
889 | …vup=2, nbdevdn=2: ([x+2 for x in data], data, [x-2 for x in data])
890 | …=14: [1.0] * len(close)
891 | …riod=14, slowk_period=3, slowd_period=3: ([50.0] * len(close), [50.0] * len(close))
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
892 | …
893 | …
    |

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:899:1
    |
897 | except Exception:  # pragma: no cover - optional dependency
898 |     import types
899 |     
    | ^^^^
900 |     def jit_stub(*args, **kwargs):
901 |         """Stub for numba.jit decorator - just returns the function unchanged."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:905:1
    |
903 |             return args[0]  # Direct decoration
904 |         return lambda func: func  # Parameterized decoration
905 |     
    | ^^^^
906 |     numba_mod = types.ModuleType("numba")
907 |     numba_mod.jit = jit_stub
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:915:1
    |
913 | except Exception:  # pragma: no cover - optional dependency
914 |     import types
915 |     
    | ^^^^
916 |     class BaseSettingsStub:
917 |         def __init__(self, **kwargs):
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> tests/conftest.py:920:101
    |
918 |             # Read from environment variables
919 |             import os
920 |             self.ALPACA_API_KEY = os.getenv("ALPACA_API_KEY", "FAKE_TEST_API_KEY_NOT_REAL_123456789")
    |                                                                                                     ^
921 |             self.ALPACA_SECRET_KEY = os.getenv("ALPACA_SECRET_KEY", "FAKE_TEST_SECRET_KEY_NOT_REAL_123456789")
922 |             self.ALPACA_BASE_URL = os.getenv("ALPACA_BASE_URL", "https://paper-api.alpaca.markets")
    |

E501 Line too long (110 > 100)
   --> tests/conftest.py:921:101
    |
919 |             import os
920 |             self.ALPACA_API_KEY = os.getenv("ALPACA_API_KEY", "FAKE_TEST_API_KEY_NOT_REAL_123456789")
921 |             self.ALPACA_SECRET_KEY = os.getenv("ALPACA_SECRET_KEY", "FAKE_TEST_SECRET_KEY_NOT_REAL_123456789")
    |                                                                                                     ^^^^^^^^^^
922 |             self.ALPACA_BASE_URL = os.getenv("ALPACA_BASE_URL", "https://paper-api.alpaca.markets")
923 |             self.ALPACA_DATA_FEED = os.getenv("ALPACA_DATA_FEED", "iex")  # Missing attribute added
    |

E501 Line too long (102 > 100)
   --> tests/conftest.py:943:101
    |
941 |             self.SHADOW_MODE = os.getenv("SHADOW_MODE", "False").lower() == "true"
942 |             self.DRY_RUN = os.getenv("DRY_RUN", "False").lower() == "true"
943 |             self.DISABLE_DAILY_RETRAIN = os.getenv("DISABLE_DAILY_RETRAIN", "False").lower() == "true"
    |                                                                                                     ^^
944 |             self.TRADE_LOG_FILE = os.getenv("TRADE_LOG_FILE", "data/trades.csv")
945 |             self.FORCE_TRADES = os.getenv("FORCE_TRADES", "False").lower() == "true"
    |

E501 Line too long (101 > 100)
   --> tests/conftest.py:967:101
    |
965 |             self.pretrade_lookback_days = int(os.getenv("PRETRADE_LOOKBACK_DAYS", "120"))
966 |             self.pretrade_batch_size = int(os.getenv("PRETRADE_BATCH_SIZE", "50"))
967 |             self.intraday_batch_enable = os.getenv("INTRADAY_BATCH_ENABLE", "True").lower() == "true"
    |                                                                                                     ^
968 |             self.intraday_batch_size = int(os.getenv("INTRADAY_BATCH_SIZE", "40"))
969 |             self.batch_fallback_workers = int(os.getenv("BATCH_FALLBACK_WORKERS", "4"))
    |

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:973:1
    |
971 |             for k, v in kwargs.items():
972 |                 setattr(self, k, v)
973 |                 
    | ^^^^^^^^^^^^^^^^
974 |         @staticmethod
975 |         def model_json_schema():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:977:1
    |
975 |         def model_json_schema():
976 |             return {}
977 |         
    | ^^^^^^^^
978 |         def effective_executor_workers(self, cpu_count=None):
979 |             """Return a reasonable number of workers."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:982:1
    |
980 |             cpu_count = cpu_count or 2
981 |             return max(2, min(4, cpu_count))
982 |         
    | ^^^^^^^^
983 |         def effective_prediction_workers(self, cpu_count=None):
984 |             """Return a reasonable number of prediction workers."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:987:1
    |
985 |             cpu_count = cpu_count or 2
986 |             return max(2, min(4, cpu_count))
987 |         
    | ^^^^^^^^
988 |         def get_alpaca_keys(self):
989 |             """Return Alpaca API credentials."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:991:1
    |
989 |             """Return Alpaca API credentials."""
990 |             return self.ALPACA_API_KEY, self.ALPACA_SECRET_KEY
991 |     
    | ^^^^
992 |     class SettingsConfigDictStub:
993 |         def __init__(self, **kwargs):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/conftest.py:995:1
    |
993 |         def __init__(self, **kwargs):
994 |             pass
995 |     
    | ^^^^
996 |     pydantic_settings_mod = types.ModuleType("pydantic_settings")
997 |     pydantic_settings_mod.BaseSettings = BaseSettingsStub
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:999:1
     |
 997 |     pydantic_settings_mod.BaseSettings = BaseSettingsStub
 998 |     pydantic_settings_mod.SettingsConfigDict = SettingsConfigDictStub
 999 |     
     | ^^^^
1000 |     # Create a get_settings function that returns a properly configured instance
1001 |     _settings_instance = None
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1007:1
     |
1005 |             _settings_instance = BaseSettingsStub()
1006 |         return _settings_instance
1007 |     
     | ^^^^
1008 |     pydantic_settings_mod.get_settings = get_settings
1009 |     pydantic_settings_mod.__file__ = "stub"
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1016:1
     |
1014 | except Exception:  # pragma: no cover - optional dependency
1015 |     import types
1016 |     
     | ^^^^
1017 |     class FieldStub:
1018 |         def __init__(self, *args, **kwargs):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1021:1
     |
1019 |             self.default = args[0] if args else None
1020 |             self.kwargs = kwargs
1021 |             
     | ^^^^^^^^^^^^
1022 |         def __call__(self, *args, **kwargs):
1023 |             # For Field decorators, just return the default value
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1025:1
     |
1023 |             # For Field decorators, just return the default value
1024 |             return self.default
1025 |     
     | ^^^^
1026 |     def model_validator(*args, **kwargs):
1027 |         """Stub for pydantic model_validator decorator."""
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1031:1
     |
1029 |             return func
1030 |         return decorator
1031 |     
     | ^^^^
1032 |     class AliasChoices:
1033 |         def __init__(self, *args, **kwargs):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1035:1
     |
1033 |         def __init__(self, *args, **kwargs):
1034 |             pass
1035 |     
     | ^^^^
1036 |     pydantic_mod = types.ModuleType("pydantic")
1037 |     pydantic_mod.Field = FieldStub()
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1048:1
     |
1046 | except Exception:  # pragma: no cover - optional dependency
1047 |     import types
1048 |     
     | ^^^^
1049 |     alpaca_mod = types.ModuleType("alpaca_trade_api")
1050 |     rest_mod = types.ModuleType("alpaca_trade_api.rest")
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1051:1
     |
1049 |     alpaca_mod = types.ModuleType("alpaca_trade_api")
1050 |     rest_mod = types.ModuleType("alpaca_trade_api.rest")
1051 |     
     | ^^^^
1052 |     class RESTStub:
1053 |         def __init__(self, *args, **kwargs):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1055:1
     |
1053 |         def __init__(self, *args, **kwargs):
1054 |             pass
1055 |             
     | ^^^^^^^^^^^^
1056 |         def __getattr__(self, name):
1057 |             return lambda *args, **kwargs: None
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1058:1
     |
1056 |         def __getattr__(self, name):
1057 |             return lambda *args, **kwargs: None
1058 |     
     | ^^^^
1059 |     class APIError(Exception):
1060 |         pass
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1075:1
     |
1073 |     import types
1074 |     from enum import Enum
1075 |     
     | ^^^^
1076 |     # Common module
1077 |     common_mod = types.ModuleType("alpaca.common")
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1079:1
     |
1077 |     common_mod = types.ModuleType("alpaca.common")
1078 |     exceptions_mod = types.ModuleType("alpaca.common.exceptions")
1079 |     
     | ^^^^
1080 |     class APIError(Exception):
1081 |         pass
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1082:1
     |
1080 |     class APIError(Exception):
1081 |         pass
1082 |     
     | ^^^^
1083 |     exceptions_mod.APIError = APIError
1084 |     common_mod.exceptions = exceptions_mod
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1085:1
     |
1083 |     exceptions_mod.APIError = APIError
1084 |     common_mod.exceptions = exceptions_mod
1085 |     
     | ^^^^
1086 |     # Data module  
1087 |     data_mod = types.ModuleType("alpaca.data")
     |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
    --> tests/conftest.py:1086:18
     |
1084 |     common_mod.exceptions = exceptions_mod
1085 |     
1086 |     # Data module  
     |                  ^^
1087 |     data_mod = types.ModuleType("alpaca.data")
1088 |     models_mod = types.ModuleType("alpaca.data.models")
     |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1092:1
     |
1090 |     historical_mod = types.ModuleType("alpaca.data.historical")
1091 |     timeframe_mod = types.ModuleType("alpaca.data.timeframe")
1092 |     
     | ^^^^
1093 |     class Quote:
1094 |         bid_price = 0
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1096:1
     |
1094 |         bid_price = 0
1095 |         ask_price = 0
1096 |     
     | ^^^^
1097 |     class StockLatestQuoteRequest:
1098 |         def __init__(self, symbol_or_symbols):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1100:1
     |
1098 |         def __init__(self, symbol_or_symbols):
1099 |             self.symbols = symbol_or_symbols
1100 |     
     | ^^^^
1101 |     class StockBarsRequest:
1102 |         def __init__(self, *args, **kwargs):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1104:1
     |
1102 |         def __init__(self, *args, **kwargs):
1103 |             pass
1104 |     
     | ^^^^
1105 |     class StockHistoricalDataClient:
1106 |         def __init__(self, *args, **kwargs):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1110:1
     |
1108 |         def __getattr__(self, name):
1109 |             return lambda *args, **kwargs: None
1110 |     
     | ^^^^
1111 |     class TimeFrame:
1112 |         DAY = "day"
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1126:1
     |
1124 |     data_mod.historical = historical_mod
1125 |     data_mod.timeframe = timeframe_mod
1126 |     
     | ^^^^
1127 |     # Trading module
1128 |     trading_mod = types.ModuleType("alpaca.trading")
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1134:1
     |
1132 |     trading_requests_mod = types.ModuleType("alpaca.trading.requests")
1133 |     trading_stream_mod = types.ModuleType("alpaca.trading.stream")
1134 |     
     | ^^^^
1135 |     class TradingClient:
1136 |         def __init__(self, *args, **kwargs):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1140:1
     |
1138 |         def __getattr__(self, name):
1139 |             return lambda *args, **kwargs: None
1140 |     
     | ^^^^
1141 |     class OrderSide:
1142 |         BUY = "buy"
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1144:1
     |
1142 |         BUY = "buy"
1143 |         SELL = "sell"
1144 |     
     | ^^^^
1145 |     class TimeInForce:
1146 |         DAY = "day"
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1147:1
     |
1145 |     class TimeInForce:
1146 |         DAY = "day"
1147 |     
     | ^^^^
1148 |     class AlpacaOrderClass(str, Enum):
1149 |         SIMPLE = "simple"
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1154:1
     |
1152 |         OCO = "oco"
1153 |         OTO = "oto"
1154 |     
     | ^^^^
1155 |     class QueryOrderStatus(str, Enum):
1156 |         OPEN = "open"
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1159:1
     |
1157 |         CLOSED = "closed"
1158 |         ALL = "all"
1159 |     
     | ^^^^
1160 |     class OrderStatus(str, Enum):
1161 |         NEW = "new"
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1178:1
     |
1176 |         SUSPENDED = "suspended"
1177 |         CALCULATED = "calculated"
1178 |     
     | ^^^^
1179 |     class Order(dict):
1180 |         pass
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1181:1
     |
1179 |     class Order(dict):
1180 |         pass
1181 |     
     | ^^^^
1182 |     class MarketOrderRequest(dict):
1183 |         def __init__(self, symbol, qty, side, time_in_force):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1200:1
     |
1198 |                 limit_price=limit_price,
1199 |             )
1200 |     
     | ^^^^
1201 |     class GetOrdersRequest(dict):
1202 |         def __init__(self, **kwargs):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1204:1
     |
1202 |         def __init__(self, **kwargs):
1203 |             super().__init__(**kwargs)
1204 |     
     | ^^^^
1205 |     class GetAssetsRequest(dict):
1206 |         def __init__(self, **kwargs):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1208:1
     |
1206 |         def __init__(self, **kwargs):
1207 |             super().__init__(**kwargs)
1208 |     
     | ^^^^
1209 |     class TradingStream:
1210 |         def __init__(self, *args, **kwargs):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1214:1
     |
1212 |         def __getattr__(self, name):
1213 |             return lambda *args, **kwargs: None
1214 |     
     | ^^^^
1215 |     client_mod.TradingClient = TradingClient
1216 |     enums_mod.OrderSide = OrderSide
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1232:1
     |
1230 |     trading_mod.requests = trading_requests_mod
1231 |     trading_mod.stream = trading_stream_mod
1232 |     
     | ^^^^
1233 |     # Main alpaca module
1234 |     alpaca_main_mod = types.ModuleType("alpaca")
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1238:1
     |
1236 |     alpaca_main_mod.data = data_mod
1237 |     alpaca_main_mod.trading = trading_mod
1238 |     
     | ^^^^
1239 |     sys.modules["alpaca"] = alpaca_main_mod
1240 |     sys.modules["alpaca.common"] = common_mod
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1277:1
     |
1275 | except Exception:  # pragma: no cover - optional dependency
1276 |     import types
1277 |     
     | ^^^^
1278 |     class BeautifulSoup:
1279 |         def __init__(self, *args, **kwargs):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1281:1
     |
1279 |         def __init__(self, *args, **kwargs):
1280 |             pass
1281 |         
     | ^^^^^^^^
1282 |         def find(self, *args, **kwargs):
1283 |             return None
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1284:1
     |
1282 |         def find(self, *args, **kwargs):
1283 |             return None
1284 |         
     | ^^^^^^^^
1285 |         def find_all(self, *args, **kwargs):
1286 |             return []
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1287:1
     |
1285 |         def find_all(self, *args, **kwargs):
1286 |             return []
1287 |         
     | ^^^^^^^^
1288 |         def get_text(self, *args, **kwargs):
1289 |             return ""
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1290:1
     |
1288 |         def get_text(self, *args, **kwargs):
1289 |             return ""
1290 |     
     | ^^^^
1291 |     bs4_mod = types.ModuleType("bs4")
1292 |     bs4_mod.BeautifulSoup = BeautifulSoup
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1301:1
     |
1299 | except Exception:  # pragma: no cover - optional dependency
1300 |     import types
1301 |     
     | ^^^^
1302 |     class Flask:
1303 |         def __init__(self, *args, **kwargs):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1305:1
     |
1303 |         def __init__(self, *args, **kwargs):
1304 |             pass
1305 |         
     | ^^^^^^^^
1306 |         def route(self, *args, **kwargs):
1307 |             def decorator(f):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1310:1
     |
1308 |                 return f
1309 |             return decorator
1310 |         
     | ^^^^^^^^
1311 |         def run(self, *args, **kwargs):
1312 |             pass
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1313:1
     |
1311 |         def run(self, *args, **kwargs):
1312 |             pass
1313 |         
     | ^^^^^^^^
1314 |         def __getattr__(self, name):
1315 |             return lambda *args, **kwargs: None
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1316:1
     |
1314 |         def __getattr__(self, name):
1315 |             return lambda *args, **kwargs: None
1316 |     
     | ^^^^
1317 |     flask_mod = types.ModuleType("flask")
1318 |     flask_mod.Flask = Flask
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1329:1
     |
1327 | except Exception:  # pragma: no cover - optional dependency
1328 |     import types
1329 |     
     | ^^^^
1330 |     def limits(*args, **kwargs):
1331 |         def decorator(f):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1334:1
     |
1332 |             return f
1333 |         return decorator
1334 |     
     | ^^^^
1335 |     def sleep_and_retry(f):
1336 |         return f
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1337:1
     |
1335 |     def sleep_and_retry(f):
1336 |         return f
1337 |     
     | ^^^^
1338 |     ratelimit_mod = types.ModuleType("ratelimit")
1339 |     ratelimit_mod.limits = limits
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1349:1
     |
1347 | except Exception:  # pragma: no cover - optional dependency
1348 |     import types
1349 |     
     | ^^^^
1350 |     class CircuitBreaker:
1351 |         def __init__(self, *args, **kwargs):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1353:1
     |
1351 |         def __init__(self, *args, **kwargs):
1352 |             pass
1353 |         
     | ^^^^^^^^
1354 |         def __call__(self, func):
1355 |             return func
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1356:1
     |
1354 |         def __call__(self, func):
1355 |             return func
1356 |         
     | ^^^^^^^^
1357 |         def __enter__(self):
1358 |             return self
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1359:1
     |
1357 |         def __enter__(self):
1358 |             return self
1359 |         
     | ^^^^^^^^
1360 |         def __exit__(self, *args):
1361 |             pass
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1362:1
     |
1360 |         def __exit__(self, *args):
1361 |             pass
1362 |     
     | ^^^^
1363 |     pybreaker_mod = types.ModuleType("pybreaker")
1364 |     pybreaker_mod.CircuitBreaker = CircuitBreaker
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1373:1
     |
1371 | except Exception:  # pragma: no cover - optional dependency
1372 |     import types
1373 |     
     | ^^^^
1374 |     class Counter:
1375 |         def __init__(self, *args, **kwargs):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1381:1
     |
1379 |         def labels(self, *args, **kwargs):
1380 |             return self
1381 |     
     | ^^^^
1382 |     class Gauge:
1383 |         def __init__(self, *args, **kwargs):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1389:1
     |
1387 |         def labels(self, *args, **kwargs):
1388 |             return self
1389 |     
     | ^^^^
1390 |     class Histogram:
1391 |         def __init__(self, *args, **kwargs):
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1403:1
     |
1401 |         def labels(self, *args, **kwargs):
1402 |             return self
1403 |     
     | ^^^^
1404 |     def start_http_server(*args, **kwargs):
1405 |         pass
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1406:1
     |
1404 |     def start_http_server(*args, **kwargs):
1405 |         pass
1406 |     
     | ^^^^
1407 |     prometheus_mod = types.ModuleType("prometheus_client")
1408 |     prometheus_mod.Counter = Counter
     |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
    --> tests/conftest.py:1435:101
     |
1433 |     """Provide standard environment variables for tests."""
1434 |     monkeypatch.setenv("ALPACA_API_KEY", "FAKE_TEST_API_KEY_NOT_REAL_123456789")  # Valid format
1435 |     monkeypatch.setenv("ALPACA_SECRET_KEY", "FAKE_TEST_SECRET_KEY_NOT_REAL_123456789")  # Valid format
     |                                                                                                     ^^
1436 |     monkeypatch.setenv("ALPACA_BASE_URL", "https://paper-api.alpaca.markets")
1437 |     monkeypatch.setenv("WEBHOOK_SECRET", "fake-test-webhook-not-real")
     |

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1467:1
     |
1465 | def stub_capital_scaling(monkeypatch):
1466 |     """Provide simple stubs for heavy capital scaling functions."""
1467 |     
     | ^^^^
1468 |     # Add TradingConfig stub to config module
1469 |     try:
     |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
    --> tests/conftest.py:1476:67
     |
1474 |                 config.TradingConfig = MockTradingConfig
1475 |             else:
1476 |                 # If config is an instance, set it as an attribute 
     |                                                                   ^
1477 |                 config.TradingConfig = MockTradingConfig
1478 |     except ImportError as e:
     |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
    --> tests/conftest.py:1479:64
     |
1477 |                 config.TradingConfig = MockTradingConfig
1478 |     except ImportError as e:
1479 |         # AI-AGENT-REF: Log config import failure for debugging 
     |                                                                ^
1480 |         import logging
1481 |         logger = logging.getLogger(__name__)
     |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1484:1
     |
1482 |         logger.debug(f"Could not import config module for mocking: {e}")
1483 |         pass
1484 |     
     | ^^^^
1485 |     try:
1486 |         import ai_trading.capital_scaling as cs
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1498:1
     |
1496 |         logger.debug(f"Could not import capital_scaling module for mocking: {e}")
1497 |         pass
1498 |     
     | ^^^^
1499 |     # Add missing bot_engine functions
1500 |     try:
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1513:1
     |
1511 |         # If bot_engine import fails due to config issues, skip it for now
1512 |         pass
1513 |     
     | ^^^^
1514 |         
1515 |     yield
     |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
    --> tests/conftest.py:1514:1
     |
1512 |         pass
1513 |     
1514 |         
     | ^^^^^^^^
1515 |     yield
     |
help: Remove whitespace from blank line

RUF100 [*] Unused `noqa` directive (unused: `F401`)
    --> tests/conftest.py:1661:53
     |
1659 | # AI-AGENT-REF: stub pydantic_settings for v1 installs
1660 | try:
1661 |     import pydantic_settings as _pydantic_settings  # noqa: F401
     |                                                     ^^^^^^^^^^^^
1662 | except Exception:
1663 |     import types as _types2
     |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
 --> tests/execution/test_fetch_minute_df_safe_empty.py:1:1
  |
1 | / import pandas as pd
2 | | import pytest
3 | |
4 | | from ai_trading.core.bot_engine import fetch_minute_df_safe, DataFetchError
  | |___________________________________________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/institutional/__init__.py:8:1
   |
 6 |   """
 7 |
 8 | / from .framework import (
 9 | |     MockMarketDataProvider,
10 | |     TradingScenarioRunner,
11 | |     ComplianceTestSuite
12 | | )
   | |_^
13 |
14 |   __all__ = [
   |
help: Organize imports

W291 [*] Trailing whitespace
  --> tests/institutional/__init__.py:16:29
   |
14 | __all__ = [
15 |     "MockMarketDataProvider",
16 |     "TradingScenarioRunner", 
   |                             ^
17 |     "ComplianceTestSuite"
18 | ]
   |
help: Remove trailing whitespace

W292 [*] No newline at end of file
  --> tests/institutional/__init__.py:18:2
   |
16 |     "TradingScenarioRunner", 
17 |     "ComplianceTestSuite"
18 | ]
   |  ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/institutional/framework.py:11:1
   |
 9 |   """
10 |
11 | / import asyncio
12 | | import time
13 | | from datetime import datetime, timezone
14 | | from typing import Dict, List, Any, Optional
15 | |
16 | | # Use the centralized logger as per AGENTS.md
17 | | from ai_trading.logging import logger
   | |_____________________________________^
   |
help: Organize imports

W293 Blank line contains whitespace
  --> tests/institutional/framework.py:49:1
   |
47 |     """
48 |     Comprehensive trading scenario test runner.
49 |     
   | ^^^^
50 |     Executes various trading scenarios to validate bot behavior
51 |     under different market conditions and operational scenarios.
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/framework.py:53:1
   |
51 |     under different market conditions and operational scenarios.
52 |     """
53 |     
   | ^^^^
54 |     def __init__(self, execution_engine=None):
55 |         """Initialize scenario runner."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/framework.py:59:1
   |
57 |         self.market_data = MockMarketDataProvider()
58 |         self.test_results = []
59 |         
   | ^^^^^^^^
60 |     async def run_end_to_end_test(self) -> Dict[str, Any]:
61 |         """Run comprehensive end-to-end trading test."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/framework.py:64:1
   |
62 |         logger.info("Starting end-to-end trading test")
63 |         start_time = time.time()
64 |         
   | ^^^^^^^^
65 |         results = {
66 |             "test_name": "end_to_end_trading",
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/framework.py:72:1
   |
70 |             "duration": 0.0
71 |         }
72 |         
   | ^^^^^^^^
73 |         scenarios = [
74 |             ("initialization", self._test_initialization),
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/framework.py:82:1
   |
80 |             ("circuit_breaker", self._test_circuit_breaker)
81 |         ]
82 |         
   | ^^^^^^^^
83 |         passed = 0
84 |         total = len(scenarios)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/framework.py:85:1
   |
83 |         passed = 0
84 |         total = len(scenarios)
85 |         
   | ^^^^^^^^
86 |         for scenario_name, test_func in scenarios:
87 |             try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/framework.py:92:1
   |
90 |                 scenario_result["name"] = scenario_name
91 |                 results["scenarios"].append(scenario_result)
92 |                 
   | ^^^^^^^^^^^^^^^^
93 |                 if scenario_result["status"] == "passed":
94 |                     passed += 1
   |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
  --> tests/institutional/framework.py:97:100
   |
95 |                     logger.info(f"✅ {scenario_name} passed")
96 |                 else:
97 |                     logger.error(f"❌ {scenario_name} failed: {scenario_result.get('error', 'Unknown error')}")
   |                                                                                                     ^^^^^^^^^^^
98 |                     
99 |             except Exception as e:
   |

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:98:1
    |
 96 |                 else:
 97 |                     logger.error(f"❌ {scenario_name} failed: {scenario_result.get('error', 'Unknown error')}")
 98 |                     
    | ^^^^^^^^^^^^^^^^^^^^
 99 |             except Exception as e:
100 |                 logger.error(f"❌ {scenario_name} failed with exception: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:106:1
    |
104 |                     "error": str(e)
105 |                 })
106 |         
    | ^^^^^^^^
107 |         results["duration"] = time.time() - start_time
108 |         results["overall_status"] = "passed" if passed == total else "failed"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:110:1
    |
108 |         results["overall_status"] = "passed" if passed == total else "failed"
109 |         results["pass_rate"] = passed / total if total > 0 else 0
110 |         
    | ^^^^^^^^
111 |         logger.info(f"End-to-end test completed: {passed}/{total} scenarios passed")
112 |         return results
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:113:1
    |
111 |         logger.info(f"End-to-end test completed: {passed}/{total} scenarios passed")
112 |         return results
113 |     
    | ^^^^
114 |     async def run_risk_scenario_tests(self) -> Dict[str, Any]:
115 |         """Run risk management scenario tests."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:117:1
    |
115 |         """Run risk management scenario tests."""
116 |         logger.info("Starting risk scenario tests")
117 |         
    | ^^^^^^^^
118 |         results = {
119 |             "test_name": "risk_scenarios",
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:124:1
    |
122 |             "overall_status": "unknown"
123 |         }
124 |         
    | ^^^^^^^^
125 |         risk_scenarios = [
126 |             ("position_sizing", self._test_position_sizing),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:132:1
    |
130 |             ("volatility_adjustment", self._test_volatility_adjustment)
131 |         ]
132 |         
    | ^^^^^^^^
133 |         passed = 0
134 |         total = len(risk_scenarios)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:135:1
    |
133 |         passed = 0
134 |         total = len(risk_scenarios)
135 |         
    | ^^^^^^^^
136 |         for scenario_name, test_func in risk_scenarios:
137 |             try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:141:1
    |
139 |                 scenario_result["name"] = scenario_name
140 |                 results["scenarios"].append(scenario_result)
141 |                 
    | ^^^^^^^^^^^^^^^^
142 |                 if scenario_result["status"] == "passed":
143 |                     passed += 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:144:1
    |
142 |                 if scenario_result["status"] == "passed":
143 |                     passed += 1
144 |                     
    | ^^^^^^^^^^^^^^^^^^^^
145 |             except Exception as e:
146 |                 results["scenarios"].append({
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:151:1
    |
149 |                     "error": str(e)
150 |                 })
151 |         
    | ^^^^^^^^
152 |         results["overall_status"] = "passed" if passed == total else "failed"
153 |         results["pass_rate"] = passed / total if total > 0 else 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:154:1
    |
152 |         results["overall_status"] = "passed" if passed == total else "failed"
153 |         results["pass_rate"] = passed / total if total > 0 else 0
154 |         
    | ^^^^^^^^
155 |         return results
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:156:1
    |
155 |         return results
156 |     
    | ^^^^
157 |     async def run_performance_tests(self) -> Dict[str, Any]:
158 |         """Run performance and latency tests."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:160:1
    |
158 |         """Run performance and latency tests."""
159 |         logger.info("Starting performance tests")
160 |         
    | ^^^^^^^^
161 |         results = {
162 |             "test_name": "performance",
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:167:1
    |
165 |             "overall_status": "unknown"
166 |         }
167 |         
    | ^^^^^^^^
168 |         # Order execution latency test
169 |         latencies = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:176:1
    |
174 |             latency = (time.time() - start) * 1000  # Convert to ms
175 |             latencies.append(latency)
176 |         
    | ^^^^^^^^
177 |         results["metrics"]["average_latency_ms"] = sum(latencies) / len(latencies)
178 |         results["metrics"]["max_latency_ms"] = max(latencies)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:180:1
    |
178 |         results["metrics"]["max_latency_ms"] = max(latencies)
179 |         results["metrics"]["min_latency_ms"] = min(latencies)
180 |         
    | ^^^^^^^^
181 |         # Throughput test
182 |         start_time = time.time()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:184:1
    |
182 |         start_time = time.time()
183 |         orders_processed = 0
184 |         
    | ^^^^^^^^
185 |         for i in range(100):
186 |             # Simulate order processing
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:189:1
    |
187 |             await asyncio.sleep(0.001)
188 |             orders_processed += 1
189 |         
    | ^^^^^^^^
190 |         duration = time.time() - start_time
191 |         results["metrics"]["orders_per_second"] = orders_processed / duration
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:192:1
    |
190 |         duration = time.time() - start_time
191 |         results["metrics"]["orders_per_second"] = orders_processed / duration
192 |         
    | ^^^^^^^^
193 |         # Memory usage simulation
194 |         results["metrics"]["memory_usage_mb"] = 50.0  # Mock value
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:195:1
    |
193 |         # Memory usage simulation
194 |         results["metrics"]["memory_usage_mb"] = 50.0  # Mock value
195 |         
    | ^^^^^^^^
196 |         # Determine pass/fail based on thresholds
197 |         performance_ok = (
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:202:1
    |
200 |             results["metrics"]["memory_usage_mb"] < 100
201 |         )
202 |         
    | ^^^^^^^^
203 |         results["overall_status"] = "passed" if performance_ok else "failed"
204 |         return results
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:205:1
    |
203 |         results["overall_status"] = "passed" if performance_ok else "failed"
204 |         return results
205 |     
    | ^^^^
206 |     # Individual test scenarios
207 |     async def _test_initialization(self) -> Dict[str, Any]:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:220:1
    |
218 |                 "details": "No execution engine to test"
219 |             }
220 |     
    | ^^^^
221 |     async def _test_market_order(self) -> Dict[str, Any]:
222 |         """Test market order execution."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:225:1
    |
223 |         if not self.execution_engine:
224 |             return {"status": "skipped", "details": "No execution engine"}
225 |         
    | ^^^^^^^^
226 |         try:
227 |             result = self.execution_engine.submit_market_order("AAPL", "buy", 100)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:235:1
    |
233 |         except Exception as e:
234 |             return {"status": "failed", "error": str(e)}
235 |     
    | ^^^^
236 |     async def _test_limit_order(self) -> Dict[str, Any]:
237 |         """Test limit order execution."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:240:1
    |
238 |         if not self.execution_engine:
239 |             return {"status": "skipped", "details": "No execution engine"}
240 |         
    | ^^^^^^^^
241 |         try:
242 |             current_price = self.market_data.get_current_price("AAPL")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:244:1
    |
242 |             current_price = self.market_data.get_current_price("AAPL")
243 |             limit_price = current_price * 0.99 if current_price else 170.0
244 |             
    | ^^^^^^^^^^^^
245 |             result = self.execution_engine.submit_limit_order("AAPL", "buy", 100, limit_price)
246 |             return {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:253:1
    |
251 |         except Exception as e:
252 |             return {"status": "failed", "error": str(e)}
253 |     
    | ^^^^
254 |     async def _test_order_cancellation(self) -> Dict[str, Any]:
255 |         """Test order cancellation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:258:1
    |
256 |         if not self.execution_engine:
257 |             return {"status": "skipped", "details": "No execution engine"}
258 |         
    | ^^^^^^^^
259 |         try:
260 |             # Submit order first
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:264:1
    |
262 |             if not order_result:
263 |                 return {"status": "failed", "details": "Could not create order to cancel"}
264 |             
    | ^^^^^^^^^^^^
265 |             # Cancel the order
266 |             order_id = order_result.get("id")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:268:1
    |
266 |             order_id = order_result.get("id")
267 |             cancel_result = self.execution_engine.cancel_order(order_id)
268 |             
    | ^^^^^^^^^^^^
269 |             return {
270 |                 "status": "passed" if cancel_result else "failed",
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:275:1
    |
273 |         except Exception as e:
274 |             return {"status": "failed", "error": str(e)}
275 |     
    | ^^^^
276 |     async def _test_multiple_orders(self) -> Dict[str, Any]:
277 |         """Test multiple simultaneous orders."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:280:1
    |
278 |         if not self.execution_engine:
279 |             return {"status": "skipped", "details": "No execution engine"}
280 |         
    | ^^^^^^^^
281 |         try:
282 |             orders = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:284:1
    |
282 |             orders = []
283 |             symbols = ["AAPL", "MSFT", "GOOGL"]
284 |             
    | ^^^^^^^^^^^^
285 |             for symbol in symbols:
286 |                 result = self.execution_engine.submit_market_order(symbol, "buy", 10)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:288:1
    |
286 |                 result = self.execution_engine.submit_market_order(symbol, "buy", 10)
287 |                 orders.append(result)
288 |             
    | ^^^^^^^^^^^^
289 |             successful_orders = [o for o in orders if o is not None]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:290:1
    |
289 |             successful_orders = [o for o in orders if o is not None]
290 |             
    | ^^^^^^^^^^^^
291 |             return {
292 |                 "status": "passed" if len(successful_orders) >= 2 else "failed",
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:297:1
    |
295 |         except Exception as e:
296 |             return {"status": "failed", "error": str(e)}
297 |     
    | ^^^^
298 |     async def _test_error_handling(self) -> Dict[str, Any]:
299 |         """Test error handling with invalid orders."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:302:1
    |
300 |         if not self.execution_engine:
301 |             return {"status": "skipped", "details": "No execution engine"}
302 |         
    | ^^^^^^^^
303 |         try:
304 |             # Try invalid symbol
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:314:1
    |
312 |                 and result2.get("status") == "error"
313 |             )
314 |             
    | ^^^^^^^^^^^^
315 |             return {
316 |                 "status": "passed" if errors_handled else "failed",
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:321:1
    |
319 |         except Exception as e:
320 |             return {"status": "failed", "error": str(e)}
321 |     
    | ^^^^
322 |     async def _test_circuit_breaker(self) -> Dict[str, Any]:
323 |         """Test circuit breaker functionality."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:326:1
    |
324 |         if not self.execution_engine:
325 |             return {"status": "skipped", "details": "No execution engine"}
326 |         
    | ^^^^^^^^
327 |         try:
328 |             # Get initial stats
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:330:1
    |
328 |             # Get initial stats
329 |             initial_stats = self.execution_engine.get_execution_stats()
330 |             
    | ^^^^^^^^^^^^
331 |             # Circuit breaker test would require actual failure simulation
332 |             # For now, just verify the circuit breaker status is available
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:334:1
    |
332 |             # For now, just verify the circuit breaker status is available
333 |             has_circuit_breaker = "circuit_breaker_status" in initial_stats
334 |             
    | ^^^^^^^^^^^^
335 |             return {
336 |                 "status": "passed" if has_circuit_breaker else "failed",
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:341:1
    |
339 |         except Exception as e:
340 |             return {"status": "failed", "error": str(e)}
341 |     
    | ^^^^
342 |     # Risk scenario tests
343 |     async def _test_position_sizing(self) -> Dict[str, Any]:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:350:1
    |
348 |             "details": "Position sizing validation passed"
349 |         }
350 |     
    | ^^^^
351 |     async def _test_max_drawdown(self) -> Dict[str, Any]:
352 |         """Test maximum drawdown limits."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:357:1
    |
355 |             "details": "Drawdown limits validation passed"
356 |         }
357 |     
    | ^^^^
358 |     async def _test_sector_exposure(self) -> Dict[str, Any]:
359 |         """Test sector exposure limits."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:364:1
    |
362 |             "details": "Sector exposure validation passed"
363 |         }
364 |     
    | ^^^^
365 |     async def _test_leverage_limits(self) -> Dict[str, Any]:
366 |         """Test leverage limit enforcement."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:371:1
    |
369 |             "details": "Leverage limits validation passed"
370 |         }
371 |     
    | ^^^^
372 |     async def _test_volatility_adjustment(self) -> Dict[str, Any]:
373 |         """Test volatility-based position adjustment."""
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> tests/institutional/framework.py:383:1
    |
381 |     """
382 |     Compliance and audit testing suite.
383 |     
    | ^^^^
384 |     Validates regulatory compliance, audit trail integrity,
385 |     and risk management compliance.
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:387:1
    |
385 |     and risk management compliance.
386 |     """
387 |     
    | ^^^^
388 |     def __init__(self):
389 |         """Initialize compliance test suite."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:391:1
    |
389 |         """Initialize compliance test suite."""
390 |         self.test_results = []
391 |     
    | ^^^^
392 |     async def run_compliance_tests(self) -> Dict[str, Any]:
393 |         """Run full compliance test suite."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:395:1
    |
393 |         """Run full compliance test suite."""
394 |         logger.info("Starting compliance tests")
395 |         
    | ^^^^^^^^
396 |         results = {
397 |             "test_name": "compliance",
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:402:1
    |
400 |             "overall_status": "unknown"
401 |         }
402 |         
    | ^^^^^^^^
403 |         compliance_tests = [
404 |             ("audit_trail", self._test_audit_trail),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:410:1
    |
408 |             ("data_retention", self._test_data_retention)
409 |         ]
410 |         
    | ^^^^^^^^
411 |         passed = 0
412 |         total = len(compliance_tests)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:413:1
    |
411 |         passed = 0
412 |         total = len(compliance_tests)
413 |         
    | ^^^^^^^^
414 |         for test_name, test_func in compliance_tests:
415 |             try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:419:1
    |
417 |                 test_result["name"] = test_name
418 |                 results["tests"].append(test_result)
419 |                 
    | ^^^^^^^^^^^^^^^^
420 |                 if test_result["status"] == "passed":
421 |                     passed += 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:422:1
    |
420 |                 if test_result["status"] == "passed":
421 |                     passed += 1
422 |                     
    | ^^^^^^^^^^^^^^^^^^^^
423 |             except Exception as e:
424 |                 results["tests"].append({
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:429:1
    |
427 |                     "error": str(e)
428 |                 })
429 |         
    | ^^^^^^^^
430 |         results["overall_status"] = "passed" if passed == total else "failed"
431 |         results["compliance_score"] = passed / total if total > 0 else 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:432:1
    |
430 |         results["overall_status"] = "passed" if passed == total else "failed"
431 |         results["compliance_score"] = passed / total if total > 0 else 0
432 |         
    | ^^^^^^^^
433 |         return results
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:434:1
    |
433 |         return results
434 |     
    | ^^^^
435 |     async def _test_audit_trail(self) -> Dict[str, Any]:
436 |         """Test audit trail completeness."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:441:1
    |
439 |             "details": "Audit trail validation passed"
440 |         }
441 |     
    | ^^^^
442 |     async def _test_trade_logging(self) -> Dict[str, Any]:
443 |         """Test trade logging compliance."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:448:1
    |
446 |             "details": "Trade logging validation passed"
447 |         }
448 |     
    | ^^^^
449 |     async def _test_risk_limits(self) -> Dict[str, Any]:
450 |         """Test risk limit enforcement."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:455:1
    |
453 |             "details": "Risk limits validation passed"
454 |         }
455 |     
    | ^^^^
456 |     async def _test_order_validation(self) -> Dict[str, Any]:
457 |         """Test order validation compliance."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/framework.py:462:1
    |
460 |             "details": "Order validation compliance passed"
461 |         }
462 |     
    | ^^^^
463 |     async def _test_data_retention(self) -> Dict[str, Any]:
464 |         """Test data retention compliance."""
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/institutional/framework.py:468:10
    |
466 |             "status": "passed",
467 |             "details": "Data retention compliance passed"
468 |         }
    |          ^
    |
help: Add trailing newline

W293 Blank line contains whitespace
  --> tests/institutional/test_live_trading.py:33:1
   |
31 |     """
32 |     Comprehensive test suite for live trading bot functionality.
33 |     
   | ^^^^
34 |     Tests cover:
35 |     - Order execution workflows
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/test_live_trading.py:40:1
   |
38 |     - Performance and compliance
39 |     """
40 |     
   | ^^^^
41 |     @pytest.fixture
42 |     def execution_engine(self):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/test_live_trading.py:49:1
   |
47 |             return engine
48 |         return None
49 |     
   | ^^^^
50 |     @pytest.fixture
51 |     def scenario_runner(self, execution_engine):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/test_live_trading.py:54:1
   |
52 |         """Create scenario runner with execution engine."""
53 |         return TradingScenarioRunner(execution_engine)
54 |     
   | ^^^^
55 |     @pytest.fixture
56 |     def compliance_suite(self):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/test_live_trading.py:59:1
   |
57 |         """Create compliance test suite."""
58 |         return ComplianceTestSuite()
59 |     
   | ^^^^
60 |     @pytest.mark.asyncio
61 |     async def test_end_to_end_trading(self, scenario_runner):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/test_live_trading.py:64:1
   |
62 |         """Test complete end-to-end trading workflow."""
63 |         results = await scenario_runner.run_end_to_end_test()
64 |         
   | ^^^^^^^^
65 |         assert results["overall_status"] == "passed", f"End-to-end test failed: {results}"
66 |         assert results["pass_rate"] >= 0.8, f"Pass rate too low: {results['pass_rate']}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/test_live_trading.py:67:1
   |
65 |         assert results["overall_status"] == "passed", f"End-to-end test failed: {results}"
66 |         assert results["pass_rate"] >= 0.8, f"Pass rate too low: {results['pass_rate']}"
67 |         
   | ^^^^^^^^
68 |         # Check specific scenarios
69 |         scenario_names = [s["name"] for s in results["scenarios"]]
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/test_live_trading.py:71:1
   |
69 |         scenario_names = [s["name"] for s in results["scenarios"]]
70 |         critical_scenarios = ["initialization", "market_order", "error_handling"]
71 |         
   | ^^^^^^^^
72 |         for scenario in critical_scenarios:
73 |             assert scenario in scenario_names, f"Missing critical scenario: {scenario}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/test_live_trading.py:74:1
   |
72 |         for scenario in critical_scenarios:
73 |             assert scenario in scenario_names, f"Missing critical scenario: {scenario}"
74 |     
   | ^^^^
75 |     @pytest.mark.asyncio
76 |     async def test_risk_management_scenarios(self, scenario_runner):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/test_live_trading.py:79:1
   |
77 |         """Test risk management scenario handling."""
78 |         results = await scenario_runner.run_risk_scenario_tests()
79 |         
   | ^^^^^^^^
80 |         assert results["overall_status"] == "passed", f"Risk scenario tests failed: {results}"
81 |         assert results["pass_rate"] >= 0.9, f"Risk management pass rate too low: {results['pass_rate']}"
   |
help: Remove whitespace from blank line

E501 Line too long (104 > 100)
  --> tests/institutional/test_live_trading.py:81:101
   |
80 |         assert results["overall_status"] == "passed", f"Risk scenario tests failed: {results}"
81 |         assert results["pass_rate"] >= 0.9, f"Risk management pass rate too low: {results['pass_rate']}"
   |                                                                                                     ^^^^
82 |     
83 |     @pytest.mark.asyncio
   |

W293 [*] Blank line contains whitespace
  --> tests/institutional/test_live_trading.py:82:1
   |
80 |         assert results["overall_status"] == "passed", f"Risk scenario tests failed: {results}"
81 |         assert results["pass_rate"] >= 0.9, f"Risk management pass rate too low: {results['pass_rate']}"
82 |     
   | ^^^^
83 |     @pytest.mark.asyncio
84 |     async def test_performance_benchmarks(self, scenario_runner):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/test_live_trading.py:87:1
   |
85 |         """Test performance and latency benchmarks."""
86 |         results = await scenario_runner.run_performance_tests()
87 |         
   | ^^^^^^^^
88 |         assert results["overall_status"] == "passed", f"Performance tests failed: {results}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/institutional/test_live_trading.py:89:1
   |
88 |         assert results["overall_status"] == "passed", f"Performance tests failed: {results}"
89 |         
   | ^^^^^^^^
90 |         metrics = results["metrics"]
91 |         assert metrics["average_latency_ms"] < 100, f"Latency too high: {metrics['average_latency_ms']}ms"
   |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
  --> tests/institutional/test_live_trading.py:91:101
   |
90 |         metrics = results["metrics"]
91 |         assert metrics["average_latency_ms"] < 100, f"Latency too high: {metrics['average_latency_ms']}ms"
   |                                                                                                     ^^^^^^
92 |         assert metrics["orders_per_second"] > 50, f"Throughput too low: {metrics['orders_per_second']} ops/s"
93 |         assert metrics["memory_usage_mb"] < 100, f"Memory usage too high: {metrics['memory_usage_mb']}MB"
   |

E501 Line too long (109 > 100)
  --> tests/institutional/test_live_trading.py:92:101
   |
90 |         metrics = results["metrics"]
91 |         assert metrics["average_latency_ms"] < 100, f"Latency too high: {metrics['average_latency_ms']}ms"
92 |         assert metrics["orders_per_second"] > 50, f"Throughput too low: {metrics['orders_per_second']} ops/s"
   |                                                                                                     ^^^^^^^^^
93 |         assert metrics["memory_usage_mb"] < 100, f"Memory usage too high: {metrics['memory_usage_mb']}MB"
   |

E501 Line too long (105 > 100)
  --> tests/institutional/test_live_trading.py:93:101
   |
91 |         assert metrics["average_latency_ms"] < 100, f"Latency too high: {metrics['average_latency_ms']}ms"
92 |         assert metrics["orders_per_second"] > 50, f"Throughput too low: {metrics['orders_per_second']} ops/s"
93 |         assert metrics["memory_usage_mb"] < 100, f"Memory usage too high: {metrics['memory_usage_mb']}MB"
   |                                                                                                     ^^^^^
94 |     
95 |     @pytest.mark.asyncio
   |

W293 [*] Blank line contains whitespace
  --> tests/institutional/test_live_trading.py:94:1
   |
92 |         assert metrics["orders_per_second"] > 50, f"Throughput too low: {metrics['orders_per_second']} ops/s"
93 |         assert metrics["memory_usage_mb"] < 100, f"Memory usage too high: {metrics['memory_usage_mb']}MB"
94 |     
   | ^^^^
95 |     @pytest.mark.asyncio
96 |     async def test_compliance_validation(self, compliance_suite):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:99:1
    |
 97 |         """Test compliance and audit requirements."""
 98 |         results = await compliance_suite.run_compliance_tests()
 99 |         
    | ^^^^^^^^
100 |         assert results["overall_status"] == "passed", f"Compliance tests failed: {results}"
101 |         assert results["compliance_score"] >= 0.95, f"Compliance score too low: {results['compliance_score']}"
    |
help: Remove whitespace from blank line

E501 Line too long (110 > 100)
   --> tests/institutional/test_live_trading.py:101:101
    |
100 |         assert results["overall_status"] == "passed", f"Compliance tests failed: {results}"
101 |         assert results["compliance_score"] >= 0.95, f"Compliance score too low: {results['compliance_score']}"
    |                                                                                                     ^^^^^^^^^^
102 |     
103 |     def test_execution_engine_initialization(self, execution_engine):
    |

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:102:1
    |
100 |         assert results["overall_status"] == "passed", f"Compliance tests failed: {results}"
101 |         assert results["compliance_score"] >= 0.95, f"Compliance score too low: {results['compliance_score']}"
102 |     
    | ^^^^
103 |     def test_execution_engine_initialization(self, execution_engine):
104 |         """Test execution engine can be properly initialized."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:107:1
    |
105 |         if execution_engine:
106 |             assert execution_engine.is_initialized, "Execution engine not initialized"
107 |             
    | ^^^^^^^^^^^^
108 |             stats = execution_engine.get_execution_stats()
109 |             assert "success_rate" in stats, "Missing success rate in stats"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:114:1
    |
112 |         else:
113 |             pytest.skip("No execution engine available for testing")
114 |     
    | ^^^^
115 |     def test_mock_market_data_provider(self):
116 |         """Test mock market data provider functionality."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:118:1
    |
116 |         """Test mock market data provider functionality."""
117 |         provider = MockMarketDataProvider()
118 |         
    | ^^^^^^^^
119 |         # Test current prices
120 |         aapl_price = provider.get_current_price("AAPL")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:123:1
    |
121 |         assert aapl_price is not None, "AAPL price should be available"
122 |         assert aapl_price > 0, "AAPL price should be positive"
123 |         
    | ^^^^^^^^
124 |         # Test price history
125 |         history = provider.get_price_history("AAPL")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:127:1
    |
125 |         history = provider.get_price_history("AAPL")
126 |         assert len(history) > 0, "Price history should not be empty"
127 |         
    | ^^^^^^^^
128 |         # Test market scenarios
129 |         initial_price = provider.get_current_price("AAPL")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:132:1
    |
130 |         provider.create_market_scenario("bull_market")
131 |         bull_price = provider.get_current_price("AAPL")
132 |         
    | ^^^^^^^^
133 |         assert bull_price > initial_price, "Bull market should increase prices"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:134:1
    |
133 |         assert bull_price > initial_price, "Bull market should increase prices"
134 |         
    | ^^^^^^^^
135 |         provider.create_market_scenario("bear_market")
136 |         bear_price = provider.get_current_price("AAPL")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:137:1
    |
135 |         provider.create_market_scenario("bear_market")
136 |         bear_price = provider.get_current_price("AAPL")
137 |         
    | ^^^^^^^^
138 |         assert bear_price < bull_price, "Bear market should decrease prices"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:139:1
    |
138 |         assert bear_price < bull_price, "Bear market should decrease prices"
139 |     
    | ^^^^
140 |     @pytest.mark.asyncio
141 |     async def test_order_execution_scenarios(self, execution_engine):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:145:1
    |
143 |         if not execution_engine:
144 |             pytest.skip("No execution engine available")
145 |         
    | ^^^^^^^^
146 |         # Test market order
147 |         market_result = execution_engine.submit_market_order("AAPL", "buy", 100)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:150:1
    |
148 |         assert market_result is not None, "Market order should succeed"
149 |         assert "id" in market_result, "Market order should return order ID"
150 |         
    | ^^^^^^^^
151 |         # Test limit order
152 |         limit_result = execution_engine.submit_limit_order("AAPL", "buy", 100, 170.0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:155:1
    |
153 |         assert limit_result is not None, "Limit order should succeed"
154 |         assert "id" in limit_result, "Limit order should return order ID"
155 |         
    | ^^^^^^^^
156 |         # Test order cancellation
157 |         if limit_result and "id" in limit_result:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:160:1
    |
158 |             cancel_result = execution_engine.cancel_order(limit_result["id"])
159 |             assert cancel_result is True, "Order cancellation should succeed"
160 |     
    | ^^^^
161 |     @pytest.mark.asyncio
162 |     async def test_error_handling(self, execution_engine):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:166:1
    |
164 |         if not execution_engine:
165 |             pytest.skip("No execution engine available")
166 |         
    | ^^^^^^^^
167 |         # Test invalid symbol
168 |         invalid_result = execution_engine.submit_market_order("INVALID_SYMBOL", "buy", 100)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:170:1
    |
168 |         invalid_result = execution_engine.submit_market_order("INVALID_SYMBOL", "buy", 100)
169 |         # Should handle gracefully (may succeed in mock environment)
170 |         
    | ^^^^^^^^
171 |         # Test invalid quantity
172 |         zero_qty_result = execution_engine.submit_market_order("AAPL", "buy", 0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:174:1
    |
172 |         zero_qty_result = execution_engine.submit_market_order("AAPL", "buy", 0)
173 |         # Should handle gracefully
174 |         
    | ^^^^^^^^
175 |         # Test invalid side
176 |         try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:182:1
    |
180 |             # Error handling is working
181 |             pass
182 |     
    | ^^^^
183 |     def test_circuit_breaker_functionality(self, execution_engine):
184 |         """Test circuit breaker protection mechanism."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:187:1
    |
185 |         if not execution_engine:
186 |             pytest.skip("No execution engine available")
187 |         
    | ^^^^^^^^
188 |         # Check initial circuit breaker state
189 |         stats = execution_engine.get_execution_stats()
    |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> tests/institutional/test_live_trading.py:190:101
    |
188 |         # Check initial circuit breaker state
189 |         stats = execution_engine.get_execution_stats()
190 |         assert stats["circuit_breaker_status"] in ["open", "closed"], "Invalid circuit breaker status"
    |                                                                                                     ^^
191 |         
192 |         # Test manual reset
    |

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:191:1
    |
189 |         stats = execution_engine.get_execution_stats()
190 |         assert stats["circuit_breaker_status"] in ["open", "closed"], "Invalid circuit breaker status"
191 |         
    | ^^^^^^^^
192 |         # Test manual reset
193 |         execution_engine.reset_circuit_breaker()
    |
help: Remove whitespace from blank line

E501 Line too long (118 > 100)
   --> tests/institutional/test_live_trading.py:195:101
    |
193 |         execution_engine.reset_circuit_breaker()
194 |         stats_after_reset = execution_engine.get_execution_stats()
195 |         assert stats_after_reset["circuit_breaker_status"] == "closed", "Circuit breaker should be closed after reset"
    |                                                                                                     ^^^^^^^^^^^^^^^^^^
196 |     
197 |     @pytest.mark.asyncio
    |

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:196:1
    |
194 |         stats_after_reset = execution_engine.get_execution_stats()
195 |         assert stats_after_reset["circuit_breaker_status"] == "closed", "Circuit breaker should be closed after reset"
196 |     
    | ^^^^
197 |     @pytest.mark.asyncio
198 |     async def test_multiple_order_handling(self, execution_engine):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:202:1
    |
200 |         if not execution_engine:
201 |             pytest.skip("No execution engine available")
202 |         
    | ^^^^^^^^
203 |         # Submit multiple orders
204 |         orders = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:206:1
    |
204 |         orders = []
205 |         symbols = ["AAPL", "MSFT", "GOOGL"]
206 |         
    | ^^^^^^^^
207 |         for symbol in symbols:
208 |             result = execution_engine.submit_market_order(symbol, "buy", 10)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:210:1
    |
208 |             result = execution_engine.submit_market_order(symbol, "buy", 10)
209 |             orders.append(result)
210 |         
    | ^^^^^^^^
211 |         # Check that at least some orders succeeded
212 |         successful_orders = [o for o in orders if o is not None]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:214:1
    |
212 |         successful_orders = [o for o in orders if o is not None]
213 |         assert len(successful_orders) > 0, "At least one order should succeed"
214 |     
    | ^^^^
215 |     def test_account_information_retrieval(self, execution_engine):
216 |         """Test account information retrieval."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:219:1
    |
217 |         if not execution_engine:
218 |             pytest.skip("No execution engine available")
219 |         
    | ^^^^^^^^
220 |         account_info = execution_engine.get_account_info()
221 |         if account_info:  # May be None in some test environments
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:224:1
    |
222 |             assert "equity" in account_info, "Account info should include equity"
223 |             assert "buying_power" in account_info, "Account info should include buying power"
224 |     
    | ^^^^
225 |     def test_position_information_retrieval(self, execution_engine):
226 |         """Test position information retrieval."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:229:1
    |
227 |         if not execution_engine:
228 |             pytest.skip("No execution engine available")
229 |         
    | ^^^^^^^^
230 |         positions = execution_engine.get_positions()
231 |         assert positions is not None, "Positions should return a list (even if empty)"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:233:1
    |
231 |         assert positions is not None, "Positions should return a list (even if empty)"
232 |         assert isinstance(positions, list), "Positions should be a list"
233 |     
    | ^^^^
234 |     def test_execution_statistics_tracking(self, execution_engine):
235 |         """Test execution statistics tracking."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:238:1
    |
236 |         if not execution_engine:
237 |             pytest.skip("No execution engine available")
238 |         
    | ^^^^^^^^
239 |         initial_stats = execution_engine.get_execution_stats()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:240:1
    |
239 |         initial_stats = execution_engine.get_execution_stats()
240 |         
    | ^^^^^^^^
241 |         # Submit a test order to update stats
242 |         execution_engine.submit_market_order("AAPL", "buy", 10)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:243:1
    |
241 |         # Submit a test order to update stats
242 |         execution_engine.submit_market_order("AAPL", "buy", 10)
243 |         
    | ^^^^^^^^
244 |         updated_stats = execution_engine.get_execution_stats()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:245:1
    |
244 |         updated_stats = execution_engine.get_execution_stats()
245 |         
    | ^^^^^^^^
246 |         # Check that statistics are tracked
247 |         assert updated_stats["total_orders"] >= initial_stats["total_orders"], "Order count should increase"
    |
help: Remove whitespace from blank line

E501 Line too long (108 > 100)
   --> tests/institutional/test_live_trading.py:247:101
    |
246 |         # Check that statistics are tracked
247 |         assert updated_stats["total_orders"] >= initial_stats["total_orders"], "Order count should increase"
    |                                                                                                     ^^^^^^^^
248 |         
249 |         # Check required statistics fields
    |

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:248:1
    |
246 |         # Check that statistics are tracked
247 |         assert updated_stats["total_orders"] >= initial_stats["total_orders"], "Order count should increase"
248 |         
    | ^^^^^^^^
249 |         # Check required statistics fields
250 |         required_fields = [
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:254:1
    |
252 |             "success_rate", "circuit_breaker_status", "is_initialized"
253 |         ]
254 |         
    | ^^^^^^^^
255 |         for field in required_fields:
256 |             assert field in updated_stats, f"Missing required statistics field: {field}"
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:264:1
    |
262 |     """
263 |     Integration tests for the complete trading bot system.
264 |     
    | ^^^^
265 |     These tests validate the interaction between different components
266 |     and the overall system behavior.
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:268:1
    |
266 |     and the overall system behavior.
267 |     """
268 |     
    | ^^^^
269 |     @pytest.mark.asyncio
270 |     async def test_full_system_integration(self):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:283:1
    |
281 |         # - Order execution
282 |         # - Monitoring and logging
283 |         
    | ^^^^^^^^
284 |         # For now, basic integration check
285 |         try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:289:1
    |
287 |             from ai_trading.execution.live_trading import AlpacaExecutionEngine
288 |             from tests.institutional.framework import TradingScenarioRunner
289 |             
    | ^^^^^^^^^^^^
290 |             # Create and initialize components
291 |             engine = AlpacaExecutionEngine()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:293:1
    |
291 |             engine = AlpacaExecutionEngine()
292 |             runner = TradingScenarioRunner(engine)
293 |             
    | ^^^^^^^^^^^^
294 |             # Run basic integration test
295 |             if engine.initialize():
    |
help: Remove whitespace from blank line

E501 Line too long (108 > 100)
   --> tests/institutional/test_live_trading.py:297:101
    |
295 |             if engine.initialize():
296 |                 results = await runner.run_end_to_end_test()
297 |                 assert results["overall_status"] in ["passed", "failed"], "Integration test should complete"
    |                                                                                                     ^^^^^^^^
298 |             
299 |         except ImportError:
    |

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:298:1
    |
296 |                 results = await runner.run_end_to_end_test()
297 |                 assert results["overall_status"] in ["passed", "failed"], "Integration test should complete"
298 |             
    | ^^^^^^^^^^^^
299 |         except ImportError:
300 |             pytest.skip("Required modules not available for integration test")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:301:1
    |
299 |         except ImportError:
300 |             pytest.skip("Required modules not available for integration test")
301 |     
    | ^^^^
302 |     @pytest.mark.slow
303 |     @pytest.mark.asyncio
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:311:1
    |
309 |         # - Concurrent operations
310 |         # - Resource usage monitoring
311 |         
    | ^^^^^^^^
312 |         # Placeholder for stress testing
313 |         await asyncio.sleep(0.1)  # Simulate stress test
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:315:1
    |
313 |         await asyncio.sleep(0.1)  # Simulate stress test
314 |         assert True, "Stress test placeholder"
315 |     
    | ^^^^
316 |     @pytest.mark.slow
317 |     @pytest.mark.asyncio
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/institutional/test_live_trading.py:325:1
    |
323 |         # - Emergency stop procedures
324 |         # - Position reconciliation
325 |         
    | ^^^^^^^^
326 |         # Placeholder for disaster recovery testing
327 |         await asyncio.sleep(0.1)  # Simulate disaster recovery test
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/institutional/test_live_trading.py:333:48
    |
331 | if __name__ == "__main__":
332 |     """Run tests when executed directly."""
333 |     pytest.main([__file__, "-v", "--tb=short"])
    |                                                ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/integration/test_regime_fallback.py:1:1
  |
1 | / import types
2 | | import pytest
  | |_____________^
3 |
4 |   try:
  |
help: Organize imports

W292 [*] No newline at end of file
  --> tests/integration/test_regime_fallback.py:28:86
   |
26 |     assert "checked" in summary, "Should return a valid summary dict"
27 |     # Don't assert specific symbol outcomes as data fetching may fail in test environment
28 |     assert isinstance(summary.get("failures", []), list), "Should have failures list"
   |                                                                                      ^
   |
help: Add trailing newline

W292 [*] No newline at end of file
 --> tests/mocks/backtest_framework_mocks.py:8:26
  |
6 |         self.symbol = "AAPL"
7 |         self.confidence = 0.8
8 |         self.side = "buy"
  |                          ^
  |
help: Add trailing newline

W292 [*] No newline at end of file
  --> tests/mocks/critical_fixes_validation_mocks.py:22:64
   |
20 |     def __init__(self):
21 |         self.api = None
22 |         self.allow_short_selling = True  # Enable short selling
   |                                                                ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/mocks/validate_critical_fix_mocks.py:3:1
  |
1 | # Extracted from scripts/validate_critical_fix.py
2 |
3 | from unittest.mock import MagicMock
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4 |
5 | class MockOrder:
  |
help: Organize imports

W292 [*] No newline at end of file
  --> tests/mocks/validate_critical_fix_mocks.py:19:36
   |
17 |         self.data_client = MagicMock()
18 |         self.data_fetcher = MagicMock()
19 |         self.capital_band = "small"
   |                                    ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/runtime/test_exception_narrowing_df_main.py:1:1
  |
1 | / import inspect
2 | | import re
3 | | import ai_trading.data_fetcher as df_mod
4 | | import ai_trading.main as main_mod
  | |__________________________________^
  |
help: Organize imports

E501 Line too long (116 > 100)
  --> tests/runtime/test_no_broad_in_stage2.py:28:101
   |
26 | ]
27 |
28 | p = subprocess.run([sys.executable, "tools/audit_exceptions.py", "--paths", *PATHS], capture_output=True, text=True)
   |                                                                                                     ^^^^^^^^^^^^^^^^
29 | assert p.returncode == 0, p.stderr
30 | data = json.loads(p.stdout.splitlines()[0])
   |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/slow/test_meta_learning_heavy.py:8:5
   |
 7 |   try:
 8 | /     import pydantic_settings  # noqa: F401
 9 | |     from ai_trading import meta_learning
   | |________________________________________^
10 |   except Exception:
11 |       pytest.skip("pydantic v2 required", allow_module_level=True)
   |
help: Organize imports

E501 Line too long (101 > 100)
  --> tests/slow/test_meta_learning_heavy.py:44:101
   |
43 | def test_retrain_meta_insufficient(monkeypatch):
44 |     df = pd.DataFrame({"entry_price": [1], "exit_price": [2], "signal_tags": ["a"], "side": ["buy"]})
   |                                                                                                     ^
45 |     monkeypatch.setattr(meta_learning.Path, "exists", lambda self: True)
46 |     monkeypatch.setattr(pd, "read_csv", lambda p: df)
   |

W292 [*] No newline at end of file
 --> tests/support/__init__.py:1:53
  |
1 | """Test support modules for AI trading bot tests."""
  |                                                     ^
  |
help: Add trailing newline

E501 Line too long (109 > 100)
   --> tests/test_additional_coverage.py:345:101
    |
343 |     monkeypatch.setenv("ALPACA_BASE_URL", "https://paper-api.alpaca.markets")
344 |
345 |     # AI-AGENT-REF: Clear sys.argv to prevent pytest args from interfering with validate_env argument parsing
    |                                                                                                     ^^^^^^^^^
346 |     original_argv = sys.argv[:]
347 |     try:
    |

E501 Line too long (108 > 100)
   --> tests/test_additional_coverage.py:351:101
    |
349 |         runpy.run_module("validate_env", run_name="__main__")
350 |     except SystemExit as e:
351 |         # AI-AGENT-REF: Expect exit code 0 (success) or 1 (validation issues) - both are valid test outcomes
    |                                                                                                     ^^^^^^^^
352 |         assert e.code in (0, 1), f"Unexpected exit code: {e.code}"
353 |     finally:
    |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_advanced_features.py:2:1
  |
1 |   # Ensure repository root in path
2 | / import sys
3 | | import types
4 | | from pathlib import Path
5 | | import pytest
  | |_____________^
6 |
7 |   sys.path.insert(0, str(Path(__file__).resolve().parents[1]))
  |
help: Organize imports

E501 Line too long (106 > 100)
  --> tests/test_advanced_features.py:68:101
   |
66 |     monkeypatch.setattr(rebalancer, "rebalance_interval_min", lambda: 0)
67 |     monkeypatch.setattr(rebalancer, "rebalance_portfolio", lambda ctx: calls.append(ctx))
68 |     rebalancer._last_rebalance = rebalancer.datetime.now(rebalancer.UTC) - rebalancer.timedelta(minutes=1)
   |                                                                                                     ^^^^^^
69 |     rebalancer.maybe_rebalance("ctx")
70 |     assert calls == ["ctx"]
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_allocator_size_bias.py:1:1
  |
1 | / import logging
2 | |
3 | | import pytest
4 | |
5 | | from ai_trading.strategies.performance_allocator import PerformanceBasedAllocator, _resolve_conf_threshold
6 | | from ai_trading.config.management import TradingConfig
7 | | from ai_trading.config.settings import get_settings
8 | | from ai_trading.settings import get_settings as base_get_settings
  | |_________________________________________________________________^
  |
help: Organize imports

E501 Line too long (106 > 100)
 --> tests/test_allocator_size_bias.py:5:101
  |
3 | import pytest
4 |
5 | from ai_trading.strategies.performance_allocator import PerformanceBasedAllocator, _resolve_conf_threshold
  |                                                                                                     ^^^^^^
6 | from ai_trading.config.management import TradingConfig
7 | from ai_trading.config.settings import get_settings
  |

W293 [*] Blank line contains whitespace
  --> tests/test_alpaca_import.py:12:1
   |
10 |     for module in alpaca_modules:
11 |         sys.modules.pop(module, None)
12 |     
   | ^^^^
13 |     # Simulate missing alpaca packages by setting them to None
14 |     sys.modules['alpaca_trade_api'] = None
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpaca_import.py:18:1
   |
16 |     sys.modules['alpaca.data'] = None
17 |     sys.modules['alpaca'] = None
18 |     
   | ^^^^
19 |     # Set testing mode
20 |     import os
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpaca_import.py:22:1
   |
20 |     import os
21 |     os.environ['TESTING'] = 'true'
22 |     
   | ^^^^
23 |     try:
24 |         # This should not raise an exception
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpaca_import.py:31:1
   |
29 |         assert hasattr(ai_trading.core.bot_engine, 'ALPACA_AVAILABLE')
30 |         assert ai_trading.core.bot_engine.ALPACA_AVAILABLE is False
31 |         
   | ^^^^^^^^
32 |         # Check that mock classes are used
33 |         from ai_trading.core.bot_engine import TradingClient, OrderSide
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_alpaca_import.py:33:9
   |
32 |         # Check that mock classes are used
33 |         from ai_trading.core.bot_engine import TradingClient, OrderSide
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 |         assert TradingClient is not None
35 |         assert OrderSide is not None
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_alpaca_import.py:36:1
   |
34 |         assert TradingClient is not None
35 |         assert OrderSide is not None
36 |         
   | ^^^^^^^^
37 |         print("SUCCESS: ai_trading imported successfully without Alpaca packages")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpaca_import.py:38:1
   |
37 |         print("SUCCESS: ai_trading imported successfully without Alpaca packages")
38 |         
   | ^^^^^^^^
39 |     finally:
40 |         # Clean up environment
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpaca_import.py:42:1
   |
40 |         # Clean up environment
41 |         os.environ.pop('TESTING', None)
42 |         
   | ^^^^^^^^
43 |         # Restore original modules (though this won't actually restore them)
44 |         for module in alpaca_modules:
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_alpaca_import.py:49:44
   |
48 | if __name__ == "__main__":
49 |     test_ai_trading_import_without_alpaca()
   |                                            ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_alpaca_init_contract.py:1:1
  |
1 | from unittest import mock
  | ^^^^^^^^^^^^^^^^^^^^^^^^^
2 |
3 | def test_no_import_time_initialization(monkeypatch):
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_alpaca_init_contract.py:8:1
   |
 6 |     monkeypatch.setenv("TRADING_MODE", "DRY_RUN")
 7 |     monkeypatch.setenv("PYTEST_RUNNING", "true")
 8 |     
   | ^^^^
 9 |     # Test that we can import the module without triggering initialization
10 |     import ai_trading.core.bot_engine as eng
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpaca_init_contract.py:18:1
   |
16 |     monkeypatch.setenv("SHADOW_MODE", "true")
17 |     monkeypatch.setenv("PYTEST_RUNNING", "true")
18 |     
   | ^^^^
19 |     import ai_trading.core.bot_engine as eng
20 |     k, s, b = eng._ensure_alpaca_env_or_raise()
   |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
  --> tests/test_alpaca_init_contract.py:24:101
   |
23 | def test_initialize_skips_in_shadow_mode(monkeypatch):
24 |     """Test that _initialize_alpaca_clients skips initialization in SHADOW_MODE without credentials."""
   |                                                                                                     ^^^
25 |     monkeypatch.setenv("SHADOW_MODE", "true")
26 |     monkeypatch.setenv("PYTEST_RUNNING", "true")
   |

W293 [*] Blank line contains whitespace
  --> tests/test_alpaca_init_contract.py:31:1
   |
29 |     monkeypatch.delenv("ALPACA_SECRET_KEY", raising=False)
30 |     monkeypatch.delenv("APCA_API_SECRET_KEY", raising=False)
31 |     
   | ^^^^
32 |     import ai_trading.core.bot_engine as eng
33 |     # Reset the client to None
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpaca_init_contract.py:35:1
   |
33 |     # Reset the client to None
34 |     eng.trading_client = None
35 |     
   | ^^^^
36 |     # This should not raise and should skip initialization
37 |     with mock.patch.object(eng, "logger") as mock_logger:
   |
help: Remove whitespace from blank line

E501 Line too long (120 > 100)
  --> tests/test_alpaca_init_contract.py:40:101
   |
38 |         eng._initialize_alpaca_clients()
39 |         # Should have logged the skip message
40 |         mock_logger.info.assert_called_with("Shadow mode or missing credentials: skipping Alpaca client initialization")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
41 |         # Client should still be None
42 |         assert eng.trading_client is None
   |

W293 [*] Blank line contains whitespace
  --> tests/test_alpaca_init_contract.py:52:1
   |
50 |     monkeypatch.delenv("ALPACA_SECRET_KEY", raising=False)
51 |     monkeypatch.delenv("APCA_API_SECRET_KEY", raising=False)
52 |     
   | ^^^^
53 |     import ai_trading.core.bot_engine as eng
54 |     # Reset the client to None
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpaca_init_contract.py:56:1
   |
54 |     # Reset the client to None
55 |     eng.trading_client = None
56 |     
   | ^^^^
57 |     try:
58 |         eng._initialize_alpaca_clients()
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_alpaca_init_contract.py:61:58
   |
59 |         assert False, "Should have raised RuntimeError"
60 |     except RuntimeError as e:
61 |         assert "Missing Alpaca API credentials" in str(e)
   |                                                          ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_alpha_quality.py:8:1
   |
 6 |   """
 7 |
 8 | / import numpy as np
 9 | | import pandas as pd
10 | | from datetime import timedelta
11 | | from unittest.mock import Mock
   | |______________________________^
12 |
13 |   # Test data labeling and splits
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:18:1
   |
16 |     try:
17 |         from ai_trading.data.labels import fixed_horizon_return
18 |         
   | ^^^^^^^^
19 |         # Create test price series
20 |         prices = pd.Series([100, 102, 105, 103, 107])
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:21:1
   |
19 |         # Create test price series
20 |         prices = pd.Series([100, 102, 105, 103, 107])
21 |         
   | ^^^^^^^^
22 |         # Test with 1-period horizon
23 |         returns = fixed_horizon_return(prices, horizon_bars=1, fee_bps=0)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:24:1
   |
22 |         # Test with 1-period horizon
23 |         returns = fixed_horizon_return(prices, horizon_bars=1, fee_bps=0)
24 |         
   | ^^^^^^^^
25 |         # Check that returns are calculated correctly
26 |         expected = np.log(102/100)  # First return
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:28:1
   |
26 |         expected = np.log(102/100)  # First return
27 |         assert abs(returns.iloc[0] - expected) < 1e-6, "Fixed horizon return calculation failed"
28 |         
   | ^^^^^^^^
29 |         # Check with fees
30 |         returns_with_fees = fixed_horizon_return(prices, horizon_bars=1, fee_bps=10)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:32:1
   |
30 |         returns_with_fees = fixed_horizon_return(prices, horizon_bars=1, fee_bps=10)
31 |         assert returns_with_fees.iloc[0] < returns.iloc[0], "Fee adjustment not applied"
32 |         
   | ^^^^^^^^
33 |         print("✓ Fixed horizon return test passed")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:34:1
   |
33 |         print("✓ Fixed horizon return test passed")
34 |         
   | ^^^^^^^^
35 |     except ImportError:
36 |         print("⚠ Skipping fixed horizon return test - module not available")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:45:1
   |
43 |     try:
44 |         from ai_trading.data.splits import validate_no_leakage
45 |         
   | ^^^^^^^^
46 |         # Create test indices
47 |         train_indices = np.array([0, 1, 2, 3, 4])
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:50:1
   |
48 |         test_indices = np.array([5, 6, 7, 8, 9])
49 |         timeline = pd.date_range('2020-01-01', periods=10, freq='D')
50 |         
   | ^^^^^^^^
51 |         # Test no leakage case
52 |         no_leakage = validate_no_leakage(train_indices, test_indices, timeline)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:54:1
   |
52 |         no_leakage = validate_no_leakage(train_indices, test_indices, timeline)
53 |         assert no_leakage, "Should detect no leakage in proper split"
54 |         
   | ^^^^^^^^
55 |         # Test leakage case
56 |         overlap_test = np.array([3, 4, 5, 6, 7])  # Overlaps with train
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:59:1
   |
57 |         has_leakage = validate_no_leakage(train_indices, overlap_test, timeline)
58 |         assert not has_leakage, "Should detect leakage in overlapping split"
59 |         
   | ^^^^^^^^
60 |         print("✓ Data leakage validation test passed")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:61:1
   |
60 |         print("✓ Data leakage validation test passed")
61 |         
   | ^^^^^^^^
62 |     except ImportError:
63 |         print("⚠ Skipping leakage validation test - module not available")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:72:1
   |
70 |     try:
71 |         from ai_trading.execution.microstructure import calculate_slippage
72 |         
   | ^^^^^^^^
73 |         # Test basic slippage calculation
74 |         volatility = 0.02  # 2% volatility
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:77:1
   |
75 |         trade_size = 1000
76 |         liquidity = 10000
77 |         
   | ^^^^^^^^
78 |         slippage = calculate_slippage(volatility, trade_size, liquidity)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:79:1
   |
78 |         slippage = calculate_slippage(volatility, trade_size, liquidity)
79 |         
   | ^^^^^^^^
80 |         # Should be positive and reasonable
81 |         assert slippage > 0, "Slippage should be positive"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:83:1
   |
81 |         assert slippage > 0, "Slippage should be positive"
82 |         assert slippage < 0.1, "Slippage should be reasonable (< 10%)"
83 |         
   | ^^^^^^^^
84 |         # Test that larger trades have higher slippage
85 |         large_trade_slippage = calculate_slippage(volatility, trade_size * 10, liquidity)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:87:1
   |
85 |         large_trade_slippage = calculate_slippage(volatility, trade_size * 10, liquidity)
86 |         assert large_trade_slippage > slippage, "Larger trades should have higher slippage"
87 |         
   | ^^^^^^^^
88 |         print("✓ Slippage calculation test passed")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_alpha_quality.py:89:1
   |
88 |         print("✓ Slippage calculation test passed")
89 |         
   | ^^^^^^^^
90 |     except ImportError:
91 |         print("⚠ Skipping slippage calculation test - module not available")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:100:1
    |
 98 |     try:
 99 |         from ai_trading.rl_trading.env import TradingEnv
100 |         
    | ^^^^^^^^
101 |         # Create synthetic data
102 |         np.random.seed(42)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:105:1
    |
103 |         data = np.random.randn(100, 4)
104 |         data[:, 0] = 100 + np.cumsum(np.random.randn(100) * 0.01)  # Price series
105 |         
    | ^^^^^^^^
106 |         # Create environment with penalties
107 |         env = TradingEnv(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:113:1
    |
111 |             half_spread=0.0002
112 |         )
113 |         
    | ^^^^^^^^
114 |         # Test that turnover penalty is applied
115 |         obs = env.reset()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:116:1
    |
114 |         # Test that turnover penalty is applied
115 |         obs = env.reset()
116 |         
    | ^^^^^^^^
117 |         # Make a trade (should incur turnover penalty)
118 |         obs1, reward1, done1, info1 = env.step(1)  # Buy
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:119:1
    |
117 |         # Make a trade (should incur turnover penalty)
118 |         obs1, reward1, done1, info1 = env.step(1)  # Buy
119 |         
    | ^^^^^^^^
120 |         # Check that info contains penalty information
121 |         assert 'turnover_penalty' in info1, "Turnover penalty should be tracked"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:124:1
    |
122 |         assert 'drawdown_penalty' in info1, "Drawdown penalty should be tracked"
123 |         assert 'variance_penalty' in info1, "Variance penalty should be tracked"
124 |         
    | ^^^^^^^^
125 |         # Verify penalty is non-zero for trade
126 |         assert info1['turnover_penalty'] > 0, "Turnover penalty should be applied for trade"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:127:1
    |
125 |         # Verify penalty is non-zero for trade
126 |         assert info1['turnover_penalty'] > 0, "Turnover penalty should be applied for trade"
127 |         
    | ^^^^^^^^
128 |         print("✓ RL reward penalties test passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:129:1
    |
128 |         print("✓ RL reward penalties test passed")
129 |         
    | ^^^^^^^^
130 |     except ImportError:
131 |         print("⚠ Skipping RL reward penalties test - module not available")
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_alpha_quality.py:139:9
    |
137 |       """Test model registry functionality."""
138 |       try:
139 | /         from ai_trading.model_registry import ModelRegistry
140 | |         import tempfile
141 | |         import os
    | |_________________^
142 |           
143 |           # Create temporary directory for testing
    |
help: Organize imports

F401 `os` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> tests/test_alpha_quality.py:141:16
    |
139 |         from ai_trading.model_registry import ModelRegistry
140 |         import tempfile
141 |         import os
    |                ^^
142 |         
143 |         # Create temporary directory for testing
    |
help: Remove unused import: `os`

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:142:1
    |
140 |         import tempfile
141 |         import os
142 |         
    | ^^^^^^^^
143 |         # Create temporary directory for testing
144 |         with tempfile.TemporaryDirectory() as temp_dir:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:146:1
    |
144 |         with tempfile.TemporaryDirectory() as temp_dir:
145 |             registry = ModelRegistry(temp_dir)
146 |             
    | ^^^^^^^^^^^^
147 |             # Create a mock model
148 |             mock_model = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:150:1
    |
148 |             mock_model = Mock()
149 |             mock_model.__class__.__name__ = "MockModel"
150 |             
    | ^^^^^^^^^^^^
151 |             metadata = {
152 |                 "training_date": "2024-01-01",
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:156:1
    |
154 |                 "feature_count": 10
155 |             }
156 |             
    | ^^^^^^^^^^^^
157 |             # Register model
158 |             model_id = registry.register_model(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:164:1
    |
162 |                 metadata=metadata
163 |             )
164 |             
    | ^^^^^^^^^^^^
165 |             # Verify model was registered
166 |             assert model_id in registry.model_index, "Model should be registered"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:167:1
    |
165 |             # Verify model was registered
166 |             assert model_id in registry.model_index, "Model should be registered"
167 |             
    | ^^^^^^^^^^^^
168 |             # Load model back
169 |             loaded_model, loaded_metadata = registry.load_model(model_id)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:171:1
    |
169 |             loaded_model, loaded_metadata = registry.load_model(model_id)
170 |             assert loaded_metadata["cv_score"] == 0.85, "Metadata should be preserved"
171 |             
    | ^^^^^^^^^^^^
172 |             # Test listing models
173 |             models = registry.list_models(strategy="test_strategy")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:176:1
    |
174 |             assert len(models) == 1, "Should find one model"
175 |             assert models[0]["model_id"] == model_id, "Should return correct model"
176 |             
    | ^^^^^^^^^^^^
177 |             print("✓ Model registry test passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:178:1
    |
177 |             print("✓ Model registry test passed")
178 |         
    | ^^^^^^^^
179 |     except ImportError:
180 |         print("⚠ Skipping model registry test - module not available")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:189:1
    |
187 |     try:
188 |         from ai_trading.data.splits import walkforward_splits
189 |         
    | ^^^^^^^^
190 |         # Create date range
191 |         dates = pd.date_range('2020-01-01', '2022-12-31', freq='D')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:192:1
    |
190 |         # Create date range
191 |         dates = pd.date_range('2020-01-01', '2022-12-31', freq='D')
192 |         
    | ^^^^^^^^
193 |         # Generate splits
194 |         splits = walkforward_splits(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:201:1
    |
199 |             embargo_pct=0.01
200 |         )
201 |         
    | ^^^^^^^^
202 |         # Verify monotone timeline
203 |         for i in range(1, len(splits)):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:206:1
    |
204 |             current_split = splits[i]
205 |             previous_split = splits[i-1]
206 |             
    | ^^^^^^^^^^^^
207 |             # Current train start should be after previous train start
208 |             assert current_split['train_start'] >= previous_split['train_start'], \
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:210:1
    |
208 |             assert current_split['train_start'] >= previous_split['train_start'], \
209 |                 "Train start dates should be monotone"
210 |             
    | ^^^^^^^^^^^^
211 |             # Test start should be after train end
212 |             assert current_split['test_start'] > current_split['train_end'], \
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:214:1
    |
212 |             assert current_split['test_start'] > current_split['train_end'], \
213 |                 "Test should start after train ends"
214 |             
    | ^^^^^^^^^^^^
215 |             # No overlap between train and test
216 |             assert current_split['test_start'] >= current_split['train_end'], \
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:218:1
    |
216 |             assert current_split['test_start'] >= current_split['train_end'], \
217 |                 "No overlap between train and test periods"
218 |         
    | ^^^^^^^^
219 |         print("✓ Walk-forward monotone timeline test passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:220:1
    |
219 |         print("✓ Walk-forward monotone timeline test passed")
220 |         
    | ^^^^^^^^
221 |     except ImportError:
222 |         print("⚠ Skipping walk-forward timeline test - module not available")
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_alpha_quality.py:230:9
    |
228 |     """Test feature pipeline doesn't leak information."""
229 |     try:
230 |         from ai_trading.features.pipeline import create_feature_pipeline, validate_pipeline_no_leakage
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
231 |         
232 |         # Create synthetic data
    |
help: Organize imports

E501 Line too long (102 > 100)
   --> tests/test_alpha_quality.py:230:101
    |
228 |     """Test feature pipeline doesn't leak information."""
229 |     try:
230 |         from ai_trading.features.pipeline import create_feature_pipeline, validate_pipeline_no_leakage
    |                                                                                                     ^^
231 |         
232 |         # Create synthetic data
    |

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:231:1
    |
229 |     try:
230 |         from ai_trading.features.pipeline import create_feature_pipeline, validate_pipeline_no_leakage
231 |         
    | ^^^^^^^^
232 |         # Create synthetic data
233 |         np.random.seed(42)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:235:1
    |
233 |         np.random.seed(42)
234 |         dates = pd.date_range('2020-01-01', periods=200, freq='D')
235 |         
    | ^^^^^^^^
236 |         # Create train/test data with different statistics
237 |         X_train = pd.DataFrame({
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:243:1
    |
241 |             'low': 100 + np.cumsum(np.random.randn(100) * 0.5) - np.random.exponential(1, 100)
242 |         }, index=dates[:100])
243 |         
    | ^^^^^^^^
244 |         X_test = pd.DataFrame({
245 |             'close': 110 + np.cumsum(np.random.randn(100) * 0.8),  # Different mean and vol
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:250:1
    |
248 |             'low': 110 + np.cumsum(np.random.randn(100) * 0.8) - np.random.exponential(1.2, 100)
249 |         }, index=dates[100:])
250 |         
    | ^^^^^^^^
251 |         # Create pipeline
252 |         pipeline = create_feature_pipeline(scaler_type="standard")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:253:1
    |
251 |         # Create pipeline
252 |         pipeline = create_feature_pipeline(scaler_type="standard")
253 |         
    | ^^^^^^^^
254 |         # Validate no leakage
255 |         try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:262:1
    |
260 |             # If validation fails due to missing dependencies, that's OK
261 |             print(f"⚠ Feature pipeline test skipped: {e}")
262 |         
    | ^^^^^^^^
263 |     except ImportError:
264 |         print("⚠ Skipping feature pipeline test - module not available")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:273:1
    |
271 |     print("Running Alpha Quality Overhaul Tests")
272 |     print("=" * 50)
273 |     
    | ^^^^
274 |     test_fixed_horizon_return()
275 |     test_no_leakage_validation()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_alpha_quality.py:281:1
    |
279 |     test_walk_forward_monotone_timeline()
280 |     test_feature_pipeline_no_leakage()
281 |     
    | ^^^^
282 |     print("=" * 50)
283 |     print("Alpha quality tests completed!")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_alpha_quality.py:287:20
    |
286 | if __name__ == "__main__":
287 |     run_all_tests()
    |                    ^
    |
help: Add trailing newline

W293 [*] Blank line contains whitespace
  --> tests/test_artifacts_directories.py:16:1
   |
14 |         custom_artifacts = os.path.join(temp_dir, "custom_artifacts")
15 |         os.environ["ARTIFACTS_DIR"] = custom_artifacts
16 |         
   | ^^^^^^^^
17 |         try:
18 |             # Import and create evaluator
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_artifacts_directories.py:20:1
   |
18 |             # Import and create evaluator
19 |             from ai_trading.evaluation.walkforward import WalkForwardEvaluator
20 |             
   | ^^^^^^^^^^^^
21 |             evaluator = WalkForwardEvaluator()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_artifacts_directories.py:22:1
   |
21 |             evaluator = WalkForwardEvaluator()
22 |             
   | ^^^^^^^^^^^^
23 |             # Check that directory was created
24 |             expected_dir = os.path.join(custom_artifacts, "walkforward")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_artifacts_directories.py:27:1
   |
25 |             assert os.path.exists(expected_dir), f"Directory {expected_dir} should exist"
26 |             print(f"✓ Walkforward artifacts directory created: {expected_dir}")
27 |             
   | ^^^^^^^^^^^^
28 |         finally:
29 |             # Clean up environment variable
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_artifacts_directories.py:40:1
   |
38 |         custom_registry = os.path.join(temp_dir, "custom_models")
39 |         os.environ["MODEL_REGISTRY_DIR"] = custom_registry
40 |         
   | ^^^^^^^^
41 |         try:
42 |             # Import and create registry
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_artifacts_directories.py:44:1
   |
42 |             # Import and create registry
43 |             from ai_trading.model_registry import ModelRegistry
44 |             
   | ^^^^^^^^^^^^
45 |             registry = ModelRegistry()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_artifacts_directories.py:46:1
   |
45 |             registry = ModelRegistry()
46 |             
   | ^^^^^^^^^^^^
47 |             # Check that directory was created
48 |             assert os.path.exists(custom_registry), f"Directory {custom_registry} should exist"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_artifacts_directories.py:50:1
   |
48 |             assert os.path.exists(custom_registry), f"Directory {custom_registry} should exist"
49 |             print(f"✓ Model registry directory created: {custom_registry}")
50 |             
   | ^^^^^^^^^^^^
51 |         finally:
52 |             # Clean up environment variable
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_artifacts_directories.py:60:52
   |
58 |     test_walkforward_artifacts_directory()
59 |     test_model_registry_directory()
60 |     print("✓ All artifacts directory tests passed")
   |                                                    ^
   |
help: Add trailing newline

W291 [*] Trailing whitespace
  --> tests/test_audit_column_fix.py:34:19
   |
34 | @pytest.mark.smoke  
   |                   ^^
35 | def test_csv_column_alignment(tmp_path, monkeypatch):
36 |     """Test that audit.py field alignment matches bot_engine.py TradeLogger format"""
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_audit_column_fix.py:39:1
   |
37 |     path = tmp_path / "trades.csv"
38 |     monkeypatch.setattr(audit, "TRADE_LOG_FILE", str(path))
39 |     
   | ^^^^
40 |     # Test data
41 |     test_symbol = "GOOGL"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_audit_column_fix.py:47:1
   |
45 |     test_timestamp = "2025-08-05T17:00:00+00:00"
46 |     test_extra_info = "MOMENTUM_STRATEGY"
47 |     
   | ^^^^
48 |     # Log trade
49 |     audit.log_trade(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_audit_column_fix.py:57:1
   |
55 |         extra_info=test_extra_info
56 |     )
57 |     
   | ^^^^
58 |     # Read and validate CSV structure
59 |     with open(path, 'r') as f:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_audit_column_fix.py:63:1
   |
61 |         headers = reader.fieldnames
62 |         rows = list(reader)
63 |     
   | ^^^^
64 |     # Validate headers match bot_engine.py TradeLogger format
65 |     expected_headers = [
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_audit_column_fix.py:67:68
   |
65 |     expected_headers = [
66 |         "symbol", "entry_time", "entry_price", "exit_time", "exit_price",
67 |         "qty", "side", "strategy", "classification", "signal_tags", 
   |                                                                    ^
68 |         "confidence", "reward"
69 |     ]
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_audit_column_fix.py:71:1
   |
69 |     ]
70 |     assert headers == expected_headers, f"Headers mismatch: {headers} != {expected_headers}"
71 |     
   | ^^^^
72 |     # Validate data is in correct columns
73 |     assert len(rows) == 1, f"Expected 1 row, got {len(rows)}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_audit_column_fix.py:75:1
   |
73 |     assert len(rows) == 1, f"Expected 1 row, got {len(rows)}"
74 |     row = rows[0]
75 |     
   | ^^^^
76 |     assert row["symbol"] == test_symbol, f"Symbol in wrong column: {row['symbol']} != {test_symbol}"
77 |     assert row["entry_price"] == str(test_price), f"Price in wrong column: {row['entry_price']} != {test_price}"
   |
help: Remove whitespace from blank line

E501 Line too long (112 > 100)
  --> tests/test_audit_column_fix.py:77:101
   |
76 |     assert row["symbol"] == test_symbol, f"Symbol in wrong column: {row['symbol']} != {test_symbol}"
77 |     assert row["entry_price"] == str(test_price), f"Price in wrong column: {row['entry_price']} != {test_price}"
   |                                                                                                     ^^^^^^^^^^^^
78 |     assert row["qty"] == str(test_qty), f"Qty in wrong column: {row['qty']} != {test_qty}"
79 |     assert row["side"] == test_side, f"Side in wrong column: {row['side']} != {test_side}"
   |

E501 Line too long (114 > 100)
  --> tests/test_audit_column_fix.py:80:101
   |
78 |     assert row["qty"] == str(test_qty), f"Qty in wrong column: {row['qty']} != {test_qty}"
79 |     assert row["side"] == test_side, f"Side in wrong column: {row['side']} != {test_side}"
80 |     assert row["strategy"] == test_extra_info, f"Strategy in wrong column: {row['strategy']} != {test_extra_info}"
   |                                                                                                     ^^^^^^^^^^^^^^
81 |     
82 |     # Validate no UUID-like strings in symbol column  
   |

W293 [*] Blank line contains whitespace
  --> tests/test_audit_column_fix.py:81:1
   |
79 |     assert row["side"] == test_side, f"Side in wrong column: {row['side']} != {test_side}"
80 |     assert row["strategy"] == test_extra_info, f"Strategy in wrong column: {row['strategy']} != {test_extra_info}"
81 |     
   | ^^^^
82 |     # Validate no UUID-like strings in symbol column  
83 |     symbol = row["symbol"]
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_audit_column_fix.py:82:53
   |
80 |     assert row["strategy"] == test_extra_info, f"Strategy in wrong column: {row['strategy']} != {test_extra_info}"
81 |     
82 |     # Validate no UUID-like strings in symbol column  
   |                                                     ^^
83 |     symbol = row["symbol"]
84 |     assert not ('-' in symbol and len(symbol) > 10), f"Symbol looks like UUID: {symbol}"
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_audit_column_fix.py:92:1
   |
90 |     path = tmp_path / "trades.csv"
91 |     monkeypatch.setattr(audit, "TRADE_LOG_FILE", str(path))
92 |     
   | ^^^^
93 |     # Test multiple trades
94 |     test_trades = [
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_audit_column_fix.py:99:1
    |
 97 |         {"symbol": "GOOGL", "qty": 50, "side": "buy", "price": 2800.50},
 98 |     ]
 99 |     
    | ^^^^
100 |     for trade in test_trades:
101 |         audit.log_trade(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_audit_column_fix.py:109:1
    |
107 |             extra_info="TEST"
108 |         )
109 |     
    | ^^^^
110 |     # Validate no UUIDs in symbol columns
111 |     with open(path, 'r') as f:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_audit_column_fix.py:114:1
    |
112 |         reader = csv.DictReader(f)
113 |         rows = list(reader)
114 |     
    | ^^^^
115 |     uuid_pattern_chars = set('abcdef0123456789-')
116 |     for i, row in enumerate(rows):
    |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
   --> tests/test_audit_column_fix.py:119:101
    |
117 |         symbol = row["symbol"]
118 |         # Check if symbol looks like a UUID
119 |         if '-' in symbol and len(symbol) > 10 and all(c.lower() in uuid_pattern_chars for c in symbol):
    |                                                                                                     ^^^
120 |             pytest.fail(f"Row {i+1} has UUID-like symbol: {symbol}")
    |

W293 [*] Blank line contains whitespace
   --> tests/test_audit_column_fix.py:121:1
    |
119 |         if '-' in symbol and len(symbol) > 10 and all(c.lower() in uuid_pattern_chars for c in symbol):
120 |             pytest.fail(f"Row {i+1} has UUID-like symbol: {symbol}")
121 |         
    | ^^^^^^^^
122 |         # Verify symbol is expected
123 |         expected_symbols = [t["symbol"] for t in test_trades]
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_audit_column_fix.py:124:88
    |
122 |         # Verify symbol is expected
123 |         expected_symbols = [t["symbol"] for t in test_trades]
124 |         assert symbol in expected_symbols, f"Row {i+1} has unexpected symbol: {symbol}"
    |                                                                                        ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_bars_fallback.py:1:1
  |
1 | / import pandas as pd
2 | | from ai_trading.data.bars import _resample_minutes_to_daily
  | |___________________________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_batch_and_warmup.py:1:1
  |
1 | / import pytest
2 | | from datetime import datetime, timedelta, timezone
  | |__________________________________________________^
3 |   try:
4 |       from ai_trading.data_fetcher import get_bars_batch, warmup_cache
  |
help: Organize imports

E501 Line too long (104 > 100)
  --> tests/test_batch_and_warmup.py:15:101
   |
14 | def test_warmup_cache_no_symbols():
15 |     n = warmup_cache([], "1D", datetime.now(timezone.utc)-timedelta(days=1), datetime.now(timezone.utc))
   |                                                                                                     ^^^^
16 |     assert n == 0
   |

W292 [*] No newline at end of file
  --> tests/test_batch_and_warmup.py:16:18
   |
14 | def test_warmup_cache_no_symbols():
15 |     n = warmup_cache([], "1D", datetime.now(timezone.utc)-timedelta(days=1), datetime.now(timezone.utc))
16 |     assert n == 0
   |                  ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_batch_paths.py:1:1
  |
1 | / import types
2 | | import pandas as pd
3 | | import ai_trading.core.bot_engine as be
4 | | import ai_trading.trade_logic as tl
  | |___________________________________^
5 |
6 |   def _mk_df():
  |
help: Organize imports

E501 Line too long (102 > 100)
  --> tests/test_batch_paths.py:15:101
   |
14 | def test_regime_batch(monkeypatch):
15 |     ctx = types.SimpleNamespace(regime_symbols=["SPY","QQQ"], data_feed=None, regime_lookback_days=60)
   |                                                                                                     ^^
16 |     monkeypatch.setattr(be, "_fetch_regime_bars", lambda ctx, **kwargs: {"SPY": _mk_df(), "QQQ": _mk_df()})
17 |     out = be._build_regime_dataset(ctx)
   |

E501 Line too long (107 > 100)
  --> tests/test_batch_paths.py:16:101
   |
14 | def test_regime_batch(monkeypatch):
15 |     ctx = types.SimpleNamespace(regime_symbols=["SPY","QQQ"], data_feed=None, regime_lookback_days=60)
16 |     monkeypatch.setattr(be, "_fetch_regime_bars", lambda ctx, **kwargs: {"SPY": _mk_df(), "QQQ": _mk_df()})
   |                                                                                                     ^^^^^^^
17 |     out = be._build_regime_dataset(ctx)
18 |     assert "SPY" in out.columns and "QQQ" in out.columns
   |

E501 Line too long (115 > 100)
  --> tests/test_batch_paths.py:21:101
   |
20 | def test_pretrade_batch(monkeypatch):
21 |     ctx = types.SimpleNamespace(lookback_start="2024-01-01", lookback_end="2024-02-01", data_feed=None, min_rows=2)
   |                                                                                                     ^^^^^^^^^^^^^^^
22 |     monkeypatch.setattr(be, "_fetch_universe_bars_chunked", lambda **kwargs: {"AAPL": _mk_df()})
23 |     res = be.pre_trade_health_check(ctx, ["AAPL"])
   |

E501 Line too long (107 > 100)
  --> tests/test_batch_paths.py:27:101
   |
26 | def test_intraday_entries_and_exits(monkeypatch):
27 |     ctx = types.SimpleNamespace(logger=types.SimpleNamespace(warning=lambda *a, **k: None), data_feed=None)
   |                                                                                                     ^^^^^^^
28 |     
29 |     # Mock the chunked fetch function directly in trade_logic module to avoid API calls
   |

W293 [*] Blank line contains whitespace
  --> tests/test_batch_paths.py:28:1
   |
26 | def test_intraday_entries_and_exits(monkeypatch):
27 |     ctx = types.SimpleNamespace(logger=types.SimpleNamespace(warning=lambda *a, **k: None), data_feed=None)
28 |     
   | ^^^^
29 |     # Mock the chunked fetch function directly in trade_logic module to avoid API calls
30 |     def mock_fetch_intraday(*args, **kwargs):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_batch_paths.py:32:1
   |
30 |     def mock_fetch_intraday(*args, **kwargs):
31 |         return {"AAPL": _mk_df(), "MSFT": _mk_df()}
32 |     
   | ^^^^
33 |     # Patch both the import and the function to ensure it's mocked
34 |     monkeypatch.setattr("ai_trading.trade_logic._fetch_intraday_bars_chunked", mock_fetch_intraday)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_batch_paths.py:37:1
   |
35 |     monkeypatch.setattr(tl, "_compute_entry_signal", lambda ctx, sym, df: {"buy": True})
36 |     monkeypatch.setattr(tl, "_compute_exit_signal", lambda ctx, sym, df: {"sell": True})
37 |     
   | ^^^^
38 |     entries = tl.evaluate_entries(ctx, ["AAPL","MSFT"])
39 |     exits = tl.evaluate_exits(ctx, {"AAPL": {}})
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_batch_paths.py:41:27
   |
39 |     exits = tl.evaluate_exits(ctx, {"AAPL": {}})
40 |     assert "AAPL" in entries and "MSFT" in entries
41 |     assert "AAPL" in exits
   |                           ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_benchmarks.py:1:1
  |
1 | / import pandas as pd
2 | | import numpy as np
3 | | import inspect
4 | | from ai_trading import signals
5 | | from ai_trading import indicators
6 | | import pytest
  | |_____________^
7 |
8 |   df = pd.DataFrame({
  |
help: Organize imports

E501 Line too long (109 > 100)
  --> tests/test_benchmarks.py:35:101
   |
33 |         # must have exactly 1 required positional argument
34 |         if len(required_positional) != 1:
35 |             print(f"Skipping {module.__name__}.{name}: requires {len(required_positional)} positional args.")
   |                                                                                                     ^^^^^^^^^
36 |             continue
37 |         # skip if explicitly takes str, not intended for DataFrames
   |

E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
  --> tests/test_benchmarks.py:38:12
   |
36 |             continue
37 |         # skip if explicitly takes str, not intended for DataFrames
38 |         if required_positional[0].annotation == str:
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
39 |             print(f"Skipping {module.__name__}.{name}: expects str arg.")
40 |             continue
   |

W293 [*] Blank line contains whitespace
   --> tests/test_bot.py:209:1
    |
207 |     monkeypatch.setattr(bot, "load_tickers", lambda path=bot.TICKERS_FILE: ["AAA"])
208 |     monkeypatch.setattr(bot, "screen_universe", lambda candidates, runtime: [])
209 |     
    | ^^^^
210 |     # Create a mock runtime object
211 |     from unittest.mock import Mock
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_bot.py:213:1
    |
211 |     from unittest.mock import Mock
212 |     mock_runtime = Mock()
213 |     
    | ^^^^
214 |     assert bot.screen_candidates(mock_runtime) == []
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_bot_engine_imports.py:4:1
  |
2 |   Tests for bot engine import fallback functionality.
3 |   """
4 | / import sys
5 | | from unittest.mock import patch, MagicMock
6 | |
7 | | import pytest
  | |_____________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_bot_engine_imports.py:18:1
   |
16 |         mock_pipeline = MagicMock()
17 |         mock_pipeline.model_pipeline = "mock_model_pipeline"
18 |         
   | ^^^^^^^^
19 |         # Test primary path works when package import is available
20 |         with patch.dict(sys.modules, {'ai_trading.pipeline': mock_pipeline}):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_bot_engine_imports.py:23:1
   |
21 |             # Remove from sys.modules to simulate fresh import
22 |             sys.modules.pop('ai_trading.core.bot_engine', None)
23 |             
   | ^^^^^^^^^^^^
24 |             # Mock the import to simulate successful package import
25 |             with patch('builtins.__import__') as mock_import:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_bot_engine_imports.py:33:1
   |
31 |                         raise ImportError("Should not reach legacy import")
32 |                     return MagicMock()
33 |                 
   | ^^^^^^^^^^^^^^^^
34 |                 mock_import.side_effect = side_effect
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_bot_engine_imports.py:35:1
   |
34 |                 mock_import.side_effect = side_effect
35 |                 
   | ^^^^^^^^^^^^^^^^
36 |                 # Test the import logic directly
37 |                 try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_bot_engine_imports.py:43:1
   |
41 |                 except Exception:
42 |                     primary_success = False
43 |                     
   | ^^^^^^^^^^^^^^^^^^^^
44 |                 assert primary_success, "Primary import path should work"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_bot_engine_imports.py:51:1
   |
49 |         mock_legacy_pipeline = MagicMock()
50 |         mock_legacy_pipeline.model_pipeline = "mock_legacy_model_pipeline"
51 |         
   | ^^^^^^^^
52 |         # Test fallback path when package import fails
53 |         with patch.dict(sys.modules, {'pipeline': mock_legacy_pipeline}):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_bot_engine_imports.py:62:1
   |
60 |                         return mock_legacy_pipeline
61 |                     return MagicMock()
62 |                 
   | ^^^^^^^^^^^^^^^^
63 |                 mock_import.side_effect = side_effect
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_bot_engine_imports.py:64:1
   |
63 |                 mock_import.side_effect = side_effect
64 |                 
   | ^^^^^^^^^^^^^^^^
65 |                 # Test the fallback logic
66 |                 try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_bot_engine_imports.py:73:1
   |
71 |                         from pipeline import model_pipeline  # type: ignore
72 |                         fallback_triggered = True
73 |                         
   | ^^^^^^^^^^^^^^^^^^^^^^^^
74 |                     assert fallback_triggered, "Should fall back to legacy import"
75 |                     assert model_pipeline == "mock_legacy_model_pipeline"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_bot_engine_imports.py:105:1
    |
103 |         # This is a basic check that the import statements have proper type ignore comments
104 |         import ast
105 |         
    | ^^^^^^^^
106 |         # Get the source of the import logic we're testing
107 |         import_code = '''
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_bot_engine_imports.py:113:1
    |
111 |     from pipeline import model_pipeline  # type: ignore
112 | '''
113 |         
    | ^^^^^^^^
114 |         # Parse and verify the AST contains type: ignore comments
115 |         tree = ast.parse(import_code)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_bot_engine_imports.py:116:1
    |
114 |         # Parse and verify the AST contains type: ignore comments
115 |         tree = ast.parse(import_code)
116 |         
    | ^^^^^^^^
117 |         # We mainly care that the code parses without syntax errors
118 |         # and that it follows the expected structure
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_bot_engine_imports.py:121:1
    |
119 |         assert len(tree.body) == 1  # One try statement
120 |         assert isinstance(tree.body[0], ast.Try)
121 |         
    | ^^^^^^^^
122 |         # Verify we have the expected import structure
123 |         try_body = tree.body[0].body
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_bot_engine_imports.py:127:1
    |
125 |         assert isinstance(try_body[0], ast.ImportFrom)
126 |         assert try_body[0].module == 'ai_trading.pipeline'
127 |         
    | ^^^^^^^^
128 |         # Verify exception handler
129 |         handlers = tree.body[0].handlers
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_bot_engine_imports.py:134:52
    |
132 |         assert len(handler_body) == 1
133 |         assert isinstance(handler_body[0], ast.ImportFrom)
134 |         assert handler_body[0].module == 'pipeline'
    |                                                    ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_bot_engine_unit.py:1:1
   |
 1 | / import pandas as pd
 2 | | import pytest
 3 | | import joblib
 4 | | import types
 5 | |
 6 | | # AI-AGENT-REF: Replaced unsafe _raise_dynamic_exec_disabled() with proper imports from core module
 7 | | from ai_trading.core.bot_engine import (
 8 | |     initialize_bot,
 9 | |     run_trading_cycle,
10 | |     generate_signals,
11 | |     execute_trades,
12 | |     load_model,
13 | |     health_check,
14 | | )
   | |_^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_broker_alpaca.py:1:1
  |
1 | / from ai_trading.broker.alpaca import AlpacaBroker
2 | |
3 | |
4 | | from ai_trading.broker.alpaca import APIError
  | |_____________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_centralized_config.py:9:1
   |
 7 |   """
 8 |
 9 | / import os
10 | | import pytest
   | |_____________^
11 |   os.environ["TESTING"] = "1"
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_config.py:19:1
   |
17 | class TestCentralizedConfig:
18 |     """Test the centralized trading configuration system."""
19 |     
   | ^^^^
20 |     def test_trading_config_initialization(self):
21 |         """Test that TradingConfig initializes correctly."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_config.py:23:1
   |
21 |         """Test that TradingConfig initializes correctly."""
22 |         config = TradingConfig()
23 |         
   | ^^^^^^^^
24 |         # Test default values are set
25 |         assert config.kelly_fraction == 0.6
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_config.py:30:1
   |
28 |         assert config.capital_cap == 0.25
29 |         assert config.max_position_size == 8000
30 |         
   | ^^^^^^^^
31 |     def test_trading_config_from_env(self):
32 |         """Test loading configuration from environment."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_config.py:34:1
   |
32 |         """Test loading configuration from environment."""
33 |         config = TradingConfig.from_env()
34 |         
   | ^^^^^^^^
35 |         # Should load successfully
36 |         assert isinstance(config, TradingConfig)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_config.py:39:1
   |
37 |         assert config.kelly_fraction is not None
38 |         assert config.conf_threshold is not None
39 |         
   | ^^^^^^^^
40 |     def test_mode_specific_configurations(self):
41 |         """Test that each mode has appropriate parameter values."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_config.py:45:1
   |
43 |         balanced = TradingConfig.from_env("balanced")
44 |         aggressive = TradingConfig.from_env("aggressive")
45 |         
   | ^^^^^^^^
46 |         # Conservative mode should have lower risk parameters
47 |         assert conservative.kelly_fraction < balanced.kelly_fraction
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_config.py:50:1
   |
48 |         assert conservative.conf_threshold > balanced.conf_threshold
49 |         assert conservative.confirmation_count > balanced.confirmation_count
50 |         
   | ^^^^^^^^
51 |         # Aggressive mode should have higher risk parameters
52 |         assert aggressive.kelly_fraction > balanced.kelly_fraction
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_config.py:55:1
   |
53 |         assert aggressive.conf_threshold < balanced.conf_threshold
54 |         assert aggressive.confirmation_count < balanced.confirmation_count
55 |         
   | ^^^^^^^^
56 |     def test_conservative_mode_parameters(self):
57 |         """Test conservative mode specific values."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_config.py:59:1
   |
57 |         """Test conservative mode specific values."""
58 |         config = TradingConfig.from_env("conservative")
59 |         
   | ^^^^^^^^
60 |         assert config.kelly_fraction == 0.25
61 |         assert config.conf_threshold == 0.85
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_config.py:67:1
   |
65 |         assert config.take_profit_factor == 1.5
66 |         assert config.max_position_size == 5000
67 |         
   | ^^^^^^^^
68 |     def test_balanced_mode_parameters(self):
69 |         """Test balanced mode specific values."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_config.py:71:1
   |
69 |         """Test balanced mode specific values."""
70 |         config = TradingConfig.from_env("balanced")
71 |         
   | ^^^^^^^^
72 |         assert config.kelly_fraction == 0.6
73 |         assert config.conf_threshold == 0.75
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_config.py:79:1
   |
77 |         assert config.take_profit_factor == 1.8
78 |         assert config.max_position_size == 8000
79 |         
   | ^^^^^^^^
80 |     def test_aggressive_mode_parameters(self):
81 |         """Test aggressive mode specific values."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_config.py:83:1
   |
81 |         """Test aggressive mode specific values."""
82 |         config = TradingConfig.from_env("aggressive")
83 |         
   | ^^^^^^^^
84 |         assert config.kelly_fraction == 0.75
85 |         assert config.conf_threshold == 0.65
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_config.py:91:1
   |
89 |         assert config.take_profit_factor == 2.5
90 |         assert config.max_position_size == 12000
91 |         
   | ^^^^^^^^
92 |     def test_legacy_parameter_interface(self):
93 |         """Test that legacy parameter interface works correctly."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_config.py:96:1
   |
94 |         config = TradingConfig.from_env("balanced")
95 |         legacy_params = config.get_legacy_params()
96 |         
   | ^^^^^^^^
97 |         # Check that legacy parameter names are available
98 |         assert "KELLY_FRACTION" in legacy_params
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:106:1
    |
104 |         assert "TRAILING_FACTOR" in legacy_params
105 |         assert "BUY_THRESHOLD" in legacy_params
106 |         
    | ^^^^^^^^
107 |         # Check values match config
108 |         assert legacy_params["KELLY_FRACTION"] == config.kelly_fraction
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:111:1
    |
109 |         assert legacy_params["CONF_THRESHOLD"] == config.conf_threshold
110 |         assert legacy_params["CAPITAL_CAP"] == config.capital_cap
111 |         
    | ^^^^^^^^
112 |     def test_bot_mode_integration(self):
113 |         """Test that BotMode class integrates correctly with centralized config."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:117:1
    |
115 |         balanced_mode = BotMode("balanced")
116 |         aggressive_mode = BotMode("aggressive")
117 |         
    | ^^^^^^^^
118 |         # Test that each mode has the correct parameters
119 |         cons_params = conservative_mode.get_config()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:122:1
    |
120 |         bal_params = balanced_mode.get_config()
121 |         agg_params = aggressive_mode.get_config()
122 |         
    | ^^^^^^^^
123 |         # Conservative mode checks
124 |         assert cons_params["KELLY_FRACTION"] == 0.25
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:127:1
    |
125 |         assert cons_params["CONF_THRESHOLD"] == 0.85
126 |         assert cons_params["CONFIRMATION_COUNT"] == 3
127 |         
    | ^^^^^^^^
128 |         # Balanced mode checks
129 |         assert bal_params["KELLY_FRACTION"] == 0.6
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:132:1
    |
130 |         assert bal_params["CONF_THRESHOLD"] == 0.75
131 |         assert bal_params["CONFIRMATION_COUNT"] == 2
132 |         
    | ^^^^^^^^
133 |         # Aggressive mode checks
134 |         assert agg_params["KELLY_FRACTION"] == 0.75
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:137:1
    |
135 |         assert agg_params["CONF_THRESHOLD"] == 0.65
136 |         assert agg_params["CONFIRMATION_COUNT"] == 1
137 |         
    | ^^^^^^^^
138 |     def test_parameter_completeness(self):
139 |         """Test that all required parameters are present in the configuration."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:141:1
    |
139 |         """Test that all required parameters are present in the configuration."""
140 |         config = TradingConfig.from_env("balanced")
141 |         
    | ^^^^^^^^
142 |         # Risk management parameters
143 |         assert hasattr(config, 'max_drawdown_threshold')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:150:1
    |
148 |         assert hasattr(config, 'kelly_fraction')
149 |         assert hasattr(config, 'capital_cap')
150 |         
    | ^^^^^^^^
151 |         # Trading mode parameters
152 |         assert hasattr(config, 'conf_threshold')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:157:1
    |
155 |         assert hasattr(config, 'take_profit_factor')
156 |         assert hasattr(config, 'trailing_factor')
157 |         
    | ^^^^^^^^
158 |         # Signal processing parameters
159 |         assert hasattr(config, 'signal_confirmation_bars')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:163:1
    |
161 |         assert hasattr(config, 'fast_period')
162 |         assert hasattr(config, 'slow_period')
163 |         
    | ^^^^^^^^
164 |         # Execution parameters
165 |         assert hasattr(config, 'limit_order_slippage')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:170:1
    |
168 |         assert hasattr(config, 'pov_slice_pct')
169 |         assert hasattr(config, 'order_timeout_seconds')
170 |         
    | ^^^^^^^^
171 |     def test_to_dict_conversion(self):
172 |         """Test that configuration can be converted to dictionary."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:175:1
    |
173 |         config = TradingConfig.from_env("balanced")
174 |         config_dict = config.to_dict()
175 |         
    | ^^^^^^^^
176 |         # Check that dictionary contains expected keys
177 |         assert "kelly_fraction" in config_dict
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:182:1
    |
180 |         assert "capital_cap" in config_dict
181 |         assert "max_position_size" in config_dict
182 |         
    | ^^^^^^^^
183 |         # Check that values are correct
184 |         assert config_dict["kelly_fraction"] == config.kelly_fraction
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:186:1
    |
184 |         assert config_dict["kelly_fraction"] == config.kelly_fraction
185 |         assert config_dict["conf_threshold"] == config.conf_threshold
186 |         
    | ^^^^^^^^
187 |     def test_from_optimization_method(self):
188 |         """Test creating configuration from optimization parameters."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:194:1
    |
192 |             "daily_loss_limit": 0.04,
193 |         }
194 |         
    | ^^^^^^^^
195 |         config = TradingConfig.from_optimization(optimization_params)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:196:1
    |
195 |         config = TradingConfig.from_optimization(optimization_params)
196 |         
    | ^^^^^^^^
197 |         # Check that optimization parameters were applied
198 |         assert config.kelly_fraction == 0.5
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:201:1
    |
199 |         assert config.conf_threshold == 0.8
200 |         assert config.daily_loss_limit == 0.04
201 |         
    | ^^^^^^^^
202 |     def test_environment_variable_override(self):
203 |         """Test that environment variables can override default values."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:207:1
    |
205 |         os.environ["KELLY_FRACTION"] = "0.35"
206 |         os.environ["CONF_THRESHOLD"] = "0.72"
207 |         
    | ^^^^^^^^
208 |         try:
209 |             config = TradingConfig.from_env("balanced")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:210:1
    |
208 |         try:
209 |             config = TradingConfig.from_env("balanced")
210 |             
    | ^^^^^^^^^^^^
211 |             # Check that environment variables were used
212 |             assert config.kelly_fraction == 0.35
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:214:1
    |
212 |             assert config.kelly_fraction == 0.35
213 |             assert config.conf_threshold == 0.72
214 |             
    | ^^^^^^^^^^^^
215 |         finally:
216 |             # Clean up environment variables
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:221:1
    |
219 |             if "CONF_THRESHOLD" in os.environ:
220 |                 del os.environ["CONF_THRESHOLD"]
221 |                 
    | ^^^^^^^^^^^^^^^^
222 |     def test_parameter_ranges(self):
223 |         """Test that parameters are within reasonable ranges."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:226:1
    |
224 |         for mode in ["conservative", "balanced", "aggressive"]:
225 |             config = TradingConfig.from_env(mode)
226 |             
    | ^^^^^^^^^^^^
227 |             # Kelly fraction should be between 0 and 1
228 |             assert 0 <= config.kelly_fraction <= 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:229:1
    |
227 |             # Kelly fraction should be between 0 and 1
228 |             assert 0 <= config.kelly_fraction <= 1
229 |             
    | ^^^^^^^^^^^^
230 |             # Confidence threshold should be between 0 and 1
231 |             assert 0 <= config.conf_threshold <= 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:232:1
    |
230 |             # Confidence threshold should be between 0 and 1
231 |             assert 0 <= config.conf_threshold <= 1
232 |             
    | ^^^^^^^^^^^^
233 |             # Daily loss limit should be between 0 and 1
234 |             assert 0 <= config.daily_loss_limit <= 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:235:1
    |
233 |             # Daily loss limit should be between 0 and 1
234 |             assert 0 <= config.daily_loss_limit <= 1
235 |             
    | ^^^^^^^^^^^^
236 |             # Capital cap should be between 0 and 1
237 |             assert 0 <= config.capital_cap <= 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:238:1
    |
236 |             # Capital cap should be between 0 and 1
237 |             assert 0 <= config.capital_cap <= 1
238 |             
    | ^^^^^^^^^^^^
239 |             # Confirmation count should be positive
240 |             assert config.confirmation_count > 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_config.py:241:1
    |
239 |             # Confirmation count should be positive
240 |             assert config.confirmation_count > 0
241 |             
    | ^^^^^^^^^^^^
242 |             # Position size should be positive
243 |             assert config.max_position_size > 0
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> tests/test_centralized_config.py:253:101
    |
251 |     assert hasattr(cfg, "max_drawdown_threshold"), "TradingConfig missing max_drawdown_threshold"
252 |     assert isinstance(cfg.max_drawdown_threshold, (int, float))
253 |     assert 0 <= cfg.max_drawdown_threshold <= 1, "max_drawdown_threshold should be a fraction (0..1)"
    |                                                                                                     ^
    |

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_centralized_config.py:308:5
    |
306 |   def test_botmode_init_uses_fallback_when_method_missing(monkeypatch):
307 |       """BotMode should not error if config lacks legacy method."""  # AI-AGENT-REF
308 | /     from ai_trading.core import bot_engine
309 | |     from ai_trading.config import management as config
    | |______________________________________________________^
310 |
311 |       class BareCfg(config.TradingConfig):
    |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_centralized_logging_no_duplicates.py:11:5
   |
 9 |   # Mock dependencies if needed for testing
10 |   try:
11 | /     from ai_trading.logging import (
12 | |         setup_logging, 
13 | |         get_logger, 
14 | |         validate_logging_setup,
15 | |         _LOGGING_CONFIGURED,
16 | |         _LOGGING_LOCK
17 | |     )
   | |_____^
18 |       CENTRALIZED_LOGGING_AVAILABLE = True
19 |   except ImportError:
   |
help: Organize imports

W291 [*] Trailing whitespace
  --> tests/test_centralized_logging_no_duplicates.py:12:23
   |
10 | try:
11 |     from ai_trading.logging import (
12 |         setup_logging, 
   |                       ^
13 |         get_logger, 
14 |         validate_logging_setup,
   |
help: Remove trailing whitespace

F401 `ai_trading.logging.get_logger` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_centralized_logging_no_duplicates.py:13:9
   |
11 |     from ai_trading.logging import (
12 |         setup_logging, 
13 |         get_logger, 
   |         ^^^^^^^^^^
14 |         validate_logging_setup,
15 |         _LOGGING_CONFIGURED,
   |
help: Remove unused import

W291 [*] Trailing whitespace
  --> tests/test_centralized_logging_no_duplicates.py:13:20
   |
11 |     from ai_trading.logging import (
12 |         setup_logging, 
13 |         get_logger, 
   |                    ^
14 |         validate_logging_setup,
15 |         _LOGGING_CONFIGURED,
   |
help: Remove trailing whitespace

F401 `ai_trading.logging._LOGGING_CONFIGURED` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_centralized_logging_no_duplicates.py:15:9
   |
13 |         get_logger, 
14 |         validate_logging_setup,
15 |         _LOGGING_CONFIGURED,
   |         ^^^^^^^^^^^^^^^^^^^
16 |         _LOGGING_LOCK
17 |     )
   |
help: Remove unused import

F401 `ai_trading.logging._LOGGING_LOCK` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_centralized_logging_no_duplicates.py:16:9
   |
14 |         validate_logging_setup,
15 |         _LOGGING_CONFIGURED,
16 |         _LOGGING_LOCK
   |         ^^^^^^^^^^^^^
17 |     )
18 |     CENTRALIZED_LOGGING_AVAILABLE = True
   |
help: Remove unused import

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_logging_no_duplicates.py:27:1
   |
25 |     if not CENTRALIZED_LOGGING_AVAILABLE:
26 |         return  # Skip if module not available
27 |     
   | ^^^^
28 |     # Reset logging state
29 |     root_logger = logging.getLogger()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_logging_no_duplicates.py:32:1
   |
30 |     original_handlers = root_logger.handlers.copy()
31 |     root_logger.handlers.clear()
32 |     
   | ^^^^
33 |     try:
34 |         # Mock environment variables for testing
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_centralized_logging_no_duplicates.py:37:41
   |
35 |         with patch.dict(os.environ, {
36 |             'ALPACA_API_KEY': 'test',
37 |             'ALPACA_SECRET_KEY': 'test', 
   |                                         ^
38 |             'ALPACA_BASE_URL': 'https://paper-api.alpaca.markets'
39 |         }):
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_logging_no_duplicates.py:45:1
   |
43 |                 logging_module._LOGGING_CONFIGURED = False
44 |                 logging_module._configured = False
45 |             
   | ^^^^^^^^^^^^
46 |             # First setup
47 |             logger1 = setup_logging(debug=True)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_logging_no_duplicates.py:49:1
   |
47 |             logger1 = setup_logging(debug=True)
48 |             handlers_after_first = len(root_logger.handlers)
49 |             
   | ^^^^^^^^^^^^
50 |             # Second setup (should not add more handlers)
51 |             logger2 = setup_logging(debug=True)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_logging_no_duplicates.py:53:1
   |
51 |             logger2 = setup_logging(debug=True)
52 |             handlers_after_second = len(root_logger.handlers)
53 |             
   | ^^^^^^^^^^^^
54 |             # Third setup with different params (should still not add handlers)
55 |             logger3 = setup_logging(debug=False)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_logging_no_duplicates.py:57:1
   |
55 |             logger3 = setup_logging(debug=False)
56 |             handlers_after_third = len(root_logger.handlers)
57 |             
   | ^^^^^^^^^^^^
58 |             # Validate results
59 |             assert handlers_after_first <= 2, f"Too many handlers after first setup: {handlers_after_first}"
   |
help: Remove whitespace from blank line

E501 Line too long (108 > 100)
  --> tests/test_centralized_logging_no_duplicates.py:59:101
   |
58 |             # Validate results
59 |             assert handlers_after_first <= 2, f"Too many handlers after first setup: {handlers_after_first}"
   |                                                                                                     ^^^^^^^^
60 |             assert handlers_after_first == handlers_after_second, "Handler count changed on second setup"
61 |             assert handlers_after_second == handlers_after_third, "Handler count changed on third setup"
   |

E501 Line too long (105 > 100)
  --> tests/test_centralized_logging_no_duplicates.py:60:101
   |
58 |             # Validate results
59 |             assert handlers_after_first <= 2, f"Too many handlers after first setup: {handlers_after_first}"
60 |             assert handlers_after_first == handlers_after_second, "Handler count changed on second setup"
   |                                                                                                     ^^^^^
61 |             assert handlers_after_second == handlers_after_third, "Handler count changed on third setup"
62 |             assert logger1 is logger2 is logger3, "Different logger instances returned"
   |

E501 Line too long (104 > 100)
  --> tests/test_centralized_logging_no_duplicates.py:61:101
   |
59 |             assert handlers_after_first <= 2, f"Too many handlers after first setup: {handlers_after_first}"
60 |             assert handlers_after_first == handlers_after_second, "Handler count changed on second setup"
61 |             assert handlers_after_second == handlers_after_third, "Handler count changed on third setup"
   |                                                                                                     ^^^^
62 |             assert logger1 is logger2 is logger3, "Different logger instances returned"
   |

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_logging_no_duplicates.py:63:1
   |
61 |             assert handlers_after_second == handlers_after_third, "Handler count changed on third setup"
62 |             assert logger1 is logger2 is logger3, "Different logger instances returned"
63 |             
   | ^^^^^^^^^^^^
64 |             # Validate logging setup
65 |             validation_result = validate_logging_setup()
   |
help: Remove whitespace from blank line

E501 Line too long (110 > 100)
  --> tests/test_centralized_logging_no_duplicates.py:66:101
   |
64 |             # Validate logging setup
65 |             validation_result = validate_logging_setup()
66 |             assert validation_result['validation_passed'], f"Validation failed: {validation_result['issues']}"
   |                                                                                                     ^^^^^^^^^^
67 |             
68 |     finally:
   |

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_logging_no_duplicates.py:67:1
   |
65 |             validation_result = validate_logging_setup()
66 |             assert validation_result['validation_passed'], f"Validation failed: {validation_result['issues']}"
67 |             
   | ^^^^^^^^^^^^
68 |     finally:
69 |         # Restore original handlers
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_logging_no_duplicates.py:75:1
   |
73 | def test_deprecated_modules_removed():
74 |     """Test that deprecated logging modules can no longer be imported."""
75 |     
   | ^^^^
76 |     # Test that logging_config cannot be imported
77 |     try:
   |
help: Remove whitespace from blank line

F401 `logging_config` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_centralized_logging_no_duplicates.py:78:16
   |
76 |     # Test that logging_config cannot be imported
77 |     try:
78 |         import logging_config
   |                ^^^^^^^^^^^^^^
79 |         assert False, "logging_config should not be importable after removal"
80 |     except ImportError:
   |
help: Remove unused import: `logging_config`

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_logging_no_duplicates.py:82:1
   |
80 |     except ImportError:
81 |         pass  # Expected
82 |     
   | ^^^^
83 |     # Test that logger cannot be imported
84 |     try:
   |
help: Remove whitespace from blank line

F401 `logger` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_centralized_logging_no_duplicates.py:85:16
   |
83 |     # Test that logger cannot be imported
84 |     try:
85 |         import logger
   |                ^^^^^^
86 |         assert False, "logger should not be importable after removal"
87 |     except ImportError:
   |
help: Remove unused import: `logger`

W293 [*] Blank line contains whitespace
  --> tests/test_centralized_logging_no_duplicates.py:95:1
   |
93 |     if not CENTRALIZED_LOGGING_AVAILABLE:
94 |         return  # Skip if module not available
95 |         
   | ^^^^^^^^
96 |     # Reset logging state
97 |     root_logger = logging.getLogger()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_logging_no_duplicates.py:100:1
    |
 98 |     original_handlers = root_logger.handlers.copy()
 99 |     root_logger.handlers.clear()
100 |     
    | ^^^^
101 |     results = []
102 |     exceptions = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_logging_no_duplicates.py:103:1
    |
101 |     results = []
102 |     exceptions = []
103 |     
    | ^^^^
104 |     def setup_in_thread():
105 |         try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_logging_no_duplicates.py:115:1
    |
113 |         except Exception as e:
114 |             exceptions.append(e)
115 |     
    | ^^^^
116 |     try:
117 |         # Reset global state
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_logging_no_duplicates.py:122:1
    |
120 |             logging_module._LOGGING_CONFIGURED = False
121 |             logging_module._configured = False
122 |         
    | ^^^^^^^^
123 |         # Start multiple threads
124 |         threads = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_logging_no_duplicates.py:129:1
    |
127 |             threads.append(thread)
128 |             thread.start()
129 |         
    | ^^^^^^^^
130 |         # Wait for all threads
131 |         for thread in threads:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_logging_no_duplicates.py:133:1
    |
131 |         for thread in threads:
132 |             thread.join()
133 |         
    | ^^^^^^^^
134 |         # Verify no exceptions occurred
135 |         assert not exceptions, f"Exceptions in threads: {exceptions}"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_logging_no_duplicates.py:136:1
    |
134 |         # Verify no exceptions occurred
135 |         assert not exceptions, f"Exceptions in threads: {exceptions}"
136 |         
    | ^^^^^^^^
137 |         # Verify all threads saw the same handler count
138 |         assert len(set(results)) == 1, f"Different handler counts: {results}"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_logging_no_duplicates.py:139:1
    |
137 |         # Verify all threads saw the same handler count
138 |         assert len(set(results)) == 1, f"Different handler counts: {results}"
139 |         
    | ^^^^^^^^
140 |         # Verify reasonable handler count
141 |         assert results[0] <= 2, f"Too many handlers: {results[0]}"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_centralized_logging_no_duplicates.py:142:1
    |
140 |         # Verify reasonable handler count
141 |         assert results[0] <= 2, f"Too many handlers: {results[0]}"
142 |         
    | ^^^^^^^^
143 |     finally:
144 |         # Restore original handlers
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_centralized_logging_no_duplicates.py:152:51
    |
150 |     test_deprecated_modules_removed()
151 |     test_centralized_logging_thread_safety()
152 |     print("All centralized logging tests passed!")
    |                                                   ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_config_deadlock_fix.py:3:1
  |
1 |   """Tests for configuration validation deadlock fix."""
2 |
3 | / import threading
4 | | import time
5 | | import os
6 | | import pytest
7 | | from unittest.mock import patch
8 | |
9 | | import ai_trading.config as config
  | |__________________________________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_config_deadlock_fix.py:15:1
   |
13 |     """Test that basic validation operations complete without hanging."""
14 |     start_time = time.time()
15 |     
   | ^^^^
16 |     # This should complete quickly regardless of environment state
17 |     try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_config_deadlock_fix.py:21:1
   |
19 |     except RuntimeError:
20 |         pass  # Expected when env vars missing
21 |     
   | ^^^^
22 |     elapsed = time.time() - start_time
23 |     assert elapsed < 5.0, f"Validation took too long (possible hang): {elapsed:.2f} seconds"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_config_deadlock_fix.py:29:1
   |
27 |     """Test that comprehensive validation completes without hanging."""
28 |     start_time = time.time()
29 |     
   | ^^^^
30 |     try:
31 |         config.validate_env_vars()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_config_deadlock_fix.py:34:1
   |
32 |     except RuntimeError:
33 |         pass  # Expected when env vars missing
34 |     
   | ^^^^
35 |     elapsed = time.time() - start_time
36 |     assert elapsed < 5.0, f"Validation took too long (possible hang): {elapsed:.2f} seconds"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_config_deadlock_fix.py:49:1
   |
47 |         'SCHEDULER_SLEEP_SECONDS': '30'
48 |     }
49 |     
   | ^^^^
50 |     with patch.dict(os.environ, env_vars):
51 |         start_time = time.time()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_config_deadlock_fix.py:52:1
   |
50 |     with patch.dict(os.environ, env_vars):
51 |         start_time = time.time()
52 |         
   | ^^^^^^^^
53 |         # This should not hang - validate_env_vars internally calls validate_environment
54 |         config.validate_env_vars()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_config_deadlock_fix.py:55:1
   |
53 |         # This should not hang - validate_env_vars internally calls validate_environment
54 |         config.validate_env_vars()
55 |         
   | ^^^^^^^^
56 |         elapsed = time.time() - start_time
57 |         assert elapsed < 5.0, f"Nested validation took too long: {elapsed:.2f} seconds"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_config_deadlock_fix.py:63:1
   |
61 |     """Test that concurrent validation calls complete without hanging."""
62 |     results = []
63 |     
   | ^^^^
64 |     def run_validation():
65 |         """Run validation in a thread."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_config_deadlock_fix.py:73:1
   |
71 |         elapsed = time.time() - start_time
72 |         results.append(elapsed)
73 |     
   | ^^^^
74 |     # Start multiple threads
75 |     threads = []
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_config_deadlock_fix.py:80:1
   |
78 |         threads.append(thread)
79 |         thread.start()
80 |     
   | ^^^^
81 |     # Wait for all threads to complete with timeout
82 |     start_time = time.time()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_config_deadlock_fix.py:88:1
   |
86 |         if thread.is_alive():
87 |             pytest.fail("Thread did not complete within timeout - possible hang/deadlock")
88 |     
   | ^^^^
89 |     total_elapsed = time.time() - start_time
90 |     assert total_elapsed < 10.0, f"Total concurrent validation took too long: {total_elapsed:.2f} seconds"
   |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
  --> tests/test_config_deadlock_fix.py:90:101
   |
89 |     total_elapsed = time.time() - start_time
90 |     assert total_elapsed < 10.0, f"Total concurrent validation took too long: {total_elapsed:.2f} seconds"
   |                                                                                                     ^^^^^^
91 |     assert len(results) == 3, f"Not all threads completed: got {len(results)} results"
   |

W293 [*] Blank line contains whitespace
   --> tests/test_config_deadlock_fix.py:99:1
    |
 97 |     assert hasattr(config, '_LOCK_TIMEOUT')
 98 |     assert config._LOCK_TIMEOUT == 30
 99 |     
    | ^^^^
100 |     # Test that the lock tracking functions exist and work
101 |     assert not config._is_lock_held_by_current_thread()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_config_deadlock_fix.py:102:1
    |
100 |     # Test that the lock tracking functions exist and work
101 |     assert not config._is_lock_held_by_current_thread()
102 |     
    | ^^^^
103 |     config._set_lock_held_by_current_thread(True)
104 |     assert config._is_lock_held_by_current_thread()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_config_deadlock_fix.py:105:1
    |
103 |     config._set_lock_held_by_current_thread(True)
104 |     assert config._is_lock_held_by_current_thread()
105 |     
    | ^^^^
106 |     config._set_lock_held_by_current_thread(False)
107 |     assert not config._is_lock_held_by_current_thread()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_config_deadlock_fix.py:119:1
    |
117 |         'SCHEDULER_SLEEP_SECONDS': '30'
118 |     }
119 |     
    | ^^^^
120 |     with patch.dict(os.environ, env_vars):
121 |         start_time = time.time()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_config_deadlock_fix.py:122:1
    |
120 |     with patch.dict(os.environ, env_vars):
121 |         start_time = time.time()
122 |         
    | ^^^^^^^^
123 |         # Both functions should complete successfully
124 |         config.validate_environment()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_config_deadlock_fix.py:126:1
    |
124 |         config.validate_environment()
125 |         config.validate_env_vars()
126 |         
    | ^^^^^^^^
127 |         elapsed = time.time() - start_time
128 |         assert elapsed < 5.0, f"Validation took too long: {elapsed:.2f} seconds"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_config_deadlock_fix.py:134:1
    |
132 |     """Test that importing ai_trading.main doesn't hang."""
133 |     start_time = time.time()
134 |     
    | ^^^^
135 |     try:
136 |         # This is the specific test case mentioned in the problem statement
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_config_deadlock_fix.py:141:1
    |
139 |         # Import might fail due to missing dependencies, but it shouldn't hang
140 |         print(f'Import failed (expected): {e}')
141 |     
    | ^^^^
142 |     elapsed = time.time() - start_time
143 |     assert elapsed < 10.0, f"Import took too long (possible hang): {elapsed:.2f} seconds"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_config_deadlock_fix.py:150:1
    |
148 |     # This simulates the original hanging scenario:
149 |     # validate_env_vars() -> acquire lock -> validate_environment() -> try to acquire same lock
150 |     
    | ^^^^
151 |     start_time = time.time()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_config_deadlock_fix.py:152:1
    |
151 |     start_time = time.time()
152 |     
    | ^^^^
153 |     try:
154 |         # This was the problematic call that would hang
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_config_deadlock_fix.py:158:1
    |
156 |     except RuntimeError:
157 |         pass  # Expected when env vars are missing
158 |     
    | ^^^^
159 |     elapsed = time.time() - start_time
160 |     assert elapsed < 5.0, f"Deadlock scenario took too long: {elapsed:.2f} seconds"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_config_deadlock_fix.py:161:1
    |
159 |     elapsed = time.time() - start_time
160 |     assert elapsed < 5.0, f"Deadlock scenario took too long: {elapsed:.2f} seconds"
161 |     
    | ^^^^
162 |     print(f"Deadlock scenario completed in {elapsed:.3f} seconds - no hang!")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_config_deadlock_fix.py:162:78
    |
160 |     assert elapsed < 5.0, f"Deadlock scenario took too long: {elapsed:.2f} seconds"
161 |     
162 |     print(f"Deadlock scenario completed in {elapsed:.3f} seconds - no hang!")
    |                                                                              ^
    |
help: Add trailing newline

W293 [*] Blank line contains whitespace
  --> tests/test_config_env.py:18:1
   |
16 |         # Clear any existing value
17 |         os.environ.pop("DISABLE_DAILY_RETRAIN", None)
18 |         
   | ^^^^^^^^
19 |         # Test the parsing logic directly
20 |         result = os.getenv("DISABLE_DAILY_RETRAIN", "false").lower() in ("true", "1")
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_config_env.py:72:82
   |
70 |                 # If import fails due to missing env vars, that's expected in test environment
71 |                 # Just ensure our logic works
72 |                 pytest.skip(f"Config import failed as expected in test env: {e}")
   |                                                                                  ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_config_exports.py:3:1
  |
1 | # tests/test_config_exports.py
2 |
3 | import importlib
  | ^^^^^^^^^^^^^^^^
4 |
5 | def test_lazy_exports_resolve():
  |
help: Organize imports

W292 [*] No newline at end of file
  --> tests/test_config_exports.py:16:42
   |
14 |     assert settings is not None
15 |     # A light sanity check on a common field if present; tolerate absence.
16 |     assert hasattr(settings, "__class__")
   |                                          ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_config_validation_max_position_size.py:1:1
  |
1 | / from __future__ import annotations
2 | |
3 | | from types import SimpleNamespace
4 | | import logging
5 | |
6 | | import ai_trading.main as main
  | |______________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_core_init_fix.py:7:1
   |
 5 |   problem statement has been resolved by adding the missing __init__.py file.
 6 |   """
 7 | / import sys
 8 | | import os
   | |_________^
 9 |
10 |   # Add project root to path
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_core_init_fix.py:17:1
   |
15 | class TestCoreModuleInit:
16 |     """Test that the core module __init__.py fix works correctly."""
17 |     
   | ^^^^
18 |     def test_core_module_import(self):
19 |         """Test that ai_trading.core module can be imported."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_core_init_fix.py:23:1
   |
21 |         import ai_trading.core
22 |         assert ai_trading.core is not None
23 |     
   | ^^^^
24 |     def test_core_exports_available(self):
25 |         """Test that all required exports are available from core module."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_core_init_fix.py:27:1
   |
25 |         """Test that all required exports are available from core module."""
26 |         import ai_trading.core as core
27 |         
   | ^^^^^^^^
28 |         # Test that all the exports mentioned in the problem statement exist
29 |         required_exports = [
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_core_init_fix.py:30:66
   |
28 |         # Test that all the exports mentioned in the problem statement exist
29 |         required_exports = [
30 |             'OrderSide', 'OrderType', 'OrderStatus', 'RiskLevel', 
   |                                                                  ^
31 |             'TimeFrame', 'AssetClass', 'TRADING_CONSTANTS'
32 |         ]
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_core_init_fix.py:33:1
   |
31 |             'TimeFrame', 'AssetClass', 'TRADING_CONSTANTS'
32 |         ]
33 |         
   | ^^^^^^^^
34 |         for export in required_exports:
35 |             assert hasattr(core, export), f"Missing export: {export}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_core_init_fix.py:36:1
   |
34 |         for export in required_exports:
35 |             assert hasattr(core, export), f"Missing export: {export}"
36 |     
   | ^^^^
37 |     def test_specific_imports_from_core(self):
38 |         """Test the exact imports that were failing in the problem statement."""
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_core_init_fix.py:40:9
   |
38 |           """Test the exact imports that were failing in the problem statement."""
39 |           # This is the exact import pattern that was failing before the fix
40 | /         from ai_trading.core import (
41 | |             OrderSide, OrderType, OrderStatus, RiskLevel,
42 | |             TRADING_CONSTANTS
43 | |         )
   | |_________^
44 |           
45 |           # Verify the imports work correctly
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_core_init_fix.py:44:1
   |
42 |             TRADING_CONSTANTS
43 |         )
44 |         
   | ^^^^^^^^
45 |         # Verify the imports work correctly
46 |         assert OrderSide.BUY.value == "buy"
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_core_init_fix.py:48:54
   |
46 |         assert OrderSide.BUY.value == "buy"
47 |         assert OrderType.MARKET.value == "market"
48 |         assert OrderStatus.PENDING.value == "pending" 
   |                                                      ^
49 |         assert RiskLevel.CONSERVATIVE.value == "conservative"
50 |         assert isinstance(TRADING_CONSTANTS, dict)
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_core_init_fix.py:52:1
   |
50 |         assert isinstance(TRADING_CONSTANTS, dict)
51 |         assert "MARKET_HOURS" in TRADING_CONSTANTS
52 |     
   | ^^^^
53 |     def test_enum_functionality(self):
54 |         """Test that imported enums work correctly."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_core_init_fix.py:56:1
   |
54 |         """Test that imported enums work correctly."""
55 |         from ai_trading.core import OrderSide, RiskLevel
56 |         
   | ^^^^^^^^
57 |         # Test enum string representation
58 |         assert str(OrderSide.BUY) == "buy"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_core_init_fix.py:60:1
   |
58 |         assert str(OrderSide.BUY) == "buy"
59 |         assert str(OrderSide.SELL) == "sell"
60 |         
   | ^^^^^^^^
61 |         # Test enum properties
62 |         assert RiskLevel.CONSERVATIVE.max_position_size == 0.02
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_core_init_fix.py:65:1
   |
63 |         assert RiskLevel.MODERATE.max_position_size == 0.05
64 |         assert RiskLevel.AGGRESSIVE.max_position_size == 0.10
65 |     
   | ^^^^
66 |     def test_trading_constants_structure(self):
67 |         """Test that TRADING_CONSTANTS has expected structure."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_core_init_fix.py:69:1
   |
67 |         """Test that TRADING_CONSTANTS has expected structure."""
68 |         from ai_trading.core import TRADING_CONSTANTS
69 |         
   | ^^^^^^^^
70 |         # Test required constant groups exist
71 |         required_groups = [
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_core_init_fix.py:73:31
   |
71 |         required_groups = [
72 |             "MARKET_HOURS",
73 |             "RISK_PARAMETERS", 
   |                               ^
74 |             "KELLY_PARAMETERS",
75 |             "EXECUTION_PARAMETERS",
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_core_init_fix.py:80:1
   |
78 |             "SYSTEM_LIMITS"
79 |         ]
80 |         
   | ^^^^^^^^
81 |         for group in required_groups:
82 |             assert group in TRADING_CONSTANTS
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_core_init_fix.py:84:1
   |
82 |             assert group in TRADING_CONSTANTS
83 |             assert isinstance(TRADING_CONSTANTS[group], dict)
84 |     
   | ^^^^
85 |     def test_all_exports_list(self):
86 |         """Test that __all__ list contains expected exports."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_core_init_fix.py:88:1
   |
86 |         """Test that __all__ list contains expected exports."""
87 |         import ai_trading.core as core
88 |         
   | ^^^^^^^^
89 |         expected_all = [
90 |             "OrderSide", "OrderType", "OrderStatus", "RiskLevel", 
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_core_init_fix.py:90:66
   |
89 |         expected_all = [
90 |             "OrderSide", "OrderType", "OrderStatus", "RiskLevel", 
   |                                                                  ^
91 |             "TimeFrame", "AssetClass", "TRADING_CONSTANTS"
92 |         ]
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_core_init_fix.py:93:1
   |
91 |             "TimeFrame", "AssetClass", "TRADING_CONSTANTS"
92 |         ]
93 |         
   | ^^^^^^^^
94 |         assert hasattr(core, '__all__')
95 |         for item in expected_all:
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_core_init_fix.py:96:73
   |
94 |         assert hasattr(core, '__all__')
95 |         for item in expected_all:
96 |             assert item in core.__all__, f"Missing from __all__: {item}"
   |                                                                         ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_coverage_hack.py:1:1
  |
1 | / import pathlib
2 | | import logging
  | |______________^
3 |
4 |   logger = logging.getLogger(__name__)
  |
help: Organize imports

E501 Line too long (103 > 100)
  --> tests/test_coverage_hack.py:16:101
   |
14 |         try:
15 |             lines = len(path.read_text().splitlines())
16 |             # AI-AGENT-REF: Replaced _raise_dynamic_exec_disabled() with safe compile test for coverage
   |                                                                                                     ^^^
17 |             dummy = "\n".join("pass" for _ in range(lines))
18 |             compile(dummy, path.as_posix(), "exec")  # Just compile, don't execute
   |

E501 Line too long (117 > 100)
  --> tests/test_coverage_hack.py:37:101
   |
36 |     if failed_imports:
37 |         fail_msg = "Failed to import critical modules: " + ", ".join(f"{mod} ({err})" for mod, err in failed_imports)
   |                                                                                                     ^^^^^^^^^^^^^^^^^
38 |         logger.error(fail_msg)
39 |         raise ImportError(fail_msg)
   |

E501 Line too long (112 > 100)
  --> tests/test_critical_datetime_fixes.py:95:101
   |
93 |                 if result is None:
94 |                     self.fail(
95 |                         "load_global_signal_performance returned None - possible METALEARN_INVALID_PRICES issue"
   |                                                                                                     ^^^^^^^^^^^^
96 |                     )
97 |                 if isinstance(result, dict) and len(result) == 0:
   |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_fixes.py:11:1
   |
 9 |   """
10 |
11 | / import pandas as pd
12 | | from datetime import datetime, timedelta, timezone
13 | | from unittest.mock import Mock, patch
   | |_____________________________________^
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes.py:19:1
   |
17 |     """Test that RiskEngine has the missing critical methods."""
18 |     from ai_trading.risk.engine import RiskEngine  # AI-AGENT-REF: normalized import
19 |     
   | ^^^^
20 |     # Create risk engine instance
21 |     risk_engine = RiskEngine()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes.py:22:1
   |
20 |     # Create risk engine instance
21 |     risk_engine = RiskEngine()
22 |     
   | ^^^^
23 |     # Test get_current_exposure method
24 |     assert hasattr(risk_engine, 'get_current_exposure')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes.py:27:1
   |
25 |     exposure = risk_engine.get_current_exposure()
26 |     assert isinstance(exposure, dict)
27 |     
   | ^^^^
28 |     # Test max_concurrent_orders method
29 |     assert hasattr(risk_engine, 'max_concurrent_orders')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes.py:33:1
   |
31 |     assert isinstance(max_orders, int)
32 |     assert max_orders > 0
33 |     
   | ^^^^
34 |     # Test max_exposure method
35 |     assert hasattr(risk_engine, 'max_exposure')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes.py:39:1
   |
37 |     assert isinstance(max_exp, float)
38 |     assert 0 <= max_exp <= 1.0
39 |     
   | ^^^^
40 |     # Test order_spacing method
41 |     assert hasattr(risk_engine, 'order_spacing')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes.py:50:1
   |
48 |     """Test that BotContext has alpaca_client property for backward compatibility."""
49 |     from ai_trading.core.bot_engine import BotContext
50 |     
   | ^^^^
51 |     # Create a mock trading client
52 |     mock_api = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes.py:53:1
   |
51 |     # Create a mock trading client
52 |     mock_api = Mock()
53 |     
   | ^^^^
54 |     # Create BotContext instance
55 |     ctx = BotContext(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes.py:76:1
   |
74 |         params={}
75 |     )
76 |     
   | ^^^^
77 |     # Test alpaca_client property exists and returns the api
78 |     assert hasattr(ctx, 'alpaca_client')
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_fixes.py:93:5
   |
91 | def test_data_validation_freshness():
92 |     """Test data validation and staleness detection."""
93 |     from ai_trading.data_validation import check_data_freshness, validate_trading_data, get_stale_symbols
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
94 |     
95 |     # Create test data with different timestamps
   |
help: Organize imports

E501 Line too long (105 > 100)
  --> tests/test_critical_fixes.py:93:101
   |
91 | def test_data_validation_freshness():
92 |     """Test data validation and staleness detection."""
93 |     from ai_trading.data_validation import check_data_freshness, validate_trading_data, get_stale_symbols
   |                                                                                                     ^^^^^
94 |     
95 |     # Create test data with different timestamps
   |

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes.py:94:1
   |
92 |     """Test data validation and staleness detection."""
93 |     from ai_trading.data_validation import check_data_freshness, validate_trading_data, get_stale_symbols
94 |     
   | ^^^^
95 |     # Create test data with different timestamps
96 |     now = datetime.now(timezone.utc)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes.py:97:1
   |
95 |     # Create test data with different timestamps
96 |     now = datetime.now(timezone.utc)
97 |     
   | ^^^^
98 |     # Fresh data (5 minutes old)
99 |     fresh_data = pd.DataFrame({
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:106:1
    |
104 |         'Volume': [1000, 1100, 1200]
105 |     }, index=[now - timedelta(minutes=7), now - timedelta(minutes=6), now - timedelta(minutes=5)])
106 |     
    | ^^^^
107 |     # Stale data (30 minutes old)
108 |     stale_data = pd.DataFrame({
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> tests/test_critical_fixes.py:114:101
    |
112 |         'Close': [100.5, 101.5, 102.5],
113 |         'Volume': [1000, 1100, 1200]
114 |     }, index=[now - timedelta(minutes=32), now - timedelta(minutes=31), now - timedelta(minutes=30)])
    |                                                                                                     ^
115 |     
116 |     # Test freshness check for fresh data
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:115:1
    |
113 |         'Volume': [1000, 1100, 1200]
114 |     }, index=[now - timedelta(minutes=32), now - timedelta(minutes=31), now - timedelta(minutes=30)])
115 |     
    | ^^^^
116 |     # Test freshness check for fresh data
117 |     fresh_result = check_data_freshness(fresh_data, "AAPL", max_staleness_minutes=15)
    |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `True`; use `fresh_result['is_fresh']:` for truth checks
   --> tests/test_critical_fixes.py:118:12
    |
116 |     # Test freshness check for fresh data
117 |     fresh_result = check_data_freshness(fresh_data, "AAPL", max_staleness_minutes=15)
118 |     assert fresh_result['is_fresh'] == True
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
119 |     assert fresh_result['symbol'] == "AAPL"
120 |     assert fresh_result['minutes_stale'] < 15
    |
help: Replace with `fresh_result['is_fresh']`

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:121:1
    |
119 |     assert fresh_result['symbol'] == "AAPL"
120 |     assert fresh_result['minutes_stale'] < 15
121 |     
    | ^^^^
122 |     # Test freshness check for stale data
123 |     stale_result = check_data_freshness(stale_data, "MSFT", max_staleness_minutes=15)
    |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `False`; use `not stale_result['is_fresh']:` for false checks
   --> tests/test_critical_fixes.py:124:12
    |
122 |     # Test freshness check for stale data
123 |     stale_result = check_data_freshness(stale_data, "MSFT", max_staleness_minutes=15)
124 |     assert stale_result['is_fresh'] == False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
125 |     assert stale_result['symbol'] == "MSFT"
126 |     assert stale_result['minutes_stale'] > 15
    |
help: Replace with `not stale_result['is_fresh']`

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:127:1
    |
125 |     assert stale_result['symbol'] == "MSFT"
126 |     assert stale_result['minutes_stale'] > 15
127 |     
    | ^^^^
128 |     # Test batch validation
129 |     test_data = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:133:1
    |
131 |         'MSFT': stale_data
132 |     }
133 |     
    | ^^^^
134 |     validation_results = validate_trading_data(test_data, max_staleness_minutes=15)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:135:1
    |
134 |     validation_results = validate_trading_data(test_data, max_staleness_minutes=15)
135 |     
    | ^^^^
136 |     assert 'AAPL' in validation_results
137 |     assert 'MSFT' in validation_results
    |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `True`; use `validation_results['AAPL']['trading_ready']:` for truth checks
   --> tests/test_critical_fixes.py:138:12
    |
136 |     assert 'AAPL' in validation_results
137 |     assert 'MSFT' in validation_results
138 |     assert validation_results['AAPL']['trading_ready'] == True
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
139 |     assert validation_results['MSFT']['trading_ready'] == False
    |
help: Replace with `validation_results['AAPL']['trading_ready']`

E712 Avoid equality comparisons to `False`; use `not validation_results['MSFT']['trading_ready']:` for false checks
   --> tests/test_critical_fixes.py:139:12
    |
137 |     assert 'MSFT' in validation_results
138 |     assert validation_results['AAPL']['trading_ready'] == True
139 |     assert validation_results['MSFT']['trading_ready'] == False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
140 |     
141 |     # Test stale symbols detection
    |
help: Replace with `not validation_results['MSFT']['trading_ready']`

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:140:1
    |
138 |     assert validation_results['AAPL']['trading_ready'] == True
139 |     assert validation_results['MSFT']['trading_ready'] == False
140 |     
    | ^^^^
141 |     # Test stale symbols detection
142 |     stale_symbols = get_stale_symbols(validation_results)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:150:1
    |
148 |     """Test emergency data validation for critical trades."""
149 |     from ai_trading.data_validation import emergency_data_check
150 |     
    | ^^^^
151 |     now = datetime.now(timezone.utc)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:152:1
    |
151 |     now = datetime.now(timezone.utc)
152 |     
    | ^^^^
153 |     # Valid data
154 |     valid_data = pd.DataFrame({
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_critical_fixes.py:156:33
    |
154 |     valid_data = pd.DataFrame({
155 |         'Open': [100, 101, 102],
156 |         'High': [101, 102, 103], 
    |                                 ^
157 |         'Low': [99, 100, 101],
158 |         'Close': [100.5, 101.5, 102.5],
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:161:1
    |
159 |         'Volume': [1000, 1100, 1200]
160 |     }, index=[now - timedelta(minutes=7), now - timedelta(minutes=6), now - timedelta(minutes=5)])
161 |     
    | ^^^^
162 |     # Empty data
163 |     empty_data = pd.DataFrame()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:164:1
    |
162 |     # Empty data
163 |     empty_data = pd.DataFrame()
164 |     
    | ^^^^
165 |     # Test valid data passes
166 |     assert emergency_data_check(valid_data, "AAPL") == True
    |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `True`; use `emergency_data_check(valid_data, "AAPL"):` for truth checks
   --> tests/test_critical_fixes.py:166:12
    |
165 |     # Test valid data passes
166 |     assert emergency_data_check(valid_data, "AAPL") == True
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
167 |     
168 |     # Test empty data fails
    |
help: Replace with `emergency_data_check(valid_data, "AAPL")`

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:167:1
    |
165 |     # Test valid data passes
166 |     assert emergency_data_check(valid_data, "AAPL") == True
167 |     
    | ^^^^
168 |     # Test empty data fails
169 |     assert emergency_data_check(empty_data, "MSFT") == False
    |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `False`; use `not emergency_data_check(empty_data, "MSFT"):` for false checks
   --> tests/test_critical_fixes.py:169:12
    |
168 |     # Test empty data fails
169 |     assert emergency_data_check(empty_data, "MSFT") == False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: Replace with `not emergency_data_check(empty_data, "MSFT")`

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:175:1
    |
173 |     """Test that RiskEngine properly tracks exposure."""
174 |     from ai_trading.risk.engine import RiskEngine  # AI-AGENT-REF: normalized import
175 |     
    | ^^^^
176 |     risk_engine = RiskEngine()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:177:1
    |
176 |     risk_engine = RiskEngine()
177 |     
    | ^^^^
178 |     # Test initial exposure
179 |     initial_exposure = risk_engine.get_current_exposure()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:181:1
    |
179 |     initial_exposure = risk_engine.get_current_exposure()
180 |     assert isinstance(initial_exposure, dict)
181 |     
    | ^^^^
182 |     # Test exposure updates
183 |     risk_engine.exposure['equity'] = 0.5
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:186:1
    |
184 |     updated_exposure = risk_engine.get_current_exposure()
185 |     assert updated_exposure['equity'] == 0.5
186 |     
    | ^^^^
187 |     # Test max exposure configuration
188 |     max_exp = risk_engine.max_exposure()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:206:1
    |
204 |     """Test that audit module handles permission errors gracefully."""
205 |     from ai_trading.audit import log_trade  # AI-AGENT-REF: canonical import
206 |     
    | ^^^^
207 |     # This test validates that the permission error handling code exists
208 |     # and would be called in case of permission errors
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:209:1
    |
207 |     # This test validates that the permission error handling code exists
208 |     # and would be called in case of permission errors
209 |     
    | ^^^^
210 |     # Test that log_trade function exists and can be called
211 |     # In a real permission error scenario, it would attempt to repair permissions
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:218:1
    |
216 |         # If it fails due to missing dependencies, that's also acceptable for this test
217 |         pass
218 |     
    | ^^^^
219 |     # The important thing is that the permission handling code exists in audit.py
220 |     import ai_trading.audit as audit  # AI-AGENT-REF: canonical import
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_critical_fixes.py:220:5
    |
219 |       # The important thing is that the permission handling code exists in audit.py
220 | /     import ai_trading.audit as audit  # AI-AGENT-REF: canonical import
221 | |     import inspect
    | |__________________^
222 |       
223 |       # Check that the enhanced permission handling code is present
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:222:1
    |
220 |     import ai_trading.audit as audit  # AI-AGENT-REF: canonical import
221 |     import inspect
222 |     
    | ^^^^
223 |     # Check that the enhanced permission handling code is present
224 |     source = inspect.getsource(audit.log_trade)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:232:1
    |
230 |     """Integration test ensuring all risk engine methods work together."""
231 |     from ai_trading.risk.engine import RiskEngine  # AI-AGENT-REF: normalized import
232 |     
    | ^^^^
233 |     risk_engine = RiskEngine()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:234:1
    |
233 |     risk_engine = RiskEngine()
234 |     
    | ^^^^
235 |     # Test that all methods return sensible values
236 |     exposure = risk_engine.get_current_exposure()
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_critical_fixes.py:238:41
    |
236 |     exposure = risk_engine.get_current_exposure()
237 |     max_orders = risk_engine.max_concurrent_orders()
238 |     max_exp = risk_engine.max_exposure() 
    |                                         ^
239 |     spacing = risk_engine.order_spacing()
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:240:1
    |
238 |     max_exp = risk_engine.max_exposure() 
239 |     spacing = risk_engine.order_spacing()
240 |     
    | ^^^^
241 |     assert isinstance(exposure, dict)
242 |     assert isinstance(max_orders, int) and max_orders > 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes.py:245:1
    |
243 |     assert isinstance(max_exp, float) and 0 < max_exp <= 1.0
244 |     assert isinstance(spacing, float) and spacing >= 0
245 |     
    | ^^^^
246 |     # Test exposure tracking
247 |     risk_engine.exposure['test_asset'] = 0.3
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_fixes_focused.py:6:1
   |
 4 |   """
 5 |
 6 | / import unittest
 7 | | import sys
 8 | | import os
 9 | | import csv
10 | | import tempfile
11 | |
12 | | from tests.mocks.critical_fixes_validation_mocks import MockSignal, MockContext
   | |_______________________________________________________________________________^
13 |
14 |   # Set testing environment
   |
help: Organize imports

E501 Line too long (101 > 100)
  --> tests/test_critical_fixes_focused.py:28:101
   |
26 |         # Import modules after setting TESTING flag
27 |         import ai_trading.analysis.sentiment as sentiment
28 |         import ai_trading.strategy_allocator as strategy_allocator  # AI-AGENT-REF: normalized import
   |                                                                                                     ^
29 |         self.sentiment = sentiment
30 |         self.strategy_allocator = strategy_allocator
   |

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_focused.py:51:1
   |
49 |         # P1 Fix: Confidence normalization
50 |         allocator = self.strategy_allocator.StrategyAllocator()
51 |         
   | ^^^^^^^^
52 |         # Create mock signal with out-of-range confidence
53 |         # This would simulate signals with confidence > 1
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_focused.py:60:1
   |
58 |             ]
59 |         }
60 |         
   | ^^^^^^^^
61 |         # Test that allocator handles out-of-range confidence values
62 |         try:
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_critical_fixes_focused.py:66:61
   |
64 |             # Check that any signals returned have confidence in [0,1] range
65 |             for signal in result:
66 |                 self.assertTrue(0 <= signal.confidence <= 1, 
   |                                                             ^
67 |                               f"Signal confidence {signal.confidence} is not in [0,1] range")
68 |             print("✓ Confidence normalization handles out-of-range values")
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_focused.py:88:1
   |
86 |         # We can't easily test the actual fix without mocking orders, but we can verify
87 |         # the _reconcile_partial_fills method exists and has been updated
88 |         
   | ^^^^^^^^
89 |         from ai_trading.execution.engine import ExecutionEngine
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_focused.py:90:1
   |
89 |         from ai_trading.execution.engine import ExecutionEngine
90 |         
   | ^^^^^^^^
91 |         # Create a mock context
92 |         ctx = MockContext()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_focused.py:94:1
   |
92 |         ctx = MockContext()
93 |         engine = ExecutionEngine(ctx)
94 |         
   | ^^^^^^^^
95 |         # Verify the method exists and takes the expected parameters
96 |         self.assertTrue(hasattr(engine, '_reconcile_partial_fills'), 
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_critical_fixes_focused.py:96:69
   |
95 |         # Verify the method exists and takes the expected parameters
96 |         self.assertTrue(hasattr(engine, '_reconcile_partial_fills'), 
   |                                                                     ^
97 |                        "_reconcile_partial_fills method should exist")
98 |         print("✓ Trade execution quantity fix method exists")
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:104:1
    |
102 |         # P2 Fix: Short selling validation
103 |         from ai_trading.execution.engine import ExecutionEngine
104 |         
    | ^^^^^^^^
105 |         ctx = MockContext()
106 |         engine = ExecutionEngine(ctx)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:107:1
    |
105 |         ctx = MockContext()
106 |         engine = ExecutionEngine(ctx)
107 |         
    | ^^^^^^^^
108 |         # Verify the short selling validation method exists
109 |         self.assertTrue(hasattr(engine, '_validate_short_selling'), 
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_critical_fixes_focused.py:109:68
    |
108 |         # Verify the short selling validation method exists
109 |         self.assertTrue(hasattr(engine, '_validate_short_selling'), 
    |                                                                    ^
110 |                        "_validate_short_selling method should exist")
111 |         print("✓ Short selling validation method exists")
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:117:1
    |
115 |     print("Running critical trading bot fixes test suite")
116 |     print("=" * 60)
117 |     
    | ^^^^
118 |     # Create test suite
119 |     suite = unittest.TestSuite()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:121:1
    |
119 |     suite = unittest.TestSuite()
120 |     test_class = TestCriticalFixes
121 |     
    | ^^^^
122 |     # Add specific tests for each critical fix
123 |     suite.addTest(test_class('test_sentiment_circuit_breaker_thresholds'))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:128:1
    |
126 |     suite.addTest(test_class('test_trade_execution_quantity_fix_exists'))
127 |     suite.addTest(test_class('test_short_selling_validation_exists'))
128 |     
    | ^^^^
129 |     # Run tests
130 |     runner = unittest.TextTestRunner(verbosity=2)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:132:1
    |
130 |     runner = unittest.TextTestRunner(verbosity=2)
131 |     result = runner.run(suite)
132 |     
    | ^^^^
133 |     print("=" * 60)
134 |     if result.wasSuccessful():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:141:1
    |
139 |         sys.exit(1)
140 |     print(f"Fixed timestamp format: {result}")
141 |     
    | ^^^^
142 |     # The fix should include 'Z' suffix for RFC3339 compliance
143 |     assert result.endswith('Z'), f"Timestamp {result} should end with 'Z' for RFC3339 compliance"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:149:1
    |
147 | def test_position_sizing_minimum_viable():
148 |     """Test that position sizing provides minimum viable quantities with available cash."""
149 |     
    | ^^^^
150 |     # Simulate the fixed logic from bot_engine.py
151 |     balance = 88000.0  # $88K available cash
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:154:1
    |
152 |     target_weight = 0.002  # Weight above the 0.001 threshold
153 |     current_price = 150.0  # AAPL-like price
154 |     
    | ^^^^
155 |     # Original calculation that resulted in 0
156 |     raw_qty = int(balance * target_weight / current_price)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:158:1
    |
156 |     raw_qty = int(balance * target_weight / current_price)
157 |     print(f"Original qty calculation: {raw_qty}")
158 |     
    | ^^^^
159 |     # Fixed logic - ensure minimum position size when cash available
160 |     if raw_qty <= 0 and balance > 1000 and target_weight > 0.001 and current_price > 0:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:163:1
    |
161 |         raw_qty = max(1, int(1000 / current_price))  # Minimum $1000 position
162 |         print(f"Using minimum position size: {raw_qty} shares")
163 |     
    | ^^^^
164 |     assert raw_qty > 0, f"Should compute positive quantity with ${balance:.0f} cash available"
165 |     assert raw_qty >= 1, "Should have at least 1 share for minimum position"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:181:1
    |
179 |         writer.writerow(['INVALID', 'N/A', '100.00', 'test', 'buy', '1'])
180 |         temp_file = f.name
181 |     
    | ^^^^
182 |     try:
183 |         # Mock pandas to test the price conversion logic
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:192:1
    |
190 |             'qty': [10, 5, 8, 1]
191 |         }
192 |         
    | ^^^^^^^^
193 |         # Simulate the fixed price conversion logic
194 |         import pandas as pd
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:196:1
    |
194 |         import pandas as pd
195 |         df = pd.DataFrame(mock_df_data)
196 |         
    | ^^^^^^^^
197 |         # Test the fixed conversion logic
198 |         df["entry_price"] = pd.to_numeric(df["entry_price"], errors="coerce")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:200:1
    |
198 |         df["entry_price"] = pd.to_numeric(df["entry_price"], errors="coerce")
199 |         df["exit_price"] = pd.to_numeric(df["exit_price"], errors="coerce")
200 |         
    | ^^^^^^^^
201 |         # Remove rows where price conversion failed
202 |         df = df.dropna(subset=["entry_price", "exit_price"])
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:203:1
    |
201 |         # Remove rows where price conversion failed
202 |         df = df.dropna(subset=["entry_price", "exit_price"])
203 |         
    | ^^^^^^^^
204 |         # Validate that we have reasonable price data
205 |         df = df[(df["entry_price"] > 0) & (df["exit_price"] > 0)]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:206:1
    |
204 |         # Validate that we have reasonable price data
205 |         df = df[(df["entry_price"] > 0) & (df["exit_price"] > 0)]
206 |         
    | ^^^^^^^^
207 |         print(f"Converted dataframe: {len(df)} valid rows")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:208:1
    |
207 |         print(f"Converted dataframe: {len(df)} valid rows")
208 |         
    | ^^^^^^^^
209 |         # Should have 3 valid rows (INVALID row should be filtered out)
210 |         assert len(df) == 3, f"Should have 3 valid price rows, got {len(df)}"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:213:1
    |
211 |         assert all(df["entry_price"] > 0), "All entry prices should be positive"
212 |         assert all(df["exit_price"] > 0), "All exit prices should be positive"
213 |         
    | ^^^^^^^^
214 |     finally:
215 |         os.unlink(temp_file)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:220:1
    |
218 | def test_liquidity_minimum_position():
219 |     """Test that low liquidity still allows minimum positions with sufficient cash."""
220 |     
    | ^^^^
221 |     # Simulate the fixed liquidity logic from calculate_entry_size
222 |     cash = 88000.0  # $88K available
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:225:1
    |
223 |     price = 150.0
224 |     liquidity_factor = 0.1  # Very low liquidity (< 0.2 threshold)
225 |     
    | ^^^^
226 |     # Original logic would return 0
227 |     original_result = 0 if liquidity_factor < 0.2 else 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:228:1
    |
226 |     # Original logic would return 0
227 |     original_result = 0 if liquidity_factor < 0.2 else 1
228 |     
    | ^^^^
229 |     # Fixed logic - allow minimum position with sufficient cash
230 |     if liquidity_factor < 0.2:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:238:1
    |
236 |     else:
237 |         result = 1
238 |     
    | ^^^^
239 |     print(f"Liquidity factor: {liquidity_factor}, Cash: ${cash:.0f}, Result: {result}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:240:1
    |
239 |     print(f"Liquidity factor: {liquidity_factor}, Cash: ${cash:.0f}, Result: {result}")
240 |     
    | ^^^^
241 |     assert result > 0, "Should allow minimum position even with low liquidity when cash > $5000"
242 |     assert result >= 1, "Should have at least 1 share minimum"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:247:1
    |
245 | def test_stale_data_bypass_startup():
246 |     """Test that stale data bypass works during initial deployment."""
247 |     
    | ^^^^
248 |     # Simulate startup environment with stale data bypass enabled
249 |     stale_symbols = ["NFLX", "META", "TSLA", "MSFT", "AMD"]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:251:1
    |
249 |     stale_symbols = ["NFLX", "META", "TSLA", "MSFT", "AMD"]
250 |     allow_stale_on_startup = True  # Default behavior
251 |     
    | ^^^^
252 |     # Test that bypass allows trading to proceed
253 |     if stale_symbols and allow_stale_on_startup:
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> tests/test_critical_fixes_focused.py:255:101
    |
253 |     if stale_symbols and allow_stale_on_startup:
254 |         trading_allowed = True
255 |         print(f"BYPASS_STALE_DATA_STARTUP: Allowing trading with {len(stale_symbols)} stale symbols")
    |                                                                                                     ^
256 |     else:
257 |         trading_allowed = False
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:258:1
    |
256 |     else:
257 |         trading_allowed = False
258 |     
    | ^^^^
259 |     assert trading_allowed, "Should allow trading with stale data bypass enabled on startup"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:260:1
    |
259 |     assert trading_allowed, "Should allow trading with stale data bypass enabled on startup"
260 |     
    | ^^^^
261 |     # Test that bypass can be disabled
262 |     allow_stale_on_startup = False
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:267:1
    |
265 |     else:
266 |         trading_allowed = True
267 |         
    | ^^^^^^^^
268 |     assert not trading_allowed, "Should block trading when stale data bypass is disabled"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:274:1
    |
272 |     """Test that the actual API timestamp format is RFC3339 compliant."""
273 |     from datetime import datetime, timezone
274 |     
    | ^^^^
275 |     # Test the exact format used in data_fetcher.py
276 |     start_dt = datetime(2025, 1, 4, 16, 23, 0, tzinfo=timezone.utc)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:278:1
    |
276 |     start_dt = datetime(2025, 1, 4, 16, 23, 0, tzinfo=timezone.utc)
277 |     end_dt = datetime(2025, 1, 4, 16, 30, 0, tzinfo=timezone.utc)
278 |     
    | ^^^^
279 |     # Apply the fix from data_fetcher.py
280 |     start_param = start_dt.isoformat().replace('+00:00', 'Z')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:282:1
    |
280 |     start_param = start_dt.isoformat().replace('+00:00', 'Z')
281 |     end_param = end_dt.isoformat().replace('+00:00', 'Z')
282 |     
    | ^^^^
283 |     print(f"API start param: {start_param}")
284 |     print(f"API end param: {end_param}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_focused.py:285:1
    |
283 |     print(f"API start param: {start_param}")
284 |     print(f"API end param: {end_param}")
285 |     
    | ^^^^
286 |     # Verify RFC3339 compliance
287 |     assert start_param.endswith('Z'), "Start timestamp should end with 'Z'"
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_critical_fixes_focused.py:300:44
    |
298 |     test_stale_data_bypass_startup()
299 |     test_rfc3339_timestamp_api_format()
300 |     print("All critical fix tests passed!")
    |                                            ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_fixes_implementation.py:7:1
   |
 5 |   """
 6 |
 7 | / import pandas as pd
 8 | | import threading
 9 | | from unittest.mock import Mock, patch
10 | | import sys
11 | | import os
   | |_________^
12 |
13 |   # Set up test environment variables first
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_fixes_implementation.py:28:5
   |
26 |   def test_metrics_division_by_zero_protection():
27 |       """Test metrics module handles division by zero properly."""
28 | /     from ai_trading.metrics import (
29 | |         compute_basic_metrics,
30 | |         safe_divide,
31 | |         calculate_atr,
32 | |     )
   | |_____^
33 |       
34 |       # Test with empty data
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_implementation.py:33:1
   |
31 |         calculate_atr,
32 |     )
33 |     
   | ^^^^
34 |     # Test with empty data
35 |     empty_df = pd.DataFrame()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_implementation.py:38:1
   |
36 |     result = compute_basic_metrics(empty_df)
37 |     assert result == {"sharpe": 0.0, "max_drawdown": 0.0}
38 |     
   | ^^^^
39 |     # Test with zero standard deviation
40 |     zero_std_df = pd.DataFrame({"return": [0.0, 0.0, 0.0, 0.0]})
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_implementation.py:43:1
   |
41 |     result = compute_basic_metrics(zero_std_df)
42 |     assert result["sharpe"] == 0.0
43 |     
   | ^^^^
44 |     # Test safe_divide function
45 |     assert safe_divide(10, 0) == 0.0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_implementation.py:48:1
   |
46 |     assert safe_divide(10, 2) == 5.0
47 |     assert safe_divide(10, 0, default=99) == 99
48 |     
   | ^^^^
49 |     # Test ATR with edge cases
50 |     edge_case_df = pd.DataFrame({
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_critical_fixes_implementation.py:52:35
   |
50 |     edge_case_df = pd.DataFrame({
51 |         'high': [1e-8, 1e-8, 1e-8],
52 |         'low': [1e-8, 1e-8, 1e-8], 
   |                                   ^
53 |         'close': [1e-8, 1e-8, 1e-8]
54 |     })
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_implementation.py:63:1
   |
61 |     """Test algorithm optimizer thread safety."""
62 |     from ai_trading.algorithm_optimizer import AlgorithmOptimizer
63 |     
   | ^^^^
64 |     optimizer = AlgorithmOptimizer()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_implementation.py:65:1
   |
64 |     optimizer = AlgorithmOptimizer()
65 |     
   | ^^^^
66 |     # Test concurrent access to kelly fraction calculation
67 |     results = []
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_implementation.py:69:1
   |
67 |     results = []
68 |     errors = []
69 |     
   | ^^^^
70 |     def calculate_concurrently():
71 |         try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_implementation.py:78:1
   |
76 |         except Exception as e:
77 |             errors.append(e)
78 |     
   | ^^^^
79 |     # Run multiple threads
80 |     threads = []
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_implementation.py:85:1
   |
83 |         threads.append(thread)
84 |         thread.start()
85 |     
   | ^^^^
86 |     for thread in threads:
87 |         thread.join()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_implementation.py:88:1
   |
86 |     for thread in threads:
87 |         thread.join()
88 |     
   | ^^^^
89 |     # Should have results from all threads without errors
90 |     assert len(errors) == 0, f"Thread safety errors: {errors}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:98:1
    |
 96 |     # Mock the imports to avoid external dependencies
 97 |     import ai_trading.predict as predict
 98 |     
    | ^^^^
 99 |     # Test cache bounds
100 |     original_cache = predict._sentiment_cache
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:101:1
    |
 99 |     # Test cache bounds
100 |     original_cache = predict._sentiment_cache
101 |     
    | ^^^^
102 |     # If TTLCache is available, test it
103 |     if predict._CACHETOOLS_AVAILABLE:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:107:1
    |
105 |         for i in range(2000):  # More than maxsize of 1000
106 |             predict._sentiment_cache[f"symbol_{i}"] = 0.5
107 |         
    | ^^^^^^^^
108 |         # Cache should not exceed maxsize
109 |         assert len(predict._sentiment_cache) <= 1000
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:120:1
    |
118 |                     mock_response.raise_for_status.return_value = None
119 |                     mock_get.return_value = mock_response
120 |                     
    | ^^^^^^^^^^^^^^^^^^^^
121 |                     # This should trigger cache cleanup when limit is reached
122 |                     predict.fetch_sentiment(f"TEST{i}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:123:1
    |
121 |                     # This should trigger cache cleanup when limit is reached
122 |                     predict.fetch_sentiment(f"TEST{i}")
123 |         
    | ^^^^^^^^
124 |         # Cache should be bounded
125 |         assert len(predict._sentiment_cache) <= 1000
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:132:1
    |
130 |     sys.path.append('ai_trading')
131 |     from ai_trading.indicator_manager import CircularBuffer
132 |     
    | ^^^^
133 |     # Test circular buffer bounds
134 |     buffer = CircularBuffer(maxsize=100, dtype=float)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:135:1
    |
133 |     # Test circular buffer bounds
134 |     buffer = CircularBuffer(maxsize=100, dtype=float)
135 |     
    | ^^^^
136 |     # Fill beyond capacity
137 |     for i in range(200):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:139:1
    |
137 |     for i in range(200):
138 |         buffer.append(float(i))
139 |     
    | ^^^^
140 |     # Should only contain last 100 items
141 |     assert buffer.size() == 100
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_critical_fixes_implementation.py:151:5
    |
149 |       """Test incremental indicator calculations."""
150 |       sys.path.append('ai_trading')
151 | /     from ai_trading.indicator_manager import (
152 | |         IncrementalSMA,
153 | |         IncrementalEMA,
154 | |         IncrementalRSI,
155 | |     )
    | |_____^
156 |       
157 |       # Test SMA
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:156:1
    |
154 |         IncrementalRSI,
155 |     )
156 |     
    | ^^^^
157 |     # Test SMA
158 |     sma = IncrementalSMA(5, "SMA_5")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:159:1
    |
157 |     # Test SMA
158 |     sma = IncrementalSMA(5, "SMA_5")
159 |     
    | ^^^^
160 |     # Not enough data yet
161 |     assert sma.update(10.0) is None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:165:1
    |
163 |     assert sma.update(12.0) is None
164 |     assert sma.update(13.0) is None
165 |     
    | ^^^^
166 |     # Now should calculate
167 |     result = sma.update(14.0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:170:1
    |
168 |     assert result is not None
169 |     assert abs(result - 12.0) < 0.001  # Mean of 10,11,12,13,14 is 12
170 |     
    | ^^^^
171 |     # Test EMA
172 |     ema = IncrementalEMA(5, "EMA_5")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:175:1
    |
173 |     for value in [10.0, 11.0, 12.0, 13.0, 14.0]:
174 |         ema.update(value)
175 |     
    | ^^^^
176 |     assert ema.is_initialized
177 |     assert ema.last_value > 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:178:1
    |
176 |     assert ema.is_initialized
177 |     assert ema.last_value > 0
178 |     
    | ^^^^
179 |     # Test RSI
180 |     rsi = IncrementalRSI(5, "RSI_5")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:182:1
    |
180 |     rsi = IncrementalRSI(5, "RSI_5")
181 |     test_data = [10.0, 11.0, 10.5, 12.0, 11.5, 13.0, 12.5, 14.0]
182 |     
    | ^^^^
183 |     for value in test_data:
184 |         result = rsi.update(value)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:185:1
    |
183 |     for value in test_data:
184 |         result = rsi.update(value)
185 |     
    | ^^^^
186 |     assert rsi.is_initialized
187 |     assert 0 <= rsi.last_value <= 100
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:194:1
    |
192 |     sys.path.append('ai_trading')
193 |     from ai_trading.data_validation import MarketDataValidator, ValidationSeverity
194 |     
    | ^^^^
195 |     validator = MarketDataValidator()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:196:1
    |
195 |     validator = MarketDataValidator()
196 |     
    | ^^^^
197 |     # Test valid data with proper timestamps
198 |     valid_data = pd.DataFrame({
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:205:1
    |
203 |         'volume': [1000, 1100, 1200]
204 |     }, index=pd.date_range('2024-01-01', periods=3, freq='1min', tz='UTC'))
205 |     
    | ^^^^
206 |     result = validator.validate_ohlc_data(valid_data, "TEST")
207 |     # Don't assert valid since data freshness may fail, just check that it runs
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:209:1
    |
207 |     # Don't assert valid since data freshness may fail, just check that it runs
208 |     assert result.data_quality_score >= 0.0
209 |     
    | ^^^^
210 |     # Test invalid data (OHLC relationship violations)
211 |     invalid_data = pd.DataFrame({
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:218:1
    |
216 |         'volume': [1000, 1100, 1200]
217 |     }, index=pd.date_range('2024-01-01', periods=3, freq='1min', tz='UTC'))
218 |     
    | ^^^^
219 |     result = validator.validate_ohlc_data(invalid_data, "TEST")
220 |     assert not result.is_valid  # Should be invalid due to OHLC violations
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:228:1
    |
226 |     sys.path.append('ai_trading')
227 |     from security import mask_sensitive_data
228 |     
    | ^^^^
229 |     # Test data masking
230 |     sensitive_data = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:236:1
    |
234 |         'normal_field': 'normal_value'
235 |     }
236 |     
    | ^^^^
237 |     masked = mask_sensitive_data(sensitive_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:238:1
    |
237 |     masked = mask_sensitive_data(sensitive_data)
238 |     
    | ^^^^
239 |     # API key should be masked
240 |     assert 'FAKE_TEST_API_KEY_NOT_REAL_12345' not in str(masked)
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_critical_fixes_implementation.py:254:5
    |
252 |     """Test dependency injection container."""
253 |     sys.path.append('ai_trading')
254 |     from core.interfaces import SimpleDependencyContainer, IConfigManager
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
255 |     
256 |     container = SimpleDependencyContainer()
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:255:1
    |
253 |     sys.path.append('ai_trading')
254 |     from core.interfaces import SimpleDependencyContainer, IConfigManager
255 |     
    | ^^^^
256 |     container = SimpleDependencyContainer()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:257:1
    |
256 |     container = SimpleDependencyContainer()
257 |     
    | ^^^^
258 |     # Mock implementation
259 |     # Register implementation
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:261:1
    |
259 |     # Register implementation
260 |     container.register(IConfigManager, MockConfigManager)
261 |     
    | ^^^^
262 |     # Resolve implementation
263 |     config_manager = container.resolve(IConfigManager)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:266:1
    |
264 |     assert isinstance(config_manager, MockConfigManager)
265 |     assert config_manager.get("test") == "mock_test"
266 |     
    | ^^^^
267 |     # Test singleton
268 |     container.register(IConfigManager, MockConfigManager, singleton=True)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:278:1
    |
276 |     sys.path.append('ai_trading')
277 |     from indicator_manager import IndicatorManager, IndicatorType
278 |     
    | ^^^^
279 |     manager = IndicatorManager()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:280:1
    |
279 |     manager = IndicatorManager()
280 |     
    | ^^^^
281 |     # Create indicators
282 |     sma_id = manager.create_indicator(IndicatorType.SIMPLE_MOVING_AVERAGE, "TEST", 5)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:284:1
    |
282 |     sma_id = manager.create_indicator(IndicatorType.SIMPLE_MOVING_AVERAGE, "TEST", 5)
283 |     ema_id = manager.create_indicator(IndicatorType.EXPONENTIAL_MOVING_AVERAGE, "TEST", 5)
284 |     
    | ^^^^
285 |     # Update with same data multiple times (should hit cache)
286 |     test_values = [10.0, 11.0, 12.0, 13.0, 14.0, 15.0]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:287:1
    |
285 |     # Update with same data multiple times (should hit cache)
286 |     test_values = [10.0, 11.0, 12.0, 13.0, 14.0, 15.0]
287 |     
    | ^^^^
288 |     for value in test_values:
289 |         manager.update_indicator(sma_id, value)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:291:1
    |
289 |         manager.update_indicator(sma_id, value)
290 |         manager.update_indicator(ema_id, value)
291 |     
    | ^^^^
292 |     # Check performance stats
293 |     stats = manager.get_performance_stats()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:296:1
    |
294 |     assert stats['total_indicators'] == 2
295 |     assert stats['total_calculations'] > 0
296 |     
    | ^^^^
297 |     # Test caching works
298 |     assert stats['cache_hits'] >= 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:305:1
    |
303 |     # Run tests
304 |     print("Running critical fixes tests")
305 |     
    | ^^^^
306 |     test_metrics_division_by_zero_protection()
307 |     print("✅ Division by zero protection tests passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:308:1
    |
306 |     test_metrics_division_by_zero_protection()
307 |     print("✅ Division by zero protection tests passed")
308 |     
    | ^^^^
309 |     test_algorithm_optimizer_thread_safety()
310 |     print("✅ Thread safety tests passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:311:1
    |
309 |     test_algorithm_optimizer_thread_safety()
310 |     print("✅ Thread safety tests passed")
311 |     
    | ^^^^
312 |     test_sentiment_cache_memory_leak_prevention()
313 |     print("✅ Memory leak prevention tests passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:314:1
    |
312 |     test_sentiment_cache_memory_leak_prevention()
313 |     print("✅ Memory leak prevention tests passed")
314 |     
    | ^^^^
315 |     test_circular_buffer_memory_efficiency()
316 |     print("✅ Circular buffer tests passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:317:1
    |
315 |     test_circular_buffer_memory_efficiency()
316 |     print("✅ Circular buffer tests passed")
317 |     
    | ^^^^
318 |     test_incremental_indicators()
319 |     print("✅ Incremental indicators tests passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:320:1
    |
318 |     test_incremental_indicators()
319 |     print("✅ Incremental indicators tests passed")
320 |     
    | ^^^^
321 |     test_market_data_validation()
322 |     print("✅ Market data validation tests passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:323:1
    |
321 |     test_market_data_validation()
322 |     print("✅ Market data validation tests passed")
323 |     
    | ^^^^
324 |     test_security_manager()
325 |     print("✅ Security manager tests passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:326:1
    |
324 |     test_security_manager()
325 |     print("✅ Security manager tests passed")
326 |     
    | ^^^^
327 |     test_configuration_validation()
328 |     print("✅ Configuration validation tests passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:329:1
    |
327 |     test_configuration_validation()
328 |     print("✅ Configuration validation tests passed")
329 |     
    | ^^^^
330 |     test_dependency_injection()
331 |     print("✅ Dependency injection tests passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:332:1
    |
330 |     test_dependency_injection()
331 |     print("✅ Dependency injection tests passed")
332 |     
    | ^^^^
333 |     test_performance_optimizations()
334 |     print("✅ Performance optimization tests passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_implementation.py:335:1
    |
333 |     test_performance_optimizations()
334 |     print("✅ Performance optimization tests passed")
335 |     
    | ^^^^
336 |     print("\n🎉 All critical fixes tests passed successfully!")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_critical_fixes_implementation.py:336:63
    |
334 |     print("✅ Performance optimization tests passed")
335 |     
336 |     print("\n🎉 All critical fixes tests passed successfully!")
    |                                                                ^
    |
help: Add trailing newline

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_simple.py:12:1
   |
10 |     """Test that timestamps include proper timezone information for RFC3339 compliance."""
11 |     test_dt = datetime(2025, 1, 4, 16, 23, 0, tzinfo=timezone.utc)
12 |     
   | ^^^^
13 |     # Test the fixed timestamp format
14 |     result = test_dt.isoformat().replace('+00:00', 'Z')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_simple.py:15:1
   |
13 |     # Test the fixed timestamp format
14 |     result = test_dt.isoformat().replace('+00:00', 'Z')
15 |     
   | ^^^^
16 |     print(f"Fixed timestamp format: {result}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_simple.py:17:1
   |
16 |     print(f"Fixed timestamp format: {result}")
17 |     
   | ^^^^
18 |     # The fix should include 'Z' suffix for RFC3339 compliance
19 |     assert result.endswith('Z'), f"Timestamp {result} should end with 'Z' for RFC3339 compliance"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_simple.py:26:1
   |
24 | def test_position_sizing_minimum_viable():
25 |     """Test that position sizing provides minimum viable quantities with available cash."""
26 |     
   | ^^^^
27 |     # Simulate the fixed logic from bot_engine.py
28 |     balance = 88000.0  # $88K available cash
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_simple.py:31:1
   |
29 |     target_weight = 0.002  # Weight above the 0.001 threshold
30 |     current_price = 150.0  # AAPL-like price
31 |     
   | ^^^^
32 |     # Original calculation that resulted in 0
33 |     raw_qty = int(balance * target_weight / current_price)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_simple.py:35:1
   |
33 |     raw_qty = int(balance * target_weight / current_price)
34 |     print(f"Original qty calculation: {raw_qty}")
35 |     
   | ^^^^
36 |     # Fixed logic - ensure minimum position size when cash available
37 |     if raw_qty <= 0 and balance > 1000 and target_weight > 0.001 and current_price > 0:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_simple.py:40:1
   |
38 |         raw_qty = max(1, int(1000 / current_price))  # Minimum $1000 position
39 |         print(f"Using minimum position size: {raw_qty} shares")
40 |     
   | ^^^^
41 |     assert raw_qty > 0, f"Should compute positive quantity with ${balance:.0f} cash available"
42 |     assert raw_qty >= 1, "Should have at least 1 share for minimum position"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_simple.py:48:1
   |
46 | def test_meta_learning_price_conversion():
47 |     """Test meta learning properly converts string prices to numeric."""
48 |     
   | ^^^^
49 |     # Simulate the fixed price conversion logic
50 |     test_data = [
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_simple.py:56:1
   |
54 |         {'entry_price': 'N/A', 'exit_price': '100.00'},    # Invalid entry price
55 |     ]
56 |     
   | ^^^^
57 |     valid_rows = []
58 |     for row in test_data:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_simple.py:63:1
   |
61 |             entry_str = str(row['entry_price'])
62 |             exit_str = str(row['exit_price'])
63 |             
   | ^^^^^^^^^^^^
64 |             # Check if string represents a valid float
65 |             if entry_str.replace('.', '').replace('-', '').isdigit() and exit_str.replace('.', '').replace('-', '').isdigit():
   |
help: Remove whitespace from blank line

E501 Line too long (126 > 100)
  --> tests/test_critical_fixes_simple.py:65:101
   |
64 |             # Check if string represents a valid float
65 |             if entry_str.replace('.', '').replace('-', '').isdigit() and exit_str.replace('.', '').replace('-', '').isdigit():
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
66 |                 entry_price = float(entry_str)
67 |                 exit_price = float(exit_str)
   |

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_simple.py:68:1
   |
66 |                 entry_price = float(entry_str)
67 |                 exit_price = float(exit_str)
68 |                 
   | ^^^^^^^^^^^^^^^^
69 |                 if entry_price > 0 and exit_price > 0:
70 |                     valid_rows.append({'entry_price': entry_price, 'exit_price': exit_price})
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_simple.py:73:1
   |
71 |         except (ValueError, TypeError):
72 |             continue  # Skip invalid rows
73 |     
   | ^^^^
74 |     print(f"Converted data: {len(valid_rows)} valid rows from {len(test_data)} total")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_simple.py:75:1
   |
74 |     print(f"Converted data: {len(valid_rows)} valid rows from {len(test_data)} total")
75 |     
   | ^^^^
76 |     # Should have 3 valid rows (invalid row should be filtered out)
77 |     assert len(valid_rows) == 3, f"Should have 3 valid price rows, got {len(valid_rows)}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_simple.py:85:1
   |
83 | def test_liquidity_minimum_position():
84 |     """Test that low liquidity still allows minimum positions with sufficient cash."""
85 |     
   | ^^^^
86 |     # Simulate the fixed liquidity logic from calculate_entry_size
87 |     cash = 88000.0  # $88K available
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_fixes_simple.py:90:1
   |
88 |     price = 150.0
89 |     liquidity_factor = 0.1  # Very low liquidity (< 0.2 threshold)
90 |     
   | ^^^^
91 |     # Fixed logic - allow minimum position with sufficient cash
92 |     if liquidity_factor < 0.2:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_simple.py:100:1
    |
 98 |     else:
 99 |         result = 1
100 |     
    | ^^^^
101 |     print(f"Liquidity factor: {liquidity_factor}, Cash: ${cash:.0f}, Result: {result}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_simple.py:102:1
    |
101 |     print(f"Liquidity factor: {liquidity_factor}, Cash: ${cash:.0f}, Result: {result}")
102 |     
    | ^^^^
103 |     assert result > 0, "Should allow minimum position even with low liquidity when cash > $5000"
104 |     assert result >= 1, "Should have at least 1 share minimum"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_simple.py:110:1
    |
108 | def test_stale_data_bypass_startup():
109 |     """Test that stale data bypass works during initial deployment."""
110 |     
    | ^^^^
111 |     # Simulate startup environment with stale data bypass enabled
112 |     stale_symbols = ["NFLX", "META", "TSLA", "MSFT", "AMD"]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_simple.py:114:1
    |
112 |     stale_symbols = ["NFLX", "META", "TSLA", "MSFT", "AMD"]
113 |     allow_stale_on_startup = True  # Default behavior
114 |     
    | ^^^^
115 |     # Test that bypass allows trading to proceed
116 |     if stale_symbols and allow_stale_on_startup:
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> tests/test_critical_fixes_simple.py:118:101
    |
116 |     if stale_symbols and allow_stale_on_startup:
117 |         trading_allowed = True
118 |         print(f"BYPASS_STALE_DATA_STARTUP: Allowing trading with {len(stale_symbols)} stale symbols")
    |                                                                                                     ^
119 |     else:
120 |         trading_allowed = False
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_simple.py:121:1
    |
119 |     else:
120 |         trading_allowed = False
121 |     
    | ^^^^
122 |     assert trading_allowed, "Should allow trading with stale data bypass enabled on startup"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_simple.py:123:1
    |
122 |     assert trading_allowed, "Should allow trading with stale data bypass enabled on startup"
123 |     
    | ^^^^
124 |     # Test that bypass can be disabled
125 |     allow_stale_on_startup = False
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_simple.py:130:1
    |
128 |     else:
129 |         trading_allowed = True
130 |         
    | ^^^^^^^^
131 |     assert not trading_allowed, "Should block trading when stale data bypass is disabled"
132 |     print("✓ Stale data bypass test passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_simple.py:139:1
    |
137 |     start_dt = datetime(2025, 1, 4, 16, 23, 0, tzinfo=timezone.utc)
138 |     end_dt = datetime(2025, 1, 4, 16, 30, 0, tzinfo=timezone.utc)
139 |     
    | ^^^^
140 |     # Apply the fix from data_fetcher.py
141 |     start_param = start_dt.isoformat().replace('+00:00', 'Z')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_simple.py:143:1
    |
141 |     start_param = start_dt.isoformat().replace('+00:00', 'Z')
142 |     end_param = end_dt.isoformat().replace('+00:00', 'Z')
143 |     
    | ^^^^
144 |     print(f"API start param: {start_param}")
145 |     print(f"API end param: {end_param}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_simple.py:146:1
    |
144 |     print(f"API start param: {start_param}")
145 |     print(f"API end param: {end_param}")
146 |     
    | ^^^^
147 |     # Verify RFC3339 compliance
148 |     assert start_param.endswith('Z'), "Start timestamp should end with 'Z'"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_simple.py:157:1
    |
155 | if __name__ == "__main__":
156 |     print("Running critical trading bot fix tests\n")
157 |     
    | ^^^^
158 |     test_timestamp_format_includes_timezone()
159 |     test_position_sizing_minimum_viable()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_fixes_simple.py:164:1
    |
162 |     test_stale_data_bypass_startup()
163 |     test_rfc3339_timestamp_api_format()
164 |     
    | ^^^^
165 |     print("\n🎉 All critical fix tests passed!")
166 |     print("\nFixed issues:")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_critical_fixes_simple.py:171:59
    |
169 |     print("3. ✓ Meta learning price data type conversion")
170 |     print("4. ✓ Liquidity minimum position logic")
171 |     print("5. ✓ Stale data bypass for initial deployment")
    |                                                           ^
    |
help: Add trailing newline

W291 [*] Trailing whitespace
  --> tests/test_critical_issue_fixes.py:53:74
   |
51 |                 content = f.read()
52 |                 # Check that thresholds have been improved
53 |                 self.assertIn('SENTIMENT_FAILURE_THRESHOLD = 8', content, 
   |                                                                          ^
54 |                             "SENTIMENT_FAILURE_THRESHOLD should be 8")
55 |                 self.assertIn('SENTIMENT_RECOVERY_TIMEOUT = 900', content, 
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_critical_issue_fixes.py:55:75
   |
53 |                 self.assertIn('SENTIMENT_FAILURE_THRESHOLD = 8', content, 
54 |                             "SENTIMENT_FAILURE_THRESHOLD should be 8")
55 |                 self.assertIn('SENTIMENT_RECOVERY_TIMEOUT = 900', content, 
   |                                                                           ^
56 |                             "SENTIMENT_RECOVERY_TIMEOUT should be 900 (15 minutes)")
57 |                 print("✓ Issue 2 Fix: Sentiment circuit breaker thresholds improved")
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issue_fixes.py:100:1
    |
 98 |     """Run the critical fixes tests."""
 99 |     print("\n=== Critical Trading Bot Issue Fixes Test Suite ===")
100 |     
    | ^^^^
101 |     # Create test suite
102 |     suite = unittest.TestSuite()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issue_fixes.py:104:1
    |
102 |     suite = unittest.TestSuite()
103 |     test_class = TestCriticalIssueFixes
104 |     
    | ^^^^
105 |     # Add specific tests
106 |     suite.addTest(test_class('test_issue_4_position_limit_increase'))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issue_fixes.py:110:1
    |
108 |     suite.addTest(test_class('test_issue_3_quantity_tracking_logging'))
109 |     suite.addTest(test_class('test_issue_1_meta_learning_trigger_exists'))
110 |     
    | ^^^^
111 |     # Run the tests
112 |     runner = unittest.TextTestRunner(verbosity=2)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issue_fixes.py:114:1
    |
112 |     runner = unittest.TextTestRunner(verbosity=2)
113 |     result = runner.run(suite)
114 |     
    | ^^^^
115 |     print("\n=== Test Results Summary ===")
116 |     print(f"Tests run: {result.testsRun}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issue_fixes.py:119:1
    |
117 |     print(f"Failures: {len(result.failures)}")
118 |     print(f"Errors: {len(result.errors)}")
119 |     
    | ^^^^
120 |     if result.failures:
121 |         print("\nFailures:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issue_fixes.py:124:1
    |
122 |         for test, traceback in result.failures:
123 |             print(f"  - {test}: {traceback}")
124 |     
    | ^^^^
125 |     if result.errors:
126 |         print("\nErrors:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issue_fixes.py:129:1
    |
127 |         for test, traceback in result.errors:
128 |             print(f"  - {test}: {traceback}")
129 |     
    | ^^^^
130 |     return result.wasSuccessful()
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_critical_issue_fixes.py:134:30
    |
132 | if __name__ == "__main__":
133 |     success = run_critical_fixes_tests()
134 |     exit(0 if success else 1)
    |                              ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_critical_issues_resolution.py:3:1
  |
1 |   """Test critical trading bot issues and their resolution."""
2 |
3 | / import logging
4 | | import os
5 | | import unittest
6 | | from datetime import datetime, timezone, timedelta
7 | | from unittest.mock import Mock
  | |______________________________^
8 |
9 |   # Set minimal environment variables for testing
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_issues_resolution.py:18:5
   |
16 |   # Import the modules we need to test
17 |   try:
18 | /     from ai_trading.execution.engine import ExecutionEngine, Order, OrderSide
19 | |     from ai_trading.math.money import Money
20 | |     from ai_trading.risk.engine import RiskEngine  # AI-AGENT-REF: normalized import
21 | |     from ai_trading.core import bot_engine
   | |__________________________________________^
22 |       HAS_FULL_IMPORTS = True
23 |   except ImportError as e:
   |
help: Organize imports

F401 `ai_trading.core.bot_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_critical_issues_resolution.py:21:33
   |
19 |     from ai_trading.math.money import Money
20 |     from ai_trading.risk.engine import RiskEngine  # AI-AGENT-REF: normalized import
21 |     from ai_trading.core import bot_engine
   |                                 ^^^^^^^^^^
22 |     HAS_FULL_IMPORTS = True
23 | except ImportError as e:
   |
help: Remove unused import: `ai_trading.core.bot_engine`

W293 [*] Blank line contains whitespace
  --> tests/test_critical_issues_resolution.py:31:1
   |
29 | class TestCriticalIssuesResolution(unittest.TestCase):
30 |     """Test fixes for critical trading bot issues."""
31 |     
   | ^^^^
32 |     def setUp(self):
33 |         """Set up test environment."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_issues_resolution.py:35:1
   |
33 |         """Set up test environment."""
34 |         self.logger = logging.getLogger(__name__)
35 |         
   | ^^^^^^^^
36 |     @unittest.skipUnless(HAS_FULL_IMPORTS, "Required modules not available")
37 |     def test_order_fill_tracking_reconciliation(self):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_issues_resolution.py:53:1
   |
51 |         except Exception as e:
52 |             self.fail(f"Partial fill handling failed: {e}")
53 |     
   | ^^^^
54 |     def test_overtrading_prevention_cooldown_logic(self):
55 |         """Test that overtrading prevention cooldown logic is sound."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_issues_resolution.py:58:1
   |
56 |         # Test existing cooldown mechanism logic
57 |         trade_cooldowns = {}
58 |         
   | ^^^^^^^^
59 |         symbol = "AAPL"
60 |         now = datetime.now(timezone.utc)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_issues_resolution.py:61:1
   |
59 |         symbol = "AAPL"
60 |         now = datetime.now(timezone.utc)
61 |         
   | ^^^^^^^^
62 |         # Set a recent trade cooldown (within 5 minutes)
63 |         trade_cooldowns[symbol] = now - timedelta(minutes=2)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_issues_resolution.py:64:1
   |
62 |         # Set a recent trade cooldown (within 5 minutes)
63 |         trade_cooldowns[symbol] = now - timedelta(minutes=2)
64 |         
   | ^^^^^^^^
65 |         # Check cooldown logic
66 |         cooldown_active = symbol in trade_cooldowns
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_issues_resolution.py:71:1
   |
69 |             should_skip = time_since_trade < timedelta(minutes=5)  # 5 min cooldown
70 |             self.assertTrue(should_skip, "Overtrading prevention should be active")
71 |         
   | ^^^^^^^^
72 |         # Test expired cooldown
73 |         trade_cooldowns[symbol] = now - timedelta(minutes=10)  # 10 minutes ago
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_critical_issues_resolution.py:74:57
   |
72 |         # Test expired cooldown
73 |         trade_cooldowns[symbol] = now - timedelta(minutes=10)  # 10 minutes ago
74 |         time_since_trade = now - trade_cooldowns[symbol] 
   |                                                         ^
75 |         should_allow = time_since_trade >= timedelta(minutes=5)
76 |         self.assertTrue(should_allow, "Should allow trading after cooldown expires")
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_critical_issues_resolution.py:77:1
   |
75 |         should_allow = time_since_trade >= timedelta(minutes=5)
76 |         self.assertTrue(should_allow, "Should allow trading after cooldown expires")
77 |     
   | ^^^^
78 |     def test_meta_learning_fallback_logic(self):
79 |         """Test meta learning graceful handling of insufficient data."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_issues_resolution.py:83:1
   |
81 |         min_samples_required = 100
82 |         available_samples = 25  # Insufficient
83 |         
   | ^^^^^^^^
84 |         has_sufficient_data = available_samples >= min_samples_required
85 |         self.assertFalse(has_sufficient_data, "Should detect insufficient data")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_issues_resolution.py:86:1
   |
84 |         has_sufficient_data = available_samples >= min_samples_required
85 |         self.assertFalse(has_sufficient_data, "Should detect insufficient data")
86 |         
   | ^^^^^^^^
87 |         # Test fallback behavior - should not crash when data is insufficient
88 |         try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_issues_resolution.py:95:1
   |
93 |         except Exception as e:
94 |             self.fail(f"Fallback mechanism should not raise exceptions: {e}")
95 |     
   | ^^^^
96 |     def test_sentiment_rate_limiting_logic(self):
97 |         """Test that sentiment analysis rate limiting logic is sound."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:110:1
    |
108 |                 # Error case
109 |                 return 0.0
110 |         
    | ^^^^^^^^
111 |         # Test normal case
112 |         normal_sentiment = mock_sentiment_with_rate_limit("AAPL", 200)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:114:1
    |
112 |         normal_sentiment = mock_sentiment_with_rate_limit("AAPL", 200)
113 |         self.assertEqual(normal_sentiment, 0.5)
114 |         
    | ^^^^^^^^
115 |         # Test rate limited case
116 |         rate_limited_sentiment = mock_sentiment_with_rate_limit("AAPL", 429)
    |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> tests/test_critical_issues_resolution.py:117:101
    |
115 |         # Test rate limited case
116 |         rate_limited_sentiment = mock_sentiment_with_rate_limit("AAPL", 429)
117 |         self.assertEqual(rate_limited_sentiment, 0.0, "Should return neutral score when rate limited")
    |                                                                                                     ^^
118 |     
119 |     def test_market_data_validation_logic(self):
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:118:1
    |
116 |         rate_limited_sentiment = mock_sentiment_with_rate_limit("AAPL", 429)
117 |         self.assertEqual(rate_limited_sentiment, 0.0, "Should return neutral score when rate limited")
118 |     
    | ^^^^
119 |     def test_market_data_validation_logic(self):
120 |         """Test that market data validation logic is sound."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:125:1
    |
123 |             """Validate if market data meets minimum requirements."""
124 |             return data_length >= min_required
125 |         
    | ^^^^^^^^
126 |         # Test insufficient data
127 |         insufficient_result = validate_market_data(5, 20)  # Only 5 bars, need 20
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:129:1
    |
127 |         insufficient_result = validate_market_data(5, 20)  # Only 5 bars, need 20
128 |         self.assertFalse(insufficient_result, "Should reject insufficient market data")
129 |         
    | ^^^^^^^^
130 |         # Test sufficient data
131 |         sufficient_result = validate_market_data(50, 20)  # 50 bars, need 20
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:133:1
    |
131 |         sufficient_result = validate_market_data(50, 20)  # 50 bars, need 20
132 |         self.assertTrue(sufficient_result, "Should accept sufficient market data")
133 |     
    | ^^^^
134 |     def test_position_reconciliation_logic(self):
135 |         """Test that position reconciliation logic properly detects mismatches."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:141:1
    |
139 |             mismatch = abs(bot_position - actual_position)
140 |             return mismatch > tolerance, mismatch
141 |         
    | ^^^^^^^^
142 |         # Test significant mismatch
143 |         has_mismatch, mismatch_amount = check_position_mismatch(2.1, 1.6)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:146:1
    |
144 |         self.assertTrue(has_mismatch, "Should detect position tracking discrepancy")
145 |         self.assertGreater(mismatch_amount, 0.1, "Mismatch should be significant")
146 |         
    | ^^^^^^^^
147 |         # Test acceptable difference
148 |         no_mismatch, small_difference = check_position_mismatch(2.0, 2.005)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:154:1
    |
152 | class TestOrderSpacingConfiguration(unittest.TestCase):
153 |     """Test order spacing and frequency controls."""
154 |     
    | ^^^^
155 |     @unittest.skipUnless(HAS_FULL_IMPORTS, "Required modules not available")
156 |     def test_risk_engine_order_spacing(self):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:161:1
    |
159 |             # Test the existing order_spacing method
160 |             risk_engine = RiskEngine({})
161 |             
    | ^^^^^^^^^^^^
162 |             # Should have order spacing method
163 |             self.assertTrue(hasattr(risk_engine, 'order_spacing'), "RiskEngine should have order_spacing method")
    |
help: Remove whitespace from blank line

E501 Line too long (113 > 100)
   --> tests/test_critical_issues_resolution.py:163:101
    |
162 |             # Should have order spacing method
163 |             self.assertTrue(hasattr(risk_engine, 'order_spacing'), "RiskEngine should have order_spacing method")
    |                                                                                                     ^^^^^^^^^^^^^
164 |             
165 |             spacing = risk_engine.order_spacing()
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:164:1
    |
162 |             # Should have order spacing method
163 |             self.assertTrue(hasattr(risk_engine, 'order_spacing'), "RiskEngine should have order_spacing method")
164 |             
    | ^^^^^^^^^^^^
165 |             spacing = risk_engine.order_spacing()
166 |             self.assertIsInstance(spacing, float, "Order spacing should return float")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:170:1
    |
168 |         except Exception as e:
169 |             self.fail(f"RiskEngine order spacing test failed: {e}")
170 |     
    | ^^^^
171 |     def test_trade_frequency_limits_logic(self):
172 |         """Test trade frequency limiting logic."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:178:1
    |
176 |             now = datetime.now(timezone.utc)
177 |             hour_ago = now - timedelta(hours=1)
178 |             
    | ^^^^^^^^^^^^
179 |             trades_last_hour = len([t for t in recent_trades if t > hour_ago])
180 |             return trades_last_hour < max_per_hour, trades_last_hour
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:181:1
    |
179 |             trades_last_hour = len([t for t in recent_trades if t > hour_ago])
180 |             return trades_last_hour < max_per_hour, trades_last_hour
181 |         
    | ^^^^^^^^
182 |         # Test under limit
183 |         recent_trades = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:185:1
    |
183 |         recent_trades = []
184 |         now = datetime.now(timezone.utc)
185 |         
    | ^^^^^^^^
186 |         # Add 5 trades in last hour (under limit of 10)
187 |         for i in range(5):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:190:1
    |
188 |             trade_time = now - timedelta(minutes=i*10)  # Trades every 10 minutes
189 |             recent_trades.append(trade_time)
190 |         
    | ^^^^^^^^
191 |         can_trade, count = check_trade_frequency(recent_trades, 10)
192 |         self.assertTrue(can_trade, "Should allow trading when under frequency limit")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:194:1
    |
192 |         self.assertTrue(can_trade, "Should allow trading when under frequency limit")
193 |         self.assertEqual(count, 5, "Should count 5 trades in last hour")
194 |         
    | ^^^^^^^^
195 |         # Test over limit
196 |         for i in range(6):  # Add 6 more trades
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_issues_resolution.py:199:1
    |
197 |             trade_time = now - timedelta(minutes=i*5)  # More frequent trades
198 |             recent_trades.append(trade_time)
199 |         
    | ^^^^^^^^
200 |         can_trade_over, count_over = check_trade_frequency(recent_trades, 10)
201 |         self.assertFalse(can_trade_over, "Should block trading when over frequency limit")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_critical_issues_resolution.py:208:20
    |
206 |     # Configure logging for tests
207 |     logging.basicConfig(level=logging.INFO)
208 |     unittest.main()
    |                    ^
    |
help: Add trailing newline

W291 Trailing whitespace
 --> tests/test_critical_trading_fixes.py:7:35
  |
5 | Tests the five main areas of improvement:
6 | 1. Sentiment Analysis Rate Limiting
7 | 2. Aggressive Liquidity Management  
  |                                   ^^
8 | 3. Meta-Learning System Failure
9 | 4. Partial Order Management
  |
help: Remove trailing whitespace

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_trading_fixes.py:13:1
   |
11 |   """
12 |
13 | / import pytest
14 | | import unittest
15 | | from unittest.mock import Mock, patch
16 | | import tempfile
17 | | import os
18 | | import csv
19 | | import time
20 | | from datetime import datetime, timezone
21 | | from pathlib import Path
22 | | import pandas as pd
   | |___________________^
23 |
24 |   # Import modules under test
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_trading_fixes.py:29:1
   |
27 |   except Exception:  # pragma: no cover - optional torch dependency
28 |       pytest.skip("sentiment module unavailable", allow_module_level=True)
29 | / from ai_trading import meta_learning
30 | | import ai_trading.config as config
31 | | from ai_trading.broker.alpaca import AlpacaBroker
32 | | from ai_trading.execution.engine import ExecutionEngine
33 | | from ai_trading.monitoring.order_health_monitor import (
34 | |     _active_orders,
35 | |     _order_tracking_lock,
36 | |     OrderInfo,
37 | | )
   | |_^
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_fixes.py:60:1
   |
58 | class TestSentimentAnalysisRateLimitingFixes(unittest.TestCase):
59 |     """Test enhanced sentiment analysis rate limiting fixes."""
60 |     
   | ^^^^
61 |     def setUp(self):
62 |         # Reset sentiment cache for each test
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_fixes.py:65:1
   |
63 |         sentiment._SENTIMENT_CACHE.clear()
64 |         sentiment._SENTIMENT_CIRCUIT_BREAKER = {"failures": 0, "last_failure": 0, "state": "closed"}
65 |     
   | ^^^^
66 |     def test_enhanced_rate_limiting_parameters(self):
67 |         """Test that enhanced rate limiting parameters are properly configured."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_fixes.py:74:1
   |
72 |         self.assertEqual(sentiment.SENTIMENT_MAX_RETRIES, 5)
73 |         self.assertEqual(sentiment.SENTIMENT_BASE_DELAY, 5)
74 |     
   | ^^^^
75 |     @patch('ai_trading.analysis.sentiment.requests.get')
76 |     def test_enhanced_fallback_strategies(self, mock_get):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_fixes.py:82:1
   |
80 |         mock_response.status_code = 429
81 |         mock_get.return_value = mock_response
82 |         
   | ^^^^^^^^
83 |         # Mock context
84 |         mock_ctx = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_fixes.py:85:1
   |
83 |         # Mock context
84 |         mock_ctx = Mock()
85 |         
   | ^^^^^^^^
86 |         # Test rate limiting triggers fallback
87 |         result = sentiment.fetch_sentiment(mock_ctx, 'AAPL')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_fixes.py:88:1
   |
86 |         # Test rate limiting triggers fallback
87 |         result = sentiment.fetch_sentiment(mock_ctx, 'AAPL')
88 |         
   | ^^^^^^^^
89 |         # Should return neutral sentiment when all fallbacks fail
90 |         self.assertEqual(result, 0.0)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_fixes.py:91:1
   |
89 |         # Should return neutral sentiment when all fallbacks fail
90 |         self.assertEqual(result, 0.0)
91 |     
   | ^^^^
92 |     @patch('ai_trading.analysis.sentiment.requests.get')
93 |     def test_alternative_sentiment_sources(self, mock_get):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:103:1
    |
101 |             mock_response_primary = Mock()
102 |             mock_response_primary.status_code = 429
103 |             
    | ^^^^^^^^^^^^
104 |             # Alternative source succeeds
105 |             mock_response_alt = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:108:1
    |
106 |             mock_response_alt.status_code = 200
107 |             mock_response_alt.json.return_value = {'sentiment_score': 0.7}
108 |             
    | ^^^^^^^^^^^^
109 |             mock_get.side_effect = [mock_response_primary, mock_response_alt]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:110:1
    |
109 |             mock_get.side_effect = [mock_response_primary, mock_response_alt]
110 |             
    | ^^^^^^^^^^^^
111 |             result = sentiment._try_alternative_sentiment_sources('AAPL')
112 |             self.assertEqual(result, 0.7)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:113:1
    |
111 |             result = sentiment._try_alternative_sentiment_sources('AAPL')
112 |             self.assertEqual(result, 0.7)
113 |     
    | ^^^^
114 |     def test_similar_symbol_sentiment_proxy(self):
115 |         """Test using sentiment from similar symbols as proxy."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:118:1
    |
116 |         # Add sentiment for MSFT
117 |         sentiment._SENTIMENT_CACHE['MSFT'] = (time.time(), 0.8)
118 |         
    | ^^^^^^^^
119 |         # Request sentiment for AAPL (should use MSFT as proxy)
120 |         result = sentiment._try_cached_similar_symbols('AAPL')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:121:1
    |
119 |         # Request sentiment for AAPL (should use MSFT as proxy)
120 |         result = sentiment._try_cached_similar_symbols('AAPL')
121 |         
    | ^^^^^^^^
122 |         # Should return discounted sentiment from similar symbol
123 |         self.assertIsNotNone(result)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:125:1
    |
123 |         self.assertIsNotNone(result)
124 |         self.assertTrue(abs(result - 0.64) < 0.1)  # 0.8 * 0.8 = 0.64
125 |     
    | ^^^^
126 |     def test_sector_sentiment_proxy(self):
127 |         """Test using sector ETF sentiment as proxy."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:130:1
    |
128 |         # Add sentiment for technology sector ETF
129 |         sentiment._SENTIMENT_CACHE['XLK'] = (time.time(), 0.5)
130 |         
    | ^^^^^^^^
131 |         # Request sentiment for AAPL (tech stock)
132 |         result = sentiment._try_sector_sentiment_proxy('AAPL')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:133:1
    |
131 |         # Request sentiment for AAPL (tech stock)
132 |         result = sentiment._try_sector_sentiment_proxy('AAPL')
133 |         
    | ^^^^^^^^
134 |         # Should return discounted sentiment from sector
135 |         self.assertIsNotNone(result)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:141:1
    |
139 | class TestMetaLearningSystemFixes(unittest.TestCase):
140 |     """Test meta-learning system fixes for insufficient trade history."""
141 |     
    | ^^^^
142 |     def setUp(self):
143 |         self.temp_dir = tempfile.mkdtemp()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:145:1
    |
143 |         self.temp_dir = tempfile.mkdtemp()
144 |         self.trade_log_path = os.path.join(self.temp_dir, 'test_trades.csv')
145 |     
    | ^^^^
146 |     def tearDown(self):
147 |         # Cleanup temp files
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:151:1
    |
149 |             os.remove(self.trade_log_path)
150 |         os.rmdir(self.temp_dir)
151 |     
    | ^^^^
152 |     def test_reduced_minimum_trade_requirement(self):
153 |         """Test that minimum trade requirement is reduced from 20 to 10."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:156:1
    |
154 |         # Create test data with only 12 trades (would fail with old requirement)
155 |         self._create_test_trade_log(12)
156 |         
    | ^^^^^^^^
157 |         # Mock pandas and sklearn for the test
158 |         with patch('meta_learning.pd') as mock_pd, \
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:160:1
    |
158 |         with patch('meta_learning.pd') as mock_pd, \
159 |              patch('meta_learning.Path') as mock_path:
160 |             
    | ^^^^^^^^^^^^
161 |             mock_df = Mock()
162 |             mock_df.empty = False
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:170:1
    |
168 |             mock_df.iloc = Mock()
169 |             mock_df.iloc.__getitem__ = Mock(return_value=100.0)
170 |             
    | ^^^^^^^^^^^^
171 |             mock_pd.read_csv.return_value = mock_df
172 |             mock_pd.to_numeric.return_value = mock_df
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:174:1
    |
172 |             mock_pd.to_numeric.return_value = mock_df
173 |             mock_pd.notna.return_value = mock_df
174 |             
    | ^^^^^^^^^^^^
175 |             mock_path.return_value.exists.return_value = True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:176:1
    |
175 |             mock_path.return_value.exists.return_value = True
176 |             
    | ^^^^^^^^^^^^
177 |             # Should succeed with reduced requirement (10)
178 |             result = meta_learning.retrain_meta_learner(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:182:1
    |
180 |                 min_samples=10
181 |             )
182 |             
    | ^^^^^^^^^^^^
183 |             # Result may be False due to mocking, but should not fail due to insufficient samples
184 |             self.assertIsInstance(result, bool)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:185:1
    |
183 |             # Result may be False due to mocking, but should not fail due to insufficient samples
184 |             self.assertIsInstance(result, bool)
185 |     
    | ^^^^
186 |     def test_bootstrap_data_generation(self):
187 |         """Test bootstrap data generation for faster meta-learning activation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:190:1
    |
188 |         # Create minimal real trade data
189 |         self._create_test_trade_log(3)
190 |         
    | ^^^^^^^^
191 |         # Test bootstrap generation
192 |         with patch('meta_learning.pd') as mock_pd:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:202:1
    |
200 |             ]
201 |             mock_pd.read_csv.return_value = mock_df
202 |             
    | ^^^^^^^^^^^^
203 |             # Should not raise an exception
204 |             try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:210:1
    |
208 |                 success = False
209 |                 print(f"Bootstrap generation failed: {e}")
210 |             
    | ^^^^^^^^^^^^
211 |             self.assertTrue(success)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:212:1
    |
211 |             self.assertTrue(success)
212 |     
    | ^^^^
213 |     def test_data_quality_validation(self):
214 |         """Test enhanced data quality validation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:217:1
    |
215 |         # Create test file with mixed quality data
216 |         self._create_test_trade_log_mixed_quality()
217 |         
    | ^^^^^^^^
218 |         quality_report = meta_learning.validate_trade_data_quality(self.trade_log_path)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:219:1
    |
218 |         quality_report = meta_learning.validate_trade_data_quality(self.trade_log_path)
219 |         
    | ^^^^^^^^
220 |         self.assertTrue(quality_report['file_exists'])
221 |         self.assertTrue(quality_report['file_readable'])
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:223:1
    |
221 |         self.assertTrue(quality_report['file_readable'])
222 |         self.assertGreater(quality_report['row_count'], 0)
223 |     
    | ^^^^
224 |     def _create_test_trade_log(self, num_trades):
225 |         """Create a test trade log with specified number of trades."""
    |
help: Remove whitespace from blank line

E501 Line too long (112 > 100)
   --> tests/test_critical_trading_fixes.py:226:101
    |
224 |     def _create_test_trade_log(self, num_trades):
225 |         """Create a test trade log with specified number of trades."""
226 |         headers = ['timestamp', 'symbol', 'side', 'entry_price', 'exit_price', 'quantity', 'pnl', 'signal_tags']
    |                                                                                                     ^^^^^^^^^^^^
227 |         
228 |         with open(self.trade_log_path, 'w', newline='') as f:
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:227:1
    |
225 |         """Create a test trade log with specified number of trades."""
226 |         headers = ['timestamp', 'symbol', 'side', 'entry_price', 'exit_price', 'quantity', 'pnl', 'signal_tags']
227 |         
    | ^^^^^^^^
228 |         with open(self.trade_log_path, 'w', newline='') as f:
229 |             writer = csv.writer(f)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:231:1
    |
229 |             writer = csv.writer(f)
230 |             writer.writerow(headers)
231 |             
    | ^^^^^^^^^^^^
232 |             for i in range(num_trades):
233 |                 writer.writerow([
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:243:1
    |
241 |                     f'test_signal_{i}'
242 |                 ])
243 |     
    | ^^^^
244 |     def _create_test_trade_log_mixed_quality(self):
245 |         """Create a test trade log with mixed data quality."""
    |
help: Remove whitespace from blank line

E501 Line too long (112 > 100)
   --> tests/test_critical_trading_fixes.py:246:101
    |
244 |     def _create_test_trade_log_mixed_quality(self):
245 |         """Create a test trade log with mixed data quality."""
246 |         headers = ['timestamp', 'symbol', 'side', 'entry_price', 'exit_price', 'quantity', 'pnl', 'signal_tags']
    |                                                                                                     ^^^^^^^^^^^^
247 |         
248 |         with open(self.trade_log_path, 'w', newline='') as f:
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:247:1
    |
245 |         """Create a test trade log with mixed data quality."""
246 |         headers = ['timestamp', 'symbol', 'side', 'entry_price', 'exit_price', 'quantity', 'pnl', 'signal_tags']
247 |         
    | ^^^^^^^^
248 |         with open(self.trade_log_path, 'w', newline='') as f:
249 |             writer = csv.writer(f)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:251:1
    |
249 |             writer = csv.writer(f)
250 |             writer.writerow(headers)
251 |             
    | ^^^^^^^^^^^^
252 |             # Good data
253 |             writer.writerow([
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:257:1
    |
255 |                 'AAPL', 'buy', 150.0, 152.0, 10, 20.0, 'test_signal'
256 |             ])
257 |             
    | ^^^^^^^^^^^^
258 |             # Bad data (invalid price)
259 |             writer.writerow([
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:263:1
    |
261 |                 'MSFT', 'buy', 'invalid', 300.0, 10, 0.0, 'test_signal'
262 |             ])
263 |             
    | ^^^^^^^^^^^^
264 |             # Good data
265 |             writer.writerow([
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:273:1
    |
271 | class TestLiquidityManagementFixes(unittest.TestCase):
272 |     """Test enhanced liquidity management fixes."""
273 |     
    | ^^^^
274 |     def setUp(self):
275 |         self.mock_api = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:277:1
    |
275 |         self.mock_api = Mock()
276 |         self.execution_engine = ExecutionEngine(broker_interface=self.mock_api)
277 |     
    | ^^^^
278 |     @patch('ai_trading.execution.engine.ExecutionEngine._latest_quote')
279 |     @patch('ai_trading.execution.engine.ExecutionEngine._minute_stats')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:285:1
    |
283 |         mock_quote.return_value = (100.0, 100.05)  # 5 cent spread
284 |         mock_minute_stats.return_value = (1000, 1000, 0.1)  # Normal volume and momentum
285 |         
    | ^^^^^^^^
286 |         # Test normal liquidity - should not reduce quantity
287 |         qty, skip = self.execution_engine._assess_liquidity('AAPL', 100)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:290:1
    |
288 |         self.assertEqual(qty, 100)
289 |         self.assertFalse(skip)
290 |         
    | ^^^^^^^^
291 |         # Mock wide spread (high percentage)
292 |         mock_quote.return_value = (100.0, 101.0)  # 1 dollar spread = 1%
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:293:1
    |
291 |         # Mock wide spread (high percentage)
292 |         mock_quote.return_value = (100.0, 101.0)  # 1 dollar spread = 1%
293 |         
    | ^^^^^^^^
294 |         # Test wide spread - should reduce quantity aggressively
295 |         qty, skip = self.execution_engine._assess_liquidity('AAPL', 100)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:298:1
    |
296 |         self.assertEqual(qty, 75)  # 25% reduction
297 |         self.assertFalse(skip)
298 |     
    | ^^^^
299 |     def test_liquidity_configuration_parameters(self):
300 |         """Test that liquidity configuration parameters are properly set."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:305:1
    |
303 |         self.assertTrue(hasattr(config, 'LIQUIDITY_REDUCTION_AGGRESSIVE'))
304 |         self.assertTrue(hasattr(config, 'LIQUIDITY_REDUCTION_MODERATE'))
305 |         
    | ^^^^^^^^
306 |         # Check default values are reasonable
307 |         self.assertEqual(config.LIQUIDITY_REDUCTION_AGGRESSIVE, 0.75)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:313:1
    |
311 | class TestOrderManagementFixes(unittest.TestCase):
312 |     """Test enhanced order management and timeout fixes."""
313 |     
    | ^^^^
314 |     def setUp(self):
315 |         self.mock_api = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:317:1
    |
315 |         self.mock_api = Mock()
316 |         self.execution_engine = ExecutionEngine(broker_interface=self.mock_api)
317 |     
    | ^^^^
318 |     def test_order_timeout_configuration(self):
319 |         """Test that order timeout is properly configured."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:323:1
    |
321 |         self.assertEqual(config.ORDER_STALE_CLEANUP_INTERVAL, 60)  # 1 minute
322 |         self.assertEqual(config.ORDER_FILL_RATE_TARGET, 0.80)  # 80%
323 |     
    | ^^^^
324 |     @patch('time.time')
325 |     def test_stale_order_cleanup(self, mock_time):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:328:1
    |
326 |         """Test that stale orders are properly cleaned up."""
327 |         mock_time.return_value = 1000
328 |         
    | ^^^^^^^^
329 |         # Add a stale order to tracking
330 |         with _order_tracking_lock:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:339:1
    |
337 |                 last_status='new'
338 |             )
339 |         
    | ^^^^^^^^
340 |         # Mock API calls for order cancellation
341 |         self.mock_api.get_order_by_id.return_value = Mock(status='new')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:343:1
    |
341 |         self.mock_api.get_order_by_id.return_value = Mock(status='new')
342 |         self.mock_api.cancel_order_by_id.return_value = True
343 |         
    | ^^^^^^^^
344 |         # Test cleanup
345 |         canceled_count = self.execution_engine.cleanup_stale_orders(max_age_seconds=300)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:346:1
    |
344 |         # Test cleanup
345 |         canceled_count = self.execution_engine.cleanup_stale_orders(max_age_seconds=300)
346 |         
    | ^^^^^^^^
347 |         # Should have canceled 1 stale order
348 |         self.assertEqual(canceled_count, 1)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:349:1
    |
347 |         # Should have canceled 1 stale order
348 |         self.assertEqual(canceled_count, 1)
349 |     
    | ^^^^
350 |     def test_partial_fill_reconciliation(self):
351 |         """Test enhanced partial fill reconciliation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:356:1
    |
354 |         mock_order.id = 'test_order_123'
355 |         mock_order.status = 'partially_filled'
356 |         
    | ^^^^^^^^
357 |         # Test reconciliation with partial fill
358 |         self.execution_engine._reconcile_partial_fills(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:365:1
    |
363 |             last_order=mock_order
364 |         )
365 |         
    | ^^^^^^^^
366 |         # Should log partial fill without errors
367 |         # (This test mainly ensures the function runs without exceptions)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:373:1
    |
371 | class TestSystemMonitoringAndAlerting(unittest.TestCase):
372 |     """Test enhanced system monitoring and alerting."""
373 |     
    | ^^^^
374 |     def test_sentiment_success_rate_monitoring(self):
375 |         """Test sentiment success rate monitoring configuration."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:378:1
    |
376 |         self.assertTrue(hasattr(config, 'SENTIMENT_SUCCESS_RATE_TARGET'))
377 |         self.assertEqual(config.SENTIMENT_SUCCESS_RATE_TARGET, 0.90)
378 |     
    | ^^^^
379 |     def test_meta_learning_configuration(self):
380 |         """Test meta-learning configuration parameters."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:384:1
    |
382 |         self.assertTrue(hasattr(config, 'META_LEARNING_MIN_TRADES_REDUCED'))
383 |         self.assertTrue(hasattr(config, 'META_LEARNING_BOOTSTRAP_WIN_RATE'))
384 |         
    | ^^^^^^^^
385 |         self.assertEqual(config.META_LEARNING_MIN_TRADES_REDUCED, 10)
386 |         self.assertEqual(config.META_LEARNING_BOOTSTRAP_WIN_RATE, 0.66)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:387:1
    |
385 |         self.assertEqual(config.META_LEARNING_MIN_TRADES_REDUCED, 10)
386 |         self.assertEqual(config.META_LEARNING_BOOTSTRAP_WIN_RATE, 0.66)
387 |     
    | ^^^^
388 |     def test_comprehensive_configuration_coverage(self):
389 |         """Test that all critical configuration parameters are defined."""
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_critical_trading_fixes.py:392:42
    |
390 |         required_configs = [
391 |             'SENTIMENT_ENHANCED_CACHING',
392 |             'SENTIMENT_FALLBACK_SOURCES', 
    |                                          ^
393 |             'META_LEARNING_BOOTSTRAP_ENABLED',
394 |             'ORDER_TIMEOUT_SECONDS',
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:398:1
    |
396 |             'LIQUIDITY_VOL_THRESHOLD'
397 |         ]
398 |         
    | ^^^^^^^^
399 |         for config_param in required_configs:
400 |             self.assertTrue(hasattr(config, config_param), f"Missing config parameter: {config_param}")
    |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
   --> tests/test_critical_trading_fixes.py:400:101
    |
399 |         for config_param in required_configs:
400 |             self.assertTrue(hasattr(config, config_param), f"Missing config parameter: {config_param}")
    |                                                                                                     ^^^
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:405:1
    |
403 | class TestIntegrationScenarios(unittest.TestCase):
404 |     """Test integration scenarios combining multiple fixes."""
405 |     
    | ^^^^
406 |     def test_end_to_end_rate_limited_sentiment_with_meta_learning(self):
407 |         """Test complete flow when sentiment is rate limited but meta-learning works."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:413:1
    |
411 |         from ai_trading import meta_learning
412 |         from ai_trading.execution.engine import ExecutionEngine
413 |         
    | ^^^^^^^^
414 |         # Verify key functions exist
415 |         self.assertTrue(callable(sentiment.fetch_sentiment))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:425:1
    |
423 |     """Test that meta-learning validates data quality before training."""
424 |     from ai_trading.meta_learning import validate_trade_data_quality
425 |     
    | ^^^^
426 |     # Test with non-existent file
427 |     with tempfile.NamedTemporaryFile(delete=True) as tmp:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:429:1
    |
427 |     with tempfile.NamedTemporaryFile(delete=True) as tmp:
428 |         tmp_path = tmp.name
429 |     
    | ^^^^
430 |     quality_report = validate_trade_data_quality(tmp_path)
431 |     assert quality_report['file_exists'] is False
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:439:1
    |
437 |     """Test that meta-learning implements fallback procedures for insufficient data."""
438 |     from ai_trading.meta_learning import _implement_fallback_data_recovery
439 |     
    | ^^^^
440 |     with tempfile.NamedTemporaryFile(delete=False, suffix='.csv') as tmp:
441 |         tmp_path = tmp.name
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:442:1
    |
440 |     with tempfile.NamedTemporaryFile(delete=False, suffix='.csv') as tmp:
441 |         tmp_path = tmp.name
442 |     
    | ^^^^
443 |     try:
444 |         # Remove the file to test creation
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:446:1
    |
444 |         # Remove the file to test creation
445 |         os.unlink(tmp_path)
446 |         
    | ^^^^^^^^
447 |         # Test fallback recovery
448 |         _implement_fallback_data_recovery(tmp_path, min_samples=20)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:449:1
    |
447 |         # Test fallback recovery
448 |         _implement_fallback_data_recovery(tmp_path, min_samples=20)
449 |         
    | ^^^^^^^^
450 |         # Check that emergency log was created
451 |         assert Path(tmp_path).exists()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:452:1
    |
450 |         # Check that emergency log was created
451 |         assert Path(tmp_path).exists()
452 |         
    | ^^^^^^^^
453 |         # Verify proper format
454 |         df = pd.read_csv(tmp_path)
    |
help: Remove whitespace from blank line

E501 Line too long (118 > 100)
   --> tests/test_critical_trading_fixes.py:455:101
    |
453 |         # Verify proper format
454 |         df = pd.read_csv(tmp_path)
455 |         required_cols = ['timestamp', 'symbol', 'side', 'entry_price', 'exit_price', 'quantity', 'pnl', 'signal_tags']
    |                                                                                                     ^^^^^^^^^^^^^^^^^^
456 |         for col in required_cols:
457 |             assert col in df.columns
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:466:1
    |
464 |     """Test that meta-learning filters out invalid price data."""
465 |     from ai_trading.meta_learning import validate_trade_data_quality
466 |     
    | ^^^^
467 |     # Create test CSV with mixed valid/invalid data
468 |     test_data = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:478:1
    |
476 |         'signal_tags': ['momentum', 'mean_reversion', 'momentum']
477 |     }
478 |     
    | ^^^^
479 |     with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.csv') as tmp:
480 |         df = pd.DataFrame(test_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:483:1
    |
481 |         df.to_csv(tmp.name, index=False)
482 |         tmp_path = tmp.name
483 |     
    | ^^^^
484 |     try:
485 |         quality_report = validate_trade_data_quality(tmp_path)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:503:1
    |
501 |     # Create execution engine instance
502 |     engine = ExecutionEngine(broker_interface=mock_api)
503 |     
    | ^^^^
504 |     # Mock order result
505 |     mock_order = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:507:1
    |
505 |     mock_order = Mock()
506 |     mock_order.id = "test_order_123"
507 |     
    | ^^^^
508 |     # Test partial fill reconciliation
509 |     engine._reconcile_partial_fills("AAPL", requested_qty=100, remaining_qty=30, side="buy", last_order=mock_order)
    |
help: Remove whitespace from blank line

E501 Line too long (115 > 100)
   --> tests/test_critical_trading_fixes.py:509:101
    |
508 |     # Test partial fill reconciliation
509 |     engine._reconcile_partial_fills("AAPL", requested_qty=100, remaining_qty=30, side="buy", last_order=mock_order)
    |                                                                                                     ^^^^^^^^^^^^^^^
510 |     
511 |     # Verify that partial fill was logged (would be in logs in real implementation)
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:510:1
    |
508 |     # Test partial fill reconciliation
509 |     engine._reconcile_partial_fills("AAPL", requested_qty=100, remaining_qty=30, side="buy", last_order=mock_order)
510 |     
    | ^^^^
511 |     # Verify that partial fill was logged (would be in logs in real implementation)
512 |     # This is a basic structure test
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_critical_trading_fixes.py:518:5
    |
516 |   def test_quantity_tracking_fix():
517 |       """Test the critical quantity tracking bug fix for accurate filled quantity reporting."""
518 | /     from unittest.mock import Mock
519 | |     import logging
520 | |     import io
521 | |     
522 | |     # Import trade execution module
523 | |     from ai_trading.execution.engine import ExecutionEngine
    | |___________________________________________________________^
524 |
525 |       # Create execution engine
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:521:1
    |
519 |     import logging
520 |     import io
521 |     
    | ^^^^
522 |     # Import trade execution module
523 |     from ai_trading.execution.engine import ExecutionEngine
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:527:1
    |
525 |     # Create execution engine
526 |     engine = ExecutionEngine()
527 |     
    | ^^^^
528 |     # Set up logging capture to verify correct behavior
529 |     log_stream = io.StringIO()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:533:1
    |
531 |     engine.logger.addHandler(handler)
532 |     engine.logger.setLevel(logging.INFO)
533 |     
    | ^^^^
534 |     # Test Case 1: Partial fill scenario (like TSLA case - requested 32, submitted 16, filled 11)
535 |     mock_order_partial = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:538:1
    |
536 |     mock_order_partial.id = "order_123"
537 |     mock_order_partial.filled_qty = "32"  # Alpaca API incorrectly reports original quantity
538 |     
    | ^^^^
539 |     # Call _reconcile_partial_fills with parameters matching production logs
540 |     # requested_qty=32 (original), remaining_qty=21 (32-11), so filled should be 11
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:548:1
    |
546 |         last_order=mock_order_partial
547 |     )
548 |     
    | ^^^^
549 |     # Verify it correctly identified as partial fill (not full)
550 |     log_output = log_stream.getvalue()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:553:1
    |
551 |     assert "PARTIAL_FILL_DETECTED" in log_output
552 |     assert "FULL_FILL_SUCCESS" not in log_output
553 |     
    | ^^^^
554 |     # Test Case 2: Actual full fill scenario  
555 |     log_stream.truncate(0)
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_critical_trading_fixes.py:554:45
    |
552 |     assert "FULL_FILL_SUCCESS" not in log_output
553 |     
554 |     # Test Case 2: Actual full fill scenario  
    |                                             ^^
555 |     log_stream.truncate(0)
556 |     log_stream.seek(0)
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:557:1
    |
555 |     log_stream.truncate(0)
556 |     log_stream.seek(0)
557 |     
    | ^^^^
558 |     mock_order_full = Mock()
559 |     mock_order_full.id = "order_456"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:561:1
    |
559 |     mock_order_full.id = "order_456"
560 |     mock_order_full.filled_qty = "16"  # Could be correct or incorrect - should not matter
561 |     
    | ^^^^
562 |     # Full fill: requested 16, remaining 0, so filled = 16
563 |     engine._reconcile_partial_fills(
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_critical_trading_fixes.py:567:20
    |
565 |         requested_qty=16,
566 |         remaining_qty=0,  # No quantity remaining = full fill
567 |         side="buy", 
    |                    ^
568 |         last_order=mock_order_full
569 |     )
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:570:1
    |
568 |         last_order=mock_order_full
569 |     )
570 |     
    | ^^^^
571 |     # Verify it correctly identified as full fill
572 |     log_output = log_stream.getvalue()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:575:1
    |
573 |     assert "FULL_FILL_SUCCESS" in log_output
574 |     assert "PARTIAL_FILL_DETECTED" not in log_output
575 |     
    | ^^^^
576 |     # Test Case 3: Quantity mismatch detection
577 |     log_stream.truncate(0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:579:1
    |
577 |     log_stream.truncate(0)
578 |     log_stream.seek(0)
579 |     
    | ^^^^
580 |     mock_order_mismatch = Mock()
581 |     mock_order_mismatch.id = "order_789"  
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_critical_trading_fixes.py:581:41
    |
580 |     mock_order_mismatch = Mock()
581 |     mock_order_mismatch.id = "order_789"  
    |                                         ^^
582 |     mock_order_mismatch.filled_qty = "50"  # Wrong - API reports 50 but calculated should be 10
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:583:1
    |
581 |     mock_order_mismatch.id = "order_789"  
582 |     mock_order_mismatch.filled_qty = "50"  # Wrong - API reports 50 but calculated should be 10
583 |     
    | ^^^^
584 |     # Partial fill with quantity mismatch: requested 20, remaining 10, so filled = 10
585 |     # But order.filled_qty reports 50 (wrong)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:593:1
    |
591 |         last_order=mock_order_mismatch
592 |     )
593 |     
    | ^^^^
594 |     # Verify mismatch was detected and logged
595 |     log_output = log_stream.getvalue()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:598:1
    |
596 |     assert "QUANTITY_MISMATCH_DETECTED" in log_output
597 |     assert "calculated_filled_qty" in log_output
598 |     
    | ^^^^
599 |     # Clean up
600 |     engine.logger.removeHandler(handler)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:608:1
    |
606 |     # Testing the structure exists for enhanced logging
607 |     from ai_trading.core.bot_engine import sector_exposure_ok
608 |     
    | ^^^^
609 |     # Mock BotContext
610 |     mock_ctx = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:612:1
    |
610 |     mock_ctx = Mock()
611 |     mock_ctx.api = Mock()
612 |     
    | ^^^^
613 |     # Mock account with zero portfolio value
614 |     mock_account = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:617:1
    |
615 |     mock_account.portfolio_value = 0
616 |     mock_ctx.api.get_account.return_value = mock_account
617 |     
    | ^^^^
618 |     # Test empty portfolio logic
619 |     result = sector_exposure_ok(mock_ctx, "AAPL", 10, 150.0)
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_critical_trading_fixes.py:625:5
    |
623 | def test_data_integrity_validation():
624 |     """Test comprehensive data integrity validation."""
625 |     from ai_trading.data_validation import validate_trade_log_integrity, monitor_real_time_data_quality
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
626 |     
627 |     # Test trade log integrity validation
    |
help: Organize imports

E501 Line too long (103 > 100)
   --> tests/test_critical_trading_fixes.py:625:101
    |
623 | def test_data_integrity_validation():
624 |     """Test comprehensive data integrity validation."""
625 |     from ai_trading.data_validation import validate_trade_log_integrity, monitor_real_time_data_quality
    |                                                                                                     ^^^
626 |     
627 |     # Test trade log integrity validation
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:626:1
    |
624 |     """Test comprehensive data integrity validation."""
625 |     from ai_trading.data_validation import validate_trade_log_integrity, monitor_real_time_data_quality
626 |     
    | ^^^^
627 |     # Test trade log integrity validation
628 |     test_data = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:637:1
    |
635 |         'pnl': [450.0, -250.0]
636 |     }
637 |     
    | ^^^^
638 |     with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.csv') as tmp:
639 |         df = pd.DataFrame(test_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:642:1
    |
640 |         df.to_csv(tmp.name, index=False)
641 |         tmp_path = tmp.name
642 |     
    | ^^^^
643 |     try:
644 |         integrity_report = validate_trade_log_integrity(tmp_path)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:653:1
    |
651 |     finally:
652 |         os.unlink(tmp_path)
653 |     
    | ^^^^
654 |     # Test real-time data quality monitoring
655 |     price_data = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:660:1
    |
658 |         'INVALID': -10.0  # Invalid negative price
659 |     }
660 |     
    | ^^^^
661 |     quality_report = monitor_real_time_data_quality(price_data)
662 |     assert quality_report['data_quality_ok'] is False
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:670:1
    |
668 |     """Test that data corruption is properly detected."""
669 |     from ai_trading.data_validation import validate_trade_log_integrity
670 |     
    | ^^^^
671 |     # Create corrupted test data
672 |     corrupted_data = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:681:1
    |
679 |         'pnl': [450.0, -250.0]
680 |     }
681 |     
    | ^^^^
682 |     with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.csv') as tmp:
683 |         df = pd.DataFrame(corrupted_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:686:1
    |
684 |         df.to_csv(tmp.name, index=False)
685 |         tmp_path = tmp.name
686 |     
    | ^^^^
687 |     try:
688 |         integrity_report = validate_trade_log_integrity(tmp_path)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:701:1
    |
699 |     """Test emergency data validation for critical trades."""
700 |     from ai_trading.data_validation import emergency_data_check
701 |     
    | ^^^^
702 |     # Test with valid data
703 |     valid_data = pd.DataFrame({
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:707:1
    |
705 |         'Volume': [1000, 1100, 1200]
706 |     }, index=pd.date_range('2024-01-01 09:30:00', periods=3, freq='1min', tz='UTC'))
707 |     
    | ^^^^
708 |     # Should pass emergency validation
709 |     assert emergency_data_check(valid_data, "AAPL") is True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:710:1
    |
708 |     # Should pass emergency validation
709 |     assert emergency_data_check(valid_data, "AAPL") is True
710 |     
    | ^^^^
711 |     # Test with empty data
712 |     empty_data = pd.DataFrame()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:714:1
    |
712 |     empty_data = pd.DataFrame()
713 |     assert emergency_data_check(empty_data, "AAPL") is False
714 |     
    | ^^^^
715 |     # Test with invalid price data
716 |     invalid_data = pd.DataFrame({
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:720:1
    |
718 |         'Volume': [1000, 1100, 1200]
719 |     }, index=pd.date_range('2024-01-01 09:30:00', periods=3, freq='1min', tz='UTC'))
720 |     
    | ^^^^
721 |     assert emergency_data_check(invalid_data, "AAPL") is False
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:727:1
    |
725 |     """Test that METALEARN_INVALID_PRICES warnings are prevented with proper data handling."""
726 |     from ai_trading.meta_learning import retrain_meta_learner
727 |     
    | ^^^^
728 |     # Create minimal valid trade data
729 |     valid_trade_data = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:739:1
    |
737 |         'signal_tags': ['momentum', 'mean_reversion']
738 |     }
739 |     
    | ^^^^
740 |     with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.csv') as tmp:
741 |         df = pd.DataFrame(valid_trade_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:744:1
    |
742 |         df.to_csv(tmp.name, index=False)
743 |         tmp_path = tmp.name
744 |     
    | ^^^^
745 |     try:
746 |         # This should validate data quality first and not trigger METALEARN_INVALID_PRICES
    |
help: Remove whitespace from blank line

E501 Line too long (108 > 100)
   --> tests/test_critical_trading_fixes.py:753:101
    |
751 |             except Exception as e:
752 |                 # Training may fail due to missing sklearn, but that's OK for this test
753 |                 mock_logger.warning.call_args_list.append(f"Meta learning training failed as expected: {e}")
    |                                                                                                     ^^^^^^^^
754 |             
755 |             # Check that quality validation occurred
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_fixes.py:754:1
    |
752 |                 # Training may fail due to missing sklearn, but that's OK for this test
753 |                 mock_logger.warning.call_args_list.append(f"Meta learning training failed as expected: {e}")
754 |             
    | ^^^^^^^^^^^^
755 |             # Check that quality validation occurred
756 |             calls = [str(call) for call in mock_logger.info.call_args_list]
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_critical_trading_fixes.py:764:34
    |
763 | if __name__ == "__main__":
764 |     pytest.main([__file__, "-v"])
    |                                  ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_trading_issues.py:7:1
   |
 5 |   """
 6 |
 7 | / import csv
 8 | | import os
 9 | | import tempfile
10 | | import unittest
11 | | from unittest.mock import Mock, patch, MagicMock
12 | |
13 | | import pandas as pd
   | |___________________^
14 |
15 |   # Set up minimal environment for imports
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_critical_trading_issues.py:25:5
   |
23 |   # Import the modules we need to test
24 |   try:
25 | /     from ai_trading.core import bot_engine
26 | |     from ai_trading import meta_learning
27 | |     from ai_trading.monitoring.order_health_monitor import _order_tracking_lock
   | |_______________________________________________________________________________^
28 |   except ImportError as e:
29 |       print(f"Import error: {e}")
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_issues.py:42:1
   |
40 |         """Set up test fixtures."""
41 |         self.temp_dir = tempfile.mkdtemp()
42 |         
   | ^^^^^^^^
43 |         # Mock bot context
44 |         self.mock_ctx = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_issues.py:48:1
   |
46 |         self.mock_ctx.data_client = Mock()
47 |         self.mock_ctx.trade_logger = Mock()
48 |         
   | ^^^^^^^^
49 |         # Mock order responses
50 |         self.mock_order = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_issues.py:55:1
   |
53 |         self.mock_order.filled_qty = "50"  # This is the key issue - partial fill
54 |         self.mock_order.qty = "100"       # Original requested quantity
55 |         
   | ^^^^^^^^
56 |     def tearDown(self):
57 |         """Clean up test fixtures."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_issues.py:64:1
   |
62 |         """Test that order slicing properly tracks actual vs intended quantities."""
63 |         # This test validates the core issue: signals generate qty X but only Y is filled
64 |         
   | ^^^^^^^^
65 |         symbol = "AAPL"
66 |         total_qty = 100
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_issues.py:68:1
   |
66 |         total_qty = 100
67 |         side = "buy"
68 |         
   | ^^^^^^^^
69 |         # Mock market data for POV calculation
70 |         mock_df = pd.DataFrame({
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_issues.py:74:1
   |
72 |             'close': [150.0]
73 |         })
74 |         
   | ^^^^^^^^
75 |         # Mock quote data for spread calculation
76 |         mock_quote = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_issues.py:80:1
   |
78 |         mock_quote.bid_price = 150.00
79 |         mock_quote.spread = 0.10  # High spread to trigger liquidity retry
80 |         
   | ^^^^^^^^
81 |         with patch('ai_trading.core.bot_engine.fetch_minute_df_safe', return_value=mock_df), \
82 |              patch.object(self.mock_ctx.data_client, 'get_stock_latest_quote', return_value=mock_quote), \
   |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
  --> tests/test_critical_trading_issues.py:82:101
   |
81 |         with patch('ai_trading.core.bot_engine.fetch_minute_df_safe', return_value=mock_df), \
82 |              patch.object(self.mock_ctx.data_client, 'get_stock_latest_quote', return_value=mock_quote), \
   |                                                                                                     ^^^^^^
83 |              patch('ai_trading.core.bot_engine.submit_order', return_value=self.mock_order) as mock_submit:
   |

E501 Line too long (107 > 100)
  --> tests/test_critical_trading_issues.py:83:101
   |
81 |         with patch('ai_trading.core.bot_engine.fetch_minute_df_safe', return_value=mock_df), \
82 |              patch.object(self.mock_ctx.data_client, 'get_stock_latest_quote', return_value=mock_quote), \
83 |              patch('ai_trading.core.bot_engine.submit_order', return_value=self.mock_order) as mock_submit:
   |                                                                                                     ^^^^^^^
84 |             
85 |             # Test that we can access the POV submit function
   |

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_issues.py:84:1
   |
82 |              patch.object(self.mock_ctx.data_client, 'get_stock_latest_quote', return_value=mock_quote), \
83 |              patch('ai_trading.core.bot_engine.submit_order', return_value=self.mock_order) as mock_submit:
84 |             
   | ^^^^^^^^^^^^
85 |             # Test that we can access the POV submit function
86 |             if hasattr(bot_engine, 'pov_submit'):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_issues.py:89:1
   |
87 |                 # This would expose the quantity tracking issue
88 |                 result = bot_engine.pov_submit(self.mock_ctx, symbol, total_qty, side)
89 |                 
   | ^^^^^^^^^^^^^^^^
90 |                 # Verify that submit_order was called with sliced quantities
91 |                 self.assertTrue(mock_submit.called)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_issues.py:93:1
   |
91 |                 self.assertTrue(mock_submit.called)
92 |                 calls = mock_submit.call_args_list
93 |                 
   | ^^^^^^^^^^^^^^^^
94 |                 # Calculate total intended vs actual filled
95 |                 total_intended = sum(call[0][2] for call in calls)  # qty parameter
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_critical_trading_issues.py:97:1
   |
95 |                 total_intended = sum(call[0][2] for call in calls)  # qty parameter
96 |                 # The issue: we track total_intended but actual filled might be different
97 |                 
   | ^^^^^^^^^^^^^^^^
98 |                 # This test currently fails because we don't track actual fills properly
99 |                 print(f"Total intended: {total_intended}, Order filled_qty: {self.mock_order.filled_qty}")
   |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
   --> tests/test_critical_trading_issues.py:99:101
    |
 98 |                 # This test currently fails because we don't track actual fills properly
 99 |                 print(f"Total intended: {total_intended}, Order filled_qty: {self.mock_order.filled_qty}")
    |                                                                                                     ^^^^^^
100 |
101 |     def test_order_status_polling_integration(self):
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:104:1
    |
102 |         """Test that order status polling properly feeds back to slicing logic."""
103 |         # This tests the disconnect between order polling and slice tracking
104 |         
    | ^^^^^^^^
105 |         order_id = "test-order-123"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:106:1
    |
105 |         order_id = "test-order-123"
106 |         
    | ^^^^^^^^
107 |         # Mock partially filled order
108 |         partial_order = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:112:1
    |
110 |         partial_order.filled_qty = "50"
111 |         partial_order.qty = "100"
112 |         
    | ^^^^^^^^
113 |         with patch.object(self.mock_ctx.api, 'get_order_by_id', return_value=partial_order):
114 |             if hasattr(bot_engine, 'poll_order_fill_status'):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:117:1
    |
115 |                 # This should track the actual fill but doesn't integrate with slice logic
116 |                 bot_engine.poll_order_fill_status(self.mock_ctx, order_id, timeout=1)
117 |                 
    | ^^^^^^^^^^^^^^^^
118 |                 # The issue: poll_order_fill_status runs in a separate thread
119 |                 # and doesn't communicate back to the main slicing logic
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:123:1
    |
121 |     def test_safe_submit_order_quantity_validation(self):
122 |         """Test that safe_submit_order validates filled_qty matches intended qty."""
123 |         
    | ^^^^^^^^
124 |         # Mock order request
125 |         mock_req = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:128:1
    |
126 |         mock_req.symbol = "AAPL"
127 |         mock_req.qty = 100
128 |         
    | ^^^^^^^^
129 |         # Mock order with partial fill
130 |         partial_order = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:134:1
    |
132 |         partial_order.filled_qty = "50"  # Only half filled
133 |         partial_order.qty = "100"
134 |         
    | ^^^^^^^^
135 |         with patch.object(self.mock_ctx.api, 'submit_order', return_value=partial_order), \
136 |              patch.object(self.mock_ctx.api, 'get_order_by_id', return_value=partial_order):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:137:1
    |
135 |         with patch.object(self.mock_ctx.api, 'submit_order', return_value=partial_order), \
136 |              patch.object(self.mock_ctx.api, 'get_order_by_id', return_value=partial_order):
137 |             
    | ^^^^^^^^^^^^
138 |             if hasattr(bot_engine, 'safe_submit_order'):
139 |                 result = bot_engine.safe_submit_order(self.mock_ctx.api, mock_req)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:140:1
    |
138 |             if hasattr(bot_engine, 'safe_submit_order'):
139 |                 result = bot_engine.safe_submit_order(self.mock_ctx.api, mock_req)
140 |                 
    | ^^^^^^^^^^^^^^^^
141 |                 # The issue: function returns the order but doesn't validate 
142 |                 # that filled_qty (50) matches intended qty (100)
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_critical_trading_issues.py:141:77
    |
139 |                 result = bot_engine.safe_submit_order(self.mock_ctx.api, mock_req)
140 |                 
141 |                 # The issue: function returns the order but doesn't validate 
    |                                                                             ^
142 |                 # that filled_qty (50) matches intended qty (100)
143 |                 self.assertEqual(result.filled_qty, "50")
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:150:1
    |
148 | class TestMetaLearningLogFormat(unittest.TestCase):
149 |     """Test meta-learning trade log format parsing and conversion."""
150 |     
    | ^^^^
151 |     def setUp(self):
152 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:155:1
    |
153 |         self.temp_dir = tempfile.mkdtemp()
154 |         self.trade_log_path = os.path.join(self.temp_dir, "test_trades.csv")
155 |         
    | ^^^^^^^^
156 |     def tearDown(self):
157 |         """Clean up test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:163:1
    |
161 |     def test_mixed_format_detection(self):
162 |         """Test detection of mixed audit/meta-learning log formats."""
163 |         
    | ^^^^^^^^
164 |         # Create a mixed format CSV file without headers to test raw data parsing
165 |         mixed_data = [
    |
help: Remove whitespace from blank line

E501 Line too long (127 > 100)
   --> tests/test_critical_trading_issues.py:167:101
    |
165 | …     mixed_data = [
166 | …         # Audit format row (UUID in first column)
167 | …         ["12345678-1234-1234-1234-123456789012", "2025-08-05T10:00:00Z", "AAPL", "buy", "100", "150.00", "live", "filled"],
    |                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
168 | …         # Meta format row (Symbol in first column) 
169 | …         ["MSFT", "2025-08-05T10:05:00Z", "140.00", "2025-08-05T10:10:00Z", "142.00", "50", "buy", "momentum", "profitable", "ma_cro…
    |

W291 [*] Trailing whitespace
   --> tests/test_critical_trading_issues.py:168:55
    |
166 | …     # Audit format row (UUID in first column)
167 | …     ["12345678-1234-1234-1234-123456789012", "2025-08-05T10:00:00Z", "AAPL", "buy", "100", "150.00", "live", "filled"],
168 | …     # Meta format row (Symbol in first column) 
    |                                                 ^
169 | …     ["MSFT", "2025-08-05T10:05:00Z", "140.00", "2025-08-05T10:10:00Z", "142.00", "50", "buy", "momentum", "profitable", "ma_cross",…
170 | …     # Another audit format row
    |
help: Remove trailing whitespace

E501 Line too long (158 > 100)
   --> tests/test_critical_trading_issues.py:169:101
    |
167 | …5T10:00:00Z", "AAPL", "buy", "100", "150.00", "live", "filled"],
168 | …
169 | …-05T10:10:00Z", "142.00", "50", "buy", "momentum", "profitable", "ma_cross", "0.75", "100.00"],
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
170 | …
171 | …5T10:15:00Z", "GOOGL", "sell", "25", "2800.00", "live", "filled"]
    |

E501 Line too long (128 > 100)
   --> tests/test_critical_trading_issues.py:171:101
    |
169 | …         ["MSFT", "2025-08-05T10:05:00Z", "140.00", "2025-08-05T10:10:00Z", "142.00", "50", "buy", "momentum", "profitable", "ma_cro…
170 | …         # Another audit format row
171 | …         ["87654321-4321-4321-4321-210987654321", "2025-08-05T10:15:00Z", "GOOGL", "sell", "25", "2800.00", "live", "filled"]
    |                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
172 | …     ]
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:173:1
    |
171 |             ["87654321-4321-4321-4321-210987654321", "2025-08-05T10:15:00Z", "GOOGL", "sell", "25", "2800.00", "live", "filled"]
172 |         ]
173 |         
    | ^^^^^^^^
174 |         with open(self.trade_log_path, 'w', newline='') as f:
175 |             writer = csv.writer(f)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:178:1
    |
176 |             for row in mixed_data:
177 |                 writer.writerow(row)
178 |         
    | ^^^^^^^^
179 |         if hasattr(meta_learning, 'validate_trade_data_quality'):
180 |             quality_report = meta_learning.validate_trade_data_quality(self.trade_log_path)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:181:1
    |
179 |         if hasattr(meta_learning, 'validate_trade_data_quality'):
180 |             quality_report = meta_learning.validate_trade_data_quality(self.trade_log_path)
181 |             
    | ^^^^^^^^^^^^
182 |             # Should detect mixed format
183 |             self.assertTrue(quality_report.get('mixed_format_detected', False))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:186:1
    |
184 |             self.assertGreater(quality_report.get('audit_format_rows', 0), 0)
185 |             self.assertGreater(quality_report.get('meta_format_rows', 0), 0)
186 |             
    | ^^^^^^^^^^^^
187 |             # Should have recommendations for handling mixed format
188 |             recommendations = quality_report.get('recommendations', [])
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:193:1
    |
191 |     def test_meta_learning_empty_log_issue(self):
192 |         """Test the METALEARN_EMPTY_TRADE_LOG issue reproduction."""
193 |         
    | ^^^^^^^^
194 |         # Create an audit-only format file (triggers the empty log warning)
195 |         audit_only_data = [
    |
help: Remove whitespace from blank line

E501 Line too long (127 > 100)
   --> tests/test_critical_trading_issues.py:197:101
    |
195 |         audit_only_data = [
196 |             ["order_id", "timestamp", "symbol", "side", "qty", "price", "mode", "status"],
197 |             ["12345678-1234-1234-1234-123456789012", "2025-08-05T10:00:00Z", "AAPL", "buy", "100", "150.00", "live", "filled"],
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
198 |             ["87654321-4321-4321-4321-210987654321", "2025-08-05T10:15:00Z", "GOOGL", "sell", "25", "2800.00", "live", "filled"]
199 |         ]
    |

E501 Line too long (128 > 100)
   --> tests/test_critical_trading_issues.py:198:101
    |
196 |             ["order_id", "timestamp", "symbol", "side", "qty", "price", "mode", "status"],
197 |             ["12345678-1234-1234-1234-123456789012", "2025-08-05T10:00:00Z", "AAPL", "buy", "100", "150.00", "live", "filled"],
198 |             ["87654321-4321-4321-4321-210987654321", "2025-08-05T10:15:00Z", "GOOGL", "sell", "25", "2800.00", "live", "filled"]
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
199 |         ]
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:200:1
    |
198 |             ["87654321-4321-4321-4321-210987654321", "2025-08-05T10:15:00Z", "GOOGL", "sell", "25", "2800.00", "live", "filled"]
199 |         ]
200 |         
    | ^^^^^^^^
201 |         with open(self.trade_log_path, 'w', newline='') as f:
202 |             writer = csv.writer(f)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:205:1
    |
203 |             for row in audit_only_data:
204 |                 writer.writerow(row)
205 |         
    | ^^^^^^^^
206 |         if hasattr(meta_learning, 'load_trade_data'):
207 |             # This should trigger the "No valid trades found" warning
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:209:1
    |
207 |             # This should trigger the "No valid trades found" warning
208 |             result = meta_learning.load_trade_data(self.trade_log_path)
209 |             
    | ^^^^^^^^^^^^
210 |             # Should return False/empty because no meta-learning format rows
211 |             self.assertFalse(result)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:215:1
    |
213 |     def test_audit_to_meta_format_conversion(self):
214 |         """Test conversion from audit format to meta-learning format."""
215 |         
    | ^^^^^^^^
216 |         # Create audit format data
217 |         audit_data = [
    |
help: Remove whitespace from blank line

E501 Line too long (127 > 100)
   --> tests/test_critical_trading_issues.py:219:101
    |
217 |         audit_data = [
218 |             ["order_id", "timestamp", "symbol", "side", "qty", "price", "mode", "status"],
219 |             ["12345678-1234-1234-1234-123456789012", "2025-08-05T10:00:00Z", "AAPL", "buy", "100", "150.00", "live", "filled"],
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
220 |             ["12345678-1234-1234-1234-123456789013", "2025-08-05T10:05:00Z", "AAPL", "sell", "100", "152.00", "live", "filled"]
221 |         ]
    |

E501 Line too long (127 > 100)
   --> tests/test_critical_trading_issues.py:220:101
    |
218 |             ["order_id", "timestamp", "symbol", "side", "qty", "price", "mode", "status"],
219 |             ["12345678-1234-1234-1234-123456789012", "2025-08-05T10:00:00Z", "AAPL", "buy", "100", "150.00", "live", "filled"],
220 |             ["12345678-1234-1234-1234-123456789013", "2025-08-05T10:05:00Z", "AAPL", "sell", "100", "152.00", "live", "filled"]
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
221 |         ]
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:222:1
    |
220 |             ["12345678-1234-1234-1234-123456789013", "2025-08-05T10:05:00Z", "AAPL", "sell", "100", "152.00", "live", "filled"]
221 |         ]
222 |         
    | ^^^^^^^^
223 |         with open(self.trade_log_path, 'w', newline='') as f:
224 |             writer = csv.writer(f)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:227:1
    |
225 |             for row in audit_data:
226 |                 writer.writerow(row)
227 |         
    | ^^^^^^^^
228 |         # Load as DataFrame for conversion
229 |         df = pd.read_csv(self.trade_log_path)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:230:1
    |
228 |         # Load as DataFrame for conversion
229 |         df = pd.read_csv(self.trade_log_path)
230 |         
    | ^^^^^^^^
231 |         if hasattr(meta_learning, '_convert_audit_to_meta_format'):
232 |             converted_df = meta_learning._convert_audit_to_meta_format(df)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:233:1
    |
231 |         if hasattr(meta_learning, '_convert_audit_to_meta_format'):
232 |             converted_df = meta_learning._convert_audit_to_meta_format(df)
233 |             
    | ^^^^^^^^^^^^
234 |             # Should have meta-learning columns
235 |             expected_cols = ['symbol', 'entry_time', 'entry_price', 'exit_time', 'exit_price']
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:242:1
    |
240 | class TestLiquidityManagement(unittest.TestCase):
241 |     """Test liquidity management and threshold optimization."""
242 |     
    | ^^^^
243 |     def setUp(self):
244 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:249:1
    |
247 |         self.mock_ctx.data_client = Mock()
248 |         self.mock_ctx.volume_threshold = 100000  # Default volume threshold
249 |         
    | ^^^^^^^^
250 |     def test_conservative_spread_threshold(self):
251 |         """Test that 0.05 spread threshold is too conservative."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:252:1
    |
250 |     def test_conservative_spread_threshold(self):
251 |         """Test that 0.05 spread threshold is too conservative."""
252 |         
    | ^^^^^^^^
253 |         symbol = "AAPL"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:254:1
    |
253 |         symbol = "AAPL"
254 |         
    | ^^^^^^^^
255 |         # Mock quote with moderate spread
256 |         mock_quote = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:260:1
    |
258 |         mock_quote.bid_price = 150.00
259 |         mock_quote.spread = 0.05  # Exactly at threshold
260 |         
    | ^^^^^^^^
261 |         # Mock volume data
262 |         avg_vol = 500000  # Good volume
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:263:1
    |
261 |         # Mock volume data
262 |         avg_vol = 500000  # Good volume
263 |         
    | ^^^^^^^^
264 |         with patch.object(self.mock_ctx.data_client, 'get_stock_latest_quote', return_value=mock_quote):
265 |             if hasattr(bot_engine, 'liquidity_factor'):
    |
help: Remove whitespace from blank line

E501 Line too long (104 > 100)
   --> tests/test_critical_trading_issues.py:264:101
    |
262 |         avg_vol = 500000  # Good volume
263 |         
264 |         with patch.object(self.mock_ctx.data_client, 'get_stock_latest_quote', return_value=mock_quote):
    |                                                                                                     ^^^^
265 |             if hasattr(bot_engine, 'liquidity_factor'):
266 |                 factor = bot_engine.liquidity_factor(self.mock_ctx, symbol)
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:267:1
    |
265 |             if hasattr(bot_engine, 'liquidity_factor'):
266 |                 factor = bot_engine.liquidity_factor(self.mock_ctx, symbol)
267 |                 
    | ^^^^^^^^^^^^^^^^
268 |                 # With current logic, spread of 0.05 reduces liquidity factor significantly
269 |                 # This is too conservative for normal market conditions
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:271:1
    |
269 |                 # This is too conservative for normal market conditions
270 |                 print(f"Liquidity factor with 0.05 spread: {factor}")
271 |                 
    | ^^^^^^^^^^^^^^^^
272 |                 # Should be more reasonable with dynamic thresholds
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:276:1
    |
274 |     def test_pov_slice_reduction_on_spread(self):
275 |         """Test POV slice quantity reduction due to spread."""
276 |         
    | ^^^^^^^^
277 |         # Mock market data
278 |         mock_df = pd.DataFrame({
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:282:1
    |
280 |             'close': [150.0]
281 |         })
282 |         
    | ^^^^^^^^
283 |         # Mock quote with high spread (triggers current reduction logic)
284 |         mock_quote = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:288:1
    |
286 |         mock_quote.bid_price = 150.00
287 |         # spread = 0.10 > 0.05 threshold
288 |         
    | ^^^^^^^^
289 |         total_qty = 100
290 |         pct = 0.1  # 10% participation rate
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:291:1
    |
289 |         total_qty = 100
290 |         pct = 0.1  # 10% participation rate
291 |         
    | ^^^^^^^^
292 |         with patch('ai_trading.core.bot_engine.fetch_minute_df_safe', return_value=mock_df), \
293 |              patch.object(self.mock_ctx.data_client, 'get_stock_latest_quote', return_value=mock_quote):
    |
help: Remove whitespace from blank line

E501 Line too long (104 > 100)
   --> tests/test_critical_trading_issues.py:293:101
    |
292 |         with patch('ai_trading.core.bot_engine.fetch_minute_df_safe', return_value=mock_df), \
293 |              patch.object(self.mock_ctx.data_client, 'get_stock_latest_quote', return_value=mock_quote):
    |                                                                                                     ^^^^
294 |             
295 |             # Current logic in pov_submit:
    |

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:294:1
    |
292 |         with patch('ai_trading.core.bot_engine.fetch_minute_df_safe', return_value=mock_df), \
293 |              patch.object(self.mock_ctx.data_client, 'get_stock_latest_quote', return_value=mock_quote):
294 |             
    | ^^^^^^^^^^^^
295 |             # Current logic in pov_submit:
296 |             vol = mock_df["volume"].iloc[-1]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:298:1
    |
296 |             vol = mock_df["volume"].iloc[-1]
297 |             spread = 0.10
298 |             
    | ^^^^^^^^^^^^
299 |             if spread > 0.05:
300 |                 slice_qty = min(int(vol * pct * 0.5), total_qty)  # Reduced by 50%
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:303:1
    |
301 |             else:
302 |                 slice_qty = min(int(vol * pct), total_qty)
303 |             
    | ^^^^^^^^^^^^
304 |             # This shows excessive reduction due to conservative threshold
305 |             normal_slice = int(vol * pct)  # 100,000
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:307:1
    |
305 |             normal_slice = int(vol * pct)  # 100,000
306 |             reduced_slice = int(vol * pct * 0.5)  # 50,000
307 |             
    | ^^^^^^^^^^^^
308 |             print(f"Normal slice: {normal_slice}, Reduced slice: {reduced_slice}")
309 |             self.assertEqual(slice_qty, min(reduced_slice, total_qty))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:313:1
    |
311 |     def test_volatility_retry_frequency(self):
312 |         """Test excessive liquidity retries due to volatility."""
313 |         
    | ^^^^^^^^
314 |         # This test would need to check historical patterns
315 |         # For now, document the issue pattern
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:316:1
    |
314 |         # This test would need to check historical patterns
315 |         # For now, document the issue pattern
316 |         
    | ^^^^^^^^
317 |         # Issue pattern from logs:
318 |         # 1. Signal generates qty (e.g., 38 shares)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:322:1
    |
320 |         # 3. Only partial amount ordered (e.g., 19 shares)
321 |         # 4. System reports full 38 as filled (tracking issue)
322 |         
    | ^^^^^^^^
323 |         pass
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:328:1
    |
326 | class TestResourceManagement(unittest.TestCase):
327 |     """Test resource management and memory optimization."""
328 |     
    | ^^^^
329 |     def test_memory_optimization_available(self):
330 |         """Test memory optimization module availability."""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_critical_trading_issues.py:332:13
    |
330 |         """Test memory optimization module availability."""
331 |         try:
332 |             from memory_optimizer import memory_profile, optimize_memory, emergency_memory_cleanup
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
333 |             self.assertTrue(hasattr(memory_profile, '__call__'))
334 |             self.assertTrue(hasattr(optimize_memory, '__call__'))
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_critical_trading_issues.py:343:1
    |
341 |         """Test recent_buys cleanup to prevent memory leaks."""
342 |         assert True
343 |             
    | ^^^^^^^^^^^^
344 |     def test_order_submission_lock(self):
345 |         """Test order submission locking mechanism."""
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_critical_trading_issues.py:352:31
    |
350 | if __name__ == '__main__':
351 |     # Run tests with verbose output to see the issues
352 |     unittest.main(verbosity=2)
    |                               ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_data_cache.py:1:1
  |
1 | / import time
2 | | import pandas as pd
3 | | from ai_trading.market import cache as mcache
  | |_____________________________________________^
4 |
5 |   def test_mem_cache_ttl_basic(tmp_path):
  |
help: Organize imports

E501 Line too long (102 > 100)
 --> tests/test_data_cache.py:6:101
  |
5 | def test_mem_cache_ttl_basic(tmp_path):
6 |     df = pd.DataFrame({"timestamp":[1], "open":[1], "high":[1], "low":[1], "close":[1], "volume":[1]})
  |                                                                                                     ^^
7 |     mcache.put_mem("AAPL", "1D", "2024-01-01", "2024-01-31", df)
8 |     got = mcache.get_mem("AAPL","1D","2024-01-01","2024-01-31", ttl=60)
  |

E501 Line too long (107 > 100)
  --> tests/test_data_cache.py:16:101
   |
14 |     """Test disk cache functionality"""
15 |     cache_dir = str(tmp_path / "cache")
16 |     df = pd.DataFrame({"timestamp":[1], "open":[2], "high":[3], "low":[1], "close":[2.5], "volume":[1000]})
   |                                                                                                     ^^^^^^^
17 |     
18 |     # Put data in disk cache
   |

W293 [*] Blank line contains whitespace
  --> tests/test_data_cache.py:17:1
   |
15 |     cache_dir = str(tmp_path / "cache")
16 |     df = pd.DataFrame({"timestamp":[1], "open":[2], "high":[3], "low":[1], "close":[2.5], "volume":[1000]})
17 |     
   | ^^^^
18 |     # Put data in disk cache
19 |     mcache.put_disk(cache_dir, "TSLA", "1H", "2024-01-01", "2024-01-02", df)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_data_cache.py:20:1
   |
18 |     # Put data in disk cache
19 |     mcache.put_disk(cache_dir, "TSLA", "1H", "2024-01-01", "2024-01-02", df)
20 |     
   | ^^^^
21 |     # Retrieve from disk cache
22 |     retrieved = mcache.get_disk(cache_dir, "TSLA", "1H", "2024-01-01", "2024-01-02")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_data_cache.py:31:1
   |
29 |     key1 = mcache._key("SPY", "1D", "2024-01-01", "2024-01-31")
30 |     key2 = mcache._key("BTC/USD", "1H", "2024:01:01T10:30:00", "2024:01:01T11:30:00")
31 |     
   | ^^^^
32 |     assert key1 == "SPY|1D|2024-01-01|2024-01-31"
33 |     assert key2 == "BTC/USD|1H|2024:01:01T10:30:00|2024:01:01T11:30:00"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_data_cache.py:38:1
   |
36 |     """Test that memory cache handles concurrent access safely"""
37 |     import threading
38 |     
   | ^^^^
39 |     df = pd.DataFrame({"close": [100, 101, 102]})
40 |     results = []
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_data_cache.py:41:1
   |
39 |     df = pd.DataFrame({"close": [100, 101, 102]})
40 |     results = []
41 |     
   | ^^^^
42 |     def worker(symbol_suffix):
43 |         # Put and get data concurrently
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_data_cache.py:49:1
   |
47 |         retrieved = mcache.get_mem(symbol, "1M", "2024-01-01", "2024-01-01", ttl=60)
48 |         results.append(retrieved is not None)
49 |     
   | ^^^^
50 |     threads = [threading.Thread(target=worker, args=(i,)) for i in range(10)]
51 |     for t in threads:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_data_cache.py:55:1
   |
53 |     for t in threads:
54 |         t.join()
55 |     
   | ^^^^
56 |     # All operations should succeed
57 |     assert all(results), "Some cache operations failed under concurrent access"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_data_cache.py:62:1
   |
60 |     """Test that cache settings can be loaded and work as expected"""
61 |     from ai_trading.config.settings import get_settings
62 |     
   | ^^^^
63 |     settings = get_settings()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_data_cache.py:64:1
   |
63 |     settings = get_settings()
64 |     
   | ^^^^
65 |     # Test default values
66 |     assert isinstance(settings.data_cache_enable, bool)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_data_cache.py:70:1
   |
68 |     assert isinstance(settings.data_cache_dir, str)
69 |     assert isinstance(settings.data_cache_disk_enable, bool)
70 |     
   | ^^^^
71 |     # Test that defaults are reasonable
72 |     assert settings.data_cache_ttl_seconds > 0
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_data_cache.py:73:44
   |
71 |     # Test that defaults are reasonable
72 |     assert settings.data_cache_ttl_seconds > 0
73 |     assert len(settings.data_cache_dir) > 0
   |                                            ^
   |
help: Add trailing newline

E501 Line too long (125 > 100)
   --> tests/test_data_fetcher.py:100:101
    |
 98 |     )
 99 |
100 |     monkeypatch.setattr(data_fetcher, "_fetch_bars", lambda *a, **k: df.reset_index().rename(columns={"index": "timestamp"}))
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
101 |     monkeypatch.setattr(data_fetcher, "is_market_open", lambda: True)
102 |     result = data_fetcher.get_minute_df("AAPL", datetime.date(2023, 1, 1), datetime.date(2023, 1, 2))
    |

E501 Line too long (101 > 100)
   --> tests/test_data_fetcher.py:102:101
    |
100 |     monkeypatch.setattr(data_fetcher, "_fetch_bars", lambda *a, **k: df.reset_index().rename(columns={"index": "timestamp"}))
101 |     monkeypatch.setattr(data_fetcher, "is_market_open", lambda: True)
102 |     result = data_fetcher.get_minute_df("AAPL", datetime.date(2023, 1, 1), datetime.date(2023, 1, 2))
    |                                                                                                     ^
103 |     assert not result.empty
    |

E501 Line too long (111 > 100)
   --> tests/test_data_fetcher.py:156:101
    |
154 |         if len(calls) == 1:
155 |             return Resp(400, "invalid feed")
156 |         return Resp(200, "", {"bars": [{"t": "2023-01-01T00:00:00Z", "o": 1, "h": 1, "l": 1, "c": 1, "v": 1}]})
    |                                                                                                     ^^^^^^^^^^^
157 |
158 |     monkeypatch.setattr(data_fetcher.requests, "get", fake_get)
    |

E501 Line too long (115 > 100)
  --> tests/test_data_fetcher_extended.py:46:101
   |
44 |     setup_tf(monkeypatch)
45 |     monkeypatch.setattr(data_fetcher, "_DATA_CLIENT", DummyClient(df))
46 |     result = data_fetcher.get_historical_data("AAPL", datetime.date(2024, 1, 1), datetime.date(2024, 1, 2), "1Day")
   |                                                                                                     ^^^^^^^^^^^^^^^
47 |     result = result.drop(columns=["timestamp"]).reset_index(drop=True)
48 |     pd.testing.assert_frame_equal(result, df.reset_index(drop=True), check_dtype=False)
   |

E501 Line too long (111 > 100)
  --> tests/test_data_fetcher_extended.py:54:101
   |
52 |     setup_tf(monkeypatch)
53 |     with pytest.raises(data_fetcher.DataFetchError):
54 |         data_fetcher.get_historical_data("AAPL", datetime.date(2024, 1, 1), datetime.date(2024, 1, 2), "10Min")
   |                                                                                                     ^^^^^^^^^^^
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_data_fetcher_fallbacks.py:1:1
  |
1 | / import pandas as pd
2 | | import datetime as dt
3 | |
4 | | from ai_trading import data_fetcher as dfetch
  | |_____________________________________________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:32:1
   |
30 |         self.max_drawdown = 0.15  # 15%
31 |         self.initial_equity = 10000.0
32 |         
   | ^^^^^^^^
33 |     def test_drawdown_circuit_breaker_initialization(self):
34 |         """Test that DrawdownCircuitBreaker initializes correctly."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:36:1
   |
34 |         """Test that DrawdownCircuitBreaker initializes correctly."""
35 |         breaker = DrawdownCircuitBreaker(max_drawdown=self.max_drawdown)
36 |         
   | ^^^^^^^^
37 |         self.assertEqual(breaker.max_drawdown, self.max_drawdown)
38 |         self.assertEqual(breaker.state.value, "closed")  # Normal operation
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:41:1
   |
39 |         self.assertEqual(breaker.current_drawdown, 0.0)
40 |         self.assertEqual(breaker.peak_equity, 0.0)
41 |         
   | ^^^^^^^^
42 |     def test_drawdown_circuit_breaker_normal_operation(self):
43 |         """Test circuit breaker during normal operation."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:45:1
   |
43 |         """Test circuit breaker during normal operation."""
44 |         breaker = DrawdownCircuitBreaker(max_drawdown=self.max_drawdown)
45 |         
   | ^^^^^^^^
46 |         # Update with initial equity
47 |         trading_allowed = breaker.update_equity(self.initial_equity)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:51:1
   |
49 |         self.assertEqual(breaker.peak_equity, self.initial_equity)
50 |         self.assertEqual(breaker.current_drawdown, 0.0)
51 |         
   | ^^^^^^^^
52 |         # Small gain - should still allow trading
53 |         new_equity = self.initial_equity * 1.05  # 5% gain
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:58:1
   |
56 |         self.assertEqual(breaker.peak_equity, new_equity)
57 |         self.assertEqual(breaker.current_drawdown, 0.0)
58 |         
   | ^^^^^^^^
59 |     def test_drawdown_circuit_breaker_triggers_halt(self):
60 |         """Test circuit breaker triggers halt when drawdown exceeds threshold."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:62:1
   |
60 |         """Test circuit breaker triggers halt when drawdown exceeds threshold."""
61 |         breaker = DrawdownCircuitBreaker(max_drawdown=self.max_drawdown)
62 |         
   | ^^^^^^^^
63 |         # Set initial peak equity
64 |         breaker.update_equity(self.initial_equity)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:65:1
   |
63 |         # Set initial peak equity
64 |         breaker.update_equity(self.initial_equity)
65 |         
   | ^^^^^^^^
66 |         # Simulate large loss exceeding threshold
67 |         loss_equity = self.initial_equity * (1 - self.max_drawdown - 0.01)  # 9% loss
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:69:1
   |
67 |         loss_equity = self.initial_equity * (1 - self.max_drawdown - 0.01)  # 9% loss
68 |         trading_allowed = breaker.update_equity(loss_equity)
69 |         
   | ^^^^^^^^
70 |         self.assertFalse(trading_allowed)
71 |         self.assertEqual(breaker.state.value, "open")  # Trading halted
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:73:1
   |
71 |         self.assertEqual(breaker.state.value, "open")  # Trading halted
72 |         self.assertGreater(breaker.current_drawdown, self.max_drawdown)
73 |         
   | ^^^^^^^^
74 |     def test_drawdown_circuit_breaker_recovery(self):
75 |         """Test circuit breaker allows trading after recovery."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:77:1
   |
75 |         """Test circuit breaker allows trading after recovery."""
76 |         breaker = DrawdownCircuitBreaker(max_drawdown=self.max_drawdown, recovery_threshold=0.8)
77 |         
   | ^^^^^^^^
78 |         # Set initial peak equity
79 |         breaker.update_equity(self.initial_equity)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:80:1
   |
78 |         # Set initial peak equity
79 |         breaker.update_equity(self.initial_equity)
80 |         
   | ^^^^^^^^
81 |         # Trigger halt with large loss
82 |         loss_equity = self.initial_equity * (1 - self.max_drawdown - 0.01)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:85:1
   |
83 |         breaker.update_equity(loss_equity)
84 |         self.assertEqual(breaker.state.value, "open")
85 |         
   | ^^^^^^^^
86 |         # Recover to 80% of peak (recovery threshold)
87 |         recovery_equity = self.initial_equity * 0.8
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:89:1
   |
87 |         recovery_equity = self.initial_equity * 0.8
88 |         trading_allowed = breaker.update_equity(recovery_equity)
89 |         
   | ^^^^^^^^
90 |         self.assertTrue(trading_allowed)
91 |         self.assertEqual(breaker.state.value, "closed")  # Trading resumed
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:92:1
   |
90 |         self.assertTrue(trading_allowed)
91 |         self.assertEqual(breaker.state.value, "closed")  # Trading resumed
92 |         
   | ^^^^^^^^
93 |     def test_configuration_values(self):
94 |         """Test that configuration values are correctly set."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_drawdown_integration.py:97:1
   |
95 |         self.assertEqual(config.MAX_DRAWDOWN_THRESHOLD, 0.15)
96 |         self.assertEqual(config.DAILY_LOSS_LIMIT, 0.03)
97 |         
   | ^^^^^^^^
98 |         # Test TradingConfig
99 |         tc = config.TradingConfig.from_env()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_drawdown_integration.py:114:1
    |
112 |             "max_drawdown": 0.15
113 |         }
114 |         
    | ^^^^^^^^
115 |         mock_ctx.drawdown_circuit_breaker = mock_circuit_breaker
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_drawdown_integration.py:116:1
    |
115 |         mock_ctx.drawdown_circuit_breaker = mock_circuit_breaker
116 |         
    | ^^^^^^^^
117 |         # Simulate updating equity
118 |         equity = 10000.0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_drawdown_integration.py:120:1
    |
118 |         equity = 10000.0
119 |         result = mock_ctx.drawdown_circuit_breaker.update_equity(equity)
120 |         
    | ^^^^^^^^
121 |         self.assertTrue(result)
122 |         mock_circuit_breaker.update_equity.assert_called_with(equity)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_drawdown_integration.py:127:1
    |
125 |         """Test that drawdown status reporting works correctly."""
126 |         breaker = DrawdownCircuitBreaker(max_drawdown=self.max_drawdown)
127 |         
    | ^^^^^^^^
128 |         # Set up a scenario
129 |         breaker.update_equity(self.initial_equity)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_drawdown_integration.py:132:1
    |
130 |         current_equity = self.initial_equity * 0.95  # 5% loss
131 |         breaker.update_equity(current_equity)
132 |         
    | ^^^^^^^^
133 |         status = breaker.get_status()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_drawdown_integration.py:134:1
    |
133 |         status = breaker.get_status()
134 |         
    | ^^^^^^^^
135 |         self.assertIn("state", status)
136 |         self.assertIn("current_drawdown", status)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_drawdown_integration.py:140:1
    |
138 |         self.assertIn("peak_equity", status)
139 |         self.assertIn("trading_allowed", status)
140 |         
    | ^^^^^^^^
141 |         self.assertEqual(status["state"], "closed")
142 |         self.assertAlmostEqual(status["current_drawdown"], 0.05, places=2)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_drawdown_integration.py:152:1
    |
150 |     os.environ.setdefault("MAX_DRAWDOWN_THRESHOLD", "0.15")
151 |     os.environ.setdefault("DAILY_LOSS_LIMIT", "0.03")
152 |     
    | ^^^^
153 |     unittest.main(verbosity=2)
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_drawdown_integration.py:153:31
    |
151 |     os.environ.setdefault("DAILY_LOSS_LIMIT", "0.03")
152 |     
153 |     unittest.main(verbosity=2)
    |                               ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_dual_schema_credentials.py:8:1
   |
 6 |   """
 7 |
 8 | / import pytest
 9 | | import os
10 | | from unittest.mock import patch
11 | | from ai_trading.config.management import _resolve_alpaca_env, _warn_duplicate_env_keys, validate_alpaca_credentials
   | |___________________________________________________________________________________________________________________^
   |
help: Organize imports

E501 Line too long (115 > 100)
  --> tests/test_dual_schema_credentials.py:11:101
   |
 9 | import os
10 | from unittest.mock import patch
11 | from ai_trading.config.management import _resolve_alpaca_env, _warn_duplicate_env_keys, validate_alpaca_credentials
   |                                                                                                     ^^^^^^^^^^^^^^^
   |

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:16:1
   |
14 | class TestDualSchemaCredentials:
15 |     """Test dual credential schema support."""
16 |     
   | ^^^^
17 |     def test_alpaca_schema_only(self):
18 |         """Test using only ALPACA_* environment variables."""
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_dual_schema_credentials.py:21:64
   |
19 |         env_vars = {
20 |             "ALPACA_API_KEY": "fake_alpaca_key_not_real",
21 |             "ALPACA_SECRET_KEY": "fake_alpaca_secret_not_real", 
   |                                                                ^
22 |             "ALPACA_BASE_URL": "https://paper-api.alpaca.markets"
23 |         }
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:24:1
   |
22 |             "ALPACA_BASE_URL": "https://paper-api.alpaca.markets"
23 |         }
24 |         
   | ^^^^^^^^
25 |         with patch.dict(os.environ, env_vars, clear=True):
26 |             api_key, secret_key, base_url = _resolve_alpaca_env()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:27:1
   |
25 |         with patch.dict(os.environ, env_vars, clear=True):
26 |             api_key, secret_key, base_url = _resolve_alpaca_env()
27 |             
   | ^^^^^^^^^^^^
28 |             assert api_key == "fake_alpaca_key_not_real"
29 |             assert secret_key == "fake_alpaca_secret_not_real"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:31:1
   |
29 |             assert secret_key == "fake_alpaca_secret_not_real"
30 |             assert base_url == "https://paper-api.alpaca.markets"
31 |     
   | ^^^^
32 |     def test_apca_schema_only(self):
33 |         """Test using only APCA_* environment variables."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:39:1
   |
37 |             "APCA_API_BASE_URL": "https://api.alpaca.markets"
38 |         }
39 |         
   | ^^^^^^^^
40 |         with patch.dict(os.environ, env_vars, clear=True):
41 |             api_key, secret_key, base_url = _resolve_alpaca_env()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:42:1
   |
40 |         with patch.dict(os.environ, env_vars, clear=True):
41 |             api_key, secret_key, base_url = _resolve_alpaca_env()
42 |             
   | ^^^^^^^^^^^^
43 |             assert api_key == "fake_apca_key_not_real"
44 |             assert secret_key == "fake_apca_secret_not_real"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:46:1
   |
44 |             assert secret_key == "fake_apca_secret_not_real"
45 |             assert base_url == "https://api.alpaca.markets"
46 |     
   | ^^^^
47 |     def test_alpaca_precedence_over_apca(self):
48 |         """Test that ALPACA_* variables take precedence over APCA_*."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:57:1
   |
55 |             "APCA_API_BASE_URL": "https://apca-fallback.com"
56 |         }
57 |         
   | ^^^^^^^^
58 |         with patch.dict(os.environ, env_vars, clear=True):
59 |             api_key, secret_key, base_url = _resolve_alpaca_env()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:60:1
   |
58 |         with patch.dict(os.environ, env_vars, clear=True):
59 |             api_key, secret_key, base_url = _resolve_alpaca_env()
60 |             
   | ^^^^^^^^^^^^
61 |             # Should use ALPACA_* values
62 |             assert api_key == "fake_alpaca_key_priority_not_real"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:65:1
   |
63 |             assert secret_key == "fake_alpaca_secret_priority_not_real"
64 |             assert base_url == "https://alpaca-priority.com"
65 |     
   | ^^^^
66 |     def test_mixed_schema_alpaca_key_apca_secret(self):
67 |         """Test mixed schema with ALPACA key and APCA secret."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:72:1
   |
70 |             "APCA_API_SECRET_KEY": "fake_apca_secret_mixed_not_real"
71 |         }
72 |         
   | ^^^^^^^^
73 |         with patch.dict(os.environ, env_vars, clear=True):
74 |             api_key, secret_key, base_url = _resolve_alpaca_env()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:75:1
   |
73 |         with patch.dict(os.environ, env_vars, clear=True):
74 |             api_key, secret_key, base_url = _resolve_alpaca_env()
75 |             
   | ^^^^^^^^^^^^
76 |             assert api_key == "fake_alpaca_key_mixed_not_real"
77 |             assert secret_key == "fake_apca_secret_mixed_not_real"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:79:1
   |
77 |             assert secret_key == "fake_apca_secret_mixed_not_real"
78 |             assert base_url == "https://paper-api.alpaca.markets"  # Default
79 |     
   | ^^^^
80 |     def test_mixed_schema_apca_key_alpaca_secret(self):
81 |         """Test mixed schema with APCA key and ALPACA secret."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:86:1
   |
84 |             "ALPACA_SECRET_KEY": "fake_alpaca_secret_mixed_not_real"
85 |         }
86 |         
   | ^^^^^^^^
87 |         with patch.dict(os.environ, env_vars, clear=True):
88 |             api_key, secret_key, base_url = _resolve_alpaca_env()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:89:1
   |
87 |         with patch.dict(os.environ, env_vars, clear=True):
88 |             api_key, secret_key, base_url = _resolve_alpaca_env()
89 |             
   | ^^^^^^^^^^^^
90 |             assert api_key == "fake_apca_key_mixed_not_real"  
91 |             assert secret_key == "fake_alpaca_secret_mixed_not_real"
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_dual_schema_credentials.py:90:61
   |
88 |             api_key, secret_key, base_url = _resolve_alpaca_env()
89 |             
90 |             assert api_key == "fake_apca_key_mixed_not_real"  
   |                                                             ^^
91 |             assert secret_key == "fake_alpaca_secret_mixed_not_real"
92 |             assert base_url == "https://paper-api.alpaca.markets"  # Default
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_dual_schema_credentials.py:93:1
   |
91 |             assert secret_key == "fake_alpaca_secret_mixed_not_real"
92 |             assert base_url == "https://paper-api.alpaca.markets"  # Default
93 |     
   | ^^^^
94 |     def test_default_base_url_when_missing(self):
95 |         """Test that default base URL is set when none provided."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:101:1
    |
 99 |             # No base URL provided
100 |         }
101 |         
    | ^^^^^^^^
102 |         with patch.dict(os.environ, env_vars, clear=True):
103 |             api_key, secret_key, base_url = _resolve_alpaca_env()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:104:1
    |
102 |         with patch.dict(os.environ, env_vars, clear=True):
103 |             api_key, secret_key, base_url = _resolve_alpaca_env()
104 |             
    | ^^^^^^^^^^^^
105 |             assert api_key == "test_key"
106 |             assert secret_key == "test_secret"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:108:1
    |
106 |             assert secret_key == "test_secret"
107 |             assert base_url == "https://paper-api.alpaca.markets"
108 |     
    | ^^^^
109 |     def test_missing_credentials(self):
110 |         """Test behavior when credentials are missing."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:113:1
    |
111 |         with patch.dict(os.environ, {}, clear=True):
112 |             api_key, secret_key, base_url = _resolve_alpaca_env()
113 |             
    | ^^^^^^^^^^^^
114 |             assert api_key is None
115 |             assert secret_key is None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:117:1
    |
115 |             assert secret_key is None
116 |             assert base_url == "https://paper-api.alpaca.markets"  # Default still set
117 |     
    | ^^^^
118 |     def test_partial_credentials_api_key_only(self):
119 |         """Test behavior with only API key present."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:123:1
    |
121 |             "ALPACA_API_KEY": "partial_key"
122 |         }
123 |         
    | ^^^^^^^^
124 |         with patch.dict(os.environ, env_vars, clear=True):
125 |             api_key, secret_key, base_url = _resolve_alpaca_env()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:126:1
    |
124 |         with patch.dict(os.environ, env_vars, clear=True):
125 |             api_key, secret_key, base_url = _resolve_alpaca_env()
126 |             
    | ^^^^^^^^^^^^
127 |             assert api_key == "partial_key"
128 |             assert secret_key is None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:130:1
    |
128 |             assert secret_key is None
129 |             assert base_url == "https://paper-api.alpaca.markets"
130 |     
    | ^^^^
131 |     def test_partial_credentials_secret_key_only(self):
132 |         """Test behavior with only secret key present."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:136:1
    |
134 |             "ALPACA_SECRET_KEY": "partial_secret"
135 |         }
136 |         
    | ^^^^^^^^
137 |         with patch.dict(os.environ, env_vars, clear=True):
138 |             api_key, secret_key, base_url = _resolve_alpaca_env()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:139:1
    |
137 |         with patch.dict(os.environ, env_vars, clear=True):
138 |             api_key, secret_key, base_url = _resolve_alpaca_env()
139 |             
    | ^^^^^^^^^^^^
140 |             assert api_key is None
141 |             assert secret_key == "partial_secret"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:143:1
    |
141 |             assert secret_key == "partial_secret"
142 |             assert base_url == "https://paper-api.alpaca.markets"
143 |     
    | ^^^^
144 |     @patch('ai_trading.config.management.logger')
145 |     def test_warn_duplicate_env_keys_conflicting(self, mock_logger):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:153:1
    |
151 |             "APCA_API_SECRET_KEY": "same_secret"  # Same value, no warning
152 |         }
153 |         
    | ^^^^^^^^
154 |         with patch.dict(os.environ, env_vars, clear=True):
155 |             _warn_duplicate_env_keys()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:156:1
    |
154 |         with patch.dict(os.environ, env_vars, clear=True):
155 |             _warn_duplicate_env_keys()
156 |             
    | ^^^^^^^^^^^^
157 |             # Should warn about API key conflict but not secret key
158 |             mock_logger.warning.assert_called_once()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:163:1
    |
161 |             assert "APCA_API_KEY_ID" in warning_call
162 |             assert "different values" in warning_call
163 |     
    | ^^^^
164 |     @patch('ai_trading.config.management.logger')
165 |     def test_warn_duplicate_env_keys_no_conflict(self, mock_logger):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:173:1
    |
171 |             "APCA_API_SECRET_KEY": "same_secret"
172 |         }
173 |         
    | ^^^^^^^^
174 |         with patch.dict(os.environ, env_vars, clear=True):
175 |             _warn_duplicate_env_keys()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:176:1
    |
174 |         with patch.dict(os.environ, env_vars, clear=True):
175 |             _warn_duplicate_env_keys()
176 |             
    | ^^^^^^^^^^^^
177 |             # Should not warn since values are identical
178 |             mock_logger.warning.assert_not_called()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:179:1
    |
177 |             # Should not warn since values are identical
178 |             mock_logger.warning.assert_not_called()
179 |     
    | ^^^^
180 |     @patch('ai_trading.config.management.TESTING', True)
181 |     def test_validate_alpaca_credentials_skip_in_testing(self):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:186:1
    |
184 |             # Should not raise exception in testing mode
185 |             validate_alpaca_credentials()
186 |     
    | ^^^^
187 |     @patch('ai_trading.config.management.TESTING', False)
188 |     @patch('ai_trading.config.management.logger')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:194:1
    |
192 |             with pytest.raises(RuntimeError) as exc_info:
193 |                 validate_alpaca_credentials()
194 |             
    | ^^^^^^^^^^^^
195 |             assert "Missing Alpaca credentials" in str(exc_info.value)
196 |             assert "ALPACA_API_KEY" in str(exc_info.value)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:198:1
    |
196 |             assert "ALPACA_API_KEY" in str(exc_info.value)
197 |             assert "APCA_API_KEY_ID" in str(exc_info.value)
198 |     
    | ^^^^
199 |     @patch('ai_trading.config.management.TESTING', False)
200 |     @patch('ai_trading.config.management.logger')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:207:1
    |
205 |             "ALPACA_SECRET_KEY": "valid_secret_456"
206 |         }
207 |         
    | ^^^^^^^^
208 |         with patch.dict(os.environ, env_vars, clear=True):
209 |             # Should not raise exception
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:211:1
    |
209 |             # Should not raise exception
210 |             validate_alpaca_credentials()
211 |             
    | ^^^^^^^^^^^^
212 |             # Should log success
213 |             mock_logger.info.assert_called_with("Alpaca credentials resolved successfully")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:214:1
    |
212 |             # Should log success
213 |             mock_logger.info.assert_called_with("Alpaca credentials resolved successfully")
214 |     
    | ^^^^
215 |     @patch('ai_trading.config.management.TESTING', False)
216 |     @patch('ai_trading.config.management.logger')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:223:1
    |
221 |             "APCA_API_SECRET_KEY": "valid_secret_012"
222 |         }
223 |         
    | ^^^^^^^^
224 |         with patch.dict(os.environ, env_vars, clear=True):
225 |             # Should not raise exception
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:227:1
    |
225 |             # Should not raise exception
226 |             validate_alpaca_credentials()
227 |             
    | ^^^^^^^^^^^^
228 |             # Should log success
229 |             mock_logger.info.assert_called_with("Alpaca credentials resolved successfully")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:230:1
    |
228 |             # Should log success
229 |             mock_logger.info.assert_called_with("Alpaca credentials resolved successfully")
230 |     
    | ^^^^
231 |     @patch('ai_trading.config.management.TESTING', False)
232 |     @patch('ai_trading.config.management.logger')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:239:1
    |
237 |             # Missing secret key
238 |         }
239 |         
    | ^^^^^^^^
240 |         with patch.dict(os.environ, env_vars, clear=True):
241 |             with pytest.raises(RuntimeError) as exc_info:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:243:1
    |
241 |             with pytest.raises(RuntimeError) as exc_info:
242 |                 validate_alpaca_credentials()
243 |             
    | ^^^^^^^^^^^^
244 |             assert "Missing Alpaca credentials" in str(exc_info.value)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:245:1
    |
244 |             assert "Missing Alpaca credentials" in str(exc_info.value)
245 |     
    | ^^^^
246 |     @patch('ai_trading.config.management.TESTING', False)
247 |     @patch('ai_trading.config.management.logger')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:254:1
    |
252 |             # Missing API key
253 |         }
254 |         
    | ^^^^^^^^
255 |         with patch.dict(os.environ, env_vars, clear=True):
256 |             with pytest.raises(RuntimeError) as exc_info:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_dual_schema_credentials.py:258:1
    |
256 |             with pytest.raises(RuntimeError) as exc_info:
257 |                 validate_alpaca_credentials()
258 |             
    | ^^^^^^^^^^^^
259 |             assert "Missing Alpaca credentials" in str(exc_info.value)
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_dual_schema_credentials.py:263:28
    |
262 | if __name__ == "__main__":
263 |     pytest.main([__file__])
    |                            ^
    |
help: Add trailing newline

RUF100 [*] Unused `noqa` directive (non-enabled: `D401`)
  --> tests/test_dynamic_position_sizing.py:22:39
   |
20 |     sess = get_global_session()
21 |
22 |     def fake_get(url, headers=None):  # noqa: D401
   |                                       ^^^^^^^^^^^^
23 |         return _Resp(status, payload)
   |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_ellipsis_fix.py:2:1
  |
1 |   """Test fixes for message-shortening ellipsis and risk exposure task."""
2 | / import json
3 | | import logging
4 | | import unittest
5 | | from unittest.mock import Mock, patch
6 | |
7 | | import ai_trading.logging as logger_module
8 | | from ai_trading.core.bot_engine import _update_risk_engine_exposure, _get_runtime_context_or_none
  | |_________________________________________________________________________________________________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_ellipsis_fix.py:33:1
   |
31 |         """Test that JSON formatter preserves Unicode characters without escaping."""
32 |         fmt = logger_module.JSONFormatter("%(asctime)sZ")
33 |         
   | ^^^^^^^^
34 |         # Create a record with Unicode ellipsis character
35 |         rec = _make_record()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_ellipsis_fix.py:37:1
   |
35 |         rec = _make_record()
36 |         rec.getMessage = lambda: "MARKET WATCH — Real Alpaca Trading SDK imported successfully"
37 |         
   | ^^^^^^^^
38 |         out = fmt.format(rec)
39 |         data = json.loads(out)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_ellipsis_fix.py:40:1
   |
38 |         out = fmt.format(rec)
39 |         data = json.loads(out)
40 |         
   | ^^^^^^^^
41 |         # Verify that the Unicode em dash (—) is preserved as-is, not escaped as \u2014
42 |         self.assertIn("—", data["msg"])
   |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
  --> tests/test_ellipsis_fix.py:44:101
   |
42 |         self.assertIn("—", data["msg"])
43 |         self.assertNotIn("\\u2014", out)  # Should not contain escaped Unicode
44 |         self.assertEqual(data["msg"], "MARKET WATCH — Real Alpaca Trading SDK imported successfully")
   |                                                                                                     ^
45 |
46 |     def test_json_formatter_log_trading_event_unicode(self):
   |

W293 [*] Blank line contains whitespace
  --> tests/test_ellipsis_fix.py:52:1
   |
50 |             mock_logger = Mock()
51 |             mock_logger_get.return_value = mock_logger
52 |             
   | ^^^^^^^^^^^^
53 |             # Call log_trading_event with Unicode characters
54 |             logger_module.log_trading_event(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_ellipsis_fix.py:59:1
   |
57 |                 {'side': 'buy', 'notes': 'Market analysis shows — positive trend'}
58 |             )
59 |             
   | ^^^^^^^^^^^^
60 |             # Verify that info was called
61 |             self.assertTrue(mock_logger.info.called)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_ellipsis_fix.py:62:1
   |
60 |             # Verify that info was called
61 |             self.assertTrue(mock_logger.info.called)
62 |             
   | ^^^^^^^^^^^^
63 |             # Get the logged message and verify Unicode is preserved
64 |             call_args = mock_logger.info.call_args
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_ellipsis_fix.py:66:1
   |
64 |             call_args = mock_logger.info.call_args
65 |             logged_message = call_args[0][1]  # Second argument to info()
66 |             
   | ^^^^^^^^^^^^
67 |             # Verify that Unicode is preserved in the JSON string
68 |             self.assertIn("—", logged_message)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_ellipsis_fix.py:80:1
   |
78 |             mock_lazy_ctx._context = mock_context
79 |             mock_get_ctx.return_value = mock_lazy_ctx
80 |             
   | ^^^^^^^^^^^^
81 |             result = _get_runtime_context_or_none()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_ellipsis_fix.py:82:1
   |
81 |             result = _get_runtime_context_or_none()
82 |             
   | ^^^^^^^^^^^^
83 |             self.assertIs(result, mock_context)
84 |             mock_lazy_ctx._ensure_initialized.assert_called_once()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_ellipsis_fix.py:92:1
   |
90 |                 # Test error handling
91 |                 mock_get_ctx.side_effect = Exception("Context unavailable")
92 |                 
   | ^^^^^^^^^^^^^^^^
93 |                 result = _get_runtime_context_or_none()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_ellipsis_fix.py:94:1
   |
93 |                 result = _get_runtime_context_or_none()
94 |                 
   | ^^^^^^^^^^^^^^^^
95 |                 self.assertIsNone(result)
96 |                 mock_log.warning.assert_called_once()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_ellipsis_fix.py:103:1
    |
101 |         with patch('ai_trading.core.bot_engine._get_runtime_context_or_none') as mock_get_ctx:
102 |             mock_get_ctx.return_value = None
103 |             
    | ^^^^^^^^^^^^
104 |             # Should not raise, just return quietly
105 |             _update_risk_engine_exposure()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_ellipsis_fix.py:116:1
    |
114 |                 mock_context.risk_engine = mock_risk_engine
115 |                 mock_get_ctx.return_value = mock_context
116 |                 
    | ^^^^^^^^^^^^^^^^
117 |                 _update_risk_engine_exposure()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_ellipsis_fix.py:118:1
    |
117 |                 _update_risk_engine_exposure()
118 |                 
    | ^^^^^^^^^^^^^^^^
119 |                 # Verify risk engine update_exposure was called
120 |                 mock_risk_engine.update_exposure.assert_called_once_with(mock_context)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_ellipsis_fix.py:130:1
    |
128 |                 mock_context.risk_engine = None
129 |                 mock_get_ctx.return_value = mock_context
130 |                 
    | ^^^^^^^^^^^^^^^^
131 |                 _update_risk_engine_exposure()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_ellipsis_fix.py:132:1
    |
131 |                 _update_risk_engine_exposure()
132 |                 
    | ^^^^^^^^^^^^^^^^
133 |                 # Should log debug message about missing risk engine
134 |                 mock_log.debug.assert_called_once()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_ellipsis_fix.py:147:1
    |
145 |                 mock_context.risk_engine = mock_risk_engine
146 |                 mock_get_ctx.return_value = mock_context
147 |                 
    | ^^^^^^^^^^^^^^^^
148 |                 _update_risk_engine_exposure()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_ellipsis_fix.py:149:1
    |
148 |                 _update_risk_engine_exposure()
149 |                 
    | ^^^^^^^^^^^^^^^^
150 |                 # Should log warning about failure
151 |                 mock_log.warning.assert_called_once()
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_ellipsis_fix.py:156:20
    |
155 | if __name__ == '__main__':
156 |     unittest.main()
    |                    ^
    |
help: Add trailing newline

W293 [*] Blank line contains whitespace
  --> tests/test_emit_once_logger.py:19:1
   |
17 |     formatter = logging.Formatter('%(levelname)s - %(message)s')
18 |     ch.setFormatter(formatter)
19 |     
   | ^^^^
20 |     logger = logging.getLogger('test_emit_once')
21 |     logger.setLevel(logging.DEBUG)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_emit_once_logger.py:24:1
   |
22 |     logger.handlers.clear()  # Clear any existing handlers
23 |     logger.addHandler(ch)
24 |     
   | ^^^^
25 |     return logger, log_capture_string
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_emit_once_logger.py:32:1
   |
30 |     logger, log_capture = logger_with_capture
31 |     emit_once = EmitOnceLogger(logger)
32 |     
   | ^^^^
33 |     # First call should emit
34 |     emit_once.info("Test message")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_emit_once_logger.py:37:1
   |
35 |     output1 = log_capture.getvalue()
36 |     assert "Test message" in output1
37 |     
   | ^^^^
38 |     # Second call with same message should not emit
39 |     emit_once.info("Test message")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_emit_once_logger.py:42:1
   |
40 |     output2 = log_capture.getvalue()
41 |     assert output1 == output2  # No new content added
42 |     
   | ^^^^
43 |     # Different message should emit
44 |     emit_once.info("Different message")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_emit_once_logger.py:54:1
   |
52 |     logger, log_capture = logger_with_capture
53 |     emit_once = EmitOnceLogger(logger)
54 |     
   | ^^^^
55 |     # First call with custom key
56 |     emit_once.info("Message 1", key="startup_banner")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_emit_once_logger.py:59:1
   |
57 |     output1 = log_capture.getvalue()
58 |     assert "Message 1" in output1
59 |     
   | ^^^^
60 |     # Second call with same key but different message should not emit
61 |     emit_once.info("Message 2", key="startup_banner")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_emit_once_logger.py:65:1
   |
63 |     assert output1 == output2  # No new content added
64 |     assert "Message 2" not in output2
65 |     
   | ^^^^
66 |     # Call with different key should emit
67 |     emit_once.info("Message 3", key="different_key")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_emit_once_logger.py:76:1
   |
74 |     logger, log_capture = logger_with_capture
75 |     emit_once = EmitOnceLogger(logger)
76 |     
   | ^^^^
77 |     # Test each level
78 |     emit_once.debug("Debug message")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_emit_once_logger.py:82:1
   |
80 |     emit_once.warning("Warning message")
81 |     emit_once.error("Error message")
82 |     
   | ^^^^
83 |     output = log_capture.getvalue()
84 |     assert "DEBUG - Debug message" in output
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_emit_once_logger.py:88:1
   |
86 |     assert "WARNING - Warning message" in output
87 |     assert "ERROR - Error message" in output
88 |     
   | ^^^^
89 |     # Try duplicates - should not appear again
90 |     original_length = len(output)
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_emit_once_logger.py:93:41
   |
91 |     emit_once.debug("Debug message")
92 |     emit_once.info("Info message")
93 |     emit_once.warning("Warning message") 
   |                                         ^
94 |     emit_once.error("Error message")
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_emit_once_logger.py:95:1
   |
93 |     emit_once.warning("Warning message") 
94 |     emit_once.error("Error message")
95 |     
   | ^^^^
96 |     final_output = log_capture.getvalue()
97 |     assert len(final_output) == original_length  # No new content
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_emit_once_logger.py:104:1
    |
102 |     import threading
103 |     import time
104 |     
    | ^^^^
105 |     logger = logging.getLogger('test_thread_safe')
106 |     logger.handlers.clear()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_emit_once_logger.py:108:1
    |
106 |     logger.handlers.clear()
107 |     emit_once = EmitOnceLogger(logger)
108 |     
    | ^^^^
109 |     results = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_emit_once_logger.py:110:1
    |
109 |     results = []
110 |     
    | ^^^^
111 |     def emit_messages():
112 |         for i in range(100):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_emit_once_logger.py:116:1
    |
114 |             emit_once.info("Thread safe test message")
115 |             time.sleep(0.001)  # Small delay to encourage race conditions
116 |     
    | ^^^^
117 |     # Start multiple threads
118 |     threads = [threading.Thread(target=emit_messages) for _ in range(5)]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_emit_once_logger.py:123:1
    |
121 |     for t in threads:
122 |         t.join()
123 |     
    | ^^^^
124 |     # The key should only be in the set once
125 |     assert len(emit_once._emitted_keys) == 1
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_emit_once_logger.py:126:65
    |
124 |     # The key should only be in the set once
125 |     assert len(emit_once._emitted_keys) == 1
126 |     assert "Thread safe test message" in emit_once._emitted_keys
    |                                                                 ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_enhanced_execution_debugging.py:7:1
   |
 5 |   """
 6 |
 7 | / import unittest
 8 | | import time
 9 | | from unittest.mock import Mock
   | |______________________________^
10 |
11 |   try:
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_enhanced_execution_debugging.py:13:5
   |
11 |   try:
12 |       # Try to import the enhanced execution modules
13 | /     from ai_trading.execution.debug_tracker import (
14 | |         ExecutionDebugTracker, ExecutionPhase, OrderStatus,
15 | |         get_debug_tracker, log_signal_to_execution
16 | |     )
17 | |     from ai_trading.execution.position_reconciler import (
18 | |         PositionReconciler, PositionDiscrepancy,
19 | |         get_position_reconciler
20 | |     )
21 | |     from ai_trading.execution.pnl_attributor import (
22 | |         PnLAttributor, PnLSource, PnLEvent,
23 | |         get_pnl_attributor
24 | |     )
   | |_____^
25 |       ENHANCED_DEBUGGING_AVAILABLE = True
26 |   except ImportError:
   |
help: Organize imports

F401 `ai_trading.execution.pnl_attributor.PnLEvent` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_enhanced_execution_debugging.py:22:35
   |
20 |     )
21 |     from ai_trading.execution.pnl_attributor import (
22 |         PnLAttributor, PnLSource, PnLEvent,
   |                                   ^^^^^^^^
23 |         get_pnl_attributor
24 |     )
   |
help: Remove unused import: `ai_trading.execution.pnl_attributor.PnLEvent`

W293 [*] Blank line contains whitespace
  --> tests/test_enhanced_execution_debugging.py:32:1
   |
30 | class TestExecutionDebugging(unittest.TestCase):
31 |     """Test the enhanced execution debugging system."""
32 |     
   | ^^^^
33 |     def setUp(self):
34 |         """Set up test fixtures."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_enhanced_execution_debugging.py:37:1
   |
35 |         if not ENHANCED_DEBUGGING_AVAILABLE:
36 |             self.skipTest("Enhanced debugging modules not available")
37 |         
   | ^^^^^^^^
38 |         # Create fresh instances for each test
39 |         self.debug_tracker = ExecutionDebugTracker()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_enhanced_execution_debugging.py:41:1
   |
39 |         self.debug_tracker = ExecutionDebugTracker()
40 |         self.debug_tracker.set_debug_mode(verbose=True, trace=True)
41 |         
   | ^^^^^^^^
42 |     def test_correlation_id_generation(self):
43 |         """Test correlation ID generation is unique and traceable."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_enhanced_execution_debugging.py:46:1
   |
44 |         symbol = "AAPL"
45 |         side = "buy"
46 |         
   | ^^^^^^^^
47 |         # Generate multiple correlation IDs
48 |         id1 = self.debug_tracker.generate_correlation_id(symbol, side)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_enhanced_execution_debugging.py:51:1
   |
49 |         time.sleep(0.001)  # Ensure different timestamps
50 |         id2 = self.debug_tracker.generate_correlation_id(symbol, side)
51 |         
   | ^^^^^^^^
52 |         # Check they are unique
53 |         self.assertNotEqual(id1, id2)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_enhanced_execution_debugging.py:54:1
   |
52 |         # Check they are unique
53 |         self.assertNotEqual(id1, id2)
54 |         
   | ^^^^^^^^
55 |         # Check they contain symbol and side
56 |         self.assertIn(symbol, id1)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_enhanced_execution_debugging.py:58:1
   |
56 |         self.assertIn(symbol, id1)
57 |         self.assertIn(side, id1)
58 |         
   | ^^^^^^^^
59 |     def test_execution_tracking_lifecycle(self):
60 |         """Test complete execution tracking from signal to completion."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_enhanced_execution_debugging.py:64:1
   |
62 |         side = "buy"
63 |         qty = 100
64 |         
   | ^^^^^^^^
65 |         # Start tracking
66 |         self.debug_tracker.start_execution_tracking(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_enhanced_execution_debugging.py:73:1
   |
71 |             signal_data={'strategy': 'test_strategy', 'confidence': 0.8}
72 |         )
73 |         
   | ^^^^^^^^
74 |         # Check order is in active tracking
75 |         active_orders = self.debug_tracker.get_active_orders()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_enhanced_execution_debugging.py:80:1
   |
78 |         self.assertEqual(active_orders["test_id_123"]["qty"], qty)
79 |         self.assertEqual(active_orders["test_id_123"]["side"], side)
80 |         
   | ^^^^^^^^
81 |         # Log execution phases
82 |         self.debug_tracker.log_execution_event(
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_enhanced_execution_debugging.py:83:27
   |
81 |         # Log execution phases
82 |         self.debug_tracker.log_execution_event(
83 |             "test_id_123", 
   |                           ^
84 |             ExecutionPhase.RISK_CHECK,
85 |             {'risk_score': 0.3}
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_enhanced_execution_debugging.py:87:1
   |
85 |             {'risk_score': 0.3}
86 |         )
87 |         
   | ^^^^^^^^
88 |         self.debug_tracker.log_execution_event(
89 |             "test_id_123",
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_enhanced_execution_debugging.py:93:1
   |
91 |             {'order_id': 'alpaca_123', 'price': 150.00}
92 |         )
93 |         
   | ^^^^^^^^
94 |         self.debug_tracker.log_execution_event(
95 |             "test_id_123",
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:99:1
    |
 97 |             {'fill_price': 150.05, 'fill_qty': qty}
 98 |         )
 99 |         
    | ^^^^^^^^
100 |         # Check status updates
101 |         active_orders = self.debug_tracker.get_active_orders()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:103:1
    |
101 |         active_orders = self.debug_tracker.get_active_orders()
102 |         self.assertEqual(active_orders["test_id_123"]["status"], OrderStatus.FILLED.value)
103 |         
    | ^^^^^^^^
104 |         # Log successful completion
105 |         self.debug_tracker.log_order_result(
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_enhanced_execution_debugging.py:106:27
    |
104 |         # Log successful completion
105 |         self.debug_tracker.log_order_result(
106 |             "test_id_123", 
    |                           ^
107 |             success=True,
108 |             order_data={'final_price': 150.05, 'total_cost': 15005.00}
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:110:1
    |
108 |             order_data={'final_price': 150.05, 'total_cost': 15005.00}
109 |         )
110 |         
    | ^^^^^^^^
111 |         # Check order moved to completed
112 |         active_orders = self.debug_tracker.get_active_orders()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:114:1
    |
112 |         active_orders = self.debug_tracker.get_active_orders()
113 |         self.assertNotIn("test_id_123", active_orders)
114 |         
    | ^^^^^^^^
115 |         # Check execution timeline
116 |         timeline = self.debug_tracker.get_execution_timeline("test_id_123")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:118:1
    |
116 |         timeline = self.debug_tracker.get_execution_timeline("test_id_123")
117 |         self.assertEqual(len(timeline), 4)  # signal + risk + submit + fill
118 |         
    | ^^^^^^^^
119 |         # Check recent executions
120 |         recent = self.debug_tracker.get_recent_executions(limit=1)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:124:1
    |
122 |         self.assertEqual(recent[0]['symbol'], symbol)
123 |         self.assertTrue(recent[0].get('success', False))
124 |         
    | ^^^^^^^^
125 |     def test_failed_execution_tracking(self):
126 |         """Test tracking of failed executions."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:129:1
    |
127 |         symbol = "INVALID"
128 |         correlation_id = "failed_test_123"
129 |         
    | ^^^^^^^^
130 |         self.debug_tracker.start_execution_tracking(
131 |             correlation_id, symbol, 50, "buy"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:133:1
    |
131 |             correlation_id, symbol, 50, "buy"
132 |         )
133 |         
    | ^^^^^^^^
134 |         # Log rejection
135 |         self.debug_tracker.log_execution_event(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:140:1
    |
138 |             {'reason': 'Invalid symbol'}
139 |         )
140 |         
    | ^^^^^^^^
141 |         # Log failure
142 |         self.debug_tracker.log_order_result(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:147:1
    |
145 |             error="Symbol not found"
146 |         )
147 |         
    | ^^^^^^^^
148 |         # Check in failed executions
149 |         failed = self.debug_tracker.get_failed_executions(limit=1)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:153:1
    |
151 |         self.assertEqual(failed[0]['symbol'], symbol)
152 |         self.assertFalse(failed[0].get('success', True))
153 |         
    | ^^^^^^^^
154 |     def test_position_update_tracking(self):
155 |         """Test position update tracking with correlation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:158:1
    |
156 |         symbol = "MSFT"
157 |         correlation_id = "position_test_123"
158 |         
    | ^^^^^^^^
159 |         # Log position change
160 |         self.debug_tracker.log_position_update(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:166:1
    |
164 |             correlation_id=correlation_id
165 |         )
166 |         
    | ^^^^^^^^
167 |         # Get position updates
168 |         updates = self.debug_tracker.get_position_updates(symbol=symbol, limit=1)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:174:1
    |
172 |         self.assertEqual(updates[0]['new_qty'], 100)
173 |         self.assertEqual(updates[0]['qty_change'], 100)
174 |         
    | ^^^^^^^^
175 |     def test_execution_statistics(self):
176 |         """Test execution statistics calculation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:183:1
    |
181 |                 correlation_id, "TEST", 100, "buy"
182 |             )
183 |             
    | ^^^^^^^^^^^^
184 |         # Complete 2 successfully, fail 1
185 |         self.debug_tracker.log_order_result("stats_test_0", True)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:188:1
    |
186 |         self.debug_tracker.log_order_result("stats_test_1", True)
187 |         self.debug_tracker.log_order_result("stats_test_2", False, error="Test failure")
188 |         
    | ^^^^^^^^
189 |         stats = self.debug_tracker.get_execution_stats()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:190:1
    |
189 |         stats = self.debug_tracker.get_execution_stats()
190 |         
    | ^^^^^^^^
191 |         self.assertEqual(stats['active_orders'], 0)
192 |         self.assertEqual(stats['recent_successes'], 2)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:199:1
    |
197 | class TestPositionReconciliation(unittest.TestCase):
198 |     """Test position reconciliation functionality."""
199 |     
    | ^^^^
200 |     def setUp(self):
201 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:204:1
    |
202 |         if not ENHANCED_DEBUGGING_AVAILABLE:
203 |             self.skipTest("Enhanced debugging modules not available")
204 |             
    | ^^^^^^^^^^^^
205 |         # Create mock API client
206 |         self.mock_api = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:208:1
    |
206 |         self.mock_api = Mock()
207 |         self.reconciler = PositionReconciler(self.mock_api)
208 |         
    | ^^^^^^^^
209 |     def test_bot_position_tracking(self):
210 |         """Test bot position tracking updates."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:212:1
    |
210 |         """Test bot position tracking updates."""
211 |         symbol = "AAPL"
212 |         
    | ^^^^^^^^
213 |         # Update position
214 |         self.reconciler.update_bot_position(symbol, 100, "trade_execution")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:215:1
    |
213 |         # Update position
214 |         self.reconciler.update_bot_position(symbol, 100, "trade_execution")
215 |         
    | ^^^^^^^^
216 |         positions = self.reconciler.get_bot_positions()
217 |         self.assertEqual(positions[symbol], 100)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:218:1
    |
216 |         positions = self.reconciler.get_bot_positions()
217 |         self.assertEqual(positions[symbol], 100)
218 |         
    | ^^^^^^^^
219 |         # Adjust position
220 |         self.reconciler.adjust_bot_position(symbol, 50, "additional_trade")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:221:1
    |
219 |         # Adjust position
220 |         self.reconciler.adjust_bot_position(symbol, 50, "additional_trade")
221 |         
    | ^^^^^^^^
222 |         positions = self.reconciler.get_bot_positions()
223 |         self.assertEqual(positions[symbol], 150)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:224:1
    |
222 |         positions = self.reconciler.get_bot_positions()
223 |         self.assertEqual(positions[symbol], 150)
224 |         
    | ^^^^^^^^
225 |     def test_discrepancy_detection(self):
226 |         """Test position discrepancy detection."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:228:1
    |
226 |         """Test position discrepancy detection."""
227 |         symbol = "MSFT"
228 |         
    | ^^^^^^^^
229 |         # Set bot position
230 |         self.reconciler.update_bot_position(symbol, 100, "test")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:231:1
    |
229 |         # Set bot position
230 |         self.reconciler.update_bot_position(symbol, 100, "test")
231 |         
    | ^^^^^^^^
232 |         # Mock broker returning different position
233 |         self.mock_api.get_all_positions.return_value = []  # Empty positions from broker
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:234:1
    |
232 |         # Mock broker returning different position
233 |         self.mock_api.get_all_positions.return_value = []  # Empty positions from broker
234 |         
    | ^^^^^^^^
235 |         # Override the get_broker_positions method for testing
236 |         def mock_get_broker_positions():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:238:1
    |
236 |         def mock_get_broker_positions():
237 |             return {symbol: 0}  # Broker shows no position
238 |         
    | ^^^^^^^^
239 |         self.reconciler.get_broker_positions = mock_get_broker_positions
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:240:1
    |
239 |         self.reconciler.get_broker_positions = mock_get_broker_positions
240 |         
    | ^^^^^^^^
241 |         # Run reconciliation
242 |         discrepancies = self.reconciler.reconcile_positions()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:243:1
    |
241 |         # Run reconciliation
242 |         discrepancies = self.reconciler.reconcile_positions()
243 |         
    | ^^^^^^^^
244 |         # Should detect discrepancy
245 |         self.assertEqual(len(discrepancies), 1)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:250:1
    |
248 |         self.assertEqual(discrepancies[0].broker_qty, 0)
249 |         self.assertEqual(discrepancies[0].discrepancy_type, "phantom_position")
250 |         
    | ^^^^^^^^
251 |     def test_discrepancy_classification(self):
252 |         """Test different types of discrepancy classification."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:254:1
    |
252 |         """Test different types of discrepancy classification."""
253 |         symbol = "TEST"
254 |         
    | ^^^^^^^^
255 |         # Test missing position (bot=0, broker=100)
256 |         discrepancy_type = self.reconciler._classify_discrepancy(0, 100)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:258:1
    |
256 |         discrepancy_type = self.reconciler._classify_discrepancy(0, 100)
257 |         self.assertEqual(discrepancy_type, "missing_position")
258 |         
    | ^^^^^^^^
259 |         # Test phantom position (bot=100, broker=0)
260 |         discrepancy_type = self.reconciler._classify_discrepancy(100, 0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:262:1
    |
260 |         discrepancy_type = self.reconciler._classify_discrepancy(100, 0)
261 |         self.assertEqual(discrepancy_type, "phantom_position")
262 |         
    | ^^^^^^^^
263 |         # Test direction mismatch (bot=100, broker=-50)
264 |         discrepancy_type = self.reconciler._classify_discrepancy(100, -50)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:266:1
    |
264 |         discrepancy_type = self.reconciler._classify_discrepancy(100, -50)
265 |         self.assertEqual(discrepancy_type, "direction_mismatch")
266 |         
    | ^^^^^^^^
267 |         # Test quantity mismatch (bot=100, broker=150)
268 |         discrepancy_type = self.reconciler._classify_discrepancy(100, 150)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:270:1
    |
268 |         discrepancy_type = self.reconciler._classify_discrepancy(100, 150)
269 |         self.assertEqual(discrepancy_type, "quantity_mismatch")
270 |         
    | ^^^^^^^^
271 |     def test_severity_determination(self):
272 |         """Test discrepancy severity determination."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:274:1
    |
272 |         """Test discrepancy severity determination."""
273 |         symbol = "TEST"
274 |         
    | ^^^^^^^^
275 |         # High severity (>=10 shares difference)
276 |         severity = self.reconciler._determine_severity(symbol, 0, 15)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:278:1
    |
276 |         severity = self.reconciler._determine_severity(symbol, 0, 15)
277 |         self.assertEqual(severity, "high")
278 |         
    | ^^^^^^^^
279 |         # Medium severity (>=1 share difference)
280 |         severity = self.reconciler._determine_severity(symbol, 100, 105)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:282:1
    |
280 |         severity = self.reconciler._determine_severity(symbol, 100, 105)
281 |         self.assertEqual(severity, "medium")
282 |         
    | ^^^^^^^^
283 |         # Low severity (<1 share difference)
284 |         severity = self.reconciler._determine_severity(symbol, 100, 100.5)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:286:1
    |
284 |         severity = self.reconciler._determine_severity(symbol, 100, 100.5)
285 |         self.assertEqual(severity, "low")
286 |         
    | ^^^^^^^^
287 |     def test_auto_resolution(self):
288 |         """Test automatic discrepancy resolution."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:290:1
    |
288 |         """Test automatic discrepancy resolution."""
289 |         symbol = "NVDA"
290 |         
    | ^^^^^^^^
291 |         # Create low severity discrepancy
292 |         discrepancy = PositionDiscrepancy(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:299:1
    |
297 |             severity="low"
298 |         )
299 |         
    | ^^^^^^^^
300 |         # Auto-resolve should update bot position
301 |         resolved = self.reconciler.auto_resolve_discrepancies([discrepancy])
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:303:1
    |
301 |         resolved = self.reconciler.auto_resolve_discrepancies([discrepancy])
302 |         self.assertEqual(resolved, 1)
303 |         
    | ^^^^^^^^
304 |         # Check bot position was updated
305 |         positions = self.reconciler.get_bot_positions()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:311:1
    |
309 | class TestPnLAttribution(unittest.TestCase):
310 |     """Test PnL attribution functionality."""
311 |     
    | ^^^^
312 |     def setUp(self):
313 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:316:1
    |
314 |         if not ENHANCED_DEBUGGING_AVAILABLE:
315 |             self.skipTest("Enhanced debugging modules not available")
316 |             
    | ^^^^^^^^^^^^
317 |         self.attributor = PnLAttributor()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:318:1
    |
317 |         self.attributor = PnLAttributor()
318 |         
    | ^^^^^^^^
319 |     def test_trade_pnl_recording(self):
320 |         """Test recording PnL from trades."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:323:1
    |
321 |         symbol = "AAPL"
322 |         correlation_id = "trade_pnl_test"
323 |         
    | ^^^^^^^^
324 |         # Record a profitable trade
325 |         self.attributor.add_trade_pnl(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:334:1
    |
332 |             correlation_id=correlation_id
333 |         )
334 |         
    | ^^^^^^^^
335 |         # Check PnL events were created
336 |         recent_events = self.attributor.get_recent_pnl_events(symbol=symbol, limit=10)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:337:1
    |
335 |         # Check PnL events were created
336 |         recent_events = self.attributor.get_recent_pnl_events(symbol=symbol, limit=10)
337 |         
    | ^^^^^^^^
338 |         # Should have 3 events: trade PnL, fees, slippage
339 |         self.assertEqual(len(recent_events), 3)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:340:1
    |
338 |         # Should have 3 events: trade PnL, fees, slippage
339 |         self.assertEqual(len(recent_events), 3)
340 |         
    | ^^^^^^^^
341 |         # Find trade PnL event
342 |         trade_event = next(e for e in recent_events if e['source'] == PnLSource.POSITION_CHANGE.value)
    |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> tests/test_enhanced_execution_debugging.py:342:101
    |
341 |         # Find trade PnL event
342 |         trade_event = next(e for e in recent_events if e['source'] == PnLSource.POSITION_CHANGE.value)
    |                                                                                                     ^^
343 |         self.assertEqual(trade_event['pnl_amount'], 500.00)  # 100 * (150 - 145)
    |

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:344:1
    |
342 |         trade_event = next(e for e in recent_events if e['source'] == PnLSource.POSITION_CHANGE.value)
343 |         self.assertEqual(trade_event['pnl_amount'], 500.00)  # 100 * (150 - 145)
344 |         
    | ^^^^^^^^
345 |         # Find fees event
346 |         fees_event = next(e for e in recent_events if e['source'] == PnLSource.FEES.value)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:348:1
    |
346 |         fees_event = next(e for e in recent_events if e['source'] == PnLSource.FEES.value)
347 |         self.assertEqual(fees_event['pnl_amount'], -1.00)
348 |         
    | ^^^^^^^^
349 |         # Find slippage event
350 |         slippage_event = next(e for e in recent_events if e['source'] == PnLSource.SLIPPAGE.value)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:352:1
    |
350 |         slippage_event = next(e for e in recent_events if e['source'] == PnLSource.SLIPPAGE.value)
351 |         self.assertEqual(slippage_event['pnl_amount'], -0.50)
352 |         
    | ^^^^^^^^
353 |     def test_position_snapshot_pnl_attribution(self):
354 |         """Test PnL attribution from position snapshots."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:356:1
    |
354 |         """Test PnL attribution from position snapshots."""
355 |         symbol = "MSFT"
356 |         
    | ^^^^^^^^
357 |         # Initial position snapshot
358 |         self.attributor.update_position_snapshot(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:364:1
    |
362 |             market_price=200.00
363 |         )
364 |         
    | ^^^^^^^^
365 |         # Update with price movement
366 |         self.attributor.update_position_snapshot(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:372:1
    |
370 |             market_price=205.00  # $5 price increase
371 |         )
372 |         
    | ^^^^^^^^
373 |         # Check market movement PnL was recorded
374 |         recent_events = self.attributor.get_recent_pnl_events(symbol=symbol, limit=5)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:376:1
    |
374 |         recent_events = self.attributor.get_recent_pnl_events(symbol=symbol, limit=5)
375 |         market_events = [e for e in recent_events if e['source'] == PnLSource.MARKET_MOVEMENT.value]
376 |         
    | ^^^^^^^^
377 |         self.assertEqual(len(market_events), 1)
378 |         self.assertEqual(market_events[0]['pnl_amount'], 500.00)  # 100 * $5
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:379:1
    |
377 |         self.assertEqual(len(market_events), 1)
378 |         self.assertEqual(market_events[0]['pnl_amount'], 500.00)  # 100 * $5
379 |         
    | ^^^^^^^^
380 |     def test_pnl_summary_and_breakdown(self):
381 |         """Test PnL summary and breakdown functionality."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:383:1
    |
381 |         """Test PnL summary and breakdown functionality."""
382 |         symbol = "GOOGL"
383 |         
    | ^^^^^^^^
384 |         # Add various PnL events
385 |         self.attributor.add_trade_pnl(symbol, 50, 2800.00, 2750.00, fees=2.50)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:388:1
    |
386 |         self.attributor.add_dividend_pnl(symbol, 0.50, 50)
387 |         self.attributor.add_manual_adjustment(symbol, -10.00, "Test adjustment")
388 |         
    | ^^^^^^^^
389 |         # Get symbol breakdown
390 |         breakdown = self.attributor.get_pnl_by_symbol(symbol)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:391:1
    |
389 |         # Get symbol breakdown
390 |         breakdown = self.attributor.get_pnl_by_symbol(symbol)
391 |         
    | ^^^^^^^^
392 |         # Should have position change, fees, dividend, and adjustment
393 |         self.assertIn(PnLSource.POSITION_CHANGE.value, breakdown)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:397:1
    |
395 |         self.assertIn(PnLSource.DIVIDEND.value, breakdown)
396 |         self.assertIn(PnLSource.ADJUSTMENT.value, breakdown)
397 |         
    | ^^^^^^^^
398 |         # Check values
399 |         self.assertEqual(breakdown[PnLSource.POSITION_CHANGE.value], 2500.00)  # 50 * (2800 - 2750)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:403:1
    |
401 |         self.assertEqual(breakdown[PnLSource.DIVIDEND.value], 25.00)  # 0.50 * 50
402 |         self.assertEqual(breakdown[PnLSource.ADJUSTMENT.value], -10.00)
403 |         
    | ^^^^^^^^
404 |     def test_pnl_explanation(self):
405 |         """Test PnL change explanation functionality."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:407:1
    |
405 |         """Test PnL change explanation functionality."""
406 |         symbol = "TSLA"
407 |         
    | ^^^^^^^^
408 |         # Add some PnL events
409 |         self.attributor.add_trade_pnl(symbol, 25, 800.00, 750.00, fees=1.25)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:411:1
    |
409 |         self.attributor.add_trade_pnl(symbol, 25, 800.00, 750.00, fees=1.25)
410 |         self.attributor.add_manual_adjustment(symbol, 5.00, "Price correction")
411 |         
    | ^^^^^^^^
412 |         # Get explanation
413 |         explanation = self.attributor.explain_pnl_change(symbol, time_window_minutes=60)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:414:1
    |
412 |         # Get explanation
413 |         explanation = self.attributor.explain_pnl_change(symbol, time_window_minutes=60)
414 |         
    | ^^^^^^^^
415 |         self.assertEqual(explanation['symbol'], symbol)
416 |         self.assertEqual(explanation['total_change'], 1253.75)  # 1250 - 1.25 + 5
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:419:1
    |
417 |         self.assertIn('gained', explanation['explanation'])
418 |         self.assertEqual(explanation['events_count'], 3)  # trade, fees, adjustment
419 |         
    | ^^^^^^^^
420 |     def test_dividend_pnl_recording(self):
421 |         """Test dividend PnL recording."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:423:1
    |
421 |         """Test dividend PnL recording."""
422 |         symbol = "KO"
423 |         
    | ^^^^^^^^
424 |         self.attributor.add_dividend_pnl(
425 |             symbol=symbol,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:430:1
    |
428 |             correlation_id="dividend_test"
429 |         )
430 |         
    | ^^^^^^^^
431 |         recent_events = self.attributor.get_recent_pnl_events(symbol=symbol, limit=5)
432 |         dividend_events = [e for e in recent_events if e['source'] == PnLSource.DIVIDEND.value]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:433:1
    |
431 |         recent_events = self.attributor.get_recent_pnl_events(symbol=symbol, limit=5)
432 |         dividend_events = [e for e in recent_events if e['source'] == PnLSource.DIVIDEND.value]
433 |         
    | ^^^^^^^^
434 |         self.assertEqual(len(dividend_events), 1)
435 |         self.assertEqual(dividend_events[0]['pnl_amount'], 44.00)  # 0.44 * 100
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:440:1
    |
438 | class TestIntegratedExecutionDebugging(unittest.TestCase):
439 |     """Test integrated execution debugging across all modules."""
440 |     
    | ^^^^
441 |     def setUp(self):
442 |         """Set up integrated test environment."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:445:1
    |
443 |         if not ENHANCED_DEBUGGING_AVAILABLE:
444 |             self.skipTest("Enhanced debugging modules not available")
445 |             
    | ^^^^^^^^^^^^
446 |         # Get global instances
447 |         self.debug_tracker = get_debug_tracker()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:450:1
    |
448 |         self.reconciler = get_position_reconciler()
449 |         self.attributor = get_pnl_attributor()
450 |         
    | ^^^^^^^^
451 |         # Enable debug mode
452 |         self.debug_tracker.set_debug_mode(verbose=True, trace=True)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:453:1
    |
451 |         # Enable debug mode
452 |         self.debug_tracker.set_debug_mode(verbose=True, trace=True)
453 |         
    | ^^^^^^^^
454 |     def test_complete_trade_lifecycle_debugging(self):
455 |         """Test complete trade lifecycle with all debugging features."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:459:1
    |
457 |         qty = 50
458 |         side = "buy"
459 |         
    | ^^^^^^^^
460 |         # Start execution tracking
461 |         correlation_id = log_signal_to_execution(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:467:1
    |
465 |             signal_data={'strategy': 'momentum', 'confidence': 0.9}
466 |         )
467 |         
    | ^^^^^^^^
468 |         # Simulate trade execution phases
469 |         from ai_trading.execution.debug_tracker import log_execution_phase, ExecutionPhase
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_enhanced_execution_debugging.py:469:9
    |
468 |         # Simulate trade execution phases
469 |         from ai_trading.execution.debug_tracker import log_execution_phase, ExecutionPhase
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
470 |         
471 |         log_execution_phase(correlation_id, ExecutionPhase.RISK_CHECK, {'risk_score': 0.2})
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:470:1
    |
468 |         # Simulate trade execution phases
469 |         from ai_trading.execution.debug_tracker import log_execution_phase, ExecutionPhase
470 |         
    | ^^^^^^^^
471 |         log_execution_phase(correlation_id, ExecutionPhase.RISK_CHECK, {'risk_score': 0.2})
472 |         log_execution_phase(correlation_id, ExecutionPhase.ORDER_PREPARED, {'order_type': 'market'})
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> tests/test_enhanced_execution_debugging.py:473:101
    |
471 |         log_execution_phase(correlation_id, ExecutionPhase.RISK_CHECK, {'risk_score': 0.2})
472 |         log_execution_phase(correlation_id, ExecutionPhase.ORDER_PREPARED, {'order_type': 'market'})
473 |         log_execution_phase(correlation_id, ExecutionPhase.ORDER_SUBMITTED, {'order_id': 'test_123'})
    |                                                                                                     ^
474 |         
475 |         # Simulate successful fill
    |

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:474:1
    |
472 |         log_execution_phase(correlation_id, ExecutionPhase.ORDER_PREPARED, {'order_type': 'market'})
473 |         log_execution_phase(correlation_id, ExecutionPhase.ORDER_SUBMITTED, {'order_id': 'test_123'})
474 |         
    | ^^^^^^^^
475 |         # Simulate successful fill
476 |         execution_price = 3200.00
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:478:1
    |
476 |         execution_price = 3200.00
477 |         avg_cost = 3200.00
478 |         
    | ^^^^^^^^
479 |         log_execution_phase(correlation_id, ExecutionPhase.ORDER_FILLED, {
480 |             'fill_price': execution_price,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:483:1
    |
481 |             'fill_qty': qty
482 |         })
483 |         
    | ^^^^^^^^
484 |         # Update position tracking
485 |         from ai_trading.execution.position_reconciler import update_bot_position
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:487:1
    |
485 |         from ai_trading.execution.position_reconciler import update_bot_position
486 |         update_bot_position(symbol, qty, f"trade_execution_{correlation_id}")
487 |         
    | ^^^^^^^^
488 |         # Record PnL
489 |         from ai_trading.execution.pnl_attributor import record_trade_pnl, update_position_for_pnl
    |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
   --> tests/test_enhanced_execution_debugging.py:490:101
    |
488 |         # Record PnL
489 |         from ai_trading.execution.pnl_attributor import record_trade_pnl, update_position_for_pnl
490 |         record_trade_pnl(symbol, qty, execution_price, avg_cost, fees=2.50, correlation_id=correlation_id)
    |                                                                                                     ^^^^^^
491 |         update_position_for_pnl(symbol, qty, avg_cost, execution_price, correlation_id)
    |

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:492:1
    |
490 |         record_trade_pnl(symbol, qty, execution_price, avg_cost, fees=2.50, correlation_id=correlation_id)
491 |         update_position_for_pnl(symbol, qty, avg_cost, execution_price, correlation_id)
492 |         
    | ^^^^^^^^
493 |         # Log successful completion
494 |         from ai_trading.execution.debug_tracker import log_order_outcome
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:496:1
    |
494 |         from ai_trading.execution.debug_tracker import log_order_outcome
495 |         log_order_outcome(correlation_id, True, {'final_qty': qty, 'avg_price': execution_price})
496 |         
    | ^^^^^^^^
497 |         # Verify all systems tracked the trade
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:498:1
    |
497 |         # Verify all systems tracked the trade
498 |         
    | ^^^^^^^^
499 |         # Check debug tracker
500 |         timeline = self.debug_tracker.get_execution_timeline(correlation_id)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:502:1
    |
500 |         timeline = self.debug_tracker.get_execution_timeline(correlation_id)
501 |         self.assertGreater(len(timeline), 4)  # Should have multiple phases
502 |         
    | ^^^^^^^^
503 |         recent_executions = self.debug_tracker.get_recent_executions(limit=1)
504 |         self.assertEqual(len(recent_executions), 1)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:506:1
    |
504 |         self.assertEqual(len(recent_executions), 1)
505 |         self.assertTrue(recent_executions[0].get('success', False))
506 |         
    | ^^^^^^^^
507 |         # Check position reconciler
508 |         bot_positions = self.reconciler.get_bot_positions()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:510:1
    |
508 |         bot_positions = self.reconciler.get_bot_positions()
509 |         self.assertEqual(bot_positions.get(symbol, 0), qty)
510 |         
    | ^^^^^^^^
511 |         # Check PnL attributor
512 |         symbol_pnl = self.attributor.get_pnl_by_symbol(symbol)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:515:1
    |
513 |         self.assertIn(PnLSource.FEES.value, symbol_pnl)
514 |         self.assertEqual(symbol_pnl[PnLSource.FEES.value], -2.50)
515 |         
    | ^^^^^^^^
516 |         # Get integrated statistics
517 |         debug_stats = self.debug_tracker.get_execution_stats()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:520:1
    |
518 |         reconcile_stats = self.reconciler.get_reconciliation_stats()
519 |         pnl_stats = self.attributor.calculate_attribution_statistics()
520 |         
    | ^^^^^^^^
521 |         # Verify statistics are consistent
522 |         self.assertGreater(debug_stats['recent_successes'], 0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:530:1
    |
528 |     # Create test suite
529 |     test_suite = unittest.TestSuite()
530 |     
    | ^^^^
531 |     # Add test classes
532 |     test_classes = [
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_enhanced_execution_debugging.py:534:36
    |
532 |     test_classes = [
533 |         TestExecutionDebugging,
534 |         TestPositionReconciliation, 
    |                                    ^
535 |         TestPnLAttribution,
536 |         TestIntegratedExecutionDebugging
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:538:1
    |
536 |         TestIntegratedExecutionDebugging
537 |     ]
538 |     
    | ^^^^
539 |     for test_class in test_classes:
540 |         tests = unittest.TestLoader().loadTestsFromTestCase(test_class)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:542:1
    |
540 |         tests = unittest.TestLoader().loadTestsFromTestCase(test_class)
541 |         test_suite.addTests(tests)
542 |     
    | ^^^^
543 |     # Run tests
544 |     runner = unittest.TextTestRunner(verbosity=2)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:546:1
    |
544 |     runner = unittest.TextTestRunner(verbosity=2)
545 |     result = runner.run(test_suite)
546 |     
    | ^^^^
547 |     # Print summary
548 |     print(f"\nTests run: {result.testsRun}")
    |
help: Remove whitespace from blank line

E501 Line too long (122 > 100)
   --> tests/test_enhanced_execution_debugging.py:551:101
    |
549 |     print(f"Failures: {len(result.failures)}")
550 |     print(f"Errors: {len(result.errors)}")
551 |     print(f"Success rate: {((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun * 100):.1f}%")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
552 |     
553 |     if result.failures:
    |

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:552:1
    |
550 |     print(f"Errors: {len(result.errors)}")
551 |     print(f"Success rate: {((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun * 100):.1f}%")
552 |     
    | ^^^^
553 |     if result.failures:
554 |         print("\nFailures:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_enhanced_execution_debugging.py:557:1
    |
555 |         for test, traceback in result.failures:
556 |             print(f"- {test}: {traceback}")
557 |     
    | ^^^^
558 |     if result.errors:
559 |         print("\nErrors:")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_enhanced_execution_debugging.py:561:44
    |
559 |         print("\nErrors:")
560 |         for test, traceback in result.errors:
561 |             print(f"- {test}: {traceback}")
    |                                            ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_ensure_utc.py:1:1
  |
1 | / from datetime import datetime, date, timezone
2 | |
3 | | import pytest
4 | |
5 | | from ai_trading.data.timeutils import ensure_utc_datetime
  | |_________________________________________________________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_env_flags.py:20:1
   |
18 |         ("invalid", False),  # invalid values should default to False
19 |     ]
20 |     
   | ^^^^
21 |     for env_value, expected in test_cases:
22 |         # Set the environment variable
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_flags.py:25:1
   |
23 |         os.environ["DISABLE_DAILY_RETRAIN"] = env_value
24 |         os.environ["TESTING"] = "1"  # Enable testing mode
25 |         
   | ^^^^^^^^
26 |         # Clear module cache to force re-import
27 |         if 'config' in os.sys.modules:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_flags.py:29:1
   |
27 |         if 'config' in os.sys.modules:
28 |             del os.sys.modules['config']
29 |         
   | ^^^^^^^^
30 |         # Import config module
31 |         import ai_trading.config as config
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_flags.py:32:1
   |
30 |         # Import config module
31 |         import ai_trading.config as config
32 |         
   | ^^^^^^^^
33 |         # Test the result
34 |         actual = config.DISABLE_DAILY_RETRAIN
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_flags.py:36:1
   |
34 |         actual = config.DISABLE_DAILY_RETRAIN
35 |         assert actual == expected, f"For env value '{env_value}', expected {expected}, got {actual}"
36 |         
   | ^^^^^^^^
37 |         # Clean up
38 |         if 'config' in os.sys.modules:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_flags.py:47:1
   |
45 |     if "DISABLE_DAILY_RETRAIN" in os.environ:
46 |         del os.environ["DISABLE_DAILY_RETRAIN"]
47 |     
   | ^^^^
48 |     os.environ["TESTING"] = "1"  # Enable testing mode
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_flags.py:49:1
   |
48 |     os.environ["TESTING"] = "1"  # Enable testing mode
49 |     
   | ^^^^
50 |     # Clear module cache
51 |     if 'config' in os.sys.modules:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_flags.py:53:1
   |
51 |     if 'config' in os.sys.modules:
52 |         del os.sys.modules['config']
53 |     
   | ^^^^
54 |     # Import config module
55 |     import ai_trading.config as config
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_flags.py:56:1
   |
54 |     # Import config module
55 |     import ai_trading.config as config
56 |     
   | ^^^^
57 |     # Should default to False
58 |     assert config.DISABLE_DAILY_RETRAIN == False
   |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `False`; use `not config.DISABLE_DAILY_RETRAIN:` for false checks
  --> tests/test_env_flags.py:58:12
   |
57 |     # Should default to False
58 |     assert config.DISABLE_DAILY_RETRAIN == False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
59 |     
60 |     # Clean up
   |
help: Replace with `not config.DISABLE_DAILY_RETRAIN`

W293 [*] Blank line contains whitespace
  --> tests/test_env_flags.py:59:1
   |
57 |     # Should default to False
58 |     assert config.DISABLE_DAILY_RETRAIN == False
59 |     
   | ^^^^
60 |     # Clean up
61 |     if 'config' in os.sys.modules:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_flags.py:70:1
   |
68 |     if 'config' in os.sys.modules:
69 |         del os.sys.modules['config']
70 |     
   | ^^^^
71 |     os.environ["TESTING"] = "1"
72 |     os.environ["DISABLE_DAILY_RETRAIN"] = "true"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_flags.py:73:1
   |
71 |     os.environ["TESTING"] = "1"
72 |     os.environ["DISABLE_DAILY_RETRAIN"] = "true"
73 |     
   | ^^^^
74 |     import ai_trading.config as config
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_flags.py:75:1
   |
74 |     import ai_trading.config as config
75 |     
   | ^^^^
76 |     # Check that fallback settings work
77 |     fallback = config._FallbackSettings()
   |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `True`; use `fallback.DISABLE_DAILY_RETRAIN:` for truth checks
  --> tests/test_env_flags.py:78:12
   |
76 |     # Check that fallback settings work
77 |     fallback = config._FallbackSettings()
78 |     assert fallback.DISABLE_DAILY_RETRAIN == True
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
79 |     
80 |     os.environ["DISABLE_DAILY_RETRAIN"] = "false"
   |
help: Replace with `fallback.DISABLE_DAILY_RETRAIN`

W293 [*] Blank line contains whitespace
  --> tests/test_env_flags.py:79:1
   |
77 |     fallback = config._FallbackSettings()
78 |     assert fallback.DISABLE_DAILY_RETRAIN == True
79 |     
   | ^^^^
80 |     os.environ["DISABLE_DAILY_RETRAIN"] = "false"
81 |     fallback2 = config._FallbackSettings()
   |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `False`; use `not fallback2.DISABLE_DAILY_RETRAIN:` for false checks
  --> tests/test_env_flags.py:82:12
   |
80 |     os.environ["DISABLE_DAILY_RETRAIN"] = "false"
81 |     fallback2 = config._FallbackSettings()
82 |     assert fallback2.DISABLE_DAILY_RETRAIN == False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Replace with `not fallback2.DISABLE_DAILY_RETRAIN`

W293 [*] Blank line contains whitespace
  --> tests/test_env_flags.py:91:1
   |
89 |         if var in os.environ:
90 |             del os.environ[var]
91 |     
   | ^^^^
92 |     # Clear module cache
93 |     if 'config' in os.sys.modules:
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_env_flags.py:94:37
   |
92 |     # Clear module cache
93 |     if 'config' in os.sys.modules:
94 |         del os.sys.modules['config']
   |                                     ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_env_order_and_lazy_import.py:8:1
   |
 6 |   """
 7 |
 8 | / import pytest
 9 | | import os
10 | | import tempfile
11 | | from unittest.mock import patch, MagicMock
   | |__________________________________________^
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_env_order_and_lazy_import.py:16:1
   |
14 | class TestEnvironmentOrderAndLazyImport:
15 |     """Test environment loading order and lazy imports."""
16 |     
   | ^^^^
17 |     def test_dotenv_loaded_before_settings_construction(self):
18 |         """Test that .env is loaded before Settings is constructed."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_order_and_lazy_import.py:24:1
   |
22 |             f.write("ALPACA_API_KEY=test_from_dotenv\n")
23 |             temp_env_path = f.name
24 |         
   | ^^^^^^^^
25 |         try:
26 |             # Clear any existing env var
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_order_and_lazy_import.py:31:1
   |
29 |             if 'ALPACA_API_KEY' in os.environ:
30 |                 del os.environ['ALPACA_API_KEY']
31 |             
   | ^^^^^^^^^^^^
32 |             # Mock dotenv.load_dotenv to load our temp file
33 |             with patch('dotenv.load_dotenv') as mock_load_dotenv:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_order_and_lazy_import.py:41:1
   |
39 |                                 key, value = line.strip().split('=', 1)
40 |                                 os.environ[key] = value
41 |                 
   | ^^^^^^^^^^^^^^^^
42 |                 mock_load_dotenv.side_effect = side_effect
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_order_and_lazy_import.py:43:1
   |
42 |                 mock_load_dotenv.side_effect = side_effect
43 |                 
   | ^^^^^^^^^^^^^^^^
44 |                 # Import main module (this should load .env before Settings)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_order_and_lazy_import.py:45:1
   |
44 |                 # Import main module (this should load .env before Settings)
45 |                 
   | ^^^^^^^^^^^^^^^^
46 |                 # Verify .env was loaded before Settings construction
47 |                 mock_load_dotenv.assert_called()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_order_and_lazy_import.py:50:1
   |
48 |                 assert os.environ.get('TEST_DOTENV_ORDER') == 'loaded_early'
49 |                 assert os.environ.get('ALPACA_API_KEY') == 'test_from_dotenv'
50 |         
   | ^^^^^^^^
51 |         finally:
52 |             # Cleanup
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_order_and_lazy_import.py:56:1
   |
54 |             os.environ.pop('TEST_DOTENV_ORDER', None)
55 |             os.environ.pop('ALPACA_API_KEY', None)
56 |     
   | ^^^^
57 |     def test_lazy_import_prevents_import_time_crash(self):
58 |         """Test that lazy imports prevent crashes during import."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_order_and_lazy_import.py:66:1
   |
64 |             'ALPACA_BASE_URL', 'APCA_API_BASE_URL'
65 |         ]
66 |         
   | ^^^^^^^^
67 |         for key in env_keys_to_clear:
68 |             if key in os.environ:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_order_and_lazy_import.py:71:1
   |
69 |                 env_backup[key] = os.environ[key]
70 |                 del os.environ[key]
71 |         
   | ^^^^^^^^
72 |         try:
73 |             # Mock sys.exit to capture if it's called during import
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_order_and_lazy_import.py:77:1
   |
75 |                 # Import runner module - should not crash even with missing env vars
76 |                 from ai_trading import runner
77 |                 
   | ^^^^^^^^^^^^^^^^
78 |                 # Should not have called sys.exit during import
79 |                 mock_exit.assert_not_called()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_order_and_lazy_import.py:80:1
   |
78 |                 # Should not have called sys.exit during import
79 |                 mock_exit.assert_not_called()
80 |                 
   | ^^^^^^^^^^^^^^^^
81 |                 # Verify the module loaded successfully
82 |                 assert hasattr(runner, 'run_cycle')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_order_and_lazy_import.py:84:1
   |
82 |                 assert hasattr(runner, 'run_cycle')
83 |                 assert hasattr(runner, '_load_engine')
84 |         
   | ^^^^^^^^
85 |         finally:
86 |             # Restore environment
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_order_and_lazy_import.py:89:1
   |
87 |             for key, value in env_backup.items():
88 |                 os.environ[key] = value
89 |     
   | ^^^^
90 |     def test_lazy_engine_loading_defers_heavy_imports(self):
91 |         """Test that engine loading is deferred until actually needed."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_env_order_and_lazy_import.py:93:1
   |
91 |         """Test that engine loading is deferred until actually needed."""
92 |         from ai_trading.runner import _load_engine
93 |         
   | ^^^^^^^^
94 |         # Mock the bot_engine import to verify it's called lazily
95 |         with patch('ai_trading.runner._bot_engine', None):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:101:1
    |
 99 |                         mock_worker.return_value = "mock_worker"
100 |                         mock_state.return_value = "mock_state"
101 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
102 |                         # Call _load_engine
103 |                         worker, state_class = _load_engine()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:104:1
    |
102 |                         # Call _load_engine
103 |                         worker, state_class = _load_engine()
104 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
105 |                         # Verify imports were called
106 |                         assert worker == mock_worker
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:108:1
    |
106 |                         assert worker == mock_worker
107 |                         assert state_class == mock_state
108 |     
    | ^^^^
109 |     def test_lazy_engine_loading_caches_components(self):
110 |         """Test that engine components are cached after first load."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:112:1
    |
110 |         """Test that engine components are cached after first load."""
111 |         from ai_trading import runner
112 |         
    | ^^^^^^^^
113 |         # Reset the lazy import cache
114 |         runner._bot_engine = None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:116:1
    |
114 |         runner._bot_engine = None
115 |         runner._bot_state_class = None
116 |         
    | ^^^^^^^^
117 |         with patch('ai_trading.core.bot_engine.run_all_trades_worker') as mock_worker:
118 |             with patch('ai_trading.core.bot_engine.BotState') as mock_state:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:121:1
    |
119 |                 mock_worker.return_value = "cached_worker"
120 |                 mock_state.return_value = "cached_state"
121 |                 
    | ^^^^^^^^^^^^^^^^
122 |                 # First call should import
123 |                 worker1, state1 = runner._load_engine()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:124:1
    |
122 |                 # First call should import
123 |                 worker1, state1 = runner._load_engine()
124 |                 
    | ^^^^^^^^^^^^^^^^
125 |                 # Second call should use cached values
126 |                 worker2, state2 = runner._load_engine()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:127:1
    |
125 |                 # Second call should use cached values
126 |                 worker2, state2 = runner._load_engine()
127 |                 
    | ^^^^^^^^^^^^^^^^
128 |                 # Should be the same objects
129 |                 assert worker1 == worker2 == "cached_worker"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:131:1
    |
129 |                 assert worker1 == worker2 == "cached_worker"
130 |                 assert state1 == state2 == "cached_state"
131 |                 
    | ^^^^^^^^^^^^^^^^
132 |                 # Import should only have been called once
133 |                 assert mock_worker.call_count == 0  # Not called, just referenced
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:135:1
    |
133 |                 assert mock_worker.call_count == 0  # Not called, just referenced
134 |                 assert mock_state.call_count == 0    # Not called, just referenced
135 |     
    | ^^^^
136 |     def test_run_cycle_uses_lazy_loading(self):
137 |         """Test that run_cycle uses lazy loading for bot engine."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:139:1
    |
137 |         """Test that run_cycle uses lazy loading for bot engine."""
138 |         from ai_trading import runner
139 |         
    | ^^^^^^^^
140 |         # Reset lazy import cache
141 |         runner._bot_engine = None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:143:1
    |
141 |         runner._bot_engine = None
142 |         runner._bot_state_class = None
143 |         
    | ^^^^^^^^
144 |         # Mock the components
145 |         mock_worker = MagicMock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:149:1
    |
147 |         mock_state_instance = MagicMock()
148 |         mock_state_class.return_value = mock_state_instance
149 |         
    | ^^^^^^^^
150 |         with patch.object(runner, '_load_engine') as mock_load:
151 |             mock_load.return_value = (mock_worker, mock_state_class)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:152:1
    |
150 |         with patch.object(runner, '_load_engine') as mock_load:
151 |             mock_load.return_value = (mock_worker, mock_state_class)
152 |             
    | ^^^^^^^^^^^^
153 |             # Call run_cycle
154 |             runner.run_cycle()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:155:1
    |
153 |             # Call run_cycle
154 |             runner.run_cycle()
155 |             
    | ^^^^^^^^^^^^
156 |             # Verify lazy loading was called
157 |             mock_load.assert_called_once()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:158:1
    |
156 |             # Verify lazy loading was called
157 |             mock_load.assert_called_once()
158 |             
    | ^^^^^^^^^^^^
159 |             # Verify worker was called with state instance
160 |             mock_worker.assert_called_once_with(mock_state_instance, None)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:161:1
    |
159 |             # Verify worker was called with state instance
160 |             mock_worker.assert_called_once_with(mock_state_instance, None)
161 |     
    | ^^^^
162 |     def test_main_loads_dotenv_before_runner_import(self):
163 |         """Test that main.py loads .env before importing runner."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:169:1
    |
167 |                 # Import and call run_bot from main
168 |                 from ai_trading.main import run_bot
169 |                 
    | ^^^^^^^^^^^^^^^^
170 |                 # Call run_bot
171 |                 result = run_bot()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:172:1
    |
170 |                 # Call run_bot
171 |                 result = run_bot()
172 |                 
    | ^^^^^^^^^^^^^^^^
173 |                 # Verify .env was loaded
174 |                 mock_load_dotenv.assert_called()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:175:1
    |
173 |                 # Verify .env was loaded
174 |                 mock_load_dotenv.assert_called()
175 |                 
    | ^^^^^^^^^^^^^^^^
176 |                 # Verify run_cycle was called
177 |                 mock_run_cycle.assert_called_once()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:178:1
    |
176 |                 # Verify run_cycle was called
177 |                 mock_run_cycle.assert_called_once()
178 |                 
    | ^^^^^^^^^^^^^^^^
179 |                 # Verify return value
180 |                 assert result == 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:181:1
    |
179 |                 # Verify return value
180 |                 assert result == 0
181 |     
    | ^^^^
182 |     def test_env_loaded_multiple_times_safely(self):
183 |         """Test that loading .env multiple times is safe."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:188:1
    |
186 |             f.write("MULTI_LOAD_TEST=safe_value\n")
187 |             temp_env_path = f.name
188 |         
    | ^^^^^^^^
189 |         try:
190 |             # Clear environment
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:192:1
    |
190 |             # Clear environment
191 |             os.environ.pop('MULTI_LOAD_TEST', None)
192 |             
    | ^^^^^^^^^^^^
193 |             # Mock load_dotenv to use our temp file
194 |             def mock_load_side_effect(*args, **kwargs):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:200:1
    |
198 |                             key, value = line.strip().split('=', 1)
199 |                             os.environ[key] = value
200 |             
    | ^^^^^^^^^^^^
201 |             with patch('dotenv.load_dotenv', side_effect=mock_load_side_effect):
202 |                 # Load multiple times (simulating multiple imports)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:207:1
    |
205 |                 load_dotenv(override=True)  # Second load
206 |                 load_dotenv(override=True)  # Third load
207 |                 
    | ^^^^^^^^^^^^^^^^
208 |                 # Should still have the correct value
209 |                 assert os.environ.get('MULTI_LOAD_TEST') == 'safe_value'
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:210:1
    |
208 |                 # Should still have the correct value
209 |                 assert os.environ.get('MULTI_LOAD_TEST') == 'safe_value'
210 |         
    | ^^^^^^^^
211 |         finally:
212 |             os.unlink(temp_env_path)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:214:1
    |
212 |             os.unlink(temp_env_path)
213 |             os.environ.pop('MULTI_LOAD_TEST', None)
214 |     
    | ^^^^
215 |     def test_missing_env_file_handled_gracefully(self):
216 |         """Test that missing .env file doesn't crash the import."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:220:1
    |
218 |             # Simulate .env file not found
219 |             mock_load_dotenv.side_effect = FileNotFoundError("No .env file")
220 |             
    | ^^^^^^^^^^^^
221 |             # Should not raise exception
222 |             try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:227:1
    |
225 |             except Exception as e:
226 |                 pytest.fail(f"Import failed with missing .env file: {e}")
227 |     
    | ^^^^
228 |     def test_lazy_import_error_handling(self):
229 |         """Test that lazy import handles import errors gracefully."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:231:1
    |
229 |         """Test that lazy import handles import errors gracefully."""
230 |         from ai_trading import runner
231 |         
    | ^^^^^^^^
232 |         # Reset cache
233 |         runner._bot_engine = None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:235:1
    |
233 |         runner._bot_engine = None
234 |         runner._bot_state_class = None
235 |         
    | ^^^^^^^^
236 |         with patch('ai_trading.core.bot_engine.run_all_trades_worker', side_effect=ImportError("Mock import error")):
237 |             with pytest.raises(RuntimeError) as exc_info:
    |
help: Remove whitespace from blank line

E501 Line too long (117 > 100)
   --> tests/test_env_order_and_lazy_import.py:236:101
    |
234 |         runner._bot_state_class = None
235 |         
236 |         with patch('ai_trading.core.bot_engine.run_all_trades_worker', side_effect=ImportError("Mock import error")):
    |                                                                                                     ^^^^^^^^^^^^^^^^^
237 |             with pytest.raises(RuntimeError) as exc_info:
238 |                 runner._load_engine()
    |

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:239:1
    |
237 |             with pytest.raises(RuntimeError) as exc_info:
238 |                 runner._load_engine()
239 |             
    | ^^^^^^^^^^^^
240 |             assert "Cannot load bot engine" in str(exc_info.value)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:241:1
    |
240 |             assert "Cannot load bot engine" in str(exc_info.value)
241 |     
    | ^^^^
242 |     def test_import_time_no_credential_validation(self):
243 |         """Test that no credential validation happens at import time."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:250:1
    |
248 |             'ALPACA_BASE_URL', 'APCA_API_BASE_URL'
249 |         ]
250 |         
    | ^^^^^^^^
251 |         env_backup = {}
252 |         for key in credential_keys:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:256:1
    |
254 |                 env_backup[key] = os.environ[key]
255 |                 del os.environ[key]
256 |         
    | ^^^^^^^^
257 |         try:
258 |             # Mock any validation functions to detect if they're called
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:262:1
    |
260 |                 with patch('sys.exit') as mock_exit:
261 |                     # Import main module - should not validate credentials
262 |                     
    | ^^^^^^^^^^^^^^^^^^^^
263 |                     # Should not have called validation or exit during import
264 |                     mock_validate.assert_not_called()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_env_order_and_lazy_import.py:266:1
    |
264 |                     mock_validate.assert_not_called()
265 |                     mock_exit.assert_not_called()
266 |         
    | ^^^^^^^^
267 |         finally:
268 |             # Restore environment
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_env_order_and_lazy_import.py:274:28
    |
273 | if __name__ == "__main__":
274 |     pytest.main([__file__])
    |                            ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_equity_curve.py:1:1
  |
1 | import pandas as pd
  | ^^^^^^^^^^^^^^^^^^^
2 |
3 | def test_equity_curve_monotonic():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_execution_classes.py:9:1
   |
 8 |   # Import our new classes
 9 | / from ai_trading.execution import ExecutionResult, OrderRequest
10 | | from ai_trading.core.enums import OrderSide, OrderType
   | |______________________________________________________^
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_execution_classes.py:15:1
   |
13 | class TestExecutionResult:
14 |     """Test cases for ExecutionResult class."""
15 |     
   | ^^^^
16 |     def test_execution_result_creation(self):
17 |         """Test basic ExecutionResult instantiation."""
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_execution_classes.py:21:27
   |
19 |             status="success",
20 |             order_id="test_123",
21 |             symbol="AAPL", 
   |                           ^
22 |             side="buy",
23 |             quantity=100,
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_execution_classes.py:27:1
   |
25 |             message="Order filled successfully"
26 |         )
27 |         
   | ^^^^^^^^
28 |         assert result.status == "success"
29 |         assert result.order_id == "test_123"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_execution_classes.py:38:1
   |
36 |         assert result.is_failed is False
37 |         assert result.is_partial is False
38 |     
   | ^^^^
39 |     def test_execution_result_failed_status(self):
40 |         """Test ExecutionResult with failed status."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_execution_classes.py:47:1
   |
45 |             message="Insufficient funds"
46 |         )
47 |         
   | ^^^^^^^^
48 |         assert result.status == "failed"
49 |         assert result.is_successful is False
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_execution_classes.py:52:1
   |
50 |         assert result.is_failed is True
51 |         assert result.is_partial is False
52 |     
   | ^^^^
53 |     def test_execution_result_partial_status(self):
54 |         """Test ExecutionResult with partial status."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_execution_classes.py:63:1
   |
61 |             fill_price=2800.0
62 |         )
63 |         
   | ^^^^^^^^
64 |         assert result.status == "partial"
65 |         assert result.is_successful is False
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_execution_classes.py:68:1
   |
66 |         assert result.is_failed is False
67 |         assert result.is_partial is True
68 |     
   | ^^^^
69 |     def test_execution_result_to_dict(self):
70 |         """Test ExecutionResult to_dict conversion."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_execution_classes.py:81:1
   |
79 |             notional_value=20000.0
80 |         )
81 |         
   | ^^^^^^^^
82 |         result_dict = result.to_dict()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_execution_classes.py:83:1
   |
82 |         result_dict = result.to_dict()
83 |         
   | ^^^^^^^^
84 |         assert isinstance(result_dict, dict)
85 |         assert result_dict["status"] == "success"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_execution_classes.py:97:1
   |
95 |         assert result_dict["is_partial"] is False
96 |         assert "timestamp" in result_dict
97 |     
   | ^^^^
98 |     def test_execution_result_string_representation(self):
99 |         """Test ExecutionResult string representations."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:101:1
    |
 99 |         """Test ExecutionResult string representations."""
100 |         result = ExecutionResult("success", "order_1", "AAPL")
101 |         
    | ^^^^^^^^
102 |         str_repr = str(result)
103 |         assert "ExecutionResult" in str_repr
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:107:1
    |
105 |         assert "order_1" in str_repr
106 |         assert "AAPL" in str_repr
107 |         
    | ^^^^^^^^
108 |         repr_str = repr(result)
109 |         assert "ExecutionResult" in repr_str
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:116:1
    |
114 | class TestOrderRequest:
115 |     """Test cases for OrderRequest class."""
116 |     
    | ^^^^
117 |     def test_order_request_creation_valid(self):
118 |         """Test valid OrderRequest creation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:126:1
    |
124 |             strategy="test_strategy"
125 |         )
126 |         
    | ^^^^^^^^
127 |         assert request.symbol == "AAPL"
128 |         assert request.side == OrderSide.BUY
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:134:1
    |
132 |         assert request.is_valid is True
133 |         assert len(request.validation_errors) == 0
134 |     
    | ^^^^
135 |     def test_order_request_limit_order(self):
136 |         """Test limit order creation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:144:1
    |
142 |             price=300.0
143 |         )
144 |         
    | ^^^^^^^^
145 |         assert request.order_type == OrderType.LIMIT
146 |         assert request.price == 300.0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:148:1
    |
146 |         assert request.price == 300.0
147 |         assert request.is_valid is True
148 |     
    | ^^^^
149 |     def test_order_request_validation_empty_symbol(self):
150 |         """Test validation with empty symbol."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:157:1
    |
155 |             order_type=OrderType.MARKET
156 |         )
157 |         
    | ^^^^^^^^
158 |         assert request.is_valid is False
159 |         assert "Symbol is required" in str(request.validation_errors)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:160:1
    |
158 |         assert request.is_valid is False
159 |         assert "Symbol is required" in str(request.validation_errors)
160 |     
    | ^^^^
161 |     def test_order_request_validation_negative_quantity(self):
162 |         """Test validation with negative quantity."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:169:1
    |
167 |             order_type=OrderType.MARKET
168 |         )
169 |         
    | ^^^^^^^^
170 |         assert request.is_valid is False
171 |         assert "Quantity must be positive" in str(request.validation_errors)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:172:1
    |
170 |         assert request.is_valid is False
171 |         assert "Quantity must be positive" in str(request.validation_errors)
172 |     
    | ^^^^
173 |     def test_order_request_validation_limit_without_price(self):
174 |         """Test validation of limit order without price."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:182:1
    |
180 |             # No price provided
181 |         )
182 |         
    | ^^^^^^^^
183 |         assert request.is_valid is False
184 |         assert "Limit orders require a valid price" in str(request.validation_errors)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:185:1
    |
183 |         assert request.is_valid is False
184 |         assert "Limit orders require a valid price" in str(request.validation_errors)
185 |     
    | ^^^^
186 |     def test_order_request_validation_excessive_quantity(self):
187 |         """Test validation with excessive quantity."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:194:1
    |
192 |             order_type=OrderType.MARKET
193 |         )
194 |         
    | ^^^^^^^^
195 |         assert request.is_valid is False
196 |         assert "exceeds maximum limit" in str(request.validation_errors)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:197:1
    |
195 |         assert request.is_valid is False
196 |         assert "exceeds maximum limit" in str(request.validation_errors)
197 |     
    | ^^^^
198 |     def test_order_request_notional_value(self):
199 |         """Test notional value calculation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:207:1
    |
205 |             price=150.0
206 |         )
207 |         
    | ^^^^^^^^
208 |         assert request.notional_value == 15000.0  # 100 * 150.0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:209:1
    |
208 |         assert request.notional_value == 15000.0  # 100 * 150.0
209 |     
    | ^^^^
210 |     def test_order_request_to_dict(self):
211 |         """Test OrderRequest to_dict conversion."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:221:1
    |
219 |             time_in_force="GTC"
220 |         )
221 |         
    | ^^^^^^^^
222 |         request_dict = request.to_dict()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:223:1
    |
222 |         request_dict = request.to_dict()
223 |         
    | ^^^^^^^^
224 |         assert isinstance(request_dict, dict)
225 |         assert request_dict["symbol"] == "GOOGL"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:235:1
    |
233 |         assert "created_at" in request_dict
234 |         assert "request_id" in request_dict
235 |     
    | ^^^^
236 |     def test_order_request_to_api_request_alpaca(self):
237 |         """Test OrderRequest to_api_request for Alpaca format."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:244:1
    |
242 |             order_type=OrderType.MARKET
243 |         )
244 |         
    | ^^^^^^^^
245 |         api_request = request.to_api_request("alpaca")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:246:1
    |
245 |         api_request = request.to_api_request("alpaca")
246 |         
    | ^^^^^^^^
247 |         assert isinstance(api_request, dict)
248 |         assert api_request["symbol"] == "TSLA"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:253:1
    |
251 |         assert api_request["qty"] == "10"
252 |         assert "client_order_id" in api_request
253 |     
    | ^^^^
254 |     def test_order_request_copy(self):
255 |         """Test OrderRequest copy functionality."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:262:1
    |
260 |             order_type=OrderType.MARKET
261 |         )
262 |         
    | ^^^^^^^^
263 |         copy = original.copy(quantity=200, strategy="new_strategy")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:264:1
    |
263 |         copy = original.copy(quantity=200, strategy="new_strategy")
264 |         
    | ^^^^^^^^
265 |         assert copy.symbol == original.symbol
266 |         assert copy.side == original.side
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:271:1
    |
269 |         assert copy.strategy == "new_strategy"  # Updated
270 |         assert copy.client_order_id != original.client_order_id  # Should be different
271 |     
    | ^^^^
272 |     def test_order_request_string_representation(self):
273 |         """Test OrderRequest string representations."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:275:1
    |
273 |         """Test OrderRequest string representations."""
274 |         request = OrderRequest("AAPL", OrderSide.BUY, 100, OrderType.MARKET)
275 |         
    | ^^^^^^^^
276 |         str_repr = str(request)
277 |         assert "OrderRequest" in str_repr
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:282:1
    |
280 |         assert "AAPL" in str_repr
281 |         assert "market" in str_repr
282 |         
    | ^^^^^^^^
283 |         repr_str = repr(request)
284 |         assert "OrderRequest" in repr_str
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:291:1
    |
289 | class TestExecutionIntegration:
290 |     """Test integration between ExecutionResult and OrderRequest."""
291 |     
    | ^^^^
292 |     def test_order_request_to_execution_result_flow(self):
293 |         """Test the flow from OrderRequest to ExecutionResult."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:303:1
    |
301 |             strategy="test"
302 |         )
303 |         
    | ^^^^^^^^
304 |         assert request.is_valid
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:305:1
    |
304 |         assert request.is_valid
305 |         
    | ^^^^^^^^
306 |         # Simulate successful execution
307 |         result = ExecutionResult(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:316:1
    |
314 |             message="Order executed successfully"
315 |         )
316 |         
    | ^^^^^^^^
317 |         assert result.is_successful
318 |         assert result.symbol == request.symbol
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:321:1
    |
319 |         assert result.quantity == request.quantity
320 |         assert result.order_id == request.client_order_id
321 |     
    | ^^^^
322 |     def test_invalid_request_to_rejected_result(self):
323 |         """Test flow from invalid request to rejected result."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:331:1
    |
329 |             order_type=OrderType.MARKET
330 |         )
331 |         
    | ^^^^^^^^
332 |         assert not request.is_valid
333 |         assert len(request.validation_errors) > 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:334:1
    |
332 |         assert not request.is_valid
333 |         assert len(request.validation_errors) > 0
334 |         
    | ^^^^^^^^
335 |         # Simulate rejection
336 |         result = ExecutionResult(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_execution_classes.py:342:1
    |
340 |             message=f"Validation failed: {'; '.join(request.validation_errors)}"
341 |         )
342 |         
    | ^^^^^^^^
343 |         assert result.is_failed
344 |         assert "Validation failed" in result.message
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_execution_classes.py:344:53
    |
343 |         assert result.is_failed
344 |         assert "Validation failed" in result.message
    |                                                     ^
    |
help: Add trailing newline

E501 Line too long (122 > 100)
 --> tests/test_execution_methods.py:5:101
  |
4 | def test_execute_sliced(monkeypatch):
5 |     monkeypatch.setattr(ExecutionEngine, "execute_sliced", lambda *a, **k: {"ok": True})  # AI-AGENT-REF: patch public API
  |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
6 |     assert ExecutionEngine.execute_sliced(None, "AAPL", 10) == {"ok": True}
  |

W293 [*] Blank line contains whitespace
  --> tests/test_executors_sizing.py:13:1
   |
11 |         if var in os.environ:
12 |             del os.environ[var]
13 |     
   | ^^^^
14 |     # Mock cpu_count to return a known value
15 |     with patch('os.cpu_count') as mock_cpu_count:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_executors_sizing.py:17:1
   |
15 |     with patch('os.cpu_count') as mock_cpu_count:
16 |         mock_cpu_count.return_value = 8
17 |         
   | ^^^^^^^^
18 |         # Import the module to trigger executor creation
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_executors_sizing.py:19:1
   |
18 |         # Import the module to trigger executor creation
19 |         
   | ^^^^^^^^
20 |         # Check auto-sizing logic
21 |         # For 8 CPUs: max(2, min(4, 8)) = 4
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_executors_sizing.py:23:1
   |
21 |         # For 8 CPUs: max(2, min(4, 8)) = 4
22 |         expected_workers = 4
23 |         
   | ^^^^^^^^
24 |         # Check the computed values (note: we can't directly test executor workers
25 |         # because they're created at import time, but we can check the logic)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_executors_sizing.py:31:1
   |
29 |         _exec_workers = _exec_env or max(2, min(4, _cpu))
30 |         _pred_workers = _pred_env or max(2, min(4, _cpu))
31 |         
   | ^^^^^^^^
32 |         assert _exec_workers == expected_workers
33 |         assert _pred_workers == expected_workers
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_executors_sizing.py:41:1
   |
39 |     os.environ["EXECUTOR_WORKERS"] = "6"
40 |     os.environ["PREDICTION_WORKERS"] = "3"
41 |     
   | ^^^^
42 |     # Test the logic that would be used
43 |     _cpu = (os.cpu_count() or 2)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_executors_sizing.py:48:1
   |
46 |     _exec_workers = _exec_env or max(2, min(4, _cpu))
47 |     _pred_workers = _pred_env or max(2, min(4, _cpu))
48 |     
   | ^^^^
49 |     assert _exec_workers == 6
50 |     assert _pred_workers == 3
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_executors_sizing.py:51:1
   |
49 |     assert _exec_workers == 6
50 |     assert _pred_workers == 3
51 |     
   | ^^^^
52 |     # Clean up
53 |     del os.environ["EXECUTOR_WORKERS"]
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_executors_sizing.py:63:1
   |
61 |         if var in os.environ:
62 |             del os.environ[var]
63 |     
   | ^^^^
64 |     test_cases = [
65 |         (1, 2),    # 1 CPU -> max(2, min(4, 1)) = 2
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_executors_sizing.py:71:1
   |
69 |         (16, 4),   # 16 CPU -> max(2, min(4, 16)) = 4 (capped at 4)
70 |     ]
71 |     
   | ^^^^
72 |     for cpu_count, expected in test_cases:
73 |         with patch('os.cpu_count') as mock_cpu_count:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_executors_sizing.py:75:1
   |
73 |         with patch('os.cpu_count') as mock_cpu_count:
74 |             mock_cpu_count.return_value = cpu_count
75 |             
   | ^^^^^^^^^^^^
76 |             _cpu = (os.cpu_count() or 2)
77 |             _exec_env = int(os.getenv("EXECUTOR_WORKERS", "0") or "0")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_executors_sizing.py:81:1
   |
79 |             _exec_workers = _exec_env or max(2, min(4, _cpu))
80 |             _pred_workers = _pred_env or max(2, min(4, _cpu))
81 |             
   | ^^^^^^^^^^^^
82 |             assert _exec_workers == expected, f"For {cpu_count} CPUs, expected {expected}, got {_exec_workers}"
83 |             assert _pred_workers == expected, f"For {cpu_count} CPUs, expected {expected}, got {_pred_workers}"
   |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
  --> tests/test_executors_sizing.py:82:101
   |
80 |             _pred_workers = _pred_env or max(2, min(4, _cpu))
81 |             
82 |             assert _exec_workers == expected, f"For {cpu_count} CPUs, expected {expected}, got {_exec_workers}"
   |                                                                                                     ^^^^^^^^^^^
83 |             assert _pred_workers == expected, f"For {cpu_count} CPUs, expected {expected}, got {_pred_workers}"
   |

E501 Line too long (111 > 100)
  --> tests/test_executors_sizing.py:83:101
   |
82 |             assert _exec_workers == expected, f"For {cpu_count} CPUs, expected {expected}, got {_exec_workers}"
83 |             assert _pred_workers == expected, f"For {cpu_count} CPUs, expected {expected}, got {_pred_workers}"
   |                                                                                                     ^^^^^^^^^^^
   |

W293 [*] Blank line contains whitespace
  --> tests/test_executors_sizing.py:92:1
   |
90 |         if var in os.environ:
91 |             del os.environ[var]
92 |     
   | ^^^^
93 |     with patch('os.cpu_count') as mock_cpu_count:
94 |         mock_cpu_count.return_value = None
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_executors_sizing.py:95:1
   |
93 |     with patch('os.cpu_count') as mock_cpu_count:
94 |         mock_cpu_count.return_value = None
95 |         
   | ^^^^^^^^
96 |         _cpu = (os.cpu_count() or 2)
97 |         _exec_env = int(os.getenv("EXECUTOR_WORKERS", "0") or "0")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_executors_sizing.py:101:1
    |
 99 |         _exec_workers = _exec_env or max(2, min(4, _cpu))
100 |         _pred_workers = _pred_env or max(2, min(4, _cpu))
101 |         
    | ^^^^^^^^
102 |         assert _exec_workers == 2  # Fallback to 2
103 |         assert _pred_workers == 2  # Fallback to 2
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_executors_sizing.py:115:1
    |
113 |         ("invalid", 0),  # Invalid should default to 0 (fallback to auto-size)
114 |     ]
115 |     
    | ^^^^
116 |     for env_val, expected in test_cases:
117 |         os.environ["EXECUTOR_WORKERS"] = env_val
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_executors_sizing.py:118:1
    |
116 |     for env_val, expected in test_cases:
117 |         os.environ["EXECUTOR_WORKERS"] = env_val
118 |         
    | ^^^^^^^^
119 |         _exec_env = int(os.getenv("EXECUTOR_WORKERS", "0") or "0")
120 |         assert _exec_env == expected, f"For env value '{env_val}', expected {expected}, got {_exec_env}"
    |
help: Remove whitespace from blank line

E501 Line too long (104 > 100)
   --> tests/test_executors_sizing.py:120:101
    |
119 |         _exec_env = int(os.getenv("EXECUTOR_WORKERS", "0") or "0")
120 |         assert _exec_env == expected, f"For env value '{env_val}', expected {expected}, got {_exec_env}"
    |                                                                                                     ^^^^
121 |         
122 |         del os.environ["EXECUTOR_WORKERS"]
    |

W293 [*] Blank line contains whitespace
   --> tests/test_executors_sizing.py:121:1
    |
119 |         _exec_env = int(os.getenv("EXECUTOR_WORKERS", "0") or "0")
120 |         assert _exec_env == expected, f"For env value '{env_val}', expected {expected}, got {_exec_env}"
121 |         
    | ^^^^^^^^
122 |         del os.environ["EXECUTOR_WORKERS"]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_executors_sizing.py:128:1
    |
126 |     """Test that executor cleanup function is available."""
127 |     import ai_trading.core.bot_engine as bot_engine
128 |     
    | ^^^^
129 |     # Check that cleanup function exists
130 |     assert hasattr(bot_engine, 'cleanup_executors')
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_executors_sizing.py:138:32
    |
136 |     for var in ["EXECUTOR_WORKERS", "PREDICTION_WORKERS"]:
137 |         if var in os.environ:
138 |             del os.environ[var]
    |                                ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_fallback_concurrency.py:1:1
  |
1 | / import types
2 | | import pandas as pd
3 | | import ai_trading.core.bot_engine as be
4 | | import threading
5 | | import time
  | |___________^
6 |
7 |   def _mk_df():
  |
help: Organize imports

E501 Line too long (107 > 100)
  --> tests/test_fallback_concurrency.py:37:101
   |
35 |         return _mk_df()
36 |     monkeypatch.setattr(be, "get_minute_bars", fake_single)
37 |     out = be._fetch_intraday_bars_chunked(ctx, ["X","Y","Z"], "2024-01-01 09:30", "2024-01-01 10:30", None)
   |                                                                                                     ^^^^^^^
38 |     assert set(out.keys()) == {"X","Y","Z"}
39 |     assert set(calls["single"]) == {"X","Y","Z"}
   |

W293 [*] Blank line contains whitespace
  --> tests/test_fallback_concurrency.py:45:1
   |
43 |     ctx = types.SimpleNamespace()
44 |     call_times = []
45 |     
   | ^^^^
46 |     monkeypatch.setattr(be, "get_bars_batch", lambda *a, **k: {})
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fallback_concurrency.py:47:1
   |
46 |     monkeypatch.setattr(be, "get_bars_batch", lambda *a, **k: {})
47 |     
   | ^^^^
48 |     def slow_single(sym, *a, **k):
49 |         # Simulate slow API call
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fallback_concurrency.py:53:1
   |
51 |         call_times.append((sym, time.time()))
52 |         return _mk_df()
53 |     
   | ^^^^
54 |     monkeypatch.setattr(be, "get_bars", slow_single)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fallback_concurrency.py:55:1
   |
54 |     monkeypatch.setattr(be, "get_bars", slow_single)
55 |     
   | ^^^^
56 |     # Test with 4 symbols that should run in parallel
57 |     start_time = time.time()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fallback_concurrency.py:60:1
   |
58 |     out = be._fetch_universe_bars(ctx, ["A","B","C","D"], "1D", "2024-01-01", "2024-02-01", None)
59 |     end_time = time.time()
60 |     
   | ^^^^
61 |     # Should complete faster than sequential (0.4s) due to parallelism
62 |     # Allow some overhead but should be significantly faster than sequential
   |
help: Remove whitespace from blank line

E501 Line too long (112 > 100)
  --> tests/test_fallback_concurrency.py:63:101
   |
61 |     # Should complete faster than sequential (0.4s) due to parallelism
62 |     # Allow some overhead but should be significantly faster than sequential
63 |     assert end_time - start_time < 0.3, f"Parallel execution took {end_time - start_time:.2f}s, expected < 0.3s"
   |                                                                                                     ^^^^^^^^^^^^
64 |     assert len(out) == 4
   |

W293 [*] Blank line contains whitespace
  --> tests/test_fallback_concurrency.py:65:1
   |
63 |     assert end_time - start_time < 0.3, f"Parallel execution took {end_time - start_time:.2f}s, expected < 0.3s"
64 |     assert len(out) == 4
65 |     
   | ^^^^
66 |     # Verify calls happened in a parallel timeframe (not perfectly sequential)
67 |     call_times.sort(key=lambda x: x[1])
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_fallback_concurrency.py:68:34
   |
66 |     # Verify calls happened in a parallel timeframe (not perfectly sequential)
67 |     call_times.sort(key=lambda x: x[1])
68 |     first_call = call_times[0][1] 
   |                                  ^
69 |     last_call = call_times[-1][1]
70 |     time_span = last_call - first_call
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_fallback_concurrency.py:71:1
   |
69 |     last_call = call_times[-1][1]
70 |     time_span = last_call - first_call
71 |     
   | ^^^^
72 |     # Should be less than sequential time but account for overlap
73 |     assert time_span < 0.25, f"Call time span {time_span:.2f}s suggests sequential execution"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fallback_concurrency.py:80:1
   |
78 |     active_workers = []
79 |     max_concurrent = 0
80 |     
   | ^^^^
81 |     # Mock settings to use only 2 workers
82 |     def mock_get_settings():
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fallback_concurrency.py:86:1
   |
84 |         settings.batch_fallback_workers = 2
85 |         return settings
86 |     
   | ^^^^
87 |     monkeypatch.setattr(be, "get_settings", mock_get_settings)
88 |     monkeypatch.setattr(be, "get_bars_batch", lambda *a, **k: {})
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fallback_concurrency.py:89:1
   |
87 |     monkeypatch.setattr(be, "get_settings", mock_get_settings)
88 |     monkeypatch.setattr(be, "get_bars_batch", lambda *a, **k: {})
89 |     
   | ^^^^
90 |     def track_concurrent(sym, *a, **k):
91 |         thread_id = threading.current_thread().ident
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fallback_concurrency.py:93:1
   |
91 |         thread_id = threading.current_thread().ident
92 |         active_workers.append(thread_id)
93 |         
   | ^^^^^^^^
94 |         nonlocal max_concurrent
95 |         current_count = len(set(active_workers))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fallback_concurrency.py:97:1
   |
95 |         current_count = len(set(active_workers))
96 |         max_concurrent = max(max_concurrent, current_count)
97 |         
   | ^^^^^^^^
98 |         time.sleep(0.1)  # Simulate work
99 |         return _mk_df()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fallback_concurrency.py:100:1
    |
 98 |         time.sleep(0.1)  # Simulate work
 99 |         return _mk_df()
100 |     
    | ^^^^
101 |     monkeypatch.setattr(be, "get_bars", track_concurrent)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fallback_concurrency.py:102:1
    |
101 |     monkeypatch.setattr(be, "get_bars", track_concurrent)
102 |     
    | ^^^^
103 |     # Test with 6 symbols but limit to 2 workers
104 |     out = be._fetch_universe_bars(ctx, ["A","B","C","D","E","F"], "1D", "2024-01-01", "2024-02-01", None)
    |
help: Remove whitespace from blank line

E501 Line too long (105 > 100)
   --> tests/test_fallback_concurrency.py:104:101
    |
103 |     # Test with 6 symbols but limit to 2 workers
104 |     out = be._fetch_universe_bars(ctx, ["A","B","C","D","E","F"], "1D", "2024-01-01", "2024-02-01", None)
    |                                                                                                     ^^^^^
105 |     
106 |     assert len(out) == 6
    |

W293 [*] Blank line contains whitespace
   --> tests/test_fallback_concurrency.py:105:1
    |
103 |     # Test with 6 symbols but limit to 2 workers
104 |     out = be._fetch_universe_bars(ctx, ["A","B","C","D","E","F"], "1D", "2024-01-01", "2024-02-01", None)
105 |     
    | ^^^^
106 |     assert len(out) == 6
107 |     # Should never exceed our worker limit
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_fallback_concurrency.py:108:95
    |
106 |     assert len(out) == 6
107 |     # Should never exceed our worker limit
108 |     assert max_concurrent <= 2, f"Max concurrent workers {max_concurrent} exceeded limit of 2"
    |                                                                                               ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_features.py:1:1
  |
1 | / import sys
2 | | import types
3 | | import pandas as pd
4 | | import pytest
5 | | from ai_trading.features import build_features_pipeline
  | |_______________________________________________________^
6 |
7 |   dotenv_stub = types.ModuleType("dotenv")
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_features.py:26:1
   |
24 | pytestmark = pytest.mark.usefixtures("default_env", "features_env")
25 |
26 | import pytest
   | ^^^^^^^^^^^^^
27 |
28 | @pytest.fixture(autouse=True)
   |
help: Organize imports

E501 Line too long (105 > 100)
  --> tests/test_features.py:53:101
   |
51 |     df = pd.DataFrame(data)
52 |     df = build_features_pipeline(df, 'TEST')
53 |     assert all(col in df.columns for col in ['macd', 'macds', 'atr', 'vwap']), "Missing computed columns"
   |                                                                                                     ^^^^^
54 |     assert not df[['macd', 'macds', 'atr', 'vwap']].isnull().all().any(), "Indicators have all NaNs"
55 |     na_counts = df[['macd', 'atr', 'vwap', 'macds']].isna().sum()
   |

W291 [*] Trailing whitespace
  --> tests/test_features.py:56:79
   |
54 |     assert not df[['macd', 'macds', 'atr', 'vwap']].isnull().all().any(), "Indicators have all NaNs"
55 |     na_counts = df[['macd', 'atr', 'vwap', 'macds']].isna().sum()
56 |     assert (na_counts <= 20).all(), f"Excessive NaNs in features: {na_counts}" 
   |                                                                               ^
   |
help: Remove trailing whitespace

E401 [*] Multiple imports on one line
 --> tests/test_fetch_sample_universe_cli.py:1:1
  |
1 | import importlib.util, pathlib
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2 |
3 | spec = importlib.util.spec_from_file_location(
  |
help: Split imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_fetch_sample_universe_cli.py:1:1
  |
1 | import importlib.util, pathlib
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2 |
3 | spec = importlib.util.spec_from_file_location(
  |
help: Organize imports

E501 Line too long (102 > 100)
 --> tests/test_fetch_sample_universe_cli.py:5:101
  |
3 | spec = importlib.util.spec_from_file_location(
4 |     "ai_trading.tools.fetch_sample_universe",
5 |     pathlib.Path(__file__).resolve().parents[1] / "ai_trading" / "tools" / "fetch_sample_universe.py",
  |                                                                                                     ^^
6 | )
7 | fetch_module = importlib.util.module_from_spec(spec)
  |

E501 Line too long (102 > 100)
  --> tests/test_fetch_sample_universe_cli.py:43:101
   |
41 |     ]
42 |     timing = [m for m in logged if m[0] == "STAGE_TIMING"]
43 |     assert timing and timing[0][1]["stage"] == "UNIVERSE_FETCH" and timing[0][1]["universe_size"] == 3
   |                                                                                                     ^^
44 |     stats = [m for m in logged if m[0] == "HTTP_POOL_STATS"]
45 |     assert stats and {"workers", "per_host", "pool_maxsize"} <= stats[0][1].keys()
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_fill_rate_calculation_fix.py:3:1
  |
1 |   """Test fill rate calculation fixes and alert thresholds."""
2 |
3 | / import pytest
4 | | import os
5 | | from unittest.mock import patch
  | |_______________________________^
6 |
7 |   # Ensure test environment
  |
help: Organize imports

W291 [*] Trailing whitespace
  --> tests/test_fill_rate_calculation_fix.py:10:40
   |
 8 | os.environ.update({
 9 |     'ALPACA_API_KEY': 'test_key',
10 |     'ALPACA_SECRET_KEY': 'test_secret', 
   |                                        ^
11 |     'ALPACA_BASE_URL': 'https://paper-api.alpaca.markets',
12 |     'WEBHOOK_SECRET': 'test_webhook',
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:25:1
   |
23 | def test_fill_rate_calculation_fix():
24 |     """Test that fill rate calculation now works correctly when order.filled_qty is None."""
25 |     
   | ^^^^
26 |     ctx = MockContext()
27 |     engine = ExecutionEngine(ctx)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:28:1
   |
26 |     ctx = MockContext()
27 |     engine = ExecutionEngine(ctx)
28 |     
   | ^^^^
29 |     with patch.object(engine, 'logger') as mock_logger:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:30:1
   |
29 |     with patch.object(engine, 'logger') as mock_logger:
30 |         
   | ^^^^^^^^
31 |         # Test Case: Order with filled_qty=None (the bug condition that was fixed)
32 |         order_without_filled_qty = MockOrder(filled_qty=None)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:33:1
   |
31 |         # Test Case: Order with filled_qty=None (the bug condition that was fixed)
32 |         order_without_filled_qty = MockOrder(filled_qty=None)
33 |         
   | ^^^^^^^^
34 |         engine._reconcile_partial_fills(
35 |             symbol="QQQ",
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_fill_rate_calculation_fix.py:38:24
   |
36 |             submitted_qty=100,
37 |             remaining_qty=50,  # 50 remaining = 50 filled out of 100
38 |             side="buy", 
   |                        ^
39 |             last_order=order_without_filled_qty
40 |         )
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:41:1
   |
39 |             last_order=order_without_filled_qty
40 |         )
41 |         
   | ^^^^^^^^
42 |         logged_calls = mock_logger.warning.call_args_list
43 |         partial_fill_logs = [call for call in logged_calls if call[0][0] == "PARTIAL_FILL_DETECTED"]
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:44:1
   |
42 |         logged_calls = mock_logger.warning.call_args_list
43 |         partial_fill_logs = [call for call in logged_calls if call[0][0] == "PARTIAL_FILL_DETECTED"]
44 |         
   | ^^^^^^^^
45 |         assert len(partial_fill_logs) > 0, "Should have logged partial fill"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:46:1
   |
45 |         assert len(partial_fill_logs) > 0, "Should have logged partial fill"
46 |         
   | ^^^^^^^^
47 |         log_extra = partial_fill_logs[0][1]['extra']
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:48:1
   |
47 |         log_extra = partial_fill_logs[0][1]['extra']
48 |         
   | ^^^^^^^^
49 |         # This should now be 50 filled out of 100 = 50%
50 |         assert log_extra['filled_qty'] == 50, f"Expected filled_qty=50, got {log_extra['filled_qty']}"
   |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
  --> tests/test_fill_rate_calculation_fix.py:50:101
   |
49 |         # This should now be 50 filled out of 100 = 50%
50 |         assert log_extra['filled_qty'] == 50, f"Expected filled_qty=50, got {log_extra['filled_qty']}"
   |                                                                                                     ^^
51 |         assert log_extra['fill_rate_pct'] == 50.0, f"Expected 50% fill rate, got {log_extra['fill_rate_pct']}"
   |

E501 Line too long (110 > 100)
  --> tests/test_fill_rate_calculation_fix.py:51:101
   |
49 |         # This should now be 50 filled out of 100 = 50%
50 |         assert log_extra['filled_qty'] == 50, f"Expected filled_qty=50, got {log_extra['filled_qty']}"
51 |         assert log_extra['fill_rate_pct'] == 50.0, f"Expected 50% fill rate, got {log_extra['fill_rate_pct']}"
   |                                                                                                     ^^^^^^^^^^
   |

W291 [*] Trailing whitespace
  --> tests/test_fill_rate_calculation_fix.py:54:19
   |
54 | @pytest.mark.smoke 
   |                   ^
55 | def test_fill_rate_alert_thresholds_updated():
56 |     """Test that fill rate alert thresholds are now more realistic for market conditions."""
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:57:1
   |
55 | def test_fill_rate_alert_thresholds_updated():
56 |     """Test that fill rate alert thresholds are now more realistic for market conditions."""
57 |     
   | ^^^^
58 |     ctx = MockContext()
59 |     engine = ExecutionEngine(ctx)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:60:1
   |
58 |     ctx = MockContext()
59 |     engine = ExecutionEngine(ctx)
60 |     
   | ^^^^
61 |     with patch.object(engine, 'logger') as mock_logger:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:62:1
   |
61 |     with patch.object(engine, 'logger') as mock_logger:
62 |         
   | ^^^^^^^^
63 |         # Test 50% fill rate - should NOT trigger any error alerts now
64 |         order_50pct = MockOrder(filled_qty=25)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:65:1
   |
63 |         # Test 50% fill rate - should NOT trigger any error alerts now
64 |         order_50pct = MockOrder(filled_qty=25)
65 |         
   | ^^^^^^^^
66 |         engine._reconcile_partial_fills(
67 |             symbol="SPY",
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:73:1
   |
71 |             last_order=order_50pct
72 |         )
73 |         
   | ^^^^^^^^
74 |         error_calls = mock_logger.error.call_args_list
75 |         low_fill_alerts = [call for call in error_calls if call[0][0] == "LOW_FILL_RATE_ALERT"]
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:76:1
   |
74 |         error_calls = mock_logger.error.call_args_list
75 |         low_fill_alerts = [call for call in error_calls if call[0][0] == "LOW_FILL_RATE_ALERT"]
76 |         
   | ^^^^^^^^
77 |         assert len(low_fill_alerts) == 0, "50% fill rate should not trigger LOW_FILL_RATE_ALERT"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:78:1
   |
77 |         assert len(low_fill_alerts) == 0, "50% fill rate should not trigger LOW_FILL_RATE_ALERT"
78 |         
   | ^^^^^^^^
79 |         # Test 30% fill rate - should trigger moderate warning but not error
80 |         mock_logger.reset_mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:82:1
   |
80 |         mock_logger.reset_mock()
81 |         order_30pct = MockOrder(filled_qty=15)
82 |         
   | ^^^^^^^^
83 |         engine._reconcile_partial_fills(
84 |             symbol="AMZN",
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_fill_rate_calculation_fix.py:85:30
   |
83 |         engine._reconcile_partial_fills(
84 |             symbol="AMZN",
85 |             submitted_qty=50, 
   |                              ^
86 |             remaining_qty=35,
87 |             side="buy",
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:90:1
   |
88 |             last_order=order_30pct
89 |         )
90 |         
   | ^^^^^^^^
91 |         warning_calls = mock_logger.warning.call_args_list
92 |         moderate_alerts = [call for call in warning_calls if any("MODERATE_FILL_RATE_ALERT" in str(arg) for arg in call)]
   |
help: Remove whitespace from blank line

E501 Line too long (121 > 100)
  --> tests/test_fill_rate_calculation_fix.py:92:101
   |
91 |         warning_calls = mock_logger.warning.call_args_list
92 |         moderate_alerts = [call for call in warning_calls if any("MODERATE_FILL_RATE_ALERT" in str(arg) for arg in call)]
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
93 |         
94 |         assert len(moderate_alerts) > 0, "30% fill rate should trigger MODERATE_FILL_RATE_ALERT"
   |

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:93:1
   |
91 |         warning_calls = mock_logger.warning.call_args_list
92 |         moderate_alerts = [call for call in warning_calls if any("MODERATE_FILL_RATE_ALERT" in str(arg) for arg in call)]
93 |         
   | ^^^^^^^^
94 |         assert len(moderate_alerts) > 0, "30% fill rate should trigger MODERATE_FILL_RATE_ALERT"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fill_rate_calculation_fix.py:95:1
   |
94 |         assert len(moderate_alerts) > 0, "30% fill rate should trigger MODERATE_FILL_RATE_ALERT"
95 |         
   | ^^^^^^^^
96 |         # Test 20% fill rate - should now trigger error-level alert
97 |         mock_logger.reset_mock() 
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_fill_rate_calculation_fix.py:97:33
   |
96 |         # Test 20% fill rate - should now trigger error-level alert
97 |         mock_logger.reset_mock() 
   |                                 ^
98 |         order_20pct = MockOrder(filled_qty=10)
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_fill_rate_calculation_fix.py:99:1
    |
 97 |         mock_logger.reset_mock() 
 98 |         order_20pct = MockOrder(filled_qty=10)
 99 |         
    | ^^^^^^^^
100 |         engine._reconcile_partial_fills(
101 |             symbol="MSFT",
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_fill_rate_calculation_fix.py:104:24
    |
102 |             submitted_qty=50,
103 |             remaining_qty=40,
104 |             side="buy", 
    |                        ^
105 |             last_order=order_20pct
106 |         )
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_fill_rate_calculation_fix.py:107:1
    |
105 |             last_order=order_20pct
106 |         )
107 |         
    | ^^^^^^^^
108 |         error_calls = mock_logger.error.call_args_list
109 |         low_fill_alerts = [call for call in error_calls if call[0][0] == "LOW_FILL_RATE_ALERT"]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fill_rate_calculation_fix.py:110:1
    |
108 |         error_calls = mock_logger.error.call_args_list
109 |         low_fill_alerts = [call for call in error_calls if call[0][0] == "LOW_FILL_RATE_ALERT"]
110 |         
    | ^^^^^^^^
111 |         assert len(low_fill_alerts) > 0, "20% fill rate should trigger LOW_FILL_RATE_ALERT"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fill_rate_calculation_fix.py:117:1
    |
115 | def test_fill_rate_calculation_with_valid_order_data():
116 |     """Test that fill rate calculation still works when order.filled_qty is properly set."""
117 |     
    | ^^^^
118 |     ctx = MockContext()
119 |     engine = ExecutionEngine(ctx)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fill_rate_calculation_fix.py:120:1
    |
118 |     ctx = MockContext()
119 |     engine = ExecutionEngine(ctx)
120 |     
    | ^^^^
121 |     with patch.object(engine, 'logger') as mock_logger:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fill_rate_calculation_fix.py:122:1
    |
121 |     with patch.object(engine, 'logger') as mock_logger:
122 |         
    | ^^^^^^^^
123 |         # Test Case: Order with valid filled_qty
124 |         order_with_filled_qty = MockOrder(filled_qty=75)  # 75 out of 100 requested
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fill_rate_calculation_fix.py:125:1
    |
123 |         # Test Case: Order with valid filled_qty
124 |         order_with_filled_qty = MockOrder(filled_qty=75)  # 75 out of 100 requested
125 |         
    | ^^^^^^^^
126 |         engine._reconcile_partial_fills(
127 |             symbol="TSLA", 
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_fill_rate_calculation_fix.py:127:27
    |
126 |         engine._reconcile_partial_fills(
127 |             symbol="TSLA", 
    |                           ^
128 |             submitted_qty=100,
129 |             remaining_qty=25,  # This should be ignored since order has filled_qty
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_fill_rate_calculation_fix.py:133:1
    |
131 |             last_order=order_with_filled_qty
132 |         )
133 |         
    | ^^^^^^^^
134 |         logged_calls = mock_logger.warning.call_args_list
135 |         partial_fill_logs = [call for call in logged_calls if call[0][0] == "PARTIAL_FILL_DETECTED"]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fill_rate_calculation_fix.py:136:1
    |
134 |         logged_calls = mock_logger.warning.call_args_list
135 |         partial_fill_logs = [call for call in logged_calls if call[0][0] == "PARTIAL_FILL_DETECTED"]
136 |         
    | ^^^^^^^^
137 |         if partial_fill_logs:
138 |             log_extra = partial_fill_logs[0][1]['extra']
    |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
   --> tests/test_fill_rate_calculation_fix.py:140:101
    |
138 |             log_extra = partial_fill_logs[0][1]['extra']
139 |             # Should use order.filled_qty (75) not calculated value (75)
140 |             assert log_extra['filled_qty'] == 75, f"Expected filled_qty=75, got {log_extra['filled_qty']}"
    |                                                                                                     ^^^^^^
141 |             assert log_extra['fill_rate_pct'] == 75.0, f"Expected 75% fill rate, got {log_extra['fill_rate_pct']}"
    |

E501 Line too long (114 > 100)
   --> tests/test_fill_rate_calculation_fix.py:141:101
    |
139 |             # Should use order.filled_qty (75) not calculated value (75)
140 |             assert log_extra['filled_qty'] == 75, f"Expected filled_qty=75, got {log_extra['filled_qty']}"
141 |             assert log_extra['fill_rate_pct'] == 75.0, f"Expected 75% fill rate, got {log_extra['fill_rate_pct']}"
    |                                                                                                     ^^^^^^^^^^^^^^
    |

W292 [*] No newline at end of file
   --> tests/test_fill_rate_calculation_fix.py:141:115
    |
139 |             # Should use order.filled_qty (75) not calculated value (75)
140 |             assert log_extra['filled_qty'] == 75, f"Expected filled_qty=75, got {log_extra['filled_qty']}"
141 |             assert log_extra['fill_rate_pct'] == 75.0, f"Expected 75% fill rate, got {log_extra['fill_rate_pct']}"
    |                                                                                                                   ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_fixes.py:7:1
   |
 5 |   """
 6 |
 7 | / import os
 8 | | import sys
 9 | | import csv
10 | | from pathlib import Path
   | |________________________^
11 |
12 |   def test_tickers_csv():
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:15:1
   |
13 |     """Test that tickers.csv has been expanded correctly."""
14 |     print("🔍 Testing tickers.csv expansion")
15 |     
   | ^^^^
16 |     tickers_file = Path("tickers.csv")
17 |     if not tickers_file.exists():
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:20:1
   |
18 |         print("❌ tickers.csv not found!")
19 |         return False
20 |     
   | ^^^^
21 |     with open(tickers_file, 'r') as f:
22 |         reader = csv.reader(f)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:24:1
   |
22 |         reader = csv.reader(f)
23 |         tickers = [row[0].strip().upper() for row in reader if row]
24 |     
   | ^^^^
25 |     expected_tickers = [
26 |         'AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'AMD', 'META', 
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_fixes.py:26:72
   |
25 |     expected_tickers = [
26 |         'AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'AMD', 'META', 
   |                                                                        ^
27 |         'NFLX', 'CRM', 'UBER', 'SHOP', 'PYPL', 'PLTR', 'SPY', 'QQQ', 
28 |         'IWM', 'JPM', 'JNJ', 'PG', 'KO', 'XOM', 'CVX', 'BABA'
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_fixes.py:27:69
   |
25 |     expected_tickers = [
26 |         'AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'AMD', 'META', 
27 |         'NFLX', 'CRM', 'UBER', 'SHOP', 'PYPL', 'PLTR', 'SPY', 'QQQ', 
   |                                                                     ^
28 |         'IWM', 'JPM', 'JNJ', 'PG', 'KO', 'XOM', 'CVX', 'BABA'
29 |     ]
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:30:1
   |
28 |         'IWM', 'JPM', 'JNJ', 'PG', 'KO', 'XOM', 'CVX', 'BABA'
29 |     ]
30 |     
   | ^^^^
31 |     print(f"📊 Found {len(tickers)} tickers in tickers.csv")
32 |     print(f"🎯 Expected {len(expected_tickers)} tickers")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:33:1
   |
31 |     print(f"📊 Found {len(tickers)} tickers in tickers.csv")
32 |     print(f"🎯 Expected {len(expected_tickers)} tickers")
33 |     
   | ^^^^
34 |     missing = set(expected_tickers) - set(tickers)
35 |     extra = set(tickers) - set(expected_tickers)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:36:1
   |
34 |     missing = set(expected_tickers) - set(tickers)
35 |     extra = set(tickers) - set(expected_tickers)
36 |     
   | ^^^^
37 |     if missing:
38 |         print(f"❌ Missing tickers: {missing}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:40:1
   |
38 |         print(f"❌ Missing tickers: {missing}")
39 |         return False
40 |     
   | ^^^^
41 |     if extra:
42 |         print(f"ℹ️ Extra tickers: {extra}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:43:1
   |
41 |     if extra:
42 |         print(f"ℹ️ Extra tickers: {extra}")
43 |     
   | ^^^^
44 |     print("✅ Tickers.csv expansion successful!")
45 |     return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:50:1
   |
48 |     """Test TA-Lib imports and fallback handling."""
49 |     print("\n🔍 Testing TA-Lib imports")
50 |     
   | ^^^^
51 |     try:
52 |         # Set dummy environment variables to avoid config errors
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:58:1
   |
56 |         os.environ.setdefault('WEBHOOK_SECRET', 'dummy')
57 |         os.environ.setdefault('FLASK_PORT', '5000')
58 |         
   | ^^^^^^^^
59 |         from ai_trading.strategies.imports import TA_AVAILABLE, ta
60 |         print(f"📦 TA library available: {TA_AVAILABLE}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:61:1
   |
59 |         from ai_trading.strategies.imports import TA_AVAILABLE, ta
60 |         print(f"📦 TA library available: {TA_AVAILABLE}")
61 |         
   | ^^^^^^^^
62 |         # Test that ta object is always available (real or mock)
63 |         if hasattr(ta, 'trend'):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:68:1
   |
66 |             print("❌ TA trend indicators not available")
67 |             return False
68 |         
   | ^^^^^^^^
69 |         if hasattr(ta, 'momentum'):
70 |             print("✅ TA momentum indicators available") 
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_fixes.py:70:56
   |
69 |         if hasattr(ta, 'momentum'):
70 |             print("✅ TA momentum indicators available") 
   |                                                         ^
71 |         else:
72 |             print("❌ TA momentum indicators not available")
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:74:1
   |
72 |             print("❌ TA momentum indicators not available")
73 |             return False
74 |         
   | ^^^^^^^^
75 |         if hasattr(ta, 'volatility'):
76 |             print("✅ TA volatility indicators available")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:80:1
   |
78 |             print("❌ TA volatility indicators not available")
79 |             return False
80 |         
   | ^^^^^^^^
81 |         # Test basic functionality with small dataset
82 |         test_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] * 3  # 30 data points
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:93:1
   |
91 |         except Exception as e:
92 |             print(f"⚠️ SMA calculation issue: {e}")
93 |         
   | ^^^^^^^^
94 |         print("✅ TA-Lib imports and fallback working correctly!")
95 |         return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes.py:96:1
   |
94 |         print("✅ TA-Lib imports and fallback working correctly!")
95 |         return True
96 |         
   | ^^^^^^^^
97 |     except ImportError as e:
98 |         print(f"❌ Failed to import TA-Lib modules: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes.py:107:1
    |
105 |     """Test that screen_universe function has enhanced logging."""
106 |     print("\n🔍 Testing screen_universe logging enhancements")
107 |     
    | ^^^^
108 |     try:
109 |         with open('bot_engine.py', 'r') as f:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes.py:111:1
    |
109 |         with open('bot_engine.py', 'r') as f:
110 |             content = f.read()
111 |         
    | ^^^^^^^^
112 |         # Check for enhanced logging statements
113 |         if 'logger.info(f"[SCREEN_UNIVERSE] Starting screening of' in content:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes.py:118:1
    |
116 |             print("❌ Enhanced screening start logging not found")
117 |             return False
118 |         
    | ^^^^^^^^
119 |         if 'filtered_out[sym] = "no_data"' in content:
120 |             print("✅ Detailed filtering reason tracking found")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes.py:124:1
    |
122 |             print("❌ Detailed filtering reason tracking not found")
123 |             return False
124 |         
    | ^^^^^^^^
125 |         if 'f"[SCREEN_UNIVERSE] Selected {len(selected)} of {len(cand_set)} candidates' in content:
126 |             print("✅ Enhanced summary logging found")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes.py:130:1
    |
128 |             print("❌ Enhanced summary logging not found")
129 |             return False
130 |         
    | ^^^^^^^^
131 |         print("✅ Screen universe logging enhancements verified!")
132 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes.py:133:1
    |
131 |         print("✅ Screen universe logging enhancements verified!")
132 |         return True
133 |         
    | ^^^^^^^^
134 |     except Exception as e:
135 |         print(f"❌ Error checking screen_universe logging: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes.py:141:1
    |
139 |     """Run all tests."""
140 |     print("🚀 Running Trading Bot Fixes Validation Tests\n")
141 |     
    | ^^^^
142 |     tests = [
143 |         test_tickers_csv,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes.py:147:1
    |
145 |         test_screen_universe_logging,
146 |     ]
147 |     
    | ^^^^
148 |     results = []
149 |     for test in tests:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes.py:155:1
    |
153 |             print(f"❌ Test {test.__name__} failed with exception: {e}")
154 |             results.append(False)
155 |     
    | ^^^^
156 |     print("\n📊 Test Results:")
157 |     print(f"✅ Passed: {sum(results)}/{len(results)}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes.py:159:1
    |
157 |     print(f"✅ Passed: {sum(results)}/{len(results)}")
158 |     print(f"❌ Failed: {len(results) - sum(results)}/{len(results)}")
159 |     
    | ^^^^
160 |     if all(results):
161 |         print("\n🎉 All tests passed! Trading bot fixes are working correctly.")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_fixes.py:168:21
    |
167 | if __name__ == "__main__":
168 |     sys.exit(main())
    |                     ^
    |
help: Add trailing newline

W293 [*] Blank line contains whitespace
  --> tests/test_fixes_minimal.py:20:1
   |
18 |     """Test that the missing RiskEngine methods now exist."""
19 |     print("Testing RiskEngine missing methods")
20 |     
   | ^^^^
21 |     try:
22 |         from ai_trading.risk.engine import RiskEngine  # AI-AGENT-REF: normalized import
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes_minimal.py:23:1
   |
21 |     try:
22 |         from ai_trading.risk.engine import RiskEngine  # AI-AGENT-REF: normalized import
23 |         
   | ^^^^^^^^
24 |         # Create risk engine instance
25 |         risk_engine = RiskEngine()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes_minimal.py:26:1
   |
24 |         # Create risk engine instance
25 |         risk_engine = RiskEngine()
26 |         
   | ^^^^^^^^
27 |         # Test that all required methods exist
28 |         assert hasattr(risk_engine, 'get_current_exposure'), "get_current_exposure method missing"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes_minimal.py:32:1
   |
30 |         assert hasattr(risk_engine, 'max_exposure'), "max_exposure method missing"
31 |         assert hasattr(risk_engine, 'order_spacing'), "order_spacing method missing"
32 |         
   | ^^^^^^^^
33 |         # Test that methods return appropriate types
34 |         exposure = risk_engine.get_current_exposure()
   |
help: Remove whitespace from blank line

E501 Line too long (107 > 100)
  --> tests/test_fixes_minimal.py:35:101
   |
33 |         # Test that methods return appropriate types
34 |         exposure = risk_engine.get_current_exposure()
35 |         assert isinstance(exposure, dict), f"get_current_exposure should return dict, got {type(exposure)}"
   |                                                                                                     ^^^^^^^
36 |         
37 |         max_orders = risk_engine.max_concurrent_orders()
   |

W293 [*] Blank line contains whitespace
  --> tests/test_fixes_minimal.py:36:1
   |
34 |         exposure = risk_engine.get_current_exposure()
35 |         assert isinstance(exposure, dict), f"get_current_exposure should return dict, got {type(exposure)}"
36 |         
   | ^^^^^^^^
37 |         max_orders = risk_engine.max_concurrent_orders()
38 |         assert isinstance(max_orders, int), f"max_concurrent_orders should return int, got {type(max_orders)}"
   |
help: Remove whitespace from blank line

E501 Line too long (110 > 100)
  --> tests/test_fixes_minimal.py:38:101
   |
37 |         max_orders = risk_engine.max_concurrent_orders()
38 |         assert isinstance(max_orders, int), f"max_concurrent_orders should return int, got {type(max_orders)}"
   |                                                                                                     ^^^^^^^^^^
39 |         
40 |         max_exp = risk_engine.max_exposure()
   |

W293 [*] Blank line contains whitespace
  --> tests/test_fixes_minimal.py:39:1
   |
37 |         max_orders = risk_engine.max_concurrent_orders()
38 |         assert isinstance(max_orders, int), f"max_concurrent_orders should return int, got {type(max_orders)}"
39 |         
   | ^^^^^^^^
40 |         max_exp = risk_engine.max_exposure()
41 |         assert isinstance(max_exp, float), f"max_exposure should return float, got {type(max_exp)}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes_minimal.py:42:1
   |
40 |         max_exp = risk_engine.max_exposure()
41 |         assert isinstance(max_exp, float), f"max_exposure should return float, got {type(max_exp)}"
42 |         
   | ^^^^^^^^
43 |         spacing = risk_engine.order_spacing()
44 |         assert isinstance(spacing, float), f"order_spacing should return float, got {type(spacing)}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes_minimal.py:45:1
   |
43 |         spacing = risk_engine.order_spacing()
44 |         assert isinstance(spacing, float), f"order_spacing should return float, got {type(spacing)}"
45 |         
   | ^^^^^^^^
46 |         print("✓ All RiskEngine methods exist and return correct types")
47 |         return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes_minimal.py:48:1
   |
46 |         print("✓ All RiskEngine methods exist and return correct types")
47 |         return True
48 |         
   | ^^^^^^^^
49 |     except Exception as e:
50 |         print(f"✗ RiskEngine test failed: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes_minimal.py:57:1
   |
55 |     """Test BotContext alpaca_client property."""
56 |     print("Testing BotContext alpaca_client compatibility")
57 |     
   | ^^^^
58 |     try:
59 |         from ai_trading.core.bot_engine import BotContext
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_fixes_minimal.py:59:9
   |
58 |       try:
59 | /         from ai_trading.core.bot_engine import BotContext
60 | |         from datetime import timedelta, datetime
   | |________________________________________________^
61 |           
62 |           # Create minimal BotContext with mocked dependencies
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_fixes_minimal.py:61:1
   |
59 |         from ai_trading.core.bot_engine import BotContext
60 |         from datetime import timedelta, datetime
61 |         
   | ^^^^^^^^
62 |         # Create minimal BotContext with mocked dependencies
63 |         mock_api = Mock()
   |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
  --> tests/test_fixes_minimal.py:74:101
   |
72 |             entry_start_offset=timedelta(minutes=30),
73 |             entry_end_offset=timedelta(minutes=30),
74 |             market_open=datetime.now(timezone.utc).time(),  # AI-AGENT-REF: Use timezone-aware datetime
   |                                                                                                     ^^^
75 |             market_close=datetime.now(timezone.utc).time(),  # AI-AGENT-REF: Use timezone-aware datetime
76 |             regime_lookback=10,
   |

E501 Line too long (104 > 100)
  --> tests/test_fixes_minimal.py:75:101
   |
73 |             entry_end_offset=timedelta(minutes=30),
74 |             market_open=datetime.now(timezone.utc).time(),  # AI-AGENT-REF: Use timezone-aware datetime
75 |             market_close=datetime.now(timezone.utc).time(),  # AI-AGENT-REF: Use timezone-aware datetime
   |                                                                                                     ^^^^
76 |             regime_lookback=10,
77 |             regime_atr_threshold=0.02,
   |

W293 [*] Blank line contains whitespace
  --> tests/test_fixes_minimal.py:85:1
   |
83 |             params={}
84 |         )
85 |         
   | ^^^^^^^^
86 |         # Test alpaca_client property
87 |         assert hasattr(ctx, 'alpaca_client'), "alpaca_client property missing"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes_minimal.py:89:1
   |
87 |         assert hasattr(ctx, 'alpaca_client'), "alpaca_client property missing"
88 |         assert ctx.alpaca_client is mock_api, "alpaca_client should return the api object"
89 |         
   | ^^^^^^^^
90 |         print("✓ BotContext alpaca_client property works correctly")
91 |         return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_fixes_minimal.py:92:1
   |
90 |         print("✓ BotContext alpaca_client property works correctly")
91 |         return True
92 |         
   | ^^^^^^^^
93 |     except Exception as e:
94 |         print(f"✗ BotContext test failed: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes_minimal.py:121:1
    |
119 |     """Test data validation module exists and has required functions."""
120 |     print("Testing data validation module")
121 |     
    | ^^^^
122 |     try:
123 |         import ai_trading.data_validation as data_validation
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes_minimal.py:124:1
    |
122 |     try:
123 |         import ai_trading.data_validation as data_validation
124 |         
    | ^^^^^^^^
125 |         # Test required functions exist
126 |         required_functions = [
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes_minimal.py:133:1
    |
131 |             'emergency_data_check'
132 |         ]
133 |         
    | ^^^^^^^^
134 |         for func_name in required_functions:
135 |             assert hasattr(data_validation, func_name), f"{func_name} function missing"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes_minimal.py:136:1
    |
134 |         for func_name in required_functions:
135 |             assert hasattr(data_validation, func_name), f"{func_name} function missing"
136 |         
    | ^^^^^^^^
137 |         print("✓ Data validation module has all required functions")
138 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes_minimal.py:139:1
    |
137 |         print("✓ Data validation module has all required functions")
138 |         return True
139 |         
    | ^^^^^^^^
140 |     except Exception as e:
141 |         print(f"✗ Data validation test failed: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes_minimal.py:148:1
    |
146 |     """Test audit module has enhanced permission handling."""
147 |     print("Testing audit permission handling")
148 |     
    | ^^^^
149 |     try:
150 |         import ai_trading.audit as audit  # AI-AGENT-REF: canonical import
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_fixes_minimal.py:150:9
    |
149 |       try:
150 | /         import ai_trading.audit as audit  # AI-AGENT-REF: canonical import
151 | |         import inspect
    | |______________________^
152 |           
153 |           # Check that log_trade function exists
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_fixes_minimal.py:152:1
    |
150 |         import ai_trading.audit as audit  # AI-AGENT-REF: canonical import
151 |         import inspect
152 |         
    | ^^^^^^^^
153 |         # Check that log_trade function exists
154 |         assert hasattr(audit, 'log_trade'), "log_trade function missing"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes_minimal.py:155:1
    |
153 |         # Check that log_trade function exists
154 |         assert hasattr(audit, 'log_trade'), "log_trade function missing"
155 |         
    | ^^^^^^^^
156 |         # Check that enhanced permission handling code exists
157 |         source = inspect.getsource(audit.log_trade)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes_minimal.py:160:1
    |
158 |         assert 'ProcessManager' in source, "ProcessManager not found in audit.log_trade"
159 |         assert 'fix_file_permissions' in source, "fix_file_permissions not found in audit.log_trade"
160 |         
    | ^^^^^^^^
161 |         print("✓ Audit module has enhanced permission handling")
162 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes_minimal.py:163:1
    |
161 |         print("✓ Audit module has enhanced permission handling")
162 |         return True
163 |         
    | ^^^^^^^^
164 |     except Exception as e:
165 |         print(f"✗ Audit permission handling test failed: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes_minimal.py:174:1
    |
172 |     print("TESTING CRITICAL TRADING BOT FIXES")
173 |     print("=" * 60)
174 |     
    | ^^^^
175 |     tests = [
176 |         test_risk_engine_methods_exist,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes_minimal.py:182:1
    |
180 |         test_audit_permission_handling
181 |     ]
182 |     
    | ^^^^
183 |     passed = 0
184 |     failed = 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes_minimal.py:185:1
    |
183 |     passed = 0
184 |     failed = 0
185 |     
    | ^^^^
186 |     for test in tests:
187 |         try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes_minimal.py:196:1
    |
194 |             failed += 1
195 |         print()
196 |     
    | ^^^^
197 |     print("=" * 60)
198 |     print(f"RESULTS: {passed} passed, {failed} failed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_fixes_minimal.py:200:1
    |
198 |     print(f"RESULTS: {passed} passed, {failed} failed")
199 |     print("=" * 60)
200 |     
    | ^^^^
201 |     if failed == 0:
202 |         print("🎉 ALL CRITICAL FIXES IMPLEMENTED SUCCESSFULLY!")
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_grid_runner.py:1:1
  |
1 | / import tempfile
2 | | import json
3 | | import os
4 | | from ai_trading.backtesting.grid_runner import grid_search, persist_artifacts
  | |_____________________________________________________________________________^
5 |
6 |   def test_grid_search_basic():
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_grid_runner.py:10:1
   |
 8 |     def evaluator(params):
 9 |         return {"sharpe": params.get("kelly", 0.5) * 2, "result": "ok"}
10 |     
   | ^^^^
11 |     grid = {"kelly": [0.3, 0.6], "lookback": [50, 100]}
12 |     result = grid_search(evaluator, grid, n_jobs=1)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_grid_runner.py:13:1
   |
11 |     grid = {"kelly": [0.3, 0.6], "lookback": [50, 100]}
12 |     result = grid_search(evaluator, grid, n_jobs=1)
13 |     
   | ^^^^
14 |     assert result["count"] == 4  # 2 * 2 combinations
15 |     assert len(result["results"]) == 4
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_grid_runner.py:16:1
   |
14 |     assert result["count"] == 4  # 2 * 2 combinations
15 |     assert len(result["results"]) == 4
16 |     
   | ^^^^
17 |     # Check that all combinations were tested
18 |     kellys = [r["params"]["kelly"] for r in result["results"]]
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_grid_runner.py:27:1
   |
25 |     def evaluator(params):
26 |         return {"sharpe": 1.23, "calmar": 0.8}
27 |     
   | ^^^^
28 |     grid = {"kelly": [0.5]}
29 |     run = grid_search(evaluator, grid, n_jobs=1)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_grid_runner.py:30:1
   |
28 |     grid = {"kelly": [0.5]}
29 |     run = grid_search(evaluator, grid, n_jobs=1)
30 |     
   | ^^^^
31 |     with tempfile.TemporaryDirectory() as tmp_dir:
32 |         out_dir = persist_artifacts(run, tmp_dir)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_grid_runner.py:33:1
   |
31 |     with tempfile.TemporaryDirectory() as tmp_dir:
32 |         out_dir = persist_artifacts(run, tmp_dir)
33 |         
   | ^^^^^^^^
34 |         # Check that directory was created
35 |         assert os.path.exists(out_dir)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_grid_runner.py:37:1
   |
35 |         assert os.path.exists(out_dir)
36 |         assert "run_" in os.path.basename(out_dir)
37 |         
   | ^^^^^^^^
38 |         # Check that results file exists and is valid JSON
39 |         results_file = os.path.join(out_dir, "results.json")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_grid_runner.py:41:1
   |
39 |         results_file = os.path.join(out_dir, "results.json")
40 |         assert os.path.exists(results_file)
41 |         
   | ^^^^^^^^
42 |         with open(results_file, "r") as f:
43 |             saved_data = json.load(f)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_grid_runner.py:44:1
   |
42 |         with open(results_file, "r") as f:
43 |             saved_data = json.load(f)
44 |         
   | ^^^^^^^^
45 |         assert saved_data["count"] == 1
46 |         assert len(saved_data["results"]) == 1
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_grid_runner.py:53:1
   |
51 |     def evaluator(params):
52 |         return {"result": "empty"}
53 |     
   | ^^^^
54 |     grid = {}
55 |     result = grid_search(evaluator, grid, n_jobs=1)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_grid_runner.py:56:1
   |
54 |     grid = {}
55 |     result = grid_search(evaluator, grid, n_jobs=1)
56 |     
   | ^^^^
57 |     assert result["count"] == 1  # Should still run once with empty params
58 |     assert len(result["results"]) == 1
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_grid_runner.py:65:1
   |
63 |     def evaluator(params):
64 |         return {"value": params.get("x", 0) * 2}
65 |     
   | ^^^^
66 |     grid = {"x": [1, 2, 3]}
67 |     result = grid_search(evaluator, grid, n_jobs=1)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_grid_runner.py:68:1
   |
66 |     grid = {"x": [1, 2, 3]}
67 |     result = grid_search(evaluator, grid, n_jobs=1)
68 |     
   | ^^^^
69 |     assert result["count"] == 3
70 |     values = [r["metrics"]["value"] for r in result["results"]]
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_grid_runner.py:71:39
   |
69 |     assert result["count"] == 3
70 |     values = [r["metrics"]["value"] for r in result["results"]]
71 |     assert sorted(values) == [2, 4, 6]
   |                                       ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_grid_sanity.py:1:1
  |
1 | import pandas as pd
  | ^^^^^^^^^^^^^^^^^^^
2 |
3 | def test_grid_search_results():
  |
help: Organize imports

E501 Line too long (126 > 100)
   --> tests/test_health.py:214:101
    |
212 | sys.modules["torch"].manual_seed = lambda *a, **k: None
213 | sys.modules["torch"].Tensor = object
214 | sys.modules["torch"].tensor = lambda *a, **k: types.SimpleNamespace(detach=lambda: types.SimpleNamespace(numpy=lambda: [0.0]))
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
215 | torch_nn = types.ModuleType("torch.nn")
216 | torch_nn.Module = object
    |

RUF100 [*] Unused `noqa` directive (unused: `F401`)
  --> tests/test_http_timeouts.py:16:22
   |
14 |     import importlib
15 |
16 |     import requests  # noqa: F401
   |                      ^^^^^^^^^^^^
17 |
18 |     Session = getattr(requests, "Session", None)
   |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_http_timeouts_enforced.py:1:1
  |
1 | / import pathlib
2 | | import re
  | |_________^
3 |
4 |   def test_all_requests_have_timeout():
  |
help: Organize imports

W292 [*] No newline at end of file
  --> tests/test_http_timeouts_enforced.py:27:71
   |
25 |                 first_line = full_call.split('\n')[0]
26 |                 offenders.append(f"{p}:{line_no}:{first_line.strip()[:100]}")
27 |     assert not offenders, f"Missing timeout= on requests: {offenders}"
   |                                                                       ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_hyperparams.py:1:1
  |
1 | / import pytest
2 | | import os
3 | | import json
  | |___________^
4 |
5 |   @pytest.mark.skipif(not os.path.exists('best_hyperparams.json'), reason='best_hyperparams.json not present')
  |
help: Organize imports

E501 Line too long (108 > 100)
 --> tests/test_hyperparams.py:5:101
  |
3 | import json
4 |
5 | @pytest.mark.skipif(not os.path.exists('best_hyperparams.json'), reason='best_hyperparams.json not present')
  |                                                                                                     ^^^^^^^^
6 | def test_best_hyperparams_sensible():
7 |     with open('best_hyperparams.json') as f:
  |

E501 Line too long (116 > 100)
  --> tests/test_hyperparams.py:9:101
   |
 7 |     with open('best_hyperparams.json') as f:
 8 |         params = json.load(f)
 9 |     assert 1 <= params.get('fast_period', 0) < params.get('slow_period', 100), 'Fast period should be < slow period'
   |                                                                                                     ^^^^^^^^^^^^^^^^
10 |     assert params.get('signal_period', 0) > 0, 'Signal period must be positive'
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_imports_no_cycle.py:1:1
  |
1 | / import ai_trading.core.bot_engine as be
2 | | import ai_trading.portfolio.core as pc
  | |______________________________________^
3 |
4 |   def test_imports():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_indicator_manager.py:1:1
  |
1 | from ai_trading.indicator_manager import IndicatorManager, IndicatorSpec
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2 |
3 | def test_indicator_manager_streaming_basic():
  |
help: Organize imports

W292 [*] No newline at end of file
  --> tests/test_indicator_manager.py:14:36
   |
12 |     assert set(out.keys()) == {"sma10", "ema10", "rsi14"}
13 |     for v in out.values():
14 |         assert isinstance(v, float)
   |                                    ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_initial_rebalance.py:1:1
  |
1 | / import types
2 | | import pandas as pd
3 | | import datetime
4 | | from ai_trading.core import bot_engine
  | |______________________________________^
5 |
6 |   class DummyFetcher:
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_institutional_core.py:8:1
   |
 6 |   """
 7 |
 8 | / from datetime import time
 9 | |
10 | | from ai_trading.core.enums import (
11 | |     OrderSide, OrderType, OrderStatus, RiskLevel, 
12 | |     TimeFrame, AssetClass
13 | | )
14 | | from ai_trading.core.constants import (
15 | |     TRADING_CONSTANTS, RISK_PARAMETERS,
16 | |     KELLY_PARAMETERS, EXECUTION_PARAMETERS
17 | | )
   | |_^
   |
help: Organize imports

W291 [*] Trailing whitespace
  --> tests/test_institutional_core.py:11:50
   |
10 | from ai_trading.core.enums import (
11 |     OrderSide, OrderType, OrderStatus, RiskLevel, 
   |                                                  ^
12 |     TimeFrame, AssetClass
13 | )
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_core.py:22:1
   |
20 | class TestOrderEnums:
21 |     """Test order-related enumerations."""
22 |     
   | ^^^^
23 |     def test_order_side_values(self):
24 |         """Test OrderSide enum values."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_core.py:29:1
   |
27 |         assert str(OrderSide.BUY) == "buy"
28 |         assert str(OrderSide.SELL) == "sell"
29 |     
   | ^^^^
30 |     def test_order_type_values(self):
31 |         """Test OrderType enum values."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_core.py:36:1
   |
34 |         assert OrderType.STOP.value == "stop"
35 |         assert OrderType.STOP_LIMIT.value == "stop_limit"
36 |     
   | ^^^^
37 |     def test_order_status_values(self):
38 |         """Test OrderStatus enum values."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_core.py:43:1
   |
41 |         assert OrderStatus.CANCELED.value == "canceled"
42 |         assert OrderStatus.REJECTED.value == "rejected"
43 |     
   | ^^^^
44 |     def test_order_status_terminal(self):
45 |         """Test terminal status check."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_core.py:56:1
   |
54 | class TestRiskLevel:
55 |     """Test risk level enumeration."""
56 |     
   | ^^^^
57 |     def test_risk_level_values(self):
58 |         """Test RiskLevel enum values."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_core.py:62:1
   |
60 |         assert RiskLevel.MODERATE.value == "moderate"
61 |         assert RiskLevel.AGGRESSIVE.value == "aggressive"
62 |     
   | ^^^^
63 |     def test_max_position_size(self):
64 |         """Test maximum position size by risk level."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_core.py:68:1
   |
66 |         assert RiskLevel.MODERATE.max_position_size == 0.05
67 |         assert RiskLevel.AGGRESSIVE.max_position_size == 0.10
68 |     
   | ^^^^
69 |     def test_max_drawdown_threshold(self):
70 |         """Test maximum drawdown threshold by risk level."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_core.py:78:1
   |
76 | class TestTimeFrame:
77 |     """Test timeframe enumeration."""
78 |     
   | ^^^^
79 |     def test_timeframe_values(self):
80 |         """Test TimeFrame enum values."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_core.py:84:1
   |
82 |         assert TimeFrame.HOUR_1.value == "1h"
83 |         assert TimeFrame.DAY_1.value == "1d"
84 |     
   | ^^^^
85 |     def test_timeframe_seconds(self):
86 |         """Test timeframe conversion to seconds."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_core.py:95:1
   |
93 | class TestAssetClass:
94 |     """Test asset class enumeration."""
95 |     
   | ^^^^
96 |     def test_asset_class_values(self):
97 |         """Test AssetClass enum values."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:107:1
    |
105 | class TestTradingConstants:
106 |     """Test trading constants configuration."""
107 |     
    | ^^^^
108 |     def test_market_hours_exist(self):
109 |         """Test market hours are defined."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:112:1
    |
110 |         assert "MARKET_HOURS" in TRADING_CONSTANTS
111 |         market_hours = TRADING_CONSTANTS["MARKET_HOURS"]
112 |         
    | ^^^^^^^^
113 |         assert "MARKET_OPEN" in market_hours
114 |         assert "MARKET_CLOSE" in market_hours
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:117:1
    |
115 |         assert isinstance(market_hours["MARKET_OPEN"], time)
116 |         assert isinstance(market_hours["MARKET_CLOSE"], time)
117 |     
    | ^^^^
118 |     def test_risk_parameters_exist(self):
119 |         """Test risk parameters are defined."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:122:1
    |
120 |         assert "RISK_PARAMETERS" in TRADING_CONSTANTS
121 |         risk_params = TRADING_CONSTANTS["RISK_PARAMETERS"]
122 |         
    | ^^^^^^^^
123 |         required_params = [
124 |             "MAX_PORTFOLIO_RISK",
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_institutional_core.py:125:33
    |
123 |         required_params = [
124 |             "MAX_PORTFOLIO_RISK",
125 |             "MAX_POSITION_SIZE", 
    |                                 ^
126 |             "STOP_LOSS_MULTIPLIER",
127 |             "TAKE_PROFIT_MULTIPLIER"
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:129:1
    |
127 |             "TAKE_PROFIT_MULTIPLIER"
128 |         ]
129 |         
    | ^^^^^^^^
130 |         for param in required_params:
131 |             assert param in risk_params
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:133:1
    |
131 |             assert param in risk_params
132 |             assert isinstance(risk_params[param], (int, float))
133 |     
    | ^^^^
134 |     def test_kelly_parameters_exist(self):
135 |         """Test Kelly Criterion parameters are defined."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:138:1
    |
136 |         assert "KELLY_PARAMETERS" in TRADING_CONSTANTS
137 |         kelly_params = TRADING_CONSTANTS["KELLY_PARAMETERS"]
138 |         
    | ^^^^^^^^
139 |         required_params = [
140 |             "MIN_SAMPLE_SIZE",
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:145:1
    |
143 |             "LOOKBACK_PERIODS"
144 |         ]
145 |         
    | ^^^^^^^^
146 |         for param in required_params:
147 |             assert param in kelly_params
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:149:1
    |
147 |             assert param in kelly_params
148 |             assert isinstance(kelly_params[param], (int, float))
149 |     
    | ^^^^
150 |     def test_execution_parameters_exist(self):
151 |         """Test execution parameters are defined."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:154:1
    |
152 |         assert "EXECUTION_PARAMETERS" in TRADING_CONSTANTS
153 |         exec_params = TRADING_CONSTANTS["EXECUTION_PARAMETERS"]
154 |         
    | ^^^^^^^^
155 |         required_params = [
156 |             "MAX_SLIPPAGE_BPS",
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:161:1
    |
159 |             "RETRY_ATTEMPTS"
160 |         ]
161 |         
    | ^^^^^^^^
162 |         for param in required_params:
163 |             assert param in exec_params
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:165:1
    |
163 |             assert param in exec_params
164 |             assert isinstance(exec_params[param], (int, float))
165 |     
    | ^^^^
166 |     def test_parameter_value_ranges(self):
167 |         """Test parameter values are within reasonable ranges."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:169:1
    |
167 |         """Test parameter values are within reasonable ranges."""
168 |         risk_params = RISK_PARAMETERS
169 |         
    | ^^^^^^^^
170 |         # Risk parameters should be percentages
171 |         assert 0 < risk_params["MAX_PORTFOLIO_RISK"] <= 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:173:1
    |
171 |         assert 0 < risk_params["MAX_PORTFOLIO_RISK"] <= 1
172 |         assert 0 < risk_params["MAX_POSITION_SIZE"] <= 1
173 |         
    | ^^^^^^^^
174 |         # Multipliers should be positive
175 |         assert risk_params["STOP_LOSS_MULTIPLIER"] > 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:177:1
    |
175 |         assert risk_params["STOP_LOSS_MULTIPLIER"] > 0
176 |         assert risk_params["TAKE_PROFIT_MULTIPLIER"] > 0
177 |         
    | ^^^^^^^^
178 |         # Kelly parameters
179 |         kelly_params = KELLY_PARAMETERS
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:183:1
    |
181 |         assert 0 < kelly_params["MAX_KELLY_FRACTION"] <= 1
182 |         assert 0 < kelly_params["CONFIDENCE_LEVEL"] < 1
183 |         
    | ^^^^^^^^
184 |         # Execution parameters
185 |         exec_params = EXECUTION_PARAMETERS
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:193:1
    |
191 | class TestConstantsIntegration:
192 |     """Test integration between different constant groups."""
193 |     
    | ^^^^
194 |     def test_all_constant_groups_present(self):
195 |         """Test all major constant groups are present."""
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_institutional_core.py:198:31
    |
196 |         required_groups = [
197 |             "MARKET_HOURS",
198 |             "RISK_PARAMETERS", 
    |                               ^
199 |             "KELLY_PARAMETERS",
200 |             "EXECUTION_PARAMETERS",
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:205:1
    |
203 |             "SYSTEM_LIMITS"
204 |         ]
205 |         
    | ^^^^^^^^
206 |         for group in required_groups:
207 |             assert group in TRADING_CONSTANTS
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:209:1
    |
207 |             assert group in TRADING_CONSTANTS
208 |             assert isinstance(TRADING_CONSTANTS[group], dict)
209 |     
    | ^^^^
210 |     def test_constants_are_immutable_types(self):
211 |         """Test constants use immutable types where appropriate."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:216:1
    |
214 |         for hour_key, hour_value in market_hours.items():
215 |             assert isinstance(hour_value, time)
216 |         
    | ^^^^^^^^
217 |         # Numeric parameters should be numbers
218 |         risk_params = TRADING_CONSTANTS["RISK_PARAMETERS"]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:221:1
    |
219 |         for param_key, param_value in risk_params.items():
220 |             assert isinstance(param_value, (int, float))
221 |     
    | ^^^^
222 |     def test_constants_consistency(self):
223 |         """Test consistency between related constants."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:226:1
    |
224 |         risk_params = RISK_PARAMETERS
225 |         kelly_params = KELLY_PARAMETERS
226 |         
    | ^^^^^^^^
227 |         # Kelly max fraction should be reasonable relative to max position size
228 |         assert kelly_params["MAX_KELLY_FRACTION"] >= risk_params["MAX_POSITION_SIZE"]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_core.py:229:1
    |
227 |         # Kelly max fraction should be reasonable relative to max position size
228 |         assert kelly_params["MAX_KELLY_FRACTION"] >= risk_params["MAX_POSITION_SIZE"]
229 |         
    | ^^^^^^^^
230 |         # Performance thresholds should be reasonable
231 |         perf_thresholds = TRADING_CONSTANTS["PERFORMANCE_THRESHOLDS"]
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_institutional_core.py:234:55
    |
232 |         assert perf_thresholds["MIN_SHARPE_RATIO"] > 0
233 |         assert 0 < perf_thresholds["MAX_DRAWDOWN"] < 1
234 |         assert 0 < perf_thresholds["MIN_WIN_RATE"] < 1
    |                                                       ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_institutional_enhancements.py:8:1
   |
 6 |   """
 7 |
 8 | / import unittest
 9 | | from unittest.mock import Mock
10 | | from datetime import datetime, timedelta, timezone
   | |__________________________________________________^
11 |
12 |   # Test adaptive position sizing
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_enhancements.py:15:1
   |
13 | class TestAdaptivePositionSizing(unittest.TestCase):
14 |     """Test adaptive position sizing with market condition awareness."""
15 |     
   | ^^^^
16 |     def setUp(self):
17 |         """Set up test fixtures."""
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_institutional_enhancements.py:19:13
   |
17 |           """Set up test fixtures."""
18 |           try:
19 | /             from ai_trading.risk.adaptive_sizing import (
20 | |                 MarketConditionAnalyzer, AdaptivePositionSizer, MarketRegime
21 | |             )
22 | |             from ai_trading.core.enums import RiskLevel
   | |_______________________________________________________^
23 |               
24 |               self.MarketConditionAnalyzer = MarketConditionAnalyzer
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_enhancements.py:23:1
   |
21 |             )
22 |             from ai_trading.core.enums import RiskLevel
23 |             
   | ^^^^^^^^^^^^
24 |             self.MarketConditionAnalyzer = MarketConditionAnalyzer
25 |             self.AdaptivePositionSizer = AdaptivePositionSizer
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_enhancements.py:32:1
   |
30 |             self.imports_available = False
31 |             self.skipTest("Adaptive sizing modules not available")
32 |     
   | ^^^^
33 |     def test_market_condition_analyzer_initialization(self):
34 |         """Test market condition analyzer initialization."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_enhancements.py:37:1
   |
35 |         if not self.imports_available:
36 |             self.skipTest("Dependencies not available")
37 |         
   | ^^^^^^^^
38 |         analyzer = self.MarketConditionAnalyzer(lookback_days=30)
39 |         self.assertEqual(analyzer.lookback_days, 30)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_enhancements.py:41:1
   |
39 |         self.assertEqual(analyzer.lookback_days, 30)
40 |         self.assertEqual(analyzer.volatility_window, 20)
41 |     
   | ^^^^
42 |     def test_market_regime_classification(self):
43 |         """Test market regime classification."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_enhancements.py:46:1
   |
44 |         if not self.imports_available:
45 |             self.skipTest("Dependencies not available")
46 |         
   | ^^^^^^^^
47 |         analyzer = self.MarketConditionAnalyzer()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_enhancements.py:48:1
   |
47 |         analyzer = self.MarketConditionAnalyzer()
48 |         
   | ^^^^^^^^
49 |         # Test with mock price data
50 |         price_data = {
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_enhancements.py:53:1
   |
51 |             "SPY": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110] * 10
52 |         }
53 |         
   | ^^^^^^^^
54 |         regime = analyzer.analyze_market_regime(price_data)
55 |         self.assertIsInstance(regime, self.MarketRegime)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_enhancements.py:56:1
   |
54 |         regime = analyzer.analyze_market_regime(price_data)
55 |         self.assertIsInstance(regime, self.MarketRegime)
56 |     
   | ^^^^
57 |     def test_adaptive_position_sizer_initialization(self):
58 |         """Test adaptive position sizer initialization."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_enhancements.py:61:1
   |
59 |         if not self.imports_available:
60 |             self.skipTest("Dependencies not available")
61 |         
   | ^^^^^^^^
62 |         sizer = self.AdaptivePositionSizer(self.RiskLevel.MODERATE)
63 |         self.assertEqual(sizer.risk_level, self.RiskLevel.MODERATE)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_enhancements.py:65:1
   |
63 |         self.assertEqual(sizer.risk_level, self.RiskLevel.MODERATE)
64 |         self.assertIsNotNone(sizer.market_analyzer)
65 |     
   | ^^^^
66 |     def test_adaptive_position_calculation(self):
67 |         """Test adaptive position size calculation."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_enhancements.py:70:1
   |
68 |         if not self.imports_available:
69 |             self.skipTest("Dependencies not available")
70 |         
   | ^^^^^^^^
71 |         sizer = self.AdaptivePositionSizer()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_enhancements.py:72:1
   |
71 |         sizer = self.AdaptivePositionSizer()
72 |         
   | ^^^^^^^^
73 |         # Mock data
74 |         symbol = "AAPL"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_enhancements.py:88:1
   |
86 |             "current_positions": {}
87 |         }
88 |         
   | ^^^^^^^^
89 |         result = sizer.calculate_adaptive_position(
90 |             symbol, account_equity, entry_price, market_data, portfolio_data
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_enhancements.py:92:1
   |
90 |             symbol, account_equity, entry_price, market_data, portfolio_data
91 |         )
92 |         
   | ^^^^^^^^
93 |         self.assertIn("symbol", result)
94 |         self.assertIn("recommended_size", result)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:102:1
    |
100 | class TestPreTradeValidation(unittest.TestCase):
101 |     """Test enhanced pre-trade validation system."""
102 |     
    | ^^^^
103 |     def setUp(self):
104 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_institutional_enhancements.py:106:13
    |
104 |           """Set up test fixtures."""
105 |           try:
106 | /             from ai_trading.risk.pre_trade_validation import (
107 | |                 PreTradeValidator, ValidationStatus, MarketHoursValidator,
108 | |                 LiquidityValidator, RiskValidator
109 | |             )
110 | |             from ai_trading.core.enums import RiskLevel
    | |_______________________________________________________^
111 |               
112 |               self.PreTradeValidator = PreTradeValidator
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:111:1
    |
109 |             )
110 |             from ai_trading.core.enums import RiskLevel
111 |             
    | ^^^^^^^^^^^^
112 |             self.PreTradeValidator = PreTradeValidator
113 |             self.ValidationStatus = ValidationStatus
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:122:1
    |
120 |             self.imports_available = False
121 |             self.skipTest("Pre-trade validation modules not available")
122 |     
    | ^^^^
123 |     def test_market_hours_validator(self):
124 |         """Test market hours validation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:127:1
    |
125 |         if not self.imports_available:
126 |             self.skipTest("Dependencies not available")
127 |         
    | ^^^^^^^^
128 |         validator = self.MarketHoursValidator()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:129:1
    |
128 |         validator = self.MarketHoursValidator()
129 |         
    | ^^^^^^^^
130 |         # Test during market hours (2:30 PM UTC = 9:30 AM EST)
131 |         market_time = datetime.now(timezone.utc).replace(hour=15, minute=0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:133:1
    |
131 |         market_time = datetime.now(timezone.utc).replace(hour=15, minute=0)
132 |         result = validator.validate_market_hours(market_time)
133 |         
    | ^^^^^^^^
134 |         self.assertIn(result.status, [self.ValidationStatus.APPROVED, self.ValidationStatus.WARNING])
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> tests/test_institutional_enhancements.py:134:101
    |
132 |         result = validator.validate_market_hours(market_time)
133 |         
134 |         self.assertIn(result.status, [self.ValidationStatus.APPROVED, self.ValidationStatus.WARNING])
    |                                                                                                     ^
135 |     
136 |     def test_liquidity_validator(self):
    |

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:135:1
    |
134 |         self.assertIn(result.status, [self.ValidationStatus.APPROVED, self.ValidationStatus.WARNING])
135 |     
    | ^^^^
136 |     def test_liquidity_validator(self):
137 |         """Test liquidity validation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:140:1
    |
138 |         if not self.imports_available:
139 |             self.skipTest("Dependencies not available")
140 |         
    | ^^^^^^^^
141 |         validator = self.LiquidityValidator()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:142:1
    |
141 |         validator = self.LiquidityValidator()
142 |         
    | ^^^^^^^^
143 |         # Test with adequate liquidity
144 |         market_data = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:152:1
    |
150 |             "last_price": 100.0
151 |         }
152 |         
    | ^^^^^^^^
153 |         result = validator.validate_liquidity("AAPL", 1000, market_data)
154 |         self.assertIn(result.status, [self.ValidationStatus.APPROVED, self.ValidationStatus.WARNING])
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> tests/test_institutional_enhancements.py:154:101
    |
153 |         result = validator.validate_liquidity("AAPL", 1000, market_data)
154 |         self.assertIn(result.status, [self.ValidationStatus.APPROVED, self.ValidationStatus.WARNING])
    |                                                                                                     ^
155 |     
156 |     def test_risk_validator(self):
    |

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:155:1
    |
153 |         result = validator.validate_liquidity("AAPL", 1000, market_data)
154 |         self.assertIn(result.status, [self.ValidationStatus.APPROVED, self.ValidationStatus.WARNING])
155 |     
    | ^^^^
156 |     def test_risk_validator(self):
157 |         """Test risk validation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:160:1
    |
158 |         if not self.imports_available:
159 |             self.skipTest("Dependencies not available")
160 |         
    | ^^^^^^^^
161 |         validator = self.RiskValidator(self.RiskLevel.MODERATE)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:162:1
    |
161 |         validator = self.RiskValidator(self.RiskLevel.MODERATE)
162 |         
    | ^^^^^^^^
163 |         # Test position risk validation - use smaller position within limits
164 |         current_positions = {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:168:1
    |
166 |             "AAPL", 50, 150.0, 100000, current_positions  # 7.5% position size
167 |         )
168 |         
    | ^^^^^^^^
169 |         # Position should be approved or have warnings, but not rejected for normal position
170 |         self.assertIn(result.status, [self.ValidationStatus.APPROVED, self.ValidationStatus.WARNING])
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> tests/test_institutional_enhancements.py:170:101
    |
169 |         # Position should be approved or have warnings, but not rejected for normal position
170 |         self.assertIn(result.status, [self.ValidationStatus.APPROVED, self.ValidationStatus.WARNING])
    |                                                                                                     ^
171 |     
172 |     def test_comprehensive_validation(self):
    |

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:171:1
    |
169 |         # Position should be approved or have warnings, but not rejected for normal position
170 |         self.assertIn(result.status, [self.ValidationStatus.APPROVED, self.ValidationStatus.WARNING])
171 |     
    | ^^^^
172 |     def test_comprehensive_validation(self):
173 |         """Test comprehensive pre-trade validation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:176:1
    |
174 |         if not self.imports_available:
175 |             self.skipTest("Dependencies not available")
176 |         
    | ^^^^^^^^
177 |         validator = self.PreTradeValidator()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:178:1
    |
177 |         validator = self.PreTradeValidator()
178 |         
    | ^^^^^^^^
179 |         trade_request = {
180 |             "symbol": "AAPL",
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:185:1
    |
183 |             "order_type": "limit"
184 |         }
185 |         
    | ^^^^^^^^
186 |         market_data = {
187 |             "avg_volume": 50000000,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:194:1
    |
192 |             "last_price": 150.0
193 |         }
194 |         
    | ^^^^^^^^
195 |         portfolio_data = {
196 |             "account_equity": 100000,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:200:1
    |
198 |             "correlations": {}
199 |         }
200 |         
    | ^^^^^^^^
201 |         result = validator.validate_trade(trade_request, market_data, portfolio_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:202:1
    |
201 |         result = validator.validate_trade(trade_request, market_data, portfolio_data)
202 |         
    | ^^^^^^^^
203 |         self.assertEqual(result.symbol, "AAPL")
204 |         self.assertIn(result.overall_status, [
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_institutional_enhancements.py:205:44
    |
203 |         self.assertEqual(result.symbol, "AAPL")
204 |         self.assertIn(result.overall_status, [
205 |             self.ValidationStatus.APPROVED, 
    |                                            ^
206 |             self.ValidationStatus.WARNING,
207 |             self.ValidationStatus.REJECTED
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:215:1
    |
213 | class TestMarketMicrostructure(unittest.TestCase):
214 |     """Test market microstructure feature engineering."""
215 |     
    | ^^^^
216 |     def setUp(self):
217 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_institutional_enhancements.py:219:13
    |
217 |           """Set up test fixtures."""
218 |           try:
219 | /             from ai_trading.execution.microstructure import (
220 | |                 MarketMicrostructureEngine, BidAskSpreadAnalyzer, 
221 | |                 OrderFlowAnalyzer, MarketRegimeFeature
222 | |             )
    | |_____________^
223 |               
224 |               self.MarketMicrostructureEngine = MarketMicrostructureEngine
    |
help: Organize imports

W291 [*] Trailing whitespace
   --> tests/test_institutional_enhancements.py:220:66
    |
218 |         try:
219 |             from ai_trading.execution.microstructure import (
220 |                 MarketMicrostructureEngine, BidAskSpreadAnalyzer, 
    |                                                                  ^
221 |                 OrderFlowAnalyzer, MarketRegimeFeature
222 |             )
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:223:1
    |
221 |                 OrderFlowAnalyzer, MarketRegimeFeature
222 |             )
223 |             
    | ^^^^^^^^^^^^
224 |             self.MarketMicrostructureEngine = MarketMicrostructureEngine
225 |             self.BidAskSpreadAnalyzer = BidAskSpreadAnalyzer
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:232:1
    |
230 |             self.imports_available = False
231 |             self.skipTest("Market microstructure modules not available")
232 |     
    | ^^^^
233 |     def test_spread_analyzer_initialization(self):
234 |         """Test bid-ask spread analyzer initialization."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:237:1
    |
235 |         if not self.imports_available:
236 |             self.skipTest("Dependencies not available")
237 |         
    | ^^^^^^^^
238 |         analyzer = self.BidAskSpreadAnalyzer()
239 |         self.assertEqual(analyzer.lookback_periods, 100)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:241:1
    |
239 |         self.assertEqual(analyzer.lookback_periods, 100)
240 |         self.assertEqual(analyzer.min_spread_bps, 1.0)
241 |     
    | ^^^^
242 |     def test_spread_feature_analysis(self):
243 |         """Test spread feature analysis."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:246:1
    |
244 |         if not self.imports_available:
245 |             self.skipTest("Dependencies not available")
246 |         
    | ^^^^^^^^
247 |         analyzer = self.BidAskSpreadAnalyzer()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:248:1
    |
247 |         analyzer = self.BidAskSpreadAnalyzer()
248 |         
    | ^^^^^^^^
249 |         market_data = {
250 |             "bid_price": 99.95,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:256:1
    |
254 | …         "ask_size": 1200
255 | …     }
256 | …     
    ^^^^^^^^
257 | …     trade_history = [
258 | …         {"price": 100.0, "size": 100, "side": "buy", "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware …
    |
help: Remove whitespace from blank line

E501 Line too long (143 > 100)
   --> tests/test_institutional_enhancements.py:258:101
    |
257 | …
258 | … "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
259 | …", "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
260 | …
    |

E501 Line too long (145 > 100)
   --> tests/test_institutional_enhancements.py:259:101
    |
257 | …
258 | …"timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
259 | …, "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
260 | …
    |

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:261:1
    |
259 | …         {"price": 100.02, "size": 200, "side": "sell", "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-awar…
260 | …     ]
261 | …     
    ^^^^^^^^
262 | …     features = analyzer.analyze_spread_features(market_data, trade_history)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:263:1
    |
262 |         features = analyzer.analyze_spread_features(market_data, trade_history)
263 |         
    | ^^^^^^^^
264 |         self.assertIn("bid_ask_spread", features)
265 |         self.assertIn("spread_bps", features)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:267:1
    |
265 |         self.assertIn("spread_bps", features)
266 |         self.assertGreater(features["bid_ask_spread"], 0)
267 |     
    | ^^^^
268 |     def test_order_flow_analyzer(self):
269 |         """Test order flow analysis."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:272:1
    |
270 |         if not self.imports_available:
271 |             self.skipTest("Dependencies not available")
272 |         
    | ^^^^^^^^
273 |         analyzer = self.OrderFlowAnalyzer()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:274:1
    |
273 | …     analyzer = self.OrderFlowAnalyzer()
274 | …     
    ^^^^^^^^
275 | …     trade_data = [
276 | …         {"price": 100.0, "size": 100, "side": "buy", "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware …
    |
help: Remove whitespace from blank line

E501 Line too long (143 > 100)
   --> tests/test_institutional_enhancements.py:276:101
    |
275 | …
276 | … "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
277 | …", "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
278 | …
    |

E501 Line too long (145 > 100)
   --> tests/test_institutional_enhancements.py:277:101
    |
275 | …
276 | …"timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
277 | …, "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-aware datetime
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
278 | …
    |

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:279:1
    |
277 | …         {"price": 100.02, "size": 200, "side": "sell", "timestamp": datetime.now(timezone.utc)},  # AI-AGENT-REF: Use timezone-awar…
278 | …     ]
279 | …     
    ^^^^^^^^
280 | …     quote_data = [
281 | …         {"bid_price": 99.98, "ask_price": 100.02, "bid_size": 500, "ask_size": 600},
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:284:1
    |
282 |             {"bid_price": 99.99, "ask_price": 100.03, "bid_size": 400, "ask_size": 700},
283 |         ]
284 |         
    | ^^^^^^^^
285 |         features = analyzer.analyze_order_flow(trade_data, quote_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:286:1
    |
285 |         features = analyzer.analyze_order_flow(trade_data, quote_data)
286 |         
    | ^^^^^^^^
287 |         self.assertIn("trade_intensity", features)
288 |         self.assertIn("order_imbalance", features)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:289:1
    |
287 |         self.assertIn("trade_intensity", features)
288 |         self.assertIn("order_imbalance", features)
289 |     
    | ^^^^
290 |     def test_microstructure_engine(self):
291 |         """Test comprehensive microstructure analysis."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:294:1
    |
292 |         if not self.imports_available:
293 |             self.skipTest("Dependencies not available")
294 |         
    | ^^^^^^^^
295 |         engine = self.MarketMicrostructureEngine()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:296:1
    |
295 |         engine = self.MarketMicrostructureEngine()
296 |         
    | ^^^^^^^^
297 |         market_data = {
298 |             "bid_price": 99.95,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:305:1
    |
303 |             "volume": 50000
304 |         }
305 |         
    | ^^^^^^^^
306 |         trade_history = []
307 |         quote_history = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:308:1
    |
306 |         trade_history = []
307 |         quote_history = []
308 |         
    | ^^^^^^^^
309 |         result = engine.analyze_market_microstructure(
310 |             "AAPL", market_data, trade_history, quote_history
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:312:1
    |
310 |             "AAPL", market_data, trade_history, quote_history
311 |         )
312 |         
    | ^^^^^^^^
313 |         self.assertEqual(result.symbol, "AAPL")
314 |         self.assertGreaterEqual(result.bid_ask_spread, 0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:319:1
    |
317 | class TestTaxAwareRebalancing(unittest.TestCase):
318 |     """Test tax-aware rebalancing functionality."""
319 |     
    | ^^^^
320 |     def setUp(self):
321 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_institutional_enhancements.py:323:13
    |
321 |           """Set up test fixtures."""
322 |           try:
323 | /             import sys
324 | |             import os
    | |_____________________^
325 |               sys.path.append(os.path.dirname(os.path.dirname(__file__)))
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:326:1
    |
324 |             import os
325 |             sys.path.append(os.path.dirname(os.path.dirname(__file__)))
326 |             
    | ^^^^^^^^^^^^
327 |             from ai_trading.rebalancer import TaxAwareRebalancer
328 |             self.TaxAwareRebalancer = TaxAwareRebalancer
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:333:1
    |
331 |             self.imports_available = False
332 |             self.skipTest("Tax-aware rebalancer not available")
333 |     
    | ^^^^
334 |     def test_tax_rebalancer_initialization(self):
335 |         """Test tax-aware rebalancer initialization."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:338:1
    |
336 |         if not self.imports_available:
337 |             self.skipTest("Dependencies not available")
338 |         
    | ^^^^^^^^
339 |         rebalancer = self.TaxAwareRebalancer(tax_rate_short=0.35, tax_rate_long=0.15)
340 |         self.assertEqual(rebalancer.tax_rate_short, 0.35)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:342:1
    |
340 |         self.assertEqual(rebalancer.tax_rate_short, 0.35)
341 |         self.assertEqual(rebalancer.tax_rate_long, 0.15)
342 |     
    | ^^^^
343 |     def test_tax_impact_calculation(self):
344 |         """Test tax impact calculation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:347:1
    |
345 |         if not self.imports_available:
346 |             self.skipTest("Dependencies not available")
347 |         
    | ^^^^^^^^
348 |         rebalancer = self.TaxAwareRebalancer()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:349:1
    |
348 |         rebalancer = self.TaxAwareRebalancer()
349 |         
    | ^^^^^^^^
350 |         position = {
351 |             "entry_price": 100.0,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:355:1
    |
353 |             "entry_date": datetime.now(timezone.utc) - timedelta(days=200)
354 |         }
355 |         
    | ^^^^^^^^
356 |         current_price = 120.0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:357:1
    |
356 |         current_price = 120.0
357 |         
    | ^^^^^^^^
358 |         tax_impact = rebalancer.calculate_tax_impact(position, current_price)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:359:1
    |
358 |         tax_impact = rebalancer.calculate_tax_impact(position, current_price)
359 |         
    | ^^^^^^^^
360 |         self.assertIn("total_gain_loss", tax_impact)
361 |         self.assertIn("tax_liability", tax_impact)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:364:1
    |
362 |         self.assertIn("is_long_term", tax_impact)
363 |         self.assertEqual(tax_impact["total_gain_loss"], 2000.0)  # $20 * 100 shares
364 |     
    | ^^^^
365 |     def test_loss_harvesting_identification(self):
366 |         """Test loss harvesting opportunity identification."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:369:1
    |
367 |         if not self.imports_available:
368 |             self.skipTest("Dependencies not available")
369 |         
    | ^^^^^^^^
370 |         rebalancer = self.TaxAwareRebalancer()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:371:1
    |
370 |         rebalancer = self.TaxAwareRebalancer()
371 |         
    | ^^^^^^^^
372 |         portfolio_positions = {
373 |             "AAPL": {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:384:1
    |
382 |             }
383 |         }
384 |         
    | ^^^^^^^^
385 |         current_prices = {
386 |             "AAPL": 140.0,  # Loss
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:389:1
    |
387 |             "MSFT": 320.0   # Gain
388 |         }
389 |         
    | ^^^^^^^^
390 |         opportunities = rebalancer.identify_loss_harvesting_opportunities(
391 |             portfolio_positions, current_prices
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:393:1
    |
391 |             portfolio_positions, current_prices
392 |         )
393 |         
    | ^^^^^^^^
394 |         # Should identify AAPL as loss harvesting opportunity
395 |         self.assertGreater(len(opportunities), 0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:404:1
    |
402 | class TestEnhancedRebalancer(unittest.TestCase):
403 |     """Test enhanced rebalancer integration."""
404 |     
    | ^^^^
405 |     def test_enhanced_rebalancer_fallback(self):
406 |         """Test that enhanced rebalancer falls back gracefully."""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_institutional_enhancements.py:407:9
    |
405 |       def test_enhanced_rebalancer_fallback(self):
406 |           """Test that enhanced rebalancer falls back gracefully."""
407 | /         import sys
408 | |         import os
    | |_________________^
409 |           sys.path.append(os.path.dirname(os.path.dirname(__file__)))
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:410:1
    |
408 |         import os
409 |         sys.path.append(os.path.dirname(os.path.dirname(__file__)))
410 |         
    | ^^^^^^^^
411 |         from ai_trading.rebalancer import rebalance_portfolio, enhanced_maybe_rebalance
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_institutional_enhancements.py:411:9
    |
409 |         sys.path.append(os.path.dirname(os.path.dirname(__file__)))
410 |         
411 |         from ai_trading.rebalancer import rebalance_portfolio, enhanced_maybe_rebalance
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
412 |         
413 |         # Mock context
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:412:1
    |
411 |         from ai_trading.rebalancer import rebalance_portfolio, enhanced_maybe_rebalance
412 |         
    | ^^^^^^^^
413 |         # Mock context
414 |         ctx = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_enhancements.py:416:1
    |
414 |         ctx = Mock()
415 |         ctx.portfolio_weights = {}
416 |         
    | ^^^^^^^^
417 |         # Should not raise exception
418 |         try:
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_institutional_enhancements.py:427:31
    |
425 | if __name__ == "__main__":
426 |     # Run tests
427 |     unittest.main(verbosity=2)
    |                               ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_institutional_kelly.py:8:1
   |
 6 |   """
 7 |
 8 | / import pytest
 9 | | from unittest.mock import patch
10 | |
11 | | from ai_trading.risk.kelly import KellyCriterion, KellyCalculator
12 | | from ai_trading.core.enums import RiskLevel
   | |___________________________________________^
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_kelly.py:17:1
   |
15 | class TestKellyCriterion:
16 |     """Test Kelly Criterion core functionality."""
17 |     
   | ^^^^
18 |     def setup_method(self):
19 |         """Set up test fixtures."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_kelly.py:21:1
   |
19 |         """Set up test fixtures."""
20 |         self.kelly = KellyCriterion(min_sample_size=10, max_fraction=0.25)
21 |     
   | ^^^^
22 |     def test_kelly_initialization(self):
23 |         """Test Kelly Criterion initialization."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_kelly.py:27:1
   |
25 |         assert self.kelly.max_fraction == 0.25
26 |         assert self.kelly.confidence_level == 0.95
27 |     
   | ^^^^
28 |     def test_basic_kelly_calculation(self):
29 |         """Test basic Kelly fraction calculation."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_kelly.py:36:1
   |
34 |             avg_loss=0.01
35 |         )
36 |         
   | ^^^^^^^^
37 |         # Kelly formula: f = (bp - q) / b
38 |         # b = 0.02/0.01 = 2, p = 0.6, q = 0.4
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_kelly.py:43:1
   |
41 |         expected = 0.25  # Capped at max_fraction
42 |         assert kelly_fraction == pytest.approx(expected, rel=1e-3)
43 |     
   | ^^^^
44 |     def test_kelly_with_max_fraction_cap(self):
45 |         """Test Kelly fraction is capped at maximum."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_kelly.py:52:1
   |
50 |             avg_loss=0.01
51 |         )
52 |         
   | ^^^^^^^^
53 |         # Should be capped at max_fraction
54 |         assert kelly_fraction <= self.kelly.max_fraction
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_kelly.py:56:1
   |
54 |         assert kelly_fraction <= self.kelly.max_fraction
55 |         assert kelly_fraction == self.kelly.max_fraction
56 |     
   | ^^^^
57 |     def test_kelly_negative_expectancy(self):
58 |         """Test Kelly returns zero for negative expectancy."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_kelly.py:65:1
   |
63 |             avg_loss=0.03
64 |         )
65 |         
   | ^^^^^^^^
66 |         # Should return 0 for negative expectancy
67 |         assert kelly_fraction == 0.0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_kelly.py:68:1
   |
66 |         # Should return 0 for negative expectancy
67 |         assert kelly_fraction == 0.0
68 |     
   | ^^^^
69 |     def test_kelly_invalid_inputs(self):
70 |         """Test Kelly handles invalid inputs gracefully."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_kelly.py:74:1
   |
72 |         assert self.kelly.calculate_kelly_fraction(1.5, 0.02, 0.01) == 0.0
73 |         assert self.kelly.calculate_kelly_fraction(-0.1, 0.02, 0.01) == 0.0
74 |         
   | ^^^^^^^^
75 |         # Invalid win/loss values
76 |         assert self.kelly.calculate_kelly_fraction(0.6, -0.02, 0.01) == 0.0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_kelly.py:79:1
   |
77 |         assert self.kelly.calculate_kelly_fraction(0.6, 0.02, -0.01) == 0.0
78 |         assert self.kelly.calculate_kelly_fraction(0.6, 0, 0.01) == 0.0
79 |     
   | ^^^^
80 |     def test_calculate_from_returns(self):
81 |         """Test Kelly calculation from return series."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_kelly.py:91:1
   |
89 |             0.025, -0.006, 0.013, 0.009, -0.014,
90 |         ]
91 |         
   | ^^^^^^^^
92 |         kelly_fraction, stats = self.kelly.calculate_from_returns(returns)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_kelly.py:93:1
   |
92 |         kelly_fraction, stats = self.kelly.calculate_from_returns(returns)
93 |         
   | ^^^^^^^^
94 |         # Should return valid Kelly fraction and statistics
95 |         assert 0 <= kelly_fraction <= self.kelly.max_fraction
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_institutional_kelly.py:97:1
   |
95 |         assert 0 <= kelly_fraction <= self.kelly.max_fraction
96 |         assert isinstance(stats, dict)
97 |         
   | ^^^^^^^^
98 |         # Check statistics
99 |         assert "total_trades" in stats
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:106:1
    |
104 |         assert "avg_loss" in stats
105 |         assert "kelly_fraction" in stats
106 |         
    | ^^^^^^^^
107 |         assert stats["total_trades"] == len(returns)
108 |         assert stats["winning_trades"] + stats["losing_trades"] == len(returns)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:110:1
    |
108 |         assert stats["winning_trades"] + stats["losing_trades"] == len(returns)
109 |         assert 0 <= stats["win_rate"] <= 1
110 |     
    | ^^^^
111 |     def test_insufficient_sample_size(self):
112 |         """Test handling of insufficient sample size."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:114:1
    |
112 |         """Test handling of insufficient sample size."""
113 |         small_returns = [0.01, -0.005, 0.02]  # Only 3 returns, need 10
114 |         
    | ^^^^^^^^
115 |         kelly_fraction, stats = self.kelly.calculate_from_returns(small_returns)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:116:1
    |
115 |         kelly_fraction, stats = self.kelly.calculate_from_returns(small_returns)
116 |         
    | ^^^^^^^^
117 |         assert kelly_fraction == 0.0
118 |         assert "error" in stats
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:120:1
    |
118 |         assert "error" in stats
119 |         assert "Insufficient sample size" in stats["error"]
120 |     
    | ^^^^
121 |     def test_no_wins_or_losses(self):
122 |         """Test handling of edge cases with no wins or losses."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:128:1
    |
126 |         assert kelly_fraction == 0.0
127 |         assert "error" in stats
128 |         
    | ^^^^^^^^
129 |         # All losses
130 |         all_losses = [-0.01, -0.02, -0.015, -0.008, -0.025, -0.012, -0.018, -0.01, -0.005, -0.022]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:134:1
    |
132 |         assert kelly_fraction == 0.0
133 |         assert "error" in stats
134 |     
    | ^^^^
135 |     def test_fractional_kelly(self):
136 |         """Test fractional Kelly calculation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:138:1
    |
136 |         """Test fractional Kelly calculation."""
137 |         full_kelly = 0.20
138 |         
    | ^^^^^^^^
139 |         # 25% of full Kelly
140 |         fractional = self.kelly.fractional_kelly(full_kelly, 0.25)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:142:1
    |
140 |         fractional = self.kelly.fractional_kelly(full_kelly, 0.25)
141 |         assert fractional == 0.05
142 |         
    | ^^^^^^^^
143 |         # 50% of full Kelly
144 |         fractional = self.kelly.fractional_kelly(full_kelly, 0.5)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:146:1
    |
144 |         fractional = self.kelly.fractional_kelly(full_kelly, 0.5)
145 |         assert fractional == 0.10
146 |     
    | ^^^^
147 |     def test_kelly_with_confidence(self):
148 |         """Test Kelly calculation with confidence intervals."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:154:1
    |
152 |             0.015, -0.009, 0.018, 0.007, -0.011, 0.025, -0.006, 0.013, 0.009, -0.014,
153 |         ]
154 |         
    | ^^^^^^^^
155 |         adjusted_kelly, confidence_interval = self.kelly.kelly_with_confidence(returns)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:156:1
    |
155 |         adjusted_kelly, confidence_interval = self.kelly.kelly_with_confidence(returns)
156 |         
    | ^^^^^^^^
157 |         # Should return valid values
158 |         assert 0 <= adjusted_kelly <= self.kelly.max_fraction
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:160:1
    |
158 |         assert 0 <= adjusted_kelly <= self.kelly.max_fraction
159 |         assert confidence_interval >= 0
160 |         
    | ^^^^^^^^
161 |         # Adjusted Kelly should be lower than or equal to base Kelly due to uncertainty
162 |         base_kelly, _ = self.kelly.calculate_from_returns(returns)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:168:1
    |
166 | class TestKellyCalculator:
167 |     """Test advanced Kelly Calculator functionality."""
168 |     
    | ^^^^
169 |     def setup_method(self):
170 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:172:1
    |
170 |         """Set up test fixtures."""
171 |         self.calculator = KellyCalculator()
172 |     
    | ^^^^
173 |     def test_kelly_calculator_initialization(self):
174 |         """Test Kelly Calculator initialization."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:179:1
    |
177 |         assert self.calculator.rebalance_frequency == 21
178 |         assert isinstance(self.calculator.calculation_history, list)
179 |     
    | ^^^^
180 |     def test_portfolio_kelly_calculation(self):
181 |         """Test multi-asset Kelly calculation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:191:1
    |
189 |                      0.012, -0.011, 0.02, 0.005, -0.013, 0.022, -0.008, 0.016, 0.007, -0.012],
190 |         }
191 |         
    | ^^^^^^^^
192 |         portfolio_kelly = self.calculator.calculate_portfolio_kelly(asset_returns)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:193:1
    |
192 |         portfolio_kelly = self.calculator.calculate_portfolio_kelly(asset_returns)
193 |         
    | ^^^^^^^^
194 |         # Should return Kelly fractions for each asset
195 |         assert isinstance(portfolio_kelly, dict)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:198:1
    |
196 |         assert "AAPL" in portfolio_kelly
197 |         assert "MSFT" in portfolio_kelly
198 |         
    | ^^^^^^^^
199 |         # All Kelly fractions should be non-negative and within limits
200 |         for symbol, kelly_fraction in portfolio_kelly.items():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:202:1
    |
200 |         for symbol, kelly_fraction in portfolio_kelly.items():
201 |             assert 0 <= kelly_fraction <= self.calculator.kelly_criterion.max_fraction
202 |     
    | ^^^^
203 |     def test_dynamic_kelly_adjustment(self):
204 |         """Test dynamic Kelly adjustment based on market conditions."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:206:1
    |
204 |         """Test dynamic Kelly adjustment based on market conditions."""
205 |         base_kelly = 0.15
206 |         
    | ^^^^^^^^
207 |         # High volatility scenario
208 |         high_vol_conditions = {"volatility": 0.35, "drawdown": 0.05, "regime": "normal"}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:211:1
    |
209 |         adjusted_kelly = self.calculator.dynamic_kelly_adjustment(base_kelly, high_vol_conditions)
210 |         assert adjusted_kelly < base_kelly  # Should reduce position size
211 |         
    | ^^^^^^^^
212 |         # Low volatility scenario
213 |         low_vol_conditions = {"volatility": 0.08, "drawdown": 0.02, "regime": "trending"}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:216:1
    |
214 |         adjusted_kelly = self.calculator.dynamic_kelly_adjustment(base_kelly, low_vol_conditions)
215 |         assert adjusted_kelly >= base_kelly  # Should maintain or increase position size
216 |         
    | ^^^^^^^^
217 |         # Crisis scenario
218 |         crisis_conditions = {"volatility": 0.25, "drawdown": 0.12, "regime": "crisis"}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:221:1
    |
219 |         adjusted_kelly = self.calculator.dynamic_kelly_adjustment(base_kelly, crisis_conditions)
220 |         assert adjusted_kelly < base_kelly * 0.5  # Should drastically reduce position size
221 |     
    | ^^^^
222 |     def test_kelly_with_correlation(self):
223 |         """Test Kelly calculation with correlation adjustments."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:232:1
    |
230 |                      0.012, -0.011, 0.02, 0.005, -0.013, 0.022, -0.008, 0.016, 0.007, -0.012],
231 |         }
232 |         
    | ^^^^^^^^
233 |         # High correlation between AAPL and MSFT
234 |         correlation_matrix = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:238:1
    |
236 |             "MSFT_AAPL": 0.8,
237 |         }
238 |         
    | ^^^^^^^^
239 |         # Calculate Kelly with and without correlation
240 |         individual_kelly = self.calculator.calculate_portfolio_kelly(asset_returns)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:242:1
    |
240 |         individual_kelly = self.calculator.calculate_portfolio_kelly(asset_returns)
241 |         correlated_kelly = self.calculator.kelly_with_correlation(asset_returns, correlation_matrix)
242 |         
    | ^^^^^^^^
243 |         # Correlated Kelly should be lower due to correlation penalty
244 |         assert correlated_kelly["AAPL"] <= individual_kelly["AAPL"]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:246:1
    |
244 |         assert correlated_kelly["AAPL"] <= individual_kelly["AAPL"]
245 |         assert correlated_kelly["MSFT"] <= individual_kelly["MSFT"]
246 |     
    | ^^^^
247 |     def test_calculation_history_recording(self):
248 |         """Test recording and retrieval of calculation history."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:252:1
    |
250 |         kelly_fraction = 0.15
251 |         metadata = {"win_rate": 0.6, "avg_win": 0.02, "avg_loss": 0.01}
252 |         
    | ^^^^^^^^
253 |         # Record calculation
254 |         self.calculator.record_calculation(symbol, kelly_fraction, metadata)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:255:1
    |
253 |         # Record calculation
254 |         self.calculator.record_calculation(symbol, kelly_fraction, metadata)
255 |         
    | ^^^^^^^^
256 |         # Check history
257 |         history = self.calculator.get_calculation_history()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:259:1
    |
257 |         history = self.calculator.get_calculation_history()
258 |         assert len(history) == 1
259 |         
    | ^^^^^^^^
260 |         record = history[0]
261 |         assert record["symbol"] == symbol
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:265:1
    |
263 |         assert record["metadata"] == metadata
264 |         assert "timestamp" in record
265 |         
    | ^^^^^^^^
266 |         # Test symbol-specific history
267 |         symbol_history = self.calculator.get_calculation_history(symbol)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:274:1
    |
272 | class TestKellyIntegration:
273 |     """Test Kelly Criterion integration with other components."""
274 |     
    | ^^^^
275 |     def test_kelly_with_risk_levels(self):
276 |         """Test Kelly integration with different risk levels."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:279:1
    |
277 |         # Conservative risk level
278 |         conservative_kelly = KellyCriterion(max_fraction=RiskLevel.CONSERVATIVE.max_position_size)
279 |         
    | ^^^^^^^^
280 |         # High expectancy scenario
281 |         kelly_fraction = conservative_kelly.calculate_kelly_fraction(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:286:1
    |
284 |             avg_loss=0.01
285 |         )
286 |         
    | ^^^^^^^^
287 |         # Should be capped at conservative level
288 |         assert kelly_fraction <= RiskLevel.CONSERVATIVE.max_position_size
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:289:1
    |
287 |         # Should be capped at conservative level
288 |         assert kelly_fraction <= RiskLevel.CONSERVATIVE.max_position_size
289 |         
    | ^^^^^^^^
290 |         # Aggressive risk level
291 |         aggressive_kelly = KellyCriterion(max_fraction=RiskLevel.AGGRESSIVE.max_position_size)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:292:1
    |
290 |         # Aggressive risk level
291 |         aggressive_kelly = KellyCriterion(max_fraction=RiskLevel.AGGRESSIVE.max_position_size)
292 |         
    | ^^^^^^^^
293 |         kelly_fraction_aggressive = aggressive_kelly.calculate_kelly_fraction(
294 |             win_rate=0.7,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:298:1
    |
296 |             avg_loss=0.01
297 |         )
298 |         
    | ^^^^^^^^
299 |         # Should allow higher fraction
300 |         assert kelly_fraction_aggressive >= kelly_fraction
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:301:1
    |
299 |         # Should allow higher fraction
300 |         assert kelly_fraction_aggressive >= kelly_fraction
301 |     
    | ^^^^
302 |     @patch('ai_trading.risk.kelly.logger')
303 |     def test_kelly_logging(self, mock_logger):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:306:1
    |
304 |         """Test Kelly Criterion logging functionality."""
305 |         kelly = KellyCriterion()
306 |         
    | ^^^^^^^^
307 |         # Test successful calculation logging
308 |         kelly.calculate_kelly_fraction(0.6, 0.02, 0.01)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:309:1
    |
307 |         # Test successful calculation logging
308 |         kelly.calculate_kelly_fraction(0.6, 0.02, 0.01)
309 |         
    | ^^^^^^^^
310 |         # Check that debug logging occurred
311 |         mock_logger.debug.assert_called()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:312:1
    |
310 |         # Check that debug logging occurred
311 |         mock_logger.debug.assert_called()
312 |         
    | ^^^^^^^^
313 |         # Test error logging with invalid inputs
314 |         kelly.calculate_kelly_fraction(-1, 0.02, 0.01)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_institutional_kelly.py:315:1
    |
313 |         # Test error logging with invalid inputs
314 |         kelly.calculate_kelly_fraction(-1, 0.02, 0.01)
315 |         
    | ^^^^^^^^
316 |         # Check that warning logging occurred
317 |         mock_logger.warning.assert_called()
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_institutional_kelly.py:317:44
    |
316 |         # Check that warning logging occurred
317 |         mock_logger.warning.assert_called()
    |                                            ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_integration.py:6:1
  |
4 | """
5 |
6 | import sys
  | ^^^^^^^^^^
7 | sys.path.append('.')
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:12:1
   |
10 |     """Test Money math integration with execution engine."""
11 |     print("Testing Money Math + Execution Integration")
12 |     
   | ^^^^
13 |     from ai_trading.execution.engine import Order
14 |     from ai_trading.core.enums import OrderSide, OrderType
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_integration.py:13:5
   |
11 |       print("Testing Money Math + Execution Integration")
12 |       
13 | /     from ai_trading.execution.engine import Order
14 | |     from ai_trading.core.enums import OrderSide, OrderType
15 | |     from ai_trading.math.money import Money
   | |___________________________________________^
16 |       
17 |       # Test order creation with Money price
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:16:1
   |
14 |     from ai_trading.core.enums import OrderSide, OrderType
15 |     from ai_trading.math.money import Money
16 |     
   | ^^^^
17 |     # Test order creation with Money price
18 |     order = Order(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:25:1
   |
23 |         price=Money("150.567")  # Will be quantized to tick
24 |     )
25 |     
   | ^^^^
26 |     print(f"Original quantity: 150, Final quantity: {order.quantity}")
27 |     print(f"Original price: 150.567, Final price: {order.price}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:28:1
   |
26 |     print(f"Original quantity: 150, Final quantity: {order.quantity}")
27 |     print(f"Original price: 150.567, Final price: {order.price}")
28 |     
   | ^^^^
29 |     # Validate order with quantization
30 |     from ai_trading.execution.engine import OrderManager
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:32:1
   |
30 |     from ai_trading.execution.engine import OrderManager
31 |     manager = OrderManager()
32 |     
   | ^^^^
33 |     # This should trigger quantization in validation
34 |     is_valid = manager._validate_order(order)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:36:1
   |
34 |     is_valid = manager._validate_order(order)
35 |     print(f"Order validation: {'✓ PASS' if is_valid else '✗ FAIL'}")
36 |     
   | ^^^^
37 |     # Check that price was quantized to tick (0.01)
38 |     expected_price = 150.57  # Should round to nearest cent
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:41:1
   |
39 |     actual_price = float(order.price)
40 |     print(f"Price quantization: Expected ~{expected_price}, Got {actual_price}")
41 |     
   | ^^^^
42 |     # Check that quantity was rounded to lot size (default 1 for AAPL)
43 |     print(f"Quantity remains: {order.quantity} (lot size is 1 for AAPL)")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:44:1
   |
42 |     # Check that quantity was rounded to lot size (default 1 for AAPL)
43 |     print(f"Quantity remains: {order.quantity} (lot size is 1 for AAPL)")
44 |     
   | ^^^^
45 |     print("Money + Execution Integration: ✓ PASS\n")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:51:1
   |
49 |     """Test rate limiting integration."""
50 |     print("Testing Rate Limiting Integration")
51 |     
   | ^^^^
52 |     # Test that the alpaca_api module uses rate limiting
53 |     try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:56:1
   |
54 |         from ai_trading.integrations.rate_limit import get_limiter
55 |         limiter = get_limiter()
56 |         
   | ^^^^^^^^
57 |         # Check that bars route is configured
58 |         status = limiter.get_status("bars")
   |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
  --> tests/test_integration.py:59:101
   |
57 |         # Check that bars route is configured
58 |         status = limiter.get_status("bars")
59 |         print(f"Bars route configured: ✓ capacity={status['capacity']}, rate={status['refill_rate']}")
   |                                                                                                     ^^
60 |         
61 |         # Check that orders route is configured  
   |

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:60:1
   |
58 |         status = limiter.get_status("bars")
59 |         print(f"Bars route configured: ✓ capacity={status['capacity']}, rate={status['refill_rate']}")
60 |         
   | ^^^^^^^^
61 |         # Check that orders route is configured  
62 |         status = limiter.get_status("orders")
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_integration.py:61:48
   |
59 |         print(f"Bars route configured: ✓ capacity={status['capacity']}, rate={status['refill_rate']}")
60 |         
61 |         # Check that orders route is configured  
   |                                                ^^
62 |         status = limiter.get_status("orders")
63 |         print(f"Orders route configured: ✓ capacity={status['capacity']}, rate={status['refill_rate']}")
   |
help: Remove trailing whitespace

E501 Line too long (104 > 100)
  --> tests/test_integration.py:63:101
   |
61 |         # Check that orders route is configured  
62 |         status = limiter.get_status("orders")
63 |         print(f"Orders route configured: ✓ capacity={status['capacity']}, rate={status['refill_rate']}")
   |                                                                                                     ^^^^
64 |         
65 |         print("Rate Limiting Integration: ✓ PASS\n")
   |

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:64:1
   |
62 |         status = limiter.get_status("orders")
63 |         print(f"Orders route configured: ✓ capacity={status['capacity']}, rate={status['refill_rate']}")
64 |         
   | ^^^^^^^^
65 |         print("Rate Limiting Integration: ✓ PASS\n")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:66:1
   |
65 |         print("Rate Limiting Integration: ✓ PASS\n")
66 |         
   | ^^^^^^^^
67 |     except Exception as e:
68 |         print(f"Rate Limiting Integration: ✗ FAIL - {e}\n")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:75:1
   |
73 |     print("INTEGRATION TESTS")
74 |     print("=" * 50)
75 |     
   | ^^^^
76 |     try:
77 |         test_money_execution_integration()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:79:1
   |
77 |         test_money_execution_integration()
78 |         test_rate_limit_integration()
79 |         
   | ^^^^^^^^
80 |         print("=" * 50)
81 |         print("🎉 ALL INTEGRATION TESTS PASSED!")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration.py:83:1
   |
81 |         print("🎉 ALL INTEGRATION TESTS PASSED!")
82 |         print("=" * 50)
83 |         
   | ^^^^^^^^
84 |     except Exception as e:
85 |         print(f"❌ INTEGRATION TEST FAILED: {e}")
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_integration.py:88:20
   |
86 |         import traceback
87 |         traceback.print_exc()
88 |         sys.exit(1)
   |                    ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_integration_robust.py:138:1
    |
136 | sys.modules["alpaca.trading.requests"].MarketOrderRequest = _Req
137 | sys.modules["alpaca.trading.requests"].GetOrdersRequest = _Req
138 | from enum import Enum
    | ^^^^^^^^^^^^^^^^^^^^^
139 |
140 | class _Enum(str, Enum):
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_integration_robust.py:305:1
    |
303 |     def allocate(self, *a, **k):
304 |         return []
305 |     
    | ^^^^
306 |     def update_reward(self, strategy: str, reward: float) -> None:
307 |         """Update reward for a strategy (placeholder for test compatibility)."""
    |
help: Remove whitespace from blank line

E501 Line too long (119 > 100)
   --> tests/test_integration_robust.py:346:101
    |
344 |     with patch("data_fetcher.get_minute_df", return_value=MagicMock()), patch(
345 |         "alpaca_api.submit_order", return_value={"status": "mocked"}
346 |     ), patch("signals.generate", return_value=1), patch("risk_engine.calculate_position_size", return_value=10), patch(
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^
347 |         "data_fetcher.get_daily_df",
348 |         return_value=pd.DataFrame(
    |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_integration_simple.py:7:1
  |
5 | """
6 |
7 | import os
  | ^^^^^^^^^
8 | os.environ["TESTING"] = "1"
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_integration_simple.py:10:1
   |
 8 |   os.environ["TESTING"] = "1"
 9 |
10 | / from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker
11 | | import ai_trading.config as config
   | |__________________________________^
12 |
13 |   def test_integration():
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_integration_simple.py:17:1
   |
15 |     print("🧪 Testing DrawdownCircuitBreaker Integration")
16 |     print("=" * 50)
17 |     
   | ^^^^
18 |     # Test 1: Configuration loading
19 |     print(f"✅ MAX_DRAWDOWN_THRESHOLD: {config.MAX_DRAWDOWN_THRESHOLD}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration_simple.py:21:1
   |
19 |     print(f"✅ MAX_DRAWDOWN_THRESHOLD: {config.MAX_DRAWDOWN_THRESHOLD}")
20 |     print(f"✅ DAILY_LOSS_LIMIT: {config.DAILY_LOSS_LIMIT}")
21 |     
   | ^^^^
22 |     # Test 2: Circuit breaker creation
23 |     breaker = DrawdownCircuitBreaker(max_drawdown=config.MAX_DRAWDOWN_THRESHOLD)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration_simple.py:25:1
   |
23 |     breaker = DrawdownCircuitBreaker(max_drawdown=config.MAX_DRAWDOWN_THRESHOLD)
24 |     print(f"✅ Circuit breaker created with threshold: {breaker.max_drawdown:.1%}")
25 |     
   | ^^^^
26 |     # Test 3: Normal operation
27 |     initial_equity = 10000.0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration_simple.py:30:1
   |
28 |     trading_allowed = breaker.update_equity(initial_equity)
29 |     print(f"✅ Initial equity update: ${initial_equity:,.2f} - Trading allowed: {trading_allowed}")
30 |     
   | ^^^^
31 |     # Test 4: Small loss (should still allow trading)
32 |     small_loss_equity = initial_equity * 0.95  # 5% loss
   |
help: Remove whitespace from blank line

E501 Line too long (140 > 100)
  --> tests/test_integration_simple.py:35:100
   |
33 | …_equity)
34 | …
35 | …f} ({status['current_drawdown']:.1%} drawdown) - Trading allowed: {trading_allowed}")
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
36 | …
37 | …
   |

W293 [*] Blank line contains whitespace
  --> tests/test_integration_simple.py:36:1
   |
34 |     status = breaker.get_status()
35 |     print(f"✅ Small loss test: ${small_loss_equity:,.2f} ({status['current_drawdown']:.1%} drawdown) - Trading allowed: {trading_allow…
36 |     
   | ^^^^
37 |     # Test 5: Large loss triggering halt
38 |     large_loss_equity = initial_equity * 0.90  # 10% loss (exceeds 8% threshold)
   |
help: Remove whitespace from blank line

E501 Line too long (140 > 100)
  --> tests/test_integration_simple.py:41:102
   |
39 | …_equity)
40 | …
41 | ….2f} ({status['current_drawdown']:.1%} drawdown) - Trading allowed: {trading_allowed}")
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
42 | …
43 | …
   |

W293 [*] Blank line contains whitespace
  --> tests/test_integration_simple.py:42:1
   |
40 |     status = breaker.get_status()
41 |     print(f"⚠️  Large loss test: ${large_loss_equity:,.2f} ({status['current_drawdown']:.1%} drawdown) - Trading allowed: {trading_all…w
42 |     
   | ^^^^
43 |     # Test 6: Recovery
44 |     recovery_equity = initial_equity * 0.80  # 80% recovery
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_integration_simple.py:48:1
   |
46 |     status = breaker.get_status()
47 |     print(f"✅ Recovery test: ${recovery_equity:,.2f} - Trading allowed: {trading_allowed}")
48 |     
   | ^^^^
49 |     print("\n🎉 All integration tests passed!")
50 |     print("✅ DrawdownCircuitBreaker is properly integrated")
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_integration_simple.py:56:23
   |
55 | if __name__ == "__main__":
56 |     test_integration()
   |                       ^
   |
help: Add trailing newline

W291 Trailing whitespace
 --> tests/test_intelligent_position_management.py:7:28
  |
5 | - IntelligentPositionManager orchestration
6 | - Market regime detection
7 | - Technical signal analysis  
  |                            ^^
8 | - Dynamic trailing stops
9 | - Multi-tiered profit taking
  |
help: Remove trailing whitespace

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_intelligent_position_management.py:15:1
   |
13 |   """
14 |
15 | / from unittest.mock import Mock
16 | | from dataclasses import dataclass
   | |_________________________________^
17 |
18 |   # Import the new position management components
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_intelligent_position_management.py:20:5
   |
18 |   # Import the new position management components
19 |   try:
20 | /     from ai_trading.position import (
21 | |         IntelligentPositionManager,
22 | |         MarketRegimeDetector, MarketRegime,
23 | |         TechnicalSignalAnalyzer, SignalStrength, DivergenceType,
24 | |         TrailingStopManager, TrailingStopType,
25 | |         ProfitTakingEngine, ProfitTakingStrategy,
26 | |         PortfolioCorrelationAnalyzer, ConcentrationLevel
27 | |     )
   | |_____^
28 |   except ImportError as e:
29 |       print(f"Import error: {e}")
   |
help: Organize imports

F401 `ai_trading.position.SignalStrength` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_intelligent_position_management.py:23:34
   |
21 |         IntelligentPositionManager,
22 |         MarketRegimeDetector, MarketRegime,
23 |         TechnicalSignalAnalyzer, SignalStrength, DivergenceType,
   |                                  ^^^^^^^^^^^^^^
24 |         TrailingStopManager, TrailingStopType,
25 |         ProfitTakingEngine, ProfitTakingStrategy,
   |
help: Remove unused import

F401 `ai_trading.position.DivergenceType` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_intelligent_position_management.py:23:50
   |
21 |         IntelligentPositionManager,
22 |         MarketRegimeDetector, MarketRegime,
23 |         TechnicalSignalAnalyzer, SignalStrength, DivergenceType,
   |                                                  ^^^^^^^^^^^^^^
24 |         TrailingStopManager, TrailingStopType,
25 |         ProfitTakingEngine, ProfitTakingStrategy,
   |
help: Remove unused import

F401 `ai_trading.position.TrailingStopType` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_intelligent_position_management.py:24:30
   |
22 |         MarketRegimeDetector, MarketRegime,
23 |         TechnicalSignalAnalyzer, SignalStrength, DivergenceType,
24 |         TrailingStopManager, TrailingStopType,
   |                              ^^^^^^^^^^^^^^^^
25 |         ProfitTakingEngine, ProfitTakingStrategy,
26 |         PortfolioCorrelationAnalyzer, ConcentrationLevel
   |
help: Remove unused import

F401 `ai_trading.position.ProfitTakingStrategy` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_intelligent_position_management.py:25:29
   |
23 |         TechnicalSignalAnalyzer, SignalStrength, DivergenceType,
24 |         TrailingStopManager, TrailingStopType,
25 |         ProfitTakingEngine, ProfitTakingStrategy,
   |                             ^^^^^^^^^^^^^^^^^^^^
26 |         PortfolioCorrelationAnalyzer, ConcentrationLevel
27 |     )
   |
help: Remove unused import

W293 [*] Blank line contains whitespace
  --> tests/test_intelligent_position_management.py:31:1
   |
29 |     print(f"Import error: {e}")
30 |     print("Testing import fallback")
31 |     
   | ^^^^
32 |     # Test basic imports
33 |     import sys
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_intelligent_position_management.py:35:1
   |
33 |     import sys
34 |     sys.path.append('/home/runner/work/ai-trading-bot/ai-trading-bot')
35 |     
   | ^^^^
36 |     from ai_trading.position.intelligent_manager import IntelligentPositionManager
37 |     from ai_trading.position.market_regime import MarketRegimeDetector, MarketRegime  
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_intelligent_position_management.py:36:5
   |
34 |       sys.path.append('/home/runner/work/ai-trading-bot/ai-trading-bot')
35 |       
36 | /     from ai_trading.position.intelligent_manager import IntelligentPositionManager
37 | |     from ai_trading.position.market_regime import MarketRegimeDetector, MarketRegime  
38 | |     from ai_trading.position.technical_analyzer import TechnicalSignalAnalyzer
39 | |     from ai_trading.position.trailing_stops import TrailingStopManager
40 | |     from ai_trading.position.profit_taking import ProfitTakingEngine
41 | |     from ai_trading.position.correlation_analyzer import PortfolioCorrelationAnalyzer, ConcentrationLevel
   | |_________________________________________________________________________________________________________^
   |
help: Organize imports

W291 [*] Trailing whitespace
  --> tests/test_intelligent_position_management.py:37:85
   |
36 |     from ai_trading.position.intelligent_manager import IntelligentPositionManager
37 |     from ai_trading.position.market_regime import MarketRegimeDetector, MarketRegime  
   |                                                                                     ^^
38 |     from ai_trading.position.technical_analyzer import TechnicalSignalAnalyzer
39 |     from ai_trading.position.trailing_stops import TrailingStopManager
   |
help: Remove trailing whitespace

E501 Line too long (105 > 100)
  --> tests/test_intelligent_position_management.py:41:101
   |
39 |     from ai_trading.position.trailing_stops import TrailingStopManager
40 |     from ai_trading.position.profit_taking import ProfitTakingEngine
41 |     from ai_trading.position.correlation_analyzer import PortfolioCorrelationAnalyzer, ConcentrationLevel
   |                                                                                                     ^^^^^
   |

W293 [*] Blank line contains whitespace
  --> tests/test_intelligent_position_management.py:47:1
   |
45 | class TestIntelligentPositionManager:
46 |     """Test the main IntelligentPositionManager orchestrator."""
47 |     
   | ^^^^
48 |     def setup_method(self):
49 |         """Set up test fixtures."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_intelligent_position_management.py:52:1
   |
50 |         self.mock_ctx = Mock()
51 |         self.mock_ctx.data_fetcher = Mock()
52 |         
   | ^^^^^^^^
53 |         # Create mock data
54 |         self.mock_daily_data = {
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_intelligent_position_management.py:60:1
   |
58 |             'volume': [1000, 1100, 1200, 1000, 900, 1300, 1400, 1100, 1000, 1200, 1500]
59 |         }
60 |         
   | ^^^^^^^^
61 |         self.mock_ctx.data_fetcher.get_daily_df.return_value = Mock()
62 |         self.mock_ctx.data_fetcher.get_daily_df.return_value.empty = False
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_intelligent_position_management.py:64:1
   |
62 |         self.mock_ctx.data_fetcher.get_daily_df.return_value.empty = False
63 |         self.mock_ctx.data_fetcher.get_daily_df.return_value.__len__ = lambda: 11
64 |         
   | ^^^^^^^^
65 |         # Mock data access
66 |         for col, values in self.mock_daily_data.items():
   |
help: Remove whitespace from blank line

E501 Line too long (107 > 100)
  --> tests/test_intelligent_position_management.py:70:101
   |
68 |             mock_series.__len__ = lambda: len(values)
69 |             mock_series.iloc = Mock()
70 |             mock_series.iloc.__getitem__ = lambda idx: values[idx] if isinstance(idx, int) else values[idx]
   |                                                                                                     ^^^^^^^
71 |             mock_series.tail.return_value = Mock()
72 |             mock_series.tail.return_value.tolist.return_value = values[-5:]
   |

W293 [*] Blank line contains whitespace
  --> tests/test_intelligent_position_management.py:74:1
   |
72 |             mock_series.tail.return_value.tolist.return_value = values[-5:]
73 |             setattr(self.mock_ctx.data_fetcher.get_daily_df.return_value, col, mock_series)
74 |         
   | ^^^^^^^^
75 |         self.manager = IntelligentPositionManager(self.mock_ctx)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_intelligent_position_management.py:76:1
   |
75 |         self.manager = IntelligentPositionManager(self.mock_ctx)
76 |     
   | ^^^^
77 |     def test_initialization(self):
78 |         """Test that IntelligentPositionManager initializes correctly."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_intelligent_position_management.py:85:1
   |
83 |         assert isinstance(self.manager.profit_taking_engine, ProfitTakingEngine)
84 |         assert isinstance(self.manager.correlation_analyzer, PortfolioCorrelationAnalyzer)
85 |     
   | ^^^^
86 |     def test_should_hold_position_integration(self):
87 |         """Test the enhanced should_hold_position method."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_intelligent_position_management.py:95:1
   |
93 |             market_value=11000.0
94 |         )
95 |         
   | ^^^^^^^^
96 |         # Test with profitable position
97 |         result = self.manager.should_hold_position(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:104:1
    |
102 |             current_positions=[position]
103 |         )
104 |         
    | ^^^^^^^^
105 |         # Should return a boolean
106 |         assert isinstance(result, bool)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:107:1
    |
105 |         # Should return a boolean
106 |         assert isinstance(result, bool)
107 |     
    | ^^^^
108 |     def test_analyze_position_basic(self):
109 |         """Test basic position analysis."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:116:1
    |
114 |             market_value=11000.0
115 |         )
116 |         
    | ^^^^^^^^
117 |         # Mock current price
118 |         self.mock_ctx.data_fetcher.get_minute_df.return_value = None
    |
help: Remove whitespace from blank line

E501 Line too long (125 > 100)
   --> tests/test_intelligent_position_management.py:122:101
    |
120 |         close_series.iloc = [-1]
121 |         close_series.__getitem__ = lambda x: 110.0 if x == -1 else 100.0
122 |         self.mock_ctx.data_fetcher.get_daily_df.return_value.__getitem__ = lambda x: close_series if x == 'close' else Mock()
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
123 |         
124 |         recommendation = self.manager.analyze_position('AAPL', position, [position])
    |

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:123:1
    |
121 |         close_series.__getitem__ = lambda x: 110.0 if x == -1 else 100.0
122 |         self.mock_ctx.data_fetcher.get_daily_df.return_value.__getitem__ = lambda x: close_series if x == 'close' else Mock()
123 |         
    | ^^^^^^^^
124 |         recommendation = self.manager.analyze_position('AAPL', position, [position])
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:125:1
    |
124 |         recommendation = self.manager.analyze_position('AAPL', position, [position])
125 |         
    | ^^^^^^^^
126 |         # Should return a recommendation
127 |         assert hasattr(recommendation, 'symbol')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:135:1
    |
133 | class TestMarketRegimeDetector:
134 |     """Test market regime detection functionality."""
135 |     
    | ^^^^
136 |     def setup_method(self):
137 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:140:1
    |
138 |         self.mock_ctx = Mock()
139 |         self.detector = MarketRegimeDetector(self.mock_ctx)
140 |     
    | ^^^^
141 |     def test_regime_classification(self):
142 |         """Test regime classification logic."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:148:1
    |
146 |         momentum_metrics = {'score': 0.8}
147 |         mean_reversion_metrics = {'score': 0.3}
148 |         
    | ^^^^^^^^
149 |         regime = self.detector._classify_regime(
150 |             trend_metrics, vol_metrics, momentum_metrics, mean_reversion_metrics
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:152:1
    |
150 |             trend_metrics, vol_metrics, momentum_metrics, mean_reversion_metrics
151 |         )
152 |         
    | ^^^^^^^^
153 |         assert regime == MarketRegime.TRENDING_BULL
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:154:1
    |
153 |         assert regime == MarketRegime.TRENDING_BULL
154 |     
    | ^^^^
155 |     def test_regime_parameters(self):
156 |         """Test regime-specific parameters."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:158:1
    |
156 |         """Test regime-specific parameters."""
157 |         params = self.detector.get_regime_parameters(MarketRegime.TRENDING_BULL)
158 |         
    | ^^^^^^^^
159 |         assert 'stop_distance_multiplier' in params
160 |         assert 'profit_taking_patience' in params
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:162:1
    |
160 |         assert 'profit_taking_patience' in params
161 |         assert params['profit_taking_patience'] > 1.0  # Should be patient in bull trends
162 |     
    | ^^^^
163 |     def test_high_volatility_regime(self):
164 |         """Test high volatility regime detection."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:169:1
    |
167 |         momentum_metrics = {'score': 0.5}
168 |         mean_reversion_metrics = {'score': 0.5}
169 |         
    | ^^^^^^^^
170 |         regime = self.detector._classify_regime(
171 |             trend_metrics, vol_metrics, momentum_metrics, mean_reversion_metrics
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:173:1
    |
171 |             trend_metrics, vol_metrics, momentum_metrics, mean_reversion_metrics
172 |         )
173 |         
    | ^^^^^^^^
174 |         assert regime == MarketRegime.HIGH_VOLATILITY
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:179:1
    |
177 | class TestTechnicalSignalAnalyzer:
178 |     """Test technical signal analysis."""
179 |     
    | ^^^^
180 |     def setup_method(self):
181 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:184:1
    |
182 |         self.mock_ctx = Mock()
183 |         self.analyzer = TechnicalSignalAnalyzer(self.mock_ctx)
184 |     
    | ^^^^
185 |     def test_rsi_calculation(self):
186 |         """Test RSI calculation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:192:1
    |
190 |         prices.diff.return_value = Mock()
191 |         prices.diff.return_value.where = Mock(return_value=Mock())
192 |         
    | ^^^^^^^^
193 |         # Mock rolling calculations
194 |         mock_rolling = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:198:1
    |
196 |         mock_rolling.mean.return_value.iloc = [-1]
197 |         mock_rolling.mean.return_value.__getitem__ = lambda x: 2.0 if x == -1 else 1.0
198 |         
    | ^^^^^^^^
199 |         prices.diff.return_value.where.return_value.rolling = Mock(return_value=mock_rolling)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:200:1
    |
199 |         prices.diff.return_value.where.return_value.rolling = Mock(return_value=mock_rolling)
200 |         
    | ^^^^^^^^
201 |         # Should not crash and return reasonable RSI
202 |         rsi = self.analyzer._calculate_rsi(prices, 14)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:205:1
    |
203 |         assert isinstance(rsi, float)
204 |         assert 0 <= rsi <= 100
205 |     
    | ^^^^
206 |     def test_divergence_detection(self):
207 |         """Test momentum divergence detection."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:211:1
    |
209 |         mock_data = Mock()
210 |         mock_data.__len__ = lambda: 20
211 |         
    | ^^^^^^^^
212 |         close_series = Mock()
213 |         close_series.__len__ = lambda: 20
    |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
   --> tests/test_intelligent_position_management.py:215:101
    |
213 |         close_series.__len__ = lambda: 20
214 |         close_series.tail.return_value = Mock()
215 |         close_series.tail.return_value.tolist.return_value = [100, 101, 102, 103, 104]  # Rising prices
    |                                                                                                     ^^^
216 |         close_series.iloc = Mock()
    |

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:217:1
    |
215 |         close_series.tail.return_value.tolist.return_value = [100, 101, 102, 103, 104]  # Rising prices
216 |         close_series.iloc = Mock()
217 |         
    | ^^^^^^^^
218 |         mock_data.__getitem__ = lambda x: close_series if x == 'close' else Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:219:1
    |
218 |         mock_data.__getitem__ = lambda x: close_series if x == 'close' else Mock()
219 |         
    | ^^^^^^^^
220 |         result = self.analyzer._analyze_divergence(mock_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:221:1
    |
220 |         result = self.analyzer._analyze_divergence(mock_data)
221 |         
    | ^^^^^^^^
222 |         assert 'type' in result
223 |         assert 'strength' in result
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:228:1
    |
226 | class TestTrailingStopManager:
227 |     """Test dynamic trailing stop functionality."""
228 |     
    | ^^^^
229 |     def setup_method(self):
230 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:233:1
    |
231 |         self.mock_ctx = Mock()
232 |         self.manager = TrailingStopManager(self.mock_ctx)
233 |     
    | ^^^^
234 |     def test_stop_initialization(self):
235 |         """Test trailing stop initialization."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:242:1
    |
240 |             market_value=11000.0
241 |         )
242 |         
    | ^^^^^^^^
243 |         stop_level = self.manager.update_trailing_stop('AAPL', position, 110.0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:244:1
    |
243 |         stop_level = self.manager.update_trailing_stop('AAPL', position, 110.0)
244 |         
    | ^^^^^^^^
245 |         assert stop_level is not None
246 |         assert stop_level.symbol == 'AAPL'
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:249:1
    |
247 |         assert stop_level.current_price == 110.0
248 |         assert stop_level.stop_price < 110.0  # Stop should be below current price
249 |     
    | ^^^^
250 |     def test_stop_movement(self):
251 |         """Test that stops move up with price for long positions."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:258:1
    |
256 |             market_value=11000.0
257 |         )
258 |         
    | ^^^^^^^^
259 |         # Initialize stop
260 |         stop1 = self.manager.update_trailing_stop('AAPL', position, 110.0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:262:1
    |
260 |         stop1 = self.manager.update_trailing_stop('AAPL', position, 110.0)
261 |         initial_stop = stop1.stop_price
262 |         
    | ^^^^^^^^
263 |         # Price moves higher
264 |         stop2 = self.manager.update_trailing_stop('AAPL', position, 115.0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:265:1
    |
263 |         # Price moves higher
264 |         stop2 = self.manager.update_trailing_stop('AAPL', position, 115.0)
265 |         
    | ^^^^^^^^
266 |         # Stop should move up
267 |         assert stop2.stop_price >= initial_stop
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:269:1
    |
267 |         assert stop2.stop_price >= initial_stop
268 |         assert stop2.current_price == 115.0
269 |     
    | ^^^^
270 |     def test_stop_trigger_detection(self):
271 |         """Test stop trigger detection."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:278:1
    |
276 |             market_value=11000.0
277 |         )
278 |         
    | ^^^^^^^^
279 |         # Initialize stop at high price
280 |         self.manager.update_trailing_stop('AAPL', position, 115.0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:281:1
    |
279 |         # Initialize stop at high price
280 |         self.manager.update_trailing_stop('AAPL', position, 115.0)
281 |         
    | ^^^^^^^^
282 |         # Price falls below stop
283 |         stop_level = self.manager.update_trailing_stop('AAPL', position, 105.0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:284:1
    |
282 |         # Price falls below stop
283 |         stop_level = self.manager.update_trailing_stop('AAPL', position, 105.0)
284 |         
    | ^^^^^^^^
285 |         # Should detect trigger
286 |         assert stop_level.is_triggered
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:291:1
    |
289 | class TestProfitTakingEngine:
290 |     """Test multi-tiered profit taking."""
291 |     
    | ^^^^
292 |     def setup_method(self):
293 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:296:1
    |
294 |         self.mock_ctx = Mock()
295 |         self.engine = ProfitTakingEngine(self.mock_ctx)
296 |     
    | ^^^^
297 |     def test_profit_plan_creation(self):
298 |         """Test profit plan creation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:305:1
    |
303 |             market_value=11000.0
304 |         )
305 |         
    | ^^^^^^^^
306 |         # Mock current price
307 |         self.mock_ctx.data_fetcher.get_minute_df.return_value = None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:309:1
    |
307 |         self.mock_ctx.data_fetcher.get_minute_df.return_value = None
308 |         self.mock_ctx.data_fetcher.get_daily_df.return_value = None
309 |         
    | ^^^^^^^^
310 |         plan = self.engine.create_profit_plan('AAPL', position, 100.0, 300.0)  # $3 risk per share
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:311:1
    |
310 |         plan = self.engine.create_profit_plan('AAPL', position, 100.0, 300.0)  # $3 risk per share
311 |         
    | ^^^^^^^^
312 |         if plan:  # Plan creation might fail due to mocking
313 |             assert plan.symbol == 'AAPL'
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:316:1
    |
314 |             assert plan.entry_price == 100.0
315 |             assert len(plan.targets) > 0
316 |     
    | ^^^^
317 |     def test_target_triggering(self):
318 |         """Test profit target triggering."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:325:1
    |
323 |             market_value=11000.0
324 |         )
325 |         
    | ^^^^^^^^
326 |         # Create plan
327 |         plan = self.engine.create_profit_plan('AAPL', position, 100.0, 300.0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:328:1
    |
326 |         # Create plan
327 |         plan = self.engine.create_profit_plan('AAPL', position, 100.0, 300.0)
328 |         
    | ^^^^^^^^
329 |         if plan:
330 |             # Simulate price increase
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:332:1
    |
330 |             # Simulate price increase
331 |             triggered_targets = self.engine.update_profit_plan('AAPL', 110.0, position)
332 |             
    | ^^^^^^^^^^^^
333 |             # Should return list of triggered targets
334 |             assert isinstance(triggered_targets, list)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:339:1
    |
337 | class TestPortfolioCorrelationAnalyzer:
338 |     """Test portfolio correlation analysis."""
339 |     
    | ^^^^
340 |     def setup_method(self):
341 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:344:1
    |
342 |         self.mock_ctx = Mock()
343 |         self.analyzer = PortfolioCorrelationAnalyzer(self.mock_ctx)
344 |     
    | ^^^^
345 |     def test_position_data_extraction(self):
346 |         """Test position data extraction."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:352:1
    |
350 |             MockPosition('GOOGL', 25, 150.0, 3750.0)
351 |         ]
352 |         
    | ^^^^^^^^
353 |         position_data = self.analyzer._extract_position_data(positions)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:354:1
    |
353 |         position_data = self.analyzer._extract_position_data(positions)
354 |         
    | ^^^^^^^^
355 |         assert len(position_data) == 3
356 |         assert 'AAPL' in position_data
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:358:1
    |
356 |         assert 'AAPL' in position_data
357 |         assert position_data['AAPL']['market_value'] == 11000.0
358 |     
    | ^^^^
359 |     def test_sector_classification(self):
360 |         """Test sector classification."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:363:1
    |
361 |         sector = self.analyzer._get_symbol_sector('AAPL')
362 |         assert sector == 'Technology'
363 |         
    | ^^^^^^^^
364 |         sector = self.analyzer._get_symbol_sector('JPM')
365 |         assert sector == 'Financials'
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:366:1
    |
364 |         sector = self.analyzer._get_symbol_sector('JPM')
365 |         assert sector == 'Financials'
366 |     
    | ^^^^
367 |     def test_concentration_analysis(self):
368 |         """Test concentration level analysis."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:374:1
    |
372 |             MockPosition('GOOGL', 25, 150.0, 25000.0)   # 25% of portfolio
373 |         ]
374 |         
    | ^^^^^^^^
375 |         analysis = self.analyzer.analyze_portfolio(positions)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:376:1
    |
375 |         analysis = self.analyzer.analyze_portfolio(positions)
376 |         
    | ^^^^^^^^
377 |         assert analysis.total_positions == 3
378 |         assert analysis.total_value == 100000.0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:384:1
    |
382 | class TestIntegrationScenarios:
383 |     """Test integrated scenarios combining multiple components."""
384 |     
    | ^^^^
385 |     def setup_method(self):
386 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:389:1
    |
387 |         self.mock_ctx = Mock()
388 |         self.manager = IntelligentPositionManager(self.mock_ctx)
389 |     
    | ^^^^
390 |     def test_profitable_position_scenario(self):
391 |         """Test scenario with profitable position."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:398:1
    |
396 |             market_value=12000.0  # 20% gain
397 |         )
398 |         
    | ^^^^^^^^
399 |         # Should lean towards holding profitable position
400 |         result = self.manager.should_hold_position(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:403:1
    |
401 |             'AAPL', position, 20.0, 10, [position]
402 |         )
403 |         
    | ^^^^^^^^
404 |         # With 20% gain and 10 days held, should generally hold
405 |         # (exact result depends on market conditions)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:407:1
    |
405 |         # (exact result depends on market conditions)
406 |         assert isinstance(result, bool)
407 |     
    | ^^^^
408 |     def test_loss_position_scenario(self):
409 |         """Test scenario with losing position."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:416:1
    |
414 |             market_value=9000.0  # 10% loss
415 |         )
416 |         
    | ^^^^^^^^
417 |         result = self.manager.should_hold_position(
418 |             'AAPL', position, -10.0, 2, [position]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:420:1
    |
418 |             'AAPL', position, -10.0, 2, [position]
419 |         )
420 |         
    | ^^^^^^^^
421 |         # Should consider holding if only held for 2 days (min hold period)
422 |         assert isinstance(result, bool)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:423:1
    |
421 |         # Should consider holding if only held for 2 days (min hold period)
422 |         assert isinstance(result, bool)
423 |     
    | ^^^^
424 |     def test_portfolio_level_recommendations(self):
425 |         """Test portfolio-level analysis and recommendations."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:431:1
    |
429 |             MockPosition('TSLA', 30, 150.0, 4800.0)
430 |         ]
431 |         
    | ^^^^^^^^
432 |         recommendations = self.manager.get_portfolio_recommendations(positions)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:433:1
    |
432 |         recommendations = self.manager.get_portfolio_recommendations(positions)
433 |         
    | ^^^^^^^^
434 |         # Should return recommendations for all positions
435 |         assert isinstance(recommendations, list)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:444:1
    |
442 |     manager = IntelligentPositionManager()
443 |     assert manager.logger.name.endswith("IntelligentPositionManager")
444 |     
    | ^^^^
445 |     detector = MarketRegimeDetector()
446 |     assert detector.logger.name.endswith("MarketRegimeDetector")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:452:1
    |
450 |     # Run tests manually if pytest not available
451 |     test_logging_configuration()
452 |     
    | ^^^^
453 |     # Basic smoke tests
454 |     manager = IntelligentPositionManager()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:456:1
    |
454 |     manager = IntelligentPositionManager()
455 |     print("✓ IntelligentPositionManager initialized successfully")
456 |     
    | ^^^^
457 |     detector = MarketRegimeDetector()
458 |     regime_params = detector.get_regime_parameters(MarketRegime.TRENDING_BULL)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:460:1
    |
458 |     regime_params = detector.get_regime_parameters(MarketRegime.TRENDING_BULL)
459 |     print(f"✓ Regime parameters: {regime_params}")
460 |     
    | ^^^^
461 |     analyzer = TechnicalSignalAnalyzer()
462 |     print("✓ TechnicalSignalAnalyzer initialized successfully")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:463:1
    |
461 |     analyzer = TechnicalSignalAnalyzer()
462 |     print("✓ TechnicalSignalAnalyzer initialized successfully")
463 |     
    | ^^^^
464 |     trail_manager = TrailingStopManager()
465 |     print("✓ TrailingStopManager initialized successfully")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:466:1
    |
464 |     trail_manager = TrailingStopManager()
465 |     print("✓ TrailingStopManager initialized successfully")
466 |     
    | ^^^^
467 |     profit_engine = ProfitTakingEngine()
468 |     print("✓ ProfitTakingEngine initialized successfully")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:469:1
    |
467 |     profit_engine = ProfitTakingEngine()
468 |     print("✓ ProfitTakingEngine initialized successfully")
469 |     
    | ^^^^
470 |     corr_analyzer = PortfolioCorrelationAnalyzer()
471 |     print("✓ PortfolioCorrelationAnalyzer initialized successfully")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_intelligent_position_management.py:472:1
    |
470 |     corr_analyzer = PortfolioCorrelationAnalyzer()
471 |     print("✓ PortfolioCorrelationAnalyzer initialized successfully")
472 |     
    | ^^^^
473 |     print("\n✅ All advanced position management components initialized successfully!")
474 |     print("🎯 Ready for intelligent position holding strategies implementation!")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_intelligent_position_management.py:474:81
    |
473 |     print("\n✅ All advanced position management components initialized successfully!")
474 |     print("🎯 Ready for intelligent position holding strategies implementation!")
    |                                                                                  ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_json_formatter.py:1:1
  |
1 | / import json
2 | | import logging
3 | | import ai_trading.logging as logger  # Use centralized logging module
  | |___________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_json_formatter.py:43:5
   |
41 |   def test_json_formatter_serializes_nonstandard_types():
42 |       fmt = logger.JSONFormatter("%(asctime)sZ")
43 | /     import numpy as np
44 | |     from datetime import datetime, date
   | |_______________________________________^
45 |
46 |       class Foo:
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_kelly_confidence_fix.py:7:1
   |
 5 |   to valid probability ranges in the Kelly calculation.
 6 |   """
 7 | / import pytest
 8 | | import math
 9 | |
10 | | # Test the actual import and function from bot_engine
11 | | import sys
12 | | import os
   | |_________^
13 |   sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_kelly_confidence_fix.py:21:1
   |
19 |     try:
20 |         from ai_trading.core.bot_engine import fractional_kelly_size
21 |         
   | ^^^^^^^^
22 |         ctx = MockBotContext()
23 |         balance = 10000.0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_kelly_confidence_fix.py:26:1
   |
24 |         price = 100.0
25 |         atr = 2.0
26 |         
   | ^^^^^^^^
27 |         # Test cases that previously caused errors
28 |         problematic_confidences = [
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_kelly_confidence_fix.py:34:1
   |
32 |             2.5,
33 |         ]
34 |         
   | ^^^^^^^^
35 |         for confidence in problematic_confidences:
36 |             # This should not raise an error and should return a valid position size
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_kelly_confidence_fix.py:38:1
   |
36 |             # This should not raise an error and should return a valid position size
37 |             result = fractional_kelly_size(ctx, balance, price, atr, confidence)
38 |             
   | ^^^^^^^^^^^^
39 |             # Verify result is reasonable
40 |             assert isinstance(result, int), f"Result should be integer, got {type(result)}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_kelly_confidence_fix.py:43:1
   |
41 |             assert result >= 0, f"Position size should be non-negative, got {result}"
42 |             assert result < 1000, f"Position size should be reasonable, got {result}"
43 |             
   | ^^^^^^^^^^^^
44 |         # Test edge cases
45 |         assert fractional_kelly_size(ctx, balance, price, atr, 0.0) >= 0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_kelly_confidence_fix.py:48:1
   |
46 |         assert fractional_kelly_size(ctx, balance, price, atr, 1.0) >= 0
47 |         assert fractional_kelly_size(ctx, balance, price, atr, -0.5) >= 0
48 |         
   | ^^^^^^^^
49 |     except ImportError:
50 |         # If we can't import, at least test our normalization logic
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_kelly_confidence_fix.py:57:1
   |
55 |                 return 0.0
56 |             return value
57 |         
   | ^^^^^^^^
58 |         test_values = [3.315653439025116, 3.0650464264275152, 5.0, 1.0, 0.5, 0.0, -0.5]
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_kelly_confidence_fix.py:59:1
   |
58 |         test_values = [3.315653439025116, 3.0650464264275152, 5.0, 1.0, 0.5, 0.0, -0.5]
59 |         
   | ^^^^^^^^
60 |         for value in test_values:
61 |             normalized = sigmoid_normalize(value)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_kelly_confidence_fix.py:63:1
   |
61 |             normalized = sigmoid_normalize(value)
62 |             assert 0.0 <= normalized <= 1.0, f"Normalized value {normalized} should be in [0,1]"
63 |             
   | ^^^^^^^^^^^^
64 |             # Values > 1 should be mapped to something > 0.5
65 |             if value > 1.0:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_kelly_confidence_fix.py:74:1
   |
72 |     try:
73 |         from ai_trading.core.bot_engine import fractional_kelly_size
74 |         
   | ^^^^^^^^
75 |         ctx = MockBotContext()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_kelly_confidence_fix.py:76:1
   |
75 |         ctx = MockBotContext()
76 |         
   | ^^^^^^^^
77 |         # Test invalid inputs return 0 or minimal position
78 |         assert fractional_kelly_size(ctx, -1000, 100, 2.0, 0.6) == 0  # negative balance
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_kelly_confidence_fix.py:81:1
   |
79 |         assert fractional_kelly_size(ctx, 1000, -100, 2.0, 0.6) == 0  # negative price
80 |         assert fractional_kelly_size(ctx, 1000, 0, 2.0, 0.6) == 0     # zero price
81 |         
   | ^^^^^^^^
82 |         # Test that valid inputs work
83 |         result = fractional_kelly_size(ctx, 1000, 100, 2.0, 0.6)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_kelly_confidence_fix.py:85:1
   |
83 |         result = fractional_kelly_size(ctx, 1000, 100, 2.0, 0.6)
84 |         assert result > 0, "Valid inputs should produce positive position size"
85 |         
   | ^^^^^^^^
86 |     except ImportError:
87 |         # Skip if we can't import the actual function
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_kelly_confidence_fix.py:94:54
   |
92 |     test_kelly_confidence_normalization()
93 |     test_kelly_input_validation()
94 |     print("✅ All Kelly confidence fix tests passed!")
   |                                                       ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_logger.py:1:1
  |
1 | / import logging
2 | |
3 | | import pytest
4 | | from tests.conftest import reload_module
5 | |
6 | | import ai_trading.logging as logger  # Use centralized logging module
  | |___________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_logger_module.py:1:1
  |
1 | / import sys
2 | | from pathlib import Path
3 | | import logging
  | |______________^
4 |
5 |   sys.path.insert(0, str(Path(__file__).resolve().parents[1]))
  |
help: Organize imports

W291 [*] Trailing whitespace
  --> tests/test_logger_module.py:13:71
   |
11 |     lg2 = logger.get_logger("test")
12 |     assert lg1 is lg2
13 |     # Updated test: With our new design, child loggers use propagation 
   |                                                                       ^
14 |     # instead of having their own handlers to prevent duplicates
15 |     assert lg1.propagate  # Should propagate to root logger
   |
help: Remove trailing whitespace

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_logging_behavior.py:1:1
  |
1 | / import types
2 | | import time
3 | | import pytest
4 | |
5 | | from ai_trading import utils
6 | | from ai_trading.core import bot_engine
7 | | import ai_trading.alpaca_api as alpaca_api  # AI-AGENT-REF: canonical import
  | |__________________________________________^
8 |   try:
9 |       from ai_trading.strategies.base import TradeSignal
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_logging_behavior.py:51:5
   |
49 |       # Ensure we capture logs from the strategy_allocator module
50 |       caplog.set_level("INFO", logger="strategy_allocator")
51 | /     import importlib
52 | |     import ai_trading.strategy_allocator as strategy_allocator  # AI-AGENT-REF: normalized import
   | |______________________________________________________________^
53 |       strategy_allocator = importlib.reload(strategy_allocator)
54 |       alloc = strategy_allocator.StrategyAllocator()
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_logging_behavior.py:63:1
   |
61 |     t = [0.0]
62 |     monkeypatch.setattr(time, "monotonic", lambda: t[0])
63 |     
   | ^^^^
64 |     alloc.select_signals({"s": [sig]})
65 |     assert any("HOLD_PROTECT_ACTIVE" in r.message for r in caplog.records)
   |
help: Remove whitespace from blank line

RUF100 [*] Unused `noqa` directive (non-enabled: `D401`)
  --> tests/test_logging_sanitizer.py:13:30
   |
11 |         self.last = None
12 |
13 |     def emit(self, record):  # noqa: D401 - simple capture
   |                              ^^^^^^^^^^^^
14 |         self.last = record
   |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_main_extended2.py:19:1
   |
17 |   flask_mod.jsonify = lambda *a, **k: {}
18 |   sys.modules["flask"] = flask_mod
19 | / import ai_trading.main as main
20 | | import ai_trading.app as app
   | |____________________________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_main_smoke.py:1:1
  |
1 | / import importlib
2 | | import pytest
  | |_____________^
3 |
4 |   try:
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_meta_learning.py:1:1
  |
1 | / import types
2 | | import torch.nn as nn
3 | |
4 | | import numpy as np
5 | | import pytest
  | |_____________^
6 |
7 |   np.random.seed(0)
  |
help: Organize imports

E501 Line too long (109 > 100)
   --> tests/test_meta_learning.py:173:101
    |
171 |     import portfolio_rl
172 |     monkeypatch.setattr(portfolio_rl, "_TORCH_AVAILABLE", True)
173 |     monkeypatch.setattr(portfolio_rl.optim, "Adam", lambda *a, **k: types.SimpleNamespace(step=lambda: None))
    |                                                                                                     ^^^^^^^^^
174 |     learner = meta_learning.PortfolioReinforcementLearner()
175 |     state = np.random.rand(10)
    |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_meta_learning_additional.py:1:1
  |
1 | / import types
2 | | from pathlib import Path
3 | |
4 | | import numpy as np
5 | |
6 | | from ai_trading import meta_learning
7 | | import sklearn.linear_model
  | |___________________________^
  |
help: Organize imports

E501 Line too long (164 > 100)
  --> tests/test_meta_learning_additional.py:51:101
   |
49 | …mbda *a, **k: None)
50 | …mbda *a, **k: [])
51 | …**k: types.SimpleNamespace(fit=lambda X,y, sample_weight=None: None, predict=lambda X:[0]*len(X)))
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
52 | …h/"m.pkl"), str(tmp_path/"hist.pkl"), min_samples=1)
53 | …
   |

E501 Line too long (118 > 100)
  --> tests/test_meta_learning_additional.py:52:101
   |
50 |     monkeypatch.setattr(meta_learning, "load_model_checkpoint", lambda *a, **k: [])
51 |     monkeypatch.setattr(sklearn.linear_model, "Ridge", lambda *a, **k: types.SimpleNamespace(fit=lambda X,y, sample_weight=None: None,…
52 |     ok = meta_learning.retrain_meta_learner(str(data), str(tmp_path/"m.pkl"), str(tmp_path/"hist.pkl"), min_samples=1)
   |                                                                                                     ^^^^^^^^^^^^^^^^^^
53 |     assert ok
   |

E501 Line too long (105 > 100)
  --> tests/test_meta_learning_additional.py:60:101
   |
58 |     m = types.SimpleNamespace(predict=lambda X: [1,2,3])
59 |     data = [1,2,3]
60 |     assert meta_learning.optimize_signals(data, types.SimpleNamespace(MODEL_PATH=""), model=m) == [1,2,3]
   |                                                                                                     ^^^^^
61 |     monkeypatch.setattr(meta_learning, "load_model_checkpoint", lambda path: None)
62 |     assert meta_learning.optimize_signals(data, types.SimpleNamespace(MODEL_PATH=""), model=None) == data
   |

E501 Line too long (105 > 100)
  --> tests/test_meta_learning_additional.py:62:101
   |
60 |     assert meta_learning.optimize_signals(data, types.SimpleNamespace(MODEL_PATH=""), model=m) == [1,2,3]
61 |     monkeypatch.setattr(meta_learning, "load_model_checkpoint", lambda path: None)
62 |     assert meta_learning.optimize_signals(data, types.SimpleNamespace(MODEL_PATH=""), model=None) == data
   |                                                                                                     ^^^^^
   |

E501 Line too long (113 > 100)
  --> tests/test_meta_learning_module.py:22:101
   |
20 |     history = tmp_path / "hist.json"
21 |     np.savetxt(w_path, np.array([0.1, 0.2]), delimiter=",")
22 |     result = meta_learning.update_weights(str(w_path), np.array([0.3, 0.4]), {"m": 1}, str(history), n_history=2)
   |                                                                                                     ^^^^^^^^^^^^^
23 |     assert result
24 |     data = np.loadtxt(w_path, delimiter=",")
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_meta_learning_optional.py:1:1
  |
1 | / import importlib
2 | | import sys
3 | | from types import ModuleType
  | |____________________________^
4 |
5 |   def test_engine_imports_without_meta_learning(monkeypatch):
  |
help: Organize imports

E701 Multiple statements on one line (colon)
 --> tests/test_meta_learning_optional.py:7:31
  |
5 | def test_engine_imports_without_meta_learning(monkeypatch):
6 |     # Simulate missing module to ensure optional behavior works
7 |     class _Missing(ModuleType): pass
  |                               ^
8 |     sys.modules.pop("ai_trading.meta_learning", None)
9 |     monkeypatch.setitem(sys.modules, "ai_trading.meta_learning", _Missing("ai_trading.meta_learning"))
  |

E501 Line too long (102 > 100)
  --> tests/test_meta_learning_optional.py:9:101
   |
 7 |     class _Missing(ModuleType): pass
 8 |     sys.modules.pop("ai_trading.meta_learning", None)
 9 |     monkeypatch.setitem(sys.modules, "ai_trading.meta_learning", _Missing("ai_trading.meta_learning"))
   |                                                                                                     ^^
10 |     # Import should not crash
11 |     eng = importlib.import_module("ai_trading.core.bot_engine")
   |

W292 [*] No newline at end of file
  --> tests/test_meta_learning_optional.py:21:24
   |
19 |     dummy = [{"sym":"AAPL","score":0.5}, {"sym":"MSFT","score":0.4}]
20 |     out = eng.optimize_signals(dummy)  # type: ignore[attr-defined]
21 |     assert out == dummy
   |                        ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_metalearning_strategy.py:6:1
   |
 4 |   """
 5 |
 6 | / import os
 7 | | import pandas as pd
 8 | | import numpy as np
 9 | | from datetime import datetime, timedelta, timezone
10 | | from unittest.mock import patch
   | |_______________________________^
11 |
12 |   # Set minimal environment variables to avoid config errors
   |
help: Organize imports

E501 Line too long (103 > 100)
  --> tests/test_metalearning_strategy.py:26:101
   |
24 |     start_date = datetime.now(timezone.utc) - timedelta(days=days)
25 |     end_date = datetime.now(timezone.utc)
26 |     dates = pd.date_range(start=start_date, end=end_date, freq='1H')  # Hourly data for reasonable size
   |                                                                                                     ^^^
27 |     
28 |     # Generate realistic price movements
   |

W293 [*] Blank line contains whitespace
  --> tests/test_metalearning_strategy.py:27:1
   |
25 |     end_date = datetime.now(timezone.utc)
26 |     dates = pd.date_range(start=start_date, end=end_date, freq='1H')  # Hourly data for reasonable size
27 |     
   | ^^^^
28 |     # Generate realistic price movements
29 |     np.random.seed(42)  # For reproducible tests
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_metalearning_strategy.py:31:1
   |
29 |     np.random.seed(42)  # For reproducible tests
30 |     returns = np.random.normal(0.0001, 0.01, len(dates))  # Smaller hourly returns
31 |     
   | ^^^^
32 |     prices = [start_price]
33 |     for ret in returns[1:]:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_metalearning_strategy.py:35:1
   |
33 |     for ret in returns[1:]:
34 |         prices.append(prices[-1] * (1 + ret))
35 |     
   | ^^^^
36 |     # Create OHLC data
37 |     opens = np.array(prices[:-1])
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_metalearning_strategy.py:39:1
   |
37 |     opens = np.array(prices[:-1])
38 |     closes = np.array(prices[1:])
39 |     
   | ^^^^
40 |     # Create high/low with some spread
41 |     highs = np.maximum(opens, closes) * (1 + np.random.uniform(0, 0.005, len(opens)))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_metalearning_strategy.py:43:1
   |
41 |     highs = np.maximum(opens, closes) * (1 + np.random.uniform(0, 0.005, len(opens)))
42 |     lows = np.minimum(opens, closes) * (1 - np.random.uniform(0, 0.005, len(opens)))
43 |     
   | ^^^^
44 |     # Create volume
45 |     volumes = np.random.randint(10000, 100000, len(opens))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_metalearning_strategy.py:46:1
   |
44 |     # Create volume
45 |     volumes = np.random.randint(10000, 100000, len(opens))
46 |     
   | ^^^^
47 |     data = pd.DataFrame({
48 |         'open': opens,
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_metalearning_strategy.py:54:1
   |
52 |         'volume': volumes
53 |     }, index=dates[1:])
54 |     
   | ^^^^
55 |     return data
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_metalearning_strategy.py:60:1
   |
58 | class TestMetaLearning:
59 |     """Test cases for MetaLearning strategy."""
60 |     
   | ^^^^
61 |     def setup_method(self):
62 |         """Set up test fixtures."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_metalearning_strategy.py:66:1
   |
64 |         self.strategy = MetaLearning()
65 |         self.mock_data = create_mock_price_data(days=100)
66 |     
   | ^^^^
67 |     def test_strategy_initialization(self):
68 |         """Test strategy initializes correctly."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_metalearning_strategy.py:75:1
   |
73 |         assert self.strategy.parameters['min_confidence'] == 0.6
74 |         assert not self.strategy.is_trained
75 |     
   | ^^^^
76 |     def test_extract_features(self):
77 |         """Test feature extraction from price data."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_metalearning_strategy.py:79:1
   |
77 |         """Test feature extraction from price data."""
78 |         features = self.strategy.extract_features(self.mock_data)
79 |         
   | ^^^^^^^^
80 |         assert features is not None
81 |         assert len(features) > 0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_metalearning_strategy.py:87:1
   |
85 |         assert 'macd' in features.columns
86 |         assert 'volatility_20' in features.columns
87 |         
   | ^^^^^^^^
88 |         # Check that features don't contain NaN or infinite values
89 |         assert not features.isnull().any().any()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_metalearning_strategy.py:91:1
   |
89 |         assert not features.isnull().any().any()
90 |         assert not np.isinf(features).any().any()
91 |     
   | ^^^^
92 |     def test_train_model(self):
93 |         """Test model training with sufficient data."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_metalearning_strategy.py:95:1
   |
93 |         """Test model training with sufficient data."""
94 |         success = self.strategy.train_model(self.mock_data)
95 |         
   | ^^^^^^^^
96 |         assert success
97 |         assert self.strategy.is_trained
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:103:1
    |
101 |         assert len(self.strategy.feature_columns) > 0
102 |         assert self.strategy.prediction_accuracy >= 0
103 |     
    | ^^^^
104 |     def test_train_model_insufficient_data(self):
105 |         """Test model training with insufficient data."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:108:1
    |
106 |         small_data = self.mock_data.head(10)  # Only 10 days
107 |         success = self.strategy.train_model(small_data)
108 |         
    | ^^^^^^^^
109 |         assert not success
110 |         assert not self.strategy.is_trained
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:111:1
    |
109 |         assert not success
110 |         assert not self.strategy.is_trained
111 |     
    | ^^^^
112 |     def test_predict_price_movement(self):
113 |         """Test price movement prediction."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:116:1
    |
114 |         # First train the model
115 |         self.strategy.train_model(self.mock_data)
116 |         
    | ^^^^^^^^
117 |         # Make prediction
118 |         prediction = self.strategy.predict_price_movement(self.mock_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:119:1
    |
117 |         # Make prediction
118 |         prediction = self.strategy.predict_price_movement(self.mock_data)
119 |         
    | ^^^^^^^^
120 |         assert prediction is not None
121 |         assert 'direction' in prediction
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:128:1
    |
126 |         assert 'current_price' in prediction
127 |         assert 'volatility' in prediction
128 |     
    | ^^^^
129 |     def test_execute_strategy_with_data(self):
130 |         """Test strategy execution with mock data."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:133:1
    |
131 |         with patch('ai_trading.strategies.metalearning.get_minute_df') as mock_get_data:
132 |             mock_get_data.return_value = self.mock_data
133 |             
    | ^^^^^^^^^^^^
134 |             result = self.strategy.execute_strategy('AAPL')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:135:1
    |
134 |             result = self.strategy.execute_strategy('AAPL')
135 |             
    | ^^^^^^^^^^^^
136 |             assert result is not None
137 |             assert 'signal' in result
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:141:1
    |
139 |             assert 'strength' in result
140 |             assert result['signal'] in ['buy', 'sell', 'hold']
141 |             
    | ^^^^^^^^^^^^
142 |             if result['signal'] != 'hold':
143 |                 assert result['confidence'] > 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:146:1
    |
144 |                 assert result['strength'] > 0
145 |                 assert 'reasoning' in result
146 |     
    | ^^^^
147 |     def test_execute_strategy_no_data(self):
148 |         """Test strategy execution with no data."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:151:1
    |
149 |         with patch('ai_trading.strategies.metalearning.get_minute_df') as mock_get_data:
150 |             mock_get_data.return_value = None
151 |             
    | ^^^^^^^^^^^^
152 |             result = self.strategy.execute_strategy('AAPL')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:153:1
    |
152 |             result = self.strategy.execute_strategy('AAPL')
153 |             
    | ^^^^^^^^^^^^
154 |             assert result is not None
155 |             assert result['signal'] == 'hold'
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:158:1
    |
156 |             assert result['confidence'] == 0.0
157 |             assert result['strength'] == 0.0
158 |     
    | ^^^^
159 |     def test_generate_signals(self):
160 |         """Test signal generation for multiple symbols."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:163:1
    |
161 |         # Add symbols to strategy
162 |         self.strategy.symbols = ['AAPL', 'GOOGL']
163 |         
    | ^^^^^^^^
164 |         with patch('ai_trading.strategies.metalearning.get_minute_df') as mock_get_data:
165 |             mock_get_data.return_value = self.mock_data
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:166:1
    |
164 |         with patch('ai_trading.strategies.metalearning.get_minute_df') as mock_get_data:
165 |             mock_get_data.return_value = self.mock_data
166 |             
    | ^^^^^^^^^^^^
167 |             # Mock market data
168 |             market_data = {'timestamp': datetime.now(timezone.utc)}  # AI-AGENT-REF: Use timezone-aware datetime
    |
help: Remove whitespace from blank line

E501 Line too long (112 > 100)
   --> tests/test_metalearning_strategy.py:168:101
    |
167 |             # Mock market data
168 |             market_data = {'timestamp': datetime.now(timezone.utc)}  # AI-AGENT-REF: Use timezone-aware datetime
    |                                                                                                     ^^^^^^^^^^^^
169 |             
170 |             signals = self.strategy.generate_signals(market_data)
    |

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:169:1
    |
167 |             # Mock market data
168 |             market_data = {'timestamp': datetime.now(timezone.utc)}  # AI-AGENT-REF: Use timezone-aware datetime
169 |             
    | ^^^^^^^^^^^^
170 |             signals = self.strategy.generate_signals(market_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:171:1
    |
170 |             signals = self.strategy.generate_signals(market_data)
171 |             
    | ^^^^^^^^^^^^
172 |             assert isinstance(signals, list)
173 |             # Signals might be empty if confidence is too low, which is valid
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:174:1
    |
172 |             assert isinstance(signals, list)
173 |             # Signals might be empty if confidence is too low, which is valid
174 |     
    | ^^^^
175 |     def test_calculate_position_size(self):
176 |         """Test position size calculation."""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_metalearning_strategy.py:177:9
    |
175 |       def test_calculate_position_size(self):
176 |           """Test position size calculation."""
177 | /         from ai_trading.strategies.base import StrategySignal
178 | |         from ai_trading.core.enums import OrderSide
    | |___________________________________________________^
179 |           
180 |           signal = StrategySignal(
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:179:1
    |
177 |         from ai_trading.strategies.base import StrategySignal
178 |         from ai_trading.core.enums import OrderSide
179 |         
    | ^^^^^^^^
180 |         signal = StrategySignal(
181 |             symbol='AAPL',
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:186:1
    |
184 |             confidence=0.7
185 |         )
186 |         
    | ^^^^^^^^
187 |         portfolio_value = 100000
188 |         position_size = self.strategy.calculate_position_size(signal, portfolio_value)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:189:1
    |
187 |         portfolio_value = 100000
188 |         position_size = self.strategy.calculate_position_size(signal, portfolio_value)
189 |         
    | ^^^^^^^^
190 |         assert position_size >= 0
191 |         assert position_size <= portfolio_value  # Position shouldn't exceed portfolio
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:192:1
    |
190 |         assert position_size >= 0
191 |         assert position_size <= portfolio_value  # Position shouldn't exceed portfolio
192 |     
    | ^^^^
193 |     def test_fallback_prediction(self):
194 |         """Test fallback prediction when ML is not available."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:197:1
    |
195 |         # Temporarily disable ML
196 |         original_ml = self.strategy.__class__.__module__.replace('metalearning', 'metalearning')
197 |         
    | ^^^^^^^^
198 |         prediction = self.strategy._fallback_prediction(self.mock_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:199:1
    |
198 |         prediction = self.strategy._fallback_prediction(self.mock_data)
199 |         
    | ^^^^^^^^
200 |         assert prediction is not None
201 |         assert 'direction' in prediction
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:205:1
    |
203 |         assert prediction['direction'] in ['buy', 'sell', 'hold']
204 |         assert 0 <= prediction['confidence'] <= 1
205 |     
    | ^^^^
206 |     def test_caching_mechanism(self):
207 |         """Test prediction caching."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:210:1
    |
208 |         with patch('ai_trading.strategies.metalearning.get_minute_df') as mock_get_data:
209 |             mock_get_data.return_value = self.mock_data
210 |             
    | ^^^^^^^^^^^^
211 |             # First call
212 |             result1 = self.strategy.execute_strategy('AAPL')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:213:1
    |
211 |             # First call
212 |             result1 = self.strategy.execute_strategy('AAPL')
213 |             
    | ^^^^^^^^^^^^
214 |             # Second call should use cache
215 |             result2 = self.strategy.execute_strategy('AAPL')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:216:1
    |
214 |             # Second call should use cache
215 |             result2 = self.strategy.execute_strategy('AAPL')
216 |             
    | ^^^^^^^^^^^^
217 |             # Results should be the same due to caching
218 |             assert result1 == result2
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:219:1
    |
217 |             # Results should be the same due to caching
218 |             assert result1 == result2
219 |     
    | ^^^^
220 |     def test_should_retrain(self):
221 |         """Test retrain logic."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:224:1
    |
222 |         # Initially should retrain (not trained)
223 |         assert self.strategy._should_retrain()
224 |         
    | ^^^^^^^^
225 |         # After training, should not retrain immediately
226 |         self.strategy.train_model(self.mock_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:228:1
    |
226 |         self.strategy.train_model(self.mock_data)
227 |         assert not self.strategy._should_retrain()
228 |         
    | ^^^^^^^^
229 |         # Should retrain after time passes
230 |         old_date = datetime.now(timezone.utc) - timedelta(days=10)  # AI-AGENT-REF: Use timezone-aware datetime
    |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
   --> tests/test_metalearning_strategy.py:230:101
    |
229 |         # Should retrain after time passes
230 |         old_date = datetime.now(timezone.utc) - timedelta(days=10)  # AI-AGENT-REF: Use timezone-aware datetime
    |                                                                                                     ^^^^^^^^^^^
231 |         self.strategy.last_training_date = old_date
232 |         assert self.strategy._should_retrain()
    |

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:233:1
    |
231 |         self.strategy.last_training_date = old_date
232 |         assert self.strategy._should_retrain()
233 |     
    | ^^^^
234 |     def test_signal_validation(self):
235 |         """Test that strategy validates signals properly."""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_metalearning_strategy.py:236:9
    |
234 |       def test_signal_validation(self):
235 |           """Test that strategy validates signals properly."""
236 | /         from ai_trading.strategies.base import StrategySignal
237 | |         from ai_trading.core.enums import OrderSide
    | |___________________________________________________^
238 |           
239 |           # Valid signal
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:238:1
    |
236 |         from ai_trading.strategies.base import StrategySignal
237 |         from ai_trading.core.enums import OrderSide
238 |         
    | ^^^^^^^^
239 |         # Valid signal
240 |         valid_signal = StrategySignal(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:247:1
    |
245 |         )
246 |         assert self.strategy.validate_signal(valid_signal)
247 |         
    | ^^^^^^^^
248 |         # Invalid signal (low confidence)
249 |         invalid_signal = StrategySignal(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:261:1
    |
259 |     """Test that MetaLearning can be imported without errors."""
260 |     from ai_trading.strategies.metalearning import MetaLearning
261 |     
    | ^^^^
262 |     strategy = MetaLearning()
263 |     assert strategy is not None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:270:1
    |
268 |     """Test that the strategy doesn't generate METALEARN_INVALID_PRICES errors."""
269 |     from ai_trading.strategies.metalearning import MetaLearning
270 |     
    | ^^^^
271 |     strategy = MetaLearning()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:272:1
    |
271 |     strategy = MetaLearning()
272 |     
    | ^^^^
273 |     # Test with no data - should return neutral signal, not error
274 |     with patch('ai_trading.strategies.metalearning.get_minute_df') as mock_get_data:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:276:1
    |
274 |     with patch('ai_trading.strategies.metalearning.get_minute_df') as mock_get_data:
275 |         mock_get_data.return_value = None
276 |         
    | ^^^^^^^^
277 |         result = strategy.execute_strategy('AAPL')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:278:1
    |
277 |         result = strategy.execute_strategy('AAPL')
278 |         
    | ^^^^^^^^
279 |         # Should return neutral signal, not raise an error
280 |         assert result is not None
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:288:1
    |
286 |     # Run a basic test to ensure the strategy works
287 |     print("Running basic MetaLearning strategy test")
288 |     
    | ^^^^
289 |     test_metalearning_import()
290 |     print("✅ Import test passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:291:1
    |
289 |     test_metalearning_import()
290 |     print("✅ Import test passed")
291 |     
    | ^^^^
292 |     test_no_metalearn_invalid_prices_error()
293 |     print("✅ Error handling test passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:294:1
    |
292 |     test_no_metalearn_invalid_prices_error()
293 |     print("✅ Error handling test passed")
294 |     
    | ^^^^
295 |     # Create and test strategy
296 |     from ai_trading.strategies.metalearning import MetaLearning
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:298:1
    |
296 |     from ai_trading.strategies.metalearning import MetaLearning
297 |     strategy = MetaLearning()
298 |     
    | ^^^^
299 |     # Test with mock data
300 |     mock_data = create_mock_price_data()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:303:1
    |
301 |     features = strategy.extract_features(mock_data)
302 |     print(f"✅ Feature extraction: {len(features.columns)} features extracted")
303 |     
    | ^^^^
304 |     success = strategy.train_model(mock_data)
305 |     print(f"✅ Model training: {'Success' if success else 'Failed'}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:306:1
    |
304 |     success = strategy.train_model(mock_data)
305 |     print(f"✅ Model training: {'Success' if success else 'Failed'}")
306 |     
    | ^^^^
307 |     if success:
308 |         prediction = strategy.predict_price_movement(mock_data)
    |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
   --> tests/test_metalearning_strategy.py:309:100
    |
307 |     if success:
308 |         prediction = strategy.predict_price_movement(mock_data)
309 |         print(f"✅ Prediction: {prediction['direction']} (confidence: {prediction['confidence']:.2f})")
    |                                                                                                     ^^^
310 |     
311 |     print("✅ All basic tests passed!")
    |

W293 [*] Blank line contains whitespace
   --> tests/test_metalearning_strategy.py:310:1
    |
308 |         prediction = strategy.predict_price_movement(mock_data)
309 |         print(f"✅ Prediction: {prediction['direction']} (confidence: {prediction['confidence']:.2f})")
310 |     
    | ^^^^
311 |     print("✅ All basic tests passed!")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_metalearning_strategy.py:311:39
    |
309 |         print(f"✅ Prediction: {prediction['direction']} (confidence: {prediction['confidence']:.2f})")
310 |     
311 |     print("✅ All basic tests passed!")
    |                                        ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_minute_fallback_none_safe.py:1:1
  |
1 | / import types
2 | | import pandas as pd
3 | |
4 | | import ai_trading.data.bars as data_bars
5 | | from ai_trading.data.bars import safe_get_stock_bars
  | |____________________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_ml_model_loading.py:1:1
   |
 1 | / import pickle
 2 | | import numpy as np
 3 | | from sklearn.dummy import DummyClassifier
 4 | | import sys
 5 | | import types
 6 | |
 7 | | # AI-AGENT-REF: Replaced unsafe _raise_dynamic_exec_disabled() with direct imports from core module
 8 | | from ai_trading.core.bot_engine import _load_ml_model
   | |_____________________________________________________^
 9 |
10 |   # Setup stub for model loader dependency
   |
help: Organize imports

E401 [*] Multiple imports on one line
 --> tests/test_model_loading.py:1:1
  |
1 | import joblib, types
  | ^^^^^^^^^^^^^^^^^^^^
2 | from ai_trading.core.bot_engine import _load_required_model
  |
help: Split imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_model_loading.py:1:1
  |
1 | / import joblib, types
2 | | from ai_trading.core.bot_engine import _load_required_model
  | |___________________________________________________________^
  |
help: Organize imports

E701 Multiple statements on one line (colon)
  --> tests/test_model_loading.py:16:16
   |
14 | def test_load_model_from_module(monkeypatch, tmp_path):
15 |     mod = types.ModuleType("fake_model_mod")
16 |     class Dummy: pass
   |                ^
17 |     mod.get_model = lambda: Dummy()
18 |     import sys
   |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_model_registry.py:4:1
   |
 2 |   Tests for model registry functionality.
 3 |   """
 4 | / import tempfile
 5 | | import json
 6 | | from pathlib import Path
 7 | | from unittest.mock import Mock
 8 | |
 9 | | import pytest
10 | |
11 | | from ai_trading.model_registry import ModelRegistry
   | |___________________________________________________^
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry.py:22:1
   |
20 |             # Create registry in temp directory
21 |             registry = ModelRegistry(temp_dir)
22 |             
   | ^^^^^^^^^^^^
23 |             # Create a simple test model (using a dict as a trivial model)
24 |             model = {"type": "test_model", "params": {"param1": 1.0}}
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry.py:30:1
   |
28 |             dataset_fingerprint = "test_fingerprint_123"
29 |             tags = ["test", "unit_test"]
30 |             
   | ^^^^^^^^^^^^
31 |             # Register the model
32 |             model_id = registry.register_model(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry.py:40:1
   |
38 |                 tags=tags
39 |             )
40 |             
   | ^^^^^^^^^^^^
41 |             # Verify model ID is returned
42 |             assert isinstance(model_id, str)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry.py:44:1
   |
42 |             assert isinstance(model_id, str)
43 |             assert len(model_id) > 0
44 |             
   | ^^^^^^^^^^^^
45 |             # Test latest_for returns the correct ID
46 |             latest_id = registry.latest_for(strategy, model_type)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry.py:48:1
   |
46 |             latest_id = registry.latest_for(strategy, model_type)
47 |             assert latest_id == model_id
48 |             
   | ^^^^^^^^^^^^
49 |             # Test load_model returns correct data
50 |             loaded_model, loaded_metadata = registry.load_model(model_id)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry.py:56:1
   |
54 |             assert loaded_metadata["dataset_fingerprint"] == dataset_fingerprint
55 |             assert loaded_metadata["tags"] == tags
56 |             
   | ^^^^^^^^^^^^
57 |             # Verify metadata was merged correctly
58 |             assert loaded_metadata["created_by"] == "test"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry.py:60:1
   |
58 |             assert loaded_metadata["created_by"] == "test"
59 |             assert loaded_metadata["version"] == "1.0"
60 |             
   | ^^^^^^^^^^^^
61 |     def test_index_file_creation(self):
62 |         """Test that index file is created and maintained."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry.py:65:1
   |
63 |         with tempfile.TemporaryDirectory() as temp_dir:
64 |             registry = ModelRegistry(temp_dir)
65 |             
   | ^^^^^^^^^^^^
66 |             # Register a model
67 |             model = {"test": "data"}
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry.py:73:1
   |
71 |                 model_type="test_type"
72 |             )
73 |             
   | ^^^^^^^^^^^^
74 |             # Check that index file exists
75 |             index_file = Path(temp_dir) / "registry_index.json"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry.py:77:1
   |
75 |             index_file = Path(temp_dir) / "registry_index.json"
76 |             assert index_file.exists()
77 |             
   | ^^^^^^^^^^^^
78 |             # Verify index contains our model
79 |             with open(index_file) as f:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry.py:83:1
   |
81 |             assert model_id in index_data
82 |             assert index_data[model_id]["strategy"] == "test_strategy"
83 |             
   | ^^^^^^^^^^^^
84 |     def test_dataset_fingerprint_verification(self):
85 |         """Test dataset fingerprint mismatch raises ValueError."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry.py:88:1
   |
86 |         with tempfile.TemporaryDirectory() as temp_dir:
87 |             registry = ModelRegistry(temp_dir)
88 |             
   | ^^^^^^^^^^^^
89 |             # Register model with fingerprint
90 |             model = {"test": "data"}
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_model_registry.py:93:42
   |
91 |             model_id = registry.register_model(
92 |                 model=model,
93 |                 strategy="test_strategy", 
   |                                          ^
94 |                 model_type="test_type",
95 |                 dataset_fingerprint="correct_fingerprint"
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry.py:97:1
   |
95 |                 dataset_fingerprint="correct_fingerprint"
96 |             )
97 |             
   | ^^^^^^^^^^^^
98 |             # Loading with correct fingerprint should work
99 |             loaded_model, loaded_metadata = registry.load_model(
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_model_registry.py:100:26
    |
 98 |             # Loading with correct fingerprint should work
 99 |             loaded_model, loaded_metadata = registry.load_model(
100 |                 model_id, 
    |                          ^
101 |                 verify_dataset_hash=True,
102 |                 expected_dataset_fingerprint="correct_fingerprint"
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_model_registry.py:105:1
    |
103 |             )
104 |             assert loaded_model == model
105 |             
    | ^^^^^^^^^^^^
106 |             # Loading with wrong fingerprint should raise ValueError
107 |             with pytest.raises(ValueError, match="Dataset fingerprint mismatch"):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_model_registry.py:113:1
    |
111 |                     expected_dataset_fingerprint="wrong_fingerprint"
112 |                 )
113 |                 
    | ^^^^^^^^^^^^^^^^
114 |     def test_latest_for_empty_registry(self):
115 |         """Test latest_for returns None for non-existent models."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_model_registry.py:118:1
    |
116 |         with tempfile.TemporaryDirectory() as temp_dir:
117 |             registry = ModelRegistry(temp_dir)
118 |             
    | ^^^^^^^^^^^^
119 |             # Empty registry should return None
120 |             latest_id = registry.latest_for("nonexistent_strategy", "nonexistent_type")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_model_registry.py:122:1
    |
120 |             latest_id = registry.latest_for("nonexistent_strategy", "nonexistent_type")
121 |             assert latest_id is None
122 |             
    | ^^^^^^^^^^^^
123 |     def test_load_nonexistent_model(self):
124 |         """Test loading non-existent model raises FileNotFoundError."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_model_registry.py:127:1
    |
125 |         with tempfile.TemporaryDirectory() as temp_dir:
126 |             registry = ModelRegistry(temp_dir)
127 |             
    | ^^^^^^^^^^^^
128 |             with pytest.raises(FileNotFoundError, match="Model nonexistent_id not found in registry"):
129 |                 registry.load_model("nonexistent_id")
    |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> tests/test_model_registry.py:128:101
    |
126 |             registry = ModelRegistry(temp_dir)
127 |             
128 |             with pytest.raises(FileNotFoundError, match="Model nonexistent_id not found in registry"):
    |                                                                                                     ^^
129 |                 registry.load_model("nonexistent_id")
    |

W293 [*] Blank line contains whitespace
   --> tests/test_model_registry.py:130:1
    |
128 |             with pytest.raises(FileNotFoundError, match="Model nonexistent_id not found in registry"):
129 |                 registry.load_model("nonexistent_id")
130 |                 
    | ^^^^^^^^^^^^^^^^
131 |     def test_model_not_picklable(self):
132 |         """Test that non-picklable models raise RuntimeError."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_model_registry.py:135:1
    |
133 |         with tempfile.TemporaryDirectory() as temp_dir:
134 |             registry = ModelRegistry(temp_dir)
135 |             
    | ^^^^^^^^^^^^
136 |             # Create a mock object that raises an exception when pickled
137 |             mock_model = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_model_registry.py:138:1
    |
136 |             # Create a mock object that raises an exception when pickled
137 |             mock_model = Mock()
138 |             
    | ^^^^^^^^^^^^
139 |             def pickle_side_effect(*args, **kwargs):
140 |                 raise Exception("Cannot pickle this object")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_model_registry.py:141:1
    |
139 |             def pickle_side_effect(*args, **kwargs):
140 |                 raise Exception("Cannot pickle this object")
141 |             
    | ^^^^^^^^^^^^
142 |             with pytest.raises(RuntimeError, match="Model not picklable"):
143 |                 with tempfile.NamedTemporaryFile():
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_model_registry.py:155:61
    |
153 |                         )
154 |                     finally:
155 |                         pickle_module.dumps = original_dumps
    |                                                             ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_model_registry_roundtrip.py:3:1
  |
1 |   """Test model registry register → latest_for → load_model workflow."""
2 |
3 | / import tempfile
4 | | import pytest
5 | | from sklearn.linear_model import LinearRegression
6 | | import numpy as np
7 | |
8 | | from ai_trading.model_registry import ModelRegistry
  | |___________________________________________________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry_roundtrip.py:15:1
   |
13 |     with tempfile.TemporaryDirectory() as tmpdir:
14 |         registry = ModelRegistry(base_path=tmpdir)
15 |         
   | ^^^^^^^^
16 |         # Create a simple model
17 |         X = np.array([[1, 2], [3, 4], [5, 6]])
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry_roundtrip.py:21:1
   |
19 |         model = LinearRegression()
20 |         model.fit(X, y)
21 |         
   | ^^^^^^^^
22 |         # Register the model
23 |         model_id = registry.register_model(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry_roundtrip.py:31:1
   |
29 |             tags=["test", "linear"]
30 |         )
31 |         
   | ^^^^^^^^
32 |         # Verify registration
33 |         assert model_id is not None
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry_roundtrip.py:36:1
   |
34 |         assert "test_strategy" in model_id
35 |         assert "linear_regression" in model_id
36 |         
   | ^^^^^^^^
37 |         # Test latest_for
38 |         latest_id = registry.latest_for("test_strategy", "linear_regression")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry_roundtrip.py:40:1
   |
38 |         latest_id = registry.latest_for("test_strategy", "linear_regression")
39 |         assert latest_id == model_id
40 |         
   | ^^^^^^^^
41 |         # Test loading
42 |         loaded_model, metadata = registry.load_model(model_id)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry_roundtrip.py:47:1
   |
45 |         assert metadata["dataset_fingerprint"] == "abc123"
46 |         assert metadata["tags"] == ["test", "linear"]
47 |         
   | ^^^^^^^^
48 |         # Test model functionality after loading
49 |         prediction = loaded_model.predict([[7, 8]])
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry_roundtrip.py:51:1
   |
49 |         prediction = loaded_model.predict([[7, 8]])
50 |         assert prediction is not None
51 |         
   | ^^^^^^^^
52 |         # Test dataset fingerprint verification
53 |         loaded_model2, metadata2 = registry.load_model(
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_model_registry_roundtrip.py:54:22
   |
52 |         # Test dataset fingerprint verification
53 |         loaded_model2, metadata2 = registry.load_model(
54 |             model_id, 
   |                      ^
55 |             verify_dataset_hash=True, 
56 |             expected_dataset_fingerprint="abc123"
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_model_registry_roundtrip.py:55:38
   |
53 |         loaded_model2, metadata2 = registry.load_model(
54 |             model_id, 
55 |             verify_dataset_hash=True, 
   |                                      ^
56 |             expected_dataset_fingerprint="abc123"
57 |         )
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry_roundtrip.py:59:1
   |
57 |         )
58 |         assert isinstance(loaded_model2, LinearRegression)
59 |         
   | ^^^^^^^^
60 |         # Test fingerprint mismatch
61 |         with pytest.raises(ValueError, match="Dataset fingerprint mismatch"):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry_roundtrip.py:73:1
   |
71 |     with tempfile.TemporaryDirectory() as tmpdir:
72 |         registry = ModelRegistry(base_path=tmpdir)
73 |         
   | ^^^^^^^^
74 |         # Register multiple models
75 |         model1 = LinearRegression()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry_roundtrip.py:77:1
   |
75 |         model1 = LinearRegression()
76 |         model2 = LinearRegression()
77 |         
   | ^^^^^^^^
78 |         id1 = registry.register_model(model1, "strat1", "linear", metadata={"version": 1})
79 |         id2 = registry.register_model(model2, "strat1", "linear", metadata={"version": 2})
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry_roundtrip.py:80:1
   |
78 |         id1 = registry.register_model(model1, "strat1", "linear", metadata={"version": 1})
79 |         id2 = registry.register_model(model2, "strat1", "linear", metadata={"version": 2})
80 |         
   | ^^^^^^^^
81 |         # Latest should return the most recent
82 |         latest = registry.latest_for("strat1", "linear")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry_roundtrip.py:84:1
   |
82 |         latest = registry.latest_for("strat1", "linear")
83 |         assert latest == id2
84 |         
   | ^^^^^^^^
85 |         # Both models should be loadable
86 |         loaded1, meta1 = registry.load_model(id1)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_model_registry_roundtrip.py:88:1
   |
86 |         loaded1, meta1 = registry.load_model(id1)
87 |         loaded2, meta2 = registry.load_model(id2)
88 |         
   | ^^^^^^^^
89 |         assert meta1["version"] == 1
90 |         assert meta2["version"] == 2
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_model_registry_roundtrip.py:100:1
    |
 98 |         model = LinearRegression()
 99 |         model_id = registry1.register_model(model, "test", "linear")
100 |         
    | ^^^^^^^^
101 |         # Create second registry instance pointing to same directory
102 |         registry2 = ModelRegistry(base_path=tmpdir)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_model_registry_roundtrip.py:103:1
    |
101 |         # Create second registry instance pointing to same directory
102 |         registry2 = ModelRegistry(base_path=tmpdir)
103 |         
    | ^^^^^^^^
104 |         # Should be able to find the model
105 |         latest = registry2.latest_for("test", "linear")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_model_registry_roundtrip.py:107:1
    |
105 |         latest = registry2.latest_for("test", "linear")
106 |         assert latest == model_id
107 |         
    | ^^^^^^^^
108 |         loaded_model, metadata = registry2.load_model(model_id)
109 |         assert isinstance(loaded_model, LinearRegression)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_model_registry_roundtrip.py:116:1
    |
114 |     with tempfile.TemporaryDirectory() as tmpdir:
115 |         registry = ModelRegistry(base_path=tmpdir)
116 |         
    | ^^^^^^^^
117 |         # Test loading non-existent model
118 |         with pytest.raises(FileNotFoundError):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_model_registry_roundtrip.py:120:1
    |
118 |         with pytest.raises(FileNotFoundError):
119 |             registry.load_model("nonexistent-model-id")
120 |         
    | ^^^^^^^^
121 |         # Test latest_for with no matches
122 |         result = registry.latest_for("nonexistent", "strategy")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_model_registry_roundtrip.py:124:1
    |
122 |         result = registry.latest_for("nonexistent", "strategy")
123 |         assert result is None
124 |         
    | ^^^^^^^^
125 |         # Test non-picklable model
126 |         non_picklable = lambda x: x  # lambda is not picklable
    |
help: Remove whitespace from blank line

E731 Do not assign a `lambda` expression, use a `def`
   --> tests/test_model_registry_roundtrip.py:126:9
    |
125 |         # Test non-picklable model
126 |         non_picklable = lambda x: x  # lambda is not picklable
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
127 |         with pytest.raises(RuntimeError, match="Model not picklable"):
128 |             registry.register_model(non_picklable, "test", "lambda")
    |
help: Rewrite `non_picklable` as a `def`

W292 [*] No newline at end of file
   --> tests/test_model_registry_roundtrip.py:128:69
    |
126 |         non_picklable = lambda x: x  # lambda is not picklable
127 |         with pytest.raises(RuntimeError, match="Model not picklable"):
128 |             registry.register_model(non_picklable, "test", "lambda")
    |                                                                     ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_my_fixes.py:4:1
  |
2 |   """Test the specific fixes I implemented for the critical trading bot issues."""
3 |
4 | / import os
5 | | import unittest
6 | | import math
  | |___________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:16:1
   |
14 |         with open("bot_engine.py", 'r') as f:
15 |             content = f.read()
16 |         
   | ^^^^^^^^
17 |         # Should have reduced min_trades from 3 to 2
18 |         self.assertIn('METALEARN_MIN_TRADES", "2"', content)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:19:1
   |
17 |         # Should have reduced min_trades from 3 to 2
18 |         self.assertIn('METALEARN_MIN_TRADES", "2"', content)
19 |         
   | ^^^^^^^^
20 |         # Should have reduced performance threshold from 0.4 to 0.3
21 |         self.assertIn('METALEARN_PERFORMANCE_THRESHOLD", "0.3"', content)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:22:1
   |
20 |         # Should have reduced performance threshold from 0.4 to 0.3
21 |         self.assertIn('METALEARN_PERFORMANCE_THRESHOLD", "0.3"', content)
22 |         
   | ^^^^^^^^
23 |         print("✓ Meta-learning thresholds reduced: min_trades=2, threshold=0.3")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:31:1
   |
29 |             with open(debug_tracker_path, 'r') as f:
30 |                 content = f.read()
31 |             
   | ^^^^^^^^^^^^
32 |             # Should use elif instead of else to prevent double logging
33 |             self.assertIn('elif phase in [ExecutionPhase.SIGNAL_GENERATED', content)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:34:1
   |
32 |             # Should use elif instead of else to prevent double logging
33 |             self.assertIn('elif phase in [ExecutionPhase.SIGNAL_GENERATED', content)
34 |             
   | ^^^^^^^^^^^^
35 |             # Should not have separate 'else:' block that could cause duplication
36 |             duplicate_pattern = 'else:\n                # Log only key phases in normal mode\n                if phase in'
   |
help: Remove whitespace from blank line

E501 Line too long (122 > 100)
  --> tests/test_my_fixes.py:36:101
   |
35 |             # Should not have separate 'else:' block that could cause duplication
36 |             duplicate_pattern = 'else:\n                # Log only key phases in normal mode\n                if phase in'
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
37 |             self.assertNotIn(duplicate_pattern, content)
   |

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:38:1
   |
36 |             duplicate_pattern = 'else:\n                # Log only key phases in normal mode\n                if phase in'
37 |             self.assertNotIn(duplicate_pattern, content)
38 |             
   | ^^^^^^^^^^^^
39 |             print("✓ Duplicate event logging eliminated")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:45:1
   |
43 |         with open("strategy_allocator.py", 'r') as f:
44 |             content = f.read()
45 |         
   | ^^^^^^^^
46 |         # Should use tanh-based normalization
47 |         self.assertIn('math.tanh', content)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:48:1
   |
46 |         # Should use tanh-based normalization
47 |         self.assertIn('math.tanh', content)
48 |         
   | ^^^^^^^^
49 |         # Should log CONFIDENCE_NORMALIZED instead of warning
50 |         self.assertIn('CONFIDENCE_NORMALIZED', content)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:51:1
   |
49 |         # Should log CONFIDENCE_NORMALIZED instead of warning
50 |         self.assertIn('CONFIDENCE_NORMALIZED', content)
51 |         
   | ^^^^^^^^
52 |         # Should preserve original value for logging
53 |         self.assertIn('original_confidence', content)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:54:1
   |
52 |         # Should preserve original value for logging
53 |         self.assertIn('original_confidence', content)
54 |         
   | ^^^^^^^^
55 |         print("✓ Confidence normalization improved with tanh-based algorithm")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:61:1
   |
59 |         with open("bot_engine.py", 'r') as f:
60 |             content = f.read()
61 |         
   | ^^^^^^^^
62 |         # Function should accept symbol parameter
63 |         self.assertIn('def too_many_positions(ctx: BotContext, symbol: Optional[str] = None)', content)
   |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
  --> tests/test_my_fixes.py:63:101
   |
62 |         # Function should accept symbol parameter
63 |         self.assertIn('def too_many_positions(ctx: BotContext, symbol: Optional[str] = None)', content)
   |                                                                                                     ^^^
64 |         
65 |         # Should allow rebalancing for existing symbols
   |

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:64:1
   |
62 |         # Function should accept symbol parameter
63 |         self.assertIn('def too_many_positions(ctx: BotContext, symbol: Optional[str] = None)', content)
64 |         
   | ^^^^^^^^
65 |         # Should allow rebalancing for existing symbols
66 |         self.assertIn('ALLOW_REBALANCING', content)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:68:1
   |
66 |         self.assertIn('ALLOW_REBALANCING', content)
67 |         self.assertIn('existing_symbols', content)
68 |         
   | ^^^^^^^^
69 |         print("✓ Position limit rebalancing implemented")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:75:1
   |
73 |         with open("config.py", 'r') as f:
74 |             content = f.read()
75 |         
   | ^^^^^^^^
76 |         # Spread threshold increased from 0.05 to 0.15
77 |         self.assertIn('LIQUIDITY_SPREAD_THRESHOLD", "0.15"', content)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:78:1
   |
76 |         # Spread threshold increased from 0.05 to 0.15
77 |         self.assertIn('LIQUIDITY_SPREAD_THRESHOLD", "0.15"', content)
78 |         
   | ^^^^^^^^
79 |         # Volatility threshold increased from 0.02 to 0.08
80 |         self.assertIn('LIQUIDITY_VOL_THRESHOLD", "0.08"', content)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:81:1
   |
79 |         # Volatility threshold increased from 0.02 to 0.08
80 |         self.assertIn('LIQUIDITY_VOL_THRESHOLD", "0.08"', content)
81 |         
   | ^^^^^^^^
82 |         print("✓ Liquidity thresholds made less aggressive: spread=15%, vol=8%")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:88:1
   |
86 |         with open("trade_execution.py", 'r') as f:
87 |             content = f.read()
88 |         
   | ^^^^^^^^
89 |         # Should require minimum 3 rows instead of 5
90 |         self.assertIn('len(df) < 3:', content)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:91:1
   |
89 |         # Should require minimum 3 rows instead of 5
90 |         self.assertIn('len(df) < 3:', content)
91 |         
   | ^^^^^^^^
92 |         # Should handle limited data gracefully
93 |         self.assertIn('Limited minute data', content)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:94:1
   |
92 |         # Should handle limited data gracefully
93 |         self.assertIn('Limited minute data', content)
94 |         
   | ^^^^^^^^
95 |         # Should use adaptive calculations
96 |         self.assertIn('min(5, len(df))', content)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_my_fixes.py:97:1
   |
95 |         # Should use adaptive calculations
96 |         self.assertIn('min(5, len(df))', content)
97 |         
   | ^^^^^^^^
98 |         print("✓ Data quality validation improved: min 3 rows, adaptive calculations")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_my_fixes.py:102:1
    |
100 |     def test_confidence_algorithm_correctness(self):
101 |         """Test that the confidence normalization algorithm works correctly."""
102 |         
    | ^^^^^^^^
103 |         def tanh_normalize(confidence):
104 |             """The actual algorithm implemented."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_my_fixes.py:112:1
    |
110 |                 return max(0.01, confidence)
111 |             return confidence
112 |         
    | ^^^^^^^^
113 |         # Test the specific problematic values from the logs
114 |         meta_confidence = 1.8148200636230267
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_my_fixes.py:116:1
    |
114 |         meta_confidence = 1.8148200636230267
115 |         shop_confidence = 3.686892484542545
116 |         
    | ^^^^^^^^
117 |         meta_normalized = tanh_normalize(meta_confidence)
118 |         shop_normalized = tanh_normalize(shop_confidence)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_my_fixes.py:119:1
    |
117 |         meta_normalized = tanh_normalize(meta_confidence)
118 |         shop_normalized = tanh_normalize(shop_confidence)
119 |         
    | ^^^^^^^^
120 |         # Both should be in valid range
121 |         self.assertGreater(meta_normalized, 0.0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_my_fixes.py:125:1
    |
123 |         self.assertGreater(shop_normalized, 0.0)
124 |         self.assertLessEqual(shop_normalized, 1.0)
125 |         
    | ^^^^^^^^
126 |         # Values > 1 should be mapped to [0.5, 1] range
127 |         self.assertGreaterEqual(meta_normalized, 0.5)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_my_fixes.py:129:1
    |
127 | …     self.assertGreaterEqual(meta_normalized, 0.5)
128 | …     self.assertGreaterEqual(shop_normalized, 0.5)
129 | …     
    ^^^^^^^^
130 | …     print(f"✓ Confidence normalization: META {meta_confidence:.3f}→{meta_normalized:.3f}, SHOP {shop_confidence:.3f}→{shop_normaliz…
    |
help: Remove whitespace from blank line

E501 Line too long (144 > 100)
   --> tests/test_my_fixes.py:130:101
    |
128 | …
129 | …
130 | …onfidence:.3f}→{meta_normalized:.3f}, SHOP {shop_confidence:.3f}→{shop_normalized:.3f}")
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
131 | …
132 | …
    |

W293 [*] Blank line contains whitespace
   --> tests/test_my_fixes.py:134:1
    |
132 |     def test_meta_learning_would_activate(self):
133 |         """Test that meta-learning would now activate with reasonable data."""
134 |         
    | ^^^^^^^^
135 |         # Simulate trade data with new thresholds
136 |         signals = ["sma_cross", "rsi_oversold", "momentum"] 
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_my_fixes.py:136:60
    |
135 |         # Simulate trade data with new thresholds
136 |         signals = ["sma_cross", "rsi_oversold", "momentum"] 
    |                                                            ^
137 |         min_trades = 2  # New threshold
138 |         threshold = 0.3  # New threshold
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_my_fixes.py:139:1
    |
137 |         min_trades = 2  # New threshold
138 |         threshold = 0.3  # New threshold
139 |         
    | ^^^^^^^^
140 |         # Create mock trade data - 2 trades per signal with mixed performance
141 |         trade_data = {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_my_fixes.py:147:1
    |
145 |                 {"pnl": -2.0}   # Losing trade
146 |             ]
147 |         
    | ^^^^^^^^
148 |         # Calculate which signals would qualify
149 |         qualified_signals = {}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_my_fixes.py:155:1
    |
153 |                 if win_rate >= threshold:
154 |                     qualified_signals[signal] = win_rate
155 |         
    | ^^^^^^^^
156 |         # With 50% win rate and 0.3 threshold, signals should qualify
157 |         self.assertGreater(len(qualified_signals), 0, "Some signals should qualify with new thresholds")
    |
help: Remove whitespace from blank line

E501 Line too long (104 > 100)
   --> tests/test_my_fixes.py:157:101
    |
156 |         # With 50% win rate and 0.3 threshold, signals should qualify
157 |         self.assertGreater(len(qualified_signals), 0, "Some signals should qualify with new thresholds")
    |                                                                                                     ^^^^
158 |         
159 |         print(f"✓ Meta-learning simulation: {len(qualified_signals)}/{len(signals)} signals would qualify")
    |

W293 [*] Blank line contains whitespace
   --> tests/test_my_fixes.py:158:1
    |
156 |         # With 50% win rate and 0.3 threshold, signals should qualify
157 |         self.assertGreater(len(qualified_signals), 0, "Some signals should qualify with new thresholds")
158 |         
    | ^^^^^^^^
159 |         print(f"✓ Meta-learning simulation: {len(qualified_signals)}/{len(signals)} signals would qualify")
    |
help: Remove whitespace from blank line

E501 Line too long (107 > 100)
   --> tests/test_my_fixes.py:159:101
    |
157 |         self.assertGreater(len(qualified_signals), 0, "Some signals should qualify with new thresholds")
158 |         
159 |         print(f"✓ Meta-learning simulation: {len(qualified_signals)}/{len(signals)} signals would qualify")
    |                                                                                                     ^^^^^^^
    |

W292 [*] No newline at end of file
   --> tests/test_my_fixes.py:163:20
    |
162 | if __name__ == "__main__":
163 |     unittest.main()
    |                    ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_nameerror_integration.py:2:1
  |
1 |   """Integration test to verify the NameError fix for BUY_THRESHOLD"""
2 | / import os
3 | | import sys
4 | | import tempfile
5 | | import subprocess
6 | | from pathlib import Path
  | |________________________^
  |
help: Organize imports

W293 Blank line contains whitespace
  --> tests/test_nameerror_integration.py:11:1
   |
 9 | def test_bot_engine_import_no_nameerror():
10 |     """Test that bot_engine can be imported without NameError for BUY_THRESHOLD.
11 |     
   | ^^^^
12 |     This test creates a controlled environment and tries to import bot_engine,
13 |     specifically checking for the NameError that was occurring before the fix.
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_nameerror_integration.py:15:1
   |
13 |     specifically checking for the NameError that was occurring before the fix.
14 |     """
15 |     
   | ^^^^
16 |     # Create a test script that tries to import bot_engine
17 |     test_script = '''
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_nameerror_integration.py:47:1
   |
45 |     # This should trigger validate_trading_parameters() during import
46 | from ai_trading.core import bot_engine
47 |     
   | ^^^^
48 |     print("SUCCESS: bot_engine imported without NameError")
49 |     exit_code = 0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_nameerror_integration.py:67:1
   |
65 | sys.exit(exit_code)
66 | '''
67 |     
   | ^^^^
68 |     # Write the test script to a temporary file
69 |     with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_nameerror_integration.py:72:1
   |
70 |         f.write(test_script)
71 |         script_path = f.name
72 |     
   | ^^^^
73 |     try:
74 |         # Get the project root directory
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_nameerror_integration.py:76:1
   |
74 |         # Get the project root directory
75 |         project_root = Path(__file__).resolve().parents[1]
76 |         
   | ^^^^^^^^
77 |         # Run the test script in a subprocess with proper PYTHONPATH
78 |         env = os.environ.copy()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_nameerror_integration.py:80:1
   |
78 |         env = os.environ.copy()
79 |         env['PYTHONPATH'] = str(project_root)
80 |         
   | ^^^^^^^^
81 |         try:
82 |             result = subprocess.run(
   |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
  --> tests/test_nameerror_integration.py:87:101
   |
85 |                 text=True,
86 |                 env=env,
87 |                 timeout=15,  # AI-AGENT-REF: Increase timeout to 15 seconds for more realistic import time
   |                                                                                                     ^^^^^^
88 |                 check=True
89 |             )
   |

W293 [*] Blank line contains whitespace
  --> tests/test_nameerror_integration.py:96:1
   |
94 |             print(f"Stderr so far: {e.stderr}")
95 |             assert False, "Subprocess timeout - bot_engine import took longer than 5 seconds"
96 |         
   | ^^^^^^^^
97 |         print(f"Test script output: {result.stdout}")
98 |         if result.stderr:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_nameerror_integration.py:100:1
    |
 98 |         if result.stderr:
 99 |             print(f"Test script stderr: {result.stderr}")
100 |         
    | ^^^^^^^^
101 |         # Check the exit code
102 |         if result.returncode == 1:
    |
help: Remove whitespace from blank line

E501 Line too long (113 > 100)
   --> tests/test_nameerror_integration.py:103:101
    |
101 |         # Check the exit code
102 |         if result.returncode == 1:
103 |             assert False, f"NameError for BUY_THRESHOLD or other trading parameter still occurs: {result.stdout}"
    |                                                                                                     ^^^^^^^^^^^^^
104 |         elif result.returncode == 2:
105 |             assert False, f"Unexpected NameError: {result.stdout}"
    |

W293 [*] Blank line contains whitespace
   --> tests/test_nameerror_integration.py:107:1
    |
105 |             assert False, f"Unexpected NameError: {result.stdout}"
106 |         # exit code 0 means success or expected exception
107 |         
    | ^^^^^^^^
108 |     finally:
109 |         # Clean up the temporary file
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_nameerror_integration.py:115:38
    |
113 | if __name__ == "__main__":
114 |     test_bot_engine_import_no_nameerror()
115 |     print("Integration test passed!")
    |                                      ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_no_direct_getenv.py:2:1
  |
1 |   # tests/test_no_direct_getenv.py
2 | / import os
3 | | import pathlib
4 | | import re
5 | | import pytest
  | |_____________^
6 |
7 |   @pytest.mark.skipif(os.getenv("ENFORCE_SETTINGS_ONLY") not in {"1","true","True"}, reason="Enable after config consolidation PR merges")
  |
help: Organize imports

E501 Line too long (136 > 100)
 --> tests/test_no_direct_getenv.py:7:101
  |
5 | …
6 | …
7 | …") not in {"1","true","True"}, reason="Enable after config consolidation PR merges")
  |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 | …
9 | …1]  # project root
  |

W292 [*] No newline at end of file
  --> tests/test_no_direct_getenv.py:18:78
   |
16 |         if re.search(r"\bos\.getenv\s*\(", text):
17 |             offenders.append(str(p))
18 |     assert not offenders, f"os.getenv found outside settings.py: {offenders}"
   |                                                                              ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_no_legacy_imports.py:1:1
  |
1 | / import importlib.util
2 | | import pytest
  | |_____________^
3 |
4 |   BANNED = [
  |
help: Organize imports

E401 [*] Multiple imports on one line
 --> tests/test_no_raw_requests.py:1:1
  |
1 | import pathlib, re
  | ^^^^^^^^^^^^^^^^^^
  |
help: Split imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_no_raw_requests.py:1:1
  |
1 | import pathlib, re
  | ^^^^^^^^^^^^^^^^^^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_no_root_imports.py:1:1
  |
1 | / import pathlib
2 | | import re
  | |_________^
3 |
4 |   def test_no_root_level_imports_of_migrated_modules():
  |
help: Organize imports

W292 [*] No newline at end of file
  --> tests/test_no_root_imports.py:29:90
   |
27 |                 offenders.append(f"{p}:{pat}")
28 |                 break
29 |     assert not offenders, f"Root imports are no longer supported. Offenders: {offenders}"
   |                                                                                          ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_no_trade_bands.py:1:1
  |
1 | from ai_trading.rebalancer import apply_no_trade_bands
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2 |
3 | def test_no_trade_bands_suppresses_small_moves():
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_no_trade_bands.py:27:1
   |
25 |     cur = {"AAPL": 0.20, "MSFT": 0.20}
26 |     tgt = {"AAPL": 0.2030, "MSFT": 0.1970}  # deltas 30 bps
27 |     
   | ^^^^
28 |     # With 25 bps threshold, moves should be allowed
29 |     out = apply_no_trade_bands(cur, tgt, band_bps=25.0)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_no_trade_bands.py:32:1
   |
30 |     assert out["AAPL"] == tgt["AAPL"]
31 |     assert out["MSFT"] == tgt["MSFT"]
32 |     
   | ^^^^
33 |     # With 50 bps threshold, moves should be suppressed
34 |     out = apply_no_trade_bands(cur, tgt, band_bps=50.0)
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_no_trade_bands.py:36:38
   |
34 |     out = apply_no_trade_bands(cur, tgt, band_bps=50.0)
35 |     assert out["AAPL"] == cur["AAPL"]
36 |     assert out["MSFT"] == cur["MSFT"]
   |                                      ^
   |
help: Add trailing newline

W293 [*] Blank line contains whitespace
  --> tests/test_package_first_smoke.py:11:1
   |
 9 |     # Test that modules can be imported from the package
10 |     import importlib
11 |     
   | ^^^^
12 |     # Test each moved module can be imported from ai_trading
13 |     modules = ["signals", "data_fetcher", "trade_execution", "indicators", "pipeline", "portfolio", "rebalancer"]
   |
help: Remove whitespace from blank line

E501 Line too long (113 > 100)
  --> tests/test_package_first_smoke.py:13:101
   |
12 |     # Test each moved module can be imported from ai_trading
13 |     modules = ["signals", "data_fetcher", "trade_execution", "indicators", "pipeline", "portfolio", "rebalancer"]
   |                                                                                                     ^^^^^^^^^^^^^
14 |     for module_name in modules:
15 |         pkg_module = importlib.import_module(f"ai_trading.{module_name}")
   |

W293 [*] Blank line contains whitespace
  --> tests/test_package_first_smoke.py:17:1
   |
15 |         pkg_module = importlib.import_module(f"ai_trading.{module_name}")
16 |         assert hasattr(pkg_module, "__dict__")
17 |         
   | ^^^^^^^^
18 | def test_ai_trading_init_exports():
19 |     # Test that ai_trading.__init__ properly exports the modules
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_package_first_smoke.py:21:1
   |
19 |     # Test that ai_trading.__init__ properly exports the modules
20 |     import ai_trading
21 |     
   | ^^^^
22 |     modules = ["signals", "data_fetcher", "trade_execution", "indicators", "pipeline", "portfolio", "rebalancer"]
23 |     for module_name in modules:
   |
help: Remove whitespace from blank line

E501 Line too long (113 > 100)
  --> tests/test_package_first_smoke.py:22:101
   |
20 |     import ai_trading
21 |     
22 |     modules = ["signals", "data_fetcher", "trade_execution", "indicators", "pipeline", "portfolio", "rebalancer"]
   |                                                                                                     ^^^^^^^^^^^^^
23 |     for module_name in modules:
24 |         assert hasattr(ai_trading, module_name)
   |

W292 [*] No newline at end of file
  --> tests/test_package_first_smoke.py:24:48
   |
22 |     modules = ["signals", "data_fetcher", "trade_execution", "indicators", "pipeline", "portfolio", "rebalancer"]
23 |     for module_name in modules:
24 |         assert hasattr(ai_trading, module_name)
   |                                                ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_parallel_speed.py:1:1
  |
1 | / import time
2 | | import pandas as pd
3 | | from ai_trading import signals
  | |______________________________^
4 |
5 |   def test_parallel_vs_serial_prep_speed():
  |
help: Organize imports

E501 Line too long (113 > 100)
  --> tests/test_parallel_speed.py:36:101
   |
34 |     # The test should pass even if calculations fail, as it's measuring speed/structure
35 |     # In real environment with pandas, this would measure actual performance
36 |     assert duration_parallel < duration_serial * 2.5 or duration_serial < 0.1  # Allow pass if very fast (mocked)
   |                                                                                                     ^^^^^^^^^^^^^
   |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_parameter_optimization.py:8:1
   |
 6 |   """
 7 |
 8 | / import pytest
 9 | | import sys
10 | | import os
   | |_________^
11 |
12 |   # Add the project root to Python path for imports
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_optimization.py:18:1
   |
16 |     """Test that Kelly parameters are optimized correctly."""
17 |     from ai_trading.core.constants import KELLY_PARAMETERS
18 |     
   | ^^^^
19 |     # Verify optimized Kelly parameters
20 |     assert KELLY_PARAMETERS["MAX_KELLY_FRACTION"] == 0.15, f"Expected 0.15, got {KELLY_PARAMETERS['MAX_KELLY_FRACTION']}"
   |
help: Remove whitespace from blank line

E501 Line too long (121 > 100)
  --> tests/test_parameter_optimization.py:20:101
   |
19 |     # Verify optimized Kelly parameters
20 |     assert KELLY_PARAMETERS["MAX_KELLY_FRACTION"] == 0.15, f"Expected 0.15, got {KELLY_PARAMETERS['MAX_KELLY_FRACTION']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
21 |     assert KELLY_PARAMETERS["MIN_SAMPLE_SIZE"] == 20, f"Expected 20, got {KELLY_PARAMETERS['MIN_SAMPLE_SIZE']}"
22 |     assert KELLY_PARAMETERS["CONFIDENCE_LEVEL"] == 0.90, f"Expected 0.90, got {KELLY_PARAMETERS['CONFIDENCE_LEVEL']}"
   |

E501 Line too long (111 > 100)
  --> tests/test_parameter_optimization.py:21:101
   |
19 |     # Verify optimized Kelly parameters
20 |     assert KELLY_PARAMETERS["MAX_KELLY_FRACTION"] == 0.15, f"Expected 0.15, got {KELLY_PARAMETERS['MAX_KELLY_FRACTION']}"
21 |     assert KELLY_PARAMETERS["MIN_SAMPLE_SIZE"] == 20, f"Expected 20, got {KELLY_PARAMETERS['MIN_SAMPLE_SIZE']}"
   |                                                                                                     ^^^^^^^^^^^
22 |     assert KELLY_PARAMETERS["CONFIDENCE_LEVEL"] == 0.90, f"Expected 0.90, got {KELLY_PARAMETERS['CONFIDENCE_LEVEL']}"
   |

E501 Line too long (117 > 100)
  --> tests/test_parameter_optimization.py:22:101
   |
20 |     assert KELLY_PARAMETERS["MAX_KELLY_FRACTION"] == 0.15, f"Expected 0.15, got {KELLY_PARAMETERS['MAX_KELLY_FRACTION']}"
21 |     assert KELLY_PARAMETERS["MIN_SAMPLE_SIZE"] == 20, f"Expected 20, got {KELLY_PARAMETERS['MIN_SAMPLE_SIZE']}"
22 |     assert KELLY_PARAMETERS["CONFIDENCE_LEVEL"] == 0.90, f"Expected 0.90, got {KELLY_PARAMETERS['CONFIDENCE_LEVEL']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^
23 |     
24 |     # Ensure parameters remain within safe bounds
   |

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_optimization.py:23:1
   |
21 |     assert KELLY_PARAMETERS["MIN_SAMPLE_SIZE"] == 20, f"Expected 20, got {KELLY_PARAMETERS['MIN_SAMPLE_SIZE']}"
22 |     assert KELLY_PARAMETERS["CONFIDENCE_LEVEL"] == 0.90, f"Expected 0.90, got {KELLY_PARAMETERS['CONFIDENCE_LEVEL']}"
23 |     
   | ^^^^
24 |     # Ensure parameters remain within safe bounds
25 |     assert 0.05 <= KELLY_PARAMETERS["MAX_KELLY_FRACTION"] <= 0.50, "Kelly fraction outside safe bounds"
   |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
  --> tests/test_parameter_optimization.py:25:101
   |
24 |     # Ensure parameters remain within safe bounds
25 |     assert 0.05 <= KELLY_PARAMETERS["MAX_KELLY_FRACTION"] <= 0.50, "Kelly fraction outside safe bounds"
   |                                                                                                     ^^^
26 |     assert 10 <= KELLY_PARAMETERS["MIN_SAMPLE_SIZE"] <= 100, "Sample size outside safe bounds"
27 |     assert 0.80 <= KELLY_PARAMETERS["CONFIDENCE_LEVEL"] <= 0.99, "Confidence level outside safe bounds"
   |

E501 Line too long (103 > 100)
  --> tests/test_parameter_optimization.py:27:101
   |
25 |     assert 0.05 <= KELLY_PARAMETERS["MAX_KELLY_FRACTION"] <= 0.50, "Kelly fraction outside safe bounds"
26 |     assert 10 <= KELLY_PARAMETERS["MIN_SAMPLE_SIZE"] <= 100, "Sample size outside safe bounds"
27 |     assert 0.80 <= KELLY_PARAMETERS["CONFIDENCE_LEVEL"] <= 0.99, "Confidence level outside safe bounds"
   |                                                                                                     ^^^
   |

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_optimization.py:33:1
   |
31 |     """Test that risk parameters are optimized correctly."""
32 |     from ai_trading.core.constants import RISK_PARAMETERS
33 |     
   | ^^^^
34 |     # Verify optimized risk parameters
35 |     assert RISK_PARAMETERS["MAX_PORTFOLIO_RISK"] == 0.025, f"Expected 0.025, got {RISK_PARAMETERS['MAX_PORTFOLIO_RISK']}"
   |
help: Remove whitespace from blank line

E501 Line too long (121 > 100)
  --> tests/test_parameter_optimization.py:35:101
   |
34 |     # Verify optimized risk parameters
35 |     assert RISK_PARAMETERS["MAX_PORTFOLIO_RISK"] == 0.025, f"Expected 0.025, got {RISK_PARAMETERS['MAX_PORTFOLIO_RISK']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
36 |     assert RISK_PARAMETERS["MAX_POSITION_SIZE"] == 0.25, f"Expected 0.25, got {RISK_PARAMETERS['MAX_POSITION_SIZE']}"
37 |     assert RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] == 1.8, f"Expected 1.8, got {RISK_PARAMETERS['STOP_LOSS_MULTIPLIER']}"
   |

E501 Line too long (117 > 100)
  --> tests/test_parameter_optimization.py:36:101
   |
34 |     # Verify optimized risk parameters
35 |     assert RISK_PARAMETERS["MAX_PORTFOLIO_RISK"] == 0.025, f"Expected 0.025, got {RISK_PARAMETERS['MAX_PORTFOLIO_RISK']}"
36 |     assert RISK_PARAMETERS["MAX_POSITION_SIZE"] == 0.25, f"Expected 0.25, got {RISK_PARAMETERS['MAX_POSITION_SIZE']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^
37 |     assert RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] == 1.8, f"Expected 1.8, got {RISK_PARAMETERS['STOP_LOSS_MULTIPLIER']}"
38 |     assert RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"] == 2.5, f"Expected 2.5, got {RISK_PARAMETERS['TAKE_PROFIT_MULTIPLIER']}"
   |

E501 Line too long (121 > 100)
  --> tests/test_parameter_optimization.py:37:101
   |
35 |     assert RISK_PARAMETERS["MAX_PORTFOLIO_RISK"] == 0.025, f"Expected 0.025, got {RISK_PARAMETERS['MAX_PORTFOLIO_RISK']}"
36 |     assert RISK_PARAMETERS["MAX_POSITION_SIZE"] == 0.25, f"Expected 0.25, got {RISK_PARAMETERS['MAX_POSITION_SIZE']}"
37 |     assert RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] == 1.8, f"Expected 1.8, got {RISK_PARAMETERS['STOP_LOSS_MULTIPLIER']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
38 |     assert RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"] == 2.5, f"Expected 2.5, got {RISK_PARAMETERS['TAKE_PROFIT_MULTIPLIER']}"
39 |     assert RISK_PARAMETERS["MAX_CORRELATION_EXPOSURE"] == 0.15, f"Expected 0.15, got {RISK_PARAMETERS['MAX_CORRELATION_EXPOSURE']}"
   |

E501 Line too long (125 > 100)
  --> tests/test_parameter_optimization.py:38:101
   |
36 |     assert RISK_PARAMETERS["MAX_POSITION_SIZE"] == 0.25, f"Expected 0.25, got {RISK_PARAMETERS['MAX_POSITION_SIZE']}"
37 |     assert RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] == 1.8, f"Expected 1.8, got {RISK_PARAMETERS['STOP_LOSS_MULTIPLIER']}"
38 |     assert RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"] == 2.5, f"Expected 2.5, got {RISK_PARAMETERS['TAKE_PROFIT_MULTIPLIER']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
39 |     assert RISK_PARAMETERS["MAX_CORRELATION_EXPOSURE"] == 0.15, f"Expected 0.15, got {RISK_PARAMETERS['MAX_CORRELATION_EXPOSURE']}"
   |

E501 Line too long (131 > 100)
  --> tests/test_parameter_optimization.py:39:101
   |
37 |     assert RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] == 1.8, f"Expected 1.8, got {RISK_PARAMETERS['STOP_LOSS_MULTIPLIER']}"
38 |     assert RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"] == 2.5, f"Expected 2.5, got {RISK_PARAMETERS['TAKE_PROFIT_MULTIPLIER']}"
39 |     assert RISK_PARAMETERS["MAX_CORRELATION_EXPOSURE"] == 0.15, f"Expected 0.15, got {RISK_PARAMETERS['MAX_CORRELATION_EXPOSURE']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
40 |     
41 |     # Ensure parameters remain within safe bounds
   |

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_optimization.py:40:1
   |
38 |     assert RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"] == 2.5, f"Expected 2.5, got {RISK_PARAMETERS['TAKE_PROFIT_MULTIPLIER']}"
39 |     assert RISK_PARAMETERS["MAX_CORRELATION_EXPOSURE"] == 0.15, f"Expected 0.15, got {RISK_PARAMETERS['MAX_CORRELATION_EXPOSURE']}"
40 |     
   | ^^^^
41 |     # Ensure parameters remain within safe bounds
42 |     assert 0.01 <= RISK_PARAMETERS["MAX_PORTFOLIO_RISK"] <= 0.05, "Portfolio risk outside safe bounds"
   |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
  --> tests/test_parameter_optimization.py:42:101
   |
41 |     # Ensure parameters remain within safe bounds
42 |     assert 0.01 <= RISK_PARAMETERS["MAX_PORTFOLIO_RISK"] <= 0.05, "Portfolio risk outside safe bounds"
   |                                                                                                     ^^
43 |     assert 0.05 <= RISK_PARAMETERS["MAX_POSITION_SIZE"] <= 0.30, "Position size outside safe bounds"
44 |     assert 1.0 <= RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] <= 3.0, "Stop loss multiplier outside safe bounds"
   |

E501 Line too long (108 > 100)
  --> tests/test_parameter_optimization.py:44:101
   |
42 |     assert 0.01 <= RISK_PARAMETERS["MAX_PORTFOLIO_RISK"] <= 0.05, "Portfolio risk outside safe bounds"
43 |     assert 0.05 <= RISK_PARAMETERS["MAX_POSITION_SIZE"] <= 0.30, "Position size outside safe bounds"
44 |     assert 1.0 <= RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] <= 3.0, "Stop loss multiplier outside safe bounds"
   |                                                                                                     ^^^^^^^^
45 |     assert 1.5 <= RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"] <= 5.0, "Take profit multiplier outside safe bounds"
46 |     assert 0.05 <= RISK_PARAMETERS["MAX_CORRELATION_EXPOSURE"] <= 0.30, "Correlation exposure outside safe bounds"
   |

E501 Line too long (112 > 100)
  --> tests/test_parameter_optimization.py:45:101
   |
43 |     assert 0.05 <= RISK_PARAMETERS["MAX_POSITION_SIZE"] <= 0.30, "Position size outside safe bounds"
44 |     assert 1.0 <= RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] <= 3.0, "Stop loss multiplier outside safe bounds"
45 |     assert 1.5 <= RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"] <= 5.0, "Take profit multiplier outside safe bounds"
   |                                                                                                     ^^^^^^^^^^^^
46 |     assert 0.05 <= RISK_PARAMETERS["MAX_CORRELATION_EXPOSURE"] <= 0.30, "Correlation exposure outside safe bounds"
   |

E501 Line too long (114 > 100)
  --> tests/test_parameter_optimization.py:46:101
   |
44 |     assert 1.0 <= RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] <= 3.0, "Stop loss multiplier outside safe bounds"
45 |     assert 1.5 <= RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"] <= 5.0, "Take profit multiplier outside safe bounds"
46 |     assert 0.05 <= RISK_PARAMETERS["MAX_CORRELATION_EXPOSURE"] <= 0.30, "Correlation exposure outside safe bounds"
   |                                                                                                     ^^^^^^^^^^^^^^
   |

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_optimization.py:52:1
   |
50 |     """Test that execution parameters are optimized correctly."""
51 |     from ai_trading.core.constants import EXECUTION_PARAMETERS
52 |     
   | ^^^^
53 |     # Verify optimized execution parameters
54 |     assert EXECUTION_PARAMETERS["PARTICIPATION_RATE"] == 0.15, f"Expected 0.15, got {EXECUTION_PARAMETERS['PARTICIPATION_RATE']}"
   |
help: Remove whitespace from blank line

E501 Line too long (129 > 100)
  --> tests/test_parameter_optimization.py:54:101
   |
53 |     # Verify optimized execution parameters
54 |     assert EXECUTION_PARAMETERS["PARTICIPATION_RATE"] == 0.15, f"Expected 0.15, got {EXECUTION_PARAMETERS['PARTICIPATION_RATE']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
55 |     assert EXECUTION_PARAMETERS["MAX_SLIPPAGE_BPS"] == 15, f"Expected 15, got {EXECUTION_PARAMETERS['MAX_SLIPPAGE_BPS']}"
56 |     assert EXECUTION_PARAMETERS["ORDER_TIMEOUT_SECONDS"] == 180, f"Expected 180, got {EXECUTION_PARAMETERS['ORDER_TIMEOUT_SECONDS']}"
   |

E501 Line too long (121 > 100)
  --> tests/test_parameter_optimization.py:55:101
   |
53 |     # Verify optimized execution parameters
54 |     assert EXECUTION_PARAMETERS["PARTICIPATION_RATE"] == 0.15, f"Expected 0.15, got {EXECUTION_PARAMETERS['PARTICIPATION_RATE']}"
55 |     assert EXECUTION_PARAMETERS["MAX_SLIPPAGE_BPS"] == 15, f"Expected 15, got {EXECUTION_PARAMETERS['MAX_SLIPPAGE_BPS']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
56 |     assert EXECUTION_PARAMETERS["ORDER_TIMEOUT_SECONDS"] == 180, f"Expected 180, got {EXECUTION_PARAMETERS['ORDER_TIMEOUT_SECONDS']}"
   |

E501 Line too long (133 > 100)
  --> tests/test_parameter_optimization.py:56:101
   |
54 |     assert EXECUTION_PARAMETERS["PARTICIPATION_RATE"] == 0.15, f"Expected 0.15, got {EXECUTION_PARAMETERS['PARTICIPATION_RATE']}"
55 |     assert EXECUTION_PARAMETERS["MAX_SLIPPAGE_BPS"] == 15, f"Expected 15, got {EXECUTION_PARAMETERS['MAX_SLIPPAGE_BPS']}"
56 |     assert EXECUTION_PARAMETERS["ORDER_TIMEOUT_SECONDS"] == 180, f"Expected 180, got {EXECUTION_PARAMETERS['ORDER_TIMEOUT_SECONDS']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
57 |     
58 |     # Ensure parameters remain within safe bounds
   |

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_optimization.py:57:1
   |
55 |     assert EXECUTION_PARAMETERS["MAX_SLIPPAGE_BPS"] == 15, f"Expected 15, got {EXECUTION_PARAMETERS['MAX_SLIPPAGE_BPS']}"
56 |     assert EXECUTION_PARAMETERS["ORDER_TIMEOUT_SECONDS"] == 180, f"Expected 180, got {EXECUTION_PARAMETERS['ORDER_TIMEOUT_SECONDS']}"
57 |     
   | ^^^^
58 |     # Ensure parameters remain within safe bounds
59 |     assert 0.05 <= EXECUTION_PARAMETERS["PARTICIPATION_RATE"] <= 0.25, "Participation rate outside safe bounds"
   |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
  --> tests/test_parameter_optimization.py:59:101
   |
58 |     # Ensure parameters remain within safe bounds
59 |     assert 0.05 <= EXECUTION_PARAMETERS["PARTICIPATION_RATE"] <= 0.25, "Participation rate outside safe bounds"
   |                                                                                                     ^^^^^^^^^^^
60 |     assert 5 <= EXECUTION_PARAMETERS["MAX_SLIPPAGE_BPS"] <= 50, "Slippage outside safe bounds"
61 |     assert 60 <= EXECUTION_PARAMETERS["ORDER_TIMEOUT_SECONDS"] <= 600, "Order timeout outside safe bounds"
   |

E501 Line too long (106 > 100)
  --> tests/test_parameter_optimization.py:61:101
   |
59 |     assert 0.05 <= EXECUTION_PARAMETERS["PARTICIPATION_RATE"] <= 0.25, "Participation rate outside safe bounds"
60 |     assert 5 <= EXECUTION_PARAMETERS["MAX_SLIPPAGE_BPS"] <= 50, "Slippage outside safe bounds"
61 |     assert 60 <= EXECUTION_PARAMETERS["ORDER_TIMEOUT_SECONDS"] <= 600, "Order timeout outside safe bounds"
   |                                                                                                     ^^^^^^
   |

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_optimization.py:67:1
   |
65 |     """Test that performance thresholds are optimized correctly."""
66 |     from ai_trading.core.constants import PERFORMANCE_THRESHOLDS
67 |     
   | ^^^^
68 |     # Verify optimized performance thresholds
69 |     assert PERFORMANCE_THRESHOLDS["MIN_SHARPE_RATIO"] == 1.2, f"Expected 1.2, got {PERFORMANCE_THRESHOLDS['MIN_SHARPE_RATIO']}"
   |
help: Remove whitespace from blank line

E501 Line too long (127 > 100)
  --> tests/test_parameter_optimization.py:69:101
   |
68 |     # Verify optimized performance thresholds
69 |     assert PERFORMANCE_THRESHOLDS["MIN_SHARPE_RATIO"] == 1.2, f"Expected 1.2, got {PERFORMANCE_THRESHOLDS['MIN_SHARPE_RATIO']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
70 |     assert PERFORMANCE_THRESHOLDS["MAX_DRAWDOWN"] == 0.15, f"Expected 0.15, got {PERFORMANCE_THRESHOLDS['MAX_DRAWDOWN']}"
71 |     assert PERFORMANCE_THRESHOLDS["MIN_WIN_RATE"] == 0.48, f"Expected 0.48, got {PERFORMANCE_THRESHOLDS['MIN_WIN_RATE']}"
   |

E501 Line too long (121 > 100)
  --> tests/test_parameter_optimization.py:70:101
   |
68 |     # Verify optimized performance thresholds
69 |     assert PERFORMANCE_THRESHOLDS["MIN_SHARPE_RATIO"] == 1.2, f"Expected 1.2, got {PERFORMANCE_THRESHOLDS['MIN_SHARPE_RATIO']}"
70 |     assert PERFORMANCE_THRESHOLDS["MAX_DRAWDOWN"] == 0.15, f"Expected 0.15, got {PERFORMANCE_THRESHOLDS['MAX_DRAWDOWN']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
71 |     assert PERFORMANCE_THRESHOLDS["MIN_WIN_RATE"] == 0.48, f"Expected 0.48, got {PERFORMANCE_THRESHOLDS['MIN_WIN_RATE']}"
   |

E501 Line too long (121 > 100)
  --> tests/test_parameter_optimization.py:71:101
   |
69 |     assert PERFORMANCE_THRESHOLDS["MIN_SHARPE_RATIO"] == 1.2, f"Expected 1.2, got {PERFORMANCE_THRESHOLDS['MIN_SHARPE_RATIO']}"
70 |     assert PERFORMANCE_THRESHOLDS["MAX_DRAWDOWN"] == 0.15, f"Expected 0.15, got {PERFORMANCE_THRESHOLDS['MAX_DRAWDOWN']}"
71 |     assert PERFORMANCE_THRESHOLDS["MIN_WIN_RATE"] == 0.48, f"Expected 0.48, got {PERFORMANCE_THRESHOLDS['MIN_WIN_RATE']}"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
72 |     
73 |     # Ensure parameters remain within safe bounds
   |

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_optimization.py:72:1
   |
70 |     assert PERFORMANCE_THRESHOLDS["MAX_DRAWDOWN"] == 0.15, f"Expected 0.15, got {PERFORMANCE_THRESHOLDS['MAX_DRAWDOWN']}"
71 |     assert PERFORMANCE_THRESHOLDS["MIN_WIN_RATE"] == 0.48, f"Expected 0.48, got {PERFORMANCE_THRESHOLDS['MIN_WIN_RATE']}"
72 |     
   | ^^^^
73 |     # Ensure parameters remain within safe bounds
74 |     assert 0.5 <= PERFORMANCE_THRESHOLDS["MIN_SHARPE_RATIO"] <= 2.0, "Sharpe ratio outside safe bounds"
   |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
  --> tests/test_parameter_optimization.py:74:101
   |
73 |     # Ensure parameters remain within safe bounds
74 |     assert 0.5 <= PERFORMANCE_THRESHOLDS["MIN_SHARPE_RATIO"] <= 2.0, "Sharpe ratio outside safe bounds"
   |                                                                                                     ^^^
75 |     assert 0.05 <= PERFORMANCE_THRESHOLDS["MAX_DRAWDOWN"] <= 0.30, "Drawdown outside safe bounds"
76 |     assert 0.30 <= PERFORMANCE_THRESHOLDS["MIN_WIN_RATE"] <= 0.70, "Win rate outside safe bounds"
   |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_parameter_optimization.py:81:5
   |
79 | def test_parameter_consistency():
80 |     """Test that optimized parameters maintain internal consistency."""
81 |     from ai_trading.core.constants import RISK_PARAMETERS, PERFORMANCE_THRESHOLDS
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |     
83 |     # Stop loss should be lower than take profit
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_optimization.py:82:1
   |
80 |     """Test that optimized parameters maintain internal consistency."""
81 |     from ai_trading.core.constants import RISK_PARAMETERS, PERFORMANCE_THRESHOLDS
82 |     
   | ^^^^
83 |     # Stop loss should be lower than take profit
84 |     assert RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] < RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"], \
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_optimization.py:86:1
   |
84 |     assert RISK_PARAMETERS["STOP_LOSS_MULTIPLIER"] < RISK_PARAMETERS["TAKE_PROFIT_MULTIPLIER"], \
85 |         "Stop loss should be lower than take profit"
86 |     
   | ^^^^
87 |     # Drawdown should be reasonable compared to position size
88 |     max_single_position_loss = RISK_PARAMETERS["MAX_POSITION_SIZE"] * 0.20  # Assume 20% worst case
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_parameter_optimization.py:96:9
   |
94 |       """Test that adaptive sizing uses optimized parameters."""
95 |       try:
96 | /         from ai_trading.risk.adaptive_sizing import AdaptivePositionSizer
97 | |         from ai_trading.core.enums import RiskLevel
   | |___________________________________________________^
98 |           
99 |           # Test that sizer can be instantiated with optimized parameters
   |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_optimization.py:98:1
    |
 96 |         from ai_trading.risk.adaptive_sizing import AdaptivePositionSizer
 97 |         from ai_trading.core.enums import RiskLevel
 98 |         
    | ^^^^^^^^
 99 |         # Test that sizer can be instantiated with optimized parameters
100 |         sizer = AdaptivePositionSizer(RiskLevel.MODERATE)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_optimization.py:101:1
    |
 99 |         # Test that sizer can be instantiated with optimized parameters
100 |         sizer = AdaptivePositionSizer(RiskLevel.MODERATE)
101 |         
    | ^^^^^^^^
102 |         # Verify regime multipliers are within reasonable bounds
103 |         for regime, multiplier in sizer.regime_multipliers.items():
    |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
   --> tests/test_parameter_optimization.py:104:101
    |
102 |         # Verify regime multipliers are within reasonable bounds
103 |         for regime, multiplier in sizer.regime_multipliers.items():
104 |             assert 0.1 <= multiplier <= 2.0, f"Regime multiplier {multiplier} for {regime} outside safe bounds"
    |                                                                                                     ^^^^^^^^^^^
105 |         
106 |         # Verify volatility adjustments are within reasonable bounds  
    |

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_optimization.py:105:1
    |
103 |         for regime, multiplier in sizer.regime_multipliers.items():
104 |             assert 0.1 <= multiplier <= 2.0, f"Regime multiplier {multiplier} for {regime} outside safe bounds"
105 |         
    | ^^^^^^^^
106 |         # Verify volatility adjustments are within reasonable bounds  
107 |         for vol_regime, adjustment in sizer.volatility_adjustments.items():
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_parameter_optimization.py:106:69
    |
104 |             assert 0.1 <= multiplier <= 2.0, f"Regime multiplier {multiplier} for {regime} outside safe bounds"
105 |         
106 |         # Verify volatility adjustments are within reasonable bounds  
    |                                                                     ^^
107 |         for vol_regime, adjustment in sizer.volatility_adjustments.items():
108 |             assert 0.2 <= adjustment <= 2.0, f"Volatility adjustment {adjustment} for {vol_regime} outside safe bounds"
    |
help: Remove trailing whitespace

E501 Line too long (119 > 100)
   --> tests/test_parameter_optimization.py:108:101
    |
106 |         # Verify volatility adjustments are within reasonable bounds  
107 |         for vol_regime, adjustment in sizer.volatility_adjustments.items():
108 |             assert 0.2 <= adjustment <= 2.0, f"Volatility adjustment {adjustment} for {vol_regime} outside safe bounds"
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^
109 |             
110 |     except ImportError as e:
    |

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_optimization.py:109:1
    |
107 |         for vol_regime, adjustment in sizer.volatility_adjustments.items():
108 |             assert 0.2 <= adjustment <= 2.0, f"Volatility adjustment {adjustment} for {vol_regime} outside safe bounds"
109 |             
    | ^^^^^^^^^^^^
110 |     except ImportError as e:
111 |         # Skip test if dependencies not available
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_optimization.py:120:1
    |
118 |         # Test VWAP participation rate
119 |         from ai_trading.execution.algorithms import VWAPExecutor
120 |         
    | ^^^^^^^^
121 |         # Mock order manager for testing
122 |         vwap = VWAPExecutor(MockOrderManager())
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_optimization.py:123:1
    |
121 |         # Mock order manager for testing
122 |         vwap = VWAPExecutor(MockOrderManager())
123 |         
    | ^^^^^^^^
124 |         # Verify optimized participation rate
125 |         assert vwap.participation_rate == 0.15, f"Expected 0.15, got {vwap.participation_rate}"
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> tests/test_parameter_optimization.py:126:101
    |
124 |         # Verify optimized participation rate
125 |         assert vwap.participation_rate == 0.15, f"Expected 0.15, got {vwap.participation_rate}"
126 |         assert 0.05 <= vwap.participation_rate <= 0.30, "VWAP participation rate outside safe bounds"
    |                                                                                                     ^
127 |         
128 |     except ImportError as e:
    |

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_optimization.py:127:1
    |
125 |         assert vwap.participation_rate == 0.15, f"Expected 0.15, got {vwap.participation_rate}"
126 |         assert 0.05 <= vwap.participation_rate <= 0.30, "VWAP participation rate outside safe bounds"
127 |         
    | ^^^^^^^^
128 |     except ImportError as e:
129 |         # Skip test if dependencies not available
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_optimization.py:136:1
    |
134 |     """Test that TRADING_CONSTANTS dictionary maintains backward compatibility."""
135 |     from ai_trading.core.constants import TRADING_CONSTANTS
136 |     
    | ^^^^
137 |     # Verify all expected sections exist
138 |     required_sections = [
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_parameter_optimization.py:139:63
    |
137 |     # Verify all expected sections exist
138 |     required_sections = [
139 |         "MARKET_HOURS", "RISK_PARAMETERS", "KELLY_PARAMETERS", 
    |                                                               ^
140 |         "EXECUTION_PARAMETERS", "DATA_PARAMETERS", "DATABASE_PARAMETERS", 
141 |         "PERFORMANCE_THRESHOLDS", "SYSTEM_LIMITS"
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_parameter_optimization.py:140:74
    |
138 |     required_sections = [
139 |         "MARKET_HOURS", "RISK_PARAMETERS", "KELLY_PARAMETERS", 
140 |         "EXECUTION_PARAMETERS", "DATA_PARAMETERS", "DATABASE_PARAMETERS", 
    |                                                                          ^
141 |         "PERFORMANCE_THRESHOLDS", "SYSTEM_LIMITS"
142 |     ]
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_optimization.py:143:1
    |
141 |         "PERFORMANCE_THRESHOLDS", "SYSTEM_LIMITS"
142 |     ]
143 |     
    | ^^^^
144 |     for section in required_sections:
145 |         assert section in TRADING_CONSTANTS, f"Missing required section: {section}"
    |
help: Remove whitespace from blank line

E501 Line too long (104 > 100)
   --> tests/test_parameter_optimization.py:146:101
    |
144 |     for section in required_sections:
145 |         assert section in TRADING_CONSTANTS, f"Missing required section: {section}"
146 |         assert isinstance(TRADING_CONSTANTS[section], dict), f"Section {section} should be a dictionary"
    |                                                                                                     ^^^^
    |

W292 [*] No newline at end of file
   --> tests/test_parameter_optimization.py:151:34
    |
149 | if __name__ == "__main__":
150 |     # Run tests directly for validation
151 |     pytest.main([__file__, "-v"])
    |                                  ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_parameter_validation.py:8:1
   |
 6 |   """
 7 |
 8 | / import pytest
 9 | | import sys
10 | | import os
   | |_________^
11 |
12 |   # Add the project root to Python path for imports
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:19:1
   |
17 |     try:
18 |         from ai_trading.core.parameter_validator import ParameterValidator
19 |         
   | ^^^^^^^^
20 |         validator = ParameterValidator()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:21:1
   |
20 |         validator = ParameterValidator()
21 |         
   | ^^^^^^^^
22 |         # Check that safety bounds are defined
23 |         assert len(validator.safety_bounds) > 0, "Safety bounds should be defined"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:24:1
   |
22 |         # Check that safety bounds are defined
23 |         assert len(validator.safety_bounds) > 0, "Safety bounds should be defined"
24 |         
   | ^^^^^^^^
25 |         # Check specific bounds exist
26 |         required_bounds = [
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:31:1
   |
29 |             "MIN_SHARPE_RATIO", "MAX_DRAWDOWN"
30 |         ]
31 |         
   | ^^^^^^^^
32 |         for bound in required_bounds:
33 |             assert bound in validator.safety_bounds, f"Missing safety bound: {bound}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:36:1
   |
34 |             min_val, max_val = validator.safety_bounds[bound]
35 |             assert min_val < max_val, f"Invalid bound range for {bound}: {min_val} >= {max_val}"
36 |             
   | ^^^^^^^^^^^^
37 |     except ImportError as e:
38 |         pytest.skip(f"Parameter validator test skipped due to import error: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:45:1
   |
43 |     try:
44 |         from ai_trading.core.parameter_validator import validate_trading_parameters
45 |         
   | ^^^^^^^^
46 |         result = validate_trading_parameters()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:47:1
   |
46 |         result = validate_trading_parameters()
47 |         
   | ^^^^^^^^
48 |         # Check result structure
49 |         assert "overall_status" in result, "Missing overall_status in validation result"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:53:1
   |
51 |         assert "warnings" in result, "Missing warnings in validation result"
52 |         assert "parameter_summary" in result, "Missing parameter_summary in validation result"
53 |         
   | ^^^^^^^^
54 |         # All optimized parameters should pass validation
55 |         assert result["overall_status"] in ["PASS", "WARNING"], \
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:57:1
   |
55 |         assert result["overall_status"] in ["PASS", "WARNING"], \
56 |             f"Parameter validation failed: {result.get('violations', [])}"
57 |         
   | ^^^^^^^^
58 |         # Should have parameter summaries for all groups
59 |         expected_groups = ["kelly", "risk", "execution", "performance"]
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:62:1
   |
60 |         for group in expected_groups:
61 |             assert group in result["parameter_summary"], f"Missing {group} parameter summary"
62 |             
   | ^^^^^^^^^^^^
63 |     except ImportError as e:
64 |         pytest.skip(f"Parameter validation test skipped due to import error: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:71:1
   |
69 |     try:
70 |         from ai_trading.core.parameter_validator import ParameterValidator
71 |         
   | ^^^^^^^^
72 |         validator = ParameterValidator()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:73:1
   |
72 |         validator = ParameterValidator()
73 |         
   | ^^^^^^^^
74 |         # Test valid parameter change
75 |         result = validator.validate_parameter_change("MAX_KELLY_FRACTION", 0.25, 0.15)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:80:1
   |
78 |         assert result["old_value"] == 0.25
79 |         assert result["new_value"] == 0.15
80 |         
   | ^^^^^^^^
81 |         # Test invalid parameter change (outside bounds)
82 |         result = validator.validate_parameter_change("MAX_KELLY_FRACTION", 0.25, 0.80)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:85:1
   |
83 |         assert result["status"] == "FAIL", "Invalid parameter change should fail"
84 |         assert len(result["violations"]) > 0, "Should have violations for invalid change"
85 |         
   | ^^^^^^^^
86 |         # Test large change warning
87 |         result = validator.validate_parameter_change("MAX_PORTFOLIO_RISK", 0.02, 0.05)
   |
help: Remove whitespace from blank line

E501 Line too long (119 > 100)
  --> tests/test_parameter_validation.py:88:101
   |
86 |         # Test large change warning
87 |         result = validator.validate_parameter_change("MAX_PORTFOLIO_RISK", 0.02, 0.05)
88 |         assert len(result["warnings"]) > 0 or result["status"] == "PASS", "Large change should trigger warning or pass"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^
89 |         
90 |     except ImportError as e:
   |

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:89:1
   |
87 |         result = validator.validate_parameter_change("MAX_PORTFOLIO_RISK", 0.02, 0.05)
88 |         assert len(result["warnings"]) > 0 or result["status"] == "PASS", "Large change should trigger warning or pass"
89 |         
   | ^^^^^^^^
90 |     except ImportError as e:
91 |         pytest.skip(f"Parameter change validation test skipped due to import error: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_parameter_validation.py:98:1
   |
96 |     try:
97 |         from ai_trading.core.parameter_validator import ParameterValidator
98 |         
   | ^^^^^^^^
99 |         validator = ParameterValidator()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_validation.py:100:1
    |
 99 |         validator = ParameterValidator()
100 |         
    | ^^^^^^^^
101 |         # Test risk-increasing change
102 |         result = validator.validate_parameter_change("MAX_PORTFOLIO_RISK", 0.02, 0.025)
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> tests/test_parameter_validation.py:105:101
    |
103 |         impact = result.get("change_impact", {})
104 |         assert "risk_impact" in impact, "Should assess risk impact"
105 |         assert impact["risk_impact"] == "increased", "Increasing portfolio risk should increase risk"
    |                                                                                                     ^
106 |         
107 |         # Test risk-decreasing change  
    |

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_validation.py:106:1
    |
104 |         assert "risk_impact" in impact, "Should assess risk impact"
105 |         assert impact["risk_impact"] == "increased", "Increasing portfolio risk should increase risk"
106 |         
    | ^^^^^^^^
107 |         # Test risk-decreasing change  
108 |         result = validator.validate_parameter_change("MAX_DRAWDOWN", 0.20, 0.15)
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_parameter_validation.py:107:38
    |
105 |         assert impact["risk_impact"] == "increased", "Increasing portfolio risk should increase risk"
106 |         
107 |         # Test risk-decreasing change  
    |                                      ^^
108 |         result = validator.validate_parameter_change("MAX_DRAWDOWN", 0.20, 0.15)
109 |         impact = result.get("change_impact", {})
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_validation.py:111:1
    |
109 |         impact = result.get("change_impact", {})
110 |         assert impact["risk_impact"] == "decreased", "Decreasing max drawdown should decrease risk"
111 |         
    | ^^^^^^^^
112 |     except ImportError as e:
113 |         pytest.skip(f"Change impact assessment test skipped due to import error: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_validation.py:120:1
    |
118 |     try:
119 |         from ai_trading.core.parameter_validator import ParameterValidator
120 |         
    | ^^^^^^^^
121 |         validator = ParameterValidator()
122 |         summary = validator._generate_optimization_summary()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_validation.py:123:1
    |
121 |         validator = ParameterValidator()
122 |         summary = validator._generate_optimization_summary()
123 |         
    | ^^^^^^^^
124 |         # Check that summary contains all optimization categories
125 |         expected_categories = ["kelly_optimization", "risk_optimization", 
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_parameter_validation.py:125:74
    |
124 |         # Check that summary contains all optimization categories
125 |         expected_categories = ["kelly_optimization", "risk_optimization", 
    |                                                                          ^
126 |                              "execution_optimization", "performance_optimization"]
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_validation.py:127:1
    |
125 |         expected_categories = ["kelly_optimization", "risk_optimization", 
126 |                              "execution_optimization", "performance_optimization"]
127 |         
    | ^^^^^^^^
128 |         for category in expected_categories:
129 |             assert category in summary, f"Missing optimization category: {category}"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_validation.py:132:1
    |
130 |             assert isinstance(summary[category], dict), f"{category} should be a dictionary"
131 |             assert len(summary[category]) > 0, f"{category} should contain optimizations"
132 |             
    | ^^^^^^^^^^^^
133 |     except ImportError as e:
134 |         pytest.skip(f"Optimization summary test skipped due to import error: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_validation.py:141:1
    |
139 |     try:
140 |         from ai_trading.core.parameter_validator import log_parameter_changes
141 |         
    | ^^^^^^^^
142 |         # This should execute without errors
143 |         log_parameter_changes()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_validation.py:144:1
    |
142 |         # This should execute without errors
143 |         log_parameter_changes()
144 |         
    | ^^^^^^^^
145 |     except ImportError as e:
146 |         pytest.skip(f"Parameter logging test skipped due to import error: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_validation.py:153:1
    |
151 |     try:
152 |         from ai_trading.core.parameter_validator import ParameterValidator
153 |         
    | ^^^^^^^^
154 |         validator = ParameterValidator()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_validation.py:155:1
    |
154 |         validator = ParameterValidator()
155 |         
    | ^^^^^^^^
156 |         # Check that all bounds are reasonable
157 |         for param_name, (min_val, max_val) in validator.safety_bounds.items():
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_validation.py:160:1
    |
158 |             assert min_val >= 0, f"{param_name} minimum bound should be non-negative"
159 |             assert max_val > min_val, f"{param_name} maximum should be greater than minimum"
160 |             
    | ^^^^^^^^^^^^
161 |             # Specific reasonableness checks
162 |             if "FRACTION" in param_name or "RATE" in param_name:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_parameter_validation.py:168:1
    |
166 |             if "SHARPE" in param_name:
167 |                 assert max_val <= 5.0, f"{param_name} should have reasonable upper bound"
168 |                 
    | ^^^^^^^^^^^^^^^^
169 |     except ImportError as e:
170 |         pytest.skip(f"Safety bounds consistency test skipped due to import error: {e}")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_parameter_validation.py:175:34
    |
173 | if __name__ == "__main__":
174 |     # Run tests directly for validation
175 |     pytest.main([__file__, "-v"])
    |                                  ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_peak_performance.py:6:1
   |
 4 |   """
 5 |
 6 | / import pytest
 7 | | import pandas as pd
 8 | | import numpy as np
 9 | | from datetime import datetime, timezone
   | |_______________________________________^
10 |
11 |   # Test idempotency
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_peak_performance.py:14:5
   |
12 |   def test_order_idempotency():
13 |       """Test order idempotency caching."""
14 | /     from ai_trading.execution.idempotency import is_duplicate_order, mark_order_submitted
15 | |     
16 | |     # Clear any existing cache
17 | |     from ai_trading.execution.idempotency import get_idempotency_cache
   | |______________________________________________________________________^
18 |       cache = get_idempotency_cache()
19 |       cache.clear_expired()
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_peak_performance.py:15:1
   |
13 |     """Test order idempotency caching."""
14 |     from ai_trading.execution.idempotency import is_duplicate_order, mark_order_submitted
15 |     
   | ^^^^
16 |     # Clear any existing cache
17 |     from ai_trading.execution.idempotency import get_idempotency_cache
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_peak_performance.py:20:1
   |
18 |     cache = get_idempotency_cache()
19 |     cache.clear_expired()
20 |     
   | ^^^^
21 |     symbol = "TEST"
22 |     side = "buy"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_peak_performance.py:24:1
   |
22 |     side = "buy"
23 |     quantity = 100.0
24 |     
   | ^^^^
25 |     # First order should not be duplicate
26 |     is_dup, order_id = is_duplicate_order(symbol, side, quantity)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_peak_performance.py:29:1
   |
27 |     assert not is_dup
28 |     assert order_id is None
29 |     
   | ^^^^
30 |     # Mark as submitted
31 |     test_order_id = "order_123"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_peak_performance.py:33:1
   |
31 |     test_order_id = "order_123"
32 |     mark_order_submitted(symbol, side, quantity, test_order_id)
33 |     
   | ^^^^
34 |     # Second identical order should be duplicate
35 |     is_dup, existing_id = is_duplicate_order(symbol, side, quantity)
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_peak_performance.py:42:5
   |
40 |   def test_position_reconciliation():
41 |       """Test position reconciliation logic."""
42 | /     from ai_trading.execution.reconcile import PositionReconciler
43 | |     from ai_trading.core.interfaces import Position
44 | |     from datetime import datetime, timezone
   | |___________________________________________^
45 |       
46 |       reconciler = PositionReconciler(tolerance_pct=0.01)
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_peak_performance.py:45:1
   |
43 |     from ai_trading.core.interfaces import Position
44 |     from datetime import datetime, timezone
45 |     
   | ^^^^
46 |     reconciler = PositionReconciler(tolerance_pct=0.01)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_peak_performance.py:47:1
   |
46 |     reconciler = PositionReconciler(tolerance_pct=0.01)
47 |     
   | ^^^^
48 |     # Create test positions
49 |     local_positions = {
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:51:27
   |
49 |     local_positions = {
50 |         "AAPL": Position(
51 |             symbol="AAPL", 
   |                           ^
52 |             quantity=100, 
53 |             market_value=15000.0, 
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:52:26
   |
50 |         "AAPL": Position(
51 |             symbol="AAPL", 
52 |             quantity=100, 
   |                          ^
53 |             market_value=15000.0, 
54 |             cost_basis=15000.0, 
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:53:34
   |
51 |             symbol="AAPL", 
52 |             quantity=100, 
53 |             market_value=15000.0, 
   |                                  ^
54 |             cost_basis=15000.0, 
55 |             unrealized_pnl=0.0,
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:54:32
   |
52 |             quantity=100, 
53 |             market_value=15000.0, 
54 |             cost_basis=15000.0, 
   |                                ^
55 |             unrealized_pnl=0.0,
56 |             timestamp=datetime.now(timezone.utc)
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:59:28
   |
57 |         ),
58 |         "GOOGL": Position(
59 |             symbol="GOOGL", 
   |                            ^
60 |             quantity=50, 
61 |             market_value=140000.0, 
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:60:25
   |
58 |         "GOOGL": Position(
59 |             symbol="GOOGL", 
60 |             quantity=50, 
   |                         ^
61 |             market_value=140000.0, 
62 |             cost_basis=140000.0, 
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:61:35
   |
59 |             symbol="GOOGL", 
60 |             quantity=50, 
61 |             market_value=140000.0, 
   |                                   ^
62 |             cost_basis=140000.0, 
63 |             unrealized_pnl=0.0,
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:62:33
   |
60 |             quantity=50, 
61 |             market_value=140000.0, 
62 |             cost_basis=140000.0, 
   |                                 ^
63 |             unrealized_pnl=0.0,
64 |             timestamp=datetime.now(timezone.utc)
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_peak_performance.py:67:1
   |
65 |         )
66 |     }
67 |     
   | ^^^^
68 |     broker_positions = {
69 |         "AAPL": Position(
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:70:27
   |
68 |     broker_positions = {
69 |         "AAPL": Position(
70 |             symbol="AAPL", 
   |                           ^
71 |             quantity=102, 
72 |             market_value=15300.0, 
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:71:26
   |
69 |         "AAPL": Position(
70 |             symbol="AAPL", 
71 |             quantity=102, 
   |                          ^
72 |             market_value=15300.0, 
73 |             cost_basis=15300.0, 
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:72:34
   |
70 |             symbol="AAPL", 
71 |             quantity=102, 
72 |             market_value=15300.0, 
   |                                  ^
73 |             cost_basis=15300.0, 
74 |             unrealized_pnl=0.0,
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:73:32
   |
71 |             quantity=102, 
72 |             market_value=15300.0, 
73 |             cost_basis=15300.0, 
   |                                ^
74 |             unrealized_pnl=0.0,
75 |             timestamp=datetime.now(timezone.utc)
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:78:27
   |
76 |         ),  # Small drift
77 |         "MSFT": Position(
78 |             symbol="MSFT", 
   |                           ^
79 |             quantity=75, 
80 |             market_value=22500.0, 
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:79:25
   |
77 |         "MSFT": Position(
78 |             symbol="MSFT", 
79 |             quantity=75, 
   |                         ^
80 |             market_value=22500.0, 
81 |             cost_basis=22500.0, 
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:80:34
   |
78 |             symbol="MSFT", 
79 |             quantity=75, 
80 |             market_value=22500.0, 
   |                                  ^
81 |             cost_basis=22500.0, 
82 |             unrealized_pnl=0.0,
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_peak_performance.py:81:32
   |
79 |             quantity=75, 
80 |             market_value=22500.0, 
81 |             cost_basis=22500.0, 
   |                                ^
82 |             unrealized_pnl=0.0,
83 |             timestamp=datetime.now(timezone.utc)
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_peak_performance.py:86:1
   |
84 |         )    # Missing locally
85 |     }
86 |     
   | ^^^^
87 |     # Test drift detection
88 |     drifts = reconciler.reconcile_positions(local_positions, broker_positions)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_peak_performance.py:89:1
   |
87 |     # Test drift detection
88 |     drifts = reconciler.reconcile_positions(local_positions, broker_positions)
89 |     
   | ^^^^
90 |     assert len(drifts) >= 2  # AAPL drift + GOOGL missing + MSFT missing
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_peak_performance.py:91:1
   |
90 |     assert len(drifts) >= 2  # AAPL drift + GOOGL missing + MSFT missing
91 |     
   | ^^^^
92 |     # Check AAPL drift
93 |     aapl_drift = next((d for d in drifts if d.symbol == "AAPL"), None)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:101:1
    |
 99 |     """Test exchange-aligned clock functionality."""
100 |     from ai_trading.scheduler.aligned_clock import AlignedClock
101 |     
    | ^^^^
102 |     clock = AlignedClock(max_skew_ms=250.0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:103:1
    |
102 |     clock = AlignedClock(max_skew_ms=250.0)
103 |     
    | ^^^^
104 |     # Test skew checking
105 |     skew = clock.check_skew()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:108:1
    |
106 |     assert isinstance(skew, float)
107 |     assert abs(skew) < 5000  # Should be reasonable
108 |     
    | ^^^^
109 |     # Test bar validation
110 |     validation = clock.ensure_final_bar("TEST", "1m")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:113:1
    |
111 |     assert hasattr(validation, 'is_final')
112 |     assert hasattr(validation, 'skew_ms')
113 |     
    | ^^^^
114 |     # Test market hours (basic check)
115 |     test_time = datetime(2023, 6, 15, 14, 30, tzinfo=timezone.utc)  # Weekday 2:30 PM UTC
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_peak_performance.py:122:5
    |
120 | def test_symbol_costs():
121 |     """Test symbol-aware cost model."""
122 |     from ai_trading.execution.costs import SymbolCosts, SymbolCostModel
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
123 |     
124 |     # Test cost calculation
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:123:1
    |
121 |     """Test symbol-aware cost model."""
122 |     from ai_trading.execution.costs import SymbolCosts, SymbolCostModel
123 |     
    | ^^^^
124 |     # Test cost calculation
125 |     costs = SymbolCosts(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:131:1
    |
129 |         commission_bps=0.5
130 |     )
131 |     
    | ^^^^
132 |     # Test slippage calculation
133 |     slippage = costs.slippage_cost_bps(volume_ratio=2.0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:136:1
    |
134 |     expected_slippage = 1.5 * np.sqrt(2.0)
135 |     assert abs(slippage - expected_slippage) < 0.01
136 |     
    | ^^^^
137 |     # Test total cost
138 |     total_cost = costs.total_execution_cost_bps(volume_ratio=1.5)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:141:1
    |
139 |     expected_total = (2.0 * 2) + 0.5 + (1.5 * np.sqrt(1.5))  # spread + commission + slippage
140 |     assert abs(total_cost - expected_total) < 0.01
141 |     
    | ^^^^
142 |     # Test cost model
143 |     model = SymbolCostModel()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:144:1
    |
142 |     # Test cost model
143 |     model = SymbolCostModel()
144 |     
    | ^^^^
145 |     # Get costs for new symbol
146 |     symbol_costs = model.get_costs("NEWTEST")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:149:1
    |
147 |     assert symbol_costs.symbol == "NEWTEST"
148 |     assert symbol_costs.half_spread_bps > 0
149 |     
    | ^^^^
150 |     # Test cost impact calculation
151 |     impact = model.calculate_position_impact("NEWTEST", position_value=10000, volume_ratio=1.0)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:160:1
    |
158 |     """Test adaptive risk control system."""
159 |     from ai_trading.portfolio.risk_controls import AdaptiveRiskController
160 |     
    | ^^^^
161 |     # Create test data
162 |     np.random.seed(42)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:165:1
    |
163 |     dates = pd.date_range('2023-01-01', periods=100, freq='D')
164 |     symbols = ['AAPL', 'GOOGL', 'MSFT']
165 |     
    | ^^^^
166 |     returns_data = pd.DataFrame(
167 |         np.random.normal(0, 0.02, (100, 3)),
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:171:1
    |
169 |         columns=symbols
170 |     )
171 |     
    | ^^^^
172 |     controller = AdaptiveRiskController()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:173:1
    |
172 |     controller = AdaptiveRiskController()
173 |     
    | ^^^^
174 |     # Test volatility calculation
175 |     vols = controller.calculate_volatilities(returns_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:180:1
    |
178 |         assert symbol in vols
179 |         assert vols[symbol] > 0
180 |     
    | ^^^^
181 |     # Test correlation clustering (skip if scipy not available)
182 |     try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:188:1
    |
186 |     except ImportError:
187 |         pass  # Skip if clustering dependencies not available
188 |     
    | ^^^^
189 |     # Test Kelly calculation
190 |     expected_returns = {symbol: 0.01 for symbol in symbols}  # 1% expected return
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:192:1
    |
190 |     expected_returns = {symbol: 0.01 for symbol in symbols}  # 1% expected return
191 |     kelly_fractions = controller.calculate_kelly_fractions(expected_returns, vols)
192 |     
    | ^^^^
193 |     assert len(kelly_fractions) == 3
194 |     for symbol in symbols:
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_peak_performance.py:200:5
    |
198 | def test_determinism():
199 |     """Test deterministic training setup."""
200 |     from ai_trading.utils.determinism import set_random_seeds, hash_data
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
201 |     
202 |     # Test seed setting
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:201:1
    |
199 |     """Test deterministic training setup."""
200 |     from ai_trading.utils.determinism import set_random_seeds, hash_data
201 |     
    | ^^^^
202 |     # Test seed setting
203 |     set_random_seeds(42)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:204:1
    |
202 |     # Test seed setting
203 |     set_random_seeds(42)
204 |     
    | ^^^^
205 |     # Generate some random numbers to verify determinism
206 |     np_random1 = np.random.random(5)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:207:1
    |
205 |     # Generate some random numbers to verify determinism
206 |     np_random1 = np.random.random(5)
207 |     
    | ^^^^
208 |     # Reset and generate again
209 |     set_random_seeds(42)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:211:1
    |
209 |     set_random_seeds(42)
210 |     np_random2 = np.random.random(5)
211 |     
    | ^^^^
212 |     np.testing.assert_array_equal(np_random1, np_random2)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:213:1
    |
212 |     np.testing.assert_array_equal(np_random1, np_random2)
213 |     
    | ^^^^
214 |     # Test data hashing
215 |     test_data = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:218:1
    |
216 |     hash1 = hash_data(test_data)
217 |     hash2 = hash_data(test_data)
218 |     
    | ^^^^
219 |     assert hash1 == hash2
220 |     assert len(hash1) == 16  # Should be 16-char hash
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:221:1
    |
219 |     assert hash1 == hash2
220 |     assert len(hash1) == 16  # Should be 16-char hash
221 |     
    | ^^^^
222 |     # Test different data produces different hash
223 |     test_data2 = pd.DataFrame({'A': [1, 2, 4], 'B': [4, 5, 6]})  # Changed one value
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:225:1
    |
223 |     test_data2 = pd.DataFrame({'A': [1, 2, 4], 'B': [4, 5, 6]})  # Changed one value
224 |     hash3 = hash_data(test_data2)
225 |     
    | ^^^^
226 |     assert hash1 != hash3
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:232:1
    |
230 |     """Test drift monitoring functionality."""
231 |     from ai_trading.monitoring.drift import DriftMonitor
232 |     
    | ^^^^
233 |     monitor = DriftMonitor()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:234:1
    |
233 |     monitor = DriftMonitor()
234 |     
    | ^^^^
235 |     # Create baseline and current features
236 |     np.random.seed(42)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:241:1
    |
239 |         'feature2': np.random.normal(0, 1, 1000)
240 |     })
241 |     
    | ^^^^
242 |     # Update baseline
243 |     monitor.update_baseline(baseline_features)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:244:1
    |
242 |     # Update baseline
243 |     monitor.update_baseline(baseline_features)
244 |     
    | ^^^^
245 |     # Create current features with slight drift
246 |     current_features = pd.DataFrame({
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:250:1
    |
248 |         'feature2': np.random.normal(0, 1.2, 500)   # Increased variance
249 |     })
250 |     
    | ^^^^
251 |     # Monitor drift
252 |     drift_metrics = monitor.monitor_feature_drift(current_features)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:253:1
    |
251 |     # Monitor drift
252 |     drift_metrics = monitor.monitor_feature_drift(current_features)
253 |     
    | ^^^^
254 |     assert len(drift_metrics) == 2
255 |     for metric in drift_metrics:
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_peak_performance.py:263:5
    |
261 | def test_performance_optimizations():
262 |     """Test performance optimization utilities."""
263 |     from ai_trading.utils.performance import PerformanceCache, VectorizedOperations, benchmark_operation
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
264 |     
265 |     # Test caching
    |
help: Organize imports

E501 Line too long (104 > 100)
   --> tests/test_peak_performance.py:263:101
    |
261 | def test_performance_optimizations():
262 |     """Test performance optimization utilities."""
263 |     from ai_trading.utils.performance import PerformanceCache, VectorizedOperations, benchmark_operation
    |                                                                                                     ^^^^
264 |     
265 |     # Test caching
    |

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:264:1
    |
262 |     """Test performance optimization utilities."""
263 |     from ai_trading.utils.performance import PerformanceCache, VectorizedOperations, benchmark_operation
264 |     
    | ^^^^
265 |     # Test caching
266 |     cache = PerformanceCache(max_size=10, ttl_seconds=60)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:267:1
    |
265 |     # Test caching
266 |     cache = PerformanceCache(max_size=10, ttl_seconds=60)
267 |     
    | ^^^^
268 |     cache.set("test_key", "test_value")
269 |     assert cache.get("test_key") == "test_value"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:271:1
    |
269 |     assert cache.get("test_key") == "test_value"
270 |     assert cache.get("nonexistent") is None
271 |     
    | ^^^^
272 |     # Test vectorized operations
273 |     np.random.seed(42)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:275:1
    |
273 |     np.random.seed(42)
274 |     prices = pd.Series(np.random.random(100).cumsum() + 100)
275 |     
    | ^^^^
276 |     # Test fast returns
277 |     returns = VectorizedOperations.fast_returns(prices, periods=1)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:280:1
    |
278 |     assert len(returns) == len(prices)
279 |     assert np.isnan(returns.iloc[0])  # First value should be NaN
280 |     
    | ^^^^
281 |     # Test rolling z-score
282 |     zscore = VectorizedOperations.rolling_zscore(prices, window=20)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:284:1
    |
282 |     zscore = VectorizedOperations.rolling_zscore(prices, window=20)
283 |     assert len(zscore) == len(prices)
284 |     
    | ^^^^
285 |     # Test benchmark function
286 |     def dummy_operation(data):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:288:1
    |
286 |     def dummy_operation(data):
287 |         return data.sum()
288 |     
    | ^^^^
289 |     result = benchmark_operation("test_sum", dummy_operation, prices)
290 |     assert result.operation == "test_sum"
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_peak_performance.py:296:5
    |
294 | def test_smart_order_routing():
295 |     """Test smart order routing functionality."""
296 |     from ai_trading.execution.order_policy import SmartOrderRouter, MarketData, OrderUrgency
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
297 |     
298 |     router = SmartOrderRouter()
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:297:1
    |
295 |     """Test smart order routing functionality."""
296 |     from ai_trading.execution.order_policy import SmartOrderRouter, MarketData, OrderUrgency
297 |     
    | ^^^^
298 |     router = SmartOrderRouter()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:299:1
    |
298 |     router = SmartOrderRouter()
299 |     
    | ^^^^
300 |     # Create test market data
301 |     market_data = MarketData(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:309:1
    |
307 |         volume_ratio=1.0
308 |     )
309 |     
    | ^^^^
310 |     # Test limit price calculation
311 |     limit_price, order_type = router.calculate_limit_price(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:314:1
    |
312 |         market_data, side="buy", urgency=OrderUrgency.MEDIUM
313 |     )
314 |     
    | ^^^^
315 |     assert isinstance(limit_price, float)
316 |     assert limit_price > market_data.bid  # Buy should be above bid
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:318:1
    |
316 |     assert limit_price > market_data.bid  # Buy should be above bid
317 |     assert limit_price <= market_data.mid  # But not above mid for marketable limit
318 |     
    | ^^^^
319 |     # Test order request creation
320 |     order_request = router.create_order_request(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:327:1
    |
325 |         urgency=OrderUrgency.MEDIUM
326 |     )
327 |     
    | ^^^^
328 |     assert order_request['symbol'] == "TEST"
329 |     assert order_request['side'] == "buy"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:340:1
    |
338 |     # This would be a more complex integration test
339 |     # For now, just ensure the cost model can be imported and used
340 |     
    | ^^^^
341 |     from ai_trading.execution.costs import get_cost_model
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:342:1
    |
341 |     from ai_trading.execution.costs import get_cost_model
342 |     
    | ^^^^
343 |     model = get_cost_model()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:344:1
    |
343 |     model = get_cost_model()
344 |     
    | ^^^^
345 |     # Test cost adjustment
346 |     adjusted_size, cost_info = model.adjust_position_size(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:352:1
    |
350 |         volume_ratio=1.0
351 |     )
352 |     
    | ^^^^
353 |     assert isinstance(adjusted_size, float)
354 |     assert isinstance(cost_info, dict)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_peak_performance.py:355:1
    |
353 |     assert isinstance(adjusted_size, float)
354 |     assert isinstance(cost_info, dict)
355 |     
    | ^^^^
356 |     # If costs are within limit, size should be unchanged
357 |     if cost_info.get('cost_bps', 0) <= 15.0:
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_peak_performance.py:364:34
    |
363 | if __name__ == "__main__":
364 |     pytest.main([__file__, "-v"])
    |                                  ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_performance_allocator_conf_gate.py:1:1
  |
1 | / import logging
2 | | import pytest
3 | |
4 | | from ai_trading.strategies.performance_allocator import (
5 | |     PerformanceBasedAllocator,
6 | |     _resolve_conf_threshold,
7 | | )
8 | | from ai_trading.config.management import TradingConfig
9 | | from ai_trading.config.settings import get_settings
  | |___________________________________________________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:25:1
   |
23 |     """Test that meta-learning can handle mixed audit/meta-learning log formats."""
24 |     print("Testing meta-learning mixed format handling")
25 |     
   | ^^^^
26 |     from ai_trading.meta_learning import validate_trade_data_quality, retrain_meta_learner
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_performance_fixes.py:26:5
   |
24 |     print("Testing meta-learning mixed format handling")
25 |     
26 |     from ai_trading.meta_learning import validate_trade_data_quality, retrain_meta_learner
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
27 |     
28 |     # Test with the actual trades.csv file
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:27:1
   |
26 |     from ai_trading.meta_learning import validate_trade_data_quality, retrain_meta_learner
27 |     
   | ^^^^
28 |     # Test with the actual trades.csv file
29 |     quality_report = validate_trade_data_quality('trades.csv')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:30:1
   |
28 |     # Test with the actual trades.csv file
29 |     quality_report = validate_trade_data_quality('trades.csv')
30 |     
   | ^^^^
31 |     # Verify mixed format detection
32 |     assert quality_report['file_exists'], "Trade log file should exist"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:39:1
   |
37 |     assert quality_report['valid_price_rows'] > 0, "Should find valid price rows"
38 |     assert quality_report['data_quality_score'] > 0, "Should have positive data quality score"
39 |     
   | ^^^^
40 |     print(f"✓ Mixed format detection: {quality_report['audit_format_rows']} audit + {quality_report['meta_format_rows']} meta rows")
41 |     print(f"✓ Data quality: {quality_report['valid_price_rows']} valid rows ({quality_report['data_quality_score']:.1%} quality)")
   |
help: Remove whitespace from blank line

E501 Line too long (132 > 100)
  --> tests/test_performance_fixes.py:40:101
   |
38 |     assert quality_report['data_quality_score'] > 0, "Should have positive data quality score"
39 |     
40 |     print(f"✓ Mixed format detection: {quality_report['audit_format_rows']} audit + {quality_report['meta_format_rows']} meta rows")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
41 |     print(f"✓ Data quality: {quality_report['valid_price_rows']} valid rows ({quality_report['data_quality_score']:.1%} quality)")
   |

E501 Line too long (130 > 100)
  --> tests/test_performance_fixes.py:41:101
   |
40 |     print(f"✓ Mixed format detection: {quality_report['audit_format_rows']} audit + {quality_report['meta_format_rows']} meta rows")
41 |     print(f"✓ Data quality: {quality_report['valid_price_rows']} valid rows ({quality_report['data_quality_score']:.1%} quality)")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
42 |     
43 |     # Test that retrain_meta_learner works
   |

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:42:1
   |
40 |     print(f"✓ Mixed format detection: {quality_report['audit_format_rows']} audit + {quality_report['meta_format_rows']} meta rows")
41 |     print(f"✓ Data quality: {quality_report['valid_price_rows']} valid rows ({quality_report['data_quality_score']:.1%} quality)")
42 |     
   | ^^^^
43 |     # Test that retrain_meta_learner works
44 |     result = retrain_meta_learner('trades.csv', min_samples=10)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:46:1
   |
44 |     result = retrain_meta_learner('trades.csv', min_samples=10)
45 |     assert result, "Meta-learning retraining should succeed"
46 |     
   | ^^^^
47 |     print("✓ Meta-learning retraining successful")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:53:1
   |
51 |     """Test that cache performance monitoring is working."""
52 |     print("Testing cache performance monitoring")
53 |     
   | ^^^^
54 |     from ai_trading.data_fetcher import get_cache_stats, _CACHE_STATS
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_performance_fixes.py:54:5
   |
52 |     print("Testing cache performance monitoring")
53 |     
54 |     from ai_trading.data_fetcher import get_cache_stats, _CACHE_STATS
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
55 |     
56 |     # Reset cache stats
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:55:1
   |
54 |     from ai_trading.data_fetcher import get_cache_stats, _CACHE_STATS
55 |     
   | ^^^^
56 |     # Reset cache stats
57 |     _CACHE_STATS["hits"] = 0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:60:1
   |
58 |     _CACHE_STATS["misses"] = 0
59 |     _CACHE_STATS["invalidations"] = 0
60 |     
   | ^^^^
61 |     # Get initial stats
62 |     stats = get_cache_stats()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:67:1
   |
65 |     assert "hit_ratio_pct" in stats, "Should calculate hit ratio"
66 |     assert "total_requests" in stats, "Should track total requests"
67 |     
   | ^^^^
68 |     print(f"✓ Cache monitoring: {stats['cache_size']} entries, {stats['hit_ratio_pct']}% hit ratio")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:74:1
   |
72 |     """Test that position size reporting is consistent."""
73 |     print("Testing position size reporting consistency")
74 |     
   | ^^^^
75 |     from ai_trading.execution.engine import ExecutionEngine
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:76:1
   |
75 |     from ai_trading.execution.engine import ExecutionEngine
76 |     
   | ^^^^
77 |     # Create mock context
78 |     mock_ctx = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:81:1
   |
79 |     mock_ctx.api = Mock()
80 |     mock_ctx.partial_fill_tracker = {}  # Initialize as empty dict
81 |     
   | ^^^^
82 |     # Create execution engine
83 |     engine = ExecutionEngine(mock_ctx)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:84:1
   |
82 |     # Create execution engine
83 |     engine = ExecutionEngine(mock_ctx)
84 |     
   | ^^^^
85 |     # Test partial fill reconciliation
86 |     mock_order = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:88:1
   |
86 |     mock_order = Mock()
87 |     mock_order.id = "test_order_123"
88 |     
   | ^^^^
89 |     # Test case: partial fill
90 |     engine._reconcile_partial_fills("AAPL", requested_qty=100, remaining_qty=25, side="buy", last_order=mock_order)
   |
help: Remove whitespace from blank line

E501 Line too long (115 > 100)
  --> tests/test_performance_fixes.py:90:101
   |
89 |     # Test case: partial fill
90 |     engine._reconcile_partial_fills("AAPL", requested_qty=100, remaining_qty=25, side="buy", last_order=mock_order)
   |                                                                                                     ^^^^^^^^^^^^^^^
91 |     
92 |     # Test case: full fill
   |

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:91:1
   |
89 |     # Test case: partial fill
90 |     engine._reconcile_partial_fills("AAPL", requested_qty=100, remaining_qty=25, side="buy", last_order=mock_order)
91 |     
   | ^^^^
92 |     # Test case: full fill
93 |     engine._reconcile_partial_fills("AAPL", requested_qty=100, remaining_qty=0, side="buy", last_order=mock_order)
   |
help: Remove whitespace from blank line

E501 Line too long (114 > 100)
  --> tests/test_performance_fixes.py:93:101
   |
92 |     # Test case: full fill
93 |     engine._reconcile_partial_fills("AAPL", requested_qty=100, remaining_qty=0, side="buy", last_order=mock_order)
   |                                                                                                     ^^^^^^^^^^^^^^
94 |     
95 |     print("✓ Position size reporting tests completed")
   |

W293 [*] Blank line contains whitespace
  --> tests/test_performance_fixes.py:94:1
   |
92 |     # Test case: full fill
93 |     engine._reconcile_partial_fills("AAPL", requested_qty=100, remaining_qty=0, side="buy", last_order=mock_order)
94 |     
   | ^^^^
95 |     print("✓ Position size reporting tests completed")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_performance_fixes.py:101:1
    |
 99 |     """Test that order execution latency tracking is more granular."""
100 |     print("Testing enhanced latency tracking")
101 |     
    | ^^^^
102 |     import time
103 |     from ai_trading.execution.engine import ExecutionEngine
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_performance_fixes.py:102:5
    |
100 |       print("Testing enhanced latency tracking")
101 |       
102 | /     import time
103 | |     from ai_trading.execution.engine import ExecutionEngine
    | |___________________________________________________________^
104 |       
105 |       # Create mock context and engine
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_performance_fixes.py:104:1
    |
102 |     import time
103 |     from ai_trading.execution.engine import ExecutionEngine
104 |     
    | ^^^^
105 |     # Create mock context and engine
106 |     mock_ctx = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_performance_fixes.py:109:1
    |
107 |     mock_ctx.api = Mock()
108 |     engine = ExecutionEngine(mock_ctx)
109 |     
    | ^^^^
110 |     # Simulate order result handling
111 |     mock_order = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_performance_fixes.py:116:1
    |
114 |     mock_order.filled_avg_price = 150.50
115 |     mock_order.filled_qty = 100
116 |     
    | ^^^^
117 |     start_time = time.monotonic()
118 |     time.sleep(0.001)  # Small delay to simulate order processing
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_performance_fixes.py:119:1
    |
117 |     start_time = time.monotonic()
118 |     time.sleep(0.001)  # Small delay to simulate order processing
119 |     
    | ^^^^
120 |     # Test latency calculation (this will fail on API calls, but that's expected in test)
121 |     try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_performance_fixes.py:126:1
    |
124 |         # Expected to fail on API calls in test environment
125 |         print(f"✓ Latency tracking code executed (API error expected: {type(e).__name__})")
126 |     
    | ^^^^
127 |     print("✓ Enhanced latency tracking tests completed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_performance_fixes.py:135:1
    |
133 |     print("COMPREHENSIVE PERFORMANCE FIXES TEST")
134 |     print("="*60)
135 |     
    | ^^^^
136 |     try:
137 |         test_meta_learning_mixed_format()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_performance_fixes.py:139:1
    |
137 |         test_meta_learning_mixed_format()
138 |         print()
139 |         
    | ^^^^^^^^
140 |         test_cache_performance_monitoring()
141 |         print()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_performance_fixes.py:142:1
    |
140 |         test_cache_performance_monitoring()
141 |         print()
142 |         
    | ^^^^^^^^
143 |         test_position_size_reporting()
144 |         print()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_performance_fixes.py:145:1
    |
143 |         test_position_size_reporting()
144 |         print()
145 |         
    | ^^^^^^^^
146 |         test_latency_tracking()
147 |         print()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_performance_fixes.py:148:1
    |
146 |         test_latency_tracking()
147 |         print()
148 |         
    | ^^^^^^^^
149 |         print("="*60)
150 |         print("✅ ALL PERFORMANCE FIXES TESTS PASSED!")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_performance_fixes.py:159:1
    |
157 |         print("4. ✓ Enhanced order execution latency tracking with jitter")
158 |         print()
159 |         
    | ^^^^^^^^
160 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_performance_fixes.py:161:1
    |
160 |         return True
161 |         
    | ^^^^^^^^
162 |     except Exception as e:
163 |         print(f"❌ TEST FAILED: {e}")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_performance_fixes.py:171:34
    |
169 | if __name__ == "__main__":
170 |     success = test_comprehensive_fixes()
171 |     sys.exit(0 if success else 1)
    |                                  ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_phase2_enhancements.py:8:1
   |
 6 |   """
 7 |
 8 | / import unittest
 9 | | import os
10 | | import time
11 | | from datetime import datetime, timezone
12 | | from unittest.mock import Mock, patch
   | |_____________________________________^
13 |
14 |   # Mock environment variables for testing
   |
help: Organize imports

W291 [*] Trailing whitespace
  --> tests/test_phase2_enhancements.py:17:40
   |
15 | test_env = {
16 |     'ALPACA_API_KEY': 'test_key',
17 |     'ALPACA_SECRET_KEY': 'test_secret', 
   |                                        ^
18 |     'ALPACA_BASE_URL': 'https://paper-api.alpaca.markets',
19 |     'WEBHOOK_SECRET': 'test_secret',
   |
help: Remove trailing whitespace

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_phase2_enhancements.py:26:5
   |
25 |   with patch.dict(os.environ, test_env):
26 | /     import ai_trading.config as config
27 | |     from ai_trading.monitoring.order_health_monitor import OrderHealthMonitor, OrderInfo
28 | |     from ai_trading.monitoring.system_health_checker import SystemHealthChecker, ComponentHealth  # AI-AGENT-REF: normalized import
   | |________________________________________________________________________________________________^
   |
help: Organize imports

E501 Line too long (131 > 100)
  --> tests/test_phase2_enhancements.py:28:101
   |
26 |     import ai_trading.config as config
27 |     from ai_trading.monitoring.order_health_monitor import OrderHealthMonitor, OrderInfo
28 |     from ai_trading.monitoring.system_health_checker import SystemHealthChecker, ComponentHealth  # AI-AGENT-REF: normalized import
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

W293 [*] Blank line contains whitespace
  --> tests/test_phase2_enhancements.py:33:1
   |
31 | class TestOrderHealthMonitor(unittest.TestCase):
32 |     """Test order health monitoring system."""
33 |     
   | ^^^^
34 |     def setUp(self):
35 |         self.monitor = OrderHealthMonitor()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_phase2_enhancements.py:38:1
   |
36 |         self.monitor.order_timeout_seconds = 10  # Short timeout for testing
37 |         self.monitor.cleanup_interval = 1  # Short interval for testing
38 |     
   | ^^^^
39 |     def test_order_health_monitor_initialization(self):
40 |         """Test that order health monitor initializes properly."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_phase2_enhancements.py:45:1
   |
43 |         self.assertEqual(self.monitor.cleanup_interval, 1)
44 |         self.assertFalse(self.monitor._monitoring_active)
45 |     
   | ^^^^
46 |     def test_partial_fill_recording(self):
47 |         """Test recording and tracking of partial fills."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_phase2_enhancements.py:56:1
   |
54 |             total_qty=100
55 |         )
56 |         
   | ^^^^^^^^
57 |         # Check that partial fill was recorded
58 |         with self.monitor._lock:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_phase2_enhancements.py:64:1
   |
62 |             self.assertEqual(partial_info.total_qty, 100)
63 |             self.assertEqual(partial_info.fill_rate, 0.5)
64 |     
   | ^^^^
65 |     def test_health_metrics_calculation(self):
66 |         """Test health metrics calculation."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_phase2_enhancements.py:70:1
   |
68 |         with patch('ai_trading.monitoring.order_health_monitor._active_orders') as mock_orders, \
69 |              patch('ai_trading.monitoring.order_health_monitor._order_tracking_lock'):
70 |             
   | ^^^^^^^^^^^^
71 |             # Add some mock orders
72 |             mock_orders.__len__ = Mock(return_value=5)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_phase2_enhancements.py:80:1
   |
78 |                 OrderInfo("order5", "NVDA", "buy", 100, time.time() - 5, "new")
79 |             ]
80 |             
   | ^^^^^^^^^^^^
81 |             metrics = self.monitor._calculate_health_metrics()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_phase2_enhancements.py:82:1
   |
81 |             metrics = self.monitor._calculate_health_metrics()
82 |             
   | ^^^^^^^^^^^^
83 |             self.assertEqual(metrics.total_orders, 5)
84 |             self.assertGreater(metrics.success_rate, 0.0)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_phase2_enhancements.py:86:1
   |
84 |             self.assertGreater(metrics.success_rate, 0.0)
85 |             self.assertLessEqual(metrics.success_rate, 1.0)
86 |     
   | ^^^^
87 |     def test_health_summary_generation(self):
88 |         """Test health summary generation.""" 
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_phase2_enhancements.py:88:46
   |
87 |     def test_health_summary_generation(self):
88 |         """Test health summary generation.""" 
   |                                              ^
89 |         summary = self.monitor.get_health_summary()
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_phase2_enhancements.py:90:1
   |
88 |         """Test health summary generation.""" 
89 |         summary = self.monitor.get_health_summary()
90 |         
   | ^^^^^^^^
91 |         # Check required fields
92 |         self.assertIn("current_metrics", summary)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_phase2_enhancements.py:96:1
   |
94 |         self.assertIn("monitoring_active", summary)
95 |         self.assertIn("timestamp", summary)
96 |         
   | ^^^^^^^^
97 |         # Check metric fields
98 |         current_metrics = summary["current_metrics"]
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_phase2_enhancements.py:100:61
    |
 98 |         current_metrics = summary["current_metrics"]
 99 |         required_metrics = [
100 |             "total_orders", "success_rate", "avg_fill_time", 
    |                                                             ^
101 |             "stuck_orders", "partial_fills", "avg_fill_rate"
102 |         ]
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:109:1
    |
107 | class TestSystemHealthChecker(unittest.TestCase):
108 |     """Test system health checking functionality."""
109 |     
    | ^^^^
110 |     def setUp(self):
111 |         self.health_checker = SystemHealthChecker()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:112:1
    |
110 |     def setUp(self):
111 |         self.health_checker = SystemHealthChecker()
112 |     
    | ^^^^
113 |     def test_system_health_checker_initialization(self):
114 |         """Test that system health checker initializes properly."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:120:1
    |
118 |         self.assertIn('meta_learning', self.health_checker.health_thresholds)
119 |         self.assertIn('order_execution', self.health_checker.health_thresholds)
120 |     
    | ^^^^
121 |     @patch('ai_trading.monitoring.system_health_checker.sentiment')
122 |     def test_sentiment_health_check(self, mock_sentiment):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:132:1
    |
130 |         }
131 |         mock_sentiment.SENTIMENT_FAILURE_THRESHOLD = 15
132 |         
    | ^^^^^^^^
133 |         health = self.health_checker._check_sentiment_health()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:134:1
    |
133 |         health = self.health_checker._check_sentiment_health()
134 |         
    | ^^^^^^^^
135 |         self.assertEqual(health.name, "sentiment")
136 |         self.assertIn(health.status, ["healthy", "warning", "critical"])
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:139:1
    |
137 |         self.assertGreaterEqual(health.success_rate, 0.0)
138 |         self.assertLessEqual(health.success_rate, 1.0)
139 |     
    | ^^^^
140 |     @patch('ai_trading.monitoring.system_health_checker.meta_learning')
141 |     @patch('ai_trading.monitoring.system_health_checker.config')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:148:1
    |
146 |         mock_config.META_LEARNING_MIN_TRADES_REDUCED = 10
147 |         mock_config.META_LEARNING_BOOTSTRAP_ENABLED = True
148 |         
    | ^^^^^^^^
149 |         # Mock validation result
150 |         mock_meta_learning.validate_trade_data_quality.return_value = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:154:1
    |
152 |             'data_quality_score': 0.9
153 |         }
154 |         
    | ^^^^^^^^
155 |         health = self.health_checker._check_meta_learning_health()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:156:1
    |
155 |         health = self.health_checker._check_meta_learning_health()
156 |         
    | ^^^^^^^^
157 |         self.assertEqual(health.name, "meta_learning")
158 |         self.assertIn(health.status, ["healthy", "warning", "critical"])
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:161:1
    |
159 |         self.assertEqual(health.details['trade_count'], 15)
160 |         self.assertEqual(health.details['min_required'], 10)
161 |     
    | ^^^^
162 |     def test_overall_status_determination(self):
163 |         """Test overall status determination from components."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:171:1
    |
169 |         status = self.health_checker._determine_overall_status(components)
170 |         self.assertEqual(status, "healthy")
171 |         
    | ^^^^^^^^
172 |         # Test with warning
173 |         components['comp1'].status = "warning"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:176:1
    |
174 |         status = self.health_checker._determine_overall_status(components)
175 |         self.assertEqual(status, "warning")
176 |         
    | ^^^^^^^^
177 |         # Test with critical
178 |         components['comp2'].status = "critical"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:181:1
    |
179 |         status = self.health_checker._determine_overall_status(components)
180 |         self.assertEqual(status, "critical")
181 |     
    | ^^^^
182 |     def test_current_health_report(self):
183 |         """Test current health report generation."""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_phase2_enhancements.py:186:13
    |
184 |         with patch.object(self.health_checker, '_check_all_components') as mock_check:
185 |             # Mock health status
186 |             from ai_trading.monitoring.system_health_checker import SystemHealthStatus  # AI-AGENT-REF: normalized import
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
187 |             mock_health = SystemHealthStatus(
188 |                 overall_status="healthy",
    |
help: Organize imports

E501 Line too long (121 > 100)
   --> tests/test_phase2_enhancements.py:186:101
    |
184 |         with patch.object(self.health_checker, '_check_all_components') as mock_check:
185 |             # Mock health status
186 |             from ai_trading.monitoring.system_health_checker import SystemHealthStatus  # AI-AGENT-REF: normalized import
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^
187 |             mock_health = SystemHealthStatus(
188 |                 overall_status="healthy",
    |

E501 Line too long (106 > 100)
   --> tests/test_phase2_enhancements.py:190:101
    |
188 |                 overall_status="healthy",
189 |                 components={
190 |                     'sentiment': ComponentHealth("sentiment", "healthy", 0.9, datetime.now(timezone.utc)),
    |                                                                                                     ^^^^^^
191 |                     'meta_learning': ComponentHealth("meta_learning", "warning", 0.7, datetime.now(timezone.utc))
192 |                 },
    |

E501 Line too long (113 > 100)
   --> tests/test_phase2_enhancements.py:191:101
    |
189 |                 components={
190 |                     'sentiment': ComponentHealth("sentiment", "healthy", 0.9, datetime.now(timezone.utc)),
191 |                     'meta_learning': ComponentHealth("meta_learning", "warning", 0.7, datetime.now(timezone.utc))
    |                                                                                                     ^^^^^^^^^^^^^
192 |                 },
193 |                 alerts=["Test alert"],
    |

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:197:1
    |
195 |             )
196 |             mock_check.return_value = mock_health
197 |             
    | ^^^^^^^^^^^^
198 |             health_report = self.health_checker.get_current_health()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:199:1
    |
198 |             health_report = self.health_checker.get_current_health()
199 |             
    | ^^^^^^^^^^^^
200 |             # Check structure
201 |             self.assertIn("overall_status", health_report)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:206:1
    |
204 |             self.assertIn("metrics", health_report)
205 |             self.assertIn("timestamp", health_report)
206 |             
    | ^^^^^^^^^^^^
207 |             # Check content
208 |             self.assertEqual(health_report["overall_status"], "healthy")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:216:1
    |
214 | class TestConfigurationEnhancements(unittest.TestCase):
215 |     """Test enhanced configuration parameters."""
216 |     
    | ^^^^
217 |     def test_order_management_config(self):
218 |         """Test order management configuration parameters."""
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_phase2_enhancements.py:221:44
    |
219 |         required_params = [
220 |             'ORDER_TIMEOUT_SECONDS',
221 |             'ORDER_STALE_CLEANUP_INTERVAL', 
    |                                            ^
222 |             'ORDER_FILL_RATE_TARGET',
223 |             'ORDER_MAX_RETRY_ATTEMPTS'
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:225:1
    |
223 |             'ORDER_MAX_RETRY_ATTEMPTS'
224 |         ]
225 |         
    | ^^^^^^^^
226 |         for param in required_params:
227 |             self.assertTrue(hasattr(config, param), f"Missing parameter: {param}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:228:1
    |
226 |         for param in required_params:
227 |             self.assertTrue(hasattr(config, param), f"Missing parameter: {param}")
228 |         
    | ^^^^^^^^
229 |         # Test reasonable defaults
230 |         self.assertEqual(config.ORDER_TIMEOUT_SECONDS, 300)  # 5 minutes
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:234:1
    |
232 |         self.assertEqual(config.ORDER_FILL_RATE_TARGET, 0.80)  # 80%
233 |         self.assertEqual(config.ORDER_MAX_RETRY_ATTEMPTS, 3)
234 |     
    | ^^^^
235 |     def test_system_health_config(self):
236 |         """Test system health monitoring configuration parameters."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:243:1
    |
241 |             'SYSTEM_HEALTH_REPORT_PATH'
242 |         ]
243 |         
    | ^^^^^^^^
244 |         for param in required_params:
245 |             self.assertTrue(hasattr(config, param), f"Missing parameter: {param}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:246:1
    |
244 |         for param in required_params:
245 |             self.assertTrue(hasattr(config, param), f"Missing parameter: {param}")
246 |         
    | ^^^^^^^^
247 |         # Test reasonable defaults
248 |         self.assertEqual(config.SYSTEM_HEALTH_CHECK_INTERVAL, 60)  # 1 minute
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:255:1
    |
253 | class TestIntegrationScenarios(unittest.TestCase):
254 |     """Test integration scenarios for enhanced monitoring."""
255 |     
    | ^^^^
256 |     def test_monitoring_integration(self):
257 |         """Test that monitoring systems can work together."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:261:1
    |
259 |         order_monitor = OrderHealthMonitor()
260 |         health_checker = SystemHealthChecker()
261 |         
    | ^^^^^^^^
262 |         # Both should be able to coexist
263 |         self.assertIsNotNone(order_monitor)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:265:1
    |
263 |         self.assertIsNotNone(order_monitor)
264 |         self.assertIsNotNone(health_checker)
265 |         
    | ^^^^^^^^
266 |         # Test that they can generate reports without interfering
267 |         order_summary = order_monitor.get_health_summary()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:269:1
    |
267 |         order_summary = order_monitor.get_health_summary()
268 |         health_report = health_checker.get_current_health()
269 |         
    | ^^^^^^^^
270 |         self.assertIsInstance(order_summary, dict)
271 |         self.assertIsInstance(health_report, dict)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:272:1
    |
270 |         self.assertIsInstance(order_summary, dict)
271 |         self.assertIsInstance(health_report, dict)
272 |     
    | ^^^^
273 |     def test_phase1_and_phase2_compatibility(self):
274 |         """Test that Phase 1 and Phase 2 fixes work together."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:277:1
    |
275 |         # Import Phase 1 modules to ensure compatibility
276 |         with patch.dict(os.environ, test_env):
277 |             
    | ^^^^^^^^^^^^
278 |             # Test that enhanced sentiment analysis works with monitoring
279 |             health_checker = SystemHealthChecker()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:281:1
    |
279 |             health_checker = SystemHealthChecker()
280 |             sentiment_health = health_checker._check_sentiment_health()
281 |             
    | ^^^^^^^^^^^^
282 |             self.assertIsNotNone(sentiment_health)
283 |             self.assertEqual(sentiment_health.name, "sentiment")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:284:1
    |
282 |             self.assertIsNotNone(sentiment_health)
283 |             self.assertEqual(sentiment_health.name, "sentiment")
284 |             
    | ^^^^^^^^^^^^
285 |             # Test that meta-learning monitoring works
286 |             meta_health = health_checker._check_meta_learning_health()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_phase2_enhancements.py:287:1
    |
285 |             # Test that meta-learning monitoring works
286 |             meta_health = health_checker._check_meta_learning_health()
287 |             
    | ^^^^^^^^^^^^
288 |             self.assertIsNotNone(meta_health)
289 |             self.assertEqual(meta_health.name, "meta_learning")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_phase2_enhancements.py:294:31
    |
292 | if __name__ == '__main__':
293 |     # Run tests with minimal output
294 |     unittest.main(verbosity=2)
    |                               ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_portfolio.py:1:1
  |
1 | / import types
2 | | import pandas as pd
3 | | from ai_trading.core import bot_engine
  | |______________________________________^
  |
help: Organize imports

E501 Line too long (118 > 100)
  --> tests/test_portfolio.py:13:101
   |
12 |     orders = []
13 |     monkeypatch.setattr(bot_engine, "submit_order", lambda ctx, symbol, qty, side: orders.append((symbol, qty, side)))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^
14 |     monkeypatch.setattr(bot_engine, "is_market_open", lambda: True)
15 |     monkeypatch.setattr(bot_engine, "fetch_minute_df_safe", lambda s: pd.DataFrame({"close": [1]}, index=[pd.Timestamp("2023-01-01")]))
   |

E501 Line too long (135 > 100)
  --> tests/test_portfolio.py:15:101
   |
13 |     monkeypatch.setattr(bot_engine, "submit_order", lambda ctx, symbol, qty, side: orders.append((symbol, qty, side)))
14 |     monkeypatch.setattr(bot_engine, "is_market_open", lambda: True)
15 |     monkeypatch.setattr(bot_engine, "fetch_minute_df_safe", lambda s: pd.DataFrame({"close": [1]}, index=[pd.Timestamp("2023-01-01")]))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 |     monkeypatch.setattr(bot_engine, "_safe_trade", lambda *a, **k: None)
17 |     monkeypatch.setattr(bot_engine.prediction_executor, "submit", lambda fn, s: types.SimpleNamespace(result=lambda: fn(s)))
   |

E501 Line too long (124 > 100)
  --> tests/test_portfolio.py:17:101
   |
15 |     monkeypatch.setattr(bot_engine, "fetch_minute_df_safe", lambda s: pd.DataFrame({"close": [1]}, index=[pd.Timestamp("2023-01-01")]))
16 |     monkeypatch.setattr(bot_engine, "_safe_trade", lambda *a, **k: None)
17 |     monkeypatch.setattr(bot_engine.prediction_executor, "submit", lambda fn, s: types.SimpleNamespace(result=lambda: fn(s)))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
18 |     monkeypatch.setattr(bot_engine, "log_skip_cooldown", lambda *a, **k: None)
19 |     bot_engine.skipped_duplicates = types.SimpleNamespace(inc=lambda: None)
   |

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_integration.py:20:1
   |
18 | class TestPortfolioSignalFiltering:
19 |     """Test portfolio-level signal filtering integration."""
20 |     
   | ^^^^
21 |     def setup_method(self):
22 |         """Set up test fixtures."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_integration.py:24:1
   |
22 |         """Set up test fixtures."""
23 |         self.ctx = MockContext()
24 |         
   | ^^^^^^^^
25 |         # Create test signals
26 |         self.test_signals = [
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_portfolio_integration.py:28:62
   |
26 |         self.test_signals = [
27 |             MockSignal('AAPL', 'buy', 20),   # Small increase
28 |             MockSignal('MSFT', 'sell', 10),  # Small decrease  
   |                                                              ^^
29 |             MockSignal('GOOGL', 'buy', 100), # Large increase
30 |             MockSignal('TSLA', 'buy', 50),   # New position
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_integration.py:32:1
   |
30 |             MockSignal('TSLA', 'buy', 50),   # New position
31 |         ]
32 |     
   | ^^^^
33 |     def test_portfolio_signal_filtering_basic(self):
34 |         """Test basic portfolio signal filtering functionality."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_integration.py:39:1
   |
37 |             self.ctx
38 |         )
39 |         
   | ^^^^^^^^
40 |         # Should return a list (may be filtered)
41 |         assert isinstance(filtered_signals, list)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_integration.py:42:1
   |
40 |         # Should return a list (may be filtered)
41 |         assert isinstance(filtered_signals, list)
42 |         
   | ^^^^^^^^
43 |         # Should not crash and should handle all signals
44 |         assert len(filtered_signals) <= len(self.test_signals)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_integration.py:45:1
   |
43 |         # Should not crash and should handle all signals
44 |         assert len(filtered_signals) <= len(self.test_signals)
45 |         
   | ^^^^^^^^
46 |         # All returned signals should be from the original list
47 |         for signal in filtered_signals:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_integration.py:49:1
   |
47 |         for signal in filtered_signals:
48 |             assert signal in self.test_signals
49 |     
   | ^^^^
50 |     def test_portfolio_signal_filtering_with_positions(self):
51 |         """Test portfolio signal filtering with explicit positions."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_integration.py:57:1
   |
55 |             'GOOGL': 60.0
56 |         }
57 |         
   | ^^^^^^^^
58 |         filtered_signals = filter_signals_with_portfolio_optimization(
59 |             self.test_signals,
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_integration.py:63:1
   |
61 |             current_positions
62 |         )
63 |         
   | ^^^^^^^^
64 |         assert isinstance(filtered_signals, list)
65 |         assert len(filtered_signals) <= len(self.test_signals)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_integration.py:66:1
   |
64 |         assert isinstance(filtered_signals, list)
65 |         assert len(filtered_signals) <= len(self.test_signals)
66 |     
   | ^^^^
67 |     def test_portfolio_signal_filtering_empty_signals(self):
68 |         """Test portfolio signal filtering with empty signal list."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_integration.py:73:1
   |
71 |             self.ctx
72 |         )
73 |         
   | ^^^^^^^^
74 |         assert filtered_signals == []
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_integration.py:75:1
   |
74 |         assert filtered_signals == []
75 |     
   | ^^^^
76 |     def test_portfolio_signal_filtering_invalid_signals(self):
77 |         """Test portfolio signal filtering with invalid signals."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_integration.py:83:1
   |
81 |             MockSignal('MSFT', 'unknown', 20),  # Unknown side
82 |         ]
83 |         
   | ^^^^^^^^
84 |         # Should handle gracefully without crashing
85 |         filtered_signals = filter_signals_with_portfolio_optimization(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_integration.py:89:1
   |
87 |             self.ctx
88 |         )
89 |         
   | ^^^^^^^^
90 |         assert isinstance(filtered_signals, list)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_integration.py:91:1
   |
90 |         assert isinstance(filtered_signals, list)
91 |     
   | ^^^^
92 |     def test_churn_reduction_effectiveness(self):
93 |         """Test that portfolio filtering actually reduces churn."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_integration.py:101:1
    |
 99 |             quantity = 5 + (i % 10)  # Small quantities
100 |             high_churn_signals.append(MockSignal(symbol, side, quantity))
101 |         
    | ^^^^^^^^
102 |         filtered_signals = filter_signals_with_portfolio_optimization(
103 |             high_churn_signals,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_integration.py:106:1
    |
104 |             self.ctx
105 |         )
106 |         
    | ^^^^^^^^
107 |         # Should significantly reduce the number of signals
108 |         reduction_ratio = len(filtered_signals) / len(high_churn_signals)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_integration.py:109:1
    |
107 |         # Should significantly reduce the number of signals
108 |         reduction_ratio = len(filtered_signals) / len(high_churn_signals)
109 |         
    | ^^^^^^^^
110 |         # Expect at least some reduction (not necessarily 60-80% in test environment)
111 |         assert reduction_ratio <= 1.0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_integration.py:112:1
    |
110 |         # Expect at least some reduction (not necessarily 60-80% in test environment)
111 |         assert reduction_ratio <= 1.0
112 |         
    | ^^^^^^^^
113 |         # Log the results for verification
114 |         print(f"Churn reduction test: {len(high_churn_signals)} -> {len(filtered_signals)} "
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_integration.py:116:1
    |
114 |         print(f"Churn reduction test: {len(high_churn_signals)} -> {len(filtered_signals)} "
115 |               f"({reduction_ratio:.1%} passed)")
116 |     
    | ^^^^
117 |     def test_portfolio_optimization_fallback(self):
118 |         """Test graceful fallback when portfolio optimization fails."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_integration.py:121:1
    |
119 |         # Test with minimal context that might cause issues
120 |         minimal_ctx = type('MinimalContext', (), {})()
121 |         
    | ^^^^^^^^
122 |         # Should not crash and should return signals (potentially filtered)
123 |         filtered_signals = filter_signals_with_portfolio_optimization(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_integration.py:127:1
    |
125 |             minimal_ctx
126 |         )
127 |         
    | ^^^^^^^^
128 |         assert isinstance(filtered_signals, list)
129 |         # Portfolio optimization may filter signals even in limited environments
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_integration.py:135:1
    |
133 | class TestPortfolioRebalancingIntegration:
134 |     """Test integration with portfolio rebalancing functionality."""
135 |     
    | ^^^^
136 |     def setup_method(self):
137 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_integration.py:146:1
    |
144 |         }
145 |         self.ctx.last_portfolio_rebalance = None
146 |     
    | ^^^^
147 |     def test_rebalancing_integration(self):
148 |         """Test that portfolio optimization integrates with rebalancing logic."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_integration.py:153:1
    |
151 |             portfolio_first_rebalance,
152 |         )
153 |         
    | ^^^^^^^^
154 |         # Test position extraction
155 |         positions = _get_current_positions_for_rebalancing(self.ctx)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_integration.py:157:1
    |
155 |         positions = _get_current_positions_for_rebalancing(self.ctx)
156 |         assert isinstance(positions, dict)
157 |         
    | ^^^^^^^^
158 |         # Test portfolio-first rebalancing (should not crash)
159 |         try:
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_portfolio_integration.py:170:34
    |
169 | if __name__ == '__main__':
170 |     pytest.main([__file__, '-v'])
    |                                  ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_portfolio_optimization.py:6:1
  |
4 |   """
5 |
6 | / import pytest
7 | | import os
  | |_________^
8 |
9 |   # Set testing environment
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_portfolio_optimization.py:12:1
   |
10 |   os.environ['TESTING'] = '1'
11 |
12 | / from ai_trading.portfolio.optimizer import PortfolioOptimizer, PortfolioDecision, create_portfolio_optimizer  # AI-AGENT-REF: normaliz…
13 | | from ai_trading.execution.transaction_costs import TradeType, create_transaction_cost_calculator  # AI-AGENT-REF: normalized import
14 | | from ai_trading.strategies.regime_detector import MarketRegime, create_regime_detector
   | |______________________________________________________________________________________^
   |
help: Organize imports

E501 Line too long (143 > 100)
  --> tests/test_portfolio_optimization.py:12:101
   |
10 | …
11 | …
12 | …imizer, PortfolioDecision, create_portfolio_optimizer  # AI-AGENT-REF: normalized import
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 | …eType, create_transaction_cost_calculator  # AI-AGENT-REF: normalized import
14 | …tRegime, create_regime_detector
   |

E501 Line too long (131 > 100)
  --> tests/test_portfolio_optimization.py:13:101
   |
12 | …lioOptimizer, PortfolioDecision, create_portfolio_optimizer  # AI-AGENT-REF: normalized import
13 | …t TradeType, create_transaction_cost_calculator  # AI-AGENT-REF: normalized import
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 | … MarketRegime, create_regime_detector
   |

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_optimization.py:19:1
   |
17 | class TestPortfolioOptimizer:
18 |     """Test portfolio-level optimization and decision making."""
19 |     
   | ^^^^
20 |     def setup_method(self):
21 |         """Set up test fixtures."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_optimization.py:45:1
   |
43 |             }
44 |         }
45 |     
   | ^^^^
46 |     def test_portfolio_kelly_efficiency_calculation(self):
47 |         """Test portfolio Kelly efficiency calculation."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_optimization.py:53:1
   |
51 |             self.sample_market_data['prices']
52 |         )
53 |         
   | ^^^^^^^^
54 |         assert 0.0 <= efficiency <= 1.0
55 |         assert efficiency > 0  # Should have some efficiency with valid data
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_optimization.py:56:1
   |
54 |         assert 0.0 <= efficiency <= 1.0
55 |         assert efficiency > 0  # Should have some efficiency with valid data
56 |     
   | ^^^^
57 |     def test_correlation_impact_calculation(self):
58 |         """Test correlation impact calculation."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_optimization.py:64:1
   |
62 |             self.sample_market_data['correlations']
63 |         )
64 |         
   | ^^^^^^^^
65 |         assert 0.0 <= impact <= 1.0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_optimization.py:66:1
   |
65 |         assert 0.0 <= impact <= 1.0
66 |         
   | ^^^^^^^^
67 |         # Test with highly correlated new symbol
68 |         high_corr_data = {
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_optimization.py:72:1
   |
70 |         }
71 |         self.sample_market_data['correlations'].update(high_corr_data)
72 |         
   | ^^^^^^^^
73 |         high_impact = self.optimizer.calculate_correlation_impact(
74 |             'NVDA',
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_optimization.py:78:1
   |
76 |             self.sample_market_data['correlations']
77 |         )
78 |         
   | ^^^^^^^^
79 |         assert high_impact > impact  # Higher correlation should mean higher impact
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_optimization.py:80:1
   |
79 |         assert high_impact > impact  # Higher correlation should mean higher impact
80 |     
   | ^^^^
81 |     def test_trade_impact_evaluation(self):
82 |         """Test comprehensive trade impact evaluation."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_optimization.py:89:1
   |
87 |             self.sample_market_data
88 |         )
89 |         
   | ^^^^^^^^
90 |         # Validate analysis structure
91 |         assert hasattr(impact_analysis, 'expected_return_change')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_portfolio_optimization.py:96:1
   |
94 |         assert hasattr(impact_analysis, 'net_benefit')
95 |         assert hasattr(impact_analysis, 'confidence')
96 |         
   | ^^^^^^^^
97 |         # Validate ranges
98 |         assert 0.0 <= impact_analysis.confidence <= 1.0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:100:1
    |
 98 |         assert 0.0 <= impact_analysis.confidence <= 1.0
 99 |         assert impact_analysis.transaction_cost >= 0.0
100 |     
    | ^^^^
101 |     def test_portfolio_decision_making(self):
102 |         """Test portfolio-level trade decision making."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:109:1
    |
107 |             self.sample_market_data
108 |         )
109 |         
    | ^^^^^^^^
110 |         assert isinstance(decision, PortfolioDecision)
111 |         assert isinstance(reasoning, str)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:113:1
    |
111 |         assert isinstance(reasoning, str)
112 |         assert len(reasoning) > 0
113 |         
    | ^^^^^^^^
114 |         # Test with large position change (should likely be rejected)
115 |         decision_large, reasoning_large = self.optimizer.make_portfolio_decision(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:121:1
    |
119 |             self.sample_market_data
120 |         )
121 |         
    | ^^^^^^^^
122 |         # Large changes are more likely to be rejected or deferred
123 |         assert decision_large in [PortfolioDecision.REJECT, PortfolioDecision.DEFER]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:124:1
    |
122 |         # Large changes are more likely to be rejected or deferred
123 |         assert decision_large in [PortfolioDecision.REJECT, PortfolioDecision.DEFER]
124 |     
    | ^^^^
125 |     def test_rebalance_trigger_logic(self):
126 |         """Test rebalancing trigger logic."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:132:1
    |
130 |             'GOOGL': 0.25
131 |         }
132 |         
    | ^^^^^^^^
133 |         should_rebalance, reasoning = self.optimizer.should_trigger_rebalance(
134 |             self.sample_positions,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:138:1
    |
136 |             self.sample_market_data['prices']
137 |         )
138 |         
    | ^^^^^^^^
139 |         assert isinstance(should_rebalance, bool)
140 |         assert isinstance(reasoning, str)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:146:1
    |
144 | class TestTransactionCostCalculator:
145 |     """Test transaction cost calculation and profitability validation."""
146 |     
    | ^^^^
147 |     def setup_method(self):
148 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:158:1
    |
156 |             'volatility': {'AAPL': 0.025}   # 2.5% daily volatility
157 |         }
158 |     
    | ^^^^
159 |     def test_spread_cost_calculation(self):
160 |         """Test bid-ask spread cost calculation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:166:1
    |
164 |             self.sample_market_data
165 |         )
166 |         
    | ^^^^^^^^
167 |         assert spread_cost > 0
168 |         assert spread_cost < 100  # Should be reasonable relative to trade size
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:169:1
    |
167 |         assert spread_cost > 0
168 |         assert spread_cost < 100  # Should be reasonable relative to trade size
169 |         
    | ^^^^^^^^
170 |         # Test with missing quote data (should fallback gracefully)
171 |         no_quote_data = {'prices': {'AAPL': 150.0}}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:177:1
    |
175 |             no_quote_data
176 |         )
177 |         
    | ^^^^^^^^
178 |         assert fallback_cost > 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:179:1
    |
178 |         assert fallback_cost > 0
179 |     
    | ^^^^
180 |     def test_commission_calculation(self):
181 |         """Test commission calculation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:188:1
    |
186 |             trade_value
187 |         )
188 |         
    | ^^^^^^^^
189 |         assert commission >= 0
190 |         assert commission <= self.calculator.max_commission
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:191:1
    |
189 |         assert commission >= 0
190 |         assert commission <= self.calculator.max_commission
191 |     
    | ^^^^
192 |     def test_market_impact_calculation(self):
193 |         """Test market impact modeling."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:199:1
    |
197 |             self.sample_market_data
198 |         )
199 |         
    | ^^^^^^^^
200 |         assert temp_impact >= 0
201 |         assert perm_impact >= 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:203:1
    |
201 |         assert perm_impact >= 0
202 |         assert temp_impact >= perm_impact  # Temporary impact should be larger
203 |         
    | ^^^^^^^^
204 |         # Test smaller trade should have lower impact
205 |         temp_small, perm_small = self.calculator.calculate_market_impact(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:210:1
    |
208 |             self.sample_market_data
209 |         )
210 |         
    | ^^^^^^^^
211 |         assert temp_small < temp_impact
212 |         assert perm_small < perm_impact
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:213:1
    |
211 |         assert temp_small < temp_impact
212 |         assert perm_small < perm_impact
213 |     
    | ^^^^
214 |     def test_total_transaction_cost(self):
215 |         """Test comprehensive transaction cost calculation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:222:1
    |
220 |             self.sample_market_data
221 |         )
222 |         
    | ^^^^^^^^
223 |         # Validate structure
224 |         assert hasattr(cost_breakdown, 'spread_cost')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:229:1
    |
227 |         assert hasattr(cost_breakdown, 'total_cost')
228 |         assert hasattr(cost_breakdown, 'cost_percentage')
229 |         
    | ^^^^^^^^
230 |         # Validate values
231 |         assert cost_breakdown.total_cost > 0
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_portfolio_optimization.py:233:41
    |
231 |         assert cost_breakdown.total_cost > 0
232 |         assert cost_breakdown.total_cost == (
233 |             cost_breakdown.spread_cost + 
    |                                         ^
234 |             cost_breakdown.commission + 
235 |             cost_breakdown.market_impact + 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_portfolio_optimization.py:234:40
    |
232 |         assert cost_breakdown.total_cost == (
233 |             cost_breakdown.spread_cost + 
234 |             cost_breakdown.commission + 
    |                                        ^
235 |             cost_breakdown.market_impact + 
236 |             cost_breakdown.opportunity_cost + 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_portfolio_optimization.py:235:43
    |
233 |             cost_breakdown.spread_cost + 
234 |             cost_breakdown.commission + 
235 |             cost_breakdown.market_impact + 
    |                                           ^
236 |             cost_breakdown.opportunity_cost + 
237 |             cost_breakdown.borrowing_cost
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_portfolio_optimization.py:236:46
    |
234 |             cost_breakdown.commission + 
235 |             cost_breakdown.market_impact + 
236 |             cost_breakdown.opportunity_cost + 
    |                                              ^
237 |             cost_breakdown.borrowing_cost
238 |         )
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:240:1
    |
238 |         )
239 |         assert 0.0 <= cost_breakdown.cost_percentage <= 1.0
240 |     
    | ^^^^
241 |     def test_profitability_validation(self):
242 |         """Test trade profitability validation."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:250:1
    |
248 |             self.sample_market_data
249 |         )
250 |         
    | ^^^^^^^^
251 |         assert hasattr(profitable_analysis, 'is_profitable')
252 |         assert hasattr(profitable_analysis, 'net_expected_profit')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:254:1
    |
252 |         assert hasattr(profitable_analysis, 'net_expected_profit')
253 |         assert hasattr(profitable_analysis, 'safety_margin')
254 |         
    | ^^^^^^^^
255 |         # Test unprofitable trade
256 |         unprofitable_analysis = self.calculator.validate_trade_profitability(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:262:1
    |
260 |             self.sample_market_data
261 |         )
262 |         
    | ^^^^^^^^
263 |         assert not unprofitable_analysis.is_profitable
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:268:1
    |
266 | class TestRegimeDetector:
267 |     """Test market regime detection and dynamic threshold calculation."""
268 |     
    | ^^^^
269 |     def setup_method(self):
270 |         """Set up test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:282:1
    |
280 |             }
281 |         }
282 |     
    | ^^^^
283 |     def test_regime_detection(self):
284 |         """Test market regime detection."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:289:1
    |
287 |             'SPY'
288 |         )
289 |         
    | ^^^^^^^^
290 |         assert isinstance(regime, MarketRegime)
291 |         assert hasattr(metrics, 'trend_strength')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:294:1
    |
292 |         assert hasattr(metrics, 'volatility_level')
293 |         assert hasattr(metrics, 'regime_confidence')
294 |         
    | ^^^^^^^^
295 |         # Validate metric ranges
296 |         assert 0.0 <= metrics.trend_strength <= 1.0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:299:1
    |
297 |         assert 0.0 <= metrics.volatility_level <= 1.0
298 |         assert 0.0 <= metrics.regime_confidence <= 1.0
299 |     
    | ^^^^
300 |     def test_dynamic_threshold_calculation(self):
301 |         """Test dynamic threshold calculation based on regime."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:303:1
    |
301 |         """Test dynamic threshold calculation based on regime."""
302 |         regime, metrics = self.detector.detect_current_regime(self.sample_market_data)
303 |         
    | ^^^^^^^^
304 |         thresholds = self.detector.calculate_dynamic_thresholds(regime, metrics)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:305:1
    |
304 |         thresholds = self.detector.calculate_dynamic_thresholds(regime, metrics)
305 |         
    | ^^^^^^^^
306 |         assert hasattr(thresholds, 'rebalance_drift_threshold')
307 |         assert hasattr(thresholds, 'trade_frequency_multiplier')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:309:1
    |
307 |         assert hasattr(thresholds, 'trade_frequency_multiplier')
308 |         assert hasattr(thresholds, 'minimum_improvement_threshold')
309 |         
    | ^^^^^^^^
310 |         # Validate positive values
311 |         assert thresholds.rebalance_drift_threshold > 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:314:1
    |
312 |         assert thresholds.trade_frequency_multiplier > 0
313 |         assert thresholds.minimum_improvement_threshold > 0
314 |     
    | ^^^^
315 |     def test_regime_specific_adjustments(self):
316 |         """Test that different regimes produce different threshold adjustments."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:322:1
    |
320 |             self.detector._fallback_regime_detection()[1]
321 |         )
322 |         
    | ^^^^^^^^
323 |         # Test crisis regime
324 |         crisis_thresholds = self.detector.calculate_dynamic_thresholds(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:328:1
    |
326 |             self.detector._fallback_regime_detection()[1]
327 |         )
328 |         
    | ^^^^^^^^
329 |         # Crisis should have more conservative thresholds
330 |         assert crisis_thresholds.trade_frequency_multiplier < normal_thresholds.trade_frequency_multiplier
    |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
   --> tests/test_portfolio_optimization.py:330:101
    |
329 |         # Crisis should have more conservative thresholds
330 |         assert crisis_thresholds.trade_frequency_multiplier < normal_thresholds.trade_frequency_multiplier
    |                                                                                                     ^^^^^^
331 |         assert crisis_thresholds.minimum_improvement_threshold > normal_thresholds.minimum_improvement_threshold
332 |         assert crisis_thresholds.safety_margin_multiplier > normal_thresholds.safety_margin_multiplier
    |

E501 Line too long (112 > 100)
   --> tests/test_portfolio_optimization.py:331:101
    |
329 |         # Crisis should have more conservative thresholds
330 |         assert crisis_thresholds.trade_frequency_multiplier < normal_thresholds.trade_frequency_multiplier
331 |         assert crisis_thresholds.minimum_improvement_threshold > normal_thresholds.minimum_improvement_threshold
    |                                                                                                     ^^^^^^^^^^^^
332 |         assert crisis_thresholds.safety_margin_multiplier > normal_thresholds.safety_margin_multiplier
    |

E501 Line too long (102 > 100)
   --> tests/test_portfolio_optimization.py:332:101
    |
330 |         assert crisis_thresholds.trade_frequency_multiplier < normal_thresholds.trade_frequency_multiplier
331 |         assert crisis_thresholds.minimum_improvement_threshold > normal_thresholds.minimum_improvement_threshold
332 |         assert crisis_thresholds.safety_margin_multiplier > normal_thresholds.safety_margin_multiplier
    |                                                                                                     ^^
    |

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:337:1
    |
335 | class TestIntegration:
336 |     """Test integration between portfolio optimization components."""
337 |     
    | ^^^^
338 |     def setup_method(self):
339 |         """Set up integrated test fixtures."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:343:1
    |
341 |         self.cost_calculator = create_transaction_cost_calculator()
342 |         self.regime_detector = create_regime_detector()
343 |         
    | ^^^^^^^^
344 |         self.market_data = {
345 |             'prices': {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:365:1
    |
363 |             }
364 |         }
365 |         
    | ^^^^^^^^
366 |         self.current_positions = {
367 |             'AAPL': 100.0,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:370:1
    |
368 |             'MSFT': 80.0
369 |         }
370 |     
    | ^^^^
371 |     def test_integrated_portfolio_decision_workflow(self):
372 |         """Test complete portfolio decision workflow with all components."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:378:1
    |
376 |             'SPY'
377 |         )
378 |         
    | ^^^^^^^^
379 |         # 2. Calculate dynamic thresholds
380 |         thresholds = self.regime_detector.calculate_dynamic_thresholds(regime, metrics)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:381:1
    |
379 |         # 2. Calculate dynamic thresholds
380 |         thresholds = self.regime_detector.calculate_dynamic_thresholds(regime, metrics)
381 |         
    | ^^^^^^^^
382 |         # 3. Update optimizer with dynamic thresholds
383 |         optimizer = PortfolioOptimizer(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:387:1
    |
385 |             rebalance_drift_threshold=thresholds.rebalance_drift_threshold
386 |         )
387 |         
    | ^^^^^^^^
388 |         # 4. Make portfolio decision
389 |         decision, reasoning = optimizer.make_portfolio_decision(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:395:1
    |
393 |             self.market_data
394 |         )
395 |         
    | ^^^^^^^^
396 |         # 5. Validate transaction costs if trade is approved
397 |         if decision == PortfolioDecision.APPROVE:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:404:1
    |
402 |                 self.market_data
403 |             )
404 |             
    | ^^^^^^^^^^^^
405 |             assert isinstance(profitability.is_profitable, bool)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:406:1
    |
405 |             assert isinstance(profitability.is_profitable, bool)
406 |         
    | ^^^^^^^^
407 |         assert isinstance(decision, PortfolioDecision)
408 |         assert len(reasoning) > 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:409:1
    |
407 |         assert isinstance(decision, PortfolioDecision)
408 |         assert len(reasoning) > 0
409 |     
    | ^^^^
410 |     def test_churn_reduction_validation(self):
411 |         """Test that the system actually reduces trading frequency."""
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_portfolio_optimization.py:415:46
    |
413 |         trade_proposals = [
414 |             ('AAPL', 105.0),  # Small change
415 |             ('AAPL', 110.0),  # Medium change  
    |                                              ^^
416 |             ('MSFT', 85.0),   # Small change
417 |             ('MSFT', 90.0),   # Medium change
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:419:1
    |
417 |             ('MSFT', 90.0),   # Medium change
418 |         ]
419 |         
    | ^^^^^^^^
420 |         approved_trades = 0
421 |         rejected_trades = 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:423:1
    |
421 |         rejected_trades = 0
422 |         deferred_trades = 0
423 |         
    | ^^^^^^^^
424 |         for symbol, new_position in trade_proposals:
425 |             decision, _ = self.optimizer.make_portfolio_decision(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:431:1
    |
429 |                 self.market_data
430 |             )
431 |             
    | ^^^^^^^^^^^^
432 |             if decision == PortfolioDecision.APPROVE:
433 |                 approved_trades += 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_portfolio_optimization.py:438:1
    |
436 |             elif decision == PortfolioDecision.DEFER:
437 |                 deferred_trades += 1
438 |         
    | ^^^^^^^^
439 |         # System should reject/defer more trades than approve (churn reduction)
440 |         assert (rejected_trades + deferred_trades) >= approved_trades
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_portfolio_optimization.py:444:34
    |
443 | if __name__ == '__main__':
444 |     pytest.main([__file__, '-v'])
    |                                  ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_portfolio_snapshot.py:1:1
  |
1 | / import json
2 | | import os
3 | | import pytest
4 | | from ai_trading.core import bot_engine
  | |______________________________________^
5 |
6 |   @pytest.mark.smoke
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_position_holding.py:3:1
  |
1 |   """Test position holding logic and meta-learning triggers."""
2 |
3 | / import sys
4 | | import os
5 | | from unittest.mock import Mock, patch
  | |_____________________________________^
6 |
7 |   # Add the project root to Python path
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:13:1
   |
11 |     """Test that profitable positions are held."""
12 |     from ai_trading.position.legacy_manager import PositionManager
13 |     
   | ^^^^
14 |     # Create mock context
15 |     ctx = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:18:1
   |
16 |     ctx.data_fetcher = Mock()
17 |     ctx.api = Mock()
18 |     
   | ^^^^
19 |     # Mock position data
20 |     position = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:24:1
   |
22 |     position.qty = 100
23 |     position.avg_entry_price = 150.0
24 |     
   | ^^^^
25 |     # Mock data fetcher to return empty data (for testing fallback)
26 |     ctx.data_fetcher.get_minute_df.return_value = Mock()
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_position_holding.py:28:56
   |
26 |     ctx.data_fetcher.get_minute_df.return_value = Mock()
27 |     ctx.data_fetcher.get_minute_df.return_value.empty = True
28 |     ctx.data_fetcher.get_daily_df.return_value = Mock() 
   |                                                        ^
29 |     ctx.data_fetcher.get_daily_df.return_value.empty = True
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:30:1
   |
28 |     ctx.data_fetcher.get_daily_df.return_value = Mock() 
29 |     ctx.data_fetcher.get_daily_df.return_value.empty = True
30 |     
   | ^^^^
31 |     # Create position manager
32 |     pm = PositionManager(ctx)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:33:1
   |
31 |     # Create position manager
32 |     pm = PositionManager(ctx)
33 |     
   | ^^^^
34 |     # Test holding profitable position (>5% gain)
35 |     result = pm.should_hold_position("AAPL", position, 8.5, 2)
   |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `True`; use `result:` for truth checks
  --> tests/test_position_holding.py:36:12
   |
34 |     # Test holding profitable position (>5% gain)
35 |     result = pm.should_hold_position("AAPL", position, 8.5, 2)
36 |     assert result == True, "Should hold profitable position with >5% gain"
   |            ^^^^^^^^^^^^^^
37 |     
38 |     # Test holding new position (<3 days)
   |
help: Replace with `result`

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:37:1
   |
35 |     result = pm.should_hold_position("AAPL", position, 8.5, 2)
36 |     assert result == True, "Should hold profitable position with >5% gain"
37 |     
   | ^^^^
38 |     # Test holding new position (<3 days)
39 |     result = pm.should_hold_position("AAPL", position, 2.0, 1)
   |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `True`; use `result:` for truth checks
  --> tests/test_position_holding.py:40:12
   |
38 |     # Test holding new position (<3 days)
39 |     result = pm.should_hold_position("AAPL", position, 2.0, 1)
40 |     assert result == True, "Should hold new position for at least 3 days"
   |            ^^^^^^^^^^^^^^
41 |     
42 |     # Test not holding losing position
   |
help: Replace with `result`

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:41:1
   |
39 |     result = pm.should_hold_position("AAPL", position, 2.0, 1)
40 |     assert result == True, "Should hold new position for at least 3 days"
41 |     
   | ^^^^
42 |     # Test not holding losing position
43 |     result = pm.should_hold_position("AAPL", position, -3.0, 5)
   |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `False`; use `not result:` for false checks
  --> tests/test_position_holding.py:44:12
   |
42 |     # Test not holding losing position
43 |     result = pm.should_hold_position("AAPL", position, -3.0, 5)
44 |     assert result == False, "Should not hold losing position after min hold period"
   |            ^^^^^^^^^^^^^^^
   |
help: Replace with `not result`

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:50:1
   |
48 |     """Test position hold signal generation."""
49 |     from ai_trading.signals import generate_position_hold_signals
50 |     
   | ^^^^
51 |     # Create mock context with position manager
52 |     ctx = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:54:1
   |
52 |     ctx = Mock()
53 |     ctx.position_manager = Mock()
54 |     
   | ^^^^
55 |     # Mock current positions
56 |     positions = [
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:60:1
   |
58 |         Mock(symbol="GOOGL", qty=50, avg_entry_price=2800.0),
59 |     ]
60 |     
   | ^^^^
61 |     # Mock hold signals from position manager
62 |     ctx.position_manager.get_hold_signals.return_value = {
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:66:1
   |
64 |         "GOOGL": "sell"
65 |     }
66 |     
   | ^^^^
67 |     # Test signal generation
68 |     signals = generate_position_hold_signals(ctx, positions)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:69:1
   |
67 |     # Test signal generation
68 |     signals = generate_position_hold_signals(ctx, positions)
69 |     
   | ^^^^
70 |     assert signals == {"AAPL": "hold", "GOOGL": "sell"}
71 |     ctx.position_manager.get_hold_signals.assert_called_once_with(positions)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:77:1
   |
75 |     """Test that signals are enhanced with position holding logic."""
76 |     from ai_trading.signals import enhance_signals_with_position_logic
77 |     
   | ^^^^
78 |     # Create mock signals
79 |     signal1 = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:82:1
   |
80 |     signal1.symbol = "AAPL"
81 |     signal1.side = "sell"
82 |     
   | ^^^^
83 |     signal2 = Mock()
84 |     signal2.symbol = "GOOGL" 
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_position_holding.py:84:29
   |
83 |     signal2 = Mock()
84 |     signal2.symbol = "GOOGL" 
   |                             ^
85 |     signal2.side = "buy"
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:86:1
   |
84 |     signal2.symbol = "GOOGL" 
85 |     signal2.side = "buy"
86 |     
   | ^^^^
87 |     signals = [signal1, signal2]
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:88:1
   |
87 |     signals = [signal1, signal2]
88 |     
   | ^^^^
89 |     # Mock context
90 |     ctx = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:91:1
   |
89 |     # Mock context
90 |     ctx = Mock()
91 |     
   | ^^^^
92 |     # Mock hold signals - AAPL should be held, GOOGL can be sold/bought
93 |     hold_signals = {
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding.py:97:1
   |
95 |         "GOOGL": "sell"
96 |     }
97 |     
   | ^^^^
98 |     # Test enhancement
99 |     enhanced = enhance_signals_with_position_logic(signals, ctx, hold_signals)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:100:1
    |
 98 |     # Test enhancement
 99 |     enhanced = enhance_signals_with_position_logic(signals, ctx, hold_signals)
100 |     
    | ^^^^
101 |     # AAPL sell signal should be filtered out (converted to hold)
102 |     # GOOGL buy signal should be filtered out (sell pending)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:111:1
    |
109 |          patch('meta_learning.pd') as mock_pd, \
110 |          patch('ai_trading.meta_learning.Path') as mock_path:
111 |         
    | ^^^^^^^^
112 |         from ai_trading.meta_learning import trigger_meta_learning_conversion
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:113:1
    |
112 |         from ai_trading.meta_learning import trigger_meta_learning_conversion
113 |         
    | ^^^^^^^^
114 |         # Mock config
115 |         mock_config.TRADE_LOG_FILE = '/tmp/test_trades.csv'
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:116:1
    |
114 |         # Mock config
115 |         mock_config.TRADE_LOG_FILE = '/tmp/test_trades.csv'
116 |         
    | ^^^^^^^^
117 |         # Mock file exists
118 |         mock_path_instance = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:121:1
    |
119 |         mock_path_instance.exists.return_value = True
120 |         mock_path.return_value = mock_path_instance
121 |         
    | ^^^^^^^^
122 |         # Mock quality report
123 |         with patch('meta_learning.validate_trade_data_quality') as mock_validate:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:129:1
    |
127 |                 'mixed_format_detected': True
128 |             }
129 |             
    | ^^^^^^^^^^^^
130 |             # Mock DataFrame and conversion
131 |             mock_df = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:133:1
    |
131 |             mock_df = Mock()
132 |             mock_pd.read_csv.return_value = mock_df
133 |             
    | ^^^^^^^^^^^^
134 |             with patch('meta_learning._convert_audit_to_meta_format') as mock_convert:
135 |                 mock_converted_df = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:138:1
    |
136 |                 mock_converted_df.empty = False
137 |                 mock_convert.return_value = mock_converted_df
138 |                 
    | ^^^^^^^^^^^^^^^^
139 |                 # Test trade data
140 |                 trade_data = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:149:1
    |
147 |                     'status': 'filled'
148 |                 }
149 |                 
    | ^^^^^^^^^^^^^^^^
150 |                 # Test trigger
151 |                 result = trigger_meta_learning_conversion(trade_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:152:1
    |
150 |                 # Test trigger
151 |                 result = trigger_meta_learning_conversion(trade_data)
152 |                 
    | ^^^^^^^^^^^^^^^^
153 |                 assert result == True, "Meta-learning conversion should succeed"
154 |                 mock_validate.assert_called_once()
    |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `True`; use `result:` for truth checks
   --> tests/test_position_holding.py:153:24
    |
151 |                 result = trigger_meta_learning_conversion(trade_data)
152 |                 
153 |                 assert result == True, "Meta-learning conversion should succeed"
    |                        ^^^^^^^^^^^^^^
154 |                 mock_validate.assert_called_once()
155 |                 mock_convert.assert_called_once()
    |
help: Replace with `result`

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:161:1
    |
159 |     """Test position manager cleanup of stale positions."""
160 |     from ai_trading.position.legacy_manager import PositionManager
161 |     
    | ^^^^
162 |     # Create mock context
163 |     ctx = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:165:1
    |
163 |     ctx = Mock()
164 |     ctx.api = Mock()
165 |     
    | ^^^^
166 |     # Mock current positions (only AAPL exists now)
167 |     current_positions = [Mock(symbol="AAPL")]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:169:1
    |
167 |     current_positions = [Mock(symbol="AAPL")]
168 |     ctx.api.get_all_positions.return_value = current_positions
169 |     
    | ^^^^
170 |     # Create position manager with existing tracked positions
171 |     pm = PositionManager(ctx)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:177:1
    |
175 |         "MSFT": Mock()    # This should be cleaned up
176 |     }
177 |     
    | ^^^^
178 |     # Test cleanup
179 |     pm.cleanup_stale_positions()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:180:1
    |
178 |     # Test cleanup
179 |     pm.cleanup_stale_positions()
180 |     
    | ^^^^
181 |     # Only AAPL should remain
182 |     assert "AAPL" in pm.positions
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_position_holding.py:188:45
    |
187 | def test_position_score_calculation():
188 |     """Test position scoring calculation.""" 
    |                                             ^
189 |     from ai_trading.position.legacy_manager import PositionManager
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:190:1
    |
188 |     """Test position scoring calculation.""" 
189 |     from ai_trading.position.legacy_manager import PositionManager
190 |     
    | ^^^^
191 |     # Create mock context
192 |     ctx = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:194:1
    |
192 |     ctx = Mock()
193 |     ctx.data_fetcher = Mock()
194 |     
    | ^^^^
195 |     # Mock empty data for fallback testing
196 |     empty_df = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:200:1
    |
198 |     ctx.data_fetcher.get_minute_df.return_value = empty_df
199 |     ctx.data_fetcher.get_daily_df.return_value = empty_df
200 |     
    | ^^^^
201 |     # Create position manager
202 |     pm = PositionManager(ctx)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:203:1
    |
201 |     # Create position manager
202 |     pm = PositionManager(ctx)
203 |     
    | ^^^^
204 |     # Mock position data
205 |     position = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding.py:208:1
    |
206 |     position.avg_entry_price = 100.0
207 |     position.qty = 100
208 |     
    | ^^^^
209 |     # Test with empty data (should return 0.0)
210 |     score = pm.calculate_position_score("AAPL", position)
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_position_holding.py:218:51
    |
216 |     test_position_manager_should_hold_profit()
217 |     test_position_hold_signals_generation()
218 |     test_signals_enhancement_with_position_logic() 
    |                                                   ^
219 |     test_meta_learning_trigger()
220 |     test_position_manager_cleanup()
    |
help: Remove trailing whitespace

W292 [*] No newline at end of file
   --> tests/test_position_holding.py:222:66
    |
220 |     test_position_manager_cleanup()
221 |     test_position_score_calculation()
222 |     print("All position holding and meta-learning tests passed!")
    |                                                                  ^
    |
help: Add trailing newline

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:20:1
   |
18 | def test_position_holding_standalone():
19 |     """Test standalone position holding functions."""
20 |     
   | ^^^^
21 |     # Test the standalone should_hold_position function
22 |     from ai_trading.position.legacy_manager import should_hold_position
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:23:1
   |
21 |     # Test the standalone should_hold_position function
22 |     from ai_trading.position.legacy_manager import should_hold_position
23 |     
   | ^^^^
24 |     # Test holding profitable position
25 |     result = should_hold_position("AAPL", None, 8.5, 2)
   |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `True`; use `result:` for truth checks
  --> tests/test_position_holding_simple.py:26:12
   |
24 |     # Test holding profitable position
25 |     result = should_hold_position("AAPL", None, 8.5, 2)
26 |     assert result == True, "Should hold profitable position with >5% gain"
   |            ^^^^^^^^^^^^^^
27 |     
28 |     # Test holding new position
   |
help: Replace with `result`

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:27:1
   |
25 |     result = should_hold_position("AAPL", None, 8.5, 2)
26 |     assert result == True, "Should hold profitable position with >5% gain"
27 |     
   | ^^^^
28 |     # Test holding new position
29 |     result = should_hold_position("AAPL", None, 2.0, 1)
   |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `True`; use `result:` for truth checks
  --> tests/test_position_holding_simple.py:30:12
   |
28 |     # Test holding new position
29 |     result = should_hold_position("AAPL", None, 2.0, 1)
30 |     assert result == True, "Should hold new position for at least 3 days"
   |            ^^^^^^^^^^^^^^
31 |     
32 |     # Test not holding old losing position
   |
help: Replace with `result`

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:31:1
   |
29 |     result = should_hold_position("AAPL", None, 2.0, 1)
30 |     assert result == True, "Should hold new position for at least 3 days"
31 |     
   | ^^^^
32 |     # Test not holding old losing position
33 |     result = should_hold_position("AAPL", None, -3.0, 5)
   |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `False`; use `not result:` for false checks
  --> tests/test_position_holding_simple.py:34:12
   |
32 |     # Test not holding old losing position
33 |     result = should_hold_position("AAPL", None, -3.0, 5)
34 |     assert result == False, "Should not hold losing position after min hold period"
   |            ^^^^^^^^^^^^^^^
35 |     
36 |     print("✓ Position holding logic tests passed")
   |
help: Replace with `not result`

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:35:1
   |
33 |     result = should_hold_position("AAPL", None, -3.0, 5)
34 |     assert result == False, "Should not hold losing position after min hold period"
35 |     
   | ^^^^
36 |     print("✓ Position holding logic tests passed")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:41:1
   |
39 | def test_position_score_standalone():
40 |     """Test standalone position scoring."""
41 |     
   | ^^^^
42 |     from ai_trading.position.legacy_manager import calculate_position_score
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:43:1
   |
42 |     from ai_trading.position.legacy_manager import calculate_position_score
43 |     
   | ^^^^
44 |     # Test with mock position
45 |     position = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:47:1
   |
45 |     position = Mock()
46 |     position.qty = 100
47 |     
   | ^^^^
48 |     # Should return some score based on quantity
49 |     score = calculate_position_score("AAPL", position)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:52:1
   |
50 |     assert isinstance(score, float), "Should return a float score"
51 |     assert 0.0 <= score <= 1.0, "Score should be between 0 and 1"
52 |     
   | ^^^^
53 |     print("✓ Position scoring tests passed")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:58:1
   |
56 | def test_meta_learning_functions():
57 |     """Test meta-learning conversion functions."""
58 |     
   | ^^^^
59 |     with patch('meta_learning.config') as mock_config:
60 |         mock_config.TRADE_LOG_FILE = '/tmp/test_trades.csv'
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:61:1
   |
59 |     with patch('meta_learning.config') as mock_config:
60 |         mock_config.TRADE_LOG_FILE = '/tmp/test_trades.csv'
61 |         
   | ^^^^^^^^
62 |         from ai_trading.meta_learning import convert_audit_to_meta
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:63:1
   |
62 |         from ai_trading.meta_learning import convert_audit_to_meta
63 |         
   | ^^^^^^^^
64 |         # Test single conversion
65 |         trade_data = {
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:73:1
   |
71 |             'order_id': 'test-123'
72 |         }
73 |         
   | ^^^^^^^^
74 |         result = convert_audit_to_meta(trade_data)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:75:1
   |
74 |         result = convert_audit_to_meta(trade_data)
75 |         
   | ^^^^^^^^
76 |         assert result is not None, "Conversion should return data"
77 |         assert result['symbol'] == 'AAPL', "Symbol should be preserved"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:81:1
   |
79 |         assert result['side'] == 'buy', "Side should be preserved"
80 |         assert result['classification'] == 'converted', "Should be marked as converted"
81 |         
   | ^^^^^^^^
82 |         print("✓ Meta-learning conversion tests passed")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:87:1
   |
85 | def test_signal_filtering():
86 |     """Test signal filtering with mock data."""
87 |     
   | ^^^^
88 |     # Mock the signals module to avoid import issues
89 |     with patch('sys.modules', {'signals': Mock()}):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:90:1
   |
88 |     # Mock the signals module to avoid import issues
89 |     with patch('sys.modules', {'signals': Mock()}):
90 |         
   | ^^^^^^^^
91 |         # Test basic signal filtering logic
92 |         signals = [
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_holding_simple.py:97:1
   |
95 |             {'symbol': 'MSFT', 'side': 'buy'}
96 |         ]
97 |         
   | ^^^^^^^^
98 |         hold_signals = {
99 |             'AAPL': 'hold',  # Should filter out sell signal
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding_simple.py:102:1
    |
100 |             'GOOGL': 'sell'  # Should filter out buy signal
101 |         }
102 |         
    | ^^^^^^^^
103 |         # Simulate filtering logic
104 |         filtered_signals = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding_simple.py:108:1
    |
106 |             symbol = signal['symbol']
107 |             side = signal['side']
108 |             
    | ^^^^^^^^^^^^
109 |             if symbol in hold_signals:
110 |                 hold_action = hold_signals[symbol]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding_simple.py:115:1
    |
113 |                 elif hold_action == 'sell' and side == 'buy':
114 |                     continue  # Filter out buy signal when sell pending
115 |             
    | ^^^^^^^^^^^^
116 |             filtered_signals.append(signal)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding_simple.py:117:1
    |
116 |             filtered_signals.append(signal)
117 |         
    | ^^^^^^^^
118 |         # Should only have MSFT buy signal remaining
119 |         assert len(filtered_signals) == 1, "Should filter out 2 signals"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_holding_simple.py:121:1
    |
119 |         assert len(filtered_signals) == 1, "Should filter out 2 signals"
120 |         assert filtered_signals[0]['symbol'] == 'MSFT', "MSFT signal should remain"
121 |         
    | ^^^^^^^^
122 |         print("✓ Signal filtering tests passed")
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_position_holding_simple.py:128:41
    |
126 |     try:
127 |         test_position_holding_standalone()
128 |         test_position_score_standalone() 
    |                                         ^
129 |         test_meta_learning_functions()
130 |         test_signal_filtering()
    |
help: Remove trailing whitespace

W292 [*] No newline at end of file
   --> tests/test_position_holding_simple.py:136:20
    |
134 |         import traceback
135 |         traceback.print_exc()
136 |         sys.exit(1)
    |                    ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_position_intelligence.py:6:1
   |
 4 |   """
 5 |
 6 | / import os
 7 | | import sys
 8 | | import logging
   | |______________^
 9 |
10 |   # Set up basic logging
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:17:1
   |
15 |     print("🧪 Testing Intelligent Position Management Components")
16 |     print("=" * 60)
17 |     
   | ^^^^
18 |     # Add position module to path
19 |     position_path = os.path.join(os.path.dirname(__file__), 'ai_trading', 'position')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:22:1
   |
20 |     if position_path not in sys.path:
21 |         sys.path.insert(0, position_path)
22 |     
   | ^^^^
23 |     try:
24 |         # Test 1: Market Regime Detection
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_position_intelligence.py:26:9
   |
24 |         # Test 1: Market Regime Detection
25 |         print("\n1. Testing Market Regime Detection")
26 |         from market_regime import MarketRegimeDetector, MarketRegime
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
27 |         
28 |         detector = MarketRegimeDetector()
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:27:1
   |
25 |         print("\n1. Testing Market Regime Detection")
26 |         from market_regime import MarketRegimeDetector, MarketRegime
27 |         
   | ^^^^^^^^
28 |         detector = MarketRegimeDetector()
29 |         params = detector.get_regime_parameters(MarketRegime.TRENDING_BULL)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:30:1
   |
28 |         detector = MarketRegimeDetector()
29 |         params = detector.get_regime_parameters(MarketRegime.TRENDING_BULL)
30 |         
   | ^^^^^^^^
31 |         print(f"   ✓ Regime parameters for trending bull: {len(params)} parameters")
32 |         print(f"   ✓ Profit taking patience: {params.get('profit_taking_patience', 'N/A')}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:34:1
   |
32 |         print(f"   ✓ Profit taking patience: {params.get('profit_taking_patience', 'N/A')}")
33 |         print(f"   ✓ Stop distance multiplier: {params.get('stop_distance_multiplier', 'N/A')}")
34 |         
   | ^^^^^^^^
35 |         # Test 2: Technical Signal Analysis
36 |         print("\n2. Testing Technical Signal Analysis")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:38:1
   |
36 |         print("\n2. Testing Technical Signal Analysis")
37 |         from technical_analyzer import TechnicalSignalAnalyzer
38 |         
   | ^^^^^^^^
39 |         analyzer = TechnicalSignalAnalyzer()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:40:1
   |
39 |         analyzer = TechnicalSignalAnalyzer()
40 |         
   | ^^^^^^^^
41 |         # Test RSI calculation with mock data
42 |         # Test with trending price data
   |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
  --> tests/test_position_intelligence.py:43:101
   |
41 |         # Test RSI calculation with mock data
42 |         # Test with trending price data
43 |         price_data = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]
   |                                                                                                     ^
44 |         mock_prices = MockSeries(price_data)
   |

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:45:1
   |
43 |         price_data = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]
44 |         mock_prices = MockSeries(price_data)
45 |         
   | ^^^^^^^^
46 |         rsi = analyzer._calculate_rsi(mock_prices, 14)
47 |         print(f"   ✓ RSI calculation: {rsi:.2f} (trending up)")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:48:1
   |
46 |         rsi = analyzer._calculate_rsi(mock_prices, 14)
47 |         print(f"   ✓ RSI calculation: {rsi:.2f} (trending up)")
48 |         
   | ^^^^^^^^
49 |         # Test 3: Trailing Stop Management
50 |         print("\n3. Testing Trailing Stop Management")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:52:1
   |
50 |         print("\n3. Testing Trailing Stop Management")
51 |         from trailing_stops import TrailingStopManager
52 |         
   | ^^^^^^^^
53 |         stop_manager = TrailingStopManager()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:54:1
   |
53 |         stop_manager = TrailingStopManager()
54 |         
   | ^^^^^^^^
55 |         # Test stop distance calculation
56 |         initial_distance = stop_manager.base_trail_percent
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:58:1
   |
56 |         initial_distance = stop_manager.base_trail_percent
57 |         print(f"   ✓ Base trailing distance: {initial_distance}%")
58 |         
   | ^^^^^^^^
59 |         # Test momentum multiplier
60 |         multiplier = stop_manager._calculate_momentum_multiplier('AAPL', None)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:62:1
   |
60 |         multiplier = stop_manager._calculate_momentum_multiplier('AAPL', None)
61 |         print(f"   ✓ Momentum multiplier: {multiplier}")
62 |         
   | ^^^^^^^^
63 |         # Test time decay
64 |         time_multiplier = stop_manager._calculate_time_decay_multiplier(10)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:66:1
   |
64 |         time_multiplier = stop_manager._calculate_time_decay_multiplier(10)
65 |         print(f"   ✓ Time decay multiplier (10 days): {time_multiplier}")
66 |         
   | ^^^^^^^^
67 |         # Test 4: Profit Taking Engine
68 |         print("\n4. Testing Profit Taking Engine")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:70:1
   |
68 |         print("\n4. Testing Profit Taking Engine")
69 |         from profit_taking import ProfitTakingEngine
70 |         
   | ^^^^^^^^
71 |         profit_engine = ProfitTakingEngine()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:72:1
   |
71 |         profit_engine = ProfitTakingEngine()
72 |         
   | ^^^^^^^^
73 |         # Test profit velocity calculation
74 |         velocity = profit_engine.calculate_profit_velocity('AAPL')  # Will return 0.0 without plan
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:76:1
   |
74 |         velocity = profit_engine.calculate_profit_velocity('AAPL')  # Will return 0.0 without plan
75 |         print(f"   ✓ Profit velocity calculation: {velocity}")
76 |         
   | ^^^^^^^^
77 |         # Test percentage targets creation
78 |         targets = profit_engine._create_percentage_targets(100.0, 100)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:80:1
   |
78 |         targets = profit_engine._create_percentage_targets(100.0, 100)
79 |         print(f"   ✓ Created {len(targets)} percentage-based profit targets")
80 |         
   | ^^^^^^^^
81 |         # Test 5: Portfolio Correlation Analysis
82 |         print("\n5. Testing Portfolio Correlation Analysis")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:84:1
   |
82 |         print("\n5. Testing Portfolio Correlation Analysis")
83 |         from correlation_analyzer import PortfolioCorrelationAnalyzer
84 |         
   | ^^^^^^^^
85 |         corr_analyzer = PortfolioCorrelationAnalyzer()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:86:1
   |
85 |         corr_analyzer = PortfolioCorrelationAnalyzer()
86 |         
   | ^^^^^^^^
87 |         # Test sector classification
88 |         sector = corr_analyzer._get_symbol_sector('AAPL')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:90:1
   |
88 |         sector = corr_analyzer._get_symbol_sector('AAPL')
89 |         print(f"   ✓ AAPL sector classification: {sector}")
90 |         
   | ^^^^^^^^
91 |         sector = corr_analyzer._get_symbol_sector('JPM')
92 |         print(f"   ✓ JPM sector classification: {sector}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:93:1
   |
91 |         sector = corr_analyzer._get_symbol_sector('JPM')
92 |         print(f"   ✓ JPM sector classification: {sector}")
93 |         
   | ^^^^^^^^
94 |         # Test concentration classification
95 |         level = corr_analyzer._classify_position_concentration(45.0)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_position_intelligence.py:97:1
   |
95 |         level = corr_analyzer._classify_position_concentration(45.0)
96 |         print(f"   ✓ 45% position concentration level: {level.value}")
97 |         
   | ^^^^^^^^
98 |         # Test 6: Intelligent Position Manager
99 |         print("\n6. Testing Intelligent Position Manager")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:101:1
    |
 99 |         print("\n6. Testing Intelligent Position Manager")
100 |         from intelligent_manager import IntelligentPositionManager
101 |         
    | ^^^^^^^^
102 |         manager = IntelligentPositionManager()
103 |         print(f"   ✓ Initialized with {len(manager.analysis_weights)} analysis components")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:104:1
    |
102 |         manager = IntelligentPositionManager()
103 |         print(f"   ✓ Initialized with {len(manager.analysis_weights)} analysis components")
104 |         
    | ^^^^^^^^
105 |         # Test action determination
106 |         action, confidence, urgency = manager._determine_action_from_scores(0.8, 0.2, 0.1)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:108:1
    |
106 |         action, confidence, urgency = manager._determine_action_from_scores(0.8, 0.2, 0.1)
107 |         print(f"   ✓ Action determination: {action.value} (confidence: {confidence:.2f})")
108 |         
    | ^^^^^^^^
109 |         print("\n" + "=" * 60)
110 |         print("🎉 ALL INTELLIGENT POSITION MANAGEMENT COMPONENTS WORKING!")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:112:1
    |
110 |         print("🎉 ALL INTELLIGENT POSITION MANAGEMENT COMPONENTS WORKING!")
111 |         print("🚀 Ready for advanced position holding strategies!")
112 |         
    | ^^^^^^^^
113 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:114:1
    |
113 |         return True
114 |         
    | ^^^^^^^^
115 |     except Exception as e:
116 |         print(f"\n❌ Test failed: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:125:1
    |
123 |     print("\n🔗 Testing Integration Scenarios")
124 |     print("=" * 40)
125 |     
    | ^^^^
126 |     try:
127 |         position_path = os.path.join(os.path.dirname(__file__), 'ai_trading', 'position')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:130:1
    |
128 |         if position_path not in sys.path:
129 |             sys.path.insert(0, position_path)
130 |         
    | ^^^^^^^^
131 |         from intelligent_manager import IntelligentPositionManager
132 |         from market_regime import MarketRegime
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:133:1
    |
131 |         from intelligent_manager import IntelligentPositionManager
132 |         from market_regime import MarketRegime
133 |         
    | ^^^^^^^^
134 |         manager = IntelligentPositionManager()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:135:1
    |
134 |         manager = IntelligentPositionManager()
135 |         
    | ^^^^^^^^
136 |         # Test scenario: Profitable position in trending market
137 |         print("\n📈 Scenario 1: Profitable position in bull trend")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:138:1
    |
136 |         # Test scenario: Profitable position in trending market
137 |         print("\n📈 Scenario 1: Profitable position in bull trend")
138 |         
    | ^^^^^^^^
139 |         # Mock analyses
140 |         regime_analysis = {
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:145:1
    |
143 |             'parameters': {'profit_taking_patience': 2.0, 'stop_distance_multiplier': 1.5}
144 |         }
145 |         
    | ^^^^^^^^
146 |         technical_analysis = {
147 |             'signals': None,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:153:1
    |
151 |             'momentum': 0.8
152 |         }
153 |         
    | ^^^^^^^^
154 |         profit_analysis = {
155 |             'triggered_targets': [],
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:160:1
    |
158 |             'has_targets': False
159 |         }
160 |         
    | ^^^^^^^^
161 |         stop_analysis = {
162 |             'stop_level': None,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:167:1
    |
165 |             'trail_distance': 0.0
166 |         }
167 |         
    | ^^^^^^^^
168 |         correlation_analysis = {
169 |             'portfolio_analysis': None,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:174:1
    |
172 |             'correlation_factor': 1.0
173 |         }
174 |         
    | ^^^^^^^^
175 |         # Test action determination
176 |         action, confidence, urgency = manager._determine_action_from_scores(0.7, 0.2, 0.1)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:180:1
    |
178 |         print(f"   ✓ Confidence: {confidence:.2f}")
179 |         print(f"   ✓ Urgency: {urgency:.2f}")
180 |         
    | ^^^^^^^^
181 |         # Test scenario: Loss position with bearish signals
182 |         print("\n📉 Scenario 2: Loss position with bearish signals")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:187:1
    |
185 |         print(f"   ✓ Confidence: {confidence:.2f}")
186 |         print(f"   ✓ Urgency: {urgency:.2f}")
187 |         
    | ^^^^^^^^
188 |         print("\n✅ Integration scenarios completed successfully!")
189 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:190:1
    |
188 |         print("\n✅ Integration scenarios completed successfully!")
189 |         return True
190 |         
    | ^^^^^^^^
191 |     except Exception as e:
192 |         print(f"\n❌ Integration test failed: {e}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:198:1
    |
196 |     print("🧪 ADVANCED INTELLIGENT POSITION MANAGEMENT TESTING")
197 |     print("=" * 80)
198 |     
    | ^^^^
199 |     success = True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:200:1
    |
199 |     success = True
200 |     
    | ^^^^
201 |     # Test individual components
202 |     success &= test_intelligent_position_components()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:203:1
    |
201 |     # Test individual components
202 |     success &= test_intelligent_position_components()
203 |     
    | ^^^^
204 |     # Test integration scenarios
205 |     success &= test_integration_scenarios()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:206:1
    |
204 |     # Test integration scenarios
205 |     success &= test_integration_scenarios()
206 |     
    | ^^^^
207 |     print("\n" + "=" * 80)
208 |     if success:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_position_intelligence.py:221:1
    |
219 |         print("❌ SOME TESTS FAILED")
220 |         print("🔧 Please review the errors above")
221 |     
    | ^^^^
222 |     print("=" * 80)
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_position_intelligence.py:222:20
    |
220 |         print("🔧 Please review the errors above")
221 |     
222 |     print("=" * 80)
    |                    ^
    |
help: Add trailing newline

E501 Line too long (117 > 100)
  --> tests/test_predict_smoke.py:12:101
   |
10 | def _import_predict(monkeypatch):
11 |     req_mod = types.ModuleType("requests")
12 |     req_mod.get = lambda *a, **k: types.SimpleNamespace(json=lambda: {"articles": []}, raise_for_status=lambda: None)
   |                                                                                                     ^^^^^^^^^^^^^^^^^
13 |     req_mod.exceptions = types.SimpleNamespace(RequestException=Exception)
14 |     monkeypatch.setitem(sys.modules, "requests", req_mod)
   |

W293 [*] Blank line contains whitespace
  --> tests/test_prediction_executor.py:20:1
   |
18 |         with patch.dict(os.environ, {}, clear=True):
19 |             os.environ.pop("PREDICTION_WORKERS", None)
20 |             
   | ^^^^^^^^^^^^
21 |             # Simulate the logic from bot_engine.py
22 |             _workers_env = int(os.getenv("PREDICTION_WORKERS", "0") or "0")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_prediction_executor.py:26:1
   |
24 |             _default_workers = max(2, min(4, _cpu))
25 |             workers = _workers_env or _default_workers
26 |             
   | ^^^^^^^^^^^^
27 |             assert workers == 4, "Should cap at 4 workers for 8 CPUs"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_prediction_executor.py:36:1
   |
34 |         with patch.dict(os.environ, {}, clear=True):
35 |             os.environ.pop("PREDICTION_WORKERS", None)
36 |             
   | ^^^^^^^^^^^^
37 |             _workers_env = int(os.getenv("PREDICTION_WORKERS", "0") or "0")
38 |             _cpu = (os.cpu_count() or 2)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_prediction_executor.py:41:1
   |
39 |             _default_workers = max(2, min(4, _cpu))
40 |             workers = _workers_env or _default_workers
41 |             
   | ^^^^^^^^^^^^
42 |             assert workers == 2, "Should use minimum of 2 workers for 1 CPU"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_prediction_executor.py:51:1
   |
49 |         with patch.dict(os.environ, {}, clear=True):
50 |             os.environ.pop("PREDICTION_WORKERS", None)
51 |             
   | ^^^^^^^^^^^^
52 |             _workers_env = int(os.getenv("PREDICTION_WORKERS", "0") or "0")
53 |             _cpu = (os.cpu_count() or 2)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_prediction_executor.py:56:1
   |
54 |             _default_workers = max(2, min(4, _cpu))
55 |             workers = _workers_env or _default_workers
56 |             
   | ^^^^^^^^^^^^
57 |             assert workers == 2, "Should use fallback of 2 when cpu_count returns None"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_prediction_executor.py:66:1
   |
64 |             _default_workers = max(2, min(4, _cpu))
65 |             workers = _workers_env or _default_workers
66 |             
   | ^^^^^^^^^^^^
67 |             assert workers == 3, "Should use PREDICTION_WORKERS=3 when set"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_prediction_executor.py:77:1
   |
75 |                 _default_workers = max(2, min(4, _cpu))
76 |                 workers = _workers_env or _default_workers
77 |                 
   | ^^^^^^^^^^^^^^^^
78 |                 assert workers == 4, "Should use default logic when PREDICTION_WORKERS=0"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_prediction_executor.py:88:1
   |
86 |                 _default_workers = max(2, min(4, _cpu))
87 |                 workers = _workers_env or _default_workers
88 |                 
   | ^^^^^^^^^^^^^^^^
89 |                 assert workers == 4, "Should use default logic when PREDICTION_WORKERS is empty"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_prediction_executor.py:106:1
    |
104 |             _default_workers = max(2, min(4, _cpu))
105 |             workers = _workers_env or _default_workers
106 |             
    | ^^^^^^^^^^^^
107 |             assert workers == 16, "Should accept large PREDICTION_WORKERS values"
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_prediction_executor.py:115:44
    |
113 |         test_cases = [
114 |             (2, 2),   # 2 CPUs -> 2 workers
115 |             (3, 3),   # 3 CPUs -> 3 workers  
    |                                            ^^
116 |             (4, 4),   # 4 CPUs -> 4 workers
117 |             (8, 4),   # 8 CPUs -> 4 workers (capped)
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_prediction_executor.py:120:1
    |
118 |             (16, 4),  # 16 CPUs -> 4 workers (capped)
119 |         ]
120 |         
    | ^^^^^^^^
121 |         for cpu_count, expected_workers in test_cases:
122 |             mock_cpu_count.return_value = cpu_count
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_prediction_executor.py:125:1
    |
123 |             with patch.dict(os.environ, {}, clear=True):
124 |                 os.environ.pop("PREDICTION_WORKERS", None)
125 |                 
    | ^^^^^^^^^^^^^^^^
126 |                 _workers_env = int(os.getenv("PREDICTION_WORKERS", "0") or "0")
127 |                 _cpu = (os.cpu_count() or 2)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_prediction_executor.py:130:1
    |
128 |                 _default_workers = max(2, min(4, _cpu))
129 |                 workers = _workers_env or _default_workers
130 |                 
    | ^^^^^^^^^^^^^^^^
131 |                 assert workers == expected_workers, f"CPU={cpu_count} should give {expected_workers} workers, got {workers}"
    |
help: Remove whitespace from blank line

E501 Line too long (124 > 100)
   --> tests/test_prediction_executor.py:131:101
    |
129 |                 workers = _workers_env or _default_workers
130 |                 
131 |                 assert workers == expected_workers, f"CPU={cpu_count} should give {expected_workers} workers, got {workers}"
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
    |

W292 [*] No newline at end of file
   --> tests/test_prediction_executor.py:131:125
    |
129 |                 workers = _workers_env or _default_workers
130 |                 
131 |                 assert workers == expected_workers, f"CPU={cpu_count} should give {expected_workers} workers, got {workers}"
    |                                                                                                                             ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_price_snapshot_minute_fallback.py:1:1
  |
1 | / import pandas as pd
2 | | from types import SimpleNamespace
3 | |
4 | | from ai_trading.portfolio import core as portfolio_core
  | |_______________________________________________________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_fixes.py:28:1
   |
26 |         try:
27 |             import ai_trading.analysis.sentiment as sentiment
28 |             
   | ^^^^^^^^^^^^
29 |             # Problem statement requires 15 failures, not 5 or 8
30 |             expected_failures = 15
   |
help: Remove whitespace from blank line

E501 Line too long (133 > 100)
  --> tests/test_problem_statement_fixes.py:32:101
   |
30 |             expected_failures = 15
31 |             self.assertEqual(sentiment.SENTIMENT_FAILURE_THRESHOLD, expected_failures,
32 |                            f"SENTIMENT_FAILURE_THRESHOLD should be {expected_failures}, got {sentiment.SENTIMENT_FAILURE_THRESHOLD}")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
33 |             
34 |             # Problem statement requires 1800s (30 minutes), not 600s or 900s
   |

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_fixes.py:33:1
   |
31 |             self.assertEqual(sentiment.SENTIMENT_FAILURE_THRESHOLD, expected_failures,
32 |                            f"SENTIMENT_FAILURE_THRESHOLD should be {expected_failures}, got {sentiment.SENTIMENT_FAILURE_THRESHOLD}")
33 |             
   | ^^^^^^^^^^^^
34 |             # Problem statement requires 1800s (30 minutes), not 600s or 900s
35 |             expected_recovery = 1800
   |
help: Remove whitespace from blank line

E501 Line too long (133 > 100)
  --> tests/test_problem_statement_fixes.py:37:101
   |
35 |             expected_recovery = 1800
36 |             self.assertEqual(sentiment.SENTIMENT_RECOVERY_TIMEOUT, expected_recovery,
37 |                            f"SENTIMENT_RECOVERY_TIMEOUT should be {expected_recovery}s, got {sentiment.SENTIMENT_RECOVERY_TIMEOUT}s")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
38 |             
39 |             print("✓ Sentiment circuit breaker meets problem statement requirements")
   |

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_fixes.py:38:1
   |
36 |             self.assertEqual(sentiment.SENTIMENT_RECOVERY_TIMEOUT, expected_recovery,
37 |                            f"SENTIMENT_RECOVERY_TIMEOUT should be {expected_recovery}s, got {sentiment.SENTIMENT_RECOVERY_TIMEOUT}s")
38 |             
   | ^^^^^^^^^^^^
39 |             print("✓ Sentiment circuit breaker meets problem statement requirements")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_fixes.py:40:1
   |
39 |             print("✓ Sentiment circuit breaker meets problem statement requirements")
40 |             
   | ^^^^^^^^^^^^
41 |         except ImportError as e:
42 |             self.fail(f"Failed to import sentiment module: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_fixes.py:51:1
   |
49 |             with open(bot_engine_path, 'r') as f:
50 |                 content = f.read()
51 |             
   | ^^^^^^^^^^^^
52 |             # Look for the environment variable default
53 |             import re
   |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
  --> tests/test_problem_statement_fixes.py:60:101
   |
58 |                 expected_value = 2  # Updated from 3 to 2
59 |                 self.assertEqual(current_value, expected_value,
60 |                                f"METALEARN_MIN_TRADES default should be {expected_value}, got {current_value}")
   |                                                                                                     ^^^^^^^^^^^
61 |                 print("✓ Meta-learning minimum trades meets problem statement requirements")
62 |             else:
   |

E501 Line too long (108 > 100)
  --> tests/test_problem_statement_fixes.py:63:101
   |
61 |                 print("✓ Meta-learning minimum trades meets problem statement requirements")
62 |             else:
63 |                 self.fail("Could not find METALEARN_MIN_TRADES parameter in load_global_signal_performance")
   |                                                                                                     ^^^^^^^^
64 |         else:
65 |             self.fail("bot_engine.py not found")
   |

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_fixes.py:74:1
   |
72 |             with open(bot_engine_path, 'r') as f:
73 |                 content = f.read()
74 |             
   | ^^^^^^^^^^^^
75 |             # Check if PLTR is in the Technology sector mapping
76 |             if '"PLTR": "Technology"' in content:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_fixes.py:91:1
   |
89 |             with open(trade_execution_path, 'r') as f:
90 |                 content = f.read()
91 |                 
   | ^^^^^^^^^^^^^^^^
92 |                 # Check for clear quantity field names in FULL_FILL_SUCCESS
93 |                 self.assertIn('"requested_qty":', content,
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_fixes.py:97:1
   |
95 |                 self.assertIn('"filled_qty":', content,
96 |                             "FULL_FILL_SUCCESS should include clear filled_qty field")
97 |                 
   | ^^^^^^^^^^^^^^^^
98 |                 # Check for clear quantity field names in ORDER_FILL_CONSOLIDATED
99 |                 self.assertIn('"total_filled_qty":', content,
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_fixes.py:101:1
    |
 99 |                 self.assertIn('"total_filled_qty":', content,
100 |                             "ORDER_FILL_CONSOLIDATED should use clear total_filled_qty field name")
101 |                 
    | ^^^^^^^^^^^^^^^^
102 |                 print("✓ Order quantity tracking has clear field names")
103 |         else:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_fixes.py:110:1
    |
108 |     """Run the problem statement focused tests."""
109 |     print("\n=== Problem Statement Requirements Test Suite ===")
110 |     
    | ^^^^
111 |     # Create test suite
112 |     suite = unittest.TestSuite()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_fixes.py:114:1
    |
112 |     suite = unittest.TestSuite()
113 |     test_class = TestProblemStatementFixes
114 |     
    | ^^^^
115 |     # Add specific tests based on problem statement
116 |     suite.addTest(test_class('test_sentiment_circuit_breaker_requirements'))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_fixes.py:120:1
    |
118 |     suite.addTest(test_class('test_pltr_sector_classification'))
119 |     suite.addTest(test_class('test_order_quantity_tracking_clarity'))
120 |     
    | ^^^^
121 |     # Run the tests
122 |     runner = unittest.TextTestRunner(verbosity=2)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_fixes.py:124:1
    |
122 |     runner = unittest.TextTestRunner(verbosity=2)
123 |     result = runner.run(suite)
124 |     
    | ^^^^
125 |     print("\n=== Test Results Summary ===")
126 |     print(f"Tests run: {result.testsRun}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_fixes.py:129:1
    |
127 |     print(f"Failures: {len(result.failures)}")
128 |     print(f"Errors: {len(result.errors)}")
129 |     
    | ^^^^
130 |     if result.failures:
131 |         print("\nFailures:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_fixes.py:134:1
    |
132 |         for test, traceback in result.failures:
133 |             print(f"  - {test}: {traceback}")
134 |     
    | ^^^^
135 |     if result.errors:
136 |         print("\nErrors:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_fixes.py:139:1
    |
137 |         for test, traceback in result.errors:
138 |             print(f"  - {test}: {traceback}")
139 |     
    | ^^^^
140 |     return result.wasSuccessful()
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_problem_statement_fixes.py:145:30
    |
143 | if __name__ == "__main__":
144 |     success = run_problem_statement_tests()
145 |     exit(0 if success else 1)
    |                              ^
    |
help: Add trailing newline

W291 Trailing whitespace
 --> tests/test_problem_statement_validation.py:2:75
  |
1 | """
2 | Test suite for the critical fixes implemented for Alpaca import hardening, 
  |                                                                           ^
3 | package-safe imports, async modernization, and deployment hardening.
4 | """
  |
help: Remove trailing whitespace

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_problem_statement_validation.py:6:1
  |
4 |   """
5 |
6 | / import os
7 | | import sys
8 | | from datetime import timezone
9 | | from unittest.mock import patch, MagicMock
  | |__________________________________________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_validation.py:17:1
   |
15 |     os.environ['PYTEST_RUNNING'] = '1'
16 |     os.environ['TESTING'] = '1'
17 |     
   | ^^^^
18 |     # Import the function
19 |     from ai_trading.core.bot_engine import _alpaca_available
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_validation.py:20:1
   |
18 |     # Import the function
19 |     from ai_trading.core.bot_engine import _alpaca_available
20 |     
   | ^^^^
21 |     # Test normal case (should return False in our test environment)
22 |     result = _alpaca_available()
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_problem_statement_validation.py:30:39
   |
28 |     """Test that Alpaca imports handle TypeErrors and other exceptions gracefully."""
29 |     # Set test environment
30 |     os.environ['PYTEST_RUNNING'] = '1' 
   |                                       ^
31 |     os.environ['TESTING'] = '1'
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_validation.py:32:1
   |
30 |     os.environ['PYTEST_RUNNING'] = '1' 
31 |     os.environ['TESTING'] = '1'
32 |     
   | ^^^^
33 |     # Mock alpaca to raise TypeError (the specific error mentioned in requirements)
34 |     with patch.dict('sys.modules', {'alpaca': MagicMock()}):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_validation.py:37:1
   |
35 |         with patch('ai_trading.core.bot_engine._alpaca_available') as mock_available:
36 |             mock_available.side_effect = TypeError("'function' object is not iterable")
37 |             
   | ^^^^^^^^^^^^
38 |             # This should not crash, should fallback gracefully
39 |             try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_validation.py:51:1
   |
49 |     os.environ['PYTEST_RUNNING'] = '1'
50 |     os.environ['TESTING'] = '1'
51 |     
   | ^^^^
52 |     # Test logging import
53 |     from ai_trading.logging import setup_logging, get_logger
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_problem_statement_validation.py:53:5
   |
52 |     # Test logging import
53 |     from ai_trading.logging import setup_logging, get_logger
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
54 |     assert callable(setup_logging)
55 |     assert callable(get_logger)
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_validation.py:57:1
   |
55 |     assert callable(get_logger)
56 |     print("✓ ai_trading.logging imports work")
57 |     
   | ^^^^
58 |     # Test core imports  
59 |     from ai_trading.core.bot_engine import _alpaca_available
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_problem_statement_validation.py:58:24
   |
56 |     print("✓ ai_trading.logging imports work")
57 |     
58 |     # Test core imports  
   |                        ^^
59 |     from ai_trading.core.bot_engine import _alpaca_available
60 |     assert callable(_alpaca_available)
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_validation.py:62:1
   |
60 |     assert callable(_alpaca_available)
61 |     print("✓ ai_trading.core.bot_engine imports work")
62 |     
   | ^^^^
63 |     # Test runner imports
64 |     from ai_trading.runner import run_cycle
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_validation.py:74:1
   |
72 |     os.environ['PYTEST_RUNNING'] = '1'
73 |     os.environ['TESTING'] = '1'
74 |     
   | ^^^^
75 |     # Test execution engine datetime handling
76 |     from ai_trading.execution.engine import Order
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_problem_statement_validation.py:76:5
   |
75 |       # Test execution engine datetime handling
76 | /     from ai_trading.execution.engine import Order
77 | |     from ai_trading.core.enums import OrderSide, OrderType
   | |__________________________________________________________^
78 |       
79 |       # Create an order and check timestamps
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_validation.py:78:1
   |
76 |     from ai_trading.execution.engine import Order
77 |     from ai_trading.core.enums import OrderSide, OrderType
78 |     
   | ^^^^
79 |     # Create an order and check timestamps
80 |     order = Order(
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_problem_statement_validation.py:82:23
   |
80 |     order = Order(
81 |         id="test_123",
82 |         symbol="AAPL", 
   |                       ^
83 |         side=OrderSide.BUY,
84 |         order_type=OrderType.MARKET,
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_problem_statement_validation.py:87:1
   |
85 |         quantity=100
86 |     )
87 |     
   | ^^^^
88 |     # Check that created_at has timezone info
89 |     assert order.created_at.tzinfo is not None, "Order created_at should be timezone-aware"
   |
help: Remove whitespace from blank line

F401 `asyncio` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_problem_statement_validation.py:97:16
   |
95 |     """Test that asyncio uses modern get_running_loop pattern."""
96 |     try:
97 |         import asyncio
   |                ^^^^^^^
98 |         import inspect
   |
help: Remove unused import: `asyncio`

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:99:1
    |
 97 |         import asyncio
 98 |         import inspect
 99 |         
    | ^^^^^^^^
100 |         # Check health monitor source for modern async patterns
101 |         from ai_trading.health_monitor import HealthChecker
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:102:1
    |
100 |         # Check health monitor source for modern async patterns
101 |         from ai_trading.health_monitor import HealthChecker
102 |         
    | ^^^^^^^^
103 |         # Get the source of run_check method
104 |         source = inspect.getsource(HealthChecker.run_check)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:105:1
    |
103 |         # Get the source of run_check method
104 |         source = inspect.getsource(HealthChecker.run_check)
105 |         
    | ^^^^^^^^
106 |         # Should use get_running_loop() not get_event_loop()
107 |         assert 'get_running_loop()' in source, "Should use modern get_running_loop()"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:119:1
    |
117 |     with open('start.sh', 'r') as f:
118 |         content = f.read()
119 |     
    | ^^^^
120 |     # Should not contain hard-coded paths
121 |     assert '/home/aiuser/ai-trading-bot' not in content, "Should not have hard-coded paths"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:122:1
    |
120 |     # Should not contain hard-coded paths
121 |     assert '/home/aiuser/ai-trading-bot' not in content, "Should not have hard-coded paths"
122 |     
    | ^^^^
123 |     # Should use SCRIPT_DIR pattern
124 |     assert 'SCRIPT_DIR=' in content, "Should determine script directory dynamically"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:125:1
    |
123 |     # Should use SCRIPT_DIR pattern
124 |     assert 'SCRIPT_DIR=' in content, "Should determine script directory dynamically"
125 |     
    | ^^^^
126 |     # Should support WORKDIR override
127 |     assert 'WORKDIR:-' in content, "Should support WORKDIR environment variable"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:128:1
    |
126 |     # Should support WORKDIR override
127 |     assert 'WORKDIR:-' in content, "Should support WORKDIR environment variable"
128 |     
    | ^^^^
129 |     # Should support VENV_PATH override
130 |     assert 'VENV_PATH:-' in content, "Should support VENV_PATH environment variable"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:131:1
    |
129 |     # Should support VENV_PATH override
130 |     assert 'VENV_PATH:-' in content, "Should support VENV_PATH environment variable"
131 |     
    | ^^^^
132 |     print("✓ start.sh portability implemented correctly")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:139:1
    |
137 |     with open('pyproject.toml', 'r') as f:
138 |         content = f.read()
139 |     
    | ^^^^
140 |     # Should use flexible version range
141 |     assert 'requires-python = ">=3.12,<3.13"' in content, "Should use flexible Python 3.12 range"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:143:1
    |
141 |     assert 'requires-python = ">=3.12,<3.13"' in content, "Should use flexible Python 3.12 range"
142 |     assert 'requires-python = "==3.12.3"' not in content, "Should not pin exact version"
143 |     
    | ^^^^
144 |     print("✓ Python version requirements updated correctly")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:150:1
    |
148 |     """Test that .env.example exists and has required placeholders."""
149 |     assert os.path.exists('.env.example'), ".env.example should exist"
150 |     
    | ^^^^
151 |     with open('.env.example', 'r') as f:
152 |         content = f.read()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:153:1
    |
151 |     with open('.env.example', 'r') as f:
152 |         content = f.read()
153 |     
    | ^^^^
154 |     # Should have key placeholders
155 |     # Guard: test validation checking for placeholder patterns, not actual secrets
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_problem_statement_validation.py:157:84
    |
155 |     # Guard: test validation checking for placeholder patterns, not actual secrets
156 |     assert 'ALPACA_API_KEY=' in content, "Should have Alpaca API key placeholder"
157 |     assert 'ALPACA_SECRET_KEY=' in content, "Should have Alpaca secret placeholder" 
    |                                                                                    ^
158 |     assert 'your_alpaca_api_key_here' in content, "Should have safe placeholder values"
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:159:1
    |
157 |     assert 'ALPACA_SECRET_KEY=' in content, "Should have Alpaca secret placeholder" 
158 |     assert 'your_alpaca_api_key_here' in content, "Should have safe placeholder values"
159 |     
    | ^^^^
160 |     # Should not contain real secrets
161 |     # Guard: test validation ensuring no real credentials leak into examples
    |
help: Remove whitespace from blank line

E501 Line too long (157 > 100)
   --> tests/test_problem_statement_validation.py:162:101
    |
160 | …
161 | …into examples
162 | …artswith('ALPACA_API_KEY=') and 'your_' not in line]) == 0, "Should not contain real API keys"
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
163 | …
164 | …ers")
    |

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:163:1
    |
161 |     # Guard: test validation ensuring no real credentials leak into examples
162 |     assert len([line for line in content.split('\n') if line.startswith('ALPACA_API_KEY=') and 'your_' not in line]) == 0, "Should no…
163 |     
    | ^^^^
164 |     print("✓ .env.example created correctly with safe placeholders")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:170:1
    |
168 |     """Test that non-CLI modules don't have shebangs."""
169 |     import glob
170 |     
    | ^^^^
171 |     # Check ai_trading package files
172 |     for py_file in glob.glob('ai_trading/**/*.py', recursive=True):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:175:1
    |
173 |         with open(py_file, 'r') as f:
174 |             first_line = f.readline().strip()
175 |         
    | ^^^^^^^^
176 |         # Non-CLI modules should not have shebangs
177 |         assert not first_line.startswith('#!'), f"File {py_file} should not have shebang (non-CLI module)"
    |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
   --> tests/test_problem_statement_validation.py:177:101
    |
176 |         # Non-CLI modules should not have shebangs
177 |         assert not first_line.startswith('#!'), f"File {py_file} should not have shebang (non-CLI module)"
    |                                                                                                     ^^^^^^
178 |     
179 |     print("✓ No inappropriate shebangs found in ai_trading package")
    |

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:178:1
    |
176 |         # Non-CLI modules should not have shebangs
177 |         assert not first_line.startswith('#!'), f"File {py_file} should not have shebang (non-CLI module)"
178 |     
    | ^^^^
179 |     print("✓ No inappropriate shebangs found in ai_trading package")
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_problem_statement_validation.py:186:47
    |
184 |     test_functions = [
185 |         test_alpaca_availability_detection,
186 |         test_alpaca_import_exception_handling, 
    |                                               ^
187 |         test_package_safe_imports,
188 |         test_utc_datetime_handling,
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:195:1
    |
193 |         test_no_inappropriate_shebangs,
194 |     ]
195 |     
    | ^^^^
196 |     print("=== Testing Critical Fixes Implementation ===\n")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:197:1
    |
196 |     print("=== Testing Critical Fixes Implementation ===\n")
197 |     
    | ^^^^
198 |     passed = 0
199 |     failed = 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:200:1
    |
198 |     passed = 0
199 |     failed = 0
200 |     
    | ^^^^
201 |     for test_func in test_functions:
202 |         try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:210:1
    |
208 |             failed += 1
209 |             print(f"❌ {test_func.__name__} FAILED: {e}\n")
210 |     
    | ^^^^
211 |     print(f"=== Results: {passed} passed, {failed} failed ===")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_problem_statement_validation.py:212:1
    |
211 |     print(f"=== Results: {passed} passed, {failed} failed ===")
212 |     
    | ^^^^
213 |     if failed == 0:
214 |         print("🎉 All critical fixes tests passed!")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_problem_statement_validation.py:218:20
    |
216 |     else:
217 |         print("💥 Some tests failed")
218 |         sys.exit(1)
    |                    ^
    |
help: Add trailing newline

W291 Trailing whitespace
 --> tests/test_production_fixes.py:7:36
  |
5 | This test suite validates the four main fixes:
6 | 1. Sentiment API configuration support
7 | 2. Improved process detection logic  
  |                                    ^^
8 | 3. Market-aware data staleness thresholds
9 | 4. Enhanced environment debugging capabilities
  |
help: Remove trailing whitespace

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_production_fixes.py:12:1
   |
10 |   """
11 |
12 | / import os
13 | | import sys
14 | | import unittest
15 | | from unittest.mock import patch, MagicMock
16 | | from datetime import datetime, timezone, timedelta
   | |__________________________________________________^
17 |
18 |   # Add the project root to Python path for imports
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_production_fixes.py:24:1
   |
22 | class TestSentimentAPIConfiguration(unittest.TestCase):
23 |     """Test sentiment API configuration and backwards compatibility."""
24 |     
   | ^^^^
25 |     def setUp(self):
26 |         """Set up test environment."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_fixes.py:30:1
   |
28 |         self.config_mock = MagicMock()
29 |         sys.modules['config'] = self.config_mock
30 |     
   | ^^^^
31 |     def tearDown(self):
32 |         """Clean up test environment."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_fixes.py:35:1
   |
33 |         if 'config' in sys.modules:
34 |             del sys.modules['config']
35 |     
   | ^^^^
36 |     def test_sentiment_api_env_vars_in_config(self):
37 |         """Test that sentiment API variables are properly configured."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_fixes.py:39:1
   |
37 |         """Test that sentiment API variables are properly configured."""
38 |         import ai_trading.config as config
39 |         
   | ^^^^^^^^
40 |         # Test that the new environment variables are accessible
41 |         self.assertTrue(hasattr(config, 'SENTIMENT_API_KEY') or 'SENTIMENT_API_KEY' in dir(config))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_fixes.py:43:1
   |
41 |         self.assertTrue(hasattr(config, 'SENTIMENT_API_KEY') or 'SENTIMENT_API_KEY' in dir(config))
42 |         self.assertTrue(hasattr(config, 'SENTIMENT_API_URL') or 'SENTIMENT_API_URL' in dir(config))
43 |     
   | ^^^^
44 |     @patch.dict(os.environ, {
45 |         'NEWS_API_KEY': 'test_news_key',
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_fixes.py:52:1
   |
50 |         """Test backwards compatibility with NEWS_API_KEY."""
51 |         # Test that SENTIMENT_API_KEY takes precedence
52 |         
   | ^^^^^^^^
53 |         # Simulate the configuration logic
54 |         sentiment_key = os.getenv('SENTIMENT_API_KEY') or os.getenv('NEWS_API_KEY')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_fixes.py:56:1
   |
54 |         sentiment_key = os.getenv('SENTIMENT_API_KEY') or os.getenv('NEWS_API_KEY')
55 |         self.assertEqual(sentiment_key, 'test_sentiment_key')
56 |         
   | ^^^^^^^^
57 |         # Test fallback to NEWS_API_KEY
58 |         with patch.dict(os.environ, {'NEWS_API_KEY': 'fallback_key'}, clear=True):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_fixes.py:65:1
   |
63 | class TestProcessDetection(unittest.TestCase):
64 |     """Test improved process detection logic."""
65 |     
   | ^^^^
66 |     def setUp(self):
67 |         """Set up performance monitor test."""
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_production_fixes.py:69:13
   |
67 |         """Set up performance monitor test."""
68 |         try:
69 |             from ai_trading.monitoring.performance_monitor import ResourceMonitor  # AI-AGENT-REF: normalized import
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
70 |             self.monitor = ResourceMonitor()
71 |         except ImportError:
   |
help: Organize imports

E501 Line too long (116 > 100)
  --> tests/test_production_fixes.py:69:101
   |
67 |         """Set up performance monitor test."""
68 |         try:
69 |             from ai_trading.monitoring.performance_monitor import ResourceMonitor  # AI-AGENT-REF: normalized import
   |                                                                                                     ^^^^^^^^^^^^^^^^
70 |             self.monitor = ResourceMonitor()
71 |         except ImportError:
   |

W293 [*] Blank line contains whitespace
  --> tests/test_production_fixes.py:73:1
   |
71 |         except ImportError:
72 |             self.skipTest("performance_monitor module not available")
73 |     
   | ^^^^
74 |     def test_trading_bot_process_detection(self):
75 |         """Test that trading bot process detection works correctly."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_fixes.py:81:1
   |
79 |             self.assertIsInstance(count, int)
80 |             self.assertGreaterEqual(count, 1)  # At least this test process
81 |     
   | ^^^^
82 |     @patch('subprocess.run')
83 |     def test_process_filtering(self, mock_subprocess):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_fixes.py:92:1
   |
90 | user      1111  0.0  0.1  11111   111 ?        S    10:59   0:00 pgrep -f python
91 | """
92 |         
   | ^^^^^^^^
93 |         mock_subprocess.return_value.returncode = 0
94 |         mock_subprocess.return_value.stdout = mock_output
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_fixes.py:95:1
   |
93 |         mock_subprocess.return_value.returncode = 0
94 |         mock_subprocess.return_value.stdout = mock_output
95 |         
   | ^^^^^^^^
96 |         if hasattr(self.monitor, '_count_trading_bot_processes'):
97 |             count = self.monitor._count_trading_bot_processes()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:100:1
    |
 98 |             # Should count bot_engine.py and runner.py, but not the test command or pgrep
 99 |             self.assertGreaterEqual(count, 2)
100 |     
    | ^^^^
101 |     def test_alert_threshold_adjustment(self):
102 |         """Test that multiple process alerts have appropriate thresholds."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:109:1
    |
107 |             }
108 |         }
109 |         
    | ^^^^^^^^
110 |         alerts = self.monitor.check_alert_conditions(metrics)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:111:1
    |
110 |         alerts = self.monitor.check_alert_conditions(metrics)
111 |         
    | ^^^^^^^^
112 |         # Should have an alert for multiple processes
113 |         multiple_proc_alerts = [a for a in alerts if 'multiple' in a.get('type', '')]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:122:1
    |
120 | class TestDataStalenessThresholds(unittest.TestCase):
121 |     """Test market-aware data staleness detection."""
122 |     
    | ^^^^
123 |     def setUp(self):
124 |         """Set up data validation test."""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_production_fixes.py:126:13
    |
124 |           """Set up data validation test."""
125 |           try:
126 | /             import pandas as pd
127 | |             from ai_trading.data_validation import (
128 | |                 is_market_hours, get_staleness_threshold, 
129 | |                 check_data_freshness
130 | |             )
    | |_____________^
131 |               self.pd = pd
132 |               self.is_market_hours = is_market_hours
    |
help: Organize imports

W291 [*] Trailing whitespace
   --> tests/test_production_fixes.py:128:58
    |
126 |             import pandas as pd
127 |             from ai_trading.data_validation import (
128 |                 is_market_hours, get_staleness_threshold, 
    |                                                          ^
129 |                 check_data_freshness
130 |             )
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:137:1
    |
135 |         except ImportError:
136 |             self.skipTest("Required modules not available for data validation tests")
137 |     
    | ^^^^
138 |     def test_market_hours_detection(self):
139 |         """Test market hours detection logic."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:143:1
    |
141 |         market_time = datetime(2025, 8, 5, 19, 0, 0, tzinfo=timezone.utc)  # Tuesday 2 PM ET
142 |         self.assertTrue(self.is_market_hours(market_time))
143 |         
    | ^^^^^^^^
144 |         # Test outside market hours (Tuesday 6:00 PM ET = 11:00 PM UTC)  
145 |         after_hours = datetime(2025, 8, 5, 23, 0, 0, tzinfo=timezone.utc)  # Tuesday 6 PM ET
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_production_fixes.py:144:72
    |
142 |         self.assertTrue(self.is_market_hours(market_time))
143 |         
144 |         # Test outside market hours (Tuesday 6:00 PM ET = 11:00 PM UTC)  
    |                                                                        ^^
145 |         after_hours = datetime(2025, 8, 5, 23, 0, 0, tzinfo=timezone.utc)  # Tuesday 6 PM ET
146 |         self.assertFalse(self.is_market_hours(after_hours))
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:147:1
    |
145 |         after_hours = datetime(2025, 8, 5, 23, 0, 0, tzinfo=timezone.utc)  # Tuesday 6 PM ET
146 |         self.assertFalse(self.is_market_hours(after_hours))
147 |         
    | ^^^^^^^^
148 |         # Test weekend (Saturday)
149 |         weekend = datetime(2025, 8, 9, 19, 0, 0, tzinfo=timezone.utc)  # Saturday 2 PM ET
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:151:1
    |
149 |         weekend = datetime(2025, 8, 9, 19, 0, 0, tzinfo=timezone.utc)  # Saturday 2 PM ET
150 |         self.assertFalse(self.is_market_hours(weekend))
151 |     
    | ^^^^
152 |     def test_staleness_threshold_logic(self):
153 |         """Test that staleness thresholds adapt to market conditions."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:158:1
    |
156 |         market_threshold = self.get_staleness_threshold('AAPL', market_time)
157 |         self.assertEqual(market_threshold, 15)  # 15 minutes during market hours
158 |         
    | ^^^^^^^^
159 |         # After hours should be more lenient
160 |         after_hours = datetime(2025, 8, 5, 23, 0, 0, tzinfo=timezone.utc)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:163:1
    |
161 |         after_threshold = self.get_staleness_threshold('AAPL', after_hours)
162 |         self.assertGreater(after_threshold, market_threshold)
163 |         
    | ^^^^^^^^
164 |         # Weekend should be most lenient
165 |         weekend = datetime(2025, 8, 9, 19, 0, 0, tzinfo=timezone.utc)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:168:1
    |
166 |         weekend_threshold = self.get_staleness_threshold('AAPL', weekend)
167 |         self.assertGreater(weekend_threshold, after_threshold)
168 |     
    | ^^^^
169 |     def test_data_freshness_with_market_awareness(self):
170 |         """Test that data freshness checks include market context."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:174:1
    |
172 |         now = datetime.now(timezone.utc)
173 |         recent_time = now - timedelta(minutes=10)
174 |         
    | ^^^^^^^^
175 |         df = self.pd.DataFrame({
176 |             'Close': [100.0],
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:179:1
    |
177 |             'Volume': [1000]
178 |         }, index=[recent_time])
179 |         
    | ^^^^^^^^
180 |         result = self.check_data_freshness(df, 'TEST')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:181:1
    |
180 |         result = self.check_data_freshness(df, 'TEST')
181 |         
    | ^^^^^^^^
182 |         # Result should include market hours information
183 |         self.assertIn('market_hours', result)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:191:1
    |
189 | class TestEnvironmentDebugging(unittest.TestCase):
190 |     """Test enhanced environment debugging capabilities."""
191 |     
    | ^^^^
192 |     def setUp(self):
193 |         """Set up environment validation test."""
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_production_fixes.py:195:13
    |
193 | …     """Set up environment validation test."""
194 | …     try:
195 | …         from ai_trading.validation.validate_env import debug_environment, validate_specific_env_var  # AI-AGENT-REF: normalized imp…
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
196 | …         self.debug_environment = debug_environment
197 | …         self.validate_specific_env_var = validate_specific_env_var
    |
help: Organize imports

E501 Line too long (138 > 100)
   --> tests/test_production_fixes.py:195:101
    |
193 | …
194 | …
195 | …mport debug_environment, validate_specific_env_var  # AI-AGENT-REF: normalized import
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
196 | …t
197 | …_specific_env_var
    |

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:200:1
    |
198 |         except ImportError:
199 |             self.skipTest("validate_env module not available")
200 |     
    | ^^^^
201 |     def test_debug_environment_structure(self):
202 |         """Test that debug environment returns proper structure."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:204:1
    |
202 |         """Test that debug environment returns proper structure."""
203 |         debug_report = self.debug_environment()
204 |         
    | ^^^^^^^^
205 |         # Check required fields
206 |         required_fields = [
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:210:1
    |
208 |             'warnings', 'environment_vars', 'recommendations'
209 |         ]
210 |         
    | ^^^^^^^^
211 |         for field in required_fields:
212 |             self.assertIn(field, debug_report)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:213:1
    |
211 |         for field in required_fields:
212 |             self.assertIn(field, debug_report)
213 |         
    | ^^^^^^^^
214 |         # Check data types
215 |         self.assertIsInstance(debug_report['critical_issues'], list)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:219:1
    |
217 |         self.assertIsInstance(debug_report['environment_vars'], dict)
218 |         self.assertIsInstance(debug_report['recommendations'], list)
219 |     
    | ^^^^
220 |     @patch.dict(os.environ, {
221 |         'ALPACA_API_KEY': 'test_key_12345',
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:227:1
    |
225 |         """Test that sensitive environment values are properly masked."""
226 |         debug_report = self.debug_environment()
227 |         
    | ^^^^^^^^
228 |         env_vars = debug_report['environment_vars']
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:229:1
    |
228 |         env_vars = debug_report['environment_vars']
229 |         
    | ^^^^^^^^
230 |         # API keys should be masked
231 |         if 'ALPACA_API_KEY' in env_vars:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:236:1
    |
234 |             self.assertIn('***', api_key_info['value'])  # Should be masked
235 |             self.assertIn('length', api_key_info)
236 |     
    | ^^^^
237 |     def test_specific_env_var_validation(self):
238 |         """Test validation of specific environment variables."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:242:1
    |
240 |         with patch.dict(os.environ, {'TEST_VAR': 'test_value'}):
241 |             result = self.validate_specific_env_var('TEST_VAR')
242 |             
    | ^^^^^^^^^^^^
243 |             self.assertEqual(result['variable'], 'TEST_VAR')
244 |             self.assertEqual(result['status'], 'set')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:246:1
    |
244 |             self.assertEqual(result['status'], 'set')
245 |             self.assertEqual(result['value'], 'test_value')
246 |         
    | ^^^^^^^^
247 |         # Test with missing variable
248 |         result = self.validate_specific_env_var('NONEXISTENT_VAR')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:255:1
    |
253 | class TestIntegration(unittest.TestCase):
254 |     """Integration tests for all fixes working together."""
255 |     
    | ^^^^
256 |     def test_env_file_contains_sentiment_config(self):
257 |         """Test that .env file contains the new sentiment configuration."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:262:1
    |
260 |             with open(env_file_path, 'r') as f:
261 |                 content = f.read()
262 |                 
    | ^^^^^^^^^^^^^^^^
263 |             # Should contain sentiment API configuration
264 |             self.assertIn('SENTIMENT_API_KEY', content)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:266:1
    |
264 |             self.assertIn('SENTIMENT_API_KEY', content)
265 |             self.assertIn('SENTIMENT_API_URL', content)
266 |             
    | ^^^^^^^^^^^^
267 |             # Should maintain backwards compatibility
268 |             self.assertIn('NEWS_API_KEY', content)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:269:1
    |
267 |             # Should maintain backwards compatibility
268 |             self.assertIn('NEWS_API_KEY', content)
269 |     
    | ^^^^
270 |     def test_all_modules_importable(self):
271 |         """Test that all modified modules can be imported without errors."""
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_production_fixes.py:274:31
    |
272 |         modules_to_test = [
273 |             'performance_monitor',
274 |             'data_validation', 
    |                               ^
275 |             'validate_env'
276 |         ]
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_production_fixes.py:277:1
    |
275 |             'validate_env'
276 |         ]
277 |         
    | ^^^^^^^^
278 |         for module_name in modules_to_test:
279 |             try:
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_production_fixes.py:291:31
    |
289 | if __name__ == '__main__':
290 |     # Run tests with verbose output
291 |     unittest.main(verbosity=2)
    |                               ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_production_system.py:8:1
   |
 6 |   """
 7 |
 8 | / import asyncio
 9 | | import sys
10 | | import os
   | |_________^
11 |
12 |   # Add the project root to the Python path
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_production_system.py:16:5
   |
15 |   try:
16 | /     from ai_trading.core.enums import RiskLevel, OrderSide, OrderType
17 | |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
18 | |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 | |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
20 | |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
   | |_____________________________________________________________________________________^
21 |   except ImportError as e:
22 |       print(f"Import error (expected in test environment): {e}")
   |
help: Organize imports

F401 `ai_trading.risk.position_sizing.ATRPositionSizer` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:17:49
   |
15 | try:
16 |     from ai_trading.core.enums import RiskLevel, OrderSide, OrderType
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
   |                                                 ^^^^^^^^^^^^^^^^
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |
help: Remove unused import

F401 `ai_trading.risk.position_sizing.DynamicPositionSizer` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:17:67
   |
15 | try:
16 |     from ai_trading.core.enums import RiskLevel, OrderSide, OrderType
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
   |                                                                   ^^^^^^^^^^^^^^^^^^^^
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |
help: Remove unused import

F401 `ai_trading.risk.circuit_breakers.DrawdownCircuitBreaker` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:18:50
   |
16 |     from ai_trading.core.enums import RiskLevel, OrderSide, OrderType
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
20 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
   |
help: Remove unused import

F401 `ai_trading.risk.circuit_breakers.TradingHaltManager` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:18:74
   |
16 |     from ai_trading.core.enums import RiskLevel, OrderSide, OrderType
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
   |                                                                          ^^^^^^^^^^^^^^^^^^
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
20 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
   |
help: Remove unused import

F401 `ai_trading.monitoring.alerting.AlertManager` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:19:48
   |
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |                                                ^^^^^^^^^^^^
20 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
21 | except ImportError as e:
   |
help: Remove unused import

F401 `ai_trading.monitoring.alerting.AlertSeverity` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:19:62
   |
17 |     from ai_trading.risk.position_sizing import ATRPositionSizer, DynamicPositionSizer
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
   |                                                              ^^^^^^^^^^^^^
20 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
21 | except ImportError as e:
   |
help: Remove unused import

F401 `ai_trading.execution.production_engine.ProductionExecutionCoordinator` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:20:56
   |
18 |     from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, TradingHaltManager
19 |     from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
20 |     from ai_trading.execution.production_engine import ProductionExecutionCoordinator
   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 | except ImportError as e:
22 |     print(f"Import error (expected in test environment): {e}")
   |
help: Remove unused import: `ai_trading.execution.production_engine.ProductionExecutionCoordinator`

W291 [*] Trailing whitespace
  --> tests/test_production_system.py:26:30
   |
24 |     class RiskLevel:
25 |         CONSERVATIVE = "conservative"
26 |         MODERATE = "moderate" 
   |                              ^
27 |         AGGRESSIVE = "aggressive"
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_production_system.py:28:1
   |
26 |         MODERATE = "moderate" 
27 |         AGGRESSIVE = "aggressive"
28 |     
   | ^^^^
29 |     class OrderSide:
30 |         BUY = "buy"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_system.py:32:1
   |
30 |         BUY = "buy"
31 |         SELL = "sell"
32 |     
   | ^^^^
33 |     class OrderType:
34 |         MARKET = "market"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_system.py:42:1
   |
40 |     try:
41 |         from ai_trading.risk.position_sizing import ATRPositionSizer
42 |         
   | ^^^^^^^^
43 |         # Test basic ATR position sizing
44 |         sizer = ATRPositionSizer(risk_per_trade=0.02)  # 2% risk per trade
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_system.py:45:1
   |
43 |         # Test basic ATR position sizing
44 |         sizer = ATRPositionSizer(risk_per_trade=0.02)  # 2% risk per trade
45 |         
   | ^^^^^^^^
46 |         # Test position size calculation
47 |         account_equity = 100000  # $100k
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_system.py:50:1
   |
48 |         entry_price = 100.0      # $100 per share
49 |         atr_value = 2.0          # $2 ATR
50 |         
   | ^^^^^^^^
51 |         position_size = sizer.calculate_position_size(account_equity, entry_price, atr_value)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_system.py:52:1
   |
51 |         position_size = sizer.calculate_position_size(account_equity, entry_price, atr_value)
52 |         
   | ^^^^^^^^
53 |         # Expected: $2000 risk / ($2 * 2.0 multiplier) = 500 shares
54 |         expected_size = int(2000 / (2.0 * 2.0))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_system.py:55:1
   |
53 |         # Expected: $2000 risk / ($2 * 2.0 multiplier) = 500 shares
54 |         expected_size = int(2000 / (2.0 * 2.0))
55 |         
   | ^^^^^^^^
56 |         assert position_size == expected_size, f"Expected {expected_size}, got {position_size}"
57 |         print(f"✓ ATR Position Sizer: {position_size} shares for ${account_equity:,} account")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_system.py:58:1
   |
56 |         assert position_size == expected_size, f"Expected {expected_size}, got {position_size}"
57 |         print(f"✓ ATR Position Sizer: {position_size} shares for ${account_equity:,} account")
58 |         
   | ^^^^^^^^
59 |         # Test stop levels
60 |         stop_levels = sizer.calculate_stop_levels(entry_price, atr_value, "long")
   |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
  --> tests/test_production_system.py:62:101
   |
60 |         stop_levels = sizer.calculate_stop_levels(entry_price, atr_value, "long")
61 |         assert stop_levels["stop_loss"] < entry_price, "Stop loss should be below entry for long"
62 |         assert stop_levels["take_profit"] > entry_price, "Take profit should be above entry for long"
   |                                                                                                     ^
63 |         print(f"✓ Stop levels: SL=${stop_levels['stop_loss']:.2f}, TP=${stop_levels['take_profit']:.2f}")
   |

E501 Line too long (105 > 100)
  --> tests/test_production_system.py:63:101
   |
61 |         assert stop_levels["stop_loss"] < entry_price, "Stop loss should be below entry for long"
62 |         assert stop_levels["take_profit"] > entry_price, "Take profit should be above entry for long"
63 |         print(f"✓ Stop levels: SL=${stop_levels['stop_loss']:.2f}, TP=${stop_levels['take_profit']:.2f}")
   |                                                                                                     ^^^^^
64 |         
65 |         return True
   |

W293 [*] Blank line contains whitespace
  --> tests/test_production_system.py:64:1
   |
62 |         assert stop_levels["take_profit"] > entry_price, "Take profit should be above entry for long"
63 |         print(f"✓ Stop levels: SL=${stop_levels['stop_loss']:.2f}, TP=${stop_levels['take_profit']:.2f}")
64 |         
   | ^^^^^^^^
65 |         return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_system.py:66:1
   |
65 |         return True
66 |         
   | ^^^^^^^^
67 |     except ImportError:
68 |         print("⚠ ATR Position Sizer test skipped - module not available")
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_production_system.py:78:9
   |
76 |     """Test drawdown circuit breaker functionality."""
77 |     try:
78 |         from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, CircuitBreakerState
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
79 |         
80 |         # Test circuit breaker with 10% max drawdown
   |
help: Organize imports

F401 `ai_trading.risk.circuit_breakers.CircuitBreakerState` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_production_system.py:78:78
   |
76 |     """Test drawdown circuit breaker functionality."""
77 |     try:
78 |         from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, CircuitBreakerState
   |                                                                              ^^^^^^^^^^^^^^^^^^^
79 |         
80 |         # Test circuit breaker with 10% max drawdown
   |
help: Remove unused import: `ai_trading.risk.circuit_breakers.CircuitBreakerState`

W293 [*] Blank line contains whitespace
  --> tests/test_production_system.py:79:1
   |
77 |     try:
78 |         from ai_trading.risk.circuit_breakers import DrawdownCircuitBreaker, CircuitBreakerState
79 |         
   | ^^^^^^^^
80 |         # Test circuit breaker with 10% max drawdown
81 |         breaker = DrawdownCircuitBreaker(max_drawdown=0.10)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_production_system.py:82:1
   |
80 |         # Test circuit breaker with 10% max drawdown
81 |         breaker = DrawdownCircuitBreaker(max_drawdown=0.10)
82 |         
   | ^^^^^^^^
83 |         # Test normal operation
84 |         assert breaker.update_equity(100000) == True, "Trading should be allowed initially"
   |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `True`; use `breaker.update_equity(100000):` for truth checks
  --> tests/test_production_system.py:84:16
   |
83 |         # Test normal operation
84 |         assert breaker.update_equity(100000) == True, "Trading should be allowed initially"
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
85 |         print("✓ Circuit breaker allows trading initially")
   |
help: Replace with `breaker.update_equity(100000)`

W293 [*] Blank line contains whitespace
  --> tests/test_production_system.py:86:1
   |
84 |         assert breaker.update_equity(100000) == True, "Trading should be allowed initially"
85 |         print("✓ Circuit breaker allows trading initially")
86 |         
   | ^^^^^^^^
87 |         # Test drawdown within limits
88 |         assert breaker.update_equity(95000) == True, "5% drawdown should be allowed"
   |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `True`; use `breaker.update_equity(95000):` for truth checks
  --> tests/test_production_system.py:88:16
   |
87 |         # Test drawdown within limits
88 |         assert breaker.update_equity(95000) == True, "5% drawdown should be allowed"
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
89 |         print("✓ Circuit breaker allows 5% drawdown")
   |
help: Replace with `breaker.update_equity(95000)`

W293 [*] Blank line contains whitespace
  --> tests/test_production_system.py:90:1
   |
88 |         assert breaker.update_equity(95000) == True, "5% drawdown should be allowed"
89 |         print("✓ Circuit breaker allows 5% drawdown")
90 |         
   | ^^^^^^^^
91 |         # Test drawdown exceeding limits
92 |         assert breaker.update_equity(85000) == False, "15% drawdown should halt trading"
   |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `False`; use `not breaker.update_equity(85000):` for false checks
  --> tests/test_production_system.py:92:16
   |
91 |         # Test drawdown exceeding limits
92 |         assert breaker.update_equity(85000) == False, "15% drawdown should halt trading"
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
93 |         print("✓ Circuit breaker halts trading at 15% drawdown")
   |
help: Replace with `not breaker.update_equity(85000)`

W293 [*] Blank line contains whitespace
  --> tests/test_production_system.py:94:1
   |
92 |         assert breaker.update_equity(85000) == False, "15% drawdown should halt trading"
93 |         print("✓ Circuit breaker halts trading at 15% drawdown")
94 |         
   | ^^^^^^^^
95 |         # Test status
96 |         status = breaker.get_status()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:100:1
    |
 98 |         assert not status["trading_allowed"], "Trading should be halted"
 99 |         print(f"✓ Circuit breaker status: {status['current_drawdown']:.1%} drawdown, halted")
100 |         
    | ^^^^^^^^
101 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:102:1
    |
101 |         return True
102 |         
    | ^^^^^^^^
103 |     except ImportError:
104 |         print("⚠ Drawdown Circuit Breaker test skipped - module not available")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:115:1
    |
113 |     try:
114 |         from ai_trading.risk.circuit_breakers import TradingHaltManager
115 |         
    | ^^^^^^^^
116 |         halt_manager = TradingHaltManager()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:117:1
    |
116 |         halt_manager = TradingHaltManager()
117 |         
    | ^^^^^^^^
118 |         # Test initial state
119 |         status = halt_manager.is_trading_allowed()
    |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `True`; use `status["trading_allowed"]:` for truth checks
   --> tests/test_production_system.py:120:16
    |
118 |         # Test initial state
119 |         status = halt_manager.is_trading_allowed()
120 |         assert status["trading_allowed"] == True, "Trading should be allowed initially"
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
121 |         print("✓ Trading halt manager allows trading initially")
    |
help: Replace with `status["trading_allowed"]`

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:122:1
    |
120 |         assert status["trading_allowed"] == True, "Trading should be allowed initially"
121 |         print("✓ Trading halt manager allows trading initially")
122 |         
    | ^^^^^^^^
123 |         # Test manual halt
124 |         halt_manager.manual_halt_trading("Test halt")
    |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `False`; use `not status["trading_allowed"]:` for false checks
   --> tests/test_production_system.py:126:16
    |
124 |         halt_manager.manual_halt_trading("Test halt")
125 |         status = halt_manager.is_trading_allowed()
126 |         assert status["trading_allowed"] == False, "Trading should be halted after manual halt"
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
127 |         assert "Manual halt" in status["reasons"][0], "Reason should mention manual halt"
128 |         print("✓ Manual halt working correctly")
    |
help: Replace with `not status["trading_allowed"]`

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:129:1
    |
127 |         assert "Manual halt" in status["reasons"][0], "Reason should mention manual halt"
128 |         print("✓ Manual halt working correctly")
129 |         
    | ^^^^^^^^
130 |         # Test resume
131 |         halt_manager.resume_trading("Test resume")
    |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `True`; use `status["trading_allowed"]:` for truth checks
   --> tests/test_production_system.py:133:16
    |
131 |         halt_manager.resume_trading("Test resume")
132 |         status = halt_manager.is_trading_allowed()
133 |         assert status["trading_allowed"] == True, "Trading should resume after manual resume"
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
134 |         print("✓ Manual resume working correctly")
    |
help: Replace with `status["trading_allowed"]`

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:135:1
    |
133 |         assert status["trading_allowed"] == True, "Trading should resume after manual resume"
134 |         print("✓ Manual resume working correctly")
135 |         
    | ^^^^^^^^
136 |         # Test emergency stop
137 |         halt_manager.emergency_stop_all("Test emergency")
    |
help: Remove whitespace from blank line

E712 Avoid equality comparisons to `False`; use `not status["trading_allowed"]:` for false checks
   --> tests/test_production_system.py:139:16
    |
137 |         halt_manager.emergency_stop_all("Test emergency")
138 |         status = halt_manager.is_trading_allowed()
139 |         assert status["trading_allowed"] == False, "Trading should be halted after emergency stop"
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
140 |         print("✓ Emergency stop working correctly")
    |
help: Replace with `not status["trading_allowed"]`

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:141:1
    |
139 |         assert status["trading_allowed"] == False, "Trading should be halted after emergency stop"
140 |         print("✓ Emergency stop working correctly")
141 |         
    | ^^^^^^^^
142 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:143:1
    |
142 |         return True
143 |         
    | ^^^^^^^^
144 |     except ImportError:
145 |         print("⚠ Trading Halt Manager test skipped - module not available")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:156:1
    |
154 |     try:
155 |         from ai_trading.monitoring.alerting import AlertManager, AlertSeverity
156 |         
    | ^^^^^^^^
157 |         alert_manager = AlertManager()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:158:1
    |
157 |         alert_manager = AlertManager()
158 |         
    | ^^^^^^^^
159 |         # Start processing
160 |         alert_manager.start_processing()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:161:1
    |
159 |         # Start processing
160 |         alert_manager.start_processing()
161 |         
    | ^^^^^^^^
162 |         # Test sending alerts
163 |         alert_id = alert_manager.send_alert(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:169:1
    |
167 |             "TestSystem"
168 |         )
169 |         
    | ^^^^^^^^
170 |         assert alert_id != "", "Alert ID should not be empty"
171 |         print(f"✓ Alert sent successfully: {alert_id}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:172:1
    |
170 |         assert alert_id != "", "Alert ID should not be empty"
171 |         print(f"✓ Alert sent successfully: {alert_id}")
172 |         
    | ^^^^^^^^
173 |         # Test trading alert
174 |         trading_alert_id = alert_manager.send_trading_alert(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:180:1
    |
178 |             AlertSeverity.INFO
179 |         )
180 |         
    | ^^^^^^^^
181 |         assert trading_alert_id != "", "Trading alert ID should not be empty"
182 |         print(f"✓ Trading alert sent successfully: {trading_alert_id}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:183:1
    |
181 |         assert trading_alert_id != "", "Trading alert ID should not be empty"
182 |         print(f"✓ Trading alert sent successfully: {trading_alert_id}")
183 |         
    | ^^^^^^^^
184 |         # Test alert stats
185 |         stats = alert_manager.get_alert_stats()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:188:1
    |
186 |         assert stats["total_alerts"] >= 2, "Should have at least 2 alerts"
187 |         print(f"✓ Alert stats: {stats['total_alerts']} total alerts")
188 |         
    | ^^^^^^^^
189 |         # Stop processing
190 |         alert_manager.stop_processing()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:192:1
    |
190 |         alert_manager.stop_processing()
191 |         print("✓ Alert manager processing stopped")
192 |         
    | ^^^^^^^^
193 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:194:1
    |
193 |         return True
194 |         
    | ^^^^^^^^
195 |     except ImportError:
196 |         print("⚠ Alert Manager test skipped - module not available")
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_production_system.py:206:9
    |
204 |       """Test production execution coordinator."""
205 |       try:
206 | /         from ai_trading.execution.production_engine import ProductionExecutionCoordinator
207 | |         from ai_trading.core.enums import OrderSide, OrderType, RiskLevel
    | |_________________________________________________________________________^
208 |           
209 |           # Initialize coordinator
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:208:1
    |
206 |         from ai_trading.execution.production_engine import ProductionExecutionCoordinator
207 |         from ai_trading.core.enums import OrderSide, OrderType, RiskLevel
208 |         
    | ^^^^^^^^
209 |         # Initialize coordinator
210 |         coordinator = ProductionExecutionCoordinator(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:214:1
    |
212 |             risk_level=RiskLevel.MODERATE
213 |         )
214 |         
    | ^^^^^^^^
215 |         # Test order submission
216 |         result = await coordinator.submit_order(
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:223:1
    |
221 |             strategy="test_strategy"
222 |         )
223 |         
    | ^^^^^^^^
224 |         assert result["status"] in ["success", "rejected"], f"Unexpected status: {result['status']}"
225 |         print(f"✓ Order submission result: {result['status']} - {result.get('message', 'No message')}")
    |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
   --> tests/test_production_system.py:225:101
    |
224 |         assert result["status"] in ["success", "rejected"], f"Unexpected status: {result['status']}"
225 |         print(f"✓ Order submission result: {result['status']} - {result.get('message', 'No message')}")
    |                                                                                                     ^^^
226 |         
227 |         # Test execution summary
    |

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:226:1
    |
224 |         assert result["status"] in ["success", "rejected"], f"Unexpected status: {result['status']}"
225 |         print(f"✓ Order submission result: {result['status']} - {result.get('message', 'No message')}")
226 |         
    | ^^^^^^^^
227 |         # Test execution summary
228 |         summary = coordinator.get_execution_summary()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:232:1
    |
230 |         assert summary["execution_stats"]["total_orders"] >= 1, "Should have at least 1 order"
231 |         print(f"✓ Execution summary: {summary['execution_stats']['total_orders']} total orders")
232 |         
    | ^^^^^^^^
233 |         # Test position tracking
234 |         positions = coordinator.get_current_positions()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:236:1
    |
234 |         positions = coordinator.get_current_positions()
235 |         print(f"✓ Current positions: {len(positions)} positions")
236 |         
    | ^^^^^^^^
237 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:238:1
    |
237 |         return True
238 |         
    | ^^^^^^^^
239 |     except ImportError:
240 |         print("⚠ Production Execution Coordinator test skipped - module not available")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:250:1
    |
248 |     """Run all tests and report results."""
249 |     print("🚀 Running Production Trading System Tests\n")
250 |     
    | ^^^^
251 |     test_results = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:252:1
    |
251 |     test_results = []
252 |     
    | ^^^^
253 |     # Synchronous tests
254 |     test_results.append(("ATR Position Sizer", test_atr_position_sizer()))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:258:1
    |
256 |     test_results.append(("Trading Halt Manager", test_trading_halt_manager()))
257 |     test_results.append(("Alert Manager", test_alert_manager()))
258 |     
    | ^^^^
259 |     # Asynchronous tests
260 |     test_results.append(("Production Execution Coordinator", await test_production_execution_coordinator()))
    |
help: Remove whitespace from blank line

E501 Line too long (108 > 100)
   --> tests/test_production_system.py:260:101
    |
259 |     # Asynchronous tests
260 |     test_results.append(("Production Execution Coordinator", await test_production_execution_coordinator()))
    |                                                                                                     ^^^^^^^^
261 |     
262 |     # Report results
    |

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:261:1
    |
259 |     # Asynchronous tests
260 |     test_results.append(("Production Execution Coordinator", await test_production_execution_coordinator()))
261 |     
    | ^^^^
262 |     # Report results
263 |     print("\n📊 Test Results Summary:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:265:1
    |
263 |     print("\n📊 Test Results Summary:")
264 |     print("=" * 50)
265 |     
    | ^^^^
266 |     passed = 0
267 |     total = len(test_results)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:268:1
    |
266 |     passed = 0
267 |     total = len(test_results)
268 |     
    | ^^^^
269 |     for test_name, result in test_results:
270 |         status = "PASS" if result else "FAIL"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:275:1
    |
273 |         if result:
274 |             passed += 1
275 |     
    | ^^^^
276 |     print("=" * 50)
277 |     print(f"Total: {passed}/{total} tests passed ({passed/total*100:.1f}%)")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:278:1
    |
276 |     print("=" * 50)
277 |     print(f"Total: {passed}/{total} tests passed ({passed/total*100:.1f}%)")
278 |     
    | ^^^^
279 |     if passed == total:
280 |         print("\n🎉 All tests passed! Production system is ready.")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_production_system.py:283:1
    |
281 |     else:
282 |         print(f"\n⚠️  {total-passed} tests failed. Review implementation.")
283 |     
    | ^^^^
284 |     return passed == total
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_production_system.py:298:16
    |
296 |     except Exception as e:
297 |         print(f"\n\n💥 Test runner error: {e}")
298 |         exit(1)
    |                ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_prof_budget.py:1:1
  |
1 | / import time
2 | | from ai_trading.utils.prof import SoftBudget
  | |____________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_property_based.py:12:1
   |
10 |   # Ensure project root is on path
11 |   sys.path.insert(0, str(Path(__file__).resolve().parents[1]))
12 | / import ai_trading.risk.engine as risk_engine  # AI-AGENT-REF: normalized import
13 | | from ai_trading import signals
14 | | from ai_trading import utils
   | |____________________________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_pydantic_v2_migration.py:7:1
   |
 5 |   with Pydantic V2 field_validator decorators.
 6 |   """
 7 | / import pytest
 8 | | import os
 9 | | import sys
10 | | from unittest.mock import patch
   | |_______________________________^
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_pydantic_v2_migration.py:18:1
   |
16 |         os.path.dirname(__file__), '..', 'ai_trading', 'validation', 'validate_env.py'
17 |     )
18 |     
   | ^^^^
19 |     with open(validate_env_path, 'r') as f:
20 |         content = f.read()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_pydantic_v2_migration.py:21:1
   |
19 |     with open(validate_env_path, 'r') as f:
20 |         content = f.read()
21 |     
   | ^^^^
22 |     # Verify V2 imports
23 |     assert 'from pydantic import field_validator, Field' in content
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_pydantic_v2_migration.py:25:1
   |
23 |     assert 'from pydantic import field_validator, Field' in content
24 |     assert 'from pydantic import validator' not in content
25 |     
   | ^^^^
26 |     # Verify V2 decorators
27 |     v2_decorators = [
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_pydantic_v2_migration.py:35:1
   |
33 |         '@field_validator(\'FORCE_TRADES\')'
34 |     ]
35 |     
   | ^^^^
36 |     for decorator in v2_decorators:
37 |         assert decorator in content, f"Missing V2 decorator: {decorator}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_pydantic_v2_migration.py:38:1
   |
36 |     for decorator in v2_decorators:
37 |         assert decorator in content, f"Missing V2 decorator: {decorator}"
38 |     
   | ^^^^
39 |     # Verify no V1 decorators remain
40 |     v1_decorators = [
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_pydantic_v2_migration.py:48:1
   |
46 |         '@validator(\'FORCE_TRADES\')'
47 |     ]
48 |     
   | ^^^^
49 |     for decorator in v1_decorators:
50 |         assert decorator not in content, f"Found old V1 decorator: {decorator}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_pydantic_v2_migration.py:51:1
   |
49 |     for decorator in v1_decorators:
50 |         assert decorator not in content, f"Found old V1 decorator: {decorator}"
51 |     
   | ^^^^
52 |     # Verify classmethod decorators are present
53 |     assert content.count('@classmethod') >= 6
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_pydantic_v2_migration.py:60:1
   |
58 |     try:
59 |         sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
60 |         
   | ^^^^^^^^
61 |         # Mock environment variables to avoid validation errors
62 |         with patch.dict(os.environ, {
   |
help: Remove whitespace from blank line

E501 Line too long (104 > 100)
  --> tests/test_pydantic_v2_migration.py:70:101
   |
68 |             'FORCE_TRADES': 'false'
69 |         }):
70 |             import ai_trading.validation.validate_env as validate_env  # AI-AGENT-REF: normalized import
   |                                                                                                     ^^^^
71 |             
72 |             # Test that Settings class can be instantiated
   |

W293 [*] Blank line contains whitespace
  --> tests/test_pydantic_v2_migration.py:71:1
   |
69 |         }):
70 |             import ai_trading.validation.validate_env as validate_env  # AI-AGENT-REF: normalized import
71 |             
   | ^^^^^^^^^^^^
72 |             # Test that Settings class can be instantiated
73 |             settings = validate_env.Settings()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_pydantic_v2_migration.py:74:1
   |
72 |             # Test that Settings class can be instantiated
73 |             settings = validate_env.Settings()
74 |             
   | ^^^^^^^^^^^^
75 |             # Verify some basic fields
76 |             assert hasattr(settings, 'ALPACA_API_KEY')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_pydantic_v2_migration.py:79:1
   |
77 |             assert hasattr(settings, 'ALPACA_SECRET_KEY')
78 |             assert hasattr(settings, 'BOT_MODE')
79 |             
   | ^^^^^^^^^^^^
80 |     except ImportError as e:
81 |         pytest.skip(f"Cannot import validate_env module: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_pydantic_v2_migration.py:95:1
   |
93 |     try:
94 |         sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
95 |         
   | ^^^^^^^^
96 |         with patch.dict(os.environ, {
97 |             'ALPACA_API_KEY': 'INVALID_KEY',  # Should trigger validation warning
   |
help: Remove whitespace from blank line

E501 Line too long (104 > 100)
   --> tests/test_pydantic_v2_migration.py:103:101
    |
101 |             'TRADING_MODE': 'invalid',        # Should trigger validation error
102 |         }):
103 |             import ai_trading.validation.validate_env as validate_env  # AI-AGENT-REF: normalized import
    |                                                                                                     ^^^^
104 |             
105 |             # These should trigger validation errors due to invalid values
    |

W293 [*] Blank line contains whitespace
   --> tests/test_pydantic_v2_migration.py:104:1
    |
102 |         }):
103 |             import ai_trading.validation.validate_env as validate_env  # AI-AGENT-REF: normalized import
104 |             
    | ^^^^^^^^^^^^
105 |             # These should trigger validation errors due to invalid values
106 |             try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_pydantic_v2_migration.py:116:1
    |
114 |                        "BOT_MODE must be one of" in str(e) or \
115 |                        "Invalid TRADING_MODE" in str(e)
116 |                 
    | ^^^^^^^^^^^^^^^^
117 |     except ImportError:
118 |         pytest.skip("Cannot import validate_env module")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_pydantic_v2_migration.py:125:55
    |
123 |     test_validate_env_import()
124 |     test_field_validator_functionality()
125 |     print("✅ All Pydantic V2 migration tests passed!")
    |                                                        ^
    |
help: Add trailing newline

E501 Line too long (106 > 100)
 --> tests/test_rebalancer_additional.py:7:101
  |
5 |     calls = []
6 |     monkeypatch.setattr(rebalancer, "rebalance_interval_min", lambda: 1)
7 |     rebalancer._last_rebalance = rebalancer.datetime.now(rebalancer.UTC) - rebalancer.timedelta(minutes=2)
  |                                                                                                     ^^^^^^
8 |     monkeypatch.setattr(rebalancer, "rebalance_portfolio", lambda ctx: calls.append(ctx))
9 |     rebalancer.maybe_rebalance("ctx")
  |

W293 [*] Blank line contains whitespace
  --> tests/test_rebalancer_additional.py:35:1
   |
33 |                     pass
34 |         return T()
35 |     
   | ^^^^
36 |     # Mock the infinite loop to exit after one iteration
37 |     original_maybe_rebalance = rebalancer.maybe_rebalance
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_rebalancer_additional.py:39:1
   |
37 |     original_maybe_rebalance = rebalancer.maybe_rebalance
38 |     call_count = [0]
39 |     
   | ^^^^
40 |     def mock_maybe_rebalance(ctx):
41 |         call_count[0] += 1
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_rebalancer_additional.py:49:1
   |
47 |     monkeypatch.setattr(rebalancer.threading, "Thread", fake_thread)
48 |     monkeypatch.setattr(rebalancer, "maybe_rebalance", mock_maybe_rebalance)
49 |     
   | ^^^^
50 |     t = rebalancer.start_rebalancer("ctx")
51 |     assert "start-called" in called
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_regime_and_schema_guard.py:1:1
  |
1 | / import pandas as pd
2 | | import pytest
  | |_____________^
3 |
4 |   def test_validate_ohlcv_detects_missing():
  |
help: Organize imports

W293 [*] Blank line contains whitespace
 --> tests/test_regime_and_schema_guard.py:7:1
  |
5 |     """Test that validate_ohlcv detects missing columns."""
6 |     from ai_trading.utils.base import validate_ohlcv
7 |     
  | ^^^^
8 |     bad = pd.DataFrame({"timestamp": pd.date_range("2024-01-01", periods=3, freq="D"), "close":[1,2,3]})
9 |     with pytest.raises(ValueError) as exc_info:
  |
help: Remove whitespace from blank line

E501 Line too long (104 > 100)
  --> tests/test_regime_and_schema_guard.py:8:101
   |
 6 |     from ai_trading.utils.base import validate_ohlcv
 7 |     
 8 |     bad = pd.DataFrame({"timestamp": pd.date_range("2024-01-01", periods=3, freq="D"), "close":[1,2,3]})
   |                                                                                                     ^^^^
 9 |     with pytest.raises(ValueError) as exc_info:
10 |         validate_ohlcv(bad)
   |

W293 [*] Blank line contains whitespace
  --> tests/test_regime_and_schema_guard.py:16:1
   |
14 |     """Test that validate_ohlcv passes valid OHLCV data."""
15 |     from ai_trading.utils.base import validate_ohlcv
16 |     
   | ^^^^
17 |     # Valid DataFrame with all required columns
18 |     valid_df = pd.DataFrame({
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_regime_and_schema_guard.py:21:33
   |
19 |         'timestamp': pd.date_range('2024-01-01', periods=3, freq='D'),
20 |         'open': [100, 101, 102],
21 |         'high': [102, 103, 104],  
   |                                 ^^
22 |         'low': [99, 100, 101],
23 |         'close': [101, 102, 103],
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_regime_and_schema_guard.py:26:1
   |
24 |         'volume': [1000, 1100, 1200]
25 |     })
26 |     
   | ^^^^
27 |     # Should not raise any exception
28 |     validate_ohlcv(valid_df)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_regime_and_schema_guard.py:33:1
   |
31 |     """Test that the new pretrade_lookback_days setting is available."""
32 |     from ai_trading.config.settings import get_settings
33 |     
   | ^^^^
34 |     settings = get_settings()
35 |     assert hasattr(settings, 'pretrade_lookback_days')
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_regime_and_schema_guard.py:39:72
   |
38 | def test_regime_basket_proxy_function():
39 |     """Test that _regime_basket_to_proxy_bars creates proper output.""" 
   |                                                                        ^
40 |     # Simple test of the core logic without importing the full bot engine
41 |     def _mk_wide():
   |
help: Remove trailing whitespace

E501 Line too long (101 > 100)
  --> tests/test_regime_and_schema_guard.py:43:101
   |
41 |     def _mk_wide():
42 |         ts = pd.date_range("2024-01-01", periods=5, freq="B")
43 |         return pd.DataFrame({"timestamp": ts, "SPY":[100,101,102,103,104], "QQQ":[50,51,52,52.5,53]})
   |                                                                                                     ^
44 |
45 |     def _regime_basket_to_proxy_bars(wide):
   |

W293 [*] Blank line contains whitespace
  --> tests/test_regime_and_schema_guard.py:61:1
   |
59 |         out = pd.DataFrame({"timestamp": df["timestamp"], "close": proxy_close})
60 |         return out
61 |     
   | ^^^^
62 |     wide = _mk_wide()
63 |     out = _regime_basket_to_proxy_bars(wide)
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_regime_and_schema_guard.py:65:25
   |
63 |     out = _regime_basket_to_proxy_bars(wide)
64 |     assert "timestamp" in out.columns and "close" in out.columns
65 |     assert len(out) == 5
   |                         ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_regime_filters.py:1:1
  |
1 | / import pandas as pd
2 | | import pytest
  | |_____________^
3 |
4 |   def test_regime_changes():
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_regime_filters.py:13:1
   |
11 |     if "regime" not in df.columns:
12 |         pytest.skip("Trades data missing regime column")
13 |     
   | ^^^^
14 |     # Filter out empty/null regime values and check for diversity
15 |     regime_values = df["regime"].dropna()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_regime_filters.py:17:1
   |
15 |     regime_values = df["regime"].dropna()
16 |     regime_values = regime_values[regime_values != ""]  # Remove empty strings
17 |     
   | ^^^^
18 |     if len(regime_values) == 0:
19 |         pytest.skip("No valid regime data found")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_regime_filters.py:20:1
   |
18 |     if len(regime_values) == 0:
19 |         pytest.skip("No valid regime data found")
20 |     
   | ^^^^
21 |     unique_regimes = regime_values.nunique()
22 |     assert unique_regimes > 1, f"No regime changes detected ({unique_regimes} unique values), model might be static"
   |
help: Remove whitespace from blank line

E501 Line too long (116 > 100)
  --> tests/test_regime_filters.py:22:101
   |
21 |     unique_regimes = regime_values.nunique()
22 |     assert unique_regimes > 1, f"No regime changes detected ({unique_regimes} unique values), model might be static"
   |                                                                                                     ^^^^^^^^^^^^^^^^
   |

E501 Line too long (113 > 100)
  --> tests/test_retrain_smoke.py:65:101
   |
63 |     sys.modules["torch"].manual_seed = lambda *a, **k: None
64 |     opt = types.ModuleType("optuna")
65 |     opt.create_study = lambda direction: types.SimpleNamespace(optimize=lambda f, n_trials: None, best_params={})
   |                                                                                                     ^^^^^^^^^^^^^
66 |     monkeypatch.setitem(sys.modules, "optuna", opt)
67 |     skl_ms = types.ModuleType("sklearn.model_selection")
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_retry_idempotency_integration.py:3:1
  |
1 |   """Integration test for retry/backoff and idempotency in order submission."""
2 |
3 | / import time
4 | |
5 | | # Set PYTHONPATH to include our tenacity mock
6 | | import sys
  | |__________^
7 |   sys.path.insert(0, '/tmp')
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_retry_idempotency_integration.py:14:1
   |
12 | class OrderIdempotencyManager:
13 |     """Mock idempotency manager to prevent duplicate orders."""
14 |     
   | ^^^^
15 |     def __init__(self):
16 |         self.submitted_orders = set()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_retry_idempotency_integration.py:17:1
   |
15 |     def __init__(self):
16 |         self.submitted_orders = set()
17 |     
   | ^^^^
18 |     def mark_submitted(self, order_id):
19 |         """Mark an order as submitted to prevent duplicates."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_retry_idempotency_integration.py:23:1
   |
21 |             raise ValueError(f"Order {order_id} already submitted")
22 |         self.submitted_orders.add(order_id)
23 |     
   | ^^^^
24 |     def is_submitted(self, order_id):
25 |         """Check if order was already submitted."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_retry_idempotency_integration.py:31:1
   |
29 | class PositionReconciler:
30 |     """Mock position reconciler."""
31 |     
   | ^^^^
32 |     def __init__(self):
33 |         self.local_positions = {}
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_retry_idempotency_integration.py:36:1
   |
34 |         self.broker_positions = {}
35 |         self.reconciliation_calls = 0
36 |     
   | ^^^^
37 |     def reconcile_positions_and_orders(self):
38 |         """Mock reconciliation between local and broker state."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_retry_idempotency_integration.py:52:1
   |
50 |     """Submit order with retry logic and idempotency protection."""
51 |     order_id = order_data["client_order_id"]
52 |     
   | ^^^^
53 |     # Check idempotency first - if already submitted, return early
54 |     if idempotency_mgr.is_submitted(order_id):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_retry_idempotency_integration.py:56:1
   |
54 |     if idempotency_mgr.is_submitted(order_id):
55 |         raise ValueError(f"Order {order_id} already submitted")
56 |     
   | ^^^^
57 |     # Use a local flag to track if we've marked it submitted
58 |     marked_submitted = False
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_retry_idempotency_integration.py:59:1
   |
57 |     # Use a local flag to track if we've marked it submitted
58 |     marked_submitted = False
59 |     
   | ^^^^
60 |     try:
61 |         # Mark as submitted before actual submission attempts
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_retry_idempotency_integration.py:65:1
   |
63 |             idempotency_mgr.mark_submitted(order_id)
64 |             marked_submitted = True
65 |         
   | ^^^^^^^^
66 |         # Attempt broker submission
67 |         result = broker.submit_order(order_data)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_retry_idempotency_integration.py:80:1
   |
78 |     idempotency_mgr = OrderIdempotencyManager()
79 |     reconciler = PositionReconciler()
80 |     
   | ^^^^
81 |     order_data = {
82 |         "client_order_id": "test_order_123",
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_retry_idempotency_integration.py:87:1
   |
85 |         "side": "buy"
86 |     }
87 |     
   | ^^^^
88 |     # Manually apply retry logic since we can't easily test the decorator
89 |     attempt = 0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_retry_idempotency_integration.py:93:1
   |
91 |     result = None
92 |     order_id = order_data["client_order_id"]
93 |     
   | ^^^^
94 |     # Mark as submitted for idempotency
95 |     idempotency_mgr.mark_submitted(order_id)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_retry_idempotency_integration.py:96:1
   |
94 |     # Mark as submitted for idempotency
95 |     idempotency_mgr.mark_submitted(order_id)
96 |     
   | ^^^^
97 |     while attempt < max_attempts:
98 |         try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_retry_idempotency_integration.py:106:1
    |
104 |                 raise
105 |             time.sleep(0.1)  # Small delay
106 |     
    | ^^^^
107 |     # Verify retry behavior
108 |     assert broker.call_count == 3, f"Expected 3 calls, got {broker.call_count}"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_retry_idempotency_integration.py:110:1
    |
108 |     assert broker.call_count == 3, f"Expected 3 calls, got {broker.call_count}"
109 |     assert len(broker.submitted_orders) == 1, "Should have exactly one order submitted"
110 |     
    | ^^^^
111 |     # Verify order details
112 |     submitted_order = broker.submitted_orders[0]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_retry_idempotency_integration.py:115:1
    |
113 |     assert submitted_order["symbol"] == "AAPL"
114 |     assert submitted_order["quantity"] == 100
115 |     
    | ^^^^
116 |     # Verify idempotency protection
117 |     assert idempotency_mgr.is_submitted("test_order_123")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_retry_idempotency_integration.py:125:1
    |
123 |     idempotency_mgr = OrderIdempotencyManager()
124 |     reconciler = PositionReconciler()
125 |     
    | ^^^^
126 |     order_data = {
127 |         "client_order_id": "test_order_reconcile",
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_retry_idempotency_integration.py:128:26
    |
126 |     order_data = {
127 |         "client_order_id": "test_order_reconcile",
128 |         "symbol": "TSLA", 
    |                          ^
129 |         "quantity": 50,
130 |         "side": "buy"
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_retry_idempotency_integration.py:132:1
    |
130 |         "side": "buy"
131 |     }
132 |     
    | ^^^^
133 |     # Submit order successfully (no retries needed)
134 |     idempotency_mgr.mark_submitted(order_data["client_order_id"])
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_retry_idempotency_integration.py:136:1
    |
134 |     idempotency_mgr.mark_submitted(order_data["client_order_id"])
135 |     result = broker.submit_order(order_data)
136 |     
    | ^^^^
137 |     # Simulate reconciliation after order submission
138 |     reconciliation_result = reconciler.reconcile_positions_and_orders()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_retry_idempotency_integration.py:139:1
    |
137 |     # Simulate reconciliation after order submission
138 |     reconciliation_result = reconciler.reconcile_positions_and_orders()
139 |     
    | ^^^^
140 |     # Verify reconciliation was called
141 |     assert reconciliation_result["reconciled"] is True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_retry_idempotency_integration.py:143:1
    |
141 |     assert reconciliation_result["reconciled"] is True
142 |     assert reconciler.reconciliation_calls == 1
143 |     
    | ^^^^
144 |     # Verify order is tracked correctly
145 |     assert len(broker.submitted_orders) == 1
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_retry_idempotency_integration.py:153:1
    |
151 |     broker = MockBrokerAPI(fail_count=5)  # Fail more times than retry limit
152 |     idempotency_mgr = OrderIdempotencyManager()
153 |     
    | ^^^^
154 |     order_data = {
155 |         "client_order_id": "test_order_fail",
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_retry_idempotency_integration.py:160:1
    |
158 |         "side": "sell"
159 |     }
160 |     
    | ^^^^
161 |     # Manual retry logic
162 |     attempt = 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_retry_idempotency_integration.py:165:1
    |
163 |     max_attempts = 3
164 |     order_id = order_data["client_order_id"]
165 |     
    | ^^^^
166 |     # Mark as submitted for idempotency
167 |     idempotency_mgr.mark_submitted(order_id)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_retry_idempotency_integration.py:168:1
    |
166 |     # Mark as submitted for idempotency
167 |     idempotency_mgr.mark_submitted(order_id)
168 |     
    | ^^^^
169 |     last_exception = None
170 |     while attempt < max_attempts:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_retry_idempotency_integration.py:180:1
    |
178 |                 break
179 |             time.sleep(0.1)
180 |     
    | ^^^^
181 |     # Should have exhausted retries
182 |     if last_exception:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_retry_idempotency_integration.py:184:1
    |
182 |     if last_exception:
183 |         pass  # Expected to fail
184 |     
    | ^^^^
185 |     # Verify retries occurred but no order was submitted
186 |     assert broker.call_count == 3, f"Should have attempted 3 times, got {broker.call_count}"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_retry_idempotency_integration.py:188:1
    |
186 |     assert broker.call_count == 3, f"Should have attempted 3 times, got {broker.call_count}"
187 |     assert len(broker.submitted_orders) == 0, "No orders should be submitted on failure"
188 |     
    | ^^^^
189 |     # Verify idempotency mark still exists (prevents retry storms)
190 |     assert idempotency_mgr.is_submitted("test_order_fail")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_retry_idempotency_integration.py:198:43
    |
196 |     test_reconciliation_heals_state()
197 |     test_retry_exhaustion_with_idempotency()
198 |     print("All integration tests passed!")
    |                                           ^
    |
help: Add trailing newline

W293 [*] Blank line contains whitespace
  --> tests/test_risk.py:71:1
   |
69 |         LOCK_EX=1                  # Mock lock constant
70 |     ))
71 |     
   | ^^^^
72 |     # Mock the open function to return DummyLock instance
73 |     import builtins
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk.py:77:1
   |
75 |         return DummyLock()
76 |     monkeypatch.setattr(builtins, 'open', mock_open)
77 |     
   | ^^^^
78 |     size1 = bot.fractional_kelly_size(ctx, 10000, 50, 2.0, 0.6)
79 |     DummyLock.data = str(10600)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:11:1
   |
 9 | class TestRiskEnginePackage(unittest.TestCase):
10 |     """Test RiskEngine package promotion."""
11 |     
   | ^^^^
12 |     def test_risk_engine_import_from_package(self):
13 |         """Test that RiskEngine can be imported from ai_trading.risk."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:15:1
   |
13 |         """Test that RiskEngine can be imported from ai_trading.risk."""
14 |         from ai_trading.risk import RiskEngine
15 |         
   | ^^^^^^^^
16 |         # Verify it's the correct class
17 |         self.assertEqual(RiskEngine.__name__, "RiskEngine")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:19:1
   |
17 |         self.assertEqual(RiskEngine.__name__, "RiskEngine")
18 |         self.assertIn("ai_trading.risk.engine", RiskEngine.__module__)
19 |     
   | ^^^^
20 |     def test_risk_engine_resolver_uses_package(self):
21 |         """Test that the resolver prefers the package version."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:23:1
   |
21 |         """Test that the resolver prefers the package version."""
22 |         import importlib.util
23 |         
   | ^^^^^^^^
24 |         # Load imports module directly to avoid heavy dependencies
25 |         spec = importlib.util.spec_from_file_location(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:30:1
   |
28 |         imports_module = importlib.util.module_from_spec(spec)
29 |         spec.loader.exec_module(imports_module)
30 |         
   | ^^^^^^^^
31 |         # Test resolution
32 |         cls = imports_module.resolve_risk_engine_cls()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:37:1
   |
35 |         self.assertIn("ai_trading.risk.engine", cls.__module__)
36 |         self.assertNotIn("scripts", cls.__module__)
37 |     
   | ^^^^
38 |     def test_scripts_fallback_disabled_by_default(self):
39 |         """Test that scripts fallback is disabled without DEV_ALLOW_SCRIPTS."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:41:1
   |
39 |         """Test that scripts fallback is disabled without DEV_ALLOW_SCRIPTS."""
40 |         import importlib.util
41 |         
   | ^^^^^^^^
42 |         # Ensure DEV_ALLOW_SCRIPTS is not set
43 |         os.environ.pop("DEV_ALLOW_SCRIPTS", None)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:44:1
   |
42 |         # Ensure DEV_ALLOW_SCRIPTS is not set
43 |         os.environ.pop("DEV_ALLOW_SCRIPTS", None)
44 |         
   | ^^^^^^^^
45 |         # Load imports module
46 |         spec = importlib.util.spec_from_file_location(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:51:1
   |
49 |         imports_module = importlib.util.module_from_spec(spec)
50 |         spec.loader.exec_module(imports_module)
51 |         
   | ^^^^^^^^
52 |         # Resolution should use package, not scripts
53 |         cls = imports_module.resolve_risk_engine_cls()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:56:1
   |
54 |         self.assertIsNotNone(cls)
55 |         self.assertNotIn("scripts", cls.__module__)
56 |     
   | ^^^^
57 |     def test_update_exposure_requires_context(self):
58 |         """Test that update_exposure requires context parameter."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:60:1
   |
58 |         """Test that update_exposure requires context parameter."""
59 |         from ai_trading.risk import RiskEngine
60 |         
   | ^^^^^^^^
61 |         re = RiskEngine()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:62:1
   |
61 |         re = RiskEngine()
62 |         
   | ^^^^^^^^
63 |         # Should raise RuntimeError without context
64 |         with self.assertRaises(RuntimeError) as cm:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:66:1
   |
64 |         with self.assertRaises(RuntimeError) as cm:
65 |             re.update_exposure()
66 |         
   | ^^^^^^^^
67 |         self.assertIn("context is required", str(cm.exception))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:68:1
   |
67 |         self.assertIn("context is required", str(cm.exception))
68 |     
   | ^^^^
69 |     def test_update_exposure_works_with_context(self):
70 |         """Test that update_exposure works with context parameter."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:72:1
   |
70 |         """Test that update_exposure works with context parameter."""
71 |         from ai_trading.risk import RiskEngine
72 |         
   | ^^^^^^^^
73 |         re = RiskEngine()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:74:1
   |
73 |         re = RiskEngine()
74 |         
   | ^^^^^^^^
75 |         # Mock context with API
76 |         class MockContext:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:80:1
   |
78 |                 def get_all_positions(self):
79 |                     return []
80 |                 
   | ^^^^^^^^^^^^^^^^
81 |                 def get_account(self):
82 |                     class MockAccount:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:85:1
   |
83 |                         equity = "10000"
84 |                     return MockAccount()
85 |             
   | ^^^^^^^^^^^^
86 |             api = MockAPI()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_risk_engine_package.py:87:1
   |
86 |             api = MockAPI()
87 |         
   | ^^^^^^^^
88 |         # Should not raise with proper context
89 |         try:
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_risk_engine_package.py:96:20
   |
95 | if __name__ == "__main__":
96 |     unittest.main()
   |                    ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_risk_new.py:1:1
  |
1 | / import pandas as pd
2 | | import ai_trading.risk.engine as risk_engine  # AI-AGENT-REF: normalized import
  | |____________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_rl_features.py:1:1
  |
1 | / import numpy as np
2 | | import pandas as pd
3 | | from ai_trading.rl_trading.features import compute_features, FeatureConfig
  | |__________________________________________________________________________^
4 |
5 |   def test_compute_features_shape_and_finite():
  |
help: Organize imports

W292 [*] No newline at end of file
  --> tests/test_rl_features.py:17:34
   |
15 |     vec = compute_features(df, cfg)
16 |     assert vec.shape == (64*6,)
17 |     assert np.isfinite(vec).all()
   |                                  ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_rl_module.py:1:1
  |
1 | / import numpy as np
2 | |
3 | | import ai_trading.rl_trading.train as train_mod
4 | | import ai_trading.rl_trading.inference as inf
  | |_____________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_run_overlap.py:1:1
  |
1 | / import threading
2 | | import time
3 | | import types
4 | | from ai_trading.core import bot_engine
  | |______________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_runner.py:1:1
  |
1 | / import runpy
2 | | import sys
3 | | import types
4 | |
5 | | import pytest
6 | | import requests
7 | | from tests.conftest import load_runner
  | |______________________________________^
  |
help: Organize imports

E501 Line too long (113 > 100)
  --> tests/test_runner.py:36:101
   |
34 | def test_run_forever_request_exception(monkeypatch):
35 |     mod = load_runner(monkeypatch)
36 |     monkeypatch.setattr(mod, "main", lambda: (_ for _ in ()).throw(requests.exceptions.RequestException("boom")))
   |                                                                                                     ^^^^^^^^^^^^^
37 |     monkeypatch.setattr(mod.time, "sleep", lambda s: None)
38 |     mod._shutdown = False
   |

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_runtime_fixes.py:6:1
   |
 4 |   """
 5 |
 6 | / import sys
 7 | | import os
 8 | | import re
   | |_________^
 9 |
10 |   def test_legacy_imports():
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_fixes.py:13:1
   |
11 |     """Test that legacy import shims work"""
12 |     print("Testing legacy import shims")
13 |     
   | ^^^^
14 |     # Test signals import
15 |     try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_fixes.py:21:1
   |
19 |         print(f"✗ signals import failed: {e}")
20 |         success = False
21 |     
   | ^^^^
22 |     # Test indicators import 
23 |     try:
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_runtime_fixes.py:22:29
   |
20 |         success = False
21 |     
22 |     # Test indicators import 
   |                             ^
23 |     try:
24 |         print("✓ indicators import successful")
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_fixes.py:28:1
   |
26 |         print(f"✗ indicators import failed: {e}")
27 |         success = False
28 |     
   | ^^^^
29 |     # Test rebalancer import (expected to fail due to config requirements)
30 |     try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_fixes.py:38:1
   |
36 |             print(f"✗ rebalancer import failed unexpectedly: {e}")
37 |             success = False
38 |     
   | ^^^^
39 |     return success
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_fixes.py:44:1
   |
42 |     """Test OHLCV normalizer files exist"""
43 |     print("\nTesting OHLCV normalizer")
44 |     
   | ^^^^
45 |     ohlcv_path = "ai_trading/utils/ohlcv.py"
46 |     if os.path.exists(ohlcv_path):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_fixes.py:48:1
   |
46 |     if os.path.exists(ohlcv_path):
47 |         print("✓ OHLCV normalizer file exists")
48 |         
   | ^^^^^^^^
49 |         # Check if it contains the standardize_ohlcv function
50 |         with open(ohlcv_path, 'r') as f:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_fixes.py:65:1
   |
63 |     """Test that bot_engine.py has the required changes"""
64 |     print("\nTesting bot_engine.py changes")
65 |     
   | ^^^^
66 |     bot_engine_path = "ai_trading/core/bot_engine.py"
67 |     if not os.path.exists(bot_engine_path):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_fixes.py:70:1
   |
68 |         print("✗ bot_engine.py not found")
69 |         return False
70 |     
   | ^^^^
71 |     with open(bot_engine_path, 'r') as f:
72 |         content = f.read()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_fixes.py:73:1
   |
71 |     with open(bot_engine_path, 'r') as f:
72 |         content = f.read()
73 |     
   | ^^^^
74 |     # Check for OHLCV fix
75 |     if "standardize_ohlcv" in content and "_compute_regime_features" in content:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_fixes.py:80:1
   |
78 |         print("✗ OHLCV normalization missing from _compute_regime_features")
79 |         return False
80 |     
   | ^^^^
81 |     # Check for prometheus fix
82 |     if "_init_metrics" in content and "_METRICS_READY" in content:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_fixes.py:87:1
   |
85 |         print("✗ Prometheus lazy initialization missing")
86 |         return False
87 |     
   | ^^^^
88 |     # Check that module-level Counter definitions are removed
89 |     lines = content.split('\n')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_fixes.py:95:1
   |
93 |         if re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*\s*=\s*Counter\(', line):
94 |             module_level_counters.append((i+1, line.strip()))
95 |     
   | ^^^^
96 |     if module_level_counters:
97 |         print("✗ Module-level Counter definitions still present:")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_fixes.py:103:1
    |
101 |     else:
102 |         print("✓ Module-level Counter definitions removed")
103 |     
    | ^^^^
104 |     return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_fixes.py:109:1
    |
107 |     """Test that top-level shim files exist"""
108 |     print("\nTesting top-level shim files")
109 |     
    | ^^^^
110 |     shims = ["signals.py", "rebalancer.py", "indicators.py"]
111 |     success = True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_fixes.py:112:1
    |
110 |     shims = ["signals.py", "rebalancer.py", "indicators.py"]
111 |     success = True
112 |     
    | ^^^^
113 |     for shim in shims:
114 |         if os.path.exists(shim):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_fixes.py:119:1
    |
117 |             print(f"✗ {shim} shim missing")
118 |             success = False
119 |     
    | ^^^^
120 |     # Check bot_engine.py has prepare_indicators
121 |     with open("bot_engine.py", 'r') as f:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_fixes.py:128:1
    |
126 |             print("✗ bot_engine.py missing prepare_indicators compatibility")
127 |             success = False
128 |     
    | ^^^^
129 |     return success
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_fixes.py:136:1
    |
134 |     print("VALIDATION: Testing fixes for three runtime blockers")
135 |     print("=" * 60)
136 |     
    | ^^^^
137 |     tests = [
138 |         test_legacy_imports,
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_fixes.py:143:1
    |
141 |         test_top_level_shims,
142 |     ]
143 |     
    | ^^^^
144 |     passed = 0
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_fixes.py:145:1
    |
144 |     passed = 0
145 |     
    | ^^^^
146 |     for test_func in tests:
147 |         try:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_fixes.py:152:1
    |
150 |         except Exception as e:
151 |             print(f"✗ Test {test_func.__name__} crashed: {e}")
152 |     
    | ^^^^
153 |     print("\n" + "=" * 60)
154 |     print(f"RESULTS: {passed}/{len(tests)} tests passed")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_fixes.py:155:1
    |
153 |     print("\n" + "=" * 60)
154 |     print(f"RESULTS: {passed}/{len(tests)} tests passed")
155 |     
    | ^^^^
156 |     if passed == len(tests):
157 |         print("✓ All fixes appear to be working correctly!")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_runtime_fixes.py:164:21
    |
163 | if __name__ == "__main__":
164 |     sys.exit(main())
    |                     ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_runtime_model.py:1:1
  |
1 | / from types import SimpleNamespace
2 | |
3 | | from ai_trading.core.runtime import build_runtime, NullAlphaModel
  | |_________________________________________________________________^
  |
help: Organize imports

W291 Trailing whitespace
 --> tests/test_runtime_params_hydration.py:4:67
  |
2 | Test runtime parameter hydration and validation.
3 |
4 | Validates that TradingConfig and build_runtime ensure all required 
  |                                                                   ^
5 | parameters are properly hydrated and accessible.
6 | """
  |
help: Remove trailing whitespace

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_runtime_params_hydration.py:7:1
  |
5 |   parameters are properly hydrated and accessible.
6 |   """
7 | / import pytest
8 | | import os
9 | | from unittest.mock import patch
  | |_______________________________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_params_hydration.py:15:1
   |
13 |     """Test that TradingConfig includes required trading parameters."""
14 |     from ai_trading.config.management import TradingConfig
15 |     
   | ^^^^
16 |     cfg = TradingConfig()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_params_hydration.py:17:1
   |
16 |     cfg = TradingConfig()
17 |     
   | ^^^^
18 |     # Verify required parameters are present as attributes
19 |     assert hasattr(cfg, 'capital_cap')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_params_hydration.py:22:1
   |
20 |     assert hasattr(cfg, 'dollar_risk_limit')
21 |     assert hasattr(cfg, 'max_position_size')
22 |     
   | ^^^^
23 |     # Verify default values
24 |     assert cfg.capital_cap == 0.04
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_params_hydration.py:32:1
   |
30 |     """Test that TradingConfig.from_env() loads parameters from environment."""
31 |     from ai_trading.config.management import TradingConfig
32 |     
   | ^^^^
33 |     # Test with environment variables
34 |     env_vars = {
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_params_hydration.py:39:1
   |
37 |         'MAX_POSITION_SIZE': '2.0',
38 |     }
39 |     
   | ^^^^
40 |     with patch.dict(os.environ, env_vars):
41 |         cfg = TradingConfig.from_env()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_params_hydration.py:42:1
   |
40 |     with patch.dict(os.environ, env_vars):
41 |         cfg = TradingConfig.from_env()
42 |         
   | ^^^^^^^^
43 |         assert cfg.capital_cap == 0.06
44 |         assert cfg.dollar_risk_limit == 0.08
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_runtime_params_hydration.py:59:5
   |
57 |   def test_build_runtime_hydrates_all_parameters():
58 |       """Test that build_runtime creates runtime with all required parameters."""
59 | /     from ai_trading.core.runtime import build_runtime, REQUIRED_PARAM_DEFAULTS
60 | |     from ai_trading.config.management import TradingConfig
   | |__________________________________________________________^
61 |       
62 |       cfg = TradingConfig()
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_params_hydration.py:61:1
   |
59 |     from ai_trading.core.runtime import build_runtime, REQUIRED_PARAM_DEFAULTS
60 |     from ai_trading.config.management import TradingConfig
61 |     
   | ^^^^
62 |     cfg = TradingConfig()
63 |     runtime = build_runtime(cfg)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_params_hydration.py:64:1
   |
62 |     cfg = TradingConfig()
63 |     runtime = build_runtime(cfg)
64 |     
   | ^^^^
65 |     # Verify runtime has params dict
66 |     assert hasattr(runtime, 'params')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_params_hydration.py:68:1
   |
66 |     assert hasattr(runtime, 'params')
67 |     assert isinstance(runtime.params, dict)
68 |     
   | ^^^^
69 |     # Verify all required parameters are present
70 |     for key in REQUIRED_PARAM_DEFAULTS.keys():
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_params_hydration.py:72:1
   |
70 |     for key in REQUIRED_PARAM_DEFAULTS.keys():
71 |         assert key in runtime.params, f"Missing required parameter: {key}"
72 |     
   | ^^^^
73 |     # Verify specific values
74 |     assert runtime.params['CAPITAL_CAP'] == 0.04
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_runtime_params_hydration.py:81:5
   |
79 |   def test_build_runtime_uses_config_values():
80 |       """Test that build_runtime uses values from TradingConfig."""
81 | /     from ai_trading.core.runtime import build_runtime
82 | |     from ai_trading.config.management import TradingConfig
   | |__________________________________________________________^
83 |       
84 |       # Create config with custom values
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_params_hydration.py:83:1
   |
81 |     from ai_trading.core.runtime import build_runtime
82 |     from ai_trading.config.management import TradingConfig
83 |     
   | ^^^^
84 |     # Create config with custom values
85 |     cfg = TradingConfig(
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_params_hydration.py:93:1
   |
91 |         conf_threshold=0.9
92 |     )
93 |     
   | ^^^^
94 |     runtime = build_runtime(cfg)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_params_hydration.py:95:1
   |
94 |     runtime = build_runtime(cfg)
95 |     
   | ^^^^
96 |     # Verify custom values are used
97 |     assert runtime.params['CAPITAL_CAP'] == 0.08
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_runtime_params_hydration.py:107:5
    |
105 |   def test_param_helper_fallback_logic():
106 |       """Test that _param helper function provides proper fallback logic."""
107 | /     from ai_trading.core.runtime import build_runtime
108 | |     from ai_trading.config.management import TradingConfig
    | |__________________________________________________________^
109 |       
110 |       # Create a runtime with params
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_params_hydration.py:109:1
    |
107 |     from ai_trading.core.runtime import build_runtime
108 |     from ai_trading.config.management import TradingConfig
109 |     
    | ^^^^
110 |     # Create a runtime with params
111 |     cfg = TradingConfig(capital_cap=0.08)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_params_hydration.py:113:1
    |
111 |     cfg = TradingConfig(capital_cap=0.08)
112 |     runtime = build_runtime(cfg)
113 |     
    | ^^^^
114 |     # Simulate the _param helper function logic
115 |     def _param(runtime, key, default):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_params_hydration.py:121:1
    |
119 |             return float(getattr(runtime.cfg, key.lower(), default))
120 |         return default
121 |     
    | ^^^^
122 |     # Test parameter access
123 |     assert _param(runtime, 'CAPITAL_CAP', 0.04) == 0.08
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_params_hydration.py:125:1
    |
123 |     assert _param(runtime, 'CAPITAL_CAP', 0.04) == 0.08
124 |     assert _param(runtime, 'MISSING_KEY', 999.0) == 999.0
125 |     
    | ^^^^
126 |     # Test with runtime that has no params
127 |     class MockRuntime:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_params_hydration.py:130:1
    |
128 |         def __init__(self, cfg):
129 |             self.cfg = cfg
130 |     
    | ^^^^
131 |     mock_runtime = MockRuntime(cfg)
132 |     assert _param(mock_runtime, 'CAPITAL_CAP', 0.04) == 0.08  # Falls back to cfg
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_runtime_params_hydration.py:138:5
    |
136 |   def test_no_missing_parameters_validation():
137 |       """Test that validation finds no missing parameters when properly configured."""
138 | /     from ai_trading.core.runtime import build_runtime, REQUIRED_PARAM_DEFAULTS
139 | |     from ai_trading.config.management import TradingConfig
    | |__________________________________________________________^
140 |       
141 |       cfg = TradingConfig.from_env()
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_params_hydration.py:140:1
    |
138 |     from ai_trading.core.runtime import build_runtime, REQUIRED_PARAM_DEFAULTS
139 |     from ai_trading.config.management import TradingConfig
140 |     
    | ^^^^
141 |     cfg = TradingConfig.from_env()
142 |     runtime = build_runtime(cfg)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_params_hydration.py:143:1
    |
141 |     cfg = TradingConfig.from_env()
142 |     runtime = build_runtime(cfg)
143 |     
    | ^^^^
144 |     # Simulate the validation logic from runner.py
145 |     missing = [k for k in REQUIRED_PARAM_DEFAULTS if k not in runtime.params]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_params_hydration.py:146:1
    |
144 |     # Simulate the validation logic from runner.py
145 |     missing = [k for k in REQUIRED_PARAM_DEFAULTS if k not in runtime.params]
146 |     
    | ^^^^
147 |     # Should be no missing parameters
148 |     assert missing == [], f"Found missing parameters: {missing}"
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_runtime_params_hydration.py:153:5
    |
151 |   def test_parameter_values_are_floats():
152 |       """Test that all parameter values are properly converted to floats."""
153 | /     from ai_trading.core.runtime import build_runtime
154 | |     from ai_trading.config.management import TradingConfig
    | |__________________________________________________________^
155 |       
156 |       cfg = TradingConfig()
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_params_hydration.py:155:1
    |
153 |     from ai_trading.core.runtime import build_runtime
154 |     from ai_trading.config.management import TradingConfig
155 |     
    | ^^^^
156 |     cfg = TradingConfig()
157 |     runtime = build_runtime(cfg)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_runtime_params_hydration.py:158:1
    |
156 |     cfg = TradingConfig()
157 |     runtime = build_runtime(cfg)
158 |     
    | ^^^^
159 |     # All parameter values should be floats
160 |     for key, value in runtime.params.items():
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_runtime_params_hydration.py:165:28
    |
164 | if __name__ == "__main__":
165 |     pytest.main([__file__])
    |                            ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_runtime_paths.py:6:1
  |
4 | Validates that the application has write permissions to required directories.
5 | """
6 | import pytest
  | ^^^^^^^^^^^^^
7 |
8 | def test_runtime_paths_writable():
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_paths.py:11:1
   |
 9 |     """Test that runtime paths are writable."""
10 |     from ai_trading import paths
11 |     
   | ^^^^
12 |     # Test DATA_DIR is writable
13 |     test_file = paths.DATA_DIR / "test_write.tmp"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_paths.py:20:1
   |
18 |     except PermissionError:
19 |         pytest.fail(f"DATA_DIR {paths.DATA_DIR} is not writable")
20 |     
   | ^^^^
21 |     # Test LOG_DIR is writable
22 |     test_file = paths.LOG_DIR / "test_write.tmp"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_paths.py:29:1
   |
27 |     except PermissionError:
28 |         pytest.fail(f"LOG_DIR {paths.LOG_DIR} is not writable")
29 |     
   | ^^^^
30 |     # Test CACHE_DIR is writable
31 |     test_file = paths.CACHE_DIR / "test_write.tmp"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_paths.py:43:1
   |
41 |     """Test that paths module can be imported."""
42 |     from ai_trading import paths
43 |     
   | ^^^^
44 |     assert hasattr(paths, 'DATA_DIR')
45 |     assert hasattr(paths, 'LOG_DIR')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_paths.py:47:1
   |
45 |     assert hasattr(paths, 'LOG_DIR')
46 |     assert hasattr(paths, 'CACHE_DIR')
47 |     
   | ^^^^
48 |     # Ensure directories exist
49 |     assert paths.DATA_DIR.exists()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_runtime_paths.py:57:1
   |
55 |     """Test that HTTP utilities are available."""
56 |     from ai_trading.utils import http
57 |     
   | ^^^^
58 |     assert hasattr(http, 'get')
59 |     assert hasattr(http, 'post')
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_runtime_paths.py:63:69
   |
61 |     assert hasattr(http, 'delete')
62 |
63 | # AI-AGENT-REF: Startup permission tests for runtime path validation
   |                                                                     ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_safe_submit_order.py:1:1
  |
1 | import types
  | ^^^^^^^^^^^^
2 |
3 | class DummyAPI:
  |
help: Organize imports

E501 Line too long (115 > 100)
 --> tests/test_safe_submit_order.py:7:101
  |
5 |         self.get_account = lambda: types.SimpleNamespace(buying_power="1000")
6 |         self.get_all_positions = lambda: []
7 |         self.submit_order = lambda order_data=None: types.SimpleNamespace(id=1, status="pending_new", filled_qty=0)
  |                                                                                                     ^^^^^^^^^^^^^^^
8 |         self.get_order_by_id = lambda oid: types.SimpleNamespace(id=1, status="pending_new", filled_qty=0)
  |

E501 Line too long (106 > 100)
 --> tests/test_safe_submit_order.py:8:101
  |
6 |         self.get_all_positions = lambda: []
7 |         self.submit_order = lambda order_data=None: types.SimpleNamespace(id=1, status="pending_new", filled_qty=0)
8 |         self.get_order_by_id = lambda oid: types.SimpleNamespace(id=1, status="pending_new", filled_qty=0)
  |                                                                                                     ^^^^^^
  |

W293 [*] Blank line contains whitespace
  --> tests/test_safe_submit_order.py:13:1
   |
11 | def test_safe_submit_order_pending_new(monkeypatch):
12 |     """Test safe_submit_order function with mock dependencies."""
13 |     
   | ^^^^
14 |     # Import only after conftest.py has set up mocks
15 |     from ai_trading.core import bot_engine
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_safe_submit_order.py:16:1
   |
14 |     # Import only after conftest.py has set up mocks
15 |     from ai_trading.core import bot_engine
16 |     
   | ^^^^
17 |     # Mock the required functions
18 |     monkeypatch.setattr(bot_engine, "market_is_open", lambda: True)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_safe_submit_order.py:20:1
   |
18 |     monkeypatch.setattr(bot_engine, "market_is_open", lambda: True)
19 |     monkeypatch.setattr(bot_engine, "check_alpaca_available", lambda x: True)
20 |     
   | ^^^^
21 |     api = DummyAPI()
22 |     req = types.SimpleNamespace(symbol="AAPL", qty=1, side="buy")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_safe_submit_order.py:23:1
   |
21 |     api = DummyAPI()
22 |     req = types.SimpleNamespace(symbol="AAPL", qty=1, side="buy")
23 |     
   | ^^^^
24 |     try:
25 |         order = bot_engine.safe_submit_order(api, req)
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_safety_fallbacks.py:1:1
  |
1 | / import pandas as pd
2 | | import os
  | |_________^
3 |
4 |   # Set test environment before importing heavy modules
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_safety_fallbacks.py:7:1
  |
5 | os.environ['PYTEST_RUNNING'] = 'true'
6 |
7 | import ai_trading.features.indicators as ind
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | def test_ensure_columns_accepts_symbol_arg():
  |
help: Organize imports

W292 [*] No newline at end of file
  --> tests/test_safety_fallbacks.py:27:50
   |
25 |     settings = get_settings()
26 |     assert hasattr(settings, 'pretrade_lookback_days')
27 |     assert settings.pretrade_lookback_days == 120
   |                                                  ^
   |
help: Add trailing newline

RUF100 [*] Unused `noqa` directive (non-enabled: `D401`)
  --> tests/test_sanitizing_logger_adapter.py:15:57
   |
13 |         self.last: logging.LogRecord | None = None
14 |
15 |     def emit(self, record: logging.LogRecord) -> None:  # noqa: D401
   |                                                         ^^^^^^^^^^^^
16 |         self.last = record
   |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_settings_bridge.py:3:1
  |
1 |   """Ensure legacy settings module re-exports modern config."""
2 |
3 | / from ai_trading.settings import get_settings as legacy_get
4 | | from ai_trading.config.settings import get_settings as modern_get
  | |_________________________________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_settings_config.py:1:1
  |
1 | / import pytest
2 | | from pydantic import ValidationError
3 | |
4 | | from ai_trading.config.settings import get_settings
5 | | from ai_trading.settings import Settings
6 | | from ai_trading.core.bot_engine import _current_qty
7 | | from ai_trading.main import logger
  | |__________________________________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:24:1
   |
22 | class TestShortSellingImplementation(unittest.TestCase):
23 |     """Test short selling capability implementation."""
24 |     
   | ^^^^
25 |     def setUp(self):
26 |         """Set up test environment."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:31:1
   |
29 |         self.mock_account = Mock()
30 |         self.mock_asset = Mock()
31 |         
   | ^^^^^^^^
32 |         # Configure mock responses
33 |         self.mock_account.buying_power = "50000.0"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:36:1
   |
34 |         self.mock_asset.shortable = True
35 |         self.mock_asset.shortable_shares = 1000
36 |         
   | ^^^^^^^^
37 |         self.mock_api.get_account.return_value = self.mock_account
38 |         self.mock_api.get_asset.return_value = self.mock_asset
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:39:1
   |
37 |         self.mock_api.get_account.return_value = self.mock_account
38 |         self.mock_api.get_asset.return_value = self.mock_asset
39 |         
   | ^^^^^^^^
40 |     def test_current_sell_logic_blocks_no_position(self):
41 |         """Test that current logic blocks sell orders when no position exists."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:44:1
   |
42 |         # This test documents the current behavior that we need to fix
43 |         from ai_trading.execution.engine import ExecutionEngine
44 |         
   | ^^^^^^^^
45 |         # Create mock context
46 |         mock_ctx = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:48:1
   |
46 |         mock_ctx = Mock()
47 |         mock_ctx.api = self.mock_api
48 |         
   | ^^^^^^^^
49 |         engine = ExecutionEngine(mock_ctx)
50 |         engine.logger = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:51:1
   |
49 |         engine = ExecutionEngine(mock_ctx)
50 |         engine.logger = Mock()
51 |         
   | ^^^^^^^^
52 |         # Mock _available_qty to return 0 (no existing position)
53 |         with patch.object(engine, '_available_qty', return_value=0):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:56:1
   |
54 |             with patch.object(engine, '_select_api', return_value=self.mock_api):
55 |                 result = engine.execute_order("AAPL", 10, "sell")
56 |                 
   | ^^^^^^^^^^^^^^^^
57 |                 # Should return None due to SKIP_NO_POSITION logic
58 |                 self.assertIsNone(result)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:59:1
   |
57 |                 # Should return None due to SKIP_NO_POSITION logic
58 |                 self.assertIsNone(result)
59 |                 
   | ^^^^^^^^^^^^^^^^
60 |                 # Should log the skip message
61 |                 engine.logger.info.assert_called_with("SKIP_NO_POSITION | no shares to sell, skipping")
   |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
  --> tests/test_short_selling_implementation.py:61:101
   |
60 |                 # Should log the skip message
61 |                 engine.logger.info.assert_called_with("SKIP_NO_POSITION | no shares to sell, skipping")
   |                                                                                                     ^^^
62 |     
63 |     def test_sell_short_validation_exists(self):
   |

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:62:1
   |
60 |                 # Should log the skip message
61 |                 engine.logger.info.assert_called_with("SKIP_NO_POSITION | no shares to sell, skipping")
62 |     
   | ^^^^
63 |     def test_sell_short_validation_exists(self):
64 |         """Test that _validate_short_selling method exists and works."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:66:1
   |
64 |         """Test that _validate_short_selling method exists and works."""
65 |         from ai_trading.execution.engine import ExecutionEngine
66 |         
   | ^^^^^^^^
67 |         # Create mock context
68 |         mock_ctx = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:70:1
   |
68 |         mock_ctx = Mock()
69 |         mock_ctx.api = self.mock_api
70 |         
   | ^^^^^^^^
71 |         engine = ExecutionEngine(mock_ctx)
72 |         engine.logger = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:73:1
   |
71 |         engine = ExecutionEngine(mock_ctx)
72 |         engine.logger = Mock()
73 |         
   | ^^^^^^^^
74 |         # Test that validation method exists
75 |         self.assertTrue(hasattr(engine, '_validate_short_selling'))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:76:1
   |
74 |         # Test that validation method exists
75 |         self.assertTrue(hasattr(engine, '_validate_short_selling'))
76 |         
   | ^^^^^^^^
77 |         # Test validation logic
78 |         result = engine._validate_short_selling(self.mock_api, "AAPL", 10)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:80:1
   |
78 |         result = engine._validate_short_selling(self.mock_api, "AAPL", 10)
79 |         self.assertTrue(result)  # Should pass with our mock setup
80 |         
   | ^^^^^^^^
81 |     def test_sell_short_side_should_be_distinguished(self):
82 |         """Test that sell_short orders bypass position checks and validate short selling."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:84:1
   |
82 |         """Test that sell_short orders bypass position checks and validate short selling."""
83 |         from ai_trading.execution.engine import ExecutionEngine
84 |         
   | ^^^^^^^^
85 |         # Create mock context
86 |         mock_ctx = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:88:1
   |
86 |         mock_ctx = Mock()
87 |         mock_ctx.api = self.mock_api
88 |         
   | ^^^^^^^^
89 |         engine = ExecutionEngine(mock_ctx)
90 |         engine.logger = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_short_selling_implementation.py:91:1
   |
89 |         engine = ExecutionEngine(mock_ctx)
90 |         engine.logger = Mock()
91 |         
   | ^^^^^^^^
92 |         # Test the key distinction: sell vs sell_short in early validation
93 |         # Mock everything to prevent execution from proceeding too far
   |
help: Remove whitespace from blank line

E501 Line too long (113 > 100)
  --> tests/test_short_selling_implementation.py:97:101
   |
95 |             with patch.object(engine, '_select_api', return_value=self.mock_api):
96 |                 with patch.object(engine, '_validate_short_selling', return_value=True):
97 |                     with patch.object(engine, '_assess_liquidity', side_effect=Exception("Stop execution here")):
   |                                                                                                     ^^^^^^^^^^^^^
98 |                         
99 |                         # Test that sell_short orders reach the validation step (don't get blocked by SKIP_NO_POSITION)
   |

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:98:1
    |
 96 |                 with patch.object(engine, '_validate_short_selling', return_value=True):
 97 |                     with patch.object(engine, '_assess_liquidity', side_effect=Exception("Stop execution here")):
 98 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
 99 |                         # Test that sell_short orders reach the validation step (don't get blocked by SKIP_NO_POSITION)
100 |                         try:
    |
help: Remove whitespace from blank line

E501 Line too long (119 > 100)
   --> tests/test_short_selling_implementation.py:99:101
    |
 97 |                     with patch.object(engine, '_assess_liquidity', side_effect=Exception("Stop execution here")):
 98 |                         
 99 |                         # Test that sell_short orders reach the validation step (don't get blocked by SKIP_NO_POSITION)
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^
100 |                         try:
101 |                             result = engine.execute_order("AAPL", 10, "sell_short")
    |

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:105:1
    |
103 |                             # Expected to reach this point, meaning it passed the initial validation
104 |                             pass
105 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
106 |                         # Verify short selling validation was called
107 |                         engine._validate_short_selling.assert_called_once_with(self.mock_api, "AAPL", 10)
    |
help: Remove whitespace from blank line

E501 Line too long (105 > 100)
   --> tests/test_short_selling_implementation.py:107:101
    |
106 |                         # Verify short selling validation was called
107 |                         engine._validate_short_selling.assert_called_once_with(self.mock_api, "AAPL", 10)
    |                                                                                                     ^^^^^
108 |                         # Verify the short sell initiation log
109 |                         engine.logger.info.assert_any_call("SHORT_SELL_INITIATED | symbol=%s qty=%d", "AAPL", 10)
    |

E501 Line too long (113 > 100)
   --> tests/test_short_selling_implementation.py:109:101
    |
107 |                         engine._validate_short_selling.assert_called_once_with(self.mock_api, "AAPL", 10)
108 |                         # Verify the short sell initiation log
109 |                         engine.logger.info.assert_any_call("SHORT_SELL_INITIATED | symbol=%s qty=%d", "AAPL", 10)
    |                                                                                                     ^^^^^^^^^^^^^
110 |                         
111 |                         # Now test that regular sell orders are blocked when no position exists
    |

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:110:1
    |
108 |                         # Verify the short sell initiation log
109 |                         engine.logger.info.assert_any_call("SHORT_SELL_INITIATED | symbol=%s qty=%d", "AAPL", 10)
110 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
111 |                         # Now test that regular sell orders are blocked when no position exists
112 |                         engine._validate_short_selling.reset_mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:114:1
    |
112 |                         engine._validate_short_selling.reset_mock()
113 |                         engine.logger.reset_mock()
114 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
115 |                         result = engine.execute_order("AAPL", 10, "sell")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:116:1
    |
115 |                         result = engine.execute_order("AAPL", 10, "sell")
116 |                         
    | ^^^^^^^^^^^^^^^^^^^^^^^^
117 |                         # Should return None and log SKIP_NO_POSITION
118 |                         self.assertIsNone(result)
    |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
   --> tests/test_short_selling_implementation.py:119:101
    |
117 |                         # Should return None and log SKIP_NO_POSITION
118 |                         self.assertIsNone(result)
119 |                         engine.logger.info.assert_called_with("SKIP_NO_POSITION | no shares to sell, skipping")
    |                                                                                                     ^^^^^^^^^^^
120 |                         # Short selling validation should NOT be called for regular sell
121 |                         engine._validate_short_selling.assert_not_called()
    |

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:122:1
    |
120 |                         # Short selling validation should NOT be called for regular sell
121 |                         engine._validate_short_selling.assert_not_called()
122 |         
    | ^^^^^^^^
123 |     def test_order_status_monitoring_needed(self):
124 |         """Test framework for order status monitoring."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:126:1
    |
124 |         """Test framework for order status monitoring."""
125 |         from ai_trading.execution.engine import ExecutionEngine
126 |         
    | ^^^^^^^^
127 |         # Create mock context
128 |         mock_ctx = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:130:1
    |
128 |         mock_ctx = Mock()
129 |         mock_ctx.api = self.mock_api
130 |         
    | ^^^^^^^^
131 |         engine = ExecutionEngine(mock_ctx)
132 |         engine.logger = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:133:1
    |
131 |         engine = ExecutionEngine(mock_ctx)
132 |         engine.logger = Mock()
133 |         
    | ^^^^^^^^
134 |         # Test order tracking functionality
135 |         mock_order = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:138:1
    |
136 |         mock_order.id = "test_order_123"
137 |         mock_order.status = "new"
138 |         
    | ^^^^^^^^
139 |         # Test _track_order method
140 |         engine._track_order(mock_order, "AAPL", "buy", 10)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:141:1
    |
139 |         # Test _track_order method
140 |         engine._track_order(mock_order, "AAPL", "buy", 10)
141 |         
    | ^^^^^^^^
142 |         # Verify order is tracked
143 |         pending_orders = engine.get_pending_orders()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:148:1
    |
146 |         self.assertEqual(pending_orders[0].symbol, "AAPL")
147 |         self.assertEqual(pending_orders[0].side, "buy")
148 |         
    | ^^^^^^^^
149 |         # Test status update
150 |         engine._update_order_status("test_order_123", "filled")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:151:1
    |
149 |         # Test status update
150 |         engine._update_order_status("test_order_123", "filled")
151 |         
    | ^^^^^^^^
152 |         # Verify order is removed from tracking after terminal status
153 |         pending_orders = engine.get_pending_orders()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:155:1
    |
153 |         pending_orders = engine.get_pending_orders()
154 |         self.assertEqual(len(pending_orders), 0)
155 |         
    | ^^^^^^^^
156 |         # Test stale order cleanup
157 |         # Add an old order
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:162:1
    |
160 |         old_order.status = "new"
161 |         engine._track_order(old_order, "MSFT", "sell", 5)
162 |         
    | ^^^^^^^^
163 |         # Mock the order as old by manipulating the tracking directly
164 |         import time
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_short_selling_implementation.py:164:9
    |
163 |           # Mock the order as old by manipulating the tracking directly
164 | /         import time
165 | |         from ai_trading.monitoring.order_health_monitor import _active_orders, _order_tracking_lock
    | |___________________________________________________________________________________________________^
166 |           with _order_tracking_lock:
167 |               if "old_order_456" in _active_orders:
    |
help: Organize imports

E501 Line too long (101 > 100)
   --> tests/test_short_selling_implementation.py:168:101
    |
166 |         with _order_tracking_lock:
167 |             if "old_order_456" in _active_orders:
168 |                 _active_orders["old_order_456"].submitted_time = time.time() - 700  # 700 seconds ago
    |                                                                                                     ^
169 |         
170 |         # Mock the cancel method to avoid API calls
    |

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:169:1
    |
167 |             if "old_order_456" in _active_orders:
168 |                 _active_orders["old_order_456"].submitted_time = time.time() - 700  # 700 seconds ago
169 |         
    | ^^^^^^^^
170 |         # Mock the cancel method to avoid API calls
171 |         with patch.object(engine, '_cancel_stale_order', return_value=True):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:178:1
    |
176 |         """Test that meta-learning provides graceful degradation when no data exists."""
177 |         from ai_trading.core.bot_engine import load_global_signal_performance
178 |         
    | ^^^^^^^^
179 |         # Test when no trade log file exists
180 |         with patch('os.path.exists', return_value=False):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:184:1
    |
182 |             # Should return None gracefully instead of raising an error
183 |             self.assertIsNone(result)
184 |         
    | ^^^^^^^^
185 |         # Test when trade log exists but is empty or has insufficient data
186 |         with patch('os.path.exists', return_value=True):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_short_selling_implementation.py:191:1
    |
189 |                 import pandas as pd
190 |                 mock_read_csv.return_value = pd.DataFrame()
191 |                 
    | ^^^^^^^^^^^^^^^^
192 |                 result = load_global_signal_performance(min_trades=1)  # Lower threshold
193 |                 # Should return empty dict instead of None for empty data
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_short_selling_implementation.py:197:20
    |
196 | if __name__ == '__main__':
197 |     unittest.main()
    |                    ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_signals.py:1:1
  |
1 | / import numpy as np
2 | | import pandas as pd
3 | | import pytest
4 | | import sys
5 | | import types
6 | | import importlib
  | |________________^
7 |
8 |   np.random.seed(0)
  |
help: Organize imports

E741 Ambiguous variable name: `l`
  --> tests/test_signals.py:39:25
   |
37 |     import types
38 |     pta = types.ModuleType('pandas_ta')
39 |     pta.vwap = lambda h,l,c,v: pd.Series((h+l+c)/3, index=sample_df.index)
   |                         ^
40 |     pta.macd = lambda c, **k: {
41 |         'MACD_12_26_9': c * 0 + 1.0,
   |

E741 Ambiguous variable name: `l`
  --> tests/test_signals.py:44:23
   |
42 |         'MACDs_12_26_9': c * 0 + 0.5,
43 |     }
44 |     pta.kc = lambda h,l,c,length=20: pd.DataFrame({0: c*0+1.0,1:c*0+2.0,2:c*0+3.0})
   |                       ^
45 |     pta.mfi = lambda h,l,c,v,length=14: pd.Series(c*0+5.0, index=sample_df.index)
46 |     pta.adx = lambda h,l,c,length=14: {
   |

E741 Ambiguous variable name: `l`
  --> tests/test_signals.py:45:24
   |
43 |     }
44 |     pta.kc = lambda h,l,c,length=20: pd.DataFrame({0: c*0+1.0,1:c*0+2.0,2:c*0+3.0})
45 |     pta.mfi = lambda h,l,c,v,length=14: pd.Series(c*0+5.0, index=sample_df.index)
   |                        ^
46 |     pta.adx = lambda h,l,c,length=14: {
47 |         'ADX_14': pd.Series(c*0+7.0, index=sample_df.index),
   |

E741 Ambiguous variable name: `l`
  --> tests/test_signals.py:46:24
   |
44 |     pta.kc = lambda h,l,c,length=20: pd.DataFrame({0: c*0+1.0,1:c*0+2.0,2:c*0+3.0})
45 |     pta.mfi = lambda h,l,c,v,length=14: pd.Series(c*0+5.0, index=sample_df.index)
46 |     pta.adx = lambda h,l,c,length=14: {
   |                        ^
47 |         'ADX_14': pd.Series(c*0+7.0, index=sample_df.index),
48 |         'DMP_14': pd.Series(c*0+1.0, index=sample_df.index),
   |

E501 Line too long (116 > 100)
  --> tests/test_signals.py:61:101
   |
59 |     retrain = importlib.import_module('retrain')
60 |     out = retrain.prepare_indicators(sample_df)
61 |     assert out['vwap'].iloc[-1] == pytest.approx((sample_df['high']+sample_df['low']+sample_df['close']).iloc[-1]/3)
   |                                                                                                     ^^^^^^^^^^^^^^^^
62 |     assert out['macd'].iloc[0] == 1.0
63 |     assert out['kc_upper'].iloc[0] == 3.0
   |

E501 Line too long (104 > 100)
  --> tests/test_signals.py:75:101
   |
73 |     monkeypatch.setattr(bot, 'load_global_signal_performance', lambda: [])
74 |     monkeypatch.setattr(sm, 'signal_momentum', lambda df, model=None: (1, 0.4, 'momentum'))
75 |     monkeypatch.setattr(sm, 'signal_mean_reversion', lambda df, model=None: (-1, 0.2, 'mean_reversion'))
   |                                                                                                     ^^^^
76 |     monkeypatch.setattr(sm, 'signal_ml', lambda df, model=None, symbol=None: (1, 0.6, 'ml'))
77 |     monkeypatch.setattr(sm, 'signal_sentiment', lambda ctx, ticker, df=None, model=None: (1, 0.1, 'sentiment'))
   |

E501 Line too long (111 > 100)
  --> tests/test_signals.py:77:101
   |
75 |     monkeypatch.setattr(sm, 'signal_mean_reversion', lambda df, model=None: (-1, 0.2, 'mean_reversion'))
76 |     monkeypatch.setattr(sm, 'signal_ml', lambda df, model=None, symbol=None: (1, 0.6, 'ml'))
77 |     monkeypatch.setattr(sm, 'signal_sentiment', lambda ctx, ticker, df=None, model=None: (1, 0.1, 'sentiment'))
   |                                                                                                     ^^^^^^^^^^^
78 |     monkeypatch.setattr(sm, 'signal_regime', lambda state, df, model=None: (1, 1.0, 'regime'))
79 |     monkeypatch.setattr(sm, 'signal_stochrsi', lambda df, model=None: (1, 0.1, 'stochrsi'))
   |

E501 Line too long (159 > 100)
  --> tests/test_signals.py:85:101
   |
83 | …
84 | …_signal_events=0)
85 | …t_proba=lambda x: [[0.4,0.6]], feature_names_in_=['rsi','macd','atr','vwap','sma_50','sma_200'])
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
86 | …el)
87 | …
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_signals_multi_horizon.py:1:1
  |
1 | / import pandas as pd
2 | | from ai_trading.indicators import compute_ema, compute_sma, compute_bollinger, compute_atr
  | |__________________________________________________________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_skip_logic.py:1:1
  |
1 | / import types
2 | | import pandas as pd
3 | | from ai_trading.core import bot_engine
  | |______________________________________^
  |
help: Organize imports

E501 Line too long (118 > 100)
  --> tests/test_skip_logic.py:13:101
   |
12 |     orders = []
13 |     monkeypatch.setattr(bot_engine, "submit_order", lambda ctx, symbol, qty, side: orders.append((symbol, qty, side)))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^
14 |     monkeypatch.setattr(bot_engine, "is_market_open", lambda: True)
15 |     monkeypatch.setattr(bot_engine, "fetch_minute_df_safe", lambda s: pd.DataFrame({"close": [1]}, index=[pd.Timestamp("2023-01-01")]))
   |

E501 Line too long (135 > 100)
  --> tests/test_skip_logic.py:15:101
   |
13 |     monkeypatch.setattr(bot_engine, "submit_order", lambda ctx, symbol, qty, side: orders.append((symbol, qty, side)))
14 |     monkeypatch.setattr(bot_engine, "is_market_open", lambda: True)
15 |     monkeypatch.setattr(bot_engine, "fetch_minute_df_safe", lambda s: pd.DataFrame({"close": [1]}, index=[pd.Timestamp("2023-01-01")]))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 |     monkeypatch.setattr(bot_engine, "_safe_trade", lambda *a, **k: None)
17 |     monkeypatch.setattr(bot_engine.prediction_executor, "submit", lambda fn, s: types.SimpleNamespace(result=lambda: fn(s)))
   |

E501 Line too long (124 > 100)
  --> tests/test_skip_logic.py:17:101
   |
15 |     monkeypatch.setattr(bot_engine, "fetch_minute_df_safe", lambda s: pd.DataFrame({"close": [1]}, index=[pd.Timestamp("2023-01-01")]))
16 |     monkeypatch.setattr(bot_engine, "_safe_trade", lambda *a, **k: None)
17 |     monkeypatch.setattr(bot_engine.prediction_executor, "submit", lambda fn, s: types.SimpleNamespace(result=lambda: fn(s)))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
18 |     monkeypatch.setattr(bot_engine, "log_skip_cooldown", lambda *a, **k: None)
19 |     monkeypatch.setattr(bot_engine.skipped_duplicates, "inc", lambda: None)
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_slippage.py:1:1
  |
1 | import pandas as pd
  | ^^^^^^^^^^^^^^^^^^^
2 |
3 | def test_slippage_limits():
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_staleness_guard.py:4:1
  |
2 |   Tests for data staleness guard functionality.
3 |   """
4 | / import datetime
5 | | from unittest.mock import Mock
6 | | import pandas as pd
7 | |
8 | | import pytest
  | |_____________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_staleness_guard.py:18:1
   |
16 |         # Import the function we're testing
17 |         from ai_trading.core.bot_engine import _ensure_data_fresh
18 |         
   | ^^^^^^^^
19 |         # Create a mock fetcher that returns fresh data
20 |         now = datetime.datetime.now(datetime.timezone.utc)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_staleness_guard.py:22:1
   |
20 |         now = datetime.datetime.now(datetime.timezone.utc)
21 |         fresh_timestamp = now - datetime.timedelta(seconds=30)  # 30 seconds old
22 |         
   | ^^^^^^^^
23 |         # Create test dataframe with fresh timestamp
24 |         df = pd.DataFrame({
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_staleness_guard.py:26:29
   |
24 |         df = pd.DataFrame({
25 |             'open': [100.0],
26 |             'high': [101.0], 
   |                             ^
27 |             'low': [99.0],
28 |             'close': [100.5],
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_staleness_guard.py:32:1
   |
30 |             'timestamp': [fresh_timestamp]
31 |         })
32 |         
   | ^^^^^^^^
33 |         # Mock fetcher
34 |         mock_fetcher = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_staleness_guard.py:36:1
   |
34 |         mock_fetcher = Mock()
35 |         mock_fetcher.get_minute_df = Mock(return_value=df)
36 |         
   | ^^^^^^^^
37 |         # Should not raise any exception for fresh data
38 |         try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_staleness_guard.py:43:1
   |
41 |         except Exception:
42 |             success = False
43 |             
   | ^^^^^^^^^^^^
44 |         assert success, "Should not raise exception for fresh data"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_staleness_guard.py:49:1
   |
47 |         """Test staleness guard with stale data."""
48 |         from ai_trading.core.bot_engine import _ensure_data_fresh
49 |         
   | ^^^^^^^^
50 |         # Create a mock fetcher that returns stale data
51 |         now = datetime.datetime.now(datetime.timezone.utc)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_staleness_guard.py:53:1
   |
51 |         now = datetime.datetime.now(datetime.timezone.utc)
52 |         stale_timestamp = now - datetime.timedelta(seconds=600)  # 10 minutes old
53 |         
   | ^^^^^^^^
54 |         # Create test dataframe with stale timestamp
55 |         df = pd.DataFrame({
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_staleness_guard.py:58:27
   |
56 |             'open': [100.0],
57 |             'high': [101.0],
58 |             'low': [99.0], 
   |                           ^
59 |             'close': [100.5],
60 |             'volume': [1000],
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_staleness_guard.py:63:1
   |
61 |             'timestamp': [stale_timestamp]
62 |         })
63 |         
   | ^^^^^^^^
64 |         # Mock fetcher
65 |         mock_fetcher = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_staleness_guard.py:67:1
   |
65 |         mock_fetcher = Mock()
66 |         mock_fetcher.get_minute_df = Mock(return_value=df)
67 |         
   | ^^^^^^^^
68 |         # Should raise RuntimeError for stale data
69 |         with pytest.raises(RuntimeError, match="Stale data for symbols"):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_staleness_guard.py:75:1
   |
73 |         """Test staleness guard with no data."""
74 |         from ai_trading.core.bot_engine import _ensure_data_fresh
75 |         
   | ^^^^^^^^
76 |         # Mock fetcher that returns None/empty data
77 |         mock_fetcher = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_staleness_guard.py:79:1
   |
77 |         mock_fetcher = Mock()
78 |         mock_fetcher.get_minute_df = Mock(return_value=None)
79 |         
   | ^^^^^^^^
80 |         # Should raise RuntimeError for no data
81 |         with pytest.raises(RuntimeError, match="Stale data for symbols"):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_staleness_guard.py:87:1
   |
85 |         """Test staleness guard with empty dataframe."""
86 |         from ai_trading.core.bot_engine import _ensure_data_fresh
87 |         
   | ^^^^^^^^
88 |         # Mock fetcher that returns empty dataframe
89 |         mock_fetcher = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_staleness_guard.py:91:1
   |
89 |         mock_fetcher = Mock()
90 |         mock_fetcher.get_minute_df = Mock(return_value=pd.DataFrame())
91 |         
   | ^^^^^^^^
92 |         # Should raise RuntimeError for empty data
93 |         with pytest.raises(RuntimeError, match="Stale data for symbols"):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:99:1
    |
 97 |         """Test staleness guard with multiple symbols."""
 98 |         from ai_trading.core.bot_engine import _ensure_data_fresh
 99 |         
    | ^^^^^^^^
100 |         now = datetime.datetime.now(datetime.timezone.utc)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:101:1
    |
100 |         now = datetime.datetime.now(datetime.timezone.utc)
101 |         
    | ^^^^^^^^
102 |         # Create mock fetcher that returns different data for different symbols
103 |         def mock_get_minute_df(symbol, start, end):
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_staleness_guard.py:112:38
    |
110 |                 })
111 |             elif symbol == "MSFT":
112 |                 # Stale data for MSFT  
    |                                      ^^
113 |                 stale_ts = now - datetime.timedelta(seconds=600)
114 |                 return pd.DataFrame({
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:121:1
    |
119 |                 # No data for other symbols
120 |                 return None
121 |         
    | ^^^^^^^^
122 |         mock_fetcher = Mock()
123 |         mock_fetcher.get_minute_df = Mock(side_effect=mock_get_minute_df)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:124:1
    |
122 |         mock_fetcher = Mock()
123 |         mock_fetcher.get_minute_df = Mock(side_effect=mock_get_minute_df)
124 |         
    | ^^^^^^^^
125 |         # Should raise RuntimeError mentioning the stale symbol
126 |         with pytest.raises(RuntimeError) as exc_info:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:128:1
    |
126 |         with pytest.raises(RuntimeError) as exc_info:
127 |             _ensure_data_fresh(mock_fetcher, ["AAPL", "MSFT", "GOOGL"], max_age_seconds=300)
128 |         
    | ^^^^^^^^
129 |         error_msg = str(exc_info.value)
130 |         assert "MSFT" in error_msg, "Error should mention MSFT as stale"
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_staleness_guard.py:135:9
    |
133 |       def test_staleness_guard_utc_logging(self):
134 |           """Test that staleness guard logs UTC timestamps."""
135 | /         from ai_trading.core.bot_engine import _ensure_data_fresh
136 | |         from unittest.mock import patch
    | |_______________________________________^
137 |           
138 |           # Mock logger to capture log messages
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:137:1
    |
135 |         from ai_trading.core.bot_engine import _ensure_data_fresh
136 |         from unittest.mock import patch
137 |         
    | ^^^^^^^^
138 |         # Mock logger to capture log messages
139 |         with patch('ai_trading.core.bot_engine.logger') as mock_logger:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:142:1
    |
140 |             now = datetime.datetime.now(datetime.timezone.utc)
141 |             fresh_timestamp = now - datetime.timedelta(seconds=30)
142 |             
    | ^^^^^^^^^^^^
143 |             df = pd.DataFrame({
144 |                 'timestamp': [fresh_timestamp],
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:147:1
    |
145 |                 'close': [100.0]
146 |             })
147 |             
    | ^^^^^^^^^^^^
148 |             mock_fetcher = Mock()
149 |             mock_fetcher.get_minute_df = Mock(return_value=df)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:150:1
    |
148 |             mock_fetcher = Mock()
149 |             mock_fetcher.get_minute_df = Mock(return_value=df)
150 |             
    | ^^^^^^^^^^^^
151 |             # Call the function
152 |             _ensure_data_fresh(mock_fetcher, ["AAPL"], max_age_seconds=300)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:153:1
    |
151 |             # Call the function
152 |             _ensure_data_fresh(mock_fetcher, ["AAPL"], max_age_seconds=300)
153 |             
    | ^^^^^^^^^^^^
154 |             # Verify debug log was called with UTC timestamp
155 |             mock_logger.debug.assert_called()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:158:1
    |
156 |             debug_call_args = mock_logger.debug.call_args[0]
157 |             assert "UTC now=" in debug_call_args[0], "Should log UTC timestamp"
158 |             
    | ^^^^^^^^^^^^
159 |             # Verify the timestamp format is ISO
160 |             assert "T" in debug_call_args[1], "Should use ISO format timestamp"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:165:1
    |
163 |         """Test staleness guard handles timezone-aware and naive timestamps."""
164 |         from ai_trading.core.bot_engine import _ensure_data_fresh
165 |         
    | ^^^^^^^^
166 |         now = datetime.datetime.now(datetime.timezone.utc)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:167:1
    |
166 | …     now = datetime.datetime.now(datetime.timezone.utc)
167 | …     
    ^^^^^^^^
168 | …     # Test with timezone-naive timestamp (should be treated as UTC)
169 | …     naive_timestamp = datetime.datetime.now(datetime.timezone.utc).replace(tzinfo=None) - datetime.timedelta(seconds=30)  # AI-AGEN…
    |
help: Remove whitespace from blank line

E501 Line too long (172 > 100)
   --> tests/test_staleness_guard.py:169:101
    |
168 | …)
169 | ….replace(tzinfo=None) - datetime.timedelta(seconds=30)  # AI-AGENT-REF: Create naive datetime from UTC
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
170 | …
171 | …
    |

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:174:1
    |
172 |             'close': [100.0]
173 |         })
174 |         
    | ^^^^^^^^
175 |         # Test with timezone-aware timestamp  
176 |         aware_timestamp = (now - datetime.timedelta(seconds=30)).replace(tzinfo=datetime.timezone.utc)
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_staleness_guard.py:175:45
    |
173 |         })
174 |         
175 |         # Test with timezone-aware timestamp  
    |                                             ^^
176 |         aware_timestamp = (now - datetime.timedelta(seconds=30)).replace(tzinfo=datetime.timezone.utc)
177 |         df_aware = pd.DataFrame({
    |
help: Remove trailing whitespace

E501 Line too long (102 > 100)
   --> tests/test_staleness_guard.py:176:101
    |
175 |         # Test with timezone-aware timestamp  
176 |         aware_timestamp = (now - datetime.timedelta(seconds=30)).replace(tzinfo=datetime.timezone.utc)
    |                                                                                                     ^^
177 |         df_aware = pd.DataFrame({
178 |             'timestamp': [aware_timestamp], 
    |

W291 [*] Trailing whitespace
   --> tests/test_staleness_guard.py:178:44
    |
176 |         aware_timestamp = (now - datetime.timedelta(seconds=30)).replace(tzinfo=datetime.timezone.utc)
177 |         df_aware = pd.DataFrame({
178 |             'timestamp': [aware_timestamp], 
    |                                            ^
179 |             'close': [100.0]
180 |         })
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:181:1
    |
179 |             'close': [100.0]
180 |         })
181 |         
    | ^^^^^^^^
182 |         mock_fetcher = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:183:1
    |
182 |         mock_fetcher = Mock()
183 |         
    | ^^^^^^^^
184 |         # Test both cases should work without error
185 |         for df in [df_naive, df_aware]:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:197:1
    |
195 |         """Test staleness guard handles fetcher errors gracefully."""
196 |         from ai_trading.core.bot_engine import _ensure_data_fresh
197 |         
    | ^^^^^^^^
198 |         # Mock fetcher that raises an exception
199 |         mock_fetcher = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:201:1
    |
199 |         mock_fetcher = Mock()
200 |         mock_fetcher.get_minute_df = Mock(side_effect=Exception("Network error"))
201 |         
    | ^^^^^^^^
202 |         # Should raise RuntimeError with error details
203 |         with pytest.raises(RuntimeError) as exc_info:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_staleness_guard.py:205:1
    |
203 |         with pytest.raises(RuntimeError) as exc_info:
204 |             _ensure_data_fresh(mock_fetcher, ["AAPL"], max_age_seconds=300)
205 |         
    | ^^^^^^^^
206 |         error_msg = str(exc_info.value)
207 |         assert "error=" in error_msg, "Should include error details in message"
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_staleness_guard.py:207:80
    |
206 |         error_msg = str(exc_info.value)
207 |         assert "error=" in error_msg, "Should include error details in message"
    |                                                                                ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_strategies_base_extra.py:1:1
  |
1 | / from ai_trading.strategies.base import Strategy
2 | | from ai_trading.core.bot_engine import asset_class_for
  | |______________________________________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_strategies_module.py:62:1
   |
60 |   sys.modules["finnhub"] = finnhub_stub
61 |
62 | / from ai_trading.core.bot_engine import get_strategies
63 | | from ai_trading.config import settings as settings_module
   | |_________________________________________________________^
   |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_strategy_allocator_exit.py:1:1
  |
1 | / from ai_trading.strategies import TradeSignal
2 | | import sys
3 | | from pathlib import Path
4 | | import pytest
  | |_____________^
5 |
6 |   # Add the project root to sys.path to ensure we can import the real module
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_exit.py:17:1
   |
15 |     # Save the original module if it exists
16 |     original_module = sys.modules.get('strategy_allocator')
17 |     
   | ^^^^
18 |     # Remove any existing mock module
19 |     if 'strategy_allocator' in sys.modules:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_exit.py:21:1
   |
19 |     if 'strategy_allocator' in sys.modules:
20 |         del sys.modules['strategy_allocator']
21 |     
   | ^^^^
22 |     # Import the real module from file path
23 |     import ai_trading.strategy_allocator as strategy_allocator  # AI-AGENT-REF: normalized import
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_exit.py:24:1
   |
22 |     # Import the real module from file path
23 |     import ai_trading.strategy_allocator as strategy_allocator  # AI-AGENT-REF: normalized import
24 |     
   | ^^^^
25 |     # Verify we have the real StrategyAllocator class
26 |     assert hasattr(strategy_allocator.StrategyAllocator, '__init__')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_exit.py:28:1
   |
26 |     assert hasattr(strategy_allocator.StrategyAllocator, '__init__')
27 |     assert hasattr(strategy_allocator.StrategyAllocator(), 'config')
28 |     
   | ^^^^
29 |     yield strategy_allocator
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_exit.py:30:1
   |
29 |     yield strategy_allocator
30 |     
   | ^^^^
31 |     # Cleanup: restore original module if it was there
32 |     if original_module and hasattr(original_module, 'StrategyAllocator'):
   |
help: Remove whitespace from blank line

E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
  --> tests/test_strategy_allocator_exit.py:33:12
   |
31 |     # Cleanup: restore original module if it was there
32 |     if original_module and hasattr(original_module, 'StrategyAllocator'):
33 |         if original_module.StrategyAllocator != object:
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 |             sys.modules['strategy_allocator'] = original_module
   |

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_exit.py:43:1
   |
41 |     alloc.config.delta_threshold = 0.0  # Allow repeated signals with same confidence
42 |     alloc.config.signal_confirmation_bars = 2  # Ensure we have expected confirmation bars
43 |     
   | ^^^^
44 |     buy = TradeSignal(symbol="A", side="buy", confidence=1.0, strategy="s")
45 |     sell = TradeSignal(symbol="A", side="sell", confidence=1.0, strategy="s")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_exit.py:46:1
   |
44 |     buy = TradeSignal(symbol="A", side="buy", confidence=1.0, strategy="s")
45 |     sell = TradeSignal(symbol="A", side="sell", confidence=1.0, strategy="s")
46 |     
   | ^^^^
47 |     # Need to call allocate twice to confirm signals (signal_confirmation_bars = 2)
48 |     alloc.select_signals({"s": [buy]})  # First call to build history
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_exit.py:51:1
   |
49 |     out1 = alloc.select_signals({"s": [buy]})  # Second call should confirm and set hold_protect=4
50 |     assert any(s.side == "buy" for s in out1)
51 |     
   | ^^^^
52 |     # Now try to sell - should be blocked by hold protection 4 times
53 |     alloc.select_signals({"s": [sell]})  # First sell call - builds history
   |
help: Remove whitespace from blank line

E501 Line too long (120 > 100)
  --> tests/test_strategy_allocator_exit.py:54:101
   |
52 |     # Now try to sell - should be blocked by hold protection 4 times
53 |     alloc.select_signals({"s": [sell]})  # First sell call - builds history
54 |     out2 = alloc.select_signals({"s": [sell]})  # Second sell call - confirmed but blocked by hold_protect (remaining=3)
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
55 |     assert not any(s.side == "sell" for s in out2)
   |

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_exit.py:56:1
   |
54 |     out2 = alloc.select_signals({"s": [sell]})  # Second sell call - confirmed but blocked by hold_protect (remaining=3)
55 |     assert not any(s.side == "sell" for s in out2)
56 |     
   | ^^^^
57 |     # Need to call sell 3 more times to exhaust hold protection
58 |     out3 = alloc.select_signals({"s": [sell]})  # Third sell call - blocked by hold_protect (remaining=2)  
   |
help: Remove whitespace from blank line

E501 Line too long (107 > 100)
  --> tests/test_strategy_allocator_exit.py:58:101
   |
57 |     # Need to call sell 3 more times to exhaust hold protection
58 |     out3 = alloc.select_signals({"s": [sell]})  # Third sell call - blocked by hold_protect (remaining=2)  
   |                                                                                                     ^^^^^^^
59 |     assert not any(s.side == "sell" for s in out3)
   |

W291 [*] Trailing whitespace
  --> tests/test_strategy_allocator_exit.py:58:106
   |
57 |     # Need to call sell 3 more times to exhaust hold protection
58 |     out3 = alloc.select_signals({"s": [sell]})  # Third sell call - blocked by hold_protect (remaining=2)  
   |                                                                                                          ^^
59 |     assert not any(s.side == "sell" for s in out3)
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_exit.py:60:1
   |
58 |     out3 = alloc.select_signals({"s": [sell]})  # Third sell call - blocked by hold_protect (remaining=2)  
59 |     assert not any(s.side == "sell" for s in out3)
60 |     
   | ^^^^
61 |     out4 = alloc.select_signals({"s": [sell]})  # Fourth sell call - blocked by hold_protect (remaining=1)
62 |     assert not any(s.side == "sell" for s in out4)
   |
help: Remove whitespace from blank line

E501 Line too long (106 > 100)
  --> tests/test_strategy_allocator_exit.py:61:101
   |
59 |     assert not any(s.side == "sell" for s in out3)
60 |     
61 |     out4 = alloc.select_signals({"s": [sell]})  # Fourth sell call - blocked by hold_protect (remaining=1)
   |                                                                                                     ^^^^^^
62 |     assert not any(s.side == "sell" for s in out4)
   |

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_exit.py:63:1
   |
61 |     out4 = alloc.select_signals({"s": [sell]})  # Fourth sell call - blocked by hold_protect (remaining=1)
62 |     assert not any(s.side == "sell" for s in out4)
63 |     
   | ^^^^
64 |     out5 = alloc.select_signals({"s": [sell]})  # Fifth sell call - blocked by hold_protect (remaining=0)
65 |     assert not any(s.side == "sell" for s in out5)
   |
help: Remove whitespace from blank line

E501 Line too long (105 > 100)
  --> tests/test_strategy_allocator_exit.py:64:101
   |
62 |     assert not any(s.side == "sell" for s in out4)
63 |     
64 |     out5 = alloc.select_signals({"s": [sell]})  # Fifth sell call - blocked by hold_protect (remaining=0)
   |                                                                                                     ^^^^^
65 |     assert not any(s.side == "sell" for s in out5)
   |

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_exit.py:66:1
   |
64 |     out5 = alloc.select_signals({"s": [sell]})  # Fifth sell call - blocked by hold_protect (remaining=0)
65 |     assert not any(s.side == "sell" for s in out5)
66 |     
   | ^^^^
67 |     out6 = alloc.select_signals({"s": [sell]})  # Sixth sell call - should finally go through
68 |     assert any(s.side == "sell" for s in out6)
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_strategy_allocator_regression.py:9:1
   |
 7 |   """
 8 |
 9 | / from ai_trading.strategies import TradeSignal
10 | | import ai_trading.strategy_allocator as strategy_allocator  # AI-AGENT-REF: normalized import
   | |__________________________________________________________^
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:15:1
   |
13 | class TestStrategyAllocatorRegression:
14 |     """Regression tests for previously fixed signal confirmation issues."""
15 |     
   | ^^^^
16 |     def test_signal_confirmation_with_zero_min_confidence(self):
17 |         """
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:19:1
   |
17 |         """
18 |         Regression test for the original failing scenario.
19 |         
   | ^^^^^^^^
20 |         The original issue was that with min_confidence=0.0, the second call
21 |         to allocate() was returning an empty list instead of confirmed signals.
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:24:1
   |
22 |         """
23 |         alloc = strategy_allocator.StrategyAllocator()
24 |         
   | ^^^^^^^^
25 |         # Set exact configuration from original failing test
26 |         alloc.config.delta_threshold = 0.0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:29:1
   |
27 |         alloc.config.signal_confirmation_bars = 2
28 |         alloc.config.min_confidence = 0.0
29 |         
   | ^^^^^^^^
30 |         sig = TradeSignal(symbol="AAPL", side="buy", confidence=1.0, strategy="s1")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:31:1
   |
30 |         sig = TradeSignal(symbol="AAPL", side="buy", confidence=1.0, strategy="s1")
31 |         
   | ^^^^^^^^
32 |         # First call: Build signal history (should return empty list)
33 |         out1 = alloc.select_signals({"s1": [sig]})
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:35:1
   |
33 |         out1 = alloc.select_signals({"s1": [sig]})
34 |         assert out1 == [], "First call should return empty list (unconfirmed signals)"
35 |         
   | ^^^^^^^^
36 |         # Second call: Confirm signals (should return confirmed signal)
37 |         out2 = alloc.select_signals({"s1": [sig]})
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:41:1
   |
39 |         assert len(out2) == 1, "Should return exactly one signal"
40 |         assert out2[0].confidence == 1.0, "Signal confidence should be preserved"
41 |     
   | ^^^^
42 |     def test_config_missing_min_confidence_attribute(self):
43 |         """
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:45:1
   |
43 |         """
44 |         Regression test for missing min_confidence attribute in config.
45 |         
   | ^^^^^^^^
46 |         Previously, if min_confidence was missing from config, it could cause
47 |         AttributeError or incorrect behavior.
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:50:1
   |
48 |         """
49 |         alloc = strategy_allocator.StrategyAllocator()
50 |         
   | ^^^^^^^^
51 |         # Remove min_confidence attribute to simulate missing config
52 |         if hasattr(alloc.config, 'min_confidence'):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:54:1
   |
52 |         if hasattr(alloc.config, 'min_confidence'):
53 |             delattr(alloc.config, 'min_confidence')
54 |         
   | ^^^^^^^^
55 |         alloc.config.delta_threshold = 0.0
56 |         alloc.config.signal_confirmation_bars = 2
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:57:1
   |
55 |         alloc.config.delta_threshold = 0.0
56 |         alloc.config.signal_confirmation_bars = 2
57 |         
   | ^^^^^^^^
58 |         sig = TradeSignal(symbol="AAPL", side="buy", confidence=1.0, strategy="s1")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:59:1
   |
58 |         sig = TradeSignal(symbol="AAPL", side="buy", confidence=1.0, strategy="s1")
59 |         
   | ^^^^^^^^
60 |         # Should not raise exception and should use default threshold
61 |         out1 = alloc.select_signals({"s1": [sig]})
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:63:1
   |
61 |         out1 = alloc.select_signals({"s1": [sig]})
62 |         out2 = alloc.select_signals({"s1": [sig]})
63 |         
   | ^^^^^^^^
64 |         # With default min_confidence (0.6) and signal confidence (1.0), should confirm
65 |         assert len(out2) == 1, "Should confirm signal with default threshold"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:67:1
   |
65 |         assert len(out2) == 1, "Should confirm signal with default threshold"
66 |         assert out2[0].symbol == "AAPL", "Should return AAPL signal"
67 |     
   | ^^^^
68 |     def test_config_none_min_confidence(self):
69 |         """
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:71:1
   |
69 |         """
70 |         Regression test for None min_confidence value.
71 |         
   | ^^^^^^^^
72 |         Previously, if min_confidence was set to None, it could cause
73 |         comparison errors or unexpected behavior.
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:76:1
   |
74 |         """
75 |         alloc = strategy_allocator.StrategyAllocator()
76 |         
   | ^^^^^^^^
77 |         alloc.config.min_confidence = None
78 |         alloc.config.delta_threshold = 0.0
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:80:1
   |
78 |         alloc.config.delta_threshold = 0.0
79 |         alloc.config.signal_confirmation_bars = 2
80 |         
   | ^^^^^^^^
81 |         sig = TradeSignal(symbol="AAPL", side="buy", confidence=1.0, strategy="s1")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:82:1
   |
81 |         sig = TradeSignal(symbol="AAPL", side="buy", confidence=1.0, strategy="s1")
82 |         
   | ^^^^^^^^
83 |         # Should not raise exception and should use default threshold
84 |         out1 = alloc.select_signals({"s1": [sig]})
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:86:1
   |
84 |         out1 = alloc.select_signals({"s1": [sig]})
85 |         out2 = alloc.select_signals({"s1": [sig]})
86 |         
   | ^^^^^^^^
87 |         # With default min_confidence (0.6) and signal confidence (1.0), should confirm
88 |         assert len(out2) == 1, "Should confirm signal with default threshold"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:90:1
   |
88 |         assert len(out2) == 1, "Should confirm signal with default threshold"
89 |         assert out2[0].symbol == "AAPL", "Should return AAPL signal"
90 |     
   | ^^^^
91 |     def test_signal_confirmation_boundary_conditions(self):
92 |         """
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_strategy_allocator_regression.py:94:1
   |
92 |         """
93 |         Test signal confirmation at various boundary conditions.
94 |         
   | ^^^^^^^^
95 |         Ensures that the confirmation logic works correctly at edge cases
96 |         that could have caused the original failure.
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:106:1
    |
104 |             (0.5, 0.8, True),    # Above threshold
105 |         ]
106 |         
    | ^^^^^^^^
107 |         for min_conf, sig_conf, should_confirm in test_cases:
108 |             alloc = strategy_allocator.StrategyAllocator()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:112:1
    |
110 |             alloc.config.signal_confirmation_bars = 2
111 |             alloc.config.min_confidence = min_conf
112 |             
    | ^^^^^^^^^^^^
113 |             sig = TradeSignal(symbol="AAPL", side="buy", confidence=sig_conf, strategy="s1")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:114:1
    |
113 |             sig = TradeSignal(symbol="AAPL", side="buy", confidence=sig_conf, strategy="s1")
114 |             
    | ^^^^^^^^^^^^
115 |             out1 = alloc.select_signals({"s1": [sig]})
116 |             out2 = alloc.select_signals({"s1": [sig]})
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:117:1
    |
115 |             out1 = alloc.select_signals({"s1": [sig]})
116 |             out2 = alloc.select_signals({"s1": [sig]})
117 |             
    | ^^^^^^^^^^^^
118 |             if should_confirm:
119 |                 assert len(out2) == 1, f"Should confirm with min_conf={min_conf}, sig_conf={sig_conf}"
    |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> tests/test_strategy_allocator_regression.py:119:101
    |
118 |             if should_confirm:
119 |                 assert len(out2) == 1, f"Should confirm with min_conf={min_conf}, sig_conf={sig_conf}"
    |                                                                                                     ^^
120 |                 assert out2[0].symbol == "AAPL", "Should return AAPL signal"
121 |             else:
    |

E501 Line too long (106 > 100)
   --> tests/test_strategy_allocator_regression.py:122:101
    |
120 |                 assert out2[0].symbol == "AAPL", "Should return AAPL signal"
121 |             else:
122 |                 assert len(out2) == 0, f"Should NOT confirm with min_conf={min_conf}, sig_conf={sig_conf}"
    |                                                                                                     ^^^^^^
123 |     
124 |     def test_invalid_signal_confidence_handling(self):
    |

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:123:1
    |
121 |             else:
122 |                 assert len(out2) == 0, f"Should NOT confirm with min_conf={min_conf}, sig_conf={sig_conf}"
123 |     
    | ^^^^
124 |     def test_invalid_signal_confidence_handling(self):
125 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:127:1
    |
125 |         """
126 |         Test handling of invalid signal confidence values.
127 |         
    | ^^^^^^^^
128 |         Ensures that out-of-range confidence values are properly normalized
129 |         and don't cause the confirmation logic to fail.
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:135:1
    |
133 |         alloc.config.signal_confirmation_bars = 2
134 |         alloc.config.min_confidence = 0.0
135 |         
    | ^^^^^^^^
136 |         # Test high confidence (> 1.0)
137 |         sig_high = TradeSignal(symbol="AAPL", side="buy", confidence=2.0, strategy="s1")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:138:1
    |
136 |         # Test high confidence (> 1.0)
137 |         sig_high = TradeSignal(symbol="AAPL", side="buy", confidence=2.0, strategy="s1")
138 |         
    | ^^^^^^^^
139 |         out1 = alloc.select_signals({"s1": [sig_high]})
140 |         out2 = alloc.select_signals({"s1": [sig_high]})
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:141:1
    |
139 |         out1 = alloc.select_signals({"s1": [sig_high]})
140 |         out2 = alloc.select_signals({"s1": [sig_high]})
141 |         
    | ^^^^^^^^
142 |         # Should handle gracefully and still confirm
143 |         assert len(out2) == 1, "Should handle high confidence gracefully"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:145:1
    |
143 |         assert len(out2) == 1, "Should handle high confidence gracefully"
144 |         assert out2[0].symbol == "AAPL", "Should return AAPL signal"
145 |         
    | ^^^^^^^^
146 |         # Test negative confidence
147 |         alloc_fresh = strategy_allocator.StrategyAllocator()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:151:1
    |
149 |         alloc_fresh.config.signal_confirmation_bars = 2
150 |         alloc_fresh.config.min_confidence = 0.0
151 |         
    | ^^^^^^^^
152 |         sig_neg = TradeSignal(symbol="AAPL", side="buy", confidence=-0.5, strategy="s1")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:153:1
    |
152 |         sig_neg = TradeSignal(symbol="AAPL", side="buy", confidence=-0.5, strategy="s1")
153 |         
    | ^^^^^^^^
154 |         out1 = alloc_fresh.allocate({"s1": [sig_neg]})
155 |         out2 = alloc_fresh.allocate({"s1": [sig_neg]})
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:156:1
    |
154 |         out1 = alloc_fresh.allocate({"s1": [sig_neg]})
155 |         out2 = alloc_fresh.allocate({"s1": [sig_neg]})
156 |         
    | ^^^^^^^^
157 |         # Should handle gracefully (confidence normalized to 0, still >= 0.0 threshold)
158 |         assert len(out2) == 1, "Should handle negative confidence gracefully"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:160:1
    |
158 |         assert len(out2) == 1, "Should handle negative confidence gracefully"
159 |         assert out2[0].symbol == "AAPL", "Should return AAPL signal"
160 |     
    | ^^^^
161 |     def test_multiple_instances_no_shared_state(self):
162 |         """
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:164:1
    |
162 |         """
163 |         Test that multiple allocator instances don't share state.
164 |         
    | ^^^^^^^^
165 |         Ensures that the signal confirmation works consistently across
166 |         different allocator instances.
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:173:1
    |
171 |             alloc.config.signal_confirmation_bars = 2
172 |             alloc.config.min_confidence = 0.0
173 |             
    | ^^^^^^^^^^^^
174 |             sig = TradeSignal(symbol="AAPL", side="buy", confidence=1.0, strategy="s1")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:175:1
    |
174 |             sig = TradeSignal(symbol="AAPL", side="buy", confidence=1.0, strategy="s1")
175 |             
    | ^^^^^^^^^^^^
176 |             out1 = alloc.select_signals({"s1": [sig]})
177 |             out2 = alloc.select_signals({"s1": [sig]})
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_allocator_regression.py:178:1
    |
176 |             out1 = alloc.select_signals({"s1": [sig]})
177 |             out2 = alloc.select_signals({"s1": [sig]})
178 |             
    | ^^^^^^^^^^^^
179 |             assert out1 == [], f"Instance {i}: First call should return empty list"
180 |             assert out2 and out2[0].symbol == "AAPL", f"Instance {i}: Second call should return AAPL signal"
    |
help: Remove whitespace from blank line

E501 Line too long (108 > 100)
   --> tests/test_strategy_allocator_regression.py:180:101
    |
179 |             assert out1 == [], f"Instance {i}: First call should return empty list"
180 |             assert out2 and out2[0].symbol == "AAPL", f"Instance {i}: Second call should return AAPL signal"
    |                                                                                                     ^^^^^^^^
    |

W292 [*] No newline at end of file
   --> tests/test_strategy_allocator_regression.py:180:109
    |
179 |             assert out1 == [], f"Instance {i}: First call should return empty list"
180 |             assert out2 and out2[0].symbol == "AAPL", f"Instance {i}: Second call should return AAPL signal"
    |                                                                                                             ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_strategy_allocator_smoke.py:1:1
  |
1 | / from pathlib import Path
2 | |
3 | | import pytest
4 | |
5 | | from ai_trading.strategies import TradeSignal
6 | |
7 | | import ai_trading.strategy_allocator as strategy_allocator  # AI-AGENT-REF: normalized import
  | |__________________________________________________________^
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_smoke.py:20:1
   |
18 | def test_allocator():
19 |     alloc = strategy_allocator.StrategyAllocator()
20 |     
   | ^^^^
21 |     # Configuration that properly tests signal confirmation workflow
22 |     alloc.config.delta_threshold = 0.0        # Allow repeated signals
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_smoke.py:25:1
   |
23 |     alloc.config.signal_confirmation_bars = 2  # Require 2 bars for proper confirmation testing
24 |     alloc.config.min_confidence = 0.0         # Ensure confidence threshold is met
25 |     
   | ^^^^
26 |     # AI-AGENT-REF: Add defensive verification to ensure config is applied correctly
27 |     assert alloc.config.signal_confirmation_bars == 2, f"Expected signal_confirmation_bars=2, got {alloc.config.signal_confirmation_ba…
   |
help: Remove whitespace from blank line

E501 Line too long (138 > 100)
  --> tests/test_strategy_allocator_smoke.py:27:101
   |
26 | …ure config is applied correctly
27 | …, f"Expected signal_confirmation_bars=2, got {alloc.config.signal_confirmation_bars}"
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
28 | …cted min_confidence=0.0, got {alloc.config.min_confidence}"
29 | …ected delta_threshold=0.0, got {alloc.config.delta_threshold}"
   |

E501 Line too long (112 > 100)
  --> tests/test_strategy_allocator_smoke.py:28:101
   |
26 |     # AI-AGENT-REF: Add defensive verification to ensure config is applied correctly
27 |     assert alloc.config.signal_confirmation_bars == 2, f"Expected signal_confirmation_bars=2, got {alloc.config.signal_confirmation_ba…
28 |     assert alloc.config.min_confidence == 0.0, f"Expected min_confidence=0.0, got {alloc.config.min_confidence}"
   |                                                                                                     ^^^^^^^^^^^^
29 |     assert alloc.config.delta_threshold == 0.0, f"Expected delta_threshold=0.0, got {alloc.config.delta_threshold}"
   |

E501 Line too long (115 > 100)
  --> tests/test_strategy_allocator_smoke.py:29:101
   |
27 |     assert alloc.config.signal_confirmation_bars == 2, f"Expected signal_confirmation_bars=2, got {alloc.config.signal_confirmation_ba…
28 |     assert alloc.config.min_confidence == 0.0, f"Expected min_confidence=0.0, got {alloc.config.min_confidence}"
29 |     assert alloc.config.delta_threshold == 0.0, f"Expected delta_threshold=0.0, got {alloc.config.delta_threshold}"
   |                                                                                                     ^^^^^^^^^^^^^^^
30 |     
31 |     sig = TradeSignal(symbol="AAPL", side="buy", confidence=1.0, strategy="s1")
   |

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_smoke.py:30:1
   |
28 |     assert alloc.config.min_confidence == 0.0, f"Expected min_confidence=0.0, got {alloc.config.min_confidence}"
29 |     assert alloc.config.delta_threshold == 0.0, f"Expected delta_threshold=0.0, got {alloc.config.delta_threshold}"
30 |     
   | ^^^^
31 |     sig = TradeSignal(symbol="AAPL", side="buy", confidence=1.0, strategy="s1")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_smoke.py:32:1
   |
31 |     sig = TradeSignal(symbol="AAPL", side="buy", confidence=1.0, strategy="s1")
32 |     
   | ^^^^
33 |     # First call: Build signal history (returns empty list)
34 |     out1 = alloc.select_signals({"s1": [sig]})
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_smoke.py:36:1
   |
34 |     out1 = alloc.select_signals({"s1": [sig]})
35 |     assert out1 == []  # Should be empty as signal is not yet confirmed
36 |     
   | ^^^^
37 |     # Second call: Confirm signals (returns confirmed signal)
38 |     out2 = alloc.select_signals({"s1": [sig]})
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_allocator_smoke.py:40:1
   |
38 |     out2 = alloc.select_signals({"s1": [sig]})
39 |     assert out2 and out2[0].symbol == "AAPL"
40 |     
   | ^^^^
41 |     alloc.update_reward("s1", 0.5)
42 |     force_coverage(strategy_allocator)
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_strategy_components.py:8:1
   |
 6 |   """
 7 |
 8 | / import asyncio
 9 | | import numpy as np
10 | | import pandas as pd
11 | | import sys
12 | | import os
   | |_________^
13 |
14 |   # Add the project root to the Python path
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_components.py:21:1
   |
19 |     # Generate realistic price movement
20 |     np.random.seed(42)  # For reproducible results
21 |     
   | ^^^^
22 |     dates = pd.date_range(start='2024-01-01', periods=periods, freq='D')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_components.py:23:1
   |
22 |     dates = pd.date_range(start='2024-01-01', periods=periods, freq='D')
23 |     
   | ^^^^
24 |     # Generate price series with some trend and volatility
25 |     returns = np.random.normal(0.001, 0.02, periods)  # Daily returns with slight upward bias
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_components.py:27:1
   |
25 |     returns = np.random.normal(0.001, 0.02, periods)  # Daily returns with slight upward bias
26 |     prices = [100.0]  # Starting price
27 |     
   | ^^^^
28 |     for ret in returns[1:]:
29 |         prices.append(prices[-1] * (1 + ret))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_components.py:30:1
   |
28 |     for ret in returns[1:]:
29 |         prices.append(prices[-1] * (1 + ret))
30 |     
   | ^^^^
31 |     # Calculate OHLC from closing prices (simplified)
32 |     df = pd.DataFrame({
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_components.py:40:1
   |
38 |         'volume': np.random.randint(100000, 1000000, periods)
39 |     })
40 |     
   | ^^^^
41 |     return df
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_strategy_components.py:47:9
   |
45 |       """Test multi-timeframe analysis functionality."""
46 |       try:
47 | /         from ai_trading.strategies.multi_timeframe import MultiTimeframeAnalyzer, SignalStrength, SignalDirection
48 | |         from ai_trading.core.enums import TimeFrame
   | |___________________________________________________^
49 |           
50 |           # Create analyzer
   |
help: Organize imports

F401 `ai_trading.strategies.multi_timeframe.SignalStrength` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_strategy_components.py:47:83
   |
45 |     """Test multi-timeframe analysis functionality."""
46 |     try:
47 |         from ai_trading.strategies.multi_timeframe import MultiTimeframeAnalyzer, SignalStrength, SignalDirection
   |                                                                                   ^^^^^^^^^^^^^^
48 |         from ai_trading.core.enums import TimeFrame
   |
help: Remove unused import

F401 `ai_trading.strategies.multi_timeframe.SignalDirection` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_strategy_components.py:47:99
   |
45 |     """Test multi-timeframe analysis functionality."""
46 |     try:
47 |         from ai_trading.strategies.multi_timeframe import MultiTimeframeAnalyzer, SignalStrength, SignalDirection
   |                                                                                                   ^^^^^^^^^^^^^^^
48 |         from ai_trading.core.enums import TimeFrame
   |
help: Remove unused import

E501 Line too long (113 > 100)
  --> tests/test_strategy_components.py:47:101
   |
45 |     """Test multi-timeframe analysis functionality."""
46 |     try:
47 |         from ai_trading.strategies.multi_timeframe import MultiTimeframeAnalyzer, SignalStrength, SignalDirection
   |                                                                                                     ^^^^^^^^^^^^^
48 |         from ai_trading.core.enums import TimeFrame
   |

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_components.py:49:1
   |
47 |         from ai_trading.strategies.multi_timeframe import MultiTimeframeAnalyzer, SignalStrength, SignalDirection
48 |         from ai_trading.core.enums import TimeFrame
49 |         
   | ^^^^^^^^
50 |         # Create analyzer
51 |         analyzer = MultiTimeframeAnalyzer([TimeFrame.DAY_1, TimeFrame.HOUR_4])
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_components.py:52:1
   |
50 |         # Create analyzer
51 |         analyzer = MultiTimeframeAnalyzer([TimeFrame.DAY_1, TimeFrame.HOUR_4])
52 |         
   | ^^^^^^^^
53 |         # Create sample data for multiple timeframes
54 |         daily_data = create_sample_market_data(periods=100)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_components.py:56:1
   |
54 |         daily_data = create_sample_market_data(periods=100)
55 |         hourly_data = create_sample_market_data(periods=400)  # 4x more data for hourly
56 |         
   | ^^^^^^^^
57 |         market_data = {
58 |             TimeFrame.DAY_1: daily_data,
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_components.py:61:1
   |
59 |             TimeFrame.HOUR_4: hourly_data
60 |         }
61 |         
   | ^^^^^^^^
62 |         # Run analysis
63 |         result = analyzer.analyze_symbol("TEST", market_data)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_components.py:64:1
   |
62 |         # Run analysis
63 |         result = analyzer.analyze_symbol("TEST", market_data)
64 |         
   | ^^^^^^^^
65 |         # Validate results
66 |         assert "symbol" in result, "Result should contain symbol"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_components.py:70:1
   |
68 |         assert "combined_analysis" in result, "Result should contain combined analysis"
69 |         assert "recommendation" in result, "Result should contain recommendation"
70 |         
   | ^^^^^^^^
71 |         # Check signal generation
72 |         signals = result["timeframe_signals"]
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_components.py:74:1
   |
72 |         signals = result["timeframe_signals"]
73 |         assert len(signals) > 0, "Should generate signals for at least one timeframe"
74 |         
   | ^^^^^^^^
75 |         # Check recommendation
76 |         recommendation = result["recommendation"]
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_components.py:79:1
   |
77 |         assert "action" in recommendation, "Recommendation should have action"
78 |         assert "confidence" in recommendation, "Recommendation should have confidence"
79 |         
   | ^^^^^^^^
80 |         print(f"✓ Multi-timeframe analysis: {len(signals)} timeframes analyzed")
81 |         print(f"  Recommendation: {recommendation['action']} (confidence: {recommendation['confidence']:.2f})")
   |
help: Remove whitespace from blank line

E501 Line too long (111 > 100)
  --> tests/test_strategy_components.py:81:101
   |
80 |         print(f"✓ Multi-timeframe analysis: {len(signals)} timeframes analyzed")
81 |         print(f"  Recommendation: {recommendation['action']} (confidence: {recommendation['confidence']:.2f})")
   |                                                                                                     ^^^^^^^^^^^
82 |         print(f"  Overall score: {result['combined_analysis'].get('overall_score', 0):.2f}")
   |

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_components.py:83:1
   |
81 |         print(f"  Recommendation: {recommendation['action']} (confidence: {recommendation['confidence']:.2f})")
82 |         print(f"  Overall score: {result['combined_analysis'].get('overall_score', 0):.2f}")
83 |         
   | ^^^^^^^^
84 |         return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_strategy_components.py:85:1
   |
84 |         return True
85 |         
   | ^^^^^^^^
86 |     except ImportError:
87 |         print("⚠ Multi-timeframe analyzer test skipped - module not available")
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_strategy_components.py:97:9
   |
95 |     """Test market regime detection functionality."""
96 |     try:
97 |         from ai_trading.strategies.regime_detection import RegimeDetector, MarketRegime, VolatilityRegime
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
98 |         
99 |         # Create detector
   |
help: Organize imports

F401 `ai_trading.strategies.regime_detection.VolatilityRegime` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_strategy_components.py:97:90
   |
95 |     """Test market regime detection functionality."""
96 |     try:
97 |         from ai_trading.strategies.regime_detection import RegimeDetector, MarketRegime, VolatilityRegime
   |                                                                                          ^^^^^^^^^^^^^^^^
98 |         
99 |         # Create detector
   |
help: Remove unused import: `ai_trading.strategies.regime_detection.VolatilityRegime`

E501 Line too long (105 > 100)
  --> tests/test_strategy_components.py:97:101
   |
95 |     """Test market regime detection functionality."""
96 |     try:
97 |         from ai_trading.strategies.regime_detection import RegimeDetector, MarketRegime, VolatilityRegime
   |                                                                                                     ^^^^^
98 |         
99 |         # Create detector
   |

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:98:1
    |
 96 |     try:
 97 |         from ai_trading.strategies.regime_detection import RegimeDetector, MarketRegime, VolatilityRegime
 98 |         
    | ^^^^^^^^
 99 |         # Create detector
100 |         detector = RegimeDetector(lookback_periods=100)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:101:1
    |
 99 |         # Create detector
100 |         detector = RegimeDetector(lookback_periods=100)
101 |         
    | ^^^^^^^^
102 |         # Create sample market data
103 |         market_data = create_sample_market_data(periods=100)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:104:1
    |
102 |         # Create sample market data
103 |         market_data = create_sample_market_data(periods=100)
104 |         
    | ^^^^^^^^
105 |         # Run regime detection
106 |         result = detector.detect_regime(market_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:107:1
    |
105 |         # Run regime detection
106 |         result = detector.detect_regime(market_data)
107 |         
    | ^^^^^^^^
108 |         # Validate results
109 |         assert "primary_regime" in result, "Result should contain primary regime"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:113:1
    |
111 |         assert "trend_analysis" in result, "Result should contain trend analysis"
112 |         assert "volatility_analysis" in result, "Result should contain volatility analysis"
113 |         
    | ^^^^^^^^
114 |         # Check regime classification
115 |         regime = result["primary_regime"]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:117:1
    |
115 |         regime = result["primary_regime"]
116 |         confidence = result["confidence_score"]
117 |         
    | ^^^^^^^^
118 |         assert isinstance(regime, MarketRegime), "Primary regime should be MarketRegime enum"
119 |         assert 0.0 <= confidence <= 1.0, "Confidence should be between 0 and 1"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:120:1
    |
118 |         assert isinstance(regime, MarketRegime), "Primary regime should be MarketRegime enum"
119 |         assert 0.0 <= confidence <= 1.0, "Confidence should be between 0 and 1"
120 |         
    | ^^^^^^^^
121 |         # Test regime recommendations
122 |         recommendations = detector.get_regime_recommendations()
    |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
   --> tests/test_strategy_components.py:124:101
    |
122 |         recommendations = detector.get_regime_recommendations()
123 |         assert "strategy_type" in recommendations, "Should provide strategy recommendations"
124 |         assert "position_size_multiplier" in recommendations, "Should provide position sizing advice"
    |                                                                                                     ^
125 |         
126 |         print(f"✓ Regime detection: {regime.value} (confidence: {confidence:.2f})")
    |

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:125:1
    |
123 |         assert "strategy_type" in recommendations, "Should provide strategy recommendations"
124 |         assert "position_size_multiplier" in recommendations, "Should provide position sizing advice"
125 |         
    | ^^^^^^^^
126 |         print(f"✓ Regime detection: {regime.value} (confidence: {confidence:.2f})")
127 |         print(f"  Strategy type: {recommendations['strategy_type']}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:131:1
    |
129 |         print(f"  Trend direction: {result['trend_analysis']['direction']}")
130 |         print(f"  Volatility regime: {result['volatility_analysis']['regime'].value}")
131 |         
    | ^^^^^^^^
132 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:133:1
    |
132 |         return True
133 |         
    | ^^^^^^^^
134 |     except ImportError:
135 |         print("⚠ Regime detector test skipped - module not available")
    |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_strategy_components.py:145:9
    |
143 |       """Test integration between multi-timeframe analysis and regime detection."""
144 |       try:
145 | /         from ai_trading.strategies.multi_timeframe import MultiTimeframeAnalyzer
146 | |         from ai_trading.strategies.regime_detection import RegimeDetector
147 | |         from ai_trading.core.enums import TimeFrame
    | |___________________________________________________^
148 |           
149 |           # Create components
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:148:1
    |
146 |         from ai_trading.strategies.regime_detection import RegimeDetector
147 |         from ai_trading.core.enums import TimeFrame
148 |         
    | ^^^^^^^^
149 |         # Create components
150 |         analyzer = MultiTimeframeAnalyzer([TimeFrame.DAY_1])
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:152:1
    |
150 |         analyzer = MultiTimeframeAnalyzer([TimeFrame.DAY_1])
151 |         detector = RegimeDetector()
152 |         
    | ^^^^^^^^
153 |         # Create sample data
154 |         market_data = create_sample_market_data(periods=100)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:155:1
    |
153 |         # Create sample data
154 |         market_data = create_sample_market_data(periods=100)
155 |         
    | ^^^^^^^^
156 |         # Run regime detection
157 |         regime_result = detector.detect_regime(market_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:158:1
    |
156 |         # Run regime detection
157 |         regime_result = detector.detect_regime(market_data)
158 |         
    | ^^^^^^^^
159 |         # Run multi-timeframe analysis
160 |         mtf_data = {TimeFrame.DAY_1: market_data}
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:162:1
    |
160 |         mtf_data = {TimeFrame.DAY_1: market_data}
161 |         mtf_result = analyzer.analyze_symbol("TEST", mtf_data)
162 |         
    | ^^^^^^^^
163 |         # Test integration - adjust recommendations based on regime
164 |         regime = regime_result["primary_regime"]
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:166:1
    |
164 |         regime = regime_result["primary_regime"]
165 |         mtf_recommendation = mtf_result["recommendation"]
166 |         
    | ^^^^^^^^
167 |         # Simple integration logic
168 |         if regime.value in ["crisis", "high_volatility"]:
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:173:1
    |
171 |         else:
172 |             adjusted_multiplier = mtf_recommendation.get("position_size_multiplier", 1.0)
173 |         
    | ^^^^^^^^
174 |         # Create integrated recommendation
175 |         integrated_recommendation = {
    |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
   --> tests/test_strategy_components.py:180:101
    |
178 |             "position_size_multiplier": adjusted_multiplier,
179 |             "regime": regime.value,
180 |             "reasoning": f"MTF analysis: {mtf_recommendation['action']}, Market regime: {regime.value}"
    |                                                                                                     ^^^
181 |         }
    |

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:182:1
    |
180 |             "reasoning": f"MTF analysis: {mtf_recommendation['action']}, Market regime: {regime.value}"
181 |         }
182 |         
    | ^^^^^^^^
183 |         print("✓ Integrated strategy system:")
184 |         print(f"  Final action: {integrated_recommendation['action']}")
    |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
   --> tests/test_strategy_components.py:186:101
    |
184 |         print(f"  Final action: {integrated_recommendation['action']}")
185 |         print(f"  Combined confidence: {integrated_recommendation['confidence']:.2f}")
186 |         print(f"  Adjusted position size: {integrated_recommendation['position_size_multiplier']:.2f}")
    |                                                                                                     ^^^
187 |         print(f"  Reasoning: {integrated_recommendation['reasoning']}")
    |

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:188:1
    |
186 |         print(f"  Adjusted position size: {integrated_recommendation['position_size_multiplier']:.2f}")
187 |         print(f"  Reasoning: {integrated_recommendation['reasoning']}")
188 |         
    | ^^^^^^^^
189 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:190:1
    |
189 |         return True
190 |         
    | ^^^^^^^^
191 |     except ImportError:
192 |         print("⚠ Integrated strategy test skipped - module not available")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:203:1
    |
201 |     try:
202 |         from ai_trading.strategies.regime_detection import RegimeDetector
203 |         
    | ^^^^^^^^
204 |         detector = RegimeDetector()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:205:1
    |
204 |         detector = RegimeDetector()
205 |         
    | ^^^^^^^^
206 |         # Test scenario 1: Bull market
207 |         bull_data = create_sample_market_data(periods=50)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:210:1
    |
208 |         # Artificially create strong uptrend
209 |         bull_data['close'] = bull_data['close'] * np.linspace(1.0, 1.3, 50)
210 |         
    | ^^^^^^^^
211 |         bull_result = detector.detect_regime(bull_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:212:1
    |
211 |         bull_result = detector.detect_regime(bull_data)
212 |         
    | ^^^^^^^^
213 |         # Test scenario 2: Bear market
214 |         bear_data = create_sample_market_data(periods=50)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:217:1
    |
215 |         # Artificially create strong downtrend
216 |         bear_data['close'] = bear_data['close'] * np.linspace(1.0, 0.7, 50)
217 |         
    | ^^^^^^^^
218 |         bear_result = detector.detect_regime(bear_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:219:1
    |
218 |         bear_result = detector.detect_regime(bear_data)
219 |         
    | ^^^^^^^^
220 |         # Test scenario 3: High volatility
221 |         volatile_data = create_sample_market_data(periods=50)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:228:1
    |
226 |             volatile_prices.append(volatile_prices[-1] * (1 + ret))
227 |         volatile_data['close'] = volatile_prices
228 |         
    | ^^^^^^^^
229 |         volatile_result = detector.detect_regime(volatile_data)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:230:1
    |
229 |         volatile_result = detector.detect_regime(volatile_data)
230 |         
    | ^^^^^^^^
231 |         print("✓ Strategy performance scenarios:")
232 |         print(f"  Bull market regime: {bull_result.get('primary_regime', 'Unknown')}")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:235:1
    |
233 |         print(f"  Bear market regime: {bear_result.get('primary_regime', 'Unknown')}")
234 |         print(f"  High volatility regime: {volatile_result.get('primary_regime', 'Unknown')}")
235 |         
    | ^^^^^^^^
236 |         # Test that different scenarios produce different regimes
237 |         regimes = [
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:242:1
    |
240 |             str(volatile_result.get('primary_regime', 'Unknown'))
241 |         ]
242 |         
    | ^^^^^^^^
243 |         unique_regimes = len(set(regimes))
244 |         print(f"  Detected {unique_regimes} unique regimes across scenarios")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:245:1
    |
243 |         unique_regimes = len(set(regimes))
244 |         print(f"  Detected {unique_regimes} unique regimes across scenarios")
245 |         
    | ^^^^^^^^
246 |         return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:247:1
    |
246 |         return True
247 |         
    | ^^^^^^^^
248 |     except ImportError:
249 |         print("⚠ Strategy performance scenarios test skipped - module not available")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:259:1
    |
257 |     """Run all strategy component tests."""
258 |     print("🚀 Running Advanced Strategy Component Tests\n")
259 |     
    | ^^^^
260 |     test_results = []
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:261:1
    |
260 |     test_results = []
261 |     
    | ^^^^
262 |     # Run tests
263 |     test_results.append(("Multi-timeframe Analyzer", test_multi_timeframe_analyzer()))
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:267:1
    |
265 |     test_results.append(("Integrated Strategy System", test_integrated_strategy_system()))
266 |     test_results.append(("Strategy Performance Scenarios", test_strategy_performance_scenarios()))
267 |     
    | ^^^^
268 |     # Report results
269 |     print("\n📊 Strategy Test Results Summary:")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:271:1
    |
269 |     print("\n📊 Strategy Test Results Summary:")
270 |     print("=" * 50)
271 |     
    | ^^^^
272 |     passed = 0
273 |     total = len(test_results)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:274:1
    |
272 |     passed = 0
273 |     total = len(test_results)
274 |     
    | ^^^^
275 |     for test_name, result in test_results:
276 |         status = "PASS" if result else "FAIL"
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:281:1
    |
279 |         if result:
280 |             passed += 1
281 |     
    | ^^^^
282 |     print("=" * 50)
283 |     print(f"Total: {passed}/{total} tests passed ({passed/total*100:.1f}%)")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:284:1
    |
282 |     print("=" * 50)
283 |     print(f"Total: {passed}/{total} tests passed ({passed/total*100:.1f}%)")
284 |     
    | ^^^^
285 |     if passed == total:
286 |         print("\n🎉 All strategy tests passed! Advanced components are ready.")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_strategy_components.py:289:1
    |
287 |     else:
288 |         print(f"\n⚠️  {total-passed} tests failed. Review implementation.")
289 |     
    | ^^^^
290 |     return passed == total
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_strategy_components.py:304:16
    |
302 |     except Exception as e:
303 |         print(f"\n\n💥 Test runner error: {e}")
304 |         exit(1)
    |                ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_stream_subscription_fix.py:8:1
   |
 6 |   """
 7 |
 8 | / import unittest
 9 | | from unittest.mock import patch, MagicMock
10 | | import sys
11 | | import logging
   | |______________^
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_stream_subscription_fix.py:39:1
   |
37 |         # Mock logger to capture log messages
38 |         mock_logger = MagicMock()
39 |         
   | ^^^^^^^^
40 |         # Test the stream subscription logic directly
41 |         stream = None  # This simulates when Alpaca is unavailable
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_stream_subscription_fix.py:42:1
   |
40 |         # Test the stream subscription logic directly
41 |         stream = None  # This simulates when Alpaca is unavailable
42 |         
   | ^^^^^^^^
43 |         # This should not raise AttributeError
44 |         try:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_stream_subscription_fix.py:49:1
   |
47 |             else:
48 |                 mock_logger.info("Trade updates stream not available - running in degraded mode")
49 |             
   | ^^^^^^^^^^^^
50 |             # Test passed - no AttributeError was raised
51 |             success = True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_stream_subscription_fix.py:55:1
   |
53 |             success = False
54 |             self.fail(f"Stream subscription should handle None gracefully, but got: {e}")
55 |         
   | ^^^^^^^^
56 |         self.assertTrue(success, "Stream subscription should not fail when stream is None")
57 |         mock_logger.info.assert_called_with("Trade updates stream not available - running in degraded mode")
   |
help: Remove whitespace from blank line

E501 Line too long (108 > 100)
  --> tests/test_stream_subscription_fix.py:57:101
   |
56 |         self.assertTrue(success, "Stream subscription should not fail when stream is None")
57 |         mock_logger.info.assert_called_with("Trade updates stream not available - running in degraded mode")
   |                                                                                                     ^^^^^^^^
58 |
59 |     def test_stream_subscription_with_valid_stream(self):
   |

W293 [*] Blank line contains whitespace
  --> tests/test_stream_subscription_fix.py:64:1
   |
62 |         mock_stream = MagicMock()
63 |         mock_callback = MagicMock()
64 |         
   | ^^^^^^^^
65 |         # Test with valid stream
66 |         if mock_stream is not None:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_stream_subscription_fix.py:68:1
   |
66 |         if mock_stream is not None:
67 |             mock_stream.subscribe_trade_updates(mock_callback)
68 |         
   | ^^^^^^^^
69 |         # Verify the subscription was called
70 |         mock_stream.subscribe_trade_updates.assert_called_once_with(mock_callback)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_stream_subscription_fix.py:75:1
   |
73 |         """Test that bot_engine can be imported without stream subscription errors."""
74 |         # This test ensures the fix is present in the actual module
75 |         
   | ^^^^^^^^
76 |         # Mock the necessary dependencies to prevent import errors
77 |         with patch.dict('sys.modules', {
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_stream_subscription_fix.py:102:1
    |
100 |                     if 'bot_engine' in sys.modules:
101 |                         importlib.reload(sys.modules['bot_engine'])
102 |                     
    | ^^^^^^^^^^^^^^^^^^^^
103 |                     # If we get here without AttributeError, the fix is working
104 |                     success = True
    |
help: Remove whitespace from blank line

E501 Line too long (103 > 100)
   --> tests/test_stream_subscription_fix.py:107:101
    |
105 |                 except AttributeError as e:
106 |                     if "'NoneType' object has no attribute 'subscribe_trade_updates'" in str(e):
107 |                         self.fail("Stream subscription fix not working - still getting AttributeError")
    |                                                                                                     ^^^
108 |                     else:
109 |                         # Other AttributeErrors might be expected due to mocking
    |

W293 [*] Blank line contains whitespace
   --> tests/test_stream_subscription_fix.py:114:1
    |
112 |                     # Other import errors are expected due to missing dependencies
113 |                     success = True
114 |                 
    | ^^^^^^^^^^^^^^^^
115 |                 self.assertTrue(success)
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_stream_subscription_fix.py:119:20
    |
118 | if __name__ == '__main__':
119 |     unittest.main()
    |                    ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_submit_order_fix.py:2:1
  |
1 |   """Test for the submit_order NameError fix."""
2 | / import pytest
3 | | import os
4 | | from unittest.mock import Mock, patch
  | |_____________________________________^
5 |
6 |   # Set test environment BEFORE any imports
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_submit_order_fix.py:29:5
   |
27 |       """Test that submit_order raises proper error when _exec_engine is None."""
28 |       # Import after setting environment
29 | /     from ai_trading.core import bot_engine
30 | |     from ai_trading.core.bot_engine import submit_order, BotContext
   | |___________________________________________________________________^
31 |       
32 |       # Ensure _exec_engine is None
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_submit_order_fix.py:31:1
   |
29 |     from ai_trading.core import bot_engine
30 |     from ai_trading.core.bot_engine import submit_order, BotContext
31 |     
   | ^^^^
32 |     # Ensure _exec_engine is None
33 |     original_exec_engine = bot_engine._exec_engine
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_submit_order_fix.py:35:1
   |
33 |     original_exec_engine = bot_engine._exec_engine
34 |     bot_engine._exec_engine = None
35 |     
   | ^^^^
36 |     try:
37 |         # Mock market_is_open to return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_submit_order_fix.py:41:1
   |
39 |             # Create a mock context
40 |             mock_ctx = Mock(spec=BotContext)
41 |             
   | ^^^^^^^^^^^^
42 |             # Should raise RuntimeError for uninitialized engine
43 |             with pytest.raises(RuntimeError, match="Execution engine not initialized"):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_submit_order_fix.py:45:1
   |
43 |             with pytest.raises(RuntimeError, match="Execution engine not initialized"):
44 |                 submit_order(mock_ctx, "AAPL", 10, "buy")
45 |                 
   | ^^^^^^^^^^^^^^^^
46 |     finally:
47 |         # Restore original state
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_submit_order_fix.py:54:5
   |
52 |       """Test that submit_order returns None when market is closed."""
53 |       # Import after setting environment
54 | /     from ai_trading.core.bot_engine import submit_order, BotContext
55 | |     from unittest.mock import Mock
   | |__________________________________^
56 |       
57 |       # Mock market_is_open to return False
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_submit_order_fix.py:56:1
   |
54 |     from ai_trading.core.bot_engine import submit_order, BotContext
55 |     from unittest.mock import Mock
56 |     
   | ^^^^
57 |     # Mock market_is_open to return False
58 |     with patch('ai_trading.core.bot_engine.market_is_open', return_value=False):
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_submit_order_fix.py:67:5
   |
65 |       """Test that submit_order works correctly when properly initialized."""
66 |       # Import after setting environment
67 | /     from ai_trading.core import bot_engine
68 | |     from ai_trading.core.bot_engine import submit_order, BotContext
69 | |     from unittest.mock import Mock
   | |__________________________________^
70 |       
71 |       # Mock the execution engine
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_submit_order_fix.py:70:1
   |
68 |     from ai_trading.core.bot_engine import submit_order, BotContext
69 |     from unittest.mock import Mock
70 |     
   | ^^^^
71 |     # Mock the execution engine
72 |     mock_exec_engine = Mock()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_submit_order_fix.py:75:1
   |
73 |     mock_order = Mock()
74 |     mock_exec_engine.execute_order.return_value = mock_order
75 |     
   | ^^^^
76 |     # Set the global _exec_engine
77 |     original_exec_engine = bot_engine._exec_engine
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_submit_order_fix.py:79:1
   |
77 |     original_exec_engine = bot_engine._exec_engine
78 |     bot_engine._exec_engine = mock_exec_engine
79 |     
   | ^^^^
80 |     try:
81 |         # Mock market_is_open to return True
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_submit_order_fix.py:84:1
   |
82 |         with patch('ai_trading.core.bot_engine.market_is_open', return_value=True):
83 |             mock_ctx = Mock(spec=BotContext)
84 |             
   | ^^^^^^^^^^^^
85 |             # Should successfully execute order
86 |             result = submit_order(mock_ctx, "AAPL", 10, "buy")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_submit_order_fix.py:87:1
   |
85 |             # Should successfully execute order
86 |             result = submit_order(mock_ctx, "AAPL", 10, "buy")
87 |             
   | ^^^^^^^^^^^^
88 |             assert result == mock_order
89 |             mock_exec_engine.execute_order.assert_called_once_with("AAPL", 10, "buy")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_submit_order_fix.py:90:1
   |
88 |             assert result == mock_order
89 |             mock_exec_engine.execute_order.assert_called_once_with("AAPL", 10, "buy")
90 |             
   | ^^^^^^^^^^^^
91 |     finally:
92 |         # Restore original state
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
   --> tests/test_submit_order_fix.py:99:5
    |
 97 |       """Test that submit_order properly propagates execution errors."""
 98 |       # Import after setting environment
 99 | /     from ai_trading.core import bot_engine
100 | |     from ai_trading.core.bot_engine import submit_order, BotContext
101 | |     from unittest.mock import Mock
    | |__________________________________^
102 |       
103 |       # Mock the execution engine to raise an exception
    |
help: Organize imports

W293 [*] Blank line contains whitespace
   --> tests/test_submit_order_fix.py:102:1
    |
100 |     from ai_trading.core.bot_engine import submit_order, BotContext
101 |     from unittest.mock import Mock
102 |     
    | ^^^^
103 |     # Mock the execution engine to raise an exception
104 |     mock_exec_engine = Mock()
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_submit_order_fix.py:107:1
    |
105 |     test_error = Exception("Test execution error")
106 |     mock_exec_engine.execute_order.side_effect = test_error
107 |     
    | ^^^^
108 |     # Set the global _exec_engine
109 |     original_exec_engine = bot_engine._exec_engine
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_submit_order_fix.py:111:1
    |
109 |     original_exec_engine = bot_engine._exec_engine
110 |     bot_engine._exec_engine = mock_exec_engine
111 |     
    | ^^^^
112 |     try:
113 |         # Mock market_is_open to return True
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_submit_order_fix.py:116:1
    |
114 |         with patch('ai_trading.core.bot_engine.market_is_open', return_value=True):
115 |             mock_ctx = Mock(spec=BotContext)
116 |             
    | ^^^^^^^^^^^^
117 |             # Should propagate the execution error
118 |             with pytest.raises(Exception, match="Test execution error"):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_submit_order_fix.py:120:1
    |
118 |             with pytest.raises(Exception, match="Test execution error"):
119 |                 submit_order(mock_ctx, "AAPL", 10, "buy")
120 |                 
    | ^^^^^^^^^^^^^^^^
121 |     finally:
122 |         # Restore original state
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_submit_order_fix.py:127:34
    |
126 | if __name__ == "__main__":
127 |     pytest.main([__file__, "-v"])
    |                                  ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_systemd_startup.py:8:1
   |
 6 |   """
 7 |
 8 | / import pytest
 9 | | import os
10 | | import tempfile
11 | | import subprocess
12 | | import sys
   | |__________^
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_systemd_startup.py:17:1
   |
15 | class TestSystemdStartupCompatibility:
16 |     """Test systemd-compatible startup behavior."""
17 |     
   | ^^^^
18 |     def test_import_no_crash_without_credentials(self):
19 |         """Test that imports don't crash without credentials."""
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_systemd_startup.py:33:1
   |
31 |     from ai_trading.config.management import _resolve_alpaca_env
32 |     print("✓ Config management imported")
33 |     
   | ^^^^
34 |     from ai_trading import runner
35 |     print("✓ Runner imported")
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_systemd_startup.py:36:1
   |
34 |     from ai_trading import runner
35 |     print("✓ Runner imported")
36 |     
   | ^^^^
37 |     from ai_trading.utils.timefmt import utc_now_iso
38 |     print("✓ Time utilities imported")
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_systemd_startup.py:39:1
   |
37 |     from ai_trading.utils.timefmt import utc_now_iso
38 |     print("✓ Time utilities imported")
39 |     
   | ^^^^
40 |     # Test that credential resolution works
41 |     api_key, secret_key, base_url = _resolve_alpaca_env()
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_systemd_startup.py:46:1
   |
44 |     assert base_url == "https://paper-api.alpaca.markets"
45 |     print("✓ Credential resolution works with missing creds")
46 |     
   | ^^^^
47 |     # Test UTC timestamp doesn't have double Z
48 |     timestamp = utc_now_iso()
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_systemd_startup.py:52:1
   |
50 |     assert timestamp.count('Z') == 1
51 |     print("✓ UTC timestamp has single Z")
52 |     
   | ^^^^
53 |     print("SUCCESS: No import-time crashes!")
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
  --> tests/test_systemd_startup.py:54:1
   |
53 |     print("SUCCESS: No import-time crashes!")
54 |     
   | ^^^^
55 | except SystemExit as e:
56 |     print(f"FAIL: SystemExit called: {e}")
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_systemd_startup.py:64:1
   |
62 |     sys.exit(1)
63 | '''
64 |         
   | ^^^^^^^^
65 |         # Write test script to temporary file
66 |         with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_systemd_startup.py:69:1
   |
67 |             f.write(test_script)
68 |             script_path = f.name
69 |         
   | ^^^^^^^^
70 |         try:
71 |             # Run the test script in a clean subprocess
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_systemd_startup.py:79:1
   |
77 |                 check=True
78 |             )
79 |             
   | ^^^^^^^^^^^^
80 |             print("STDOUT:", result.stdout)
81 |             if result.stderr:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_systemd_startup.py:83:1
   |
81 |             if result.stderr:
82 |                 print("STDERR:", result.stderr)
83 |             
   | ^^^^^^^^^^^^
84 |             # Check that script succeeded
85 |             assert result.returncode == 0, f"Script failed with return code {result.returncode}"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_systemd_startup.py:87:1
   |
85 |             assert result.returncode == 0, f"Script failed with return code {result.returncode}"
86 |             assert "SUCCESS: No import-time crashes!" in result.stdout
87 |             
   | ^^^^^^^^^^^^
88 |         finally:
89 |             os.unlink(script_path)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_systemd_startup.py:90:1
   |
88 |         finally:
89 |             os.unlink(script_path)
90 |     
   | ^^^^
91 |     def test_dual_credential_schema_with_env_file(self):
92 |         """Test that both credential schemas work with .env files."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:99:1
    |
 97 | ALPACA_BASE_URL=https://paper-api.alpaca.markets
 98 | """
 99 |         
    | ^^^^^^^^
100 |         with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
101 |             f.write(alpaca_env_content)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:103:1
    |
101 |             f.write(alpaca_env_content)
102 |             alpaca_env_path = f.name
103 |         
    | ^^^^^^^^
104 |         # Test APCA_* schema  
105 |         apca_env_content = """
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_systemd_startup.py:104:29
    |
102 |             alpaca_env_path = f.name
103 |         
104 |         # Test APCA_* schema  
    |                             ^^
105 |         apca_env_content = """
106 | APCA_API_KEY_ID=test_apca_key_from_env
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:110:1
    |
108 | APCA_API_BASE_URL=https://api.alpaca.markets
109 | """
110 |         
    | ^^^^^^^^
111 |         with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
112 |             f.write(apca_env_content)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:114:1
    |
112 |             f.write(apca_env_content)
113 |             apca_env_path = f.name
114 |         
    | ^^^^^^^^
115 |         try:
116 |             # Test ALPACA schema
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:130:1
    |
128 | print("✓ ALPACA schema with .env file works")
129 | '''
130 |             
    | ^^^^^^^^^^^^
131 |             with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
132 |                 f.write(test_script)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:134:1
    |
132 | …         f.write(test_script)
133 | …         script_path = f.name
134 | …     
^^^^^^^^^^^^
135 | …     result = subprocess.run([sys.executable, script_path], capture_output=True, text=True, timeout=30, check=True)  # AI-AGENT-REF:…
136 | …     assert result.returncode == 0, f"ALPACA test failed: {result.stderr}"
    |
help: Remove whitespace from blank line

E501 Line too long (176 > 100)
   --> tests/test_systemd_startup.py:135:101
    |
133 | …
134 | …
135 | …re_output=True, text=True, timeout=30, check=True)  # AI-AGENT-REF: Added timeout and check for security
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
136 | ….stderr}"
137 | …
    |

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:138:1
    |
136 |             assert result.returncode == 0, f"ALPACA test failed: {result.stderr}"
137 |             os.unlink(script_path)
138 |             
    | ^^^^^^^^^^^^
139 |             # Test APCA schema
140 |             test_script = f'''
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> tests/test_systemd_startup.py:149:49
    |
148 | assert api_key == "test_apca_key_from_env"
149 | assert secret_key == "test_apca_secret_from_env"  
    |                                                 ^^
150 | assert base_url == "https://api.alpaca.markets"
151 | print("✓ APCA schema with .env file works")
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:153:1
    |
151 | print("✓ APCA schema with .env file works")
152 | '''
153 |             
    | ^^^^^^^^^^^^
154 |             with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
155 |                 f.write(test_script)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:157:1
    |
155 | …         f.write(test_script)
156 | …         script_path = f.name
157 | …     
^^^^^^^^^^^^
158 | …     result = subprocess.run([sys.executable, script_path], capture_output=True, text=True, timeout=30, check=True)  # AI-AGENT-REF:…
159 | …     assert result.returncode == 0, f"APCA test failed: {result.stderr}"
    |
help: Remove whitespace from blank line

E501 Line too long (176 > 100)
   --> tests/test_systemd_startup.py:158:101
    |
156 | …
157 | …
158 | …re_output=True, text=True, timeout=30, check=True)  # AI-AGENT-REF: Added timeout and check for security
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
159 | …tderr}"
160 | …
    |

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:161:1
    |
159 |             assert result.returncode == 0, f"APCA test failed: {result.stderr}"
160 |             os.unlink(script_path)
161 |             
    | ^^^^^^^^^^^^
162 |         finally:
163 |             os.unlink(alpaca_env_path)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:165:1
    |
163 |             os.unlink(alpaca_env_path)
164 |             os.unlink(apca_env_path)
165 |     
    | ^^^^
166 |     def test_utc_timestamp_no_double_z(self):
167 |         """Test that UTC timestamps don't have double Z suffix."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:193:1
    |
191 | print("✓ All UTC timestamp functions work correctly")
192 | '''
193 |         
    | ^^^^^^^^
194 |         with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
195 |             f.write(test_script)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:197:1
    |
195 | …         f.write(test_script)
196 | …         script_path = f.name
197 | …     
    ^^^^^^^^
198 | …     try:
199 | …         result = subprocess.run([sys.executable, script_path], capture_output=True, text=True, timeout=30, check=True)  # AI-AGENT-…
    |
help: Remove whitespace from blank line

E501 Line too long (176 > 100)
   --> tests/test_systemd_startup.py:199:101
    |
198 | …
199 | …re_output=True, text=True, timeout=30, check=True)  # AI-AGENT-REF: Added timeout and check for security
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
200 | …
201 | …
    |

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:204:1
    |
202 |                 print("STDERR:", result.stderr)
203 |             assert result.returncode == 0, f"UTC test failed: {result.stderr}"
204 |             
    | ^^^^^^^^^^^^
205 |         finally:
206 |             os.unlink(script_path)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:207:1
    |
205 |         finally:
206 |             os.unlink(script_path)
207 |     
    | ^^^^
208 |     def test_lazy_import_behavior(self):
209 |         """Test that lazy imports work correctly."""
    |
help: Remove whitespace from blank line

W291 Trailing whitespace
   --> tests/test_systemd_startup.py:222:38
    |
220 | # Verify lazy loading variables exist
221 | assert hasattr(runner, '_load_engine')
222 | assert hasattr(runner, '_bot_engine') 
    |                                      ^
223 | assert hasattr(runner, '_bot_state_class')
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:231:1
    |
229 | print("✓ Lazy import mechanism working correctly")
230 | '''
231 |         
    | ^^^^^^^^
232 |         with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
233 |             f.write(test_script)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:235:1
    |
233 | …         f.write(test_script)
234 | …         script_path = f.name
235 | …     
    ^^^^^^^^
236 | …     try:
237 | …         result = subprocess.run([sys.executable, script_path], capture_output=True, text=True, timeout=30, check=True)  # AI-AGENT-…
    |
help: Remove whitespace from blank line

E501 Line too long (176 > 100)
   --> tests/test_systemd_startup.py:237:101
    |
236 | …
237 | …re_output=True, text=True, timeout=30, check=True)  # AI-AGENT-REF: Added timeout and check for security
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
238 | …
239 | …
    |

W293 [*] Blank line contains whitespace
   --> tests/test_systemd_startup.py:242:1
    |
240 |                 print("STDERR:", result.stderr)
241 |             assert result.returncode == 0, f"Lazy import test failed: {result.stderr}"
242 |             
    | ^^^^^^^^^^^^
243 |         finally:
244 |             os.unlink(script_path)
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_systemd_startup.py:248:28
    |
247 | if __name__ == "__main__":
248 |     pytest.main([__file__])
    |                            ^
    |
help: Add trailing newline

W293 [*] Blank line contains whitespace
  --> tests/test_tenacity_import.py:17:1
   |
15 |     """Test that real tenacity has expected functionality."""
16 |     from tenacity import retry, stop_after_attempt, wait_exponential
17 |     
   | ^^^^
18 |     # Test that these are callable
19 |     assert callable(retry)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_tenacity_import.py:22:1
   |
20 |     assert callable(stop_after_attempt)
21 |     assert callable(wait_exponential)
22 |     
   | ^^^^
23 |     # Test basic decorator functionality
24 |     @retry(stop=stop_after_attempt(2))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_tenacity_import.py:27:1
   |
25 |     def test_func():
26 |         return "success"
27 |     
   | ^^^^
28 |     result = test_func()
29 |     assert result == "success"
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/test_tenacity_import.py:29:31
   |
28 |     result = test_func()
29 |     assert result == "success"
   |                               ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_timeutils.py:1:1
  |
1 | / from datetime import date
2 | |
3 | | from ai_trading.data.timeutils import nyse_session_utc
4 | | from zoneinfo import ZoneInfo
  | |_____________________________^
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_trade_logic.py:1:1
  |
1 | / import pandas as pd
2 | |
3 | | from ai_trading.trade_logic import (
4 | |     should_enter_trade,
5 | |     compute_order_price,
6 | |     extract_price,
7 | | )
  | |_^
  |
help: Organize imports

W293 Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:8:1
   |
 6 | def test_validate_trading_parameters_no_name_error():
 7 |     """Test that validate_trading_parameters function references only defined parameters.
 8 |     
   | ^^^^
 9 |     This test parses the bot_engine.py source code and validates that all parameters
10 |     referenced in validate_trading_parameters() are defined before the function call.
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:12:1
   |
10 |     referenced in validate_trading_parameters() are defined before the function call.
11 |     """
12 |     
   | ^^^^
13 |     # Read the bot_engine.py source code
14 |     src_path = Path(__file__).resolve().parents[1] / 'bot_engine.py'
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:16:1
   |
14 |     src_path = Path(__file__).resolve().parents[1] / 'bot_engine.py'
15 |     source = src_path.read_text()
16 |     
   | ^^^^
17 |     # Parse the AST
18 |     tree = ast.parse(source)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:19:1
   |
17 |     # Parse the AST
18 |     tree = ast.parse(source)
19 |     
   | ^^^^
20 |     # Find the validate_trading_parameters function definition
21 |     validate_func = None
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:23:1
   |
21 |     validate_func = None
22 |     validate_call_line = None
23 |     
   | ^^^^
24 |     for node in ast.walk(tree):
25 |         if isinstance(node, ast.FunctionDef) and node.name == 'validate_trading_parameters':
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_trading_parameter_validation.py:28:52
   |
26 |             validate_func = node
27 |         elif isinstance(node, ast.Call):
28 |             if (isinstance(node.func, ast.Name) and 
   |                                                    ^
29 |                 node.func.id == 'validate_trading_parameters'):
30 |                 validate_call_line = node.lineno
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:31:1
   |
29 |                 node.func.id == 'validate_trading_parameters'):
30 |                 validate_call_line = node.lineno
31 |     
   | ^^^^
32 |     assert validate_func is not None, "validate_trading_parameters function should exist"
33 |     assert validate_call_line is not None, "validate_trading_parameters should be called"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:34:1
   |
32 |     assert validate_func is not None, "validate_trading_parameters function should exist"
33 |     assert validate_call_line is not None, "validate_trading_parameters should be called"
34 |     
   | ^^^^
35 |     # Extract parameters referenced in the function
36 |     referenced_params = set()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:42:1
   |
40 |             if node.id.isupper() and '_' in node.id:
41 |                 referenced_params.add(node.id)
42 |     
   | ^^^^
43 |     # Find where each parameter is defined
44 |     param_definitions = {}
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:50:1
   |
48 |             if line.startswith(f'{param} =') and i < validate_call_line:
49 |                 param_definitions[param] = i
50 |     
   | ^^^^
51 |     # Check that all referenced parameters are defined before the call
52 |     undefined_params = []
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:56:1
   |
54 |         if param not in param_definitions:
55 |             undefined_params.append(param)
56 |     
   | ^^^^
57 |     if undefined_params:
58 |         print(f"Parameters referenced in validate_trading_parameters but not defined before call: {undefined_params}")
   |
help: Remove whitespace from blank line

E501 Line too long (118 > 100)
  --> tests/test_trading_parameter_validation.py:58:101
   |
57 |     if undefined_params:
58 |         print(f"Parameters referenced in validate_trading_parameters but not defined before call: {undefined_params}")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^
59 |         print(f"validate_trading_parameters called at line: {validate_call_line}")
60 |         for param in referenced_params:
   |

W293 [*] Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:65:1
   |
63 |             else:
64 |                 print(f"  {param} NOT DEFINED before call")
65 |     
   | ^^^^
66 |     assert not undefined_params, f"Parameters {undefined_params} are referenced in validate_trading_parameters but not defined before …
   |
help: Remove whitespace from blank line

E501 Line too long (152 > 100)
  --> tests/test_trading_parameter_validation.py:66:101
   |
64 | …
65 | …
66 | …ams} are referenced in validate_trading_parameters but not defined before the function call"
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

W293 [*] Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:71:1
   |
69 | def test_buy_threshold_definition_order():
70 |     """Specific test to ensure BUY_THRESHOLD is defined before validate_trading_parameters call."""
71 |     
   | ^^^^
72 |     src_path = Path(__file__).resolve().parents[1] / 'bot_engine.py'
73 |     source = src_path.read_text()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:75:1
   |
73 |     source = src_path.read_text()
74 |     lines = source.split('\n')
75 |     
   | ^^^^
76 |     buy_threshold_line = None
77 |     validate_call_line = None
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:78:1
   |
76 |     buy_threshold_line = None
77 |     validate_call_line = None
78 |     
   | ^^^^
79 |     for i, line in enumerate(lines, 1):
80 |         if line.strip().startswith('BUY_THRESHOLD ='):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_trading_parameter_validation.py:84:1
   |
82 |         elif 'validate_trading_parameters()' in line and not line.strip().startswith('#'):
83 |             validate_call_line = i
84 |     
   | ^^^^
85 |     assert buy_threshold_line is not None, "BUY_THRESHOLD should be defined"
86 |     assert validate_call_line is not None, "validate_trading_parameters should be called"
   |
help: Remove whitespace from blank line

E501 Line too long (138 > 100)
  --> tests/test_trading_parameter_validation.py:88:101
   |
86 | …trading_parameters should be called"
87 | …
88 | …hould be defined before validate_trading_parameters call (line {validate_call_line})"
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

W292 [*] No newline at end of file
  --> tests/test_trading_parameter_validation.py:94:31
   |
92 |     test_validate_trading_parameters_no_name_error()
93 |     test_buy_threshold_definition_order()
94 |     print("All tests passed!")
   |                               ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_trigger_meta_learning_conversion.py:1:1
  |
1 | / import sys
2 | | import tempfile
3 | | import os
  | |_________^
4 |
5 |   # Mock the config module to avoid environment variable requirements
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_trigger_meta_learning_conversion.py:21:1
   |
19 |     max_position_size = 8000
20 |     max_position_size_pct = 0.25
21 |     
   | ^^^^
22 |     # Kelly Criterion Parameters
23 |     kelly_fraction = 0.6
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_trigger_meta_learning_conversion.py:29:1
   |
27 |     lookback_periods = 252
28 |     rebalance_frequency = 21
29 |     
   | ^^^^
30 |     # Trading Mode Parameters  
31 |     conf_threshold = 0.75
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_trigger_meta_learning_conversion.py:30:30
   |
28 |     rebalance_frequency = 21
29 |     
30 |     # Trading Mode Parameters  
   |                              ^^
31 |     conf_threshold = 0.75
32 |     buy_threshold = 0.1
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_trigger_meta_learning_conversion.py:38:1
   |
36 |     trailing_factor = 1.2
37 |     scaling_factor = 0.3
38 |     
   | ^^^^
39 |     @classmethod
40 |     def from_env(cls, mode="balanced"):
   |
help: Remove whitespace from blank line

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_trigger_meta_learning_conversion.py:59:1
   |
57 | sys.modules['config'] = MockConfig
58 |
59 | from ai_trading import meta_learning
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
60 |
61 | def test_trigger_meta_learning_conversion_pure_meta_format():
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_trigger_meta_learning_conversion.py:70:1
   |
68 |         f.write("MSFT,2025-08-05T23:21:35Z,300.0,2025-08-05T23:22:35Z,295.0,2,sell,test_strategy,test,signal4,0.6,-10.0\n")
69 |         test_file = f.name
70 |     
   | ^^^^
71 |     try:
72 |         # Set the trade log file path
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_trigger_meta_learning_conversion.py:74:1
   |
72 |         # Set the trade log file path
73 |         MockConfig.TRADE_LOG_FILE = test_file
74 |         
   | ^^^^^^^^
75 |         # Test trade data
76 |         test_trade = {
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/test_trigger_meta_learning_conversion.py:77:30
   |
75 |         # Test trade data
76 |         test_trade = {
77 |             'symbol': 'TEST', 
   |                              ^
78 |             'qty': 10, 
79 |             'side': 'buy', 
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_trigger_meta_learning_conversion.py:78:23
   |
76 |         test_trade = {
77 |             'symbol': 'TEST', 
78 |             'qty': 10, 
   |                       ^
79 |             'side': 'buy', 
80 |             'price': 100.0, 
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_trigger_meta_learning_conversion.py:79:27
   |
77 |             'symbol': 'TEST', 
78 |             'qty': 10, 
79 |             'side': 'buy', 
   |                           ^
80 |             'price': 100.0, 
81 |             'timestamp': '2025-08-05T23:17:35Z', 
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_trigger_meta_learning_conversion.py:80:28
   |
78 |             'qty': 10, 
79 |             'side': 'buy', 
80 |             'price': 100.0, 
   |                            ^
81 |             'timestamp': '2025-08-05T23:17:35Z', 
82 |             'order_id': 'test-001', 
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_trigger_meta_learning_conversion.py:81:49
   |
79 |             'side': 'buy', 
80 |             'price': 100.0, 
81 |             'timestamp': '2025-08-05T23:17:35Z', 
   |                                                 ^
82 |             'order_id': 'test-001', 
83 |             'status': 'filled'
   |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
  --> tests/test_trigger_meta_learning_conversion.py:82:36
   |
80 |             'price': 100.0, 
81 |             'timestamp': '2025-08-05T23:17:35Z', 
82 |             'order_id': 'test-001', 
   |                                    ^
83 |             'status': 'filled'
84 |         }
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/test_trigger_meta_learning_conversion.py:85:1
   |
83 |             'status': 'filled'
84 |         }
85 |         
   | ^^^^^^^^
86 |         # Verify quality report shows pure meta format
87 |         quality_report = meta_learning.validate_trade_data_quality(test_file)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_trigger_meta_learning_conversion.py:91:1
   |
89 |         assert quality_report['audit_format_rows'] == 0
90 |         assert quality_report['meta_format_rows'] > 0
91 |         
   | ^^^^^^^^
92 |         # Test the trigger function - should return True immediately (no conversion needed)
93 |         result = meta_learning.trigger_meta_learning_conversion(test_trade)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_trigger_meta_learning_conversion.py:95:1
   |
93 |         result = meta_learning.trigger_meta_learning_conversion(test_trade)
94 |         assert result is True
95 |         
   | ^^^^^^^^
96 |     finally:
97 |         if os.path.exists(test_file):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:110:1
    |
108 |         f.write("345e6789-e89b-12d3-a456-426614174002,2025-08-05T23:19:35Z,AAPL,buy,5,150.0,live,filled\n")
109 |         test_file = f.name
110 |     
    | ^^^^
111 |     try:
112 |         # Set the trade log file path
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:114:1
    |
112 |         # Set the trade log file path
113 |         MockConfig.TRADE_LOG_FILE = test_file
114 |         
    | ^^^^^^^^
115 |         # Test trade data
116 |         test_trade = {
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:117:30
    |
115 |         # Test trade data
116 |         test_trade = {
117 |             'symbol': 'TEST', 
    |                              ^
118 |             'qty': 10, 
119 |             'side': 'buy', 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:118:23
    |
116 |         test_trade = {
117 |             'symbol': 'TEST', 
118 |             'qty': 10, 
    |                       ^
119 |             'side': 'buy', 
120 |             'price': 100.0, 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:119:27
    |
117 |             'symbol': 'TEST', 
118 |             'qty': 10, 
119 |             'side': 'buy', 
    |                           ^
120 |             'price': 100.0, 
121 |             'timestamp': '2025-08-05T23:17:35Z', 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:120:28
    |
118 |             'qty': 10, 
119 |             'side': 'buy', 
120 |             'price': 100.0, 
    |                            ^
121 |             'timestamp': '2025-08-05T23:17:35Z', 
122 |             'order_id': 'test-001', 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:121:49
    |
119 |             'side': 'buy', 
120 |             'price': 100.0, 
121 |             'timestamp': '2025-08-05T23:17:35Z', 
    |                                                 ^
122 |             'order_id': 'test-001', 
123 |             'status': 'filled'
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:122:36
    |
120 |             'price': 100.0, 
121 |             'timestamp': '2025-08-05T23:17:35Z', 
122 |             'order_id': 'test-001', 
    |                                    ^
123 |             'status': 'filled'
124 |         }
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:125:1
    |
123 |             'status': 'filled'
124 |         }
125 |         
    | ^^^^^^^^
126 |         # Verify quality report shows pure audit format
127 |         quality_report = meta_learning.validate_trade_data_quality(test_file)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:131:1
    |
129 |         assert quality_report['audit_format_rows'] > 0
130 |         assert quality_report['meta_format_rows'] == 0
131 |         
    | ^^^^^^^^
132 |         # Test the trigger function - should attempt conversion and return True if successful
133 |         result = meta_learning.trigger_meta_learning_conversion(test_trade)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:135:1
    |
133 |         result = meta_learning.trigger_meta_learning_conversion(test_trade)
134 |         assert result is True  # Should succeed in conversion
135 |         
    | ^^^^^^^^
136 |     finally:
137 |         if os.path.exists(test_file):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:149:1
    |
147 |         f.write("234e5678-e89b-12d3-a456-426614174001,2025-08-05T23:18:35Z,TEST,sell,10,105.0,live,filled\n")
148 |         test_file = f.name
149 |     
    | ^^^^
150 |     try:
151 |         # Set the trade log file path
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:153:1
    |
151 |         # Set the trade log file path
152 |         MockConfig.TRADE_LOG_FILE = test_file
153 |         
    | ^^^^^^^^
154 |         # Test trade data
155 |         test_trade = {
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:156:30
    |
154 |         # Test trade data
155 |         test_trade = {
156 |             'symbol': 'TEST', 
    |                              ^
157 |             'qty': 10, 
158 |             'side': 'buy', 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:157:23
    |
155 |         test_trade = {
156 |             'symbol': 'TEST', 
157 |             'qty': 10, 
    |                       ^
158 |             'side': 'buy', 
159 |             'price': 100.0, 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:158:27
    |
156 |             'symbol': 'TEST', 
157 |             'qty': 10, 
158 |             'side': 'buy', 
    |                           ^
159 |             'price': 100.0, 
160 |             'timestamp': '2025-08-05T23:17:35Z', 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:159:28
    |
157 |             'qty': 10, 
158 |             'side': 'buy', 
159 |             'price': 100.0, 
    |                            ^
160 |             'timestamp': '2025-08-05T23:17:35Z', 
161 |             'order_id': 'test-001', 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:160:49
    |
158 |             'side': 'buy', 
159 |             'price': 100.0, 
160 |             'timestamp': '2025-08-05T23:17:35Z', 
    |                                                 ^
161 |             'order_id': 'test-001', 
162 |             'status': 'filled'
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:161:36
    |
159 |             'price': 100.0, 
160 |             'timestamp': '2025-08-05T23:17:35Z', 
161 |             'order_id': 'test-001', 
    |                                    ^
162 |             'status': 'filled'
163 |         }
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:164:1
    |
162 |             'status': 'filled'
163 |         }
164 |         
    | ^^^^^^^^
165 |         # Verify quality report shows mixed format
166 |         quality_report = meta_learning.validate_trade_data_quality(test_file)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:168:1
    |
166 |         quality_report = meta_learning.validate_trade_data_quality(test_file)
167 |         assert quality_report['mixed_format_detected'] is True
168 |         
    | ^^^^^^^^
169 |         # Test the trigger function - should attempt conversion and return True if successful
170 |         result = meta_learning.trigger_meta_learning_conversion(test_trade)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:172:1
    |
170 |         result = meta_learning.trigger_meta_learning_conversion(test_trade)
171 |         assert result is True  # Should succeed in conversion
172 |         
    | ^^^^^^^^
173 |     finally:
174 |         if os.path.exists(test_file):
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:182:1
    |
180 |     # Set a non-existent file path
181 |     MockConfig.TRADE_LOG_FILE = '/tmp/non_existent_file.csv'
182 |     
    | ^^^^
183 |     test_trade = {
184 |         'symbol': 'TEST', 
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:184:26
    |
183 |     test_trade = {
184 |         'symbol': 'TEST', 
    |                          ^
185 |         'qty': 10, 
186 |         'side': 'buy', 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:185:19
    |
183 |     test_trade = {
184 |         'symbol': 'TEST', 
185 |         'qty': 10, 
    |                   ^
186 |         'side': 'buy', 
187 |         'price': 100.0, 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:186:23
    |
184 |         'symbol': 'TEST', 
185 |         'qty': 10, 
186 |         'side': 'buy', 
    |                       ^
187 |         'price': 100.0, 
188 |         'timestamp': '2025-08-05T23:17:35Z', 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:187:24
    |
185 |         'qty': 10, 
186 |         'side': 'buy', 
187 |         'price': 100.0, 
    |                        ^
188 |         'timestamp': '2025-08-05T23:17:35Z', 
189 |         'order_id': 'test-001', 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:188:45
    |
186 |         'side': 'buy', 
187 |         'price': 100.0, 
188 |         'timestamp': '2025-08-05T23:17:35Z', 
    |                                             ^
189 |         'order_id': 'test-001', 
190 |         'status': 'filled'
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:189:32
    |
187 |         'price': 100.0, 
188 |         'timestamp': '2025-08-05T23:17:35Z', 
189 |         'order_id': 'test-001', 
    |                                ^
190 |         'status': 'filled'
191 |     }
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:192:1
    |
190 |         'status': 'filled'
191 |     }
192 |     
    | ^^^^
193 |     # Test the trigger function - should return False for missing file
194 |     result = meta_learning.trigger_meta_learning_conversion(test_trade)
    |
help: Remove whitespace from blank line

E501 Line too long (107 > 100)
   --> tests/test_trigger_meta_learning_conversion.py:201:101
    |
199 |     """Test the exact scenario from the problem statement."""
200 |     with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
201 |         # Create exactly the scenario: mixed_format_detected=False, audit_format_rows=0, meta_format_rows=4
    |                                                                                                     ^^^^^^^
202 |         f.write("symbol,entry_time,entry_price,exit_time,exit_price,qty,side,strategy,classification,signal_tags,confidence,reward\n")
203 |         f.write("TEST,2025-08-05T23:17:35Z,100.0,2025-08-05T23:18:35Z,105.0,10,buy,test_strategy,test,signal1+signal2,0.8,5.0\n")
    |

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:208:1
    |
206 |         f.write("GOOGL,2025-08-05T23:23:35Z,2500.0,2025-08-05T23:24:35Z,2505.0,1,buy,test_strategy,test,signal5,0.9,5.0\n")
207 |         test_file = f.name
208 |     
    | ^^^^
209 |     try:
210 |         MockConfig.TRADE_LOG_FILE = test_file
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:211:1
    |
209 |     try:
210 |         MockConfig.TRADE_LOG_FILE = test_file
211 |         
    | ^^^^^^^^
212 |         test_trade = {
213 |             'symbol': 'TEST', 
    |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:213:30
    |
212 |         test_trade = {
213 |             'symbol': 'TEST', 
    |                              ^
214 |             'qty': 10, 
215 |             'side': 'buy', 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:214:23
    |
212 |         test_trade = {
213 |             'symbol': 'TEST', 
214 |             'qty': 10, 
    |                       ^
215 |             'side': 'buy', 
216 |             'price': 100.0, 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:215:27
    |
213 |             'symbol': 'TEST', 
214 |             'qty': 10, 
215 |             'side': 'buy', 
    |                           ^
216 |             'price': 100.0, 
217 |             'timestamp': '2025-08-05T23:17:35Z', 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:216:28
    |
214 |             'qty': 10, 
215 |             'side': 'buy', 
216 |             'price': 100.0, 
    |                            ^
217 |             'timestamp': '2025-08-05T23:17:35Z', 
218 |             'order_id': 'test-001', 
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:217:49
    |
215 |             'side': 'buy', 
216 |             'price': 100.0, 
217 |             'timestamp': '2025-08-05T23:17:35Z', 
    |                                                 ^
218 |             'order_id': 'test-001', 
219 |             'status': 'filled'
    |
help: Remove trailing whitespace

W291 [*] Trailing whitespace
   --> tests/test_trigger_meta_learning_conversion.py:218:36
    |
216 |             'price': 100.0, 
217 |             'timestamp': '2025-08-05T23:17:35Z', 
218 |             'order_id': 'test-001', 
    |                                    ^
219 |             'status': 'filled'
220 |         }
    |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:221:1
    |
219 |             'status': 'filled'
220 |         }
221 |         
    | ^^^^^^^^
222 |         # Verify we have the exact scenario from problem statement
223 |         quality_report = meta_learning.validate_trade_data_quality(test_file)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:227:1
    |
225 |         assert quality_report['audit_format_rows'] == 0
226 |         assert quality_report['meta_format_rows'] > 0  # Should be 5 (4 data + 1 header)
227 |         
    | ^^^^^^^^
228 |         # This should return True immediately (no conversion needed)
229 |         result = meta_learning.trigger_meta_learning_conversion(test_trade)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_trigger_meta_learning_conversion.py:231:1
    |
229 |         result = meta_learning.trigger_meta_learning_conversion(test_trade)
230 |         assert result is True, "Should return True for properly formatted meta-learning files"
231 |         
    | ^^^^^^^^
232 |     finally:
233 |         if os.path.exists(test_file):
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_trigger_meta_learning_conversion.py:234:33
    |
232 |     finally:
233 |         if os.path.exists(test_file):
234 |             os.unlink(test_file)
    |                                 ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_universe_csv.py:1:1
  |
1 | / import pandas as pd
2 | | from ai_trading.data.universe import locate_tickers_csv, load_universe
  | |______________________________________________________________________^
3 |
4 |   def test_env_overrides_packaged(monkeypatch, tmp_path):
  |
help: Organize imports

I001 [*] Import block is un-sorted or un-formatted
  --> tests/test_utc_timefmt.py:8:1
   |
 6 |   """
 7 |
 8 | / import pytest
 9 | | from datetime import datetime, timezone, timedelta
10 | | from ai_trading.utils.timefmt import (
11 | |     utc_now_iso,
12 | |     format_datetime_utc,
13 | |     parse_iso_utc,
14 | |     ensure_utc_format
15 | | )
   | |_^
   |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:20:1
   |
18 | class TestUTCTimestampFormatting:
19 |     """Test UTC timestamp formatting functions."""
20 |     
   | ^^^^
21 |     def test_utc_now_iso_format(self):
22 |         """Test that utc_now_iso() returns properly formatted timestamp."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:24:1
   |
22 |         """Test that utc_now_iso() returns properly formatted timestamp."""
23 |         timestamp = utc_now_iso()
24 |         
   | ^^^^^^^^
25 |         # Should end with single Z
26 |         assert timestamp.endswith('Z'), "Timestamp should end with Z"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:28:1
   |
26 |         assert timestamp.endswith('Z'), "Timestamp should end with Z"
27 |         assert timestamp.count('Z') == 1, "Timestamp should have exactly one Z"
28 |         
   | ^^^^^^^^
29 |         # Should be parseable
30 |         parsed = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:32:1
   |
30 |         parsed = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
31 |         assert parsed.tzinfo == timezone.utc
32 |     
   | ^^^^
33 |     def test_utc_now_iso_is_recent(self):
34 |         """Test that utc_now_iso() returns a recent timestamp."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:38:1
   |
36 |         timestamp_str = utc_now_iso()
37 |         after = datetime.now(timezone.utc)
38 |         
   | ^^^^^^^^
39 |         # Parse the timestamp
40 |         timestamp = parse_iso_utc(timestamp_str)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:42:1
   |
40 |         timestamp = parse_iso_utc(timestamp_str)
41 |         assert timestamp is not None
42 |         
   | ^^^^^^^^
43 |         # Should be between before and after
44 |         assert before <= timestamp <= after
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:45:1
   |
43 |         # Should be between before and after
44 |         assert before <= timestamp <= after
45 |     
   | ^^^^
46 |     def test_format_datetime_utc_with_utc_datetime(self):
47 |         """Test formatting UTC datetime."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:50:1
   |
48 |         dt = datetime(2024, 1, 1, 12, 0, 0, tzinfo=timezone.utc)
49 |         result = format_datetime_utc(dt)
50 |         
   | ^^^^^^^^
51 |         assert result == "2024-01-01T12:00:00Z"
52 |         assert result.count('Z') == 1
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:53:1
   |
51 |         assert result == "2024-01-01T12:00:00Z"
52 |         assert result.count('Z') == 1
53 |     
   | ^^^^
54 |     def test_format_datetime_utc_with_naive_datetime(self):
55 |         """Test formatting naive datetime (assumed UTC)."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:58:1
   |
56 |         dt = datetime(2024, 1, 1, 12, 0, 0)  # No timezone
57 |         result = format_datetime_utc(dt)
58 |         
   | ^^^^^^^^
59 |         assert result == "2024-01-01T12:00:00Z"
60 |         assert result.count('Z') == 1
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:61:1
   |
59 |         assert result == "2024-01-01T12:00:00Z"
60 |         assert result.count('Z') == 1
61 |     
   | ^^^^
62 |     def test_format_datetime_utc_with_non_utc_datetime(self):
63 |         """Test formatting datetime with non-UTC timezone."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:68:1
   |
66 |         dt = datetime(2024, 1, 1, 7, 0, 0, tzinfo=est)  # 7 AM EST = 12 PM UTC
67 |         result = format_datetime_utc(dt)
68 |         
   | ^^^^^^^^
69 |         assert result == "2024-01-01T12:00:00Z"
70 |         assert result.count('Z') == 1
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:71:1
   |
69 |         assert result == "2024-01-01T12:00:00Z"
70 |         assert result.count('Z') == 1
71 |     
   | ^^^^
72 |     def test_format_datetime_utc_with_none(self):
73 |         """Test formatting None datetime returns current time."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:75:1
   |
73 |         """Test formatting None datetime returns current time."""
74 |         result = format_datetime_utc(None)
75 |         
   | ^^^^^^^^
76 |         # Should be a valid timestamp
77 |         assert result.endswith('Z')
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:79:1
   |
77 |         assert result.endswith('Z')
78 |         assert result.count('Z') == 1
79 |         
   | ^^^^^^^^
80 |         # Should be recent
81 |         parsed = parse_iso_utc(result)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:84:1
   |
82 |         now = datetime.now(timezone.utc)
83 |         assert abs((now - parsed).total_seconds()) < 5  # Within 5 seconds
84 |     
   | ^^^^
85 |     def test_parse_iso_utc_with_z_suffix(self):
86 |         """Test parsing ISO timestamp with Z suffix."""
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/test_utc_timefmt.py:89:1
   |
87 |         timestamp_str = "2024-01-01T12:00:00Z"
88 |         result = parse_iso_utc(timestamp_str)
89 |         
   | ^^^^^^^^
90 |         assert result is not None
91 |         assert result.year == 2024
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:98:1
    |
 96 |         assert result.second == 0
 97 |         assert result.tzinfo == timezone.utc
 98 |     
    | ^^^^
 99 |     def test_parse_iso_utc_with_offset(self):
100 |         """Test parsing ISO timestamp with +00:00 offset."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:103:1
    |
101 |         timestamp_str = "2024-01-01T12:00:00+00:00"
102 |         result = parse_iso_utc(timestamp_str)
103 |         
    | ^^^^^^^^
104 |         assert result is not None
105 |         assert result.year == 2024
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:107:1
    |
105 |         assert result.year == 2024
106 |         assert result.tzinfo == timezone.utc
107 |     
    | ^^^^
108 |     def test_parse_iso_utc_with_invalid_format(self):
109 |         """Test parsing invalid timestamp returns None."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:113:1
    |
111 |         assert parse_iso_utc("") is None
112 |         assert parse_iso_utc(None) is None
113 |     
    | ^^^^
114 |     def test_ensure_utc_format_fixes_double_z(self):
115 |         """Test that ensure_utc_format fixes double Z suffixes."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:119:1
    |
117 |         assert result == "2024-01-01T12:00:00Z"
118 |         assert result.count('Z') == 1
119 |     
    | ^^^^
120 |     def test_ensure_utc_format_fixes_offset(self):
121 |         """Test that ensure_utc_format converts +00:00 to Z."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:125:1
    |
123 |         assert result == "2024-01-01T12:00:00Z"
124 |         assert result.count('Z') == 1
125 |     
    | ^^^^
126 |     def test_ensure_utc_format_with_multiple_z(self):
127 |         """Test that ensure_utc_format handles multiple Z suffixes."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:131:1
    |
129 |         assert result == "2024-01-01T12:00:00Z"
130 |         assert result.count('Z') == 1
131 |     
    | ^^^^
132 |     def test_ensure_utc_format_with_empty_string(self):
133 |         """Test that ensure_utc_format handles empty string."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:135:1
    |
133 |         """Test that ensure_utc_format handles empty string."""
134 |         result = ensure_utc_format("")
135 |         
    | ^^^^^^^^
136 |         # Should return current time
137 |         assert result.endswith('Z')
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:139:1
    |
137 |         assert result.endswith('Z')
138 |         assert result.count('Z') == 1
139 |     
    | ^^^^
140 |     def test_roundtrip_formatting(self):
141 |         """Test that format->parse->format is consistent."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:143:1
    |
141 |         """Test that format->parse->format is consistent."""
142 |         original_dt = datetime(2024, 6, 15, 14, 30, 45, tzinfo=timezone.utc)
143 |         
    | ^^^^^^^^
144 |         # Format to string
145 |         formatted = format_datetime_utc(original_dt)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:146:1
    |
144 |         # Format to string
145 |         formatted = format_datetime_utc(original_dt)
146 |         
    | ^^^^^^^^
147 |         # Parse back to datetime
148 |         parsed = parse_iso_utc(formatted)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:149:1
    |
147 |         # Parse back to datetime
148 |         parsed = parse_iso_utc(formatted)
149 |         
    | ^^^^^^^^
150 |         # Format again
151 |         reformatted = format_datetime_utc(parsed)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:152:1
    |
150 |         # Format again
151 |         reformatted = format_datetime_utc(parsed)
152 |         
    | ^^^^^^^^
153 |         # Should be identical
154 |         assert formatted == reformatted
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:156:1
    |
154 |         assert formatted == reformatted
155 |         assert parsed == original_dt
156 |     
    | ^^^^
157 |     def test_no_double_z_in_any_function(self):
158 |         """Comprehensive test that no function produces double Z."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:163:1
    |
161 |         assert 'ZZ' not in now_iso
162 |         assert now_iso.count('Z') == 1
163 |         
    | ^^^^^^^^
164 |         # Test format_datetime_utc with various inputs
165 |         dt_utc = datetime(2024, 1, 1, 12, 0, 0, tzinfo=timezone.utc)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:169:1
    |
167 |         assert 'ZZ' not in formatted_utc
168 |         assert formatted_utc.count('Z') == 1
169 |         
    | ^^^^^^^^
170 |         dt_naive = datetime(2024, 1, 1, 12, 0, 0)
171 |         formatted_naive = format_datetime_utc(dt_naive)
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:174:1
    |
172 |         assert 'ZZ' not in formatted_naive
173 |         assert formatted_naive.count('Z') == 1
174 |         
    | ^^^^^^^^
175 |         # Test ensure_utc_format with problematic input
176 |         cleaned = ensure_utc_format("2024-01-01T12:00:00ZZ")
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:179:1
    |
177 |         assert 'ZZ' not in cleaned
178 |         assert cleaned.count('Z') == 1
179 |     
    | ^^^^
180 |     def test_microseconds_handling(self):
181 |         """Test handling of microseconds in timestamps."""
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:184:1
    |
182 |         dt = datetime(2024, 1, 1, 12, 0, 0, 123456, tzinfo=timezone.utc)
183 |         formatted = format_datetime_utc(dt)
184 |         
    | ^^^^^^^^
185 |         # Should include microseconds
186 |         assert ".123456" in formatted
    |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tests/test_utc_timefmt.py:189:1
    |
187 |         assert formatted.endswith('Z')
188 |         assert formatted.count('Z') == 1
189 |         
    | ^^^^^^^^
190 |         # Should be parseable
191 |         parsed = parse_iso_utc(formatted)
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tests/test_utc_timefmt.py:196:28
    |
195 | if __name__ == "__main__":
196 |     pytest.main([__file__])
    |                            ^
    |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_validate_logging_setup_single_handler.py:1:1
  |
1 | / from __future__ import annotations
2 | |
3 | | import logging
4 | | import pytest
5 | |
6 | | import ai_trading.logging as L
  | |______________________________^
  |
help: Organize imports

E501 Line too long (113 > 100)
  --> tests/test_validate_logging_setup_single_handler.py:39:101
   |
37 |         assert res["handlers_count"] == post_count and res.get("deduped") is True
38 |     else:
39 |         pytest.skip("Neither dedupe_stream_handlers() nor validate_logging_setup() found in ai_trading.logging.")
   |                                                                                                     ^^^^^^^^^^^^^
   |

E501 Line too long (106 > 100)
  --> tests/test_yf_auto_adjust_and_cache.py:31:101
   |
29 |     from ai_trading.data_fetcher import _yahoo_get_bars
30 |
31 |     _ = _yahoo_get_bars("SPY", datetime(2025, 8, 1, tzinfo=UTC), datetime(2025, 8, 2, tzinfo=UTC), "1Day")
   |                                                                                                     ^^^^^^
32 |
33 |     assert calls["auto_adjust"] is True
   |

W293 [*] Blank line contains whitespace
  --> tests/unit/test_alpaca_api.py:20:1
   |
18 |     if submit is None:
19 |         pytest.skip("submit_order not available")
20 |     
   | ^^^^
21 |     # Mock the DRY_RUN setting to False so the actual client is used
22 |     monkeypatch.setattr(alpaca_api, "DRY_RUN", False)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/unit/test_alpaca_api.py:24:1
   |
22 |     monkeypatch.setattr(alpaca_api, "DRY_RUN", False)
23 |     monkeypatch.setattr(alpaca_api, "SHADOW_MODE", False)
24 |     
   | ^^^^
25 |     # Create a simple order request object 
26 |     class OrderReq:
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/unit/test_alpaca_api.py:25:43
   |
23 |     monkeypatch.setattr(alpaca_api, "SHADOW_MODE", False)
24 |     
25 |     # Create a simple order request object 
   |                                           ^
26 |     class OrderReq:
27 |         def __init__(self):
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/unit/test_alpaca_api.py:32:1
   |
30 |             self.side = "buy"
31 |             self.time_in_force = "day"
32 |         
   | ^^^^^^^^
33 |         def __getattr__(self, name):
34 |             if name == '_test_scenario':
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/unit/test_alpaca_api.py:37:1
   |
35 |                 return False
36 |             return None
37 |     
   | ^^^^
38 |     order_req = OrderReq()
39 |     res = submit(dummy_alpaca_client, order_req)
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tests/unit/test_alpaca_api.py:42:77
   |
40 |     assert res is not None
41 |     assert getattr(res, "id", None) is not None
42 |     assert dummy_alpaca_client.calls, "Client submit_order should be called"
   |                                                                             ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tests/unit/test_health_check.py:1:1
  |
1 | / import types
2 | | import pytest
  | |_____________^
3 |
4 |   @pytest.mark.unit
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tests/unit/test_health_check.py:9:1
   |
 7 |     # Try to import the function, but skip if not available
 8 |     from ai_trading.core.bot_engine import pre_trade_health_check
 9 |     
   | ^^^^
10 |     ctx = types.SimpleNamespace()
11 |     ctx.data_fetcher = dummy_data_fetcher
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/unit/test_health_check.py:12:1
   |
10 |     ctx = types.SimpleNamespace()
11 |     ctx.data_fetcher = dummy_data_fetcher
12 |     
   | ^^^^
13 |     # Test that it works when min_rows is explicitly passed
14 |     result = pre_trade_health_check(ctx, ["TEST"], min_rows=10)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/unit/test_health_check.py:17:1
   |
15 |     assert isinstance(result, dict), "Should return a dict result"
16 |     assert "checked" in result, "Should have checked key"
17 |     
   | ^^^^
18 |     # Test that it works when ctx doesn't have min_rows attribute  
19 |     # This should use the default value (120) instead of raising AttributeError
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/unit/test_health_check.py:18:66
   |
16 |     assert "checked" in result, "Should have checked key"
17 |     
18 |     # Test that it works when ctx doesn't have min_rows attribute  
   |                                                                  ^^
19 |     # This should use the default value (120) instead of raising AttributeError
20 |     result2 = pre_trade_health_check(ctx, ["TEST"], min_rows=None)
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/unit/test_health_check.py:22:1
   |
20 |     result2 = pre_trade_health_check(ctx, ["TEST"], min_rows=None)
21 |     assert isinstance(result2, dict), "Should return a dict result even without ctx.min_rows"
22 |     
   | ^^^^
23 | @pytest.mark.unit 
24 | def test_min_rows_precedence_logic():
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tests/unit/test_health_check.py:23:18
   |
21 |     assert isinstance(result2, dict), "Should return a dict result even without ctx.min_rows"
22 |     
23 | @pytest.mark.unit 
   |                  ^
24 | def test_min_rows_precedence_logic():
25 |     """Test the min_rows precedence logic in isolation."""
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tests/unit/test_health_check.py:31:1
   |
29 |             min_rows = getattr(ctx, "min_rows", 120)
30 |         return int(min_rows)
31 |     
   | ^^^^
32 |     # Test explicit parameter takes precedence
33 |     ctx = types.SimpleNamespace()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/unit/test_health_check.py:36:1
   |
34 |     ctx.min_rows = 50
35 |     assert resolve_min_rows(30, ctx) == 30, "Explicit parameter should take precedence"
36 |     
   | ^^^^
37 |     # Test ctx.min_rows is used when parameter is None
38 |     assert resolve_min_rows(None, ctx) == 50, "Should use ctx.min_rows when parameter is None"
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tests/unit/test_health_check.py:39:1
   |
37 |     # Test ctx.min_rows is used when parameter is None
38 |     assert resolve_min_rows(None, ctx) == 50, "Should use ctx.min_rows when parameter is None"
39 |     
   | ^^^^
40 |     # Test default is used when both are missing
41 |     ctx_no_attr = types.SimpleNamespace()
   |
help: Remove whitespace from blank line

E501 Line too long (101 > 100)
  --> tests/unit/test_health_check.py:42:101
   |
40 |     # Test default is used when both are missing
41 |     ctx_no_attr = types.SimpleNamespace()
42 |     assert resolve_min_rows(None, ctx_no_attr) == 120, "Should use default when ctx.min_rows missing"
   |                                                                                                     ^
   |

W292 [*] No newline at end of file
  --> tests/unit/test_health_check.py:42:102
   |
40 |     # Test default is used when both are missing
41 |     ctx_no_attr = types.SimpleNamespace()
42 |     assert resolve_min_rows(None, ctx_no_attr) == 120, "Should use default when ctx.min_rows missing"
   |                                                                                                      ^
   |
help: Add trailing newline

W292 [*] No newline at end of file
  --> tests/unit/test_logging_dedupe.py:12:37
   |
10 |     logger = get_phase_logger("test_module", "TEST")
11 |     assert hasattr(logger, "propagate")
12 |     assert logger.propagate is False
   |                                     ^
   |
help: Add trailing newline

E501 Line too long (105 > 100)
  --> tests/utils/test_http_retry.py:10:101
   |
10 | def test_get_retries_and_logs(monkeypatch: pytest.MonkeyPatch, caplog: pytest.LogCaptureFixture) -> None:
   |                                                                                                     ^^^^^
11 |     calls = {"n": 0}
   |

E501 Line too long (101 > 100)
  --> tests/utils/test_retry.py:45:101
   |
43 |     fn = Flaky(5)
44 |     with pytest.raises(TimeoutError):
45 |         retry_call(fn, exceptions=(TimeoutError,), retries=4, backoff=0.1, max_backoff=0.3, jitter=0)
   |                                                                                                     ^
46 |     assert sleeps[-1] <= 0.3
47 |     assert sleeps == sorted(sleeps)
   |

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> tests/watchdog_ext.py:38:24
   |
36 |     try:
37 |         import requests  # noqa: F401
38 |     except Exception:  # noqa: BLE001
   |                        ^^^^^^^^^^^^^^
39 |         return None, None
40 |     Session = getattr(sys.modules["requests"], "Session", None)
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> tests/watchdog_ext.py:45:60
   |
43 |             sess_mod = importlib.import_module("requests.sessions")
44 |             Session = getattr(sess_mod, "Session", None)
45 |         except Exception:  # pragma: no cover - defensive  # noqa: BLE001
   |                                                            ^^^^^^^^^^^^^^
46 |             Session = None
47 |     return Session, sys.modules.get("requests")
   |
help: Remove unused `noqa` directive

RUF100 [*] Unused `noqa` directive (non-enabled: `BLE001`)
  --> tests/watchdog_ext.py:91:28
   |
89 |         try:
90 |             ip = socket.gethostbyname(host)
91 |         except Exception:  # noqa: BLE001
   |                            ^^^^^^^^^^^^^^
92 |             ip = str(host)
93 |         if ip.startswith("127.") or host in ("::1", "localhost"):
   |
help: Remove unused `noqa` directive

I001 [*] Import block is un-sorted or un-formatted
 --> tools/check_python_version.py:1:1
  |
1 | / from __future__ import annotations
2 | | import sys
  | |__________^
3 |
4 |   # AI-AGENT-REF: warn but allow Python 3.11/3.12
  |
help: Organize imports

E713 [*] Test for membership should be `not in`
 --> tools/check_python_version.py:6:9
  |
4 | # AI-AGENT-REF: warn but allow Python 3.11/3.12
5 | maj, min = sys.version_info[:2]
6 | if not ((maj, min) in [(3, 12), (3, 11)]):
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |     print(f"WARNING: Python {sys.version.split()[0]} detected; expected 3.11 or 3.12. Continuing.")
8 | else:
  |
help: Convert to `not in`

E501 Line too long (115 > 100)
  --> tools/ci/full_cleanup.py:18:101
   |
17 | def strip_mock_classes(text: str) -> str:
18 |     rx_bases = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*\([^)]*\)\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
   |                                                                                                     ^^^^^^^^^^^^^^^
19 |     rx_plain = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
20 |     text = rx_bases.sub('', text)
   |

E501 Line too long (103 > 100)
  --> tools/ci/full_cleanup.py:19:101
   |
17 | def strip_mock_classes(text: str) -> str:
18 |     rx_bases = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*\([^)]*\)\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
19 |     rx_plain = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
   |                                                                                                     ^^^
20 |     text = rx_bases.sub('', text)
21 |     text = rx_plain.sub('', text)
   |

E501 Line too long (120 > 100)
  --> tools/ci/full_cleanup.py:49:101
   |
47 |     prologue = (
48 |         "def _raise_dynamic_exec_disabled(*_args, **_kwargs):\n"
49 |         "    raise RuntimeError('Dynamic _raise_dynamic_exec_disabled() disabled. Replace with explicit dispatch.')\n\n"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
50 |         "def _raise_dynamic_eval_disabled(*_args, **_kwargs):\n"
51 |         "    raise RuntimeError('Dynamic _raise_dynamic_eval_disabled() disabled. Replace with explicit dispatch.')\n\n"
   |

E501 Line too long (120 > 100)
  --> tools/ci/full_cleanup.py:51:101
   |
49 |         "    raise RuntimeError('Dynamic _raise_dynamic_exec_disabled() disabled. Replace with explicit dispatch.')\n\n"
50 |         "def _raise_dynamic_eval_disabled(*_args, **_kwargs):\n"
51 |         "    raise RuntimeError('Dynamic _raise_dynamic_eval_disabled() disabled. Replace with explicit dispatch.')\n\n"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
52 |     )
53 |     lines = text.splitlines(keepends=True)
   |

E501 Line too long (106 > 100)
  --> tools/ci/full_cleanup.py:55:101
   |
53 |     lines = text.splitlines(keepends=True)
54 |     i = 0
55 |     while i < len(lines) and (lines[i].startswith('#!') or 'coding:' in lines[i] or lines[i].strip()==''):
   |                                                                                                     ^^^^^^
56 |         i += 1
57 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
   |

E702 Multiple statements on one line (semicolon)
  --> tools/ci/full_cleanup.py:58:33
   |
56 |         i += 1
57 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
58 |         q = lines[i].strip()[:3]; i += 1
   |                                 ^
59 |         while i < len(lines) and q not in lines[i]: i += 1
60 |         if i < len(lines): i += 1
   |

E701 Multiple statements on one line (colon)
  --> tools/ci/full_cleanup.py:59:51
   |
57 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
58 |         q = lines[i].strip()[:3]; i += 1
59 |         while i < len(lines) and q not in lines[i]: i += 1
   |                                                   ^
60 |         if i < len(lines): i += 1
61 |     while i < len(lines) and lines[i].lstrip().startswith(("import ","from ")):
   |

E701 Multiple statements on one line (colon)
  --> tools/ci/full_cleanup.py:60:26
   |
58 |         q = lines[i].strip()[:3]; i += 1
59 |         while i < len(lines) and q not in lines[i]: i += 1
60 |         if i < len(lines): i += 1
   |                          ^
61 |     while i < len(lines) and lines[i].lstrip().startswith(("import ","from ")):
62 |         i += 1
   |

E701 Multiple statements on one line (colon)
  --> tools/ci/full_cleanup.py:69:17
   |
67 | def migrate_config_callsites(text: str):
68 |     names = set(m.group(1) for m in UPPER.finditer(text))
69 |     if not names: return text, set()
   |                 ^
70 |     new = UPPER.sub(lambda m: f"S.{m.group(1).lower()}", text)
71 |     if "from ai_trading.config import get_settings" not in new:
   |

E501 Line too long (117 > 100)
  --> tools/ci/full_cleanup.py:89:101
   |
87 |         txt = ""
88 |     if "BaseSettings" not in txt:
89 |         fields = "".join([f"    {n.lower()}: str | None = Field(default=None, env='{n}')\n" for n in sorted(needed)])
   |                                                                                                     ^^^^^^^^^^^^^^^^^
90 |         txt = (
91 |             "from pydantic import BaseSettings, Field\n\n"
   |

E501 Line too long (125 > 100)
   --> tools/ci/full_cleanup.py:107:101
    |
105 |                      for n in sorted(needed) if n.lower() not in existing]
106 |         if additions and "class Settings" in txt:
107 |             txt = re.sub(r'(class\s+Settings\s*\(.*?\)\s*:\s*\n)', r'\1' + "".join(additions), txt, count=1, flags=re.DOTALL)
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
108 |         if "def get_settings" not in txt:
109 |             txt += (
    |

I001 [*] Import block is un-sorted or un-formatted
 --> tools/ci/gen_audit_artifacts.py:2:1
  |
1 |   # tools/ci/gen_audit_artifacts.py
2 | / from __future__ import annotations
3 | | import re, csv
4 | | from pathlib import Path
  | |________________________^
5 |
6 |   ROOT = Path(__file__).resolve().parents[2]  # repo root
  |
help: Organize imports

E401 [*] Multiple imports on one line
 --> tools/ci/gen_audit_artifacts.py:3:1
  |
1 | # tools/ci/gen_audit_artifacts.py
2 | from __future__ import annotations
3 | import re, csv
  | ^^^^^^^^^^^^^^
4 | from pathlib import Path
  |
help: Split imports

E501 Line too long (148 > 100)
  --> tools/ci/gen_audit_artifacts.py:11:101
   |
10 | …
11 | …*(?:from\s+[.\w]+\s+import\s+[^\n]+|import\s+[^\n]+))+?\n\s*except\s+ImportError\s*:\s*"),
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 | …z0-9_]+\s*:", re.MULTILINE),
13 | …_\s*\("),
   |

E501 Line too long (120 > 100)
  --> tools/ci/gen_audit_artifacts.py:26:101
   |
24 |         rel = p.relative_to(ROOT)
25 |         srel = str(rel)
26 |         if any(part in srel for part in ("/venv/", "/.venv/", "/site-packages/", "/build/", "/dist/", "/__pycache__/")):
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
27 |             continue
28 |         try:
   |

E501 Line too long (120 > 100)
  --> tools/ci/gen_audit_artifacts.py:44:101
   |
42 |         rel = p.relative_to(ROOT)
43 |         srel = str(rel)
44 |         if any(part in srel for part in ("/venv/", "/.venv/", "/site-packages/", "/build/", "/dist/", "/__pycache__/")):
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
45 |             continue
46 |         try:
   |

E501 Line too long (134 > 100)
  --> tools/ci/gen_audit_artifacts.py:74:101
   |
72 |     for r in markers:
73 |         counts[r["marker"]] = counts.get(r["marker"], 0) + 1
74 |     write_csv(OUT / "summary.csv", [{"marker":k,"count":v} for k,v in sorted(counts.items(), key=lambda x:-x[1])], ["marker","count"])
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
75 |
76 |     print("Artifacts written to tools/out/:")
   |

E501 Line too long (109 > 100)
  --> tools/ci/gen_audit_artifacts.py:77:101
   |
76 |     print("Artifacts written to tools/out/:")
77 |     for fn in ("markers_all.csv","import_guards.csv","runtime_mocks.csv","compile_errors.csv","summary.csv"):
   |                                                                                                     ^^^^^^^^^
78 |         print(" -", (OUT / fn).as_posix())
   |

W292 [*] No newline at end of file
  --> tools/ci/gen_audit_artifacts.py:78:43
   |
76 |     print("Artifacts written to tools/out/:")
77 |     for fn in ("markers_all.csv","import_guards.csv","runtime_mocks.csv","compile_errors.csv","summary.csv"):
78 |         print(" -", (OUT / fn).as_posix())
   |                                           ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tools/ci/guard_ast.py:1:1
  |
1 | / from __future__ import annotations
2 | | import sys
3 | | from pathlib import Path
4 | | import libcst as cst
5 | | import libcst.matchers as m
  | |___________________________^
6 |
7 |   TARGET_DIRS = ["ai_trading"]
  |
help: Organize imports

E501 Line too long (138 > 100)
  --> tools/ci/guard_ast.py:16:101
   |
14 | …
15 | …
16 | …t.line if node.lpar else node.func.start.line, "raw _raise_dynamic_eval_disabled()"))
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
17 | …
18 | …
   |

E501 Line too long (134 > 100)
  --> tools/ci/guard_ast.py:20:101
   |
18 |     @m.visit(m.Call(func=m.Name("exec")))
19 |     def _exec(self, node: cst.Call) -> None:
20 |         FAILURES.append((self.path, node.lpar[0].start.line if node.lpar else node.func.start.line, "_raise_dynamic_exec_disabled()"))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 |
22 |     @m.visit(m.ExceptHandler(type=None))
   |

E501 Line too long (118 > 100)
  --> tools/ci/guard_ast.py:29:101
   |
27 |     def _empty_except(self, node: cst.ExceptHandler) -> None:
28 |         body = node.body
29 |         if len(body.body) == 1 and m.matches(body.body[0], m.SimpleStatementLine(body=m.OneOf(m.Pass(), m.Return()))):
   |                                                                                                     ^^^^^^^^^^^^^^^^^^
30 |             FAILURES.append((self.path, body.body[0].start.line, "empty except"))
   |

E501 Line too long (115 > 100)
  --> tools/ci/guard_ast.py:32:101
   |
30 |             FAILURES.append((self.path, body.body[0].start.line, "empty except"))
31 |
32 |     @m.visit(m.Call(func=m.Attribute(value=m.Name("requests"), attr=m.OneOf("get","post","put","delete","patch"))))
   |                                                                                                     ^^^^^^^^^^^^^^^
33 |     def _requests_timeout(self, node: cst.Call) -> None:
34 |         if not any(m.matches(a, m.Arg(keyword=m.Name("timeout"))) for a in node.args):
   |

E501 Line too long (130 > 100)
  --> tools/ci/guard_ast.py:37:101
   |
35 |             FAILURES.append((self.path, node.func.attr.start.line, "requests.* without timeout"))
36 |
37 |     @m.visit(m.Call(func=m.Attribute(value=m.Name("subprocess"), attr=m.OneOf("run","Popen","call","check_call","check_output"))))
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
38 |     def _subproc_timeout(self, node: cst.Call) -> None:
39 |         if not any(m.matches(a, m.Arg(keyword=m.Name("timeout"))) for a in node.args):
   |

E501 Line too long (113 > 100)
  --> tools/ci/guard_ast.py:58:101
   |
56 |             return
57 |         for p in node.params.params + node.params.kwonly_params:
58 |             if p.default and m.matches(p.default.value, m.OneOf(m.List(), m.Dict(), m.Call(func=m.Name("set")))):
   |                                                                                                     ^^^^^^^^^^^^^
59 |                 FAILURES.append((self.path, p.default.value.start.line, "mutable default in signature"))
   |

E501 Line too long (104 > 100)
  --> tools/ci/guard_ast.py:59:101
   |
57 |         for p in node.params.params + node.params.kwonly_params:
58 |             if p.default and m.matches(p.default.value, m.OneOf(m.List(), m.Dict(), m.Call(func=m.Name("set")))):
59 |                 FAILURES.append((self.path, p.default.value.start.line, "mutable default in signature"))
   |                                                                                                     ^^^^
60 |
61 | def scan_dir(root: Path) -> int:
   |

W293 [*] Blank line contains whitespace
  --> tools/ci/guard_ast.py:75:1
   |
73 |         print(f"Scanning directory: {d}")
74 |         code |= scan_dir(Path(d))
75 |     
   | ^^^^
76 |     print(f"Total failures found: {len(FAILURES)}")
77 |     if FAILURES:
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tools/ci/guard_ast.py:85:21
   |
84 | if __name__ == "__main__":
85 |     sys.exit(main())
   |                     ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tools/ci/list_shims.py:2:1
  |
1 |   # tools/ci/list_shims.py
2 | / from __future__ import annotations
3 | | import re
4 | | import csv
5 | | from pathlib import Path
  | |________________________^
6 |
7 |   ROOT = Path("ai_trading")
  |
help: Organize imports

E501 Line too long (142 > 100)
  --> tools/ci/list_shims.py:9:101
   |
 7 | …
 8 | …
 9 | …:from\s+[.\w]+\s+import\s+[^\n]+|import\s+[^\n]+))+?\n\s*except\s+ImportError\s*:\s*"),
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 | …tr__\s*\("),
11 | …s+def\s+[A-Z0-9_]+\s*\("),
   |

W293 [*] Blank line contains whitespace
  --> tools/ci/list_shims.py:25:1
   |
23 |             print(f"Error reading {p}: {e}")
24 |             continue
25 |         
   | ^^^^^^^^
26 |         for name, rx in PATTERNS.items():
27 |             for m in rx.finditer(text):
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tools/ci/list_shims.py:48:11
   |
47 | if __name__ == "__main__":
48 |     main()
   |           ^
   |
help: Add trailing newline

E501 Line too long (110 > 100)
  --> tools/ci/optionalize_features.py:24:101
   |
22 |         return False
23 |     # Append a safe, reviewable block at end (human may inline later)
24 |     path.write_text(txt + "\n\n" + TEMPLATE.format(flag=flag, module=module, symbol=symbol), encoding="utf-8")
   |                                                                                                     ^^^^^^^^^^
25 |     return True
   |

W292 [*] No newline at end of file
  --> tools/ci/optionalize_features.py:36:11
   |
35 | if __name__ == "__main__":
36 |     main()
   |           ^
   |
help: Add trailing newline

E501 Line too long (120 > 100)
  --> tools/ci/sweep_tests_tools.py:40:101
   |
38 |     prologue = (
39 |         "def _raise_dynamic_exec_disabled(*_args, **_kwargs):\n"
40 |         "    raise RuntimeError('Dynamic _raise_dynamic_exec_disabled() disabled. Replace with explicit dispatch.')\n\n"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
41 |         "def _raise_dynamic_eval_disabled(*_args, **_kwargs):\n"
42 |         "    raise RuntimeError('Dynamic _raise_dynamic_eval_disabled() disabled. Replace with explicit dispatch.')\n\n"
   |

E501 Line too long (120 > 100)
  --> tools/ci/sweep_tests_tools.py:42:101
   |
40 |         "    raise RuntimeError('Dynamic _raise_dynamic_exec_disabled() disabled. Replace with explicit dispatch.')\n\n"
41 |         "def _raise_dynamic_eval_disabled(*_args, **_kwargs):\n"
42 |         "    raise RuntimeError('Dynamic _raise_dynamic_eval_disabled() disabled. Replace with explicit dispatch.')\n\n"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^
43 |     )
44 |     lines = text.splitlines(keepends=True)
   |

E501 Line too long (106 > 100)
  --> tools/ci/sweep_tests_tools.py:47:101
   |
45 |     # insert after initial imports/docstring where reasonable
46 |     i = 0
47 |     while i < len(lines) and (lines[i].startswith('#!') or 'coding:' in lines[i] or lines[i].strip()==''):
   |                                                                                                     ^^^^^^
48 |         i += 1
49 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
   |

E702 Multiple statements on one line (semicolon)
  --> tools/ci/sweep_tests_tools.py:50:33
   |
48 |         i += 1
49 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
50 |         q = lines[i].strip()[:3]; i += 1
   |                                 ^
51 |         while i < len(lines) and q not in lines[i]: i += 1
52 |         if i < len(lines): i += 1
   |

E701 Multiple statements on one line (colon)
  --> tools/ci/sweep_tests_tools.py:51:51
   |
49 |     if i < len(lines) and lines[i].lstrip().startswith(('"""',"'''")):
50 |         q = lines[i].strip()[:3]; i += 1
51 |         while i < len(lines) and q not in lines[i]: i += 1
   |                                                   ^
52 |         if i < len(lines): i += 1
53 |     while i < len(lines) and lines[i].lstrip().startswith(("import ","from ")):
   |

E701 Multiple statements on one line (colon)
  --> tools/ci/sweep_tests_tools.py:52:26
   |
50 |         q = lines[i].strip()[:3]; i += 1
51 |         while i < len(lines) and q not in lines[i]: i += 1
52 |         if i < len(lines): i += 1
   |                          ^
53 |     while i < len(lines) and lines[i].lstrip().startswith(("import ","from ")):
54 |         i += 1
   |

E501 Line too long (149 > 100)
  --> tools/ci/sweep_tests_tools.py:59:101
   |
58 | …
59 | …broad Mock* used at runtime; prefer relocating to tests/support/mocks_runtime.py if needed.
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
60 | …0-9_]+\s*\([^)]*\)\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
61 | …0-9_]+\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
   |

E501 Line too long (115 > 100)
  --> tools/ci/sweep_tests_tools.py:60:101
   |
58 | def strip_mock_classes(text: str) -> str:
59 |     # Only adjust tests/tools if they accidentally define broad Mock* used at runtime; prefer relocating to tests/support/mocks_runtim…
60 |     rx_bases = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*\([^)]*\)\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
   |                                                                                                     ^^^^^^^^^^^^^^^
61 |     rx_plain = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
62 |     return rx_plain.sub('', rx_bases.sub('', text))
   |

E501 Line too long (103 > 100)
  --> tools/ci/sweep_tests_tools.py:61:101
   |
59 |     # Only adjust tests/tools if they accidentally define broad Mock* used at runtime; prefer relocating to tests/support/mocks_runtim…
60 |     rx_bases = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*\([^)]*\)\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
61 |     rx_plain = re.compile(r'(?ms)^(\s*)class\s+Mock[A-Za-z0-9_]+\s*:\s*\n(?:\1    |\t).+?(?=^\1\S|\Z)')
   |                                                                                                     ^^^
62 |     return rx_plain.sub('', rx_bases.sub('', text))
   |

E702 Multiple statements on one line (semicolon)
  --> tools/ci/sweep_tests_tools.py:78:26
   |
76 |         txt = strip_mock_classes(txt)
77 |         if txt != txt0:
78 |             write(p, txt); changed += 1
   |                          ^
79 |
80 | print(f"Files changed: {changed}")
   |

W292 [*] No newline at end of file
  --> tools/ci/sweep_tests_tools.py:80:35
   |
78 |             write(p, txt); changed += 1
79 |
80 | print(f"Files changed: {changed}")
   |                                   ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tools/ci/tighten_settings_types.py:2:1
  |
1 |   # tools/ci/tighten_settings_types.py
2 | / from pathlib import Path
3 | | import re
  | |_________^
4 |
5 |   ROOT = Path(__file__).resolve().parents[2]
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tools/ci/tighten_settings_types.py:10:1
   |
 8 | def tighten():
 9 |     txt = SETTINGS.read_text(encoding="utf-8", errors="ignore")
10 |     
   | ^^^^
11 |     # Replace specific str | None fields with proper types and defaults
12 |     replacements = [
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tools/ci/tighten_settings_types.py:22:1
   |
20 |         (r'    verbose_logging: str \| None = Field\(default=None, env=\'VERBOSE_LOGGING\'\)',
21 |          '    verbose_logging: bool = Field(False, env=\'VERBOSE_LOGGING\')'),
22 |         
   | ^^^^^^^^
23 |         # Integers 
24 |         (r'    pyramid_levels: str \| None = Field\(default=None, env=\'PYRAMID_LEVELS\'\)',
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tools/ci/tighten_settings_types.py:23:19
   |
21 |          '    verbose_logging: bool = Field(False, env=\'VERBOSE_LOGGING\')'),
22 |         
23 |         # Integers 
   |                   ^
24 |         (r'    pyramid_levels: str \| None = Field\(default=None, env=\'PYRAMID_LEVELS\'\)',
25 |          '    pyramid_levels: int = Field(0, env=\'PYRAMID_LEVELS\')'),
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tools/ci/tighten_settings_types.py:28:1
   |
26 |         (r'    min_health_rows: str \| None = Field\(default=None, env=\'MIN_HEALTH_ROWS\'\)',
27 |          '    min_health_rows: int = Field(100, env=\'MIN_HEALTH_ROWS\')'),
28 |         
   | ^^^^^^^^
29 |         # Floats
30 |         (r'    ml_confidence_threshold: str \| None = Field\(default=None, env=\'ML_CONFIDENCE_THRESHOLD\'\)',
   |
help: Remove whitespace from blank line

E501 Line too long (110 > 100)
  --> tools/ci/tighten_settings_types.py:30:101
   |
29 |         # Floats
30 |         (r'    ml_confidence_threshold: str \| None = Field\(default=None, env=\'ML_CONFIDENCE_THRESHOLD\'\)',
   |                                                                                                     ^^^^^^^^^^
31 |          '    ml_confidence_threshold: float = Field(0.6, env=\'ML_CONFIDENCE_THRESHOLD\')'),
32 |         (r'    portfolio_drift_threshold: str \| None = Field\(default=None, env=\'PORTFOLIO_DRIFT_THRESHOLD\'\)',
   |

E501 Line too long (114 > 100)
  --> tools/ci/tighten_settings_types.py:32:101
   |
30 |         (r'    ml_confidence_threshold: str \| None = Field\(default=None, env=\'ML_CONFIDENCE_THRESHOLD\'\)',
31 |          '    ml_confidence_threshold: float = Field(0.6, env=\'ML_CONFIDENCE_THRESHOLD\')'),
32 |         (r'    portfolio_drift_threshold: str \| None = Field\(default=None, env=\'PORTFOLIO_DRIFT_THRESHOLD\'\)',
   |                                                                                                     ^^^^^^^^^^^^^^
33 |          '    portfolio_drift_threshold: float = Field(0.05, env=\'PORTFOLIO_DRIFT_THRESHOLD\')'),
34 |         (r'    max_drawdown_threshold: str \| None = Field\(default=None, env=\'MAX_DRAWDOWN_THRESHOLD\'\)',
   |

E501 Line too long (108 > 100)
  --> tools/ci/tighten_settings_types.py:34:101
   |
32 |         (r'    portfolio_drift_threshold: str \| None = Field\(default=None, env=\'PORTFOLIO_DRIFT_THRESHOLD\'\)',
33 |          '    portfolio_drift_threshold: float = Field(0.05, env=\'PORTFOLIO_DRIFT_THRESHOLD\')'),
34 |         (r'    max_drawdown_threshold: str \| None = Field\(default=None, env=\'MAX_DRAWDOWN_THRESHOLD\'\)',
   |                                                                                                     ^^^^^^^^
35 |          '    max_drawdown_threshold: float = Field(0.15, env=\'MAX_DRAWDOWN_THRESHOLD\')'),
36 |         (r'    volume_spike_threshold: str \| None = Field\(default=None, env=\'VOLUME_SPIKE_THRESHOLD\'\)',
   |

E501 Line too long (108 > 100)
  --> tools/ci/tighten_settings_types.py:36:101
   |
34 |         (r'    max_drawdown_threshold: str \| None = Field\(default=None, env=\'MAX_DRAWDOWN_THRESHOLD\'\)',
35 |          '    max_drawdown_threshold: float = Field(0.15, env=\'MAX_DRAWDOWN_THRESHOLD\')'),
36 |         (r'    volume_spike_threshold: str \| None = Field\(default=None, env=\'VOLUME_SPIKE_THRESHOLD\'\)',
   |                                                                                                     ^^^^^^^^
37 |          '    volume_spike_threshold: float = Field(1.5, env=\'VOLUME_SPIKE_THRESHOLD\')'),
   |

W293 [*] Blank line contains whitespace
  --> tools/ci/tighten_settings_types.py:38:1
   |
36 |         (r'    volume_spike_threshold: str \| None = Field\(default=None, env=\'VOLUME_SPIKE_THRESHOLD\'\)',
37 |          '    volume_spike_threshold: float = Field(1.5, env=\'VOLUME_SPIKE_THRESHOLD\')'),
38 |         
   | ^^^^^^^^
39 |         # Check for scheduler_sleep_seconds and update if needed (currently int)
40 |         (r'    scheduler_sleep_seconds: int = Field\(30, env="SCHEDULER_SLEEP_SECONDS"\)',
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tools/ci/tighten_settings_types.py:42:1
   |
40 |         (r'    scheduler_sleep_seconds: int = Field\(30, env="SCHEDULER_SLEEP_SECONDS"\)',
41 |          '    scheduler_sleep_seconds: int = Field(5, env="SCHEDULER_SLEEP_SECONDS")'),
42 |         
   | ^^^^^^^^
43 |         # Update model_path to None default and trade_log_file default
44 |         (r'    model_path: str = Field\("meta_model\.pkl", env="MODEL_PATH"\)',
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tools/ci/tighten_settings_types.py:49:1
   |
47 |          '    trade_log_file: str = Field("trades.csv", env="TRADE_LOG_FILE")'),
48 |     ]
49 |     
   | ^^^^
50 |     for pattern, replacement in replacements:
51 |         txt = re.sub(pattern, replacement, txt)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tools/ci/tighten_settings_types.py:52:1
   |
50 |     for pattern, replacement in replacements:
51 |         txt = re.sub(pattern, replacement, txt)
52 |     
   | ^^^^
53 |     SETTINGS.write_text(txt, encoding="utf-8")
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tools/ci/tighten_settings_types.py:57:39
   |
55 | if __name__ == "__main__":
56 |     tighten()
57 |     print("Settings types tightened.")
   |                                       ^
   |
help: Add trailing newline

W293 [*] Blank line contains whitespace
  --> tools/ci/unwrap_import_guards.py:20:1
   |
18 |         line = lines[i]
19 |         stripped = line.lstrip()
20 |         
   | ^^^^^^^^
21 |         # Look for try: statements
22 |         if stripped.startswith("try:"):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tools/ci/unwrap_import_guards.py:29:1
   |
27 |             j = body_start
28 |             try_body_lines = []
29 |             
   | ^^^^^^^^^^^^
30 |             while j < n:
31 |                 if lines[j].strip() == "":
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tools/ci/unwrap_import_guards.py:45:1
   |
43 |                 except_start = j + 1
44 |                 k = except_start
45 |                 
   | ^^^^^^^^^^^^^^^^
46 |                 # Skip the except block
47 |                 while k < n:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tools/ci/unwrap_import_guards.py:59:1
   |
57 |                 import_statements = []
58 |                 non_import_statements = []
59 |                 
   | ^^^^^^^^^^^^^^^^
60 |                 for try_line in try_body_lines:
61 |                     stripped_try = try_line.lstrip()
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tools/ci/unwrap_import_guards.py:68:1
   |
66 |                     elif stripped_try.strip():  # Non-empty, non-import line
67 |                         non_import_statements.append(try_line)
68 |                 
   | ^^^^^^^^^^^^^^^^
69 |                 # If we found import statements, unwrap them
70 |                 if import_statements:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tools/ci/unwrap_import_guards.py:73:1
   |
71 |                     # Add the unwrapped imports
72 |                     out.extend(import_statements)
73 |                     
   | ^^^^^^^^^^^^^^^^^^^^
74 |                     # If there were non-import statements, preserve them outside the try/except
75 |                     if non_import_statements:
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tools/ci/unwrap_import_guards.py:77:1
   |
75 |                     if non_import_statements:
76 |                         out.extend(non_import_statements)
77 |                     
   | ^^^^^^^^^^^^^^^^^^^^
78 |                     changed = True
79 |                     # Skip the entire try/except block
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
   --> tools/ci/unwrap_import_guards.py:106:1
    |
104 |         if "/tests/" in p.as_posix():
105 |             continue
106 |         
    | ^^^^^^^^
107 |         try:
108 |             txt = p.read_text(encoding="utf-8", errors="ignore")
    |
help: Remove whitespace from blank line

E501 Line too long (102 > 100)
   --> tools/ci/unwrap_import_guards.py:118:101
    |
116 |                     print(f"Successfully unwrapped imports in: {p.relative_to(ROOT)}")
117 |                 except SyntaxError as e:
118 |                     print(f"Syntax error would be introduced in {p.relative_to(ROOT)}, skipping: {e}")
    |                                                                                                     ^^
119 |                     continue
120 |             files += 1
    |

W293 [*] Blank line contains whitespace
   --> tools/ci/unwrap_import_guards.py:124:1
    |
122 |             print(f"Error processing {p.relative_to(ROOT)}: {e}")
123 |             continue
124 |     
    | ^^^^
125 |     print(f"files_scanned={files} files_modified={total}")
    |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
   --> tools/ci/unwrap_import_guards.py:128:11
    |
127 | if __name__ == "__main__":
128 |     main()
    |           ^
    |
help: Add trailing newline

E501 Line too long (105 > 100)
 --> tools/codemods/codemod_io_safety_yaml.py:2:101
  |
1 | #!/usr/bin/env python3
2 | """Codemod script for IO safety, YAML hardening, async sleep fixes, import cleanup, and path literals."""
  |                                                                                                     ^^^^^
3 |
4 | import re
  |

E501 Line too long (109 > 100)
  --> tools/codemods/codemod_io_safety_yaml.py:11:101
   |
 9 | def replace_yaml_load(content: str) -> str:
10 |     """Replace unsafe YAML loading with yaml.safe_load()."""
11 |     # AI-AGENT-REF: Fixed unsafe yaml.load pattern - replace with yaml.safe_load when no Loader= is specified
   |                                                                                                     ^^^^^^^^^
12 |     content = re.sub(
13 |         r"yaml\.load\s*\(\s*([^)]+)\s*\)",
   |

E501 Line too long (102 > 100)
  --> tools/codemods/codemod_io_safety_yaml.py:51:101
   |
49 |                         line,
50 |                     )
51 |                 # Handle case where call spans multiple lines - add to the line with the opening paren
   |                                                                                                     ^^
52 |                 else:
53 |                     line = re.sub(
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tools/codemods/remove_import_guards.py:1:1
  |
1 | / from __future__ import annotations
2 | | from pathlib import Path
3 | | import libcst as cst
  | |____________________^
4 |
5 |   ROOT = Path("ai_trading")
  |
help: Organize imports

E501 Line too long (123 > 100)
  --> tools/codemods/remove_import_guards.py:8:101
   |
 7 | class StripImportGuards(cst.CSTTransformer):
 8 |     def leave_Try(self, original: cst.Try, updated: cst.Try) -> cst.BaseStatement | cst.FlattenSentinel[cst.BaseStatement]:
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^
 9 |         # If the try-body is ONLY import statements and except ImportError exists,
10 |         # replace the whole try/except with just the import statements.
   |

W293 [*] Blank line contains whitespace
  --> tools/codemods/remove_import_guards.py:13:1
   |
11 |         if not updated.handlers:
12 |             return updated
13 |         
   | ^^^^^^^^
14 |         # Check if all handlers are ImportError
15 |         if not all(
   |
help: Remove whitespace from blank line

W291 [*] Trailing whitespace
  --> tools/codemods/remove_import_guards.py:16:75
   |
14 |         # Check if all handlers are ImportError
15 |         if not all(
16 |             isinstance(h.type, cst.Name) and h.type.value == "ImportError" 
   |                                                                           ^
17 |             for h in updated.handlers if h.type
18 |         ):
   |
help: Remove trailing whitespace

W293 [*] Blank line contains whitespace
  --> tools/codemods/remove_import_guards.py:20:1
   |
18 |         ):
19 |             return updated
20 |         
   | ^^^^^^^^
21 |         body = updated.body
22 |         if not isinstance(body, cst.IndentedBlock):
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tools/codemods/remove_import_guards.py:24:1
   |
22 |         if not isinstance(body, cst.IndentedBlock):
23 |             return updated
24 |         
   | ^^^^^^^^
25 |         # Check if all statements in try block are import statements
26 |         import_statements = []
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tools/codemods/remove_import_guards.py:39:1
   |
37 |                 # Non-simple statement found
38 |                 return updated
39 |         
   | ^^^^^^^^
40 |         # Return only the import statements (flatten)
41 |         if import_statements:
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tools/codemods/remove_import_guards.py:67:11
   |
66 | if __name__ == "__main__":
67 |     main()
   |           ^
   |
help: Add trailing newline

E501 Line too long (103 > 100)
  --> tools/codemods/rename_unused_locals.py:27:101
   |
25 |         unused = {n for n in assigned if n not in reads and not n.startswith("_")}
26 |         for inner in ast.walk(node):
27 |             if isinstance(inner, ast.Name) and isinstance(inner.ctx, ast.Store) and inner.id in unused:
   |                                                                                                     ^^^
28 |                 inner.id = f"_unused_{inner.id}"
29 |         return node
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tools/codemods/replace_eval_exec.py:1:1
  |
1 | / from __future__ import annotations
2 | | from pathlib import Path
3 | | import re
  | |_________^
4 |
5 |   ROOT = Path("ai_trading")
  |
help: Organize imports

W292 [*] No newline at end of file
  --> tools/codemods/replace_eval_exec.py:51:11
   |
50 | if __name__ == "__main__":
51 |     main()
   |           ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tools/codemods/strip_config_magic.py:1:1
  |
1 | / from __future__ import annotations
2 | | from pathlib import Path
3 | | import libcst as cst
4 | | import libcst.matchers as m
  | |___________________________^
5 |
6 |   CFG_INIT = Path("ai_trading/config/__init__.py")
  |
help: Organize imports

W293 [*] Blank line contains whitespace
  --> tools/codemods/strip_config_magic.py:17:1
   |
15 |     if not settings_path.exists():
16 |         return
17 |         
   | ^^^^^^^^
18 |     src = settings_path.read_text(encoding="utf-8")
19 |     mod = cst.parse_module(src)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tools/codemods/strip_config_magic.py:29:1
   |
27 |                     has_property_decorator = True
28 |                     break
29 |             
   | ^^^^^^^^^^^^
30 |             if has_property_decorator and o.name.value.isupper():
31 |                 return cst.RemovalSentinel.REMOVE
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tools/codemods/strip_config_magic.py:49:1
   |
47 |         except Exception as e:
48 |             print(f"Error processing {CFG_INIT}: {e}")
49 |     
   | ^^^^
50 |     settings = Path("ai_trading/config/settings.py")
51 |     remove_uppercase_properties(settings)
   |
help: Remove whitespace from blank line

W293 [*] Blank line contains whitespace
  --> tools/codemods/strip_config_magic.py:52:1
   |
50 |     settings = Path("ai_trading/config/settings.py")
51 |     remove_uppercase_properties(settings)
52 |     
   | ^^^^
53 |     # Also check management.py for __getattr__
54 |     management = Path("ai_trading/config/management.py")
   |
help: Remove whitespace from blank line

W292 [*] No newline at end of file
  --> tools/codemods/strip_config_magic.py:66:11
   |
65 | if __name__ == "__main__":
66 |     main()
   |           ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tools/codemods/sweep_fix.py:2:1
  |
1 |   # tools/codemods/sweep_fix.py
2 | / import pathlib
3 | | import sys
4 | | import logging
5 | |
6 | | import libcst as cst
7 | | import libcst.matchers as m
  | |___________________________^
8 |
9 |   logger = logging.getLogger(__name__)
  |
help: Organize imports

E401 [*] Multiple imports on one line
 --> tools/fix_import_time.py:2:1
  |
1 | # tools/fix_import_time.py
2 | import pathlib, re
  | ^^^^^^^^^^^^^^^^^^
3 |
4 | ROOT = pathlib.Path(__file__).resolve().parents[1]
  |
help: Split imports

I001 [*] Import block is un-sorted or un-formatted
 --> tools/fix_import_time.py:2:1
  |
1 | # tools/fix_import_time.py
2 | import pathlib, re
  | ^^^^^^^^^^^^^^^^^^
3 |
4 | ROOT = pathlib.Path(__file__).resolve().parents[1]
  |
help: Organize imports

E701 Multiple statements on one line (colon)
  --> tools/fix_import_time.py:30:19
   |
29 | def ensure_getter_imports(lines, getters):
30 |     if not getters: return False
   |                   ^
31 |     imp_line = IMPORT_GETTERS_TMPL.format(", ".join(sorted(getters)))
32 |     joined = "".join(lines)
   |

E701 Multiple statements on one line (colon)
  --> tools/fix_import_time.py:33:26
   |
31 |     imp_line = IMPORT_GETTERS_TMPL.format(", ".join(sorted(getters)))
32 |     joined = "".join(lines)
33 |     if imp_line in joined: return False
   |                          ^
34 |     idx = 0
35 |     while idx < len(lines) and lines[idx].startswith(("#!", "# -*-", "from __future__")):
   |

E701 Multiple statements on one line (colon)
  --> tools/fix_import_time.py:49:17
   |
47 |     while True:
48 |         m = func.search(j, pos)
49 |         if not m: break
   |                 ^
50 |         start = m.end()
51 |         head_line = j[:m.start()].count("\n")
   |

E501 Line too long (101 > 100)
  --> tools/fix_import_time.py:69:101
   |
67 |         indent, const, field = m.groups()
68 |         repl = KNOWN_GETTERS.get(field, None)
69 |         const_map[const] = f"{KNOWN_GETTERS[field]}()" if repl else f"get_runtime_settings().{field}"
   |                                                                                                     ^
70 |         return indent + f"# REMOVED: module-scope {const} = get_settings().{field}\n"
71 |     text = RE_MODULE_CONST.sub(_const_sub, text)
   |

E501 Line too long (107 > 100)
  --> tools/fix_import_time.py:80:101
   |
78 |     def _attr_sub(m):
79 |         field = m.group(1)
80 |         return f"{KNOWN_GETTERS[field]}()" if field in KNOWN_GETTERS else f"get_runtime_settings().{field}"
   |                                                                                                     ^^^^^^^
81 |     text = RE_DIRECT_ATTR.sub(_attr_sub, text)
   |

E701 Multiple statements on one line (colon)
   --> tools/fix_import_time.py:104:53
    |
102 |     changed = 0
103 |     for py in ROOT.rglob("*.py"):
104 |         if any(part in EXCLUDE for part in py.parts): continue
    |                                                     ^
105 |         if py.parts[0] not in {"ai_trading", "tests"}: continue
106 |         if py.name == "settings.py" and py.parts[-2] == "ai_trading": continue
    |

E701 Multiple statements on one line (colon)
   --> tools/fix_import_time.py:105:54
    |
103 |     for py in ROOT.rglob("*.py"):
104 |         if any(part in EXCLUDE for part in py.parts): continue
105 |         if py.parts[0] not in {"ai_trading", "tests"}: continue
    |                                                      ^
106 |         if py.name == "settings.py" and py.parts[-2] == "ai_trading": continue
107 |         try:
    |

E701 Multiple statements on one line (colon)
   --> tools/fix_import_time.py:106:69
    |
104 |         if any(part in EXCLUDE for part in py.parts): continue
105 |         if py.parts[0] not in {"ai_trading", "tests"}: continue
106 |         if py.name == "settings.py" and py.parts[-2] == "ai_trading": continue
    |                                                                     ^
107 |         try:
108 |             if patch_file(py): changed += 1
    |

E701 Multiple statements on one line (colon)
   --> tools/fix_import_time.py:108:30
    |
106 |         if py.name == "settings.py" and py.parts[-2] == "ai_trading": continue
107 |         try:
108 |             if patch_file(py): changed += 1
    |                              ^
109 |         except Exception as e:
110 |             print(f"PATCH_FAIL {py}: {e}")
    |

E501 Line too long (115 > 100)
  --> tools/import_contract.py:48:101
   |
46 | def main(argv: List[str] | None = None) -> int:
47 |     p = argparse.ArgumentParser()
48 |     p.add_argument("--modules", default="ai_trading,trade_execution", help="Comma-separated module list to import")
   |                                                                                                     ^^^^^^^^^^^^^^^
49 |     p.add_argument("--timeout", type=float, default=20.0, help="Per-module timeout in seconds")
50 |     p.add_argument("--ci", action="store_true", help="CI mode: concise logs, non-zero exit on failures")
   |

E501 Line too long (104 > 100)
  --> tools/import_contract.py:50:101
   |
48 |     p.add_argument("--modules", default="ai_trading,trade_execution", help="Comma-separated module list to import")
49 |     p.add_argument("--timeout", type=float, default=20.0, help="Per-module timeout in seconds")
50 |     p.add_argument("--ci", action="store_true", help="CI mode: concise logs, non-zero exit on failures")
   |                                                                                                     ^^^^
51 |     args = p.parse_args(argv)
   |

I001 [*] Import block is un-sorted or un-formatted
 --> tools/migrate_metrics_logger.py:2:1
  |
1 |   # tools/migrate_metrics_logger.py
2 | / from __future__ import annotations
3 | | import re, sys
4 | | from pathlib import Path
  | |________________________^
5 |
6 |   ROOT = Path(__file__).resolve().parents[1]  # repo root (…/ai_trading)
  |
help: Organize imports

E401 [*] Multiple imports on one line
 --> tools/migrate_metrics_logger.py:3:1
  |
1 | # tools/migrate_metrics_logger.py
2 | from __future__ import annotations
3 | import re, sys
  | ^^^^^^^^^^^^^^
4 | from pathlib import Path
  |
help: Split imports

W292 [*] No newline at end of file
  --> tools/migrate_metrics_logger.py:52:21
   |
51 | if __name__ == "__main__":
52 |     sys.exit(main())
   |                     ^
   |
help: Add trailing newline

I001 [*] Import block is un-sorted or un-formatted
 --> tools/package_health.py:3:1
  |
1 |   """Quick health probes for CI diagnostics."""
2 |
3 | / from pathlib import Path
4 | | import sys
  | |__________^
5 |
6 |   ROOT = Path(__file__).resolve().parents[1]
  |
help: Organize imports

E401 [*] Multiple imports on one line
 --> tools/scan_import_time.py:2:1
  |
1 | # tools/scan_import_time.py
2 | import pathlib, re, sys
  | ^^^^^^^^^^^^^^^^^^^^^^^
3 |
4 | ROOT = pathlib.Path(__file__).resolve().parents[1]
  |
help: Split imports

I001 [*] Import block is un-sorted or un-formatted
 --> tools/scan_import_time.py:2:1
  |
1 | # tools/scan_import_time.py
2 | import pathlib, re, sys
  | ^^^^^^^^^^^^^^^^^^^^^^^
3 |
4 | ROOT = pathlib.Path(__file__).resolve().parents[1]
  |
help: Organize imports

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:18:40
   |
16 |     txt = p.read_text(encoding="utf-8", errors="ignore")
17 |     hits = []
18 |     if PATS["MODULE_CONST"].search(txt): hits.append("MODULE_CONST_FROM_SETTINGS")
   |                                        ^
19 |     if PATS["MODULE_CFG"].search(txt):   hits.append("MODULE_CFG_FROM_SETTINGS")
20 |     if PATS["DIRECT_ATTR"].search(txt):  hits.append("DIRECT_SETTINGS_ATTR")
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:19:38
   |
17 |     hits = []
18 |     if PATS["MODULE_CONST"].search(txt): hits.append("MODULE_CONST_FROM_SETTINGS")
19 |     if PATS["MODULE_CFG"].search(txt):   hits.append("MODULE_CFG_FROM_SETTINGS")
   |                                      ^
20 |     if PATS["DIRECT_ATTR"].search(txt):  hits.append("DIRECT_SETTINGS_ATTR")
21 |     if PATS["BARE_CALL"].search(txt):    hits.append("BARE_GET_SETTINGS")
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:20:39
   |
18 |     if PATS["MODULE_CONST"].search(txt): hits.append("MODULE_CONST_FROM_SETTINGS")
19 |     if PATS["MODULE_CFG"].search(txt):   hits.append("MODULE_CFG_FROM_SETTINGS")
20 |     if PATS["DIRECT_ATTR"].search(txt):  hits.append("DIRECT_SETTINGS_ATTR")
   |                                       ^
21 |     if PATS["BARE_CALL"].search(txt):    hits.append("BARE_GET_SETTINGS")
22 |     return hits
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:21:37
   |
19 |     if PATS["MODULE_CFG"].search(txt):   hits.append("MODULE_CFG_FROM_SETTINGS")
20 |     if PATS["DIRECT_ATTR"].search(txt):  hits.append("DIRECT_SETTINGS_ATTR")
21 |     if PATS["BARE_CALL"].search(txt):    hits.append("BARE_GET_SETTINGS")
   |                                     ^
22 |     return hits
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:27:53
   |
25 |     any_hits = False
26 |     for py in ROOT.rglob("*.py"):
27 |         if any(part in EXCLUDE for part in py.parts): continue
   |                                                     ^
28 |         if py.parts[0] not in INCLUDE: continue
29 |         hits = scan_file(py)
   |

E701 Multiple statements on one line (colon)
  --> tools/scan_import_time.py:28:38
   |
26 |     for py in ROOT.rglob("*.py"):
27 |         if any(part in EXCLUDE for part in py.parts): continue
28 |         if py.parts[0] not in INCLUDE: continue
   |                                      ^
29 |         hits = scan_file(py)
30 |         if hits:
   |

RUF100 [*] Unused `noqa` directive (non-enabled: `F401`, `F403`)
 --> trade_execution/__init__.py:3:50
  |
1 | """Public entrypoint exposing ai_trading.execution.live_trading."""
2 |
3 | from ai_trading.execution.live_trading import *  # noqa: F401,F403
  |                                                  ^^^^^^^^^^^^^^^^^
4 |
5 | __all__ = [name for name in dir() if not name.startswith("_")]
  |
help: Remove unused `noqa` directive

Found 5791 errors.
[*] 4729 fixable with the `--fix` option (197 hidden fixes can be enabled with the `--unsafe-fixes` option).
