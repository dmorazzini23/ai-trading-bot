From 7f6a8a0b3c9c1111111111111111111111111111 Mon Sep 17 00:00:00 2001
From: You <you@example.com>
Date: Tue, 12 Aug 2025 10:55:00 -0600
Subject: [PATCH] Thread runtime through screening; remove final ctx usage;
 dedupe tickers warning; ensure BotRuntime.tickers

--- a/ai_trading/core/bot_engine.py
+++ b/ai_trading/core/bot_engine.py
@@ -1,6 +1,9 @@
 import os
 import logging
 # ... existing imports ...
+
+# Warn once per process about missing tickers file
+_TICKERS_WARN_EMITTED = False
 
 _log = logging.getLogger(__name__)
 _HEARTBEAT_LOG_KEY = "HEARTBEAT"
@@ -8580,13 +8583,16 @@
- def screen_candidates(*, fallback_symbols=None):
-     candidates = load_candidate_universe(fallback_symbols=fallback_symbols)
-     return screen_universe(candidates, ctx)
+def screen_candidates(runtime, *, fallback_symbols=None):
+    """
+    Build candidate universe and run screening using the explicit runtime context.
+    """
+    candidates = load_candidate_universe(runtime, fallback_symbols=fallback_symbols)
+    return screen_universe(candidates, runtime)
 
- def screen_universe(candidates, ctx):
-     # ... existing filtering logic using ctx ...
+def screen_universe(candidates, runtime):
+    # ... existing filtering logic using runtime ...
     selected = []
     # filtering code remains the same; use `runtime` if context needed
     return selected
 
@@ -8833,15 +8839,22 @@ def load_candidate_universe(runtime, *, fallback_symbols=None):
-    tickers_path = os.path.join(runtime.cfg.repo_root, "tickers.csv") if hasattr(runtime.cfg, "repo_root") else "tickers.csv"
-    if not os.path.exists(tickers_path):
-        _log.warning("Tickers file %s not found. Using default tickers.", tickers_path)
-        return fallback_symbols or DEFAULT_TICKERS
+    tickers_path = os.path.join(runtime.cfg.repo_root, "tickers.csv") if hasattr(runtime.cfg, "repo_root") else "tickers.csv"
+    if not os.path.exists(tickers_path):
+        global _TICKERS_WARN_EMITTED
+        if not _TICKERS_WARN_EMITTED:
+            _log.warning("Tickers file %s not found. Using default tickers.", tickers_path)
+            _TICKERS_WARN_EMITTED = True
+        return fallback_symbols or DEFAULT_TICKERS
     # ... existing CSV load logic ...
 
@@ -9308,13 +9321,13 @@ def _prepare_run(runtime, state):
-    symbols = screen_candidates()
+    symbols = screen_candidates(runtime)
     _log.info("Number of screened candidates: %d", len(symbols))
     _log.info("CANDâ€¦ENED", extra={"tickers": symbols})
-    ctx.tickers = symbols
+    runtime.tickers = symbols
     # continue with the rest of the preparation
     return current_cash, regime_ok, symbols
 
--- a/ai_trading/core/runtime.py
+++ b/ai_trading/core/runtime.py
@@ -1,7 +1,10 @@
-from dataclasses import dataclass, field
+from dataclasses import dataclass, field
+from typing import List
 
 @dataclass
 class BotRuntime:
     cfg: "TradingConfig"
     params: dict = field(default_factory=dict)
+    # per-cycle selection that downstream code may read
+    tickers: List[str] = field(default_factory=list)
     # broker, account, positions, clocks, etc. may also be present
